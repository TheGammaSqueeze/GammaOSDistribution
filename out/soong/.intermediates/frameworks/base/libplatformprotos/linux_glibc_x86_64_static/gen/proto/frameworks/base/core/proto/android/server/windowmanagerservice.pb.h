// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/windowmanagerservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/app/statusbarmanager.pb.h"
#include "frameworks/base/core/proto/android/content/activityinfo.pb.h"
#include "frameworks/base/core/proto/android/content/configuration.pb.h"
#include "frameworks/base/core/proto/android/graphics/rect.pb.h"
#include "frameworks/base/core/proto/android/server/windowcontainerthumbnail.pb.h"
#include "frameworks/base/core/proto/android/server/surfaceanimator.pb.h"
#include "frameworks/base/core/proto/android/view/displaycutout.pb.h"
#include "frameworks/base/core/proto/android/view/displayinfo.pb.h"
#include "frameworks/base/core/proto/android/view/surface.pb.h"
#include "frameworks/base/core/proto/android/view/windowlayoutparams.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
#include "frameworks/base/core/proto/android/typedef.pb.h"
#include "frameworks/base/core/proto/android/view/surfacecontrol.pb.h"
#include "frameworks/base/core/proto/android/view/insetssource.pb.h"
#include "frameworks/base/core/proto/android/view/insetssourcecontrol.pb.h"
#include "frameworks/proto_logging/stats/enums/view/enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace wm {
class ActivityRecordProto;
class ActivityRecordProtoDefaultTypeInternal;
extern ActivityRecordProtoDefaultTypeInternal _ActivityRecordProto_default_instance_;
class AppTransitionProto;
class AppTransitionProtoDefaultTypeInternal;
extern AppTransitionProtoDefaultTypeInternal _AppTransitionProto_default_instance_;
class BarControllerProto;
class BarControllerProtoDefaultTypeInternal;
extern BarControllerProtoDefaultTypeInternal _BarControllerProto_default_instance_;
class ConfigurationContainerProto;
class ConfigurationContainerProtoDefaultTypeInternal;
extern ConfigurationContainerProtoDefaultTypeInternal _ConfigurationContainerProto_default_instance_;
class DisplayAreaChildProto;
class DisplayAreaChildProtoDefaultTypeInternal;
extern DisplayAreaChildProtoDefaultTypeInternal _DisplayAreaChildProto_default_instance_;
class DisplayAreaProto;
class DisplayAreaProtoDefaultTypeInternal;
extern DisplayAreaProtoDefaultTypeInternal _DisplayAreaProto_default_instance_;
class DisplayContentProto;
class DisplayContentProtoDefaultTypeInternal;
extern DisplayContentProtoDefaultTypeInternal _DisplayContentProto_default_instance_;
class DisplayFramesProto;
class DisplayFramesProtoDefaultTypeInternal;
extern DisplayFramesProtoDefaultTypeInternal _DisplayFramesProto_default_instance_;
class DisplayRotationProto;
class DisplayRotationProtoDefaultTypeInternal;
extern DisplayRotationProtoDefaultTypeInternal _DisplayRotationProto_default_instance_;
class DockedTaskDividerControllerProto;
class DockedTaskDividerControllerProtoDefaultTypeInternal;
extern DockedTaskDividerControllerProtoDefaultTypeInternal _DockedTaskDividerControllerProto_default_instance_;
class IdentifierProto;
class IdentifierProtoDefaultTypeInternal;
extern IdentifierProtoDefaultTypeInternal _IdentifierProto_default_instance_;
class ImeInsetsSourceProviderProto;
class ImeInsetsSourceProviderProtoDefaultTypeInternal;
extern ImeInsetsSourceProviderProtoDefaultTypeInternal _ImeInsetsSourceProviderProto_default_instance_;
class InsetsSourceProviderProto;
class InsetsSourceProviderProtoDefaultTypeInternal;
extern InsetsSourceProviderProtoDefaultTypeInternal _InsetsSourceProviderProto_default_instance_;
class KeyguardControllerProto;
class KeyguardControllerProtoDefaultTypeInternal;
extern KeyguardControllerProtoDefaultTypeInternal _KeyguardControllerProto_default_instance_;
class KeyguardOccludedProto;
class KeyguardOccludedProtoDefaultTypeInternal;
extern KeyguardOccludedProtoDefaultTypeInternal _KeyguardOccludedProto_default_instance_;
class KeyguardServiceDelegateProto;
class KeyguardServiceDelegateProtoDefaultTypeInternal;
extern KeyguardServiceDelegateProtoDefaultTypeInternal _KeyguardServiceDelegateProto_default_instance_;
class PinnedTaskControllerProto;
class PinnedTaskControllerProtoDefaultTypeInternal;
extern PinnedTaskControllerProtoDefaultTypeInternal _PinnedTaskControllerProto_default_instance_;
class RootWindowContainerProto;
class RootWindowContainerProtoDefaultTypeInternal;
extern RootWindowContainerProtoDefaultTypeInternal _RootWindowContainerProto_default_instance_;
class ScreenRotationAnimationProto;
class ScreenRotationAnimationProtoDefaultTypeInternal;
extern ScreenRotationAnimationProtoDefaultTypeInternal _ScreenRotationAnimationProto_default_instance_;
class TaskFragmentProto;
class TaskFragmentProtoDefaultTypeInternal;
extern TaskFragmentProtoDefaultTypeInternal _TaskFragmentProto_default_instance_;
class TaskProto;
class TaskProtoDefaultTypeInternal;
extern TaskProtoDefaultTypeInternal _TaskProto_default_instance_;
class WindowContainerChildProto;
class WindowContainerChildProtoDefaultTypeInternal;
extern WindowContainerChildProtoDefaultTypeInternal _WindowContainerChildProto_default_instance_;
class WindowContainerProto;
class WindowContainerProtoDefaultTypeInternal;
extern WindowContainerProtoDefaultTypeInternal _WindowContainerProto_default_instance_;
class WindowFramesProto;
class WindowFramesProtoDefaultTypeInternal;
extern WindowFramesProtoDefaultTypeInternal _WindowFramesProto_default_instance_;
class WindowManagerPolicyProto;
class WindowManagerPolicyProtoDefaultTypeInternal;
extern WindowManagerPolicyProtoDefaultTypeInternal _WindowManagerPolicyProto_default_instance_;
class WindowManagerServiceDumpProto;
class WindowManagerServiceDumpProtoDefaultTypeInternal;
extern WindowManagerServiceDumpProtoDefaultTypeInternal _WindowManagerServiceDumpProto_default_instance_;
class WindowOrientationListenerProto;
class WindowOrientationListenerProtoDefaultTypeInternal;
extern WindowOrientationListenerProtoDefaultTypeInternal _WindowOrientationListenerProto_default_instance_;
class WindowStateAnimatorProto;
class WindowStateAnimatorProtoDefaultTypeInternal;
extern WindowStateAnimatorProtoDefaultTypeInternal _WindowStateAnimatorProto_default_instance_;
class WindowStateProto;
class WindowStateProtoDefaultTypeInternal;
extern WindowStateProtoDefaultTypeInternal _WindowStateProto_default_instance_;
class WindowSurfaceControllerProto;
class WindowSurfaceControllerProtoDefaultTypeInternal;
extern WindowSurfaceControllerProtoDefaultTypeInternal _WindowSurfaceControllerProto_default_instance_;
class WindowTokenProto;
class WindowTokenProtoDefaultTypeInternal;
extern WindowTokenProtoDefaultTypeInternal _WindowTokenProto_default_instance_;
}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::wm::ActivityRecordProto* Arena::CreateMaybeMessage<::com::android::server::wm::ActivityRecordProto>(Arena*);
template<> ::com::android::server::wm::AppTransitionProto* Arena::CreateMaybeMessage<::com::android::server::wm::AppTransitionProto>(Arena*);
template<> ::com::android::server::wm::BarControllerProto* Arena::CreateMaybeMessage<::com::android::server::wm::BarControllerProto>(Arena*);
template<> ::com::android::server::wm::ConfigurationContainerProto* Arena::CreateMaybeMessage<::com::android::server::wm::ConfigurationContainerProto>(Arena*);
template<> ::com::android::server::wm::DisplayAreaChildProto* Arena::CreateMaybeMessage<::com::android::server::wm::DisplayAreaChildProto>(Arena*);
template<> ::com::android::server::wm::DisplayAreaProto* Arena::CreateMaybeMessage<::com::android::server::wm::DisplayAreaProto>(Arena*);
template<> ::com::android::server::wm::DisplayContentProto* Arena::CreateMaybeMessage<::com::android::server::wm::DisplayContentProto>(Arena*);
template<> ::com::android::server::wm::DisplayFramesProto* Arena::CreateMaybeMessage<::com::android::server::wm::DisplayFramesProto>(Arena*);
template<> ::com::android::server::wm::DisplayRotationProto* Arena::CreateMaybeMessage<::com::android::server::wm::DisplayRotationProto>(Arena*);
template<> ::com::android::server::wm::DockedTaskDividerControllerProto* Arena::CreateMaybeMessage<::com::android::server::wm::DockedTaskDividerControllerProto>(Arena*);
template<> ::com::android::server::wm::IdentifierProto* Arena::CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(Arena*);
template<> ::com::android::server::wm::ImeInsetsSourceProviderProto* Arena::CreateMaybeMessage<::com::android::server::wm::ImeInsetsSourceProviderProto>(Arena*);
template<> ::com::android::server::wm::InsetsSourceProviderProto* Arena::CreateMaybeMessage<::com::android::server::wm::InsetsSourceProviderProto>(Arena*);
template<> ::com::android::server::wm::KeyguardControllerProto* Arena::CreateMaybeMessage<::com::android::server::wm::KeyguardControllerProto>(Arena*);
template<> ::com::android::server::wm::KeyguardOccludedProto* Arena::CreateMaybeMessage<::com::android::server::wm::KeyguardOccludedProto>(Arena*);
template<> ::com::android::server::wm::KeyguardServiceDelegateProto* Arena::CreateMaybeMessage<::com::android::server::wm::KeyguardServiceDelegateProto>(Arena*);
template<> ::com::android::server::wm::PinnedTaskControllerProto* Arena::CreateMaybeMessage<::com::android::server::wm::PinnedTaskControllerProto>(Arena*);
template<> ::com::android::server::wm::RootWindowContainerProto* Arena::CreateMaybeMessage<::com::android::server::wm::RootWindowContainerProto>(Arena*);
template<> ::com::android::server::wm::ScreenRotationAnimationProto* Arena::CreateMaybeMessage<::com::android::server::wm::ScreenRotationAnimationProto>(Arena*);
template<> ::com::android::server::wm::TaskFragmentProto* Arena::CreateMaybeMessage<::com::android::server::wm::TaskFragmentProto>(Arena*);
template<> ::com::android::server::wm::TaskProto* Arena::CreateMaybeMessage<::com::android::server::wm::TaskProto>(Arena*);
template<> ::com::android::server::wm::WindowContainerChildProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowContainerChildProto>(Arena*);
template<> ::com::android::server::wm::WindowContainerProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(Arena*);
template<> ::com::android::server::wm::WindowFramesProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowFramesProto>(Arena*);
template<> ::com::android::server::wm::WindowManagerPolicyProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowManagerPolicyProto>(Arena*);
template<> ::com::android::server::wm::WindowManagerServiceDumpProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowManagerServiceDumpProto>(Arena*);
template<> ::com::android::server::wm::WindowOrientationListenerProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowOrientationListenerProto>(Arena*);
template<> ::com::android::server::wm::WindowStateAnimatorProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowStateAnimatorProto>(Arena*);
template<> ::com::android::server::wm::WindowStateProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(Arena*);
template<> ::com::android::server::wm::WindowSurfaceControllerProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowSurfaceControllerProto>(Arena*);
template<> ::com::android::server::wm::WindowTokenProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowTokenProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace wm {

enum KeyguardServiceDelegateProto_ScreenState : int {
  KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_OFF = 0,
  KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_TURNING_ON = 1,
  KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_ON = 2,
  KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_TURNING_OFF = 3
};
bool KeyguardServiceDelegateProto_ScreenState_IsValid(int value);
constexpr KeyguardServiceDelegateProto_ScreenState KeyguardServiceDelegateProto_ScreenState_ScreenState_MIN = KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_OFF;
constexpr KeyguardServiceDelegateProto_ScreenState KeyguardServiceDelegateProto_ScreenState_ScreenState_MAX = KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_TURNING_OFF;
constexpr int KeyguardServiceDelegateProto_ScreenState_ScreenState_ARRAYSIZE = KeyguardServiceDelegateProto_ScreenState_ScreenState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyguardServiceDelegateProto_ScreenState_descriptor();
template<typename T>
inline const std::string& KeyguardServiceDelegateProto_ScreenState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyguardServiceDelegateProto_ScreenState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyguardServiceDelegateProto_ScreenState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyguardServiceDelegateProto_ScreenState_descriptor(), enum_t_value);
}
inline bool KeyguardServiceDelegateProto_ScreenState_Parse(
    const std::string& name, KeyguardServiceDelegateProto_ScreenState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyguardServiceDelegateProto_ScreenState>(
    KeyguardServiceDelegateProto_ScreenState_descriptor(), name, value);
}
enum KeyguardServiceDelegateProto_InteractiveState : int {
  KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_SLEEP = 0,
  KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_WAKING = 1,
  KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_AWAKE = 2,
  KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_GOING_TO_SLEEP = 3
};
bool KeyguardServiceDelegateProto_InteractiveState_IsValid(int value);
constexpr KeyguardServiceDelegateProto_InteractiveState KeyguardServiceDelegateProto_InteractiveState_InteractiveState_MIN = KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_SLEEP;
constexpr KeyguardServiceDelegateProto_InteractiveState KeyguardServiceDelegateProto_InteractiveState_InteractiveState_MAX = KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_GOING_TO_SLEEP;
constexpr int KeyguardServiceDelegateProto_InteractiveState_InteractiveState_ARRAYSIZE = KeyguardServiceDelegateProto_InteractiveState_InteractiveState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyguardServiceDelegateProto_InteractiveState_descriptor();
template<typename T>
inline const std::string& KeyguardServiceDelegateProto_InteractiveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyguardServiceDelegateProto_InteractiveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyguardServiceDelegateProto_InteractiveState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyguardServiceDelegateProto_InteractiveState_descriptor(), enum_t_value);
}
inline bool KeyguardServiceDelegateProto_InteractiveState_Parse(
    const std::string& name, KeyguardServiceDelegateProto_InteractiveState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyguardServiceDelegateProto_InteractiveState>(
    KeyguardServiceDelegateProto_InteractiveState_descriptor(), name, value);
}
enum WindowManagerPolicyProto_UserRotationMode : int {
  WindowManagerPolicyProto_UserRotationMode_USER_ROTATION_FREE = 0,
  WindowManagerPolicyProto_UserRotationMode_USER_ROTATION_LOCKED = 1
};
bool WindowManagerPolicyProto_UserRotationMode_IsValid(int value);
constexpr WindowManagerPolicyProto_UserRotationMode WindowManagerPolicyProto_UserRotationMode_UserRotationMode_MIN = WindowManagerPolicyProto_UserRotationMode_USER_ROTATION_FREE;
constexpr WindowManagerPolicyProto_UserRotationMode WindowManagerPolicyProto_UserRotationMode_UserRotationMode_MAX = WindowManagerPolicyProto_UserRotationMode_USER_ROTATION_LOCKED;
constexpr int WindowManagerPolicyProto_UserRotationMode_UserRotationMode_ARRAYSIZE = WindowManagerPolicyProto_UserRotationMode_UserRotationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowManagerPolicyProto_UserRotationMode_descriptor();
template<typename T>
inline const std::string& WindowManagerPolicyProto_UserRotationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowManagerPolicyProto_UserRotationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowManagerPolicyProto_UserRotationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WindowManagerPolicyProto_UserRotationMode_descriptor(), enum_t_value);
}
inline bool WindowManagerPolicyProto_UserRotationMode_Parse(
    const std::string& name, WindowManagerPolicyProto_UserRotationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WindowManagerPolicyProto_UserRotationMode>(
    WindowManagerPolicyProto_UserRotationMode_descriptor(), name, value);
}
enum AppTransitionProto_AppState : int {
  AppTransitionProto_AppState_APP_STATE_IDLE = 0,
  AppTransitionProto_AppState_APP_STATE_READY = 1,
  AppTransitionProto_AppState_APP_STATE_RUNNING = 2,
  AppTransitionProto_AppState_APP_STATE_TIMEOUT = 3
};
bool AppTransitionProto_AppState_IsValid(int value);
constexpr AppTransitionProto_AppState AppTransitionProto_AppState_AppState_MIN = AppTransitionProto_AppState_APP_STATE_IDLE;
constexpr AppTransitionProto_AppState AppTransitionProto_AppState_AppState_MAX = AppTransitionProto_AppState_APP_STATE_TIMEOUT;
constexpr int AppTransitionProto_AppState_AppState_ARRAYSIZE = AppTransitionProto_AppState_AppState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppTransitionProto_AppState_descriptor();
template<typename T>
inline const std::string& AppTransitionProto_AppState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppTransitionProto_AppState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppTransitionProto_AppState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AppTransitionProto_AppState_descriptor(), enum_t_value);
}
inline bool AppTransitionProto_AppState_Parse(
    const std::string& name, AppTransitionProto_AppState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AppTransitionProto_AppState>(
    AppTransitionProto_AppState_descriptor(), name, value);
}
enum WindowStateAnimatorProto_DrawState : int {
  WindowStateAnimatorProto_DrawState_NO_SURFACE = 0,
  WindowStateAnimatorProto_DrawState_DRAW_PENDING = 1,
  WindowStateAnimatorProto_DrawState_COMMIT_DRAW_PENDING = 2,
  WindowStateAnimatorProto_DrawState_READY_TO_SHOW = 3,
  WindowStateAnimatorProto_DrawState_HAS_DRAWN = 4
};
bool WindowStateAnimatorProto_DrawState_IsValid(int value);
constexpr WindowStateAnimatorProto_DrawState WindowStateAnimatorProto_DrawState_DrawState_MIN = WindowStateAnimatorProto_DrawState_NO_SURFACE;
constexpr WindowStateAnimatorProto_DrawState WindowStateAnimatorProto_DrawState_DrawState_MAX = WindowStateAnimatorProto_DrawState_HAS_DRAWN;
constexpr int WindowStateAnimatorProto_DrawState_DrawState_ARRAYSIZE = WindowStateAnimatorProto_DrawState_DrawState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowStateAnimatorProto_DrawState_descriptor();
template<typename T>
inline const std::string& WindowStateAnimatorProto_DrawState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowStateAnimatorProto_DrawState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowStateAnimatorProto_DrawState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WindowStateAnimatorProto_DrawState_descriptor(), enum_t_value);
}
inline bool WindowStateAnimatorProto_DrawState_Parse(
    const std::string& name, WindowStateAnimatorProto_DrawState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WindowStateAnimatorProto_DrawState>(
    WindowStateAnimatorProto_DrawState_descriptor(), name, value);
}
// ===================================================================

class WindowManagerServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowManagerServiceDumpProto) */ {
 public:
  WindowManagerServiceDumpProto();
  virtual ~WindowManagerServiceDumpProto();

  WindowManagerServiceDumpProto(const WindowManagerServiceDumpProto& from);
  WindowManagerServiceDumpProto(WindowManagerServiceDumpProto&& from) noexcept
    : WindowManagerServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline WindowManagerServiceDumpProto& operator=(const WindowManagerServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowManagerServiceDumpProto& operator=(WindowManagerServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowManagerServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowManagerServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const WindowManagerServiceDumpProto*>(
               &_WindowManagerServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WindowManagerServiceDumpProto& a, WindowManagerServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowManagerServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowManagerServiceDumpProto* New() const final {
    return CreateMaybeMessage<WindowManagerServiceDumpProto>(nullptr);
  }

  WindowManagerServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowManagerServiceDumpProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowManagerServiceDumpProto& from);
  void MergeFrom(const WindowManagerServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowManagerServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowManagerServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFocusedAppFieldNumber = 4,
    kPolicyFieldNumber = 1,
    kRootWindowContainerFieldNumber = 2,
    kFocusedWindowFieldNumber = 3,
    kInputMethodWindowFieldNumber = 5,
    kRotationFieldNumber = 7,
    kLastOrientationFieldNumber = 8,
    kDisplayFrozenFieldNumber = 6,
    kHardKeyboardAvailableFieldNumber = 10,
    kFocusedDisplayIdFieldNumber = 9,
  };
  // optional string focused_app = 4;
  bool has_focused_app() const;
  void clear_focused_app();
  const std::string& focused_app() const;
  void set_focused_app(const std::string& value);
  void set_focused_app(std::string&& value);
  void set_focused_app(const char* value);
  void set_focused_app(const char* value, size_t size);
  std::string* mutable_focused_app();
  std::string* release_focused_app();
  void set_allocated_focused_app(std::string* focused_app);

  // optional .com.android.server.wm.WindowManagerPolicyProto policy = 1;
  bool has_policy() const;
  void clear_policy();
  const ::com::android::server::wm::WindowManagerPolicyProto& policy() const;
  ::com::android::server::wm::WindowManagerPolicyProto* release_policy();
  ::com::android::server::wm::WindowManagerPolicyProto* mutable_policy();
  void set_allocated_policy(::com::android::server::wm::WindowManagerPolicyProto* policy);

  // optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
  bool has_root_window_container() const;
  void clear_root_window_container();
  const ::com::android::server::wm::RootWindowContainerProto& root_window_container() const;
  ::com::android::server::wm::RootWindowContainerProto* release_root_window_container();
  ::com::android::server::wm::RootWindowContainerProto* mutable_root_window_container();
  void set_allocated_root_window_container(::com::android::server::wm::RootWindowContainerProto* root_window_container);

  // optional .com.android.server.wm.IdentifierProto focused_window = 3;
  bool has_focused_window() const;
  void clear_focused_window();
  const ::com::android::server::wm::IdentifierProto& focused_window() const;
  ::com::android::server::wm::IdentifierProto* release_focused_window();
  ::com::android::server::wm::IdentifierProto* mutable_focused_window();
  void set_allocated_focused_window(::com::android::server::wm::IdentifierProto* focused_window);

  // optional .com.android.server.wm.IdentifierProto input_method_window = 5;
  bool has_input_method_window() const;
  void clear_input_method_window();
  const ::com::android::server::wm::IdentifierProto& input_method_window() const;
  ::com::android::server::wm::IdentifierProto* release_input_method_window();
  ::com::android::server::wm::IdentifierProto* mutable_input_method_window();
  void set_allocated_input_method_window(::com::android::server::wm::IdentifierProto* input_method_window);

  // optional int32 rotation = 7 [deprecated = true, (.android.typedef) = "android.view.Surface.Rotation"];
  PROTOBUF_DEPRECATED bool has_rotation() const;
  PROTOBUF_DEPRECATED void clear_rotation();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 rotation() const;
  PROTOBUF_DEPRECATED void set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 last_orientation = 8 [deprecated = true, (.android.typedef) = "android.content.pm.ActivityInfo.ScreenOrientation"];
  PROTOBUF_DEPRECATED bool has_last_orientation() const;
  PROTOBUF_DEPRECATED void clear_last_orientation();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 last_orientation() const;
  PROTOBUF_DEPRECATED void set_last_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool display_frozen = 6;
  bool has_display_frozen() const;
  void clear_display_frozen();
  bool display_frozen() const;
  void set_display_frozen(bool value);

  // optional bool hard_keyboard_available = 10;
  bool has_hard_keyboard_available() const;
  void clear_hard_keyboard_available();
  bool hard_keyboard_available() const;
  void set_hard_keyboard_available(bool value);

  // optional int32 focused_display_id = 9;
  bool has_focused_display_id() const;
  void clear_focused_display_id();
  ::PROTOBUF_NAMESPACE_ID::int32 focused_display_id() const;
  void set_focused_display_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowManagerServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr focused_app_;
  ::com::android::server::wm::WindowManagerPolicyProto* policy_;
  ::com::android::server::wm::RootWindowContainerProto* root_window_container_;
  ::com::android::server::wm::IdentifierProto* focused_window_;
  ::com::android::server::wm::IdentifierProto* input_method_window_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_orientation_;
  bool display_frozen_;
  bool hard_keyboard_available_;
  ::PROTOBUF_NAMESPACE_ID::int32 focused_display_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class RootWindowContainerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.RootWindowContainerProto) */ {
 public:
  RootWindowContainerProto();
  virtual ~RootWindowContainerProto();

  RootWindowContainerProto(const RootWindowContainerProto& from);
  RootWindowContainerProto(RootWindowContainerProto&& from) noexcept
    : RootWindowContainerProto() {
    *this = ::std::move(from);
  }

  inline RootWindowContainerProto& operator=(const RootWindowContainerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootWindowContainerProto& operator=(RootWindowContainerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootWindowContainerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootWindowContainerProto* internal_default_instance() {
    return reinterpret_cast<const RootWindowContainerProto*>(
               &_RootWindowContainerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RootWindowContainerProto& a, RootWindowContainerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RootWindowContainerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootWindowContainerProto* New() const final {
    return CreateMaybeMessage<RootWindowContainerProto>(nullptr);
  }

  RootWindowContainerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootWindowContainerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootWindowContainerProto& from);
  void MergeFrom(const RootWindowContainerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootWindowContainerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.RootWindowContainerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplaysFieldNumber = 2,
    kWindowsFieldNumber = 4,
    kPendingActivitiesFieldNumber = 7,
    kWindowContainerFieldNumber = 1,
    kKeyguardControllerFieldNumber = 5,
    kIsHomeRecentsComponentFieldNumber = 6,
    kDefaultMinSizeResizableTaskFieldNumber = 8,
  };
  // repeated .com.android.server.wm.DisplayContentProto displays = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int displays_size() const;
  PROTOBUF_DEPRECATED void clear_displays();
  PROTOBUF_DEPRECATED ::com::android::server::wm::DisplayContentProto* mutable_displays(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayContentProto >*
      mutable_displays();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::DisplayContentProto& displays(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::DisplayContentProto* add_displays();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayContentProto >&
      displays() const;

  // repeated .com.android.server.wm.WindowStateProto windows = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int windows_size() const;
  PROTOBUF_DEPRECATED void clear_windows();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowStateProto* mutable_windows(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >*
      mutable_windows();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowStateProto& windows(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowStateProto* add_windows();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >&
      windows() const;

  // repeated .com.android.server.wm.IdentifierProto pending_activities = 7 [deprecated = true];
  PROTOBUF_DEPRECATED int pending_activities_size() const;
  PROTOBUF_DEPRECATED void clear_pending_activities();
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* mutable_pending_activities(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
      mutable_pending_activities();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::IdentifierProto& pending_activities(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* add_pending_activities();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
      pending_activities() const;

  // optional .com.android.server.wm.WindowContainerProto window_container = 1;
  bool has_window_container() const;
  void clear_window_container();
  const ::com::android::server::wm::WindowContainerProto& window_container() const;
  ::com::android::server::wm::WindowContainerProto* release_window_container();
  ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional .com.android.server.wm.KeyguardControllerProto keyguard_controller = 5;
  bool has_keyguard_controller() const;
  void clear_keyguard_controller();
  const ::com::android::server::wm::KeyguardControllerProto& keyguard_controller() const;
  ::com::android::server::wm::KeyguardControllerProto* release_keyguard_controller();
  ::com::android::server::wm::KeyguardControllerProto* mutable_keyguard_controller();
  void set_allocated_keyguard_controller(::com::android::server::wm::KeyguardControllerProto* keyguard_controller);

  // optional bool is_home_recents_component = 6;
  bool has_is_home_recents_component() const;
  void clear_is_home_recents_component();
  bool is_home_recents_component() const;
  void set_is_home_recents_component(bool value);

  // optional int32 default_min_size_resizable_task = 8;
  bool has_default_min_size_resizable_task() const;
  void clear_default_min_size_resizable_task();
  ::PROTOBUF_NAMESPACE_ID::int32 default_min_size_resizable_task() const;
  void set_default_min_size_resizable_task(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.RootWindowContainerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayContentProto > displays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto > windows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto > pending_activities_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  ::com::android::server::wm::KeyguardControllerProto* keyguard_controller_;
  bool is_home_recents_component_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_min_size_resizable_task_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class BarControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.BarControllerProto) */ {
 public:
  BarControllerProto();
  virtual ~BarControllerProto();

  BarControllerProto(const BarControllerProto& from);
  BarControllerProto(BarControllerProto&& from) noexcept
    : BarControllerProto() {
    *this = ::std::move(from);
  }

  inline BarControllerProto& operator=(const BarControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarControllerProto& operator=(BarControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BarControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BarControllerProto* internal_default_instance() {
    return reinterpret_cast<const BarControllerProto*>(
               &_BarControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BarControllerProto& a, BarControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BarControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarControllerProto* New() const final {
    return CreateMaybeMessage<BarControllerProto>(nullptr);
  }

  BarControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarControllerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BarControllerProto& from);
  void MergeFrom(const BarControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BarControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.BarControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kTransientStateFieldNumber = 2,
  };
  // optional .android.app.StatusBarManagerProto.WindowState state = 1;
  bool has_state() const;
  void clear_state();
  ::android::app::StatusBarManagerProto_WindowState state() const;
  void set_state(::android::app::StatusBarManagerProto_WindowState value);

  // optional .android.app.StatusBarManagerProto.TransientWindowState transient_state = 2;
  bool has_transient_state() const;
  void clear_transient_state();
  ::android::app::StatusBarManagerProto_TransientWindowState transient_state() const;
  void set_transient_state(::android::app::StatusBarManagerProto_TransientWindowState value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.BarControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int state_;
  int transient_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowOrientationListenerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowOrientationListenerProto) */ {
 public:
  WindowOrientationListenerProto();
  virtual ~WindowOrientationListenerProto();

  WindowOrientationListenerProto(const WindowOrientationListenerProto& from);
  WindowOrientationListenerProto(WindowOrientationListenerProto&& from) noexcept
    : WindowOrientationListenerProto() {
    *this = ::std::move(from);
  }

  inline WindowOrientationListenerProto& operator=(const WindowOrientationListenerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowOrientationListenerProto& operator=(WindowOrientationListenerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowOrientationListenerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowOrientationListenerProto* internal_default_instance() {
    return reinterpret_cast<const WindowOrientationListenerProto*>(
               &_WindowOrientationListenerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WindowOrientationListenerProto& a, WindowOrientationListenerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowOrientationListenerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowOrientationListenerProto* New() const final {
    return CreateMaybeMessage<WindowOrientationListenerProto>(nullptr);
  }

  WindowOrientationListenerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowOrientationListenerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowOrientationListenerProto& from);
  void MergeFrom(const WindowOrientationListenerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowOrientationListenerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowOrientationListenerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional .android.view.SurfaceProto.Rotation rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  ::android::view::SurfaceProto_Rotation rotation() const;
  void set_rotation(::android::view::SurfaceProto_Rotation value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowOrientationListenerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  int rotation_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class KeyguardServiceDelegateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.KeyguardServiceDelegateProto) */ {
 public:
  KeyguardServiceDelegateProto();
  virtual ~KeyguardServiceDelegateProto();

  KeyguardServiceDelegateProto(const KeyguardServiceDelegateProto& from);
  KeyguardServiceDelegateProto(KeyguardServiceDelegateProto&& from) noexcept
    : KeyguardServiceDelegateProto() {
    *this = ::std::move(from);
  }

  inline KeyguardServiceDelegateProto& operator=(const KeyguardServiceDelegateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyguardServiceDelegateProto& operator=(KeyguardServiceDelegateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyguardServiceDelegateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyguardServiceDelegateProto* internal_default_instance() {
    return reinterpret_cast<const KeyguardServiceDelegateProto*>(
               &_KeyguardServiceDelegateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KeyguardServiceDelegateProto& a, KeyguardServiceDelegateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyguardServiceDelegateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyguardServiceDelegateProto* New() const final {
    return CreateMaybeMessage<KeyguardServiceDelegateProto>(nullptr);
  }

  KeyguardServiceDelegateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyguardServiceDelegateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyguardServiceDelegateProto& from);
  void MergeFrom(const KeyguardServiceDelegateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyguardServiceDelegateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.KeyguardServiceDelegateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KeyguardServiceDelegateProto_ScreenState ScreenState;
  static constexpr ScreenState SCREEN_STATE_OFF =
    KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_OFF;
  static constexpr ScreenState SCREEN_STATE_TURNING_ON =
    KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_TURNING_ON;
  static constexpr ScreenState SCREEN_STATE_ON =
    KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_ON;
  static constexpr ScreenState SCREEN_STATE_TURNING_OFF =
    KeyguardServiceDelegateProto_ScreenState_SCREEN_STATE_TURNING_OFF;
  static inline bool ScreenState_IsValid(int value) {
    return KeyguardServiceDelegateProto_ScreenState_IsValid(value);
  }
  static constexpr ScreenState ScreenState_MIN =
    KeyguardServiceDelegateProto_ScreenState_ScreenState_MIN;
  static constexpr ScreenState ScreenState_MAX =
    KeyguardServiceDelegateProto_ScreenState_ScreenState_MAX;
  static constexpr int ScreenState_ARRAYSIZE =
    KeyguardServiceDelegateProto_ScreenState_ScreenState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScreenState_descriptor() {
    return KeyguardServiceDelegateProto_ScreenState_descriptor();
  }
  template<typename T>
  static inline const std::string& ScreenState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScreenState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScreenState_Name.");
    return KeyguardServiceDelegateProto_ScreenState_Name(enum_t_value);
  }
  static inline bool ScreenState_Parse(const std::string& name,
      ScreenState* value) {
    return KeyguardServiceDelegateProto_ScreenState_Parse(name, value);
  }

  typedef KeyguardServiceDelegateProto_InteractiveState InteractiveState;
  static constexpr InteractiveState INTERACTIVE_STATE_SLEEP =
    KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_SLEEP;
  static constexpr InteractiveState INTERACTIVE_STATE_WAKING =
    KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_WAKING;
  static constexpr InteractiveState INTERACTIVE_STATE_AWAKE =
    KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_AWAKE;
  static constexpr InteractiveState INTERACTIVE_STATE_GOING_TO_SLEEP =
    KeyguardServiceDelegateProto_InteractiveState_INTERACTIVE_STATE_GOING_TO_SLEEP;
  static inline bool InteractiveState_IsValid(int value) {
    return KeyguardServiceDelegateProto_InteractiveState_IsValid(value);
  }
  static constexpr InteractiveState InteractiveState_MIN =
    KeyguardServiceDelegateProto_InteractiveState_InteractiveState_MIN;
  static constexpr InteractiveState InteractiveState_MAX =
    KeyguardServiceDelegateProto_InteractiveState_InteractiveState_MAX;
  static constexpr int InteractiveState_ARRAYSIZE =
    KeyguardServiceDelegateProto_InteractiveState_InteractiveState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InteractiveState_descriptor() {
    return KeyguardServiceDelegateProto_InteractiveState_descriptor();
  }
  template<typename T>
  static inline const std::string& InteractiveState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InteractiveState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InteractiveState_Name.");
    return KeyguardServiceDelegateProto_InteractiveState_Name(enum_t_value);
  }
  static inline bool InteractiveState_Parse(const std::string& name,
      InteractiveState* value) {
    return KeyguardServiceDelegateProto_InteractiveState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShowingFieldNumber = 1,
    kOccludedFieldNumber = 2,
    kSecureFieldNumber = 3,
    kScreenStateFieldNumber = 4,
    kInteractiveStateFieldNumber = 5,
  };
  // optional bool showing = 1;
  bool has_showing() const;
  void clear_showing();
  bool showing() const;
  void set_showing(bool value);

  // optional bool occluded = 2;
  bool has_occluded() const;
  void clear_occluded();
  bool occluded() const;
  void set_occluded(bool value);

  // optional bool secure = 3;
  bool has_secure() const;
  void clear_secure();
  bool secure() const;
  void set_secure(bool value);

  // optional .com.android.server.wm.KeyguardServiceDelegateProto.ScreenState screen_state = 4;
  bool has_screen_state() const;
  void clear_screen_state();
  ::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState screen_state() const;
  void set_screen_state(::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState value);

  // optional .com.android.server.wm.KeyguardServiceDelegateProto.InteractiveState interactive_state = 5;
  bool has_interactive_state() const;
  void clear_interactive_state();
  ::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState interactive_state() const;
  void set_interactive_state(::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.KeyguardServiceDelegateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool showing_;
  bool occluded_;
  bool secure_;
  int screen_state_;
  int interactive_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class KeyguardControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.KeyguardControllerProto) */ {
 public:
  KeyguardControllerProto();
  virtual ~KeyguardControllerProto();

  KeyguardControllerProto(const KeyguardControllerProto& from);
  KeyguardControllerProto(KeyguardControllerProto&& from) noexcept
    : KeyguardControllerProto() {
    *this = ::std::move(from);
  }

  inline KeyguardControllerProto& operator=(const KeyguardControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyguardControllerProto& operator=(KeyguardControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyguardControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyguardControllerProto* internal_default_instance() {
    return reinterpret_cast<const KeyguardControllerProto*>(
               &_KeyguardControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KeyguardControllerProto& a, KeyguardControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyguardControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyguardControllerProto* New() const final {
    return CreateMaybeMessage<KeyguardControllerProto>(nullptr);
  }

  KeyguardControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyguardControllerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyguardControllerProto& from);
  void MergeFrom(const KeyguardControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyguardControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.KeyguardControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyguardOccludedStatesFieldNumber = 2,
    kKeyguardShowingFieldNumber = 1,
    kAodShowingFieldNumber = 3,
  };
  // repeated .com.android.server.wm.KeyguardOccludedProto keyguard_occluded_states = 2;
  int keyguard_occluded_states_size() const;
  void clear_keyguard_occluded_states();
  ::com::android::server::wm::KeyguardOccludedProto* mutable_keyguard_occluded_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::KeyguardOccludedProto >*
      mutable_keyguard_occluded_states();
  const ::com::android::server::wm::KeyguardOccludedProto& keyguard_occluded_states(int index) const;
  ::com::android::server::wm::KeyguardOccludedProto* add_keyguard_occluded_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::KeyguardOccludedProto >&
      keyguard_occluded_states() const;

  // optional bool keyguard_showing = 1;
  bool has_keyguard_showing() const;
  void clear_keyguard_showing();
  bool keyguard_showing() const;
  void set_keyguard_showing(bool value);

  // optional bool aod_showing = 3;
  bool has_aod_showing() const;
  void clear_aod_showing();
  bool aod_showing() const;
  void set_aod_showing(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.KeyguardControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::KeyguardOccludedProto > keyguard_occluded_states_;
  bool keyguard_showing_;
  bool aod_showing_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class KeyguardOccludedProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.KeyguardOccludedProto) */ {
 public:
  KeyguardOccludedProto();
  virtual ~KeyguardOccludedProto();

  KeyguardOccludedProto(const KeyguardOccludedProto& from);
  KeyguardOccludedProto(KeyguardOccludedProto&& from) noexcept
    : KeyguardOccludedProto() {
    *this = ::std::move(from);
  }

  inline KeyguardOccludedProto& operator=(const KeyguardOccludedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyguardOccludedProto& operator=(KeyguardOccludedProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyguardOccludedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyguardOccludedProto* internal_default_instance() {
    return reinterpret_cast<const KeyguardOccludedProto*>(
               &_KeyguardOccludedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KeyguardOccludedProto& a, KeyguardOccludedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyguardOccludedProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyguardOccludedProto* New() const final {
    return CreateMaybeMessage<KeyguardOccludedProto>(nullptr);
  }

  KeyguardOccludedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyguardOccludedProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyguardOccludedProto& from);
  void MergeFrom(const KeyguardOccludedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyguardOccludedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.KeyguardOccludedProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayIdFieldNumber = 1,
    kKeyguardOccludedFieldNumber = 2,
  };
  // optional int32 display_id = 1;
  bool has_display_id() const;
  void clear_display_id();
  ::PROTOBUF_NAMESPACE_ID::int32 display_id() const;
  void set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool keyguard_occluded = 2;
  bool has_keyguard_occluded() const;
  void clear_keyguard_occluded();
  bool keyguard_occluded() const;
  void set_keyguard_occluded(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.KeyguardOccludedProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_id_;
  bool keyguard_occluded_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowManagerPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowManagerPolicyProto) */ {
 public:
  WindowManagerPolicyProto();
  virtual ~WindowManagerPolicyProto();

  WindowManagerPolicyProto(const WindowManagerPolicyProto& from);
  WindowManagerPolicyProto(WindowManagerPolicyProto&& from) noexcept
    : WindowManagerPolicyProto() {
    *this = ::std::move(from);
  }

  inline WindowManagerPolicyProto& operator=(const WindowManagerPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowManagerPolicyProto& operator=(WindowManagerPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowManagerPolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowManagerPolicyProto* internal_default_instance() {
    return reinterpret_cast<const WindowManagerPolicyProto*>(
               &_WindowManagerPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WindowManagerPolicyProto& a, WindowManagerPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowManagerPolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowManagerPolicyProto* New() const final {
    return CreateMaybeMessage<WindowManagerPolicyProto>(nullptr);
  }

  WindowManagerPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowManagerPolicyProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowManagerPolicyProto& from);
  void MergeFrom(const WindowManagerPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowManagerPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowManagerPolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WindowManagerPolicyProto_UserRotationMode UserRotationMode;
  static constexpr UserRotationMode USER_ROTATION_FREE =
    WindowManagerPolicyProto_UserRotationMode_USER_ROTATION_FREE;
  static constexpr UserRotationMode USER_ROTATION_LOCKED =
    WindowManagerPolicyProto_UserRotationMode_USER_ROTATION_LOCKED;
  static inline bool UserRotationMode_IsValid(int value) {
    return WindowManagerPolicyProto_UserRotationMode_IsValid(value);
  }
  static constexpr UserRotationMode UserRotationMode_MIN =
    WindowManagerPolicyProto_UserRotationMode_UserRotationMode_MIN;
  static constexpr UserRotationMode UserRotationMode_MAX =
    WindowManagerPolicyProto_UserRotationMode_UserRotationMode_MAX;
  static constexpr int UserRotationMode_ARRAYSIZE =
    WindowManagerPolicyProto_UserRotationMode_UserRotationMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UserRotationMode_descriptor() {
    return WindowManagerPolicyProto_UserRotationMode_descriptor();
  }
  template<typename T>
  static inline const std::string& UserRotationMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserRotationMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserRotationMode_Name.");
    return WindowManagerPolicyProto_UserRotationMode_Name(enum_t_value);
  }
  static inline bool UserRotationMode_Parse(const std::string& name,
      UserRotationMode* value) {
    return WindowManagerPolicyProto_UserRotationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFocusedAppTokenFieldNumber = 8,
    kFocusedWindowFieldNumber = 9,
    kTopFullscreenOpaqueWindowFieldNumber = 10,
    kTopFullscreenOpaqueOrDimmingWindowFieldNumber = 11,
    kStatusBarFieldNumber = 17,
    kNavigationBarFieldNumber = 18,
    kOrientationListenerFieldNumber = 19,
    kKeyguardDelegateFieldNumber = 20,
    kLastSystemUiFlagsFieldNumber = 1,
    kRotationModeFieldNumber = 2,
    kRotationFieldNumber = 3,
    kScreenOnFullyFieldNumber = 5,
    kKeyguardDrawCompleteFieldNumber = 6,
    kWindowManagerDrawCompleteFieldNumber = 7,
    kKeyguardOccludedFieldNumber = 12,
    kKeyguardOccludedChangedFieldNumber = 13,
    kKeyguardOccludedPendingFieldNumber = 14,
    kForceStatusBarFieldNumber = 15,
    kForceStatusBarFromKeyguardFieldNumber = 16,
    kOrientationFieldNumber = 4,
  };
  // optional string focused_app_token = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_focused_app_token() const;
  PROTOBUF_DEPRECATED void clear_focused_app_token();
  PROTOBUF_DEPRECATED const std::string& focused_app_token() const;
  PROTOBUF_DEPRECATED void set_focused_app_token(const std::string& value);
  PROTOBUF_DEPRECATED void set_focused_app_token(std::string&& value);
  PROTOBUF_DEPRECATED void set_focused_app_token(const char* value);
  PROTOBUF_DEPRECATED void set_focused_app_token(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_focused_app_token();
  PROTOBUF_DEPRECATED std::string* release_focused_app_token();
  PROTOBUF_DEPRECATED void set_allocated_focused_app_token(std::string* focused_app_token);

  // optional .com.android.server.wm.IdentifierProto focused_window = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_focused_window() const;
  PROTOBUF_DEPRECATED void clear_focused_window();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::IdentifierProto& focused_window() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* release_focused_window();
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* mutable_focused_window();
  PROTOBUF_DEPRECATED void set_allocated_focused_window(::com::android::server::wm::IdentifierProto* focused_window);

  // optional .com.android.server.wm.IdentifierProto top_fullscreen_opaque_window = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_top_fullscreen_opaque_window() const;
  PROTOBUF_DEPRECATED void clear_top_fullscreen_opaque_window();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::IdentifierProto& top_fullscreen_opaque_window() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* release_top_fullscreen_opaque_window();
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* mutable_top_fullscreen_opaque_window();
  PROTOBUF_DEPRECATED void set_allocated_top_fullscreen_opaque_window(::com::android::server::wm::IdentifierProto* top_fullscreen_opaque_window);

  // optional .com.android.server.wm.IdentifierProto top_fullscreen_opaque_or_dimming_window = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_top_fullscreen_opaque_or_dimming_window() const;
  PROTOBUF_DEPRECATED void clear_top_fullscreen_opaque_or_dimming_window();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::IdentifierProto& top_fullscreen_opaque_or_dimming_window() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* release_top_fullscreen_opaque_or_dimming_window();
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* mutable_top_fullscreen_opaque_or_dimming_window();
  PROTOBUF_DEPRECATED void set_allocated_top_fullscreen_opaque_or_dimming_window(::com::android::server::wm::IdentifierProto* top_fullscreen_opaque_or_dimming_window);

  // optional .com.android.server.wm.BarControllerProto status_bar = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_status_bar() const;
  PROTOBUF_DEPRECATED void clear_status_bar();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::BarControllerProto& status_bar() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::BarControllerProto* release_status_bar();
  PROTOBUF_DEPRECATED ::com::android::server::wm::BarControllerProto* mutable_status_bar();
  PROTOBUF_DEPRECATED void set_allocated_status_bar(::com::android::server::wm::BarControllerProto* status_bar);

  // optional .com.android.server.wm.BarControllerProto navigation_bar = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_navigation_bar() const;
  PROTOBUF_DEPRECATED void clear_navigation_bar();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::BarControllerProto& navigation_bar() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::BarControllerProto* release_navigation_bar();
  PROTOBUF_DEPRECATED ::com::android::server::wm::BarControllerProto* mutable_navigation_bar();
  PROTOBUF_DEPRECATED void set_allocated_navigation_bar(::com::android::server::wm::BarControllerProto* navigation_bar);

  // optional .com.android.server.wm.WindowOrientationListenerProto orientation_listener = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_orientation_listener() const;
  PROTOBUF_DEPRECATED void clear_orientation_listener();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowOrientationListenerProto& orientation_listener() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowOrientationListenerProto* release_orientation_listener();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowOrientationListenerProto* mutable_orientation_listener();
  PROTOBUF_DEPRECATED void set_allocated_orientation_listener(::com::android::server::wm::WindowOrientationListenerProto* orientation_listener);

  // optional .com.android.server.wm.KeyguardServiceDelegateProto keyguard_delegate = 20;
  bool has_keyguard_delegate() const;
  void clear_keyguard_delegate();
  const ::com::android::server::wm::KeyguardServiceDelegateProto& keyguard_delegate() const;
  ::com::android::server::wm::KeyguardServiceDelegateProto* release_keyguard_delegate();
  ::com::android::server::wm::KeyguardServiceDelegateProto* mutable_keyguard_delegate();
  void set_allocated_keyguard_delegate(::com::android::server::wm::KeyguardServiceDelegateProto* keyguard_delegate);

  // optional int32 last_system_ui_flags = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_last_system_ui_flags() const;
  PROTOBUF_DEPRECATED void clear_last_system_ui_flags();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 last_system_ui_flags() const;
  PROTOBUF_DEPRECATED void set_last_system_ui_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .com.android.server.wm.WindowManagerPolicyProto.UserRotationMode rotation_mode = 2;
  bool has_rotation_mode() const;
  void clear_rotation_mode();
  ::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode rotation_mode() const;
  void set_rotation_mode(::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode value);

  // optional .android.view.SurfaceProto.Rotation rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  ::android::view::SurfaceProto_Rotation rotation() const;
  void set_rotation(::android::view::SurfaceProto_Rotation value);

  // optional bool screen_on_fully = 5;
  bool has_screen_on_fully() const;
  void clear_screen_on_fully();
  bool screen_on_fully() const;
  void set_screen_on_fully(bool value);

  // optional bool keyguard_draw_complete = 6;
  bool has_keyguard_draw_complete() const;
  void clear_keyguard_draw_complete();
  bool keyguard_draw_complete() const;
  void set_keyguard_draw_complete(bool value);

  // optional bool window_manager_draw_complete = 7;
  bool has_window_manager_draw_complete() const;
  void clear_window_manager_draw_complete();
  bool window_manager_draw_complete() const;
  void set_window_manager_draw_complete(bool value);

  // optional bool keyguard_occluded = 12;
  bool has_keyguard_occluded() const;
  void clear_keyguard_occluded();
  bool keyguard_occluded() const;
  void set_keyguard_occluded(bool value);

  // optional bool keyguard_occluded_changed = 13;
  bool has_keyguard_occluded_changed() const;
  void clear_keyguard_occluded_changed();
  bool keyguard_occluded_changed() const;
  void set_keyguard_occluded_changed(bool value);

  // optional bool keyguard_occluded_pending = 14;
  bool has_keyguard_occluded_pending() const;
  void clear_keyguard_occluded_pending();
  bool keyguard_occluded_pending() const;
  void set_keyguard_occluded_pending(bool value);

  // optional bool force_status_bar = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_force_status_bar() const;
  PROTOBUF_DEPRECATED void clear_force_status_bar();
  PROTOBUF_DEPRECATED bool force_status_bar() const;
  PROTOBUF_DEPRECATED void set_force_status_bar(bool value);

  // optional bool force_status_bar_from_keyguard = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_force_status_bar_from_keyguard() const;
  PROTOBUF_DEPRECATED void clear_force_status_bar_from_keyguard();
  PROTOBUF_DEPRECATED bool force_status_bar_from_keyguard() const;
  PROTOBUF_DEPRECATED void set_force_status_bar_from_keyguard(bool value);

  // optional .android.content.ActivityInfoProto.ScreenOrientation orientation = 4;
  bool has_orientation() const;
  void clear_orientation();
  ::android::content::ActivityInfoProto_ScreenOrientation orientation() const;
  void set_orientation(::android::content::ActivityInfoProto_ScreenOrientation value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowManagerPolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr focused_app_token_;
  ::com::android::server::wm::IdentifierProto* focused_window_;
  ::com::android::server::wm::IdentifierProto* top_fullscreen_opaque_window_;
  ::com::android::server::wm::IdentifierProto* top_fullscreen_opaque_or_dimming_window_;
  ::com::android::server::wm::BarControllerProto* status_bar_;
  ::com::android::server::wm::BarControllerProto* navigation_bar_;
  ::com::android::server::wm::WindowOrientationListenerProto* orientation_listener_;
  ::com::android::server::wm::KeyguardServiceDelegateProto* keyguard_delegate_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_system_ui_flags_;
  int rotation_mode_;
  int rotation_;
  bool screen_on_fully_;
  bool keyguard_draw_complete_;
  bool window_manager_draw_complete_;
  bool keyguard_occluded_;
  bool keyguard_occluded_changed_;
  bool keyguard_occluded_pending_;
  bool force_status_bar_;
  bool force_status_bar_from_keyguard_;
  int orientation_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppTransitionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.AppTransitionProto) */ {
 public:
  AppTransitionProto();
  virtual ~AppTransitionProto();

  AppTransitionProto(const AppTransitionProto& from);
  AppTransitionProto(AppTransitionProto&& from) noexcept
    : AppTransitionProto() {
    *this = ::std::move(from);
  }

  inline AppTransitionProto& operator=(const AppTransitionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppTransitionProto& operator=(AppTransitionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppTransitionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppTransitionProto* internal_default_instance() {
    return reinterpret_cast<const AppTransitionProto*>(
               &_AppTransitionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AppTransitionProto& a, AppTransitionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppTransitionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppTransitionProto* New() const final {
    return CreateMaybeMessage<AppTransitionProto>(nullptr);
  }

  AppTransitionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppTransitionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppTransitionProto& from);
  void MergeFrom(const AppTransitionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppTransitionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.AppTransitionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AppTransitionProto_AppState AppState;
  static constexpr AppState APP_STATE_IDLE =
    AppTransitionProto_AppState_APP_STATE_IDLE;
  static constexpr AppState APP_STATE_READY =
    AppTransitionProto_AppState_APP_STATE_READY;
  static constexpr AppState APP_STATE_RUNNING =
    AppTransitionProto_AppState_APP_STATE_RUNNING;
  static constexpr AppState APP_STATE_TIMEOUT =
    AppTransitionProto_AppState_APP_STATE_TIMEOUT;
  static inline bool AppState_IsValid(int value) {
    return AppTransitionProto_AppState_IsValid(value);
  }
  static constexpr AppState AppState_MIN =
    AppTransitionProto_AppState_AppState_MIN;
  static constexpr AppState AppState_MAX =
    AppTransitionProto_AppState_AppState_MAX;
  static constexpr int AppState_ARRAYSIZE =
    AppTransitionProto_AppState_AppState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AppState_descriptor() {
    return AppTransitionProto_AppState_descriptor();
  }
  template<typename T>
  static inline const std::string& AppState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AppState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AppState_Name.");
    return AppTransitionProto_AppState_Name(enum_t_value);
  }
  static inline bool AppState_Parse(const std::string& name,
      AppState* value) {
    return AppTransitionProto_AppState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppTransitionStateFieldNumber = 1,
    kLastUsedAppTransitionFieldNumber = 2,
  };
  // optional .com.android.server.wm.AppTransitionProto.AppState app_transition_state = 1;
  bool has_app_transition_state() const;
  void clear_app_transition_state();
  ::com::android::server::wm::AppTransitionProto_AppState app_transition_state() const;
  void set_app_transition_state(::com::android::server::wm::AppTransitionProto_AppState value);

  // optional .android.view.TransitionTypeEnum last_used_app_transition = 2;
  bool has_last_used_app_transition() const;
  void clear_last_used_app_transition();
  ::android::view::TransitionTypeEnum last_used_app_transition() const;
  void set_last_used_app_transition(::android::view::TransitionTypeEnum value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.AppTransitionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int app_transition_state_;
  int last_used_app_transition_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class DisplayContentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.DisplayContentProto) */ {
 public:
  DisplayContentProto();
  virtual ~DisplayContentProto();

  DisplayContentProto(const DisplayContentProto& from);
  DisplayContentProto(DisplayContentProto&& from) noexcept
    : DisplayContentProto() {
    *this = ::std::move(from);
  }

  inline DisplayContentProto& operator=(const DisplayContentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayContentProto& operator=(DisplayContentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayContentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayContentProto* internal_default_instance() {
    return reinterpret_cast<const DisplayContentProto*>(
               &_DisplayContentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DisplayContentProto& a, DisplayContentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayContentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayContentProto* New() const final {
    return CreateMaybeMessage<DisplayContentProto>(nullptr);
  }

  DisplayContentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayContentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayContentProto& from);
  void MergeFrom(const DisplayContentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayContentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.DisplayContentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAboveAppWindowsFieldNumber = 6,
    kBelowAppWindowsFieldNumber = 7,
    kImeWindowsFieldNumber = 8,
    kOpeningAppsFieldNumber = 17,
    kClosingAppsFieldNumber = 18,
    kChangingAppsFieldNumber = 19,
    kOverlayWindowsFieldNumber = 20,
    kTasksFieldNumber = 25,
    kSleepTokensFieldNumber = 37,
    kFocusedAppFieldNumber = 15,
    kWindowContainerFieldNumber = 1,
    kDockedTaskDividerControllerFieldNumber = 4,
    kPinnedTaskControllerFieldNumber = 5,
    kDisplayInfoFieldNumber = 10,
    kScreenRotationAnimationFieldNumber = 12,
    kDisplayFramesFieldNumber = 13,
    kAppTransitionFieldNumber = 16,
    kRootDisplayAreaFieldNumber = 21,
    kResumedActivityFieldNumber = 24,
    kInputMethodTargetFieldNumber = 27,
    kInputMethodInputTargetFieldNumber = 28,
    kInputMethodControlTargetFieldNumber = 29,
    kCurrentFocusFieldNumber = 30,
    kImeInsetsSourceProviderFieldNumber = 31,
    kDisplayRotationFieldNumber = 33,
    kIdFieldNumber = 2,
    kDpiFieldNumber = 9,
    kRotationFieldNumber = 11,
    kSurfaceSizeFieldNumber = 14,
    kFocusedRootTaskIdFieldNumber = 23,
    kSingleTaskInstanceFieldNumber = 22,
    kDisplayReadyFieldNumber = 26,
    kCanShowImeFieldNumber = 32,
    kIsSleepingFieldNumber = 36,
    kImePolicyFieldNumber = 34,
  };
  // repeated .com.android.server.wm.WindowTokenProto above_app_windows = 6 [deprecated = true];
  PROTOBUF_DEPRECATED int above_app_windows_size() const;
  PROTOBUF_DEPRECATED void clear_above_app_windows();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* mutable_above_app_windows(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
      mutable_above_app_windows();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowTokenProto& above_app_windows(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* add_above_app_windows();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
      above_app_windows() const;

  // repeated .com.android.server.wm.WindowTokenProto below_app_windows = 7 [deprecated = true];
  PROTOBUF_DEPRECATED int below_app_windows_size() const;
  PROTOBUF_DEPRECATED void clear_below_app_windows();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* mutable_below_app_windows(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
      mutable_below_app_windows();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowTokenProto& below_app_windows(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* add_below_app_windows();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
      below_app_windows() const;

  // repeated .com.android.server.wm.WindowTokenProto ime_windows = 8 [deprecated = true];
  PROTOBUF_DEPRECATED int ime_windows_size() const;
  PROTOBUF_DEPRECATED void clear_ime_windows();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* mutable_ime_windows(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
      mutable_ime_windows();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowTokenProto& ime_windows(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* add_ime_windows();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
      ime_windows() const;

  // repeated .com.android.server.wm.IdentifierProto opening_apps = 17;
  int opening_apps_size() const;
  void clear_opening_apps();
  ::com::android::server::wm::IdentifierProto* mutable_opening_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
      mutable_opening_apps();
  const ::com::android::server::wm::IdentifierProto& opening_apps(int index) const;
  ::com::android::server::wm::IdentifierProto* add_opening_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
      opening_apps() const;

  // repeated .com.android.server.wm.IdentifierProto closing_apps = 18;
  int closing_apps_size() const;
  void clear_closing_apps();
  ::com::android::server::wm::IdentifierProto* mutable_closing_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
      mutable_closing_apps();
  const ::com::android::server::wm::IdentifierProto& closing_apps(int index) const;
  ::com::android::server::wm::IdentifierProto* add_closing_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
      closing_apps() const;

  // repeated .com.android.server.wm.IdentifierProto changing_apps = 19;
  int changing_apps_size() const;
  void clear_changing_apps();
  ::com::android::server::wm::IdentifierProto* mutable_changing_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
      mutable_changing_apps();
  const ::com::android::server::wm::IdentifierProto& changing_apps(int index) const;
  ::com::android::server::wm::IdentifierProto* add_changing_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
      changing_apps() const;

  // repeated .com.android.server.wm.WindowTokenProto overlay_windows = 20 [deprecated = true];
  PROTOBUF_DEPRECATED int overlay_windows_size() const;
  PROTOBUF_DEPRECATED void clear_overlay_windows();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* mutable_overlay_windows(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
      mutable_overlay_windows();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowTokenProto& overlay_windows(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowTokenProto* add_overlay_windows();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
      overlay_windows() const;

  // repeated .com.android.server.wm.TaskProto tasks = 25 [deprecated = true];
  PROTOBUF_DEPRECATED int tasks_size() const;
  PROTOBUF_DEPRECATED void clear_tasks();
  PROTOBUF_DEPRECATED ::com::android::server::wm::TaskProto* mutable_tasks(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >*
      mutable_tasks();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::TaskProto& tasks(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::TaskProto* add_tasks();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >&
      tasks() const;

  // repeated string sleep_tokens = 37;
  int sleep_tokens_size() const;
  void clear_sleep_tokens();
  const std::string& sleep_tokens(int index) const;
  std::string* mutable_sleep_tokens(int index);
  void set_sleep_tokens(int index, const std::string& value);
  void set_sleep_tokens(int index, std::string&& value);
  void set_sleep_tokens(int index, const char* value);
  void set_sleep_tokens(int index, const char* value, size_t size);
  std::string* add_sleep_tokens();
  void add_sleep_tokens(const std::string& value);
  void add_sleep_tokens(std::string&& value);
  void add_sleep_tokens(const char* value);
  void add_sleep_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sleep_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sleep_tokens();

  // optional string focused_app = 15;
  bool has_focused_app() const;
  void clear_focused_app();
  const std::string& focused_app() const;
  void set_focused_app(const std::string& value);
  void set_focused_app(std::string&& value);
  void set_focused_app(const char* value);
  void set_focused_app(const char* value, size_t size);
  std::string* mutable_focused_app();
  std::string* release_focused_app();
  void set_allocated_focused_app(std::string* focused_app);

  // optional .com.android.server.wm.WindowContainerProto window_container = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_window_container() const;
  PROTOBUF_DEPRECATED void clear_window_container();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowContainerProto& window_container() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowContainerProto* release_window_container();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  PROTOBUF_DEPRECATED void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional .com.android.server.wm.DockedTaskDividerControllerProto docked_task_divider_controller = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_docked_task_divider_controller() const;
  PROTOBUF_DEPRECATED void clear_docked_task_divider_controller();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::DockedTaskDividerControllerProto& docked_task_divider_controller() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::DockedTaskDividerControllerProto* release_docked_task_divider_controller();
  PROTOBUF_DEPRECATED ::com::android::server::wm::DockedTaskDividerControllerProto* mutable_docked_task_divider_controller();
  PROTOBUF_DEPRECATED void set_allocated_docked_task_divider_controller(::com::android::server::wm::DockedTaskDividerControllerProto* docked_task_divider_controller);

  // optional .com.android.server.wm.PinnedTaskControllerProto pinned_task_controller = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_pinned_task_controller() const;
  PROTOBUF_DEPRECATED void clear_pinned_task_controller();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::PinnedTaskControllerProto& pinned_task_controller() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::PinnedTaskControllerProto* release_pinned_task_controller();
  PROTOBUF_DEPRECATED ::com::android::server::wm::PinnedTaskControllerProto* mutable_pinned_task_controller();
  PROTOBUF_DEPRECATED void set_allocated_pinned_task_controller(::com::android::server::wm::PinnedTaskControllerProto* pinned_task_controller);

  // optional .android.view.DisplayInfoProto display_info = 10;
  bool has_display_info() const;
  void clear_display_info();
  const ::android::view::DisplayInfoProto& display_info() const;
  ::android::view::DisplayInfoProto* release_display_info();
  ::android::view::DisplayInfoProto* mutable_display_info();
  void set_allocated_display_info(::android::view::DisplayInfoProto* display_info);

  // optional .com.android.server.wm.ScreenRotationAnimationProto screen_rotation_animation = 12;
  bool has_screen_rotation_animation() const;
  void clear_screen_rotation_animation();
  const ::com::android::server::wm::ScreenRotationAnimationProto& screen_rotation_animation() const;
  ::com::android::server::wm::ScreenRotationAnimationProto* release_screen_rotation_animation();
  ::com::android::server::wm::ScreenRotationAnimationProto* mutable_screen_rotation_animation();
  void set_allocated_screen_rotation_animation(::com::android::server::wm::ScreenRotationAnimationProto* screen_rotation_animation);

  // optional .com.android.server.wm.DisplayFramesProto display_frames = 13;
  bool has_display_frames() const;
  void clear_display_frames();
  const ::com::android::server::wm::DisplayFramesProto& display_frames() const;
  ::com::android::server::wm::DisplayFramesProto* release_display_frames();
  ::com::android::server::wm::DisplayFramesProto* mutable_display_frames();
  void set_allocated_display_frames(::com::android::server::wm::DisplayFramesProto* display_frames);

  // optional .com.android.server.wm.AppTransitionProto app_transition = 16;
  bool has_app_transition() const;
  void clear_app_transition();
  const ::com::android::server::wm::AppTransitionProto& app_transition() const;
  ::com::android::server::wm::AppTransitionProto* release_app_transition();
  ::com::android::server::wm::AppTransitionProto* mutable_app_transition();
  void set_allocated_app_transition(::com::android::server::wm::AppTransitionProto* app_transition);

  // optional .com.android.server.wm.DisplayAreaProto root_display_area = 21;
  bool has_root_display_area() const;
  void clear_root_display_area();
  const ::com::android::server::wm::DisplayAreaProto& root_display_area() const;
  ::com::android::server::wm::DisplayAreaProto* release_root_display_area();
  ::com::android::server::wm::DisplayAreaProto* mutable_root_display_area();
  void set_allocated_root_display_area(::com::android::server::wm::DisplayAreaProto* root_display_area);

  // optional .com.android.server.wm.IdentifierProto resumed_activity = 24;
  bool has_resumed_activity() const;
  void clear_resumed_activity();
  const ::com::android::server::wm::IdentifierProto& resumed_activity() const;
  ::com::android::server::wm::IdentifierProto* release_resumed_activity();
  ::com::android::server::wm::IdentifierProto* mutable_resumed_activity();
  void set_allocated_resumed_activity(::com::android::server::wm::IdentifierProto* resumed_activity);

  // optional .com.android.server.wm.WindowStateProto input_method_target = 27;
  bool has_input_method_target() const;
  void clear_input_method_target();
  const ::com::android::server::wm::WindowStateProto& input_method_target() const;
  ::com::android::server::wm::WindowStateProto* release_input_method_target();
  ::com::android::server::wm::WindowStateProto* mutable_input_method_target();
  void set_allocated_input_method_target(::com::android::server::wm::WindowStateProto* input_method_target);

  // optional .com.android.server.wm.WindowStateProto input_method_input_target = 28;
  bool has_input_method_input_target() const;
  void clear_input_method_input_target();
  const ::com::android::server::wm::WindowStateProto& input_method_input_target() const;
  ::com::android::server::wm::WindowStateProto* release_input_method_input_target();
  ::com::android::server::wm::WindowStateProto* mutable_input_method_input_target();
  void set_allocated_input_method_input_target(::com::android::server::wm::WindowStateProto* input_method_input_target);

  // optional .com.android.server.wm.WindowStateProto input_method_control_target = 29;
  bool has_input_method_control_target() const;
  void clear_input_method_control_target();
  const ::com::android::server::wm::WindowStateProto& input_method_control_target() const;
  ::com::android::server::wm::WindowStateProto* release_input_method_control_target();
  ::com::android::server::wm::WindowStateProto* mutable_input_method_control_target();
  void set_allocated_input_method_control_target(::com::android::server::wm::WindowStateProto* input_method_control_target);

  // optional .com.android.server.wm.WindowStateProto current_focus = 30;
  bool has_current_focus() const;
  void clear_current_focus();
  const ::com::android::server::wm::WindowStateProto& current_focus() const;
  ::com::android::server::wm::WindowStateProto* release_current_focus();
  ::com::android::server::wm::WindowStateProto* mutable_current_focus();
  void set_allocated_current_focus(::com::android::server::wm::WindowStateProto* current_focus);

  // optional .com.android.server.wm.ImeInsetsSourceProviderProto ime_insets_source_provider = 31;
  bool has_ime_insets_source_provider() const;
  void clear_ime_insets_source_provider();
  const ::com::android::server::wm::ImeInsetsSourceProviderProto& ime_insets_source_provider() const;
  ::com::android::server::wm::ImeInsetsSourceProviderProto* release_ime_insets_source_provider();
  ::com::android::server::wm::ImeInsetsSourceProviderProto* mutable_ime_insets_source_provider();
  void set_allocated_ime_insets_source_provider(::com::android::server::wm::ImeInsetsSourceProviderProto* ime_insets_source_provider);

  // optional .com.android.server.wm.DisplayRotationProto display_rotation = 33;
  bool has_display_rotation() const;
  void clear_display_rotation();
  const ::com::android::server::wm::DisplayRotationProto& display_rotation() const;
  ::com::android::server::wm::DisplayRotationProto* release_display_rotation();
  ::com::android::server::wm::DisplayRotationProto* mutable_display_rotation();
  void set_allocated_display_rotation(::com::android::server::wm::DisplayRotationProto* display_rotation);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dpi = 9;
  bool has_dpi() const;
  void clear_dpi();
  ::PROTOBUF_NAMESPACE_ID::int32 dpi() const;
  void set_dpi(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 rotation = 11 [deprecated = true, (.android.typedef) = "android.view.Surface.Rotation"];
  PROTOBUF_DEPRECATED bool has_rotation() const;
  PROTOBUF_DEPRECATED void clear_rotation();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 rotation() const;
  PROTOBUF_DEPRECATED void set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 surface_size = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_surface_size() const;
  PROTOBUF_DEPRECATED void clear_surface_size();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 surface_size() const;
  PROTOBUF_DEPRECATED void set_surface_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 focused_root_task_id = 23;
  bool has_focused_root_task_id() const;
  void clear_focused_root_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 focused_root_task_id() const;
  void set_focused_root_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool single_task_instance = 22 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_single_task_instance() const;
  PROTOBUF_DEPRECATED void clear_single_task_instance();
  PROTOBUF_DEPRECATED bool single_task_instance() const;
  PROTOBUF_DEPRECATED void set_single_task_instance(bool value);

  // optional bool display_ready = 26;
  bool has_display_ready() const;
  void clear_display_ready();
  bool display_ready() const;
  void set_display_ready(bool value);

  // optional bool can_show_ime = 32 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_can_show_ime() const;
  PROTOBUF_DEPRECATED void clear_can_show_ime();
  PROTOBUF_DEPRECATED bool can_show_ime() const;
  PROTOBUF_DEPRECATED void set_can_show_ime(bool value);

  // optional bool is_sleeping = 36;
  bool has_is_sleeping() const;
  void clear_is_sleeping();
  bool is_sleeping() const;
  void set_is_sleeping(bool value);

  // optional int32 ime_policy = 34;
  bool has_ime_policy() const;
  void clear_ime_policy();
  ::PROTOBUF_NAMESPACE_ID::int32 ime_policy() const;
  void set_ime_policy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.DisplayContentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto > above_app_windows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto > below_app_windows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto > ime_windows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto > opening_apps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto > closing_apps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto > changing_apps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto > overlay_windows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto > tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sleep_tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr focused_app_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  ::com::android::server::wm::DockedTaskDividerControllerProto* docked_task_divider_controller_;
  ::com::android::server::wm::PinnedTaskControllerProto* pinned_task_controller_;
  ::android::view::DisplayInfoProto* display_info_;
  ::com::android::server::wm::ScreenRotationAnimationProto* screen_rotation_animation_;
  ::com::android::server::wm::DisplayFramesProto* display_frames_;
  ::com::android::server::wm::AppTransitionProto* app_transition_;
  ::com::android::server::wm::DisplayAreaProto* root_display_area_;
  ::com::android::server::wm::IdentifierProto* resumed_activity_;
  ::com::android::server::wm::WindowStateProto* input_method_target_;
  ::com::android::server::wm::WindowStateProto* input_method_input_target_;
  ::com::android::server::wm::WindowStateProto* input_method_control_target_;
  ::com::android::server::wm::WindowStateProto* current_focus_;
  ::com::android::server::wm::ImeInsetsSourceProviderProto* ime_insets_source_provider_;
  ::com::android::server::wm::DisplayRotationProto* display_rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dpi_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 surface_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 focused_root_task_id_;
  bool single_task_instance_;
  bool display_ready_;
  bool can_show_ime_;
  bool is_sleeping_;
  ::PROTOBUF_NAMESPACE_ID::int32 ime_policy_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class DisplayAreaProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.DisplayAreaProto) */ {
 public:
  DisplayAreaProto();
  virtual ~DisplayAreaProto();

  DisplayAreaProto(const DisplayAreaProto& from);
  DisplayAreaProto(DisplayAreaProto&& from) noexcept
    : DisplayAreaProto() {
    *this = ::std::move(from);
  }

  inline DisplayAreaProto& operator=(const DisplayAreaProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayAreaProto& operator=(DisplayAreaProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayAreaProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayAreaProto* internal_default_instance() {
    return reinterpret_cast<const DisplayAreaProto*>(
               &_DisplayAreaProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DisplayAreaProto& a, DisplayAreaProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayAreaProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayAreaProto* New() const final {
    return CreateMaybeMessage<DisplayAreaProto>(nullptr);
  }

  DisplayAreaProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayAreaProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayAreaProto& from);
  void MergeFrom(const DisplayAreaProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayAreaProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.DisplayAreaProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kNameFieldNumber = 2,
    kWindowContainerFieldNumber = 1,
    kIsTaskDisplayAreaFieldNumber = 4,
    kIsRootDisplayAreaFieldNumber = 5,
    kIsOrganizedFieldNumber = 7,
    kFeatureIdFieldNumber = 6,
  };
  // repeated .com.android.server.wm.DisplayAreaChildProto children = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int children_size() const;
  PROTOBUF_DEPRECATED void clear_children();
  PROTOBUF_DEPRECATED ::com::android::server::wm::DisplayAreaChildProto* mutable_children(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayAreaChildProto >*
      mutable_children();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::DisplayAreaChildProto& children(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::DisplayAreaChildProto* add_children();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayAreaChildProto >&
      children() const;

  // optional string name = 2 [(.android.privacy) = {
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .com.android.server.wm.WindowContainerProto window_container = 1;
  bool has_window_container() const;
  void clear_window_container();
  const ::com::android::server::wm::WindowContainerProto& window_container() const;
  ::com::android::server::wm::WindowContainerProto* release_window_container();
  ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional bool is_task_display_area = 4;
  bool has_is_task_display_area() const;
  void clear_is_task_display_area();
  bool is_task_display_area() const;
  void set_is_task_display_area(bool value);

  // optional bool is_root_display_area = 5;
  bool has_is_root_display_area() const;
  void clear_is_root_display_area();
  bool is_root_display_area() const;
  void set_is_root_display_area(bool value);

  // optional bool is_organized = 7;
  bool has_is_organized() const;
  void clear_is_organized();
  bool is_organized() const;
  void set_is_organized(bool value);

  // optional int32 feature_id = 6;
  bool has_feature_id() const;
  void clear_feature_id();
  ::PROTOBUF_NAMESPACE_ID::int32 feature_id() const;
  void set_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.DisplayAreaProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayAreaChildProto > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  bool is_task_display_area_;
  bool is_root_display_area_;
  bool is_organized_;
  ::PROTOBUF_NAMESPACE_ID::int32 feature_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class DisplayAreaChildProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.DisplayAreaChildProto) */ {
 public:
  DisplayAreaChildProto();
  virtual ~DisplayAreaChildProto();

  DisplayAreaChildProto(const DisplayAreaChildProto& from);
  DisplayAreaChildProto(DisplayAreaChildProto&& from) noexcept
    : DisplayAreaChildProto() {
    *this = ::std::move(from);
  }

  inline DisplayAreaChildProto& operator=(const DisplayAreaChildProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayAreaChildProto& operator=(DisplayAreaChildProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayAreaChildProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayAreaChildProto* internal_default_instance() {
    return reinterpret_cast<const DisplayAreaChildProto*>(
               &_DisplayAreaChildProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DisplayAreaChildProto& a, DisplayAreaChildProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayAreaChildProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayAreaChildProto* New() const final {
    return CreateMaybeMessage<DisplayAreaChildProto>(nullptr);
  }

  DisplayAreaChildProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayAreaChildProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayAreaChildProto& from);
  void MergeFrom(const DisplayAreaChildProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayAreaChildProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.DisplayAreaChildProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnknownFieldNumber = 3,
    kDisplayAreaFieldNumber = 1,
    kWindowFieldNumber = 2,
  };
  // repeated string unknown = 3;
  int unknown_size() const;
  void clear_unknown();
  const std::string& unknown(int index) const;
  std::string* mutable_unknown(int index);
  void set_unknown(int index, const std::string& value);
  void set_unknown(int index, std::string&& value);
  void set_unknown(int index, const char* value);
  void set_unknown(int index, const char* value, size_t size);
  std::string* add_unknown();
  void add_unknown(const std::string& value);
  void add_unknown(std::string&& value);
  void add_unknown(const char* value);
  void add_unknown(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unknown() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unknown();

  // optional .com.android.server.wm.DisplayAreaProto display_area = 1;
  bool has_display_area() const;
  void clear_display_area();
  const ::com::android::server::wm::DisplayAreaProto& display_area() const;
  ::com::android::server::wm::DisplayAreaProto* release_display_area();
  ::com::android::server::wm::DisplayAreaProto* mutable_display_area();
  void set_allocated_display_area(::com::android::server::wm::DisplayAreaProto* display_area);

  // optional .com.android.server.wm.WindowTokenProto window = 2;
  bool has_window() const;
  void clear_window();
  const ::com::android::server::wm::WindowTokenProto& window() const;
  ::com::android::server::wm::WindowTokenProto* release_window();
  ::com::android::server::wm::WindowTokenProto* mutable_window();
  void set_allocated_window(::com::android::server::wm::WindowTokenProto* window);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.DisplayAreaChildProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unknown_;
  ::com::android::server::wm::DisplayAreaProto* display_area_;
  ::com::android::server::wm::WindowTokenProto* window_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class DisplayFramesProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.DisplayFramesProto) */ {
 public:
  DisplayFramesProto();
  virtual ~DisplayFramesProto();

  DisplayFramesProto(const DisplayFramesProto& from);
  DisplayFramesProto(DisplayFramesProto&& from) noexcept
    : DisplayFramesProto() {
    *this = ::std::move(from);
  }

  inline DisplayFramesProto& operator=(const DisplayFramesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayFramesProto& operator=(DisplayFramesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayFramesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayFramesProto* internal_default_instance() {
    return reinterpret_cast<const DisplayFramesProto*>(
               &_DisplayFramesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DisplayFramesProto& a, DisplayFramesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayFramesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayFramesProto* New() const final {
    return CreateMaybeMessage<DisplayFramesProto>(nullptr);
  }

  DisplayFramesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayFramesProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayFramesProto& from);
  void MergeFrom(const DisplayFramesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayFramesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.DisplayFramesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStableBoundsFieldNumber = 1,
    kDockFieldNumber = 2,
    kCurrentFieldNumber = 3,
  };
  // optional .android.graphics.RectProto stable_bounds = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_stable_bounds() const;
  PROTOBUF_DEPRECATED void clear_stable_bounds();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& stable_bounds() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_stable_bounds();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_stable_bounds();
  PROTOBUF_DEPRECATED void set_allocated_stable_bounds(::android::graphics::RectProto* stable_bounds);

  // optional .android.graphics.RectProto dock = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_dock() const;
  PROTOBUF_DEPRECATED void clear_dock();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& dock() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_dock();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_dock();
  PROTOBUF_DEPRECATED void set_allocated_dock(::android::graphics::RectProto* dock);

  // optional .android.graphics.RectProto current = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_current() const;
  PROTOBUF_DEPRECATED void clear_current();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& current() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_current();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_current();
  PROTOBUF_DEPRECATED void set_allocated_current(::android::graphics::RectProto* current);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.DisplayFramesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::graphics::RectProto* stable_bounds_;
  ::android::graphics::RectProto* dock_;
  ::android::graphics::RectProto* current_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class DisplayRotationProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.DisplayRotationProto) */ {
 public:
  DisplayRotationProto();
  virtual ~DisplayRotationProto();

  DisplayRotationProto(const DisplayRotationProto& from);
  DisplayRotationProto(DisplayRotationProto&& from) noexcept
    : DisplayRotationProto() {
    *this = ::std::move(from);
  }

  inline DisplayRotationProto& operator=(const DisplayRotationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayRotationProto& operator=(DisplayRotationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayRotationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayRotationProto* internal_default_instance() {
    return reinterpret_cast<const DisplayRotationProto*>(
               &_DisplayRotationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DisplayRotationProto& a, DisplayRotationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayRotationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayRotationProto* New() const final {
    return CreateMaybeMessage<DisplayRotationProto>(nullptr);
  }

  DisplayRotationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayRotationProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayRotationProto& from);
  void MergeFrom(const DisplayRotationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayRotationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.DisplayRotationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
    kFrozenToUserRotationFieldNumber = 2,
    kUserRotationFieldNumber = 3,
    kFixedToUserRotationModeFieldNumber = 4,
    kLastOrientationFieldNumber = 5,
  };
  // optional int32 rotation = 1 [(.android.typedef) = "android.view.Surface.Rotation"];
  bool has_rotation() const;
  void clear_rotation();
  ::PROTOBUF_NAMESPACE_ID::int32 rotation() const;
  void set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool frozen_to_user_rotation = 2;
  bool has_frozen_to_user_rotation() const;
  void clear_frozen_to_user_rotation();
  bool frozen_to_user_rotation() const;
  void set_frozen_to_user_rotation(bool value);

  // optional int32 user_rotation = 3 [(.android.typedef) = "android.view.Surface.Rotation"];
  bool has_user_rotation() const;
  void clear_user_rotation();
  ::PROTOBUF_NAMESPACE_ID::int32 user_rotation() const;
  void set_user_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 fixed_to_user_rotation_mode = 4;
  bool has_fixed_to_user_rotation_mode() const;
  void clear_fixed_to_user_rotation_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_to_user_rotation_mode() const;
  void set_fixed_to_user_rotation_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 last_orientation = 5 [(.android.typedef) = "android.content.pm.ActivityInfo.ScreenOrientation"];
  bool has_last_orientation() const;
  void clear_last_orientation();
  ::PROTOBUF_NAMESPACE_ID::int32 last_orientation() const;
  void set_last_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.DisplayRotationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_;
  bool frozen_to_user_rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_to_user_rotation_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_orientation_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class DockedTaskDividerControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.DockedTaskDividerControllerProto) */ {
 public:
  DockedTaskDividerControllerProto();
  virtual ~DockedTaskDividerControllerProto();

  DockedTaskDividerControllerProto(const DockedTaskDividerControllerProto& from);
  DockedTaskDividerControllerProto(DockedTaskDividerControllerProto&& from) noexcept
    : DockedTaskDividerControllerProto() {
    *this = ::std::move(from);
  }

  inline DockedTaskDividerControllerProto& operator=(const DockedTaskDividerControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DockedTaskDividerControllerProto& operator=(DockedTaskDividerControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DockedTaskDividerControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DockedTaskDividerControllerProto* internal_default_instance() {
    return reinterpret_cast<const DockedTaskDividerControllerProto*>(
               &_DockedTaskDividerControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DockedTaskDividerControllerProto& a, DockedTaskDividerControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DockedTaskDividerControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DockedTaskDividerControllerProto* New() const final {
    return CreateMaybeMessage<DockedTaskDividerControllerProto>(nullptr);
  }

  DockedTaskDividerControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DockedTaskDividerControllerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DockedTaskDividerControllerProto& from);
  void MergeFrom(const DockedTaskDividerControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DockedTaskDividerControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.DockedTaskDividerControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimizedDockFieldNumber = 1,
  };
  // optional bool minimized_dock = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_minimized_dock() const;
  PROTOBUF_DEPRECATED void clear_minimized_dock();
  PROTOBUF_DEPRECATED bool minimized_dock() const;
  PROTOBUF_DEPRECATED void set_minimized_dock(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.DockedTaskDividerControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool minimized_dock_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PinnedTaskControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.PinnedTaskControllerProto) */ {
 public:
  PinnedTaskControllerProto();
  virtual ~PinnedTaskControllerProto();

  PinnedTaskControllerProto(const PinnedTaskControllerProto& from);
  PinnedTaskControllerProto(PinnedTaskControllerProto&& from) noexcept
    : PinnedTaskControllerProto() {
    *this = ::std::move(from);
  }

  inline PinnedTaskControllerProto& operator=(const PinnedTaskControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinnedTaskControllerProto& operator=(PinnedTaskControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PinnedTaskControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PinnedTaskControllerProto* internal_default_instance() {
    return reinterpret_cast<const PinnedTaskControllerProto*>(
               &_PinnedTaskControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PinnedTaskControllerProto& a, PinnedTaskControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PinnedTaskControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PinnedTaskControllerProto* New() const final {
    return CreateMaybeMessage<PinnedTaskControllerProto>(nullptr);
  }

  PinnedTaskControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PinnedTaskControllerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PinnedTaskControllerProto& from);
  void MergeFrom(const PinnedTaskControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinnedTaskControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.PinnedTaskControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultBoundsFieldNumber = 1,
    kMovementBoundsFieldNumber = 2,
  };
  // optional .android.graphics.RectProto default_bounds = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_default_bounds() const;
  PROTOBUF_DEPRECATED void clear_default_bounds();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& default_bounds() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_default_bounds();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_default_bounds();
  PROTOBUF_DEPRECATED void set_allocated_default_bounds(::android::graphics::RectProto* default_bounds);

  // optional .android.graphics.RectProto movement_bounds = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_movement_bounds() const;
  PROTOBUF_DEPRECATED void clear_movement_bounds();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& movement_bounds() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_movement_bounds();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_movement_bounds();
  PROTOBUF_DEPRECATED void set_allocated_movement_bounds(::android::graphics::RectProto* movement_bounds);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.PinnedTaskControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::graphics::RectProto* default_bounds_;
  ::android::graphics::RectProto* movement_bounds_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class TaskProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.TaskProto) */ {
 public:
  TaskProto();
  virtual ~TaskProto();

  TaskProto(const TaskProto& from);
  TaskProto(TaskProto&& from) noexcept
    : TaskProto() {
    *this = ::std::move(from);
  }

  inline TaskProto& operator=(const TaskProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskProto& operator=(TaskProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskProto* internal_default_instance() {
    return reinterpret_cast<const TaskProto*>(
               &_TaskProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TaskProto& a, TaskProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskProto* New() const final {
    return CreateMaybeMessage<TaskProto>(nullptr);
  }

  TaskProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskProto& from);
  void MergeFrom(const TaskProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.TaskProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 10,
    kActivitiesFieldNumber = 11,
    kRealActivityFieldNumber = 13,
    kOrigActivityFieldNumber = 14,
    kAffinityFieldNumber = 29,
    kWindowContainerFieldNumber = 1,
    kBoundsFieldNumber = 5,
    kDisplayedBoundsFieldNumber = 6,
    kResumedActivityFieldNumber = 12,
    kAdjustedBoundsFieldNumber = 21,
    kLastNonFullscreenBoundsFieldNumber = 22,
    kTaskFragmentFieldNumber = 31,
    kIdFieldNumber = 2,
    kSurfaceWidthFieldNumber = 8,
    kSurfaceHeightFieldNumber = 9,
    kDisplayIdFieldNumber = 15,
    kFillsParentFieldNumber = 4,
    kDeferRemovalFieldNumber = 7,
    kAdjustedForImeFieldNumber = 23,
    kAnimatingBoundsFieldNumber = 26,
    kRootTaskIdFieldNumber = 16,
    kActivityTypeFieldNumber = 17,
    kResizeModeFieldNumber = 18,
    kMinWidthFieldNumber = 19,
    kMinHeightFieldNumber = 20,
    kAdjustImeAmountFieldNumber = 24,
    kAdjustDividerAmountFieldNumber = 25,
    kMinimizeAmountFieldNumber = 27,
    kCreatedByOrganizerFieldNumber = 28,
    kHasChildPipActivityFieldNumber = 30,
  };
  // repeated .com.android.server.wm.TaskProto tasks = 10 [deprecated = true];
  PROTOBUF_DEPRECATED int tasks_size() const;
  PROTOBUF_DEPRECATED void clear_tasks();
  PROTOBUF_DEPRECATED ::com::android::server::wm::TaskProto* mutable_tasks(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >*
      mutable_tasks();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::TaskProto& tasks(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::TaskProto* add_tasks();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >&
      tasks() const;

  // repeated .com.android.server.wm.ActivityRecordProto activities = 11 [deprecated = true];
  PROTOBUF_DEPRECATED int activities_size() const;
  PROTOBUF_DEPRECATED void clear_activities();
  PROTOBUF_DEPRECATED ::com::android::server::wm::ActivityRecordProto* mutable_activities(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::ActivityRecordProto >*
      mutable_activities();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::ActivityRecordProto& activities(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::ActivityRecordProto* add_activities();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::ActivityRecordProto >&
      activities() const;

  // optional string real_activity = 13;
  bool has_real_activity() const;
  void clear_real_activity();
  const std::string& real_activity() const;
  void set_real_activity(const std::string& value);
  void set_real_activity(std::string&& value);
  void set_real_activity(const char* value);
  void set_real_activity(const char* value, size_t size);
  std::string* mutable_real_activity();
  std::string* release_real_activity();
  void set_allocated_real_activity(std::string* real_activity);

  // optional string orig_activity = 14;
  bool has_orig_activity() const;
  void clear_orig_activity();
  const std::string& orig_activity() const;
  void set_orig_activity(const std::string& value);
  void set_orig_activity(std::string&& value);
  void set_orig_activity(const char* value);
  void set_orig_activity(const char* value, size_t size);
  std::string* mutable_orig_activity();
  std::string* release_orig_activity();
  void set_allocated_orig_activity(std::string* orig_activity);

  // optional string affinity = 29;
  bool has_affinity() const;
  void clear_affinity();
  const std::string& affinity() const;
  void set_affinity(const std::string& value);
  void set_affinity(std::string&& value);
  void set_affinity(const char* value);
  void set_affinity(const char* value, size_t size);
  std::string* mutable_affinity();
  std::string* release_affinity();
  void set_allocated_affinity(std::string* affinity);

  // optional .com.android.server.wm.WindowContainerProto window_container = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_window_container() const;
  PROTOBUF_DEPRECATED void clear_window_container();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowContainerProto& window_container() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowContainerProto* release_window_container();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  PROTOBUF_DEPRECATED void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional .android.graphics.RectProto bounds = 5;
  bool has_bounds() const;
  void clear_bounds();
  const ::android::graphics::RectProto& bounds() const;
  ::android::graphics::RectProto* release_bounds();
  ::android::graphics::RectProto* mutable_bounds();
  void set_allocated_bounds(::android::graphics::RectProto* bounds);

  // optional .android.graphics.RectProto displayed_bounds = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_displayed_bounds() const;
  PROTOBUF_DEPRECATED void clear_displayed_bounds();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& displayed_bounds() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_displayed_bounds();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_displayed_bounds();
  PROTOBUF_DEPRECATED void set_allocated_displayed_bounds(::android::graphics::RectProto* displayed_bounds);

  // optional .com.android.server.wm.IdentifierProto resumed_activity = 12;
  bool has_resumed_activity() const;
  void clear_resumed_activity();
  const ::com::android::server::wm::IdentifierProto& resumed_activity() const;
  ::com::android::server::wm::IdentifierProto* release_resumed_activity();
  ::com::android::server::wm::IdentifierProto* mutable_resumed_activity();
  void set_allocated_resumed_activity(::com::android::server::wm::IdentifierProto* resumed_activity);

  // optional .android.graphics.RectProto adjusted_bounds = 21;
  bool has_adjusted_bounds() const;
  void clear_adjusted_bounds();
  const ::android::graphics::RectProto& adjusted_bounds() const;
  ::android::graphics::RectProto* release_adjusted_bounds();
  ::android::graphics::RectProto* mutable_adjusted_bounds();
  void set_allocated_adjusted_bounds(::android::graphics::RectProto* adjusted_bounds);

  // optional .android.graphics.RectProto last_non_fullscreen_bounds = 22;
  bool has_last_non_fullscreen_bounds() const;
  void clear_last_non_fullscreen_bounds();
  const ::android::graphics::RectProto& last_non_fullscreen_bounds() const;
  ::android::graphics::RectProto* release_last_non_fullscreen_bounds();
  ::android::graphics::RectProto* mutable_last_non_fullscreen_bounds();
  void set_allocated_last_non_fullscreen_bounds(::android::graphics::RectProto* last_non_fullscreen_bounds);

  // optional .com.android.server.wm.TaskFragmentProto task_fragment = 31;
  bool has_task_fragment() const;
  void clear_task_fragment();
  const ::com::android::server::wm::TaskFragmentProto& task_fragment() const;
  ::com::android::server::wm::TaskFragmentProto* release_task_fragment();
  ::com::android::server::wm::TaskFragmentProto* mutable_task_fragment();
  void set_allocated_task_fragment(::com::android::server::wm::TaskFragmentProto* task_fragment);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 surface_width = 8;
  bool has_surface_width() const;
  void clear_surface_width();
  ::PROTOBUF_NAMESPACE_ID::int32 surface_width() const;
  void set_surface_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 surface_height = 9;
  bool has_surface_height() const;
  void clear_surface_height();
  ::PROTOBUF_NAMESPACE_ID::int32 surface_height() const;
  void set_surface_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 display_id = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_display_id() const;
  PROTOBUF_DEPRECATED void clear_display_id();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 display_id() const;
  PROTOBUF_DEPRECATED void set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool fills_parent = 4;
  bool has_fills_parent() const;
  void clear_fills_parent();
  bool fills_parent() const;
  void set_fills_parent(bool value);

  // optional bool defer_removal = 7;
  bool has_defer_removal() const;
  void clear_defer_removal();
  bool defer_removal() const;
  void set_defer_removal(bool value);

  // optional bool adjusted_for_ime = 23;
  bool has_adjusted_for_ime() const;
  void clear_adjusted_for_ime();
  bool adjusted_for_ime() const;
  void set_adjusted_for_ime(bool value);

  // optional bool animating_bounds = 26 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_animating_bounds() const;
  PROTOBUF_DEPRECATED void clear_animating_bounds();
  PROTOBUF_DEPRECATED bool animating_bounds() const;
  PROTOBUF_DEPRECATED void set_animating_bounds(bool value);

  // optional int32 root_task_id = 16;
  bool has_root_task_id() const;
  void clear_root_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 root_task_id() const;
  void set_root_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 activity_type = 17 [deprecated = true, (.android.typedef) = "android.app.WindowConfiguration.ActivityType"];
  PROTOBUF_DEPRECATED bool has_activity_type() const;
  PROTOBUF_DEPRECATED void clear_activity_type();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 activity_type() const;
  PROTOBUF_DEPRECATED void set_activity_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 resize_mode = 18 [(.android.typedef) = "android.appwidget.AppWidgetProviderInfo.ResizeModeFlags"];
  bool has_resize_mode() const;
  void clear_resize_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 resize_mode() const;
  void set_resize_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 min_width = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_min_width() const;
  PROTOBUF_DEPRECATED void clear_min_width();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 min_width() const;
  PROTOBUF_DEPRECATED void set_min_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 min_height = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_min_height() const;
  PROTOBUF_DEPRECATED void clear_min_height();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 min_height() const;
  PROTOBUF_DEPRECATED void set_min_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float adjust_ime_amount = 24;
  bool has_adjust_ime_amount() const;
  void clear_adjust_ime_amount();
  float adjust_ime_amount() const;
  void set_adjust_ime_amount(float value);

  // optional float adjust_divider_amount = 25;
  bool has_adjust_divider_amount() const;
  void clear_adjust_divider_amount();
  float adjust_divider_amount() const;
  void set_adjust_divider_amount(float value);

  // optional float minimize_amount = 27;
  bool has_minimize_amount() const;
  void clear_minimize_amount();
  float minimize_amount() const;
  void set_minimize_amount(float value);

  // optional bool created_by_organizer = 28;
  bool has_created_by_organizer() const;
  void clear_created_by_organizer();
  bool created_by_organizer() const;
  void set_created_by_organizer(bool value);

  // optional bool has_child_pip_activity = 30;
  bool has_has_child_pip_activity() const;
  void clear_has_child_pip_activity();
  bool has_child_pip_activity() const;
  void set_has_child_pip_activity(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.TaskProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto > tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::ActivityRecordProto > activities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_activity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orig_activity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affinity_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  ::android::graphics::RectProto* bounds_;
  ::android::graphics::RectProto* displayed_bounds_;
  ::com::android::server::wm::IdentifierProto* resumed_activity_;
  ::android::graphics::RectProto* adjusted_bounds_;
  ::android::graphics::RectProto* last_non_fullscreen_bounds_;
  ::com::android::server::wm::TaskFragmentProto* task_fragment_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 surface_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 surface_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_id_;
  bool fills_parent_;
  bool defer_removal_;
  bool adjusted_for_ime_;
  bool animating_bounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 resize_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_height_;
  float adjust_ime_amount_;
  float adjust_divider_amount_;
  float minimize_amount_;
  bool created_by_organizer_;
  bool has_child_pip_activity_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class TaskFragmentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.TaskFragmentProto) */ {
 public:
  TaskFragmentProto();
  virtual ~TaskFragmentProto();

  TaskFragmentProto(const TaskFragmentProto& from);
  TaskFragmentProto(TaskFragmentProto&& from) noexcept
    : TaskFragmentProto() {
    *this = ::std::move(from);
  }

  inline TaskFragmentProto& operator=(const TaskFragmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskFragmentProto& operator=(TaskFragmentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskFragmentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskFragmentProto* internal_default_instance() {
    return reinterpret_cast<const TaskFragmentProto*>(
               &_TaskFragmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TaskFragmentProto& a, TaskFragmentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskFragmentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskFragmentProto* New() const final {
    return CreateMaybeMessage<TaskFragmentProto>(nullptr);
  }

  TaskFragmentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskFragmentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskFragmentProto& from);
  void MergeFrom(const TaskFragmentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskFragmentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.TaskFragmentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowContainerFieldNumber = 1,
    kDisplayIdFieldNumber = 2,
    kActivityTypeFieldNumber = 3,
    kMinWidthFieldNumber = 4,
    kMinHeightFieldNumber = 5,
  };
  // optional .com.android.server.wm.WindowContainerProto window_container = 1;
  bool has_window_container() const;
  void clear_window_container();
  const ::com::android::server::wm::WindowContainerProto& window_container() const;
  ::com::android::server::wm::WindowContainerProto* release_window_container();
  ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional int32 display_id = 2;
  bool has_display_id() const;
  void clear_display_id();
  ::PROTOBUF_NAMESPACE_ID::int32 display_id() const;
  void set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 activity_type = 3 [(.android.typedef) = "android.app.WindowConfiguration.ActivityType"];
  bool has_activity_type() const;
  void clear_activity_type();
  ::PROTOBUF_NAMESPACE_ID::int32 activity_type() const;
  void set_activity_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 min_width = 4;
  bool has_min_width() const;
  void clear_min_width();
  ::PROTOBUF_NAMESPACE_ID::int32 min_width() const;
  void set_min_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 min_height = 5;
  bool has_min_height() const;
  void clear_min_height();
  ::PROTOBUF_NAMESPACE_ID::int32 min_height() const;
  void set_min_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.TaskFragmentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_height_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.ActivityRecordProto) */ {
 public:
  ActivityRecordProto();
  virtual ~ActivityRecordProto();

  ActivityRecordProto(const ActivityRecordProto& from);
  ActivityRecordProto(ActivityRecordProto&& from) noexcept
    : ActivityRecordProto() {
    *this = ::std::move(from);
  }

  inline ActivityRecordProto& operator=(const ActivityRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityRecordProto& operator=(ActivityRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityRecordProto* internal_default_instance() {
    return reinterpret_cast<const ActivityRecordProto*>(
               &_ActivityRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ActivityRecordProto& a, ActivityRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityRecordProto* New() const final {
    return CreateMaybeMessage<ActivityRecordProto>(nullptr);
  }

  ActivityRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityRecordProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityRecordProto& from);
  void MergeFrom(const ActivityRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.ActivityRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenBoundsFieldNumber = 23,
    kNameFieldNumber = 1,
    kStateFieldNumber = 27,
    kWindowTokenFieldNumber = 2,
    kThumbnailFieldNumber = 6,
    kStartingWindowFieldNumber = 19,
    kIdentifierFieldNumber = 26,
    kLastSurfaceShowingFieldNumber = 3,
    kIsWaitingForTransitionStartFieldNumber = 4,
    kIsAnimatingFieldNumber = 5,
    kFillsParentFieldNumber = 7,
    kAppStoppedFieldNumber = 8,
    kVisibleRequestedFieldNumber = 9,
    kClientVisibleFieldNumber = 10,
    kDeferHidingClientFieldNumber = 11,
    kNumInterestingWindowsFieldNumber = 14,
    kReportedDrawnFieldNumber = 12,
    kReportedVisibleFieldNumber = 13,
    kAllDrawnFieldNumber = 16,
    kLastAllDrawnFieldNumber = 17,
    kNumDrawnWindowsFieldNumber = 15,
    kProcIdFieldNumber = 29,
    kFrontOfTaskFieldNumber = 28,
    kTranslucentFieldNumber = 30,
    kPipAutoEnterEnabledFieldNumber = 31,
    kInSizeCompatModeFieldNumber = 32,
    kMinAspectRatioFieldNumber = 33,
    kProvidesMaxBoundsFieldNumber = 34,
    kStartingDisplayedFieldNumber = 20,
    kStartingMovedFieldNumber = 201,
    kVisibleSetFromTransferredStartingWindowFieldNumber = 22,
    kVisibleFieldNumber = 24,
  };
  // repeated .android.graphics.RectProto frozen_bounds = 23 [deprecated = true];
  PROTOBUF_DEPRECATED int frozen_bounds_size() const;
  PROTOBUF_DEPRECATED void clear_frozen_bounds();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_frozen_bounds(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::graphics::RectProto >*
      mutable_frozen_bounds();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& frozen_bounds(int index) const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* add_frozen_bounds();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::graphics::RectProto >&
      frozen_bounds() const;

  // optional string name = 1 [(.android.privacy) = {
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string state = 27 [(.android.privacy) = {
  bool has_state() const;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);

  // optional .com.android.server.wm.WindowTokenProto window_token = 2;
  bool has_window_token() const;
  void clear_window_token();
  const ::com::android::server::wm::WindowTokenProto& window_token() const;
  ::com::android::server::wm::WindowTokenProto* release_window_token();
  ::com::android::server::wm::WindowTokenProto* mutable_window_token();
  void set_allocated_window_token(::com::android::server::wm::WindowTokenProto* window_token);

  // optional .com.android.server.wm.WindowContainerThumbnailProto thumbnail = 6;
  bool has_thumbnail() const;
  void clear_thumbnail();
  const ::com::android::server::wm::WindowContainerThumbnailProto& thumbnail() const;
  ::com::android::server::wm::WindowContainerThumbnailProto* release_thumbnail();
  ::com::android::server::wm::WindowContainerThumbnailProto* mutable_thumbnail();
  void set_allocated_thumbnail(::com::android::server::wm::WindowContainerThumbnailProto* thumbnail);

  // optional .com.android.server.wm.IdentifierProto starting_window = 19;
  bool has_starting_window() const;
  void clear_starting_window();
  const ::com::android::server::wm::IdentifierProto& starting_window() const;
  ::com::android::server::wm::IdentifierProto* release_starting_window();
  ::com::android::server::wm::IdentifierProto* mutable_starting_window();
  void set_allocated_starting_window(::com::android::server::wm::IdentifierProto* starting_window);

  // optional .com.android.server.wm.IdentifierProto identifier = 26 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_identifier() const;
  PROTOBUF_DEPRECATED void clear_identifier();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::IdentifierProto& identifier() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* release_identifier();
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* mutable_identifier();
  PROTOBUF_DEPRECATED void set_allocated_identifier(::com::android::server::wm::IdentifierProto* identifier);

  // optional bool last_surface_showing = 3;
  bool has_last_surface_showing() const;
  void clear_last_surface_showing();
  bool last_surface_showing() const;
  void set_last_surface_showing(bool value);

  // optional bool is_waiting_for_transition_start = 4;
  bool has_is_waiting_for_transition_start() const;
  void clear_is_waiting_for_transition_start();
  bool is_waiting_for_transition_start() const;
  void set_is_waiting_for_transition_start(bool value);

  // optional bool is_animating = 5;
  bool has_is_animating() const;
  void clear_is_animating();
  bool is_animating() const;
  void set_is_animating(bool value);

  // optional bool fills_parent = 7;
  bool has_fills_parent() const;
  void clear_fills_parent();
  bool fills_parent() const;
  void set_fills_parent(bool value);

  // optional bool app_stopped = 8;
  bool has_app_stopped() const;
  void clear_app_stopped();
  bool app_stopped() const;
  void set_app_stopped(bool value);

  // optional bool visible_requested = 9;
  bool has_visible_requested() const;
  void clear_visible_requested();
  bool visible_requested() const;
  void set_visible_requested(bool value);

  // optional bool client_visible = 10;
  bool has_client_visible() const;
  void clear_client_visible();
  bool client_visible() const;
  void set_client_visible(bool value);

  // optional bool defer_hiding_client = 11;
  bool has_defer_hiding_client() const;
  void clear_defer_hiding_client();
  bool defer_hiding_client() const;
  void set_defer_hiding_client(bool value);

  // optional int32 num_interesting_windows = 14;
  bool has_num_interesting_windows() const;
  void clear_num_interesting_windows();
  ::PROTOBUF_NAMESPACE_ID::int32 num_interesting_windows() const;
  void set_num_interesting_windows(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool reported_drawn = 12;
  bool has_reported_drawn() const;
  void clear_reported_drawn();
  bool reported_drawn() const;
  void set_reported_drawn(bool value);

  // optional bool reported_visible = 13;
  bool has_reported_visible() const;
  void clear_reported_visible();
  bool reported_visible() const;
  void set_reported_visible(bool value);

  // optional bool all_drawn = 16;
  bool has_all_drawn() const;
  void clear_all_drawn();
  bool all_drawn() const;
  void set_all_drawn(bool value);

  // optional bool last_all_drawn = 17;
  bool has_last_all_drawn() const;
  void clear_last_all_drawn();
  bool last_all_drawn() const;
  void set_last_all_drawn(bool value);

  // optional int32 num_drawn_windows = 15;
  bool has_num_drawn_windows() const;
  void clear_num_drawn_windows();
  ::PROTOBUF_NAMESPACE_ID::int32 num_drawn_windows() const;
  void set_num_drawn_windows(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 proc_id = 29;
  bool has_proc_id() const;
  void clear_proc_id();
  ::PROTOBUF_NAMESPACE_ID::int32 proc_id() const;
  void set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool front_of_task = 28;
  bool has_front_of_task() const;
  void clear_front_of_task();
  bool front_of_task() const;
  void set_front_of_task(bool value);

  // optional bool translucent = 30;
  bool has_translucent() const;
  void clear_translucent();
  bool translucent() const;
  void set_translucent(bool value);

  // optional bool pip_auto_enter_enabled = 31;
  bool has_pip_auto_enter_enabled() const;
  void clear_pip_auto_enter_enabled();
  bool pip_auto_enter_enabled() const;
  void set_pip_auto_enter_enabled(bool value);

  // optional bool in_size_compat_mode = 32;
  bool has_in_size_compat_mode() const;
  void clear_in_size_compat_mode();
  bool in_size_compat_mode() const;
  void set_in_size_compat_mode(bool value);

  // optional float min_aspect_ratio = 33;
  bool has_min_aspect_ratio() const;
  void clear_min_aspect_ratio();
  float min_aspect_ratio() const;
  void set_min_aspect_ratio(float value);

  // optional bool provides_max_bounds = 34;
  bool has_provides_max_bounds() const;
  void clear_provides_max_bounds();
  bool provides_max_bounds() const;
  void set_provides_max_bounds(bool value);

  // optional bool starting_displayed = 20;
  bool has_starting_displayed() const;
  void clear_starting_displayed();
  bool starting_displayed() const;
  void set_starting_displayed(bool value);

  // optional bool starting_moved = 201;
  bool has_starting_moved() const;
  void clear_starting_moved();
  bool starting_moved() const;
  void set_starting_moved(bool value);

  // optional bool visible_set_from_transferred_starting_window = 22;
  bool has_visible_set_from_transferred_starting_window() const;
  void clear_visible_set_from_transferred_starting_window();
  bool visible_set_from_transferred_starting_window() const;
  void set_visible_set_from_transferred_starting_window(bool value);

  // optional bool visible = 24;
  bool has_visible() const;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.ActivityRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::graphics::RectProto > frozen_bounds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::com::android::server::wm::WindowTokenProto* window_token_;
  ::com::android::server::wm::WindowContainerThumbnailProto* thumbnail_;
  ::com::android::server::wm::IdentifierProto* starting_window_;
  ::com::android::server::wm::IdentifierProto* identifier_;
  bool last_surface_showing_;
  bool is_waiting_for_transition_start_;
  bool is_animating_;
  bool fills_parent_;
  bool app_stopped_;
  bool visible_requested_;
  bool client_visible_;
  bool defer_hiding_client_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_interesting_windows_;
  bool reported_drawn_;
  bool reported_visible_;
  bool all_drawn_;
  bool last_all_drawn_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_drawn_windows_;
  ::PROTOBUF_NAMESPACE_ID::int32 proc_id_;
  bool front_of_task_;
  bool translucent_;
  bool pip_auto_enter_enabled_;
  bool in_size_compat_mode_;
  float min_aspect_ratio_;
  bool provides_max_bounds_;
  bool starting_displayed_;
  bool starting_moved_;
  bool visible_set_from_transferred_starting_window_;
  bool visible_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowTokenProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowTokenProto) */ {
 public:
  WindowTokenProto();
  virtual ~WindowTokenProto();

  WindowTokenProto(const WindowTokenProto& from);
  WindowTokenProto(WindowTokenProto&& from) noexcept
    : WindowTokenProto() {
    *this = ::std::move(from);
  }

  inline WindowTokenProto& operator=(const WindowTokenProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowTokenProto& operator=(WindowTokenProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowTokenProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowTokenProto* internal_default_instance() {
    return reinterpret_cast<const WindowTokenProto*>(
               &_WindowTokenProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WindowTokenProto& a, WindowTokenProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowTokenProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowTokenProto* New() const final {
    return CreateMaybeMessage<WindowTokenProto>(nullptr);
  }

  WindowTokenProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowTokenProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowTokenProto& from);
  void MergeFrom(const WindowTokenProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowTokenProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowTokenProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowsFieldNumber = 3,
    kWindowContainerFieldNumber = 1,
    kHashCodeFieldNumber = 2,
    kWaitingToShowFieldNumber = 5,
    kPausedFieldNumber = 6,
  };
  // repeated .com.android.server.wm.WindowStateProto windows = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int windows_size() const;
  PROTOBUF_DEPRECATED void clear_windows();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowStateProto* mutable_windows(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >*
      mutable_windows();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowStateProto& windows(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowStateProto* add_windows();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >&
      windows() const;

  // optional .com.android.server.wm.WindowContainerProto window_container = 1;
  bool has_window_container() const;
  void clear_window_container();
  const ::com::android::server::wm::WindowContainerProto& window_container() const;
  ::com::android::server::wm::WindowContainerProto* release_window_container();
  ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional int32 hash_code = 2;
  bool has_hash_code() const;
  void clear_hash_code();
  ::PROTOBUF_NAMESPACE_ID::int32 hash_code() const;
  void set_hash_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool waiting_to_show = 5;
  bool has_waiting_to_show() const;
  void clear_waiting_to_show();
  bool waiting_to_show() const;
  void set_waiting_to_show(bool value);

  // optional bool paused = 6;
  bool has_paused() const;
  void clear_paused();
  bool paused() const;
  void set_paused(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowTokenProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto > windows_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  ::PROTOBUF_NAMESPACE_ID::int32 hash_code_;
  bool waiting_to_show_;
  bool paused_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowStateProto) */ {
 public:
  WindowStateProto();
  virtual ~WindowStateProto();

  WindowStateProto(const WindowStateProto& from);
  WindowStateProto(WindowStateProto&& from) noexcept
    : WindowStateProto() {
    *this = ::std::move(from);
  }

  inline WindowStateProto& operator=(const WindowStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowStateProto& operator=(WindowStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowStateProto* internal_default_instance() {
    return reinterpret_cast<const WindowStateProto*>(
               &_WindowStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WindowStateProto& a, WindowStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowStateProto* New() const final {
    return CreateMaybeMessage<WindowStateProto>(nullptr);
  }

  WindowStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowStateProto& from);
  void MergeFrom(const WindowStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildWindowsFieldNumber = 15,
    kWindowContainerFieldNumber = 1,
    kIdentifierFieldNumber = 2,
    kAttributesFieldNumber = 5,
    kGivenContentInsetsFieldNumber = 6,
    kFrameFieldNumber = 7,
    kContainingFrameFieldNumber = 8,
    kParentFrameFieldNumber = 9,
    kContentFrameFieldNumber = 10,
    kContentInsetsFieldNumber = 11,
    kSurfaceInsetsFieldNumber = 12,
    kAnimatorFieldNumber = 13,
    kSurfacePositionFieldNumber = 16,
    kDisplayFrameFieldNumber = 24,
    kOverscanFrameFieldNumber = 25,
    kVisibleFrameFieldNumber = 26,
    kDecorFrameFieldNumber = 27,
    kOutsetFrameFieldNumber = 28,
    kOverscanInsetsFieldNumber = 29,
    kVisibleInsetsFieldNumber = 30,
    kStableInsetsFieldNumber = 31,
    kOutsetsFieldNumber = 32,
    kCutoutFieldNumber = 33,
    kWindowFramesFieldNumber = 41,
    kDisplayIdFieldNumber = 3,
    kStackIdFieldNumber = 4,
    kRequestedWidthFieldNumber = 18,
    kRequestedHeightFieldNumber = 19,
    kViewVisibilityFieldNumber = 20,
    kSystemUiVisibilityFieldNumber = 21,
    kAnimatingExitFieldNumber = 14,
    kHasSurfaceFieldNumber = 22,
    kIsReadyForDisplayFieldNumber = 23,
    kRemoveOnExitFieldNumber = 34,
    kDestroyingFieldNumber = 35,
    kRemovedFieldNumber = 36,
    kIsOnScreenFieldNumber = 37,
    kIsVisibleFieldNumber = 38,
    kFinishedSeamlessRotationFrameFieldNumber = 40,
    kPendingSeamlessRotationFieldNumber = 39,
    kForceSeamlessRotationFieldNumber = 42,
    kHasCompatScaleFieldNumber = 43,
    kGlobalScaleFieldNumber = 44,
  };
  // repeated .com.android.server.wm.WindowStateProto child_windows = 15 [deprecated = true];
  PROTOBUF_DEPRECATED int child_windows_size() const;
  PROTOBUF_DEPRECATED void clear_child_windows();
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowStateProto* mutable_child_windows(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >*
      mutable_child_windows();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::WindowStateProto& child_windows(int index) const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::WindowStateProto* add_child_windows();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >&
      child_windows() const;

  // optional .com.android.server.wm.WindowContainerProto window_container = 1;
  bool has_window_container() const;
  void clear_window_container();
  const ::com::android::server::wm::WindowContainerProto& window_container() const;
  ::com::android::server::wm::WindowContainerProto* release_window_container();
  ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional .com.android.server.wm.IdentifierProto identifier = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_identifier() const;
  PROTOBUF_DEPRECATED void clear_identifier();
  PROTOBUF_DEPRECATED const ::com::android::server::wm::IdentifierProto& identifier() const;
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* release_identifier();
  PROTOBUF_DEPRECATED ::com::android::server::wm::IdentifierProto* mutable_identifier();
  PROTOBUF_DEPRECATED void set_allocated_identifier(::com::android::server::wm::IdentifierProto* identifier);

  // optional .android.view.WindowLayoutParamsProto attributes = 5;
  bool has_attributes() const;
  void clear_attributes();
  const ::android::view::WindowLayoutParamsProto& attributes() const;
  ::android::view::WindowLayoutParamsProto* release_attributes();
  ::android::view::WindowLayoutParamsProto* mutable_attributes();
  void set_allocated_attributes(::android::view::WindowLayoutParamsProto* attributes);

  // optional .android.graphics.RectProto given_content_insets = 6;
  bool has_given_content_insets() const;
  void clear_given_content_insets();
  const ::android::graphics::RectProto& given_content_insets() const;
  ::android::graphics::RectProto* release_given_content_insets();
  ::android::graphics::RectProto* mutable_given_content_insets();
  void set_allocated_given_content_insets(::android::graphics::RectProto* given_content_insets);

  // optional .android.graphics.RectProto frame = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_frame() const;
  PROTOBUF_DEPRECATED void clear_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_frame();
  PROTOBUF_DEPRECATED void set_allocated_frame(::android::graphics::RectProto* frame);

  // optional .android.graphics.RectProto containing_frame = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_containing_frame() const;
  PROTOBUF_DEPRECATED void clear_containing_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& containing_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_containing_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_containing_frame();
  PROTOBUF_DEPRECATED void set_allocated_containing_frame(::android::graphics::RectProto* containing_frame);

  // optional .android.graphics.RectProto parent_frame = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_parent_frame() const;
  PROTOBUF_DEPRECATED void clear_parent_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& parent_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_parent_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_parent_frame();
  PROTOBUF_DEPRECATED void set_allocated_parent_frame(::android::graphics::RectProto* parent_frame);

  // optional .android.graphics.RectProto content_frame = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_content_frame() const;
  PROTOBUF_DEPRECATED void clear_content_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& content_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_content_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_content_frame();
  PROTOBUF_DEPRECATED void set_allocated_content_frame(::android::graphics::RectProto* content_frame);

  // optional .android.graphics.RectProto content_insets = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_content_insets() const;
  PROTOBUF_DEPRECATED void clear_content_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& content_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_content_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_content_insets();
  PROTOBUF_DEPRECATED void set_allocated_content_insets(::android::graphics::RectProto* content_insets);

  // optional .android.graphics.RectProto surface_insets = 12;
  bool has_surface_insets() const;
  void clear_surface_insets();
  const ::android::graphics::RectProto& surface_insets() const;
  ::android::graphics::RectProto* release_surface_insets();
  ::android::graphics::RectProto* mutable_surface_insets();
  void set_allocated_surface_insets(::android::graphics::RectProto* surface_insets);

  // optional .com.android.server.wm.WindowStateAnimatorProto animator = 13;
  bool has_animator() const;
  void clear_animator();
  const ::com::android::server::wm::WindowStateAnimatorProto& animator() const;
  ::com::android::server::wm::WindowStateAnimatorProto* release_animator();
  ::com::android::server::wm::WindowStateAnimatorProto* mutable_animator();
  void set_allocated_animator(::com::android::server::wm::WindowStateAnimatorProto* animator);

  // optional .android.graphics.RectProto surface_position = 16;
  bool has_surface_position() const;
  void clear_surface_position();
  const ::android::graphics::RectProto& surface_position() const;
  ::android::graphics::RectProto* release_surface_position();
  ::android::graphics::RectProto* mutable_surface_position();
  void set_allocated_surface_position(::android::graphics::RectProto* surface_position);

  // optional .android.graphics.RectProto display_frame = 24 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_display_frame() const;
  PROTOBUF_DEPRECATED void clear_display_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& display_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_display_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_display_frame();
  PROTOBUF_DEPRECATED void set_allocated_display_frame(::android::graphics::RectProto* display_frame);

  // optional .android.graphics.RectProto overscan_frame = 25 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_overscan_frame() const;
  PROTOBUF_DEPRECATED void clear_overscan_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& overscan_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_overscan_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_overscan_frame();
  PROTOBUF_DEPRECATED void set_allocated_overscan_frame(::android::graphics::RectProto* overscan_frame);

  // optional .android.graphics.RectProto visible_frame = 26 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_visible_frame() const;
  PROTOBUF_DEPRECATED void clear_visible_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& visible_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_visible_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_visible_frame();
  PROTOBUF_DEPRECATED void set_allocated_visible_frame(::android::graphics::RectProto* visible_frame);

  // optional .android.graphics.RectProto decor_frame = 27 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_decor_frame() const;
  PROTOBUF_DEPRECATED void clear_decor_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& decor_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_decor_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_decor_frame();
  PROTOBUF_DEPRECATED void set_allocated_decor_frame(::android::graphics::RectProto* decor_frame);

  // optional .android.graphics.RectProto outset_frame = 28 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_outset_frame() const;
  PROTOBUF_DEPRECATED void clear_outset_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& outset_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_outset_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_outset_frame();
  PROTOBUF_DEPRECATED void set_allocated_outset_frame(::android::graphics::RectProto* outset_frame);

  // optional .android.graphics.RectProto overscan_insets = 29 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_overscan_insets() const;
  PROTOBUF_DEPRECATED void clear_overscan_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& overscan_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_overscan_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_overscan_insets();
  PROTOBUF_DEPRECATED void set_allocated_overscan_insets(::android::graphics::RectProto* overscan_insets);

  // optional .android.graphics.RectProto visible_insets = 30 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_visible_insets() const;
  PROTOBUF_DEPRECATED void clear_visible_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& visible_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_visible_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_visible_insets();
  PROTOBUF_DEPRECATED void set_allocated_visible_insets(::android::graphics::RectProto* visible_insets);

  // optional .android.graphics.RectProto stable_insets = 31 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_stable_insets() const;
  PROTOBUF_DEPRECATED void clear_stable_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& stable_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_stable_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_stable_insets();
  PROTOBUF_DEPRECATED void set_allocated_stable_insets(::android::graphics::RectProto* stable_insets);

  // optional .android.graphics.RectProto outsets = 32 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_outsets() const;
  PROTOBUF_DEPRECATED void clear_outsets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& outsets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_outsets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_outsets();
  PROTOBUF_DEPRECATED void set_allocated_outsets(::android::graphics::RectProto* outsets);

  // optional .android.view.DisplayCutoutProto cutout = 33 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_cutout() const;
  PROTOBUF_DEPRECATED void clear_cutout();
  PROTOBUF_DEPRECATED const ::android::view::DisplayCutoutProto& cutout() const;
  PROTOBUF_DEPRECATED ::android::view::DisplayCutoutProto* release_cutout();
  PROTOBUF_DEPRECATED ::android::view::DisplayCutoutProto* mutable_cutout();
  PROTOBUF_DEPRECATED void set_allocated_cutout(::android::view::DisplayCutoutProto* cutout);

  // optional .com.android.server.wm.WindowFramesProto window_frames = 41;
  bool has_window_frames() const;
  void clear_window_frames();
  const ::com::android::server::wm::WindowFramesProto& window_frames() const;
  ::com::android::server::wm::WindowFramesProto* release_window_frames();
  ::com::android::server::wm::WindowFramesProto* mutable_window_frames();
  void set_allocated_window_frames(::com::android::server::wm::WindowFramesProto* window_frames);

  // optional int32 display_id = 3;
  bool has_display_id() const;
  void clear_display_id();
  ::PROTOBUF_NAMESPACE_ID::int32 display_id() const;
  void set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 stack_id = 4;
  bool has_stack_id() const;
  void clear_stack_id();
  ::PROTOBUF_NAMESPACE_ID::int32 stack_id() const;
  void set_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 requested_width = 18;
  bool has_requested_width() const;
  void clear_requested_width();
  ::PROTOBUF_NAMESPACE_ID::int32 requested_width() const;
  void set_requested_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 requested_height = 19;
  bool has_requested_height() const;
  void clear_requested_height();
  ::PROTOBUF_NAMESPACE_ID::int32 requested_height() const;
  void set_requested_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 view_visibility = 20 [(.android.typedef) = "android.view.View.Visibility"];
  bool has_view_visibility() const;
  void clear_view_visibility();
  ::PROTOBUF_NAMESPACE_ID::int32 view_visibility() const;
  void set_view_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 system_ui_visibility = 21 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_system_ui_visibility() const;
  PROTOBUF_DEPRECATED void clear_system_ui_visibility();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 system_ui_visibility() const;
  PROTOBUF_DEPRECATED void set_system_ui_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool animating_exit = 14;
  bool has_animating_exit() const;
  void clear_animating_exit();
  bool animating_exit() const;
  void set_animating_exit(bool value);

  // optional bool has_surface = 22;
  bool has_has_surface() const;
  void clear_has_surface();
  bool has_surface() const;
  void set_has_surface(bool value);

  // optional bool is_ready_for_display = 23;
  bool has_is_ready_for_display() const;
  void clear_is_ready_for_display();
  bool is_ready_for_display() const;
  void set_is_ready_for_display(bool value);

  // optional bool remove_on_exit = 34;
  bool has_remove_on_exit() const;
  void clear_remove_on_exit();
  bool remove_on_exit() const;
  void set_remove_on_exit(bool value);

  // optional bool destroying = 35;
  bool has_destroying() const;
  void clear_destroying();
  bool destroying() const;
  void set_destroying(bool value);

  // optional bool removed = 36;
  bool has_removed() const;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);

  // optional bool is_on_screen = 37;
  bool has_is_on_screen() const;
  void clear_is_on_screen();
  bool is_on_screen() const;
  void set_is_on_screen(bool value);

  // optional bool is_visible = 38;
  bool has_is_visible() const;
  void clear_is_visible();
  bool is_visible() const;
  void set_is_visible(bool value);

  // optional int64 finished_seamless_rotation_frame = 40;
  bool has_finished_seamless_rotation_frame() const;
  void clear_finished_seamless_rotation_frame();
  ::PROTOBUF_NAMESPACE_ID::int64 finished_seamless_rotation_frame() const;
  void set_finished_seamless_rotation_frame(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool pending_seamless_rotation = 39;
  bool has_pending_seamless_rotation() const;
  void clear_pending_seamless_rotation();
  bool pending_seamless_rotation() const;
  void set_pending_seamless_rotation(bool value);

  // optional bool force_seamless_rotation = 42;
  bool has_force_seamless_rotation() const;
  void clear_force_seamless_rotation();
  bool force_seamless_rotation() const;
  void set_force_seamless_rotation(bool value);

  // optional bool has_compat_scale = 43;
  bool has_has_compat_scale() const;
  void clear_has_compat_scale();
  bool has_compat_scale() const;
  void set_has_compat_scale(bool value);

  // optional float global_scale = 44;
  bool has_global_scale() const;
  void clear_global_scale();
  float global_scale() const;
  void set_global_scale(float value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto > child_windows_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  ::com::android::server::wm::IdentifierProto* identifier_;
  ::android::view::WindowLayoutParamsProto* attributes_;
  ::android::graphics::RectProto* given_content_insets_;
  ::android::graphics::RectProto* frame_;
  ::android::graphics::RectProto* containing_frame_;
  ::android::graphics::RectProto* parent_frame_;
  ::android::graphics::RectProto* content_frame_;
  ::android::graphics::RectProto* content_insets_;
  ::android::graphics::RectProto* surface_insets_;
  ::com::android::server::wm::WindowStateAnimatorProto* animator_;
  ::android::graphics::RectProto* surface_position_;
  ::android::graphics::RectProto* display_frame_;
  ::android::graphics::RectProto* overscan_frame_;
  ::android::graphics::RectProto* visible_frame_;
  ::android::graphics::RectProto* decor_frame_;
  ::android::graphics::RectProto* outset_frame_;
  ::android::graphics::RectProto* overscan_insets_;
  ::android::graphics::RectProto* visible_insets_;
  ::android::graphics::RectProto* stable_insets_;
  ::android::graphics::RectProto* outsets_;
  ::android::view::DisplayCutoutProto* cutout_;
  ::com::android::server::wm::WindowFramesProto* window_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 stack_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 requested_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 requested_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_visibility_;
  ::PROTOBUF_NAMESPACE_ID::int32 system_ui_visibility_;
  bool animating_exit_;
  bool has_surface_;
  bool is_ready_for_display_;
  bool remove_on_exit_;
  bool destroying_;
  bool removed_;
  bool is_on_screen_;
  bool is_visible_;
  ::PROTOBUF_NAMESPACE_ID::int64 finished_seamless_rotation_frame_;
  bool pending_seamless_rotation_;
  bool force_seamless_rotation_;
  bool has_compat_scale_;
  float global_scale_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class IdentifierProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.IdentifierProto) */ {
 public:
  IdentifierProto();
  virtual ~IdentifierProto();

  IdentifierProto(const IdentifierProto& from);
  IdentifierProto(IdentifierProto&& from) noexcept
    : IdentifierProto() {
    *this = ::std::move(from);
  }

  inline IdentifierProto& operator=(const IdentifierProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifierProto& operator=(IdentifierProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdentifierProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifierProto* internal_default_instance() {
    return reinterpret_cast<const IdentifierProto*>(
               &_IdentifierProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(IdentifierProto& a, IdentifierProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifierProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentifierProto* New() const final {
    return CreateMaybeMessage<IdentifierProto>(nullptr);
  }

  IdentifierProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentifierProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentifierProto& from);
  void MergeFrom(const IdentifierProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifierProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.IdentifierProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kHashCodeFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional string title = 3 [(.android.privacy) = {
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional int32 hash_code = 1;
  bool has_hash_code() const;
  void clear_hash_code();
  ::PROTOBUF_NAMESPACE_ID::int32 hash_code() const;
  void set_hash_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.IdentifierProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int32 hash_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowStateAnimatorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowStateAnimatorProto) */ {
 public:
  WindowStateAnimatorProto();
  virtual ~WindowStateAnimatorProto();

  WindowStateAnimatorProto(const WindowStateAnimatorProto& from);
  WindowStateAnimatorProto(WindowStateAnimatorProto&& from) noexcept
    : WindowStateAnimatorProto() {
    *this = ::std::move(from);
  }

  inline WindowStateAnimatorProto& operator=(const WindowStateAnimatorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowStateAnimatorProto& operator=(WindowStateAnimatorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowStateAnimatorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowStateAnimatorProto* internal_default_instance() {
    return reinterpret_cast<const WindowStateAnimatorProto*>(
               &_WindowStateAnimatorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WindowStateAnimatorProto& a, WindowStateAnimatorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowStateAnimatorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowStateAnimatorProto* New() const final {
    return CreateMaybeMessage<WindowStateAnimatorProto>(nullptr);
  }

  WindowStateAnimatorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowStateAnimatorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowStateAnimatorProto& from);
  void MergeFrom(const WindowStateAnimatorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowStateAnimatorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowStateAnimatorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WindowStateAnimatorProto_DrawState DrawState;
  static constexpr DrawState NO_SURFACE =
    WindowStateAnimatorProto_DrawState_NO_SURFACE;
  static constexpr DrawState DRAW_PENDING =
    WindowStateAnimatorProto_DrawState_DRAW_PENDING;
  static constexpr DrawState COMMIT_DRAW_PENDING =
    WindowStateAnimatorProto_DrawState_COMMIT_DRAW_PENDING;
  static constexpr DrawState READY_TO_SHOW =
    WindowStateAnimatorProto_DrawState_READY_TO_SHOW;
  static constexpr DrawState HAS_DRAWN =
    WindowStateAnimatorProto_DrawState_HAS_DRAWN;
  static inline bool DrawState_IsValid(int value) {
    return WindowStateAnimatorProto_DrawState_IsValid(value);
  }
  static constexpr DrawState DrawState_MIN =
    WindowStateAnimatorProto_DrawState_DrawState_MIN;
  static constexpr DrawState DrawState_MAX =
    WindowStateAnimatorProto_DrawState_DrawState_MAX;
  static constexpr int DrawState_ARRAYSIZE =
    WindowStateAnimatorProto_DrawState_DrawState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrawState_descriptor() {
    return WindowStateAnimatorProto_DrawState_descriptor();
  }
  template<typename T>
  static inline const std::string& DrawState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawState_Name.");
    return WindowStateAnimatorProto_DrawState_Name(enum_t_value);
  }
  static inline bool DrawState_Parse(const std::string& name,
      DrawState* value) {
    return WindowStateAnimatorProto_DrawState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLastClipRectFieldNumber = 1,
    kSurfaceFieldNumber = 2,
    kSystemDecorRectFieldNumber = 4,
    kDrawStateFieldNumber = 3,
  };
  // optional .android.graphics.RectProto last_clip_rect = 1;
  bool has_last_clip_rect() const;
  void clear_last_clip_rect();
  const ::android::graphics::RectProto& last_clip_rect() const;
  ::android::graphics::RectProto* release_last_clip_rect();
  ::android::graphics::RectProto* mutable_last_clip_rect();
  void set_allocated_last_clip_rect(::android::graphics::RectProto* last_clip_rect);

  // optional .com.android.server.wm.WindowSurfaceControllerProto surface = 2;
  bool has_surface() const;
  void clear_surface();
  const ::com::android::server::wm::WindowSurfaceControllerProto& surface() const;
  ::com::android::server::wm::WindowSurfaceControllerProto* release_surface();
  ::com::android::server::wm::WindowSurfaceControllerProto* mutable_surface();
  void set_allocated_surface(::com::android::server::wm::WindowSurfaceControllerProto* surface);

  // optional .android.graphics.RectProto system_decor_rect = 4;
  bool has_system_decor_rect() const;
  void clear_system_decor_rect();
  const ::android::graphics::RectProto& system_decor_rect() const;
  ::android::graphics::RectProto* release_system_decor_rect();
  ::android::graphics::RectProto* mutable_system_decor_rect();
  void set_allocated_system_decor_rect(::android::graphics::RectProto* system_decor_rect);

  // optional .com.android.server.wm.WindowStateAnimatorProto.DrawState draw_state = 3;
  bool has_draw_state() const;
  void clear_draw_state();
  ::com::android::server::wm::WindowStateAnimatorProto_DrawState draw_state() const;
  void set_draw_state(::com::android::server::wm::WindowStateAnimatorProto_DrawState value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowStateAnimatorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::graphics::RectProto* last_clip_rect_;
  ::com::android::server::wm::WindowSurfaceControllerProto* surface_;
  ::android::graphics::RectProto* system_decor_rect_;
  int draw_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowSurfaceControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowSurfaceControllerProto) */ {
 public:
  WindowSurfaceControllerProto();
  virtual ~WindowSurfaceControllerProto();

  WindowSurfaceControllerProto(const WindowSurfaceControllerProto& from);
  WindowSurfaceControllerProto(WindowSurfaceControllerProto&& from) noexcept
    : WindowSurfaceControllerProto() {
    *this = ::std::move(from);
  }

  inline WindowSurfaceControllerProto& operator=(const WindowSurfaceControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowSurfaceControllerProto& operator=(WindowSurfaceControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowSurfaceControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowSurfaceControllerProto* internal_default_instance() {
    return reinterpret_cast<const WindowSurfaceControllerProto*>(
               &_WindowSurfaceControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WindowSurfaceControllerProto& a, WindowSurfaceControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowSurfaceControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowSurfaceControllerProto* New() const final {
    return CreateMaybeMessage<WindowSurfaceControllerProto>(nullptr);
  }

  WindowSurfaceControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowSurfaceControllerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowSurfaceControllerProto& from);
  void MergeFrom(const WindowSurfaceControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowSurfaceControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowSurfaceControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShownFieldNumber = 1,
    kLayerFieldNumber = 2,
  };
  // optional bool shown = 1;
  bool has_shown() const;
  void clear_shown();
  bool shown() const;
  void set_shown(bool value);

  // optional int32 layer = 2;
  bool has_layer() const;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowSurfaceControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool shown_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ScreenRotationAnimationProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.ScreenRotationAnimationProto) */ {
 public:
  ScreenRotationAnimationProto();
  virtual ~ScreenRotationAnimationProto();

  ScreenRotationAnimationProto(const ScreenRotationAnimationProto& from);
  ScreenRotationAnimationProto(ScreenRotationAnimationProto&& from) noexcept
    : ScreenRotationAnimationProto() {
    *this = ::std::move(from);
  }

  inline ScreenRotationAnimationProto& operator=(const ScreenRotationAnimationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenRotationAnimationProto& operator=(ScreenRotationAnimationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScreenRotationAnimationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenRotationAnimationProto* internal_default_instance() {
    return reinterpret_cast<const ScreenRotationAnimationProto*>(
               &_ScreenRotationAnimationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ScreenRotationAnimationProto& a, ScreenRotationAnimationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ScreenRotationAnimationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScreenRotationAnimationProto* New() const final {
    return CreateMaybeMessage<ScreenRotationAnimationProto>(nullptr);
  }

  ScreenRotationAnimationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScreenRotationAnimationProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScreenRotationAnimationProto& from);
  void MergeFrom(const ScreenRotationAnimationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenRotationAnimationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.ScreenRotationAnimationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartedFieldNumber = 1,
    kAnimationRunningFieldNumber = 2,
  };
  // optional bool started = 1;
  bool has_started() const;
  void clear_started();
  bool started() const;
  void set_started(bool value);

  // optional bool animation_running = 2;
  bool has_animation_running() const;
  void clear_animation_running();
  bool animation_running() const;
  void set_animation_running(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.ScreenRotationAnimationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool started_;
  bool animation_running_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowContainerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowContainerProto) */ {
 public:
  WindowContainerProto();
  virtual ~WindowContainerProto();

  WindowContainerProto(const WindowContainerProto& from);
  WindowContainerProto(WindowContainerProto&& from) noexcept
    : WindowContainerProto() {
    *this = ::std::move(from);
  }

  inline WindowContainerProto& operator=(const WindowContainerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowContainerProto& operator=(WindowContainerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowContainerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowContainerProto* internal_default_instance() {
    return reinterpret_cast<const WindowContainerProto*>(
               &_WindowContainerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WindowContainerProto& a, WindowContainerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowContainerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowContainerProto* New() const final {
    return CreateMaybeMessage<WindowContainerProto>(nullptr);
  }

  WindowContainerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowContainerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowContainerProto& from);
  void MergeFrom(const WindowContainerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowContainerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowContainerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 5,
    kConfigurationContainerFieldNumber = 1,
    kSurfaceAnimatorFieldNumber = 4,
    kIdentifierFieldNumber = 6,
    kSurfaceControlFieldNumber = 7,
    kOrientationFieldNumber = 2,
    kVisibleFieldNumber = 3,
  };
  // repeated .com.android.server.wm.WindowContainerChildProto children = 5;
  int children_size() const;
  void clear_children();
  ::com::android::server::wm::WindowContainerChildProto* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowContainerChildProto >*
      mutable_children();
  const ::com::android::server::wm::WindowContainerChildProto& children(int index) const;
  ::com::android::server::wm::WindowContainerChildProto* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowContainerChildProto >&
      children() const;

  // optional .com.android.server.wm.ConfigurationContainerProto configuration_container = 1;
  bool has_configuration_container() const;
  void clear_configuration_container();
  const ::com::android::server::wm::ConfigurationContainerProto& configuration_container() const;
  ::com::android::server::wm::ConfigurationContainerProto* release_configuration_container();
  ::com::android::server::wm::ConfigurationContainerProto* mutable_configuration_container();
  void set_allocated_configuration_container(::com::android::server::wm::ConfigurationContainerProto* configuration_container);

  // optional .com.android.server.wm.SurfaceAnimatorProto surface_animator = 4;
  bool has_surface_animator() const;
  void clear_surface_animator();
  const ::com::android::server::wm::SurfaceAnimatorProto& surface_animator() const;
  ::com::android::server::wm::SurfaceAnimatorProto* release_surface_animator();
  ::com::android::server::wm::SurfaceAnimatorProto* mutable_surface_animator();
  void set_allocated_surface_animator(::com::android::server::wm::SurfaceAnimatorProto* surface_animator);

  // optional .com.android.server.wm.IdentifierProto identifier = 6;
  bool has_identifier() const;
  void clear_identifier();
  const ::com::android::server::wm::IdentifierProto& identifier() const;
  ::com::android::server::wm::IdentifierProto* release_identifier();
  ::com::android::server::wm::IdentifierProto* mutable_identifier();
  void set_allocated_identifier(::com::android::server::wm::IdentifierProto* identifier);

  // optional .android.view.SurfaceControlProto surface_control = 7;
  bool has_surface_control() const;
  void clear_surface_control();
  const ::android::view::SurfaceControlProto& surface_control() const;
  ::android::view::SurfaceControlProto* release_surface_control();
  ::android::view::SurfaceControlProto* mutable_surface_control();
  void set_allocated_surface_control(::android::view::SurfaceControlProto* surface_control);

  // optional int32 orientation = 2 [(.android.typedef) = "android.content.pm.ActivityInfo.ScreenOrientation"];
  bool has_orientation() const;
  void clear_orientation();
  ::PROTOBUF_NAMESPACE_ID::int32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool visible = 3;
  bool has_visible() const;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowContainerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowContainerChildProto > children_;
  ::com::android::server::wm::ConfigurationContainerProto* configuration_container_;
  ::com::android::server::wm::SurfaceAnimatorProto* surface_animator_;
  ::com::android::server::wm::IdentifierProto* identifier_;
  ::android::view::SurfaceControlProto* surface_control_;
  ::PROTOBUF_NAMESPACE_ID::int32 orientation_;
  bool visible_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowContainerChildProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowContainerChildProto) */ {
 public:
  WindowContainerChildProto();
  virtual ~WindowContainerChildProto();

  WindowContainerChildProto(const WindowContainerChildProto& from);
  WindowContainerChildProto(WindowContainerChildProto&& from) noexcept
    : WindowContainerChildProto() {
    *this = ::std::move(from);
  }

  inline WindowContainerChildProto& operator=(const WindowContainerChildProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowContainerChildProto& operator=(WindowContainerChildProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowContainerChildProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowContainerChildProto* internal_default_instance() {
    return reinterpret_cast<const WindowContainerChildProto*>(
               &_WindowContainerChildProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WindowContainerChildProto& a, WindowContainerChildProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowContainerChildProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowContainerChildProto* New() const final {
    return CreateMaybeMessage<WindowContainerChildProto>(nullptr);
  }

  WindowContainerChildProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowContainerChildProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowContainerChildProto& from);
  void MergeFrom(const WindowContainerChildProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowContainerChildProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowContainerChildProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowContainerFieldNumber = 2,
    kDisplayContentFieldNumber = 3,
    kDisplayAreaFieldNumber = 4,
    kTaskFieldNumber = 5,
    kActivityFieldNumber = 6,
    kWindowTokenFieldNumber = 7,
    kWindowFieldNumber = 8,
    kTaskFragmentFieldNumber = 9,
  };
  // optional .com.android.server.wm.WindowContainerProto window_container = 2;
  bool has_window_container() const;
  void clear_window_container();
  const ::com::android::server::wm::WindowContainerProto& window_container() const;
  ::com::android::server::wm::WindowContainerProto* release_window_container();
  ::com::android::server::wm::WindowContainerProto* mutable_window_container();
  void set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container);

  // optional .com.android.server.wm.DisplayContentProto display_content = 3;
  bool has_display_content() const;
  void clear_display_content();
  const ::com::android::server::wm::DisplayContentProto& display_content() const;
  ::com::android::server::wm::DisplayContentProto* release_display_content();
  ::com::android::server::wm::DisplayContentProto* mutable_display_content();
  void set_allocated_display_content(::com::android::server::wm::DisplayContentProto* display_content);

  // optional .com.android.server.wm.DisplayAreaProto display_area = 4;
  bool has_display_area() const;
  void clear_display_area();
  const ::com::android::server::wm::DisplayAreaProto& display_area() const;
  ::com::android::server::wm::DisplayAreaProto* release_display_area();
  ::com::android::server::wm::DisplayAreaProto* mutable_display_area();
  void set_allocated_display_area(::com::android::server::wm::DisplayAreaProto* display_area);

  // optional .com.android.server.wm.TaskProto task = 5;
  bool has_task() const;
  void clear_task();
  const ::com::android::server::wm::TaskProto& task() const;
  ::com::android::server::wm::TaskProto* release_task();
  ::com::android::server::wm::TaskProto* mutable_task();
  void set_allocated_task(::com::android::server::wm::TaskProto* task);

  // optional .com.android.server.wm.ActivityRecordProto activity = 6;
  bool has_activity() const;
  void clear_activity();
  const ::com::android::server::wm::ActivityRecordProto& activity() const;
  ::com::android::server::wm::ActivityRecordProto* release_activity();
  ::com::android::server::wm::ActivityRecordProto* mutable_activity();
  void set_allocated_activity(::com::android::server::wm::ActivityRecordProto* activity);

  // optional .com.android.server.wm.WindowTokenProto window_token = 7;
  bool has_window_token() const;
  void clear_window_token();
  const ::com::android::server::wm::WindowTokenProto& window_token() const;
  ::com::android::server::wm::WindowTokenProto* release_window_token();
  ::com::android::server::wm::WindowTokenProto* mutable_window_token();
  void set_allocated_window_token(::com::android::server::wm::WindowTokenProto* window_token);

  // optional .com.android.server.wm.WindowStateProto window = 8;
  bool has_window() const;
  void clear_window();
  const ::com::android::server::wm::WindowStateProto& window() const;
  ::com::android::server::wm::WindowStateProto* release_window();
  ::com::android::server::wm::WindowStateProto* mutable_window();
  void set_allocated_window(::com::android::server::wm::WindowStateProto* window);

  // optional .com.android.server.wm.TaskFragmentProto task_fragment = 9;
  bool has_task_fragment() const;
  void clear_task_fragment();
  const ::com::android::server::wm::TaskFragmentProto& task_fragment() const;
  ::com::android::server::wm::TaskFragmentProto* release_task_fragment();
  ::com::android::server::wm::TaskFragmentProto* mutable_task_fragment();
  void set_allocated_task_fragment(::com::android::server::wm::TaskFragmentProto* task_fragment);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowContainerChildProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::WindowContainerProto* window_container_;
  ::com::android::server::wm::DisplayContentProto* display_content_;
  ::com::android::server::wm::DisplayAreaProto* display_area_;
  ::com::android::server::wm::TaskProto* task_;
  ::com::android::server::wm::ActivityRecordProto* activity_;
  ::com::android::server::wm::WindowTokenProto* window_token_;
  ::com::android::server::wm::WindowStateProto* window_;
  ::com::android::server::wm::TaskFragmentProto* task_fragment_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationContainerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.ConfigurationContainerProto) */ {
 public:
  ConfigurationContainerProto();
  virtual ~ConfigurationContainerProto();

  ConfigurationContainerProto(const ConfigurationContainerProto& from);
  ConfigurationContainerProto(ConfigurationContainerProto&& from) noexcept
    : ConfigurationContainerProto() {
    *this = ::std::move(from);
  }

  inline ConfigurationContainerProto& operator=(const ConfigurationContainerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationContainerProto& operator=(ConfigurationContainerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationContainerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigurationContainerProto* internal_default_instance() {
    return reinterpret_cast<const ConfigurationContainerProto*>(
               &_ConfigurationContainerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ConfigurationContainerProto& a, ConfigurationContainerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationContainerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationContainerProto* New() const final {
    return CreateMaybeMessage<ConfigurationContainerProto>(nullptr);
  }

  ConfigurationContainerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationContainerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationContainerProto& from);
  void MergeFrom(const ConfigurationContainerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationContainerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.ConfigurationContainerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverrideConfigurationFieldNumber = 1,
    kFullConfigurationFieldNumber = 2,
    kMergedOverrideConfigurationFieldNumber = 3,
  };
  // optional .android.content.ConfigurationProto override_configuration = 1;
  bool has_override_configuration() const;
  void clear_override_configuration();
  const ::android::content::ConfigurationProto& override_configuration() const;
  ::android::content::ConfigurationProto* release_override_configuration();
  ::android::content::ConfigurationProto* mutable_override_configuration();
  void set_allocated_override_configuration(::android::content::ConfigurationProto* override_configuration);

  // optional .android.content.ConfigurationProto full_configuration = 2;
  bool has_full_configuration() const;
  void clear_full_configuration();
  const ::android::content::ConfigurationProto& full_configuration() const;
  ::android::content::ConfigurationProto* release_full_configuration();
  ::android::content::ConfigurationProto* mutable_full_configuration();
  void set_allocated_full_configuration(::android::content::ConfigurationProto* full_configuration);

  // optional .android.content.ConfigurationProto merged_override_configuration = 3;
  bool has_merged_override_configuration() const;
  void clear_merged_override_configuration();
  const ::android::content::ConfigurationProto& merged_override_configuration() const;
  ::android::content::ConfigurationProto* release_merged_override_configuration();
  ::android::content::ConfigurationProto* mutable_merged_override_configuration();
  void set_allocated_merged_override_configuration(::android::content::ConfigurationProto* merged_override_configuration);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.ConfigurationContainerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::content::ConfigurationProto* override_configuration_;
  ::android::content::ConfigurationProto* full_configuration_;
  ::android::content::ConfigurationProto* merged_override_configuration_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WindowFramesProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowFramesProto) */ {
 public:
  WindowFramesProto();
  virtual ~WindowFramesProto();

  WindowFramesProto(const WindowFramesProto& from);
  WindowFramesProto(WindowFramesProto&& from) noexcept
    : WindowFramesProto() {
    *this = ::std::move(from);
  }

  inline WindowFramesProto& operator=(const WindowFramesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowFramesProto& operator=(WindowFramesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowFramesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowFramesProto* internal_default_instance() {
    return reinterpret_cast<const WindowFramesProto*>(
               &_WindowFramesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WindowFramesProto& a, WindowFramesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowFramesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowFramesProto* New() const final {
    return CreateMaybeMessage<WindowFramesProto>(nullptr);
  }

  WindowFramesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowFramesProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowFramesProto& from);
  void MergeFrom(const WindowFramesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowFramesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowFramesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainingFrameFieldNumber = 1,
    kContentFrameFieldNumber = 2,
    kDecorFrameFieldNumber = 3,
    kDisplayFrameFieldNumber = 4,
    kFrameFieldNumber = 5,
    kOutsetFrameFieldNumber = 6,
    kOverscanFrameFieldNumber = 7,
    kParentFrameFieldNumber = 8,
    kVisibleFrameFieldNumber = 9,
    kCutoutFieldNumber = 10,
    kContentInsetsFieldNumber = 11,
    kOverscanInsetsFieldNumber = 12,
    kVisibleInsetsFieldNumber = 13,
    kStableInsetsFieldNumber = 14,
    kOutsetsFieldNumber = 15,
    kCompatFrameFieldNumber = 16,
  };
  // optional .android.graphics.RectProto containing_frame = 1;
  bool has_containing_frame() const;
  void clear_containing_frame();
  const ::android::graphics::RectProto& containing_frame() const;
  ::android::graphics::RectProto* release_containing_frame();
  ::android::graphics::RectProto* mutable_containing_frame();
  void set_allocated_containing_frame(::android::graphics::RectProto* containing_frame);

  // optional .android.graphics.RectProto content_frame = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_content_frame() const;
  PROTOBUF_DEPRECATED void clear_content_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& content_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_content_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_content_frame();
  PROTOBUF_DEPRECATED void set_allocated_content_frame(::android::graphics::RectProto* content_frame);

  // optional .android.graphics.RectProto decor_frame = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_decor_frame() const;
  PROTOBUF_DEPRECATED void clear_decor_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& decor_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_decor_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_decor_frame();
  PROTOBUF_DEPRECATED void set_allocated_decor_frame(::android::graphics::RectProto* decor_frame);

  // optional .android.graphics.RectProto display_frame = 4;
  bool has_display_frame() const;
  void clear_display_frame();
  const ::android::graphics::RectProto& display_frame() const;
  ::android::graphics::RectProto* release_display_frame();
  ::android::graphics::RectProto* mutable_display_frame();
  void set_allocated_display_frame(::android::graphics::RectProto* display_frame);

  // optional .android.graphics.RectProto frame = 5;
  bool has_frame() const;
  void clear_frame();
  const ::android::graphics::RectProto& frame() const;
  ::android::graphics::RectProto* release_frame();
  ::android::graphics::RectProto* mutable_frame();
  void set_allocated_frame(::android::graphics::RectProto* frame);

  // optional .android.graphics.RectProto outset_frame = 6;
  bool has_outset_frame() const;
  void clear_outset_frame();
  const ::android::graphics::RectProto& outset_frame() const;
  ::android::graphics::RectProto* release_outset_frame();
  ::android::graphics::RectProto* mutable_outset_frame();
  void set_allocated_outset_frame(::android::graphics::RectProto* outset_frame);

  // optional .android.graphics.RectProto overscan_frame = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_overscan_frame() const;
  PROTOBUF_DEPRECATED void clear_overscan_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& overscan_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_overscan_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_overscan_frame();
  PROTOBUF_DEPRECATED void set_allocated_overscan_frame(::android::graphics::RectProto* overscan_frame);

  // optional .android.graphics.RectProto parent_frame = 8;
  bool has_parent_frame() const;
  void clear_parent_frame();
  const ::android::graphics::RectProto& parent_frame() const;
  ::android::graphics::RectProto* release_parent_frame();
  ::android::graphics::RectProto* mutable_parent_frame();
  void set_allocated_parent_frame(::android::graphics::RectProto* parent_frame);

  // optional .android.graphics.RectProto visible_frame = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_visible_frame() const;
  PROTOBUF_DEPRECATED void clear_visible_frame();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& visible_frame() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_visible_frame();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_visible_frame();
  PROTOBUF_DEPRECATED void set_allocated_visible_frame(::android::graphics::RectProto* visible_frame);

  // optional .android.view.DisplayCutoutProto cutout = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_cutout() const;
  PROTOBUF_DEPRECATED void clear_cutout();
  PROTOBUF_DEPRECATED const ::android::view::DisplayCutoutProto& cutout() const;
  PROTOBUF_DEPRECATED ::android::view::DisplayCutoutProto* release_cutout();
  PROTOBUF_DEPRECATED ::android::view::DisplayCutoutProto* mutable_cutout();
  PROTOBUF_DEPRECATED void set_allocated_cutout(::android::view::DisplayCutoutProto* cutout);

  // optional .android.graphics.RectProto content_insets = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_content_insets() const;
  PROTOBUF_DEPRECATED void clear_content_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& content_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_content_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_content_insets();
  PROTOBUF_DEPRECATED void set_allocated_content_insets(::android::graphics::RectProto* content_insets);

  // optional .android.graphics.RectProto overscan_insets = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_overscan_insets() const;
  PROTOBUF_DEPRECATED void clear_overscan_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& overscan_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_overscan_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_overscan_insets();
  PROTOBUF_DEPRECATED void set_allocated_overscan_insets(::android::graphics::RectProto* overscan_insets);

  // optional .android.graphics.RectProto visible_insets = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_visible_insets() const;
  PROTOBUF_DEPRECATED void clear_visible_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& visible_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_visible_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_visible_insets();
  PROTOBUF_DEPRECATED void set_allocated_visible_insets(::android::graphics::RectProto* visible_insets);

  // optional .android.graphics.RectProto stable_insets = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_stable_insets() const;
  PROTOBUF_DEPRECATED void clear_stable_insets();
  PROTOBUF_DEPRECATED const ::android::graphics::RectProto& stable_insets() const;
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* release_stable_insets();
  PROTOBUF_DEPRECATED ::android::graphics::RectProto* mutable_stable_insets();
  PROTOBUF_DEPRECATED void set_allocated_stable_insets(::android::graphics::RectProto* stable_insets);

  // optional .android.graphics.RectProto outsets = 15;
  bool has_outsets() const;
  void clear_outsets();
  const ::android::graphics::RectProto& outsets() const;
  ::android::graphics::RectProto* release_outsets();
  ::android::graphics::RectProto* mutable_outsets();
  void set_allocated_outsets(::android::graphics::RectProto* outsets);

  // optional .android.graphics.RectProto compat_frame = 16;
  bool has_compat_frame() const;
  void clear_compat_frame();
  const ::android::graphics::RectProto& compat_frame() const;
  ::android::graphics::RectProto* release_compat_frame();
  ::android::graphics::RectProto* mutable_compat_frame();
  void set_allocated_compat_frame(::android::graphics::RectProto* compat_frame);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowFramesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::graphics::RectProto* containing_frame_;
  ::android::graphics::RectProto* content_frame_;
  ::android::graphics::RectProto* decor_frame_;
  ::android::graphics::RectProto* display_frame_;
  ::android::graphics::RectProto* frame_;
  ::android::graphics::RectProto* outset_frame_;
  ::android::graphics::RectProto* overscan_frame_;
  ::android::graphics::RectProto* parent_frame_;
  ::android::graphics::RectProto* visible_frame_;
  ::android::view::DisplayCutoutProto* cutout_;
  ::android::graphics::RectProto* content_insets_;
  ::android::graphics::RectProto* overscan_insets_;
  ::android::graphics::RectProto* visible_insets_;
  ::android::graphics::RectProto* stable_insets_;
  ::android::graphics::RectProto* outsets_;
  ::android::graphics::RectProto* compat_frame_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class InsetsSourceProviderProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.InsetsSourceProviderProto) */ {
 public:
  InsetsSourceProviderProto();
  virtual ~InsetsSourceProviderProto();

  InsetsSourceProviderProto(const InsetsSourceProviderProto& from);
  InsetsSourceProviderProto(InsetsSourceProviderProto&& from) noexcept
    : InsetsSourceProviderProto() {
    *this = ::std::move(from);
  }

  inline InsetsSourceProviderProto& operator=(const InsetsSourceProviderProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsetsSourceProviderProto& operator=(InsetsSourceProviderProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsetsSourceProviderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsetsSourceProviderProto* internal_default_instance() {
    return reinterpret_cast<const InsetsSourceProviderProto*>(
               &_InsetsSourceProviderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(InsetsSourceProviderProto& a, InsetsSourceProviderProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InsetsSourceProviderProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsetsSourceProviderProto* New() const final {
    return CreateMaybeMessage<InsetsSourceProviderProto>(nullptr);
  }

  InsetsSourceProviderProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsetsSourceProviderProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsetsSourceProviderProto& from);
  void MergeFrom(const InsetsSourceProviderProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsetsSourceProviderProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.InsetsSourceProviderProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kFrameFieldNumber = 2,
    kFakeControlFieldNumber = 3,
    kControlFieldNumber = 4,
    kControlTargetFieldNumber = 5,
    kPendingControlTargetFieldNumber = 6,
    kFakeControlTargetFieldNumber = 7,
    kCapturedLeashFieldNumber = 8,
    kImeOverriddenFrameFieldNumber = 9,
    kIsLeashReadyForDispatchingFieldNumber = 10,
    kClientVisibleFieldNumber = 11,
    kServerVisibleFieldNumber = 12,
    kSeamlessRotatingFieldNumber = 13,
    kControllableFieldNumber = 15,
    kFinishSeamlessRotateFrameNumberFieldNumber = 14,
  };
  // optional .android.view.InsetsSourceProto source = 1;
  bool has_source() const;
  void clear_source();
  const ::android::view::InsetsSourceProto& source() const;
  ::android::view::InsetsSourceProto* release_source();
  ::android::view::InsetsSourceProto* mutable_source();
  void set_allocated_source(::android::view::InsetsSourceProto* source);

  // optional .android.graphics.RectProto frame = 2;
  bool has_frame() const;
  void clear_frame();
  const ::android::graphics::RectProto& frame() const;
  ::android::graphics::RectProto* release_frame();
  ::android::graphics::RectProto* mutable_frame();
  void set_allocated_frame(::android::graphics::RectProto* frame);

  // optional .android.view.InsetsSourceControlProto fake_control = 3;
  bool has_fake_control() const;
  void clear_fake_control();
  const ::android::view::InsetsSourceControlProto& fake_control() const;
  ::android::view::InsetsSourceControlProto* release_fake_control();
  ::android::view::InsetsSourceControlProto* mutable_fake_control();
  void set_allocated_fake_control(::android::view::InsetsSourceControlProto* fake_control);

  // optional .android.view.InsetsSourceControlProto control = 4;
  bool has_control() const;
  void clear_control();
  const ::android::view::InsetsSourceControlProto& control() const;
  ::android::view::InsetsSourceControlProto* release_control();
  ::android::view::InsetsSourceControlProto* mutable_control();
  void set_allocated_control(::android::view::InsetsSourceControlProto* control);

  // optional .com.android.server.wm.WindowStateProto control_target = 5;
  bool has_control_target() const;
  void clear_control_target();
  const ::com::android::server::wm::WindowStateProto& control_target() const;
  ::com::android::server::wm::WindowStateProto* release_control_target();
  ::com::android::server::wm::WindowStateProto* mutable_control_target();
  void set_allocated_control_target(::com::android::server::wm::WindowStateProto* control_target);

  // optional .com.android.server.wm.WindowStateProto pending_control_target = 6;
  bool has_pending_control_target() const;
  void clear_pending_control_target();
  const ::com::android::server::wm::WindowStateProto& pending_control_target() const;
  ::com::android::server::wm::WindowStateProto* release_pending_control_target();
  ::com::android::server::wm::WindowStateProto* mutable_pending_control_target();
  void set_allocated_pending_control_target(::com::android::server::wm::WindowStateProto* pending_control_target);

  // optional .com.android.server.wm.WindowStateProto fake_control_target = 7;
  bool has_fake_control_target() const;
  void clear_fake_control_target();
  const ::com::android::server::wm::WindowStateProto& fake_control_target() const;
  ::com::android::server::wm::WindowStateProto* release_fake_control_target();
  ::com::android::server::wm::WindowStateProto* mutable_fake_control_target();
  void set_allocated_fake_control_target(::com::android::server::wm::WindowStateProto* fake_control_target);

  // optional .android.view.SurfaceControlProto captured_leash = 8;
  bool has_captured_leash() const;
  void clear_captured_leash();
  const ::android::view::SurfaceControlProto& captured_leash() const;
  ::android::view::SurfaceControlProto* release_captured_leash();
  ::android::view::SurfaceControlProto* mutable_captured_leash();
  void set_allocated_captured_leash(::android::view::SurfaceControlProto* captured_leash);

  // optional .android.graphics.RectProto ime_overridden_frame = 9;
  bool has_ime_overridden_frame() const;
  void clear_ime_overridden_frame();
  const ::android::graphics::RectProto& ime_overridden_frame() const;
  ::android::graphics::RectProto* release_ime_overridden_frame();
  ::android::graphics::RectProto* mutable_ime_overridden_frame();
  void set_allocated_ime_overridden_frame(::android::graphics::RectProto* ime_overridden_frame);

  // optional bool is_leash_ready_for_dispatching = 10;
  bool has_is_leash_ready_for_dispatching() const;
  void clear_is_leash_ready_for_dispatching();
  bool is_leash_ready_for_dispatching() const;
  void set_is_leash_ready_for_dispatching(bool value);

  // optional bool client_visible = 11;
  bool has_client_visible() const;
  void clear_client_visible();
  bool client_visible() const;
  void set_client_visible(bool value);

  // optional bool server_visible = 12;
  bool has_server_visible() const;
  void clear_server_visible();
  bool server_visible() const;
  void set_server_visible(bool value);

  // optional bool seamless_rotating = 13;
  bool has_seamless_rotating() const;
  void clear_seamless_rotating();
  bool seamless_rotating() const;
  void set_seamless_rotating(bool value);

  // optional bool controllable = 15;
  bool has_controllable() const;
  void clear_controllable();
  bool controllable() const;
  void set_controllable(bool value);

  // optional int64 finish_seamless_rotate_frame_number = 14;
  bool has_finish_seamless_rotate_frame_number() const;
  void clear_finish_seamless_rotate_frame_number();
  ::PROTOBUF_NAMESPACE_ID::int64 finish_seamless_rotate_frame_number() const;
  void set_finish_seamless_rotate_frame_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.InsetsSourceProviderProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::view::InsetsSourceProto* source_;
  ::android::graphics::RectProto* frame_;
  ::android::view::InsetsSourceControlProto* fake_control_;
  ::android::view::InsetsSourceControlProto* control_;
  ::com::android::server::wm::WindowStateProto* control_target_;
  ::com::android::server::wm::WindowStateProto* pending_control_target_;
  ::com::android::server::wm::WindowStateProto* fake_control_target_;
  ::android::view::SurfaceControlProto* captured_leash_;
  ::android::graphics::RectProto* ime_overridden_frame_;
  bool is_leash_ready_for_dispatching_;
  bool client_visible_;
  bool server_visible_;
  bool seamless_rotating_;
  bool controllable_;
  ::PROTOBUF_NAMESPACE_ID::int64 finish_seamless_rotate_frame_number_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ImeInsetsSourceProviderProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.ImeInsetsSourceProviderProto) */ {
 public:
  ImeInsetsSourceProviderProto();
  virtual ~ImeInsetsSourceProviderProto();

  ImeInsetsSourceProviderProto(const ImeInsetsSourceProviderProto& from);
  ImeInsetsSourceProviderProto(ImeInsetsSourceProviderProto&& from) noexcept
    : ImeInsetsSourceProviderProto() {
    *this = ::std::move(from);
  }

  inline ImeInsetsSourceProviderProto& operator=(const ImeInsetsSourceProviderProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImeInsetsSourceProviderProto& operator=(ImeInsetsSourceProviderProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImeInsetsSourceProviderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImeInsetsSourceProviderProto* internal_default_instance() {
    return reinterpret_cast<const ImeInsetsSourceProviderProto*>(
               &_ImeInsetsSourceProviderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ImeInsetsSourceProviderProto& a, ImeInsetsSourceProviderProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ImeInsetsSourceProviderProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImeInsetsSourceProviderProto* New() const final {
    return CreateMaybeMessage<ImeInsetsSourceProviderProto>(nullptr);
  }

  ImeInsetsSourceProviderProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImeInsetsSourceProviderProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImeInsetsSourceProviderProto& from);
  void MergeFrom(const ImeInsetsSourceProviderProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImeInsetsSourceProviderProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.ImeInsetsSourceProviderProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsetsSourceProviderFieldNumber = 1,
    kImeTargetFromImeFieldNumber = 2,
    kIsImeLayoutDrawnFieldNumber = 3,
  };
  // optional .com.android.server.wm.InsetsSourceProviderProto insets_source_provider = 1;
  bool has_insets_source_provider() const;
  void clear_insets_source_provider();
  const ::com::android::server::wm::InsetsSourceProviderProto& insets_source_provider() const;
  ::com::android::server::wm::InsetsSourceProviderProto* release_insets_source_provider();
  ::com::android::server::wm::InsetsSourceProviderProto* mutable_insets_source_provider();
  void set_allocated_insets_source_provider(::com::android::server::wm::InsetsSourceProviderProto* insets_source_provider);

  // optional .com.android.server.wm.WindowStateProto ime_target_from_ime = 2;
  bool has_ime_target_from_ime() const;
  void clear_ime_target_from_ime();
  const ::com::android::server::wm::WindowStateProto& ime_target_from_ime() const;
  ::com::android::server::wm::WindowStateProto* release_ime_target_from_ime();
  ::com::android::server::wm::WindowStateProto* mutable_ime_target_from_ime();
  void set_allocated_ime_target_from_ime(::com::android::server::wm::WindowStateProto* ime_target_from_ime);

  // optional bool is_ime_layout_drawn = 3;
  bool has_is_ime_layout_drawn() const;
  void clear_is_ime_layout_drawn();
  bool is_ime_layout_drawn() const;
  void set_is_ime_layout_drawn(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.ImeInsetsSourceProviderProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::InsetsSourceProviderProto* insets_source_provider_;
  ::com::android::server::wm::WindowStateProto* ime_target_from_ime_;
  bool is_ime_layout_drawn_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WindowManagerServiceDumpProto

// optional .com.android.server.wm.WindowManagerPolicyProto policy = 1;
inline bool WindowManagerServiceDumpProto::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_policy() {
  if (policy_ != nullptr) policy_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::WindowManagerPolicyProto& WindowManagerServiceDumpProto::policy() const {
  const ::com::android::server::wm::WindowManagerPolicyProto* p = policy_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowManagerPolicyProto*>(
      &::com::android::server::wm::_WindowManagerPolicyProto_default_instance_);
}
inline ::com::android::server::wm::WindowManagerPolicyProto* WindowManagerServiceDumpProto::release_policy() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerServiceDumpProto.policy)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::WindowManagerPolicyProto* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowManagerPolicyProto* WindowManagerServiceDumpProto::mutable_policy() {
  _has_bits_[0] |= 0x00000002u;
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowManagerPolicyProto>(GetArenaNoVirtual());
    policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerServiceDumpProto.policy)
  return policy_;
}
inline void WindowManagerServiceDumpProto::set_allocated_policy(::com::android::server::wm::WindowManagerPolicyProto* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerServiceDumpProto.policy)
}

// optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
inline bool WindowManagerServiceDumpProto::has_root_window_container() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_root_window_container() {
  if (root_window_container_ != nullptr) root_window_container_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::wm::RootWindowContainerProto& WindowManagerServiceDumpProto::root_window_container() const {
  const ::com::android::server::wm::RootWindowContainerProto* p = root_window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.root_window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::RootWindowContainerProto*>(
      &::com::android::server::wm::_RootWindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::RootWindowContainerProto* WindowManagerServiceDumpProto::release_root_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerServiceDumpProto.root_window_container)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::wm::RootWindowContainerProto* temp = root_window_container_;
  root_window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::RootWindowContainerProto* WindowManagerServiceDumpProto::mutable_root_window_container() {
  _has_bits_[0] |= 0x00000004u;
  if (root_window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::RootWindowContainerProto>(GetArenaNoVirtual());
    root_window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerServiceDumpProto.root_window_container)
  return root_window_container_;
}
inline void WindowManagerServiceDumpProto::set_allocated_root_window_container(::com::android::server::wm::RootWindowContainerProto* root_window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_window_container_;
  }
  if (root_window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root_window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  root_window_container_ = root_window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerServiceDumpProto.root_window_container)
}

// optional .com.android.server.wm.IdentifierProto focused_window = 3;
inline bool WindowManagerServiceDumpProto::has_focused_window() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_focused_window() {
  if (focused_window_ != nullptr) focused_window_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::wm::IdentifierProto& WindowManagerServiceDumpProto::focused_window() const {
  const ::com::android::server::wm::IdentifierProto* p = focused_window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.focused_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerServiceDumpProto::release_focused_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerServiceDumpProto.focused_window)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::wm::IdentifierProto* temp = focused_window_;
  focused_window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerServiceDumpProto::mutable_focused_window() {
  _has_bits_[0] |= 0x00000008u;
  if (focused_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    focused_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerServiceDumpProto.focused_window)
  return focused_window_;
}
inline void WindowManagerServiceDumpProto::set_allocated_focused_window(::com::android::server::wm::IdentifierProto* focused_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete focused_window_;
  }
  if (focused_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      focused_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focused_window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  focused_window_ = focused_window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerServiceDumpProto.focused_window)
}

// optional string focused_app = 4;
inline bool WindowManagerServiceDumpProto::has_focused_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_focused_app() {
  focused_app_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WindowManagerServiceDumpProto::focused_app() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
  return focused_app_.GetNoArena();
}
inline void WindowManagerServiceDumpProto::set_focused_app(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
}
inline void WindowManagerServiceDumpProto::set_focused_app(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
}
inline void WindowManagerServiceDumpProto::set_focused_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
}
inline void WindowManagerServiceDumpProto::set_focused_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
}
inline std::string* WindowManagerServiceDumpProto::mutable_focused_app() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
  return focused_app_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WindowManagerServiceDumpProto::release_focused_app() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
  if (!has_focused_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return focused_app_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WindowManagerServiceDumpProto::set_allocated_focused_app(std::string* focused_app) {
  if (focused_app != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  focused_app_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), focused_app);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerServiceDumpProto.focused_app)
}

// optional .com.android.server.wm.IdentifierProto input_method_window = 5;
inline bool WindowManagerServiceDumpProto::has_input_method_window() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_input_method_window() {
  if (input_method_window_ != nullptr) input_method_window_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::wm::IdentifierProto& WindowManagerServiceDumpProto::input_method_window() const {
  const ::com::android::server::wm::IdentifierProto* p = input_method_window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.input_method_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerServiceDumpProto::release_input_method_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerServiceDumpProto.input_method_window)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::wm::IdentifierProto* temp = input_method_window_;
  input_method_window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerServiceDumpProto::mutable_input_method_window() {
  _has_bits_[0] |= 0x00000010u;
  if (input_method_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    input_method_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerServiceDumpProto.input_method_window)
  return input_method_window_;
}
inline void WindowManagerServiceDumpProto::set_allocated_input_method_window(::com::android::server::wm::IdentifierProto* input_method_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_method_window_;
  }
  if (input_method_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_method_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_method_window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  input_method_window_ = input_method_window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerServiceDumpProto.input_method_window)
}

// optional bool display_frozen = 6;
inline bool WindowManagerServiceDumpProto::has_display_frozen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_display_frozen() {
  display_frozen_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool WindowManagerServiceDumpProto::display_frozen() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.display_frozen)
  return display_frozen_;
}
inline void WindowManagerServiceDumpProto::set_display_frozen(bool value) {
  _has_bits_[0] |= 0x00000080u;
  display_frozen_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerServiceDumpProto.display_frozen)
}

// optional int32 rotation = 7 [deprecated = true, (.android.typedef) = "android.view.Surface.Rotation"];
inline bool WindowManagerServiceDumpProto::has_rotation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowManagerServiceDumpProto::rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.rotation)
  return rotation_;
}
inline void WindowManagerServiceDumpProto::set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerServiceDumpProto.rotation)
}

// optional int32 last_orientation = 8 [deprecated = true, (.android.typedef) = "android.content.pm.ActivityInfo.ScreenOrientation"];
inline bool WindowManagerServiceDumpProto::has_last_orientation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_last_orientation() {
  last_orientation_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowManagerServiceDumpProto::last_orientation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.last_orientation)
  return last_orientation_;
}
inline void WindowManagerServiceDumpProto::set_last_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  last_orientation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerServiceDumpProto.last_orientation)
}

// optional int32 focused_display_id = 9;
inline bool WindowManagerServiceDumpProto::has_focused_display_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_focused_display_id() {
  focused_display_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowManagerServiceDumpProto::focused_display_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.focused_display_id)
  return focused_display_id_;
}
inline void WindowManagerServiceDumpProto::set_focused_display_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  focused_display_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerServiceDumpProto.focused_display_id)
}

// optional bool hard_keyboard_available = 10;
inline bool WindowManagerServiceDumpProto::has_hard_keyboard_available() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowManagerServiceDumpProto::clear_hard_keyboard_available() {
  hard_keyboard_available_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool WindowManagerServiceDumpProto::hard_keyboard_available() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerServiceDumpProto.hard_keyboard_available)
  return hard_keyboard_available_;
}
inline void WindowManagerServiceDumpProto::set_hard_keyboard_available(bool value) {
  _has_bits_[0] |= 0x00000100u;
  hard_keyboard_available_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerServiceDumpProto.hard_keyboard_available)
}

// -------------------------------------------------------------------

// RootWindowContainerProto

// optional .com.android.server.wm.WindowContainerProto window_container = 1;
inline bool RootWindowContainerProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RootWindowContainerProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::WindowContainerProto& RootWindowContainerProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.RootWindowContainerProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* RootWindowContainerProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.RootWindowContainerProto.window_container)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* RootWindowContainerProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000001u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.RootWindowContainerProto.window_container)
  return window_container_;
}
inline void RootWindowContainerProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.RootWindowContainerProto.window_container)
}

// repeated .com.android.server.wm.DisplayContentProto displays = 2 [deprecated = true];
inline int RootWindowContainerProto::displays_size() const {
  return displays_.size();
}
inline void RootWindowContainerProto::clear_displays() {
  displays_.Clear();
}
inline ::com::android::server::wm::DisplayContentProto* RootWindowContainerProto::mutable_displays(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.RootWindowContainerProto.displays)
  return displays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayContentProto >*
RootWindowContainerProto::mutable_displays() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.RootWindowContainerProto.displays)
  return &displays_;
}
inline const ::com::android::server::wm::DisplayContentProto& RootWindowContainerProto::displays(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RootWindowContainerProto.displays)
  return displays_.Get(index);
}
inline ::com::android::server::wm::DisplayContentProto* RootWindowContainerProto::add_displays() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.RootWindowContainerProto.displays)
  return displays_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayContentProto >&
RootWindowContainerProto::displays() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.RootWindowContainerProto.displays)
  return displays_;
}

// repeated .com.android.server.wm.WindowStateProto windows = 4 [deprecated = true];
inline int RootWindowContainerProto::windows_size() const {
  return windows_.size();
}
inline void RootWindowContainerProto::clear_windows() {
  windows_.Clear();
}
inline ::com::android::server::wm::WindowStateProto* RootWindowContainerProto::mutable_windows(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.RootWindowContainerProto.windows)
  return windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >*
RootWindowContainerProto::mutable_windows() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.RootWindowContainerProto.windows)
  return &windows_;
}
inline const ::com::android::server::wm::WindowStateProto& RootWindowContainerProto::windows(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RootWindowContainerProto.windows)
  return windows_.Get(index);
}
inline ::com::android::server::wm::WindowStateProto* RootWindowContainerProto::add_windows() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.RootWindowContainerProto.windows)
  return windows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >&
RootWindowContainerProto::windows() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.RootWindowContainerProto.windows)
  return windows_;
}

// optional .com.android.server.wm.KeyguardControllerProto keyguard_controller = 5;
inline bool RootWindowContainerProto::has_keyguard_controller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RootWindowContainerProto::clear_keyguard_controller() {
  if (keyguard_controller_ != nullptr) keyguard_controller_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::KeyguardControllerProto& RootWindowContainerProto::keyguard_controller() const {
  const ::com::android::server::wm::KeyguardControllerProto* p = keyguard_controller_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.RootWindowContainerProto.keyguard_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::KeyguardControllerProto*>(
      &::com::android::server::wm::_KeyguardControllerProto_default_instance_);
}
inline ::com::android::server::wm::KeyguardControllerProto* RootWindowContainerProto::release_keyguard_controller() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.RootWindowContainerProto.keyguard_controller)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::KeyguardControllerProto* temp = keyguard_controller_;
  keyguard_controller_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::KeyguardControllerProto* RootWindowContainerProto::mutable_keyguard_controller() {
  _has_bits_[0] |= 0x00000002u;
  if (keyguard_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::KeyguardControllerProto>(GetArenaNoVirtual());
    keyguard_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.RootWindowContainerProto.keyguard_controller)
  return keyguard_controller_;
}
inline void RootWindowContainerProto::set_allocated_keyguard_controller(::com::android::server::wm::KeyguardControllerProto* keyguard_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keyguard_controller_;
  }
  if (keyguard_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keyguard_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyguard_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  keyguard_controller_ = keyguard_controller;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.RootWindowContainerProto.keyguard_controller)
}

// optional bool is_home_recents_component = 6;
inline bool RootWindowContainerProto::has_is_home_recents_component() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RootWindowContainerProto::clear_is_home_recents_component() {
  is_home_recents_component_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RootWindowContainerProto::is_home_recents_component() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RootWindowContainerProto.is_home_recents_component)
  return is_home_recents_component_;
}
inline void RootWindowContainerProto::set_is_home_recents_component(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_home_recents_component_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.RootWindowContainerProto.is_home_recents_component)
}

// repeated .com.android.server.wm.IdentifierProto pending_activities = 7 [deprecated = true];
inline int RootWindowContainerProto::pending_activities_size() const {
  return pending_activities_.size();
}
inline void RootWindowContainerProto::clear_pending_activities() {
  pending_activities_.Clear();
}
inline ::com::android::server::wm::IdentifierProto* RootWindowContainerProto::mutable_pending_activities(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.RootWindowContainerProto.pending_activities)
  return pending_activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
RootWindowContainerProto::mutable_pending_activities() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.RootWindowContainerProto.pending_activities)
  return &pending_activities_;
}
inline const ::com::android::server::wm::IdentifierProto& RootWindowContainerProto::pending_activities(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RootWindowContainerProto.pending_activities)
  return pending_activities_.Get(index);
}
inline ::com::android::server::wm::IdentifierProto* RootWindowContainerProto::add_pending_activities() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.RootWindowContainerProto.pending_activities)
  return pending_activities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
RootWindowContainerProto::pending_activities() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.RootWindowContainerProto.pending_activities)
  return pending_activities_;
}

// optional int32 default_min_size_resizable_task = 8;
inline bool RootWindowContainerProto::has_default_min_size_resizable_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RootWindowContainerProto::clear_default_min_size_resizable_task() {
  default_min_size_resizable_task_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RootWindowContainerProto::default_min_size_resizable_task() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RootWindowContainerProto.default_min_size_resizable_task)
  return default_min_size_resizable_task_;
}
inline void RootWindowContainerProto::set_default_min_size_resizable_task(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  default_min_size_resizable_task_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.RootWindowContainerProto.default_min_size_resizable_task)
}

// -------------------------------------------------------------------

// BarControllerProto

// optional .android.app.StatusBarManagerProto.WindowState state = 1;
inline bool BarControllerProto::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BarControllerProto::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::app::StatusBarManagerProto_WindowState BarControllerProto::state() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.BarControllerProto.state)
  return static_cast< ::android::app::StatusBarManagerProto_WindowState >(state_);
}
inline void BarControllerProto::set_state(::android::app::StatusBarManagerProto_WindowState value) {
  assert(::android::app::StatusBarManagerProto_WindowState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.BarControllerProto.state)
}

// optional .android.app.StatusBarManagerProto.TransientWindowState transient_state = 2;
inline bool BarControllerProto::has_transient_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BarControllerProto::clear_transient_state() {
  transient_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::app::StatusBarManagerProto_TransientWindowState BarControllerProto::transient_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.BarControllerProto.transient_state)
  return static_cast< ::android::app::StatusBarManagerProto_TransientWindowState >(transient_state_);
}
inline void BarControllerProto::set_transient_state(::android::app::StatusBarManagerProto_TransientWindowState value) {
  assert(::android::app::StatusBarManagerProto_TransientWindowState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  transient_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.BarControllerProto.transient_state)
}

// -------------------------------------------------------------------

// WindowOrientationListenerProto

// optional bool enabled = 1;
inline bool WindowOrientationListenerProto::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowOrientationListenerProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool WindowOrientationListenerProto::enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowOrientationListenerProto.enabled)
  return enabled_;
}
inline void WindowOrientationListenerProto::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowOrientationListenerProto.enabled)
}

// optional .android.view.SurfaceProto.Rotation rotation = 2;
inline bool WindowOrientationListenerProto::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowOrientationListenerProto::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::view::SurfaceProto_Rotation WindowOrientationListenerProto::rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowOrientationListenerProto.rotation)
  return static_cast< ::android::view::SurfaceProto_Rotation >(rotation_);
}
inline void WindowOrientationListenerProto::set_rotation(::android::view::SurfaceProto_Rotation value) {
  assert(::android::view::SurfaceProto_Rotation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowOrientationListenerProto.rotation)
}

// -------------------------------------------------------------------

// KeyguardServiceDelegateProto

// optional bool showing = 1;
inline bool KeyguardServiceDelegateProto::has_showing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyguardServiceDelegateProto::clear_showing() {
  showing_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool KeyguardServiceDelegateProto::showing() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardServiceDelegateProto.showing)
  return showing_;
}
inline void KeyguardServiceDelegateProto::set_showing(bool value) {
  _has_bits_[0] |= 0x00000001u;
  showing_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardServiceDelegateProto.showing)
}

// optional bool occluded = 2;
inline bool KeyguardServiceDelegateProto::has_occluded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyguardServiceDelegateProto::clear_occluded() {
  occluded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool KeyguardServiceDelegateProto::occluded() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardServiceDelegateProto.occluded)
  return occluded_;
}
inline void KeyguardServiceDelegateProto::set_occluded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  occluded_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardServiceDelegateProto.occluded)
}

// optional bool secure = 3;
inline bool KeyguardServiceDelegateProto::has_secure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyguardServiceDelegateProto::clear_secure() {
  secure_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool KeyguardServiceDelegateProto::secure() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardServiceDelegateProto.secure)
  return secure_;
}
inline void KeyguardServiceDelegateProto::set_secure(bool value) {
  _has_bits_[0] |= 0x00000004u;
  secure_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardServiceDelegateProto.secure)
}

// optional .com.android.server.wm.KeyguardServiceDelegateProto.ScreenState screen_state = 4;
inline bool KeyguardServiceDelegateProto::has_screen_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeyguardServiceDelegateProto::clear_screen_state() {
  screen_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState KeyguardServiceDelegateProto::screen_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardServiceDelegateProto.screen_state)
  return static_cast< ::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState >(screen_state_);
}
inline void KeyguardServiceDelegateProto::set_screen_state(::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState value) {
  assert(::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  screen_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardServiceDelegateProto.screen_state)
}

// optional .com.android.server.wm.KeyguardServiceDelegateProto.InteractiveState interactive_state = 5;
inline bool KeyguardServiceDelegateProto::has_interactive_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeyguardServiceDelegateProto::clear_interactive_state() {
  interactive_state_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState KeyguardServiceDelegateProto::interactive_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardServiceDelegateProto.interactive_state)
  return static_cast< ::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState >(interactive_state_);
}
inline void KeyguardServiceDelegateProto::set_interactive_state(::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState value) {
  assert(::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  interactive_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardServiceDelegateProto.interactive_state)
}

// -------------------------------------------------------------------

// KeyguardControllerProto

// optional bool keyguard_showing = 1;
inline bool KeyguardControllerProto::has_keyguard_showing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyguardControllerProto::clear_keyguard_showing() {
  keyguard_showing_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool KeyguardControllerProto::keyguard_showing() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardControllerProto.keyguard_showing)
  return keyguard_showing_;
}
inline void KeyguardControllerProto::set_keyguard_showing(bool value) {
  _has_bits_[0] |= 0x00000001u;
  keyguard_showing_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardControllerProto.keyguard_showing)
}

// repeated .com.android.server.wm.KeyguardOccludedProto keyguard_occluded_states = 2;
inline int KeyguardControllerProto::keyguard_occluded_states_size() const {
  return keyguard_occluded_states_.size();
}
inline void KeyguardControllerProto::clear_keyguard_occluded_states() {
  keyguard_occluded_states_.Clear();
}
inline ::com::android::server::wm::KeyguardOccludedProto* KeyguardControllerProto::mutable_keyguard_occluded_states(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.KeyguardControllerProto.keyguard_occluded_states)
  return keyguard_occluded_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::KeyguardOccludedProto >*
KeyguardControllerProto::mutable_keyguard_occluded_states() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.KeyguardControllerProto.keyguard_occluded_states)
  return &keyguard_occluded_states_;
}
inline const ::com::android::server::wm::KeyguardOccludedProto& KeyguardControllerProto::keyguard_occluded_states(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardControllerProto.keyguard_occluded_states)
  return keyguard_occluded_states_.Get(index);
}
inline ::com::android::server::wm::KeyguardOccludedProto* KeyguardControllerProto::add_keyguard_occluded_states() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.KeyguardControllerProto.keyguard_occluded_states)
  return keyguard_occluded_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::KeyguardOccludedProto >&
KeyguardControllerProto::keyguard_occluded_states() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.KeyguardControllerProto.keyguard_occluded_states)
  return keyguard_occluded_states_;
}

// optional bool aod_showing = 3;
inline bool KeyguardControllerProto::has_aod_showing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyguardControllerProto::clear_aod_showing() {
  aod_showing_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool KeyguardControllerProto::aod_showing() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardControllerProto.aod_showing)
  return aod_showing_;
}
inline void KeyguardControllerProto::set_aod_showing(bool value) {
  _has_bits_[0] |= 0x00000002u;
  aod_showing_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardControllerProto.aod_showing)
}

// -------------------------------------------------------------------

// KeyguardOccludedProto

// optional int32 display_id = 1;
inline bool KeyguardOccludedProto::has_display_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyguardOccludedProto::clear_display_id() {
  display_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyguardOccludedProto::display_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardOccludedProto.display_id)
  return display_id_;
}
inline void KeyguardOccludedProto::set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  display_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardOccludedProto.display_id)
}

// optional bool keyguard_occluded = 2;
inline bool KeyguardOccludedProto::has_keyguard_occluded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyguardOccludedProto::clear_keyguard_occluded() {
  keyguard_occluded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool KeyguardOccludedProto::keyguard_occluded() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.KeyguardOccludedProto.keyguard_occluded)
  return keyguard_occluded_;
}
inline void KeyguardOccludedProto::set_keyguard_occluded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  keyguard_occluded_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.KeyguardOccludedProto.keyguard_occluded)
}

// -------------------------------------------------------------------

// WindowManagerPolicyProto

// optional int32 last_system_ui_flags = 1 [deprecated = true];
inline bool WindowManagerPolicyProto::has_last_system_ui_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowManagerPolicyProto::clear_last_system_ui_flags() {
  last_system_ui_flags_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowManagerPolicyProto::last_system_ui_flags() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.last_system_ui_flags)
  return last_system_ui_flags_;
}
inline void WindowManagerPolicyProto::set_last_system_ui_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  last_system_ui_flags_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.last_system_ui_flags)
}

// optional .com.android.server.wm.WindowManagerPolicyProto.UserRotationMode rotation_mode = 2;
inline bool WindowManagerPolicyProto::has_rotation_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowManagerPolicyProto::clear_rotation_mode() {
  rotation_mode_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode WindowManagerPolicyProto::rotation_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.rotation_mode)
  return static_cast< ::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode >(rotation_mode_);
}
inline void WindowManagerPolicyProto::set_rotation_mode(::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode value) {
  assert(::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  rotation_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.rotation_mode)
}

// optional .android.view.SurfaceProto.Rotation rotation = 3;
inline bool WindowManagerPolicyProto::has_rotation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowManagerPolicyProto::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::android::view::SurfaceProto_Rotation WindowManagerPolicyProto::rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.rotation)
  return static_cast< ::android::view::SurfaceProto_Rotation >(rotation_);
}
inline void WindowManagerPolicyProto::set_rotation(::android::view::SurfaceProto_Rotation value) {
  assert(::android::view::SurfaceProto_Rotation_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.rotation)
}

// optional .android.content.ActivityInfoProto.ScreenOrientation orientation = 4;
inline bool WindowManagerPolicyProto::has_orientation() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void WindowManagerPolicyProto::clear_orientation() {
  orientation_ = -2;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::android::content::ActivityInfoProto_ScreenOrientation WindowManagerPolicyProto::orientation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.orientation)
  return static_cast< ::android::content::ActivityInfoProto_ScreenOrientation >(orientation_);
}
inline void WindowManagerPolicyProto::set_orientation(::android::content::ActivityInfoProto_ScreenOrientation value) {
  assert(::android::content::ActivityInfoProto_ScreenOrientation_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  orientation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.orientation)
}

// optional bool screen_on_fully = 5;
inline bool WindowManagerPolicyProto::has_screen_on_fully() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowManagerPolicyProto::clear_screen_on_fully() {
  screen_on_fully_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool WindowManagerPolicyProto::screen_on_fully() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.screen_on_fully)
  return screen_on_fully_;
}
inline void WindowManagerPolicyProto::set_screen_on_fully(bool value) {
  _has_bits_[0] |= 0x00000800u;
  screen_on_fully_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.screen_on_fully)
}

// optional bool keyguard_draw_complete = 6;
inline bool WindowManagerPolicyProto::has_keyguard_draw_complete() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowManagerPolicyProto::clear_keyguard_draw_complete() {
  keyguard_draw_complete_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool WindowManagerPolicyProto::keyguard_draw_complete() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.keyguard_draw_complete)
  return keyguard_draw_complete_;
}
inline void WindowManagerPolicyProto::set_keyguard_draw_complete(bool value) {
  _has_bits_[0] |= 0x00001000u;
  keyguard_draw_complete_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.keyguard_draw_complete)
}

// optional bool window_manager_draw_complete = 7;
inline bool WindowManagerPolicyProto::has_window_manager_draw_complete() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void WindowManagerPolicyProto::clear_window_manager_draw_complete() {
  window_manager_draw_complete_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool WindowManagerPolicyProto::window_manager_draw_complete() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.window_manager_draw_complete)
  return window_manager_draw_complete_;
}
inline void WindowManagerPolicyProto::set_window_manager_draw_complete(bool value) {
  _has_bits_[0] |= 0x00002000u;
  window_manager_draw_complete_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.window_manager_draw_complete)
}

// optional string focused_app_token = 8 [deprecated = true];
inline bool WindowManagerPolicyProto::has_focused_app_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowManagerPolicyProto::clear_focused_app_token() {
  focused_app_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WindowManagerPolicyProto::focused_app_token() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
  return focused_app_token_.GetNoArena();
}
inline void WindowManagerPolicyProto::set_focused_app_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
}
inline void WindowManagerPolicyProto::set_focused_app_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
}
inline void WindowManagerPolicyProto::set_focused_app_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  focused_app_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
}
inline void WindowManagerPolicyProto::set_focused_app_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
}
inline std::string* WindowManagerPolicyProto::mutable_focused_app_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
  return focused_app_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WindowManagerPolicyProto::release_focused_app_token() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
  if (!has_focused_app_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return focused_app_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WindowManagerPolicyProto::set_allocated_focused_app_token(std::string* focused_app_token) {
  if (focused_app_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  focused_app_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), focused_app_token);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.focused_app_token)
}

// optional .com.android.server.wm.IdentifierProto focused_window = 9 [deprecated = true];
inline bool WindowManagerPolicyProto::has_focused_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowManagerPolicyProto::clear_focused_window() {
  if (focused_window_ != nullptr) focused_window_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::IdentifierProto& WindowManagerPolicyProto::focused_window() const {
  const ::com::android::server::wm::IdentifierProto* p = focused_window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.focused_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerPolicyProto::release_focused_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.focused_window)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::IdentifierProto* temp = focused_window_;
  focused_window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerPolicyProto::mutable_focused_window() {
  _has_bits_[0] |= 0x00000002u;
  if (focused_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    focused_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.focused_window)
  return focused_window_;
}
inline void WindowManagerPolicyProto::set_allocated_focused_window(::com::android::server::wm::IdentifierProto* focused_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete focused_window_;
  }
  if (focused_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      focused_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focused_window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  focused_window_ = focused_window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.focused_window)
}

// optional .com.android.server.wm.IdentifierProto top_fullscreen_opaque_window = 10 [deprecated = true];
inline bool WindowManagerPolicyProto::has_top_fullscreen_opaque_window() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowManagerPolicyProto::clear_top_fullscreen_opaque_window() {
  if (top_fullscreen_opaque_window_ != nullptr) top_fullscreen_opaque_window_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::wm::IdentifierProto& WindowManagerPolicyProto::top_fullscreen_opaque_window() const {
  const ::com::android::server::wm::IdentifierProto* p = top_fullscreen_opaque_window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerPolicyProto::release_top_fullscreen_opaque_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_window)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::wm::IdentifierProto* temp = top_fullscreen_opaque_window_;
  top_fullscreen_opaque_window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerPolicyProto::mutable_top_fullscreen_opaque_window() {
  _has_bits_[0] |= 0x00000004u;
  if (top_fullscreen_opaque_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    top_fullscreen_opaque_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_window)
  return top_fullscreen_opaque_window_;
}
inline void WindowManagerPolicyProto::set_allocated_top_fullscreen_opaque_window(::com::android::server::wm::IdentifierProto* top_fullscreen_opaque_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete top_fullscreen_opaque_window_;
  }
  if (top_fullscreen_opaque_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      top_fullscreen_opaque_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_fullscreen_opaque_window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  top_fullscreen_opaque_window_ = top_fullscreen_opaque_window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_window)
}

// optional .com.android.server.wm.IdentifierProto top_fullscreen_opaque_or_dimming_window = 11 [deprecated = true];
inline bool WindowManagerPolicyProto::has_top_fullscreen_opaque_or_dimming_window() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowManagerPolicyProto::clear_top_fullscreen_opaque_or_dimming_window() {
  if (top_fullscreen_opaque_or_dimming_window_ != nullptr) top_fullscreen_opaque_or_dimming_window_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::wm::IdentifierProto& WindowManagerPolicyProto::top_fullscreen_opaque_or_dimming_window() const {
  const ::com::android::server::wm::IdentifierProto* p = top_fullscreen_opaque_or_dimming_window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_or_dimming_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerPolicyProto::release_top_fullscreen_opaque_or_dimming_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_or_dimming_window)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::wm::IdentifierProto* temp = top_fullscreen_opaque_or_dimming_window_;
  top_fullscreen_opaque_or_dimming_window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* WindowManagerPolicyProto::mutable_top_fullscreen_opaque_or_dimming_window() {
  _has_bits_[0] |= 0x00000008u;
  if (top_fullscreen_opaque_or_dimming_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    top_fullscreen_opaque_or_dimming_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_or_dimming_window)
  return top_fullscreen_opaque_or_dimming_window_;
}
inline void WindowManagerPolicyProto::set_allocated_top_fullscreen_opaque_or_dimming_window(::com::android::server::wm::IdentifierProto* top_fullscreen_opaque_or_dimming_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete top_fullscreen_opaque_or_dimming_window_;
  }
  if (top_fullscreen_opaque_or_dimming_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      top_fullscreen_opaque_or_dimming_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_fullscreen_opaque_or_dimming_window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  top_fullscreen_opaque_or_dimming_window_ = top_fullscreen_opaque_or_dimming_window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.top_fullscreen_opaque_or_dimming_window)
}

// optional bool keyguard_occluded = 12;
inline bool WindowManagerPolicyProto::has_keyguard_occluded() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void WindowManagerPolicyProto::clear_keyguard_occluded() {
  keyguard_occluded_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool WindowManagerPolicyProto::keyguard_occluded() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.keyguard_occluded)
  return keyguard_occluded_;
}
inline void WindowManagerPolicyProto::set_keyguard_occluded(bool value) {
  _has_bits_[0] |= 0x00004000u;
  keyguard_occluded_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.keyguard_occluded)
}

// optional bool keyguard_occluded_changed = 13;
inline bool WindowManagerPolicyProto::has_keyguard_occluded_changed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void WindowManagerPolicyProto::clear_keyguard_occluded_changed() {
  keyguard_occluded_changed_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool WindowManagerPolicyProto::keyguard_occluded_changed() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.keyguard_occluded_changed)
  return keyguard_occluded_changed_;
}
inline void WindowManagerPolicyProto::set_keyguard_occluded_changed(bool value) {
  _has_bits_[0] |= 0x00008000u;
  keyguard_occluded_changed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.keyguard_occluded_changed)
}

// optional bool keyguard_occluded_pending = 14;
inline bool WindowManagerPolicyProto::has_keyguard_occluded_pending() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void WindowManagerPolicyProto::clear_keyguard_occluded_pending() {
  keyguard_occluded_pending_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool WindowManagerPolicyProto::keyguard_occluded_pending() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.keyguard_occluded_pending)
  return keyguard_occluded_pending_;
}
inline void WindowManagerPolicyProto::set_keyguard_occluded_pending(bool value) {
  _has_bits_[0] |= 0x00010000u;
  keyguard_occluded_pending_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.keyguard_occluded_pending)
}

// optional bool force_status_bar = 15 [deprecated = true];
inline bool WindowManagerPolicyProto::has_force_status_bar() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void WindowManagerPolicyProto::clear_force_status_bar() {
  force_status_bar_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool WindowManagerPolicyProto::force_status_bar() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.force_status_bar)
  return force_status_bar_;
}
inline void WindowManagerPolicyProto::set_force_status_bar(bool value) {
  _has_bits_[0] |= 0x00020000u;
  force_status_bar_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.force_status_bar)
}

// optional bool force_status_bar_from_keyguard = 16 [deprecated = true];
inline bool WindowManagerPolicyProto::has_force_status_bar_from_keyguard() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void WindowManagerPolicyProto::clear_force_status_bar_from_keyguard() {
  force_status_bar_from_keyguard_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool WindowManagerPolicyProto::force_status_bar_from_keyguard() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.force_status_bar_from_keyguard)
  return force_status_bar_from_keyguard_;
}
inline void WindowManagerPolicyProto::set_force_status_bar_from_keyguard(bool value) {
  _has_bits_[0] |= 0x00040000u;
  force_status_bar_from_keyguard_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowManagerPolicyProto.force_status_bar_from_keyguard)
}

// optional .com.android.server.wm.BarControllerProto status_bar = 17 [deprecated = true];
inline bool WindowManagerPolicyProto::has_status_bar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowManagerPolicyProto::clear_status_bar() {
  if (status_bar_ != nullptr) status_bar_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::wm::BarControllerProto& WindowManagerPolicyProto::status_bar() const {
  const ::com::android::server::wm::BarControllerProto* p = status_bar_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.status_bar)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::BarControllerProto*>(
      &::com::android::server::wm::_BarControllerProto_default_instance_);
}
inline ::com::android::server::wm::BarControllerProto* WindowManagerPolicyProto::release_status_bar() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.status_bar)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::wm::BarControllerProto* temp = status_bar_;
  status_bar_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::BarControllerProto* WindowManagerPolicyProto::mutable_status_bar() {
  _has_bits_[0] |= 0x00000010u;
  if (status_bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::BarControllerProto>(GetArenaNoVirtual());
    status_bar_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.status_bar)
  return status_bar_;
}
inline void WindowManagerPolicyProto::set_allocated_status_bar(::com::android::server::wm::BarControllerProto* status_bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_bar_;
  }
  if (status_bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status_bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_bar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  status_bar_ = status_bar;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.status_bar)
}

// optional .com.android.server.wm.BarControllerProto navigation_bar = 18 [deprecated = true];
inline bool WindowManagerPolicyProto::has_navigation_bar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowManagerPolicyProto::clear_navigation_bar() {
  if (navigation_bar_ != nullptr) navigation_bar_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::wm::BarControllerProto& WindowManagerPolicyProto::navigation_bar() const {
  const ::com::android::server::wm::BarControllerProto* p = navigation_bar_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.navigation_bar)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::BarControllerProto*>(
      &::com::android::server::wm::_BarControllerProto_default_instance_);
}
inline ::com::android::server::wm::BarControllerProto* WindowManagerPolicyProto::release_navigation_bar() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.navigation_bar)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::wm::BarControllerProto* temp = navigation_bar_;
  navigation_bar_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::BarControllerProto* WindowManagerPolicyProto::mutable_navigation_bar() {
  _has_bits_[0] |= 0x00000020u;
  if (navigation_bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::BarControllerProto>(GetArenaNoVirtual());
    navigation_bar_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.navigation_bar)
  return navigation_bar_;
}
inline void WindowManagerPolicyProto::set_allocated_navigation_bar(::com::android::server::wm::BarControllerProto* navigation_bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete navigation_bar_;
  }
  if (navigation_bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      navigation_bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_bar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  navigation_bar_ = navigation_bar;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.navigation_bar)
}

// optional .com.android.server.wm.WindowOrientationListenerProto orientation_listener = 19 [deprecated = true];
inline bool WindowManagerPolicyProto::has_orientation_listener() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowManagerPolicyProto::clear_orientation_listener() {
  if (orientation_listener_ != nullptr) orientation_listener_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::wm::WindowOrientationListenerProto& WindowManagerPolicyProto::orientation_listener() const {
  const ::com::android::server::wm::WindowOrientationListenerProto* p = orientation_listener_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.orientation_listener)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowOrientationListenerProto*>(
      &::com::android::server::wm::_WindowOrientationListenerProto_default_instance_);
}
inline ::com::android::server::wm::WindowOrientationListenerProto* WindowManagerPolicyProto::release_orientation_listener() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.orientation_listener)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::wm::WindowOrientationListenerProto* temp = orientation_listener_;
  orientation_listener_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowOrientationListenerProto* WindowManagerPolicyProto::mutable_orientation_listener() {
  _has_bits_[0] |= 0x00000040u;
  if (orientation_listener_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowOrientationListenerProto>(GetArenaNoVirtual());
    orientation_listener_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.orientation_listener)
  return orientation_listener_;
}
inline void WindowManagerPolicyProto::set_allocated_orientation_listener(::com::android::server::wm::WindowOrientationListenerProto* orientation_listener) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_listener_;
  }
  if (orientation_listener) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation_listener = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_listener, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  orientation_listener_ = orientation_listener;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.orientation_listener)
}

// optional .com.android.server.wm.KeyguardServiceDelegateProto keyguard_delegate = 20;
inline bool WindowManagerPolicyProto::has_keyguard_delegate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowManagerPolicyProto::clear_keyguard_delegate() {
  if (keyguard_delegate_ != nullptr) keyguard_delegate_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::com::android::server::wm::KeyguardServiceDelegateProto& WindowManagerPolicyProto::keyguard_delegate() const {
  const ::com::android::server::wm::KeyguardServiceDelegateProto* p = keyguard_delegate_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowManagerPolicyProto.keyguard_delegate)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::KeyguardServiceDelegateProto*>(
      &::com::android::server::wm::_KeyguardServiceDelegateProto_default_instance_);
}
inline ::com::android::server::wm::KeyguardServiceDelegateProto* WindowManagerPolicyProto::release_keyguard_delegate() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowManagerPolicyProto.keyguard_delegate)
  _has_bits_[0] &= ~0x00000080u;
  ::com::android::server::wm::KeyguardServiceDelegateProto* temp = keyguard_delegate_;
  keyguard_delegate_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::KeyguardServiceDelegateProto* WindowManagerPolicyProto::mutable_keyguard_delegate() {
  _has_bits_[0] |= 0x00000080u;
  if (keyguard_delegate_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::KeyguardServiceDelegateProto>(GetArenaNoVirtual());
    keyguard_delegate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowManagerPolicyProto.keyguard_delegate)
  return keyguard_delegate_;
}
inline void WindowManagerPolicyProto::set_allocated_keyguard_delegate(::com::android::server::wm::KeyguardServiceDelegateProto* keyguard_delegate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keyguard_delegate_;
  }
  if (keyguard_delegate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keyguard_delegate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyguard_delegate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  keyguard_delegate_ = keyguard_delegate;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowManagerPolicyProto.keyguard_delegate)
}

// -------------------------------------------------------------------

// AppTransitionProto

// optional .com.android.server.wm.AppTransitionProto.AppState app_transition_state = 1;
inline bool AppTransitionProto::has_app_transition_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppTransitionProto::clear_app_transition_state() {
  app_transition_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::com::android::server::wm::AppTransitionProto_AppState AppTransitionProto::app_transition_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.AppTransitionProto.app_transition_state)
  return static_cast< ::com::android::server::wm::AppTransitionProto_AppState >(app_transition_state_);
}
inline void AppTransitionProto::set_app_transition_state(::com::android::server::wm::AppTransitionProto_AppState value) {
  assert(::com::android::server::wm::AppTransitionProto_AppState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  app_transition_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.AppTransitionProto.app_transition_state)
}

// optional .android.view.TransitionTypeEnum last_used_app_transition = 2;
inline bool AppTransitionProto::has_last_used_app_transition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppTransitionProto::clear_last_used_app_transition() {
  last_used_app_transition_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::view::TransitionTypeEnum AppTransitionProto::last_used_app_transition() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.AppTransitionProto.last_used_app_transition)
  return static_cast< ::android::view::TransitionTypeEnum >(last_used_app_transition_);
}
inline void AppTransitionProto::set_last_used_app_transition(::android::view::TransitionTypeEnum value) {
  assert(::android::view::TransitionTypeEnum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  last_used_app_transition_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.AppTransitionProto.last_used_app_transition)
}

// -------------------------------------------------------------------

// DisplayContentProto

// optional .com.android.server.wm.WindowContainerProto window_container = 1 [deprecated = true];
inline bool DisplayContentProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisplayContentProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::WindowContainerProto& DisplayContentProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* DisplayContentProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.window_container)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* DisplayContentProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000002u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.window_container)
  return window_container_;
}
inline void DisplayContentProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.window_container)
}

// optional int32 id = 2;
inline bool DisplayContentProto::has_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DisplayContentProto::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayContentProto::id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.id)
  return id_;
}
inline void DisplayContentProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.id)
}

// optional .com.android.server.wm.DockedTaskDividerControllerProto docked_task_divider_controller = 4 [deprecated = true];
inline bool DisplayContentProto::has_docked_task_divider_controller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisplayContentProto::clear_docked_task_divider_controller() {
  if (docked_task_divider_controller_ != nullptr) docked_task_divider_controller_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::wm::DockedTaskDividerControllerProto& DisplayContentProto::docked_task_divider_controller() const {
  const ::com::android::server::wm::DockedTaskDividerControllerProto* p = docked_task_divider_controller_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.docked_task_divider_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::DockedTaskDividerControllerProto*>(
      &::com::android::server::wm::_DockedTaskDividerControllerProto_default_instance_);
}
inline ::com::android::server::wm::DockedTaskDividerControllerProto* DisplayContentProto::release_docked_task_divider_controller() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.docked_task_divider_controller)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::wm::DockedTaskDividerControllerProto* temp = docked_task_divider_controller_;
  docked_task_divider_controller_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::DockedTaskDividerControllerProto* DisplayContentProto::mutable_docked_task_divider_controller() {
  _has_bits_[0] |= 0x00000004u;
  if (docked_task_divider_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::DockedTaskDividerControllerProto>(GetArenaNoVirtual());
    docked_task_divider_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.docked_task_divider_controller)
  return docked_task_divider_controller_;
}
inline void DisplayContentProto::set_allocated_docked_task_divider_controller(::com::android::server::wm::DockedTaskDividerControllerProto* docked_task_divider_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete docked_task_divider_controller_;
  }
  if (docked_task_divider_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      docked_task_divider_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, docked_task_divider_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  docked_task_divider_controller_ = docked_task_divider_controller;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.docked_task_divider_controller)
}

// optional .com.android.server.wm.PinnedTaskControllerProto pinned_task_controller = 5 [deprecated = true];
inline bool DisplayContentProto::has_pinned_task_controller() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisplayContentProto::clear_pinned_task_controller() {
  if (pinned_task_controller_ != nullptr) pinned_task_controller_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::wm::PinnedTaskControllerProto& DisplayContentProto::pinned_task_controller() const {
  const ::com::android::server::wm::PinnedTaskControllerProto* p = pinned_task_controller_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.pinned_task_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::PinnedTaskControllerProto*>(
      &::com::android::server::wm::_PinnedTaskControllerProto_default_instance_);
}
inline ::com::android::server::wm::PinnedTaskControllerProto* DisplayContentProto::release_pinned_task_controller() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.pinned_task_controller)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::wm::PinnedTaskControllerProto* temp = pinned_task_controller_;
  pinned_task_controller_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::PinnedTaskControllerProto* DisplayContentProto::mutable_pinned_task_controller() {
  _has_bits_[0] |= 0x00000008u;
  if (pinned_task_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::PinnedTaskControllerProto>(GetArenaNoVirtual());
    pinned_task_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.pinned_task_controller)
  return pinned_task_controller_;
}
inline void DisplayContentProto::set_allocated_pinned_task_controller(::com::android::server::wm::PinnedTaskControllerProto* pinned_task_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pinned_task_controller_;
  }
  if (pinned_task_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pinned_task_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pinned_task_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pinned_task_controller_ = pinned_task_controller;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.pinned_task_controller)
}

// repeated .com.android.server.wm.WindowTokenProto above_app_windows = 6 [deprecated = true];
inline int DisplayContentProto::above_app_windows_size() const {
  return above_app_windows_.size();
}
inline void DisplayContentProto::clear_above_app_windows() {
  above_app_windows_.Clear();
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::mutable_above_app_windows(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.above_app_windows)
  return above_app_windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
DisplayContentProto::mutable_above_app_windows() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.above_app_windows)
  return &above_app_windows_;
}
inline const ::com::android::server::wm::WindowTokenProto& DisplayContentProto::above_app_windows(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.above_app_windows)
  return above_app_windows_.Get(index);
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::add_above_app_windows() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.above_app_windows)
  return above_app_windows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
DisplayContentProto::above_app_windows() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.above_app_windows)
  return above_app_windows_;
}

// repeated .com.android.server.wm.WindowTokenProto below_app_windows = 7 [deprecated = true];
inline int DisplayContentProto::below_app_windows_size() const {
  return below_app_windows_.size();
}
inline void DisplayContentProto::clear_below_app_windows() {
  below_app_windows_.Clear();
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::mutable_below_app_windows(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.below_app_windows)
  return below_app_windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
DisplayContentProto::mutable_below_app_windows() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.below_app_windows)
  return &below_app_windows_;
}
inline const ::com::android::server::wm::WindowTokenProto& DisplayContentProto::below_app_windows(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.below_app_windows)
  return below_app_windows_.Get(index);
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::add_below_app_windows() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.below_app_windows)
  return below_app_windows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
DisplayContentProto::below_app_windows() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.below_app_windows)
  return below_app_windows_;
}

// repeated .com.android.server.wm.WindowTokenProto ime_windows = 8 [deprecated = true];
inline int DisplayContentProto::ime_windows_size() const {
  return ime_windows_.size();
}
inline void DisplayContentProto::clear_ime_windows() {
  ime_windows_.Clear();
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::mutable_ime_windows(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.ime_windows)
  return ime_windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
DisplayContentProto::mutable_ime_windows() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.ime_windows)
  return &ime_windows_;
}
inline const ::com::android::server::wm::WindowTokenProto& DisplayContentProto::ime_windows(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.ime_windows)
  return ime_windows_.Get(index);
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::add_ime_windows() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.ime_windows)
  return ime_windows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
DisplayContentProto::ime_windows() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.ime_windows)
  return ime_windows_;
}

// optional int32 dpi = 9;
inline bool DisplayContentProto::has_dpi() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DisplayContentProto::clear_dpi() {
  dpi_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayContentProto::dpi() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.dpi)
  return dpi_;
}
inline void DisplayContentProto::set_dpi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  dpi_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.dpi)
}

// optional .android.view.DisplayInfoProto display_info = 10;
inline bool DisplayContentProto::has_display_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::view::DisplayInfoProto& DisplayContentProto::display_info() const {
  const ::android::view::DisplayInfoProto* p = display_info_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.display_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::DisplayInfoProto*>(
      &::android::view::_DisplayInfoProto_default_instance_);
}
inline ::android::view::DisplayInfoProto* DisplayContentProto::release_display_info() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.display_info)
  _has_bits_[0] &= ~0x00000010u;
  ::android::view::DisplayInfoProto* temp = display_info_;
  display_info_ = nullptr;
  return temp;
}
inline ::android::view::DisplayInfoProto* DisplayContentProto::mutable_display_info() {
  _has_bits_[0] |= 0x00000010u;
  if (display_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::DisplayInfoProto>(GetArenaNoVirtual());
    display_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.display_info)
  return display_info_;
}
inline void DisplayContentProto::set_allocated_display_info(::android::view::DisplayInfoProto* display_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_info_);
  }
  if (display_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  display_info_ = display_info;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.display_info)
}

// optional int32 rotation = 11 [deprecated = true, (.android.typedef) = "android.view.Surface.Rotation"];
inline bool DisplayContentProto::has_rotation() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DisplayContentProto::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayContentProto::rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.rotation)
  return rotation_;
}
inline void DisplayContentProto::set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.rotation)
}

// optional .com.android.server.wm.ScreenRotationAnimationProto screen_rotation_animation = 12;
inline bool DisplayContentProto::has_screen_rotation_animation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DisplayContentProto::clear_screen_rotation_animation() {
  if (screen_rotation_animation_ != nullptr) screen_rotation_animation_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::wm::ScreenRotationAnimationProto& DisplayContentProto::screen_rotation_animation() const {
  const ::com::android::server::wm::ScreenRotationAnimationProto* p = screen_rotation_animation_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.screen_rotation_animation)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::ScreenRotationAnimationProto*>(
      &::com::android::server::wm::_ScreenRotationAnimationProto_default_instance_);
}
inline ::com::android::server::wm::ScreenRotationAnimationProto* DisplayContentProto::release_screen_rotation_animation() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.screen_rotation_animation)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::wm::ScreenRotationAnimationProto* temp = screen_rotation_animation_;
  screen_rotation_animation_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::ScreenRotationAnimationProto* DisplayContentProto::mutable_screen_rotation_animation() {
  _has_bits_[0] |= 0x00000020u;
  if (screen_rotation_animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::ScreenRotationAnimationProto>(GetArenaNoVirtual());
    screen_rotation_animation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.screen_rotation_animation)
  return screen_rotation_animation_;
}
inline void DisplayContentProto::set_allocated_screen_rotation_animation(::com::android::server::wm::ScreenRotationAnimationProto* screen_rotation_animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screen_rotation_animation_;
  }
  if (screen_rotation_animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen_rotation_animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_rotation_animation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  screen_rotation_animation_ = screen_rotation_animation;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.screen_rotation_animation)
}

// optional .com.android.server.wm.DisplayFramesProto display_frames = 13;
inline bool DisplayContentProto::has_display_frames() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DisplayContentProto::clear_display_frames() {
  if (display_frames_ != nullptr) display_frames_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::wm::DisplayFramesProto& DisplayContentProto::display_frames() const {
  const ::com::android::server::wm::DisplayFramesProto* p = display_frames_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.display_frames)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::DisplayFramesProto*>(
      &::com::android::server::wm::_DisplayFramesProto_default_instance_);
}
inline ::com::android::server::wm::DisplayFramesProto* DisplayContentProto::release_display_frames() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.display_frames)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::wm::DisplayFramesProto* temp = display_frames_;
  display_frames_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::DisplayFramesProto* DisplayContentProto::mutable_display_frames() {
  _has_bits_[0] |= 0x00000040u;
  if (display_frames_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::DisplayFramesProto>(GetArenaNoVirtual());
    display_frames_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.display_frames)
  return display_frames_;
}
inline void DisplayContentProto::set_allocated_display_frames(::com::android::server::wm::DisplayFramesProto* display_frames) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete display_frames_;
  }
  if (display_frames) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_frames = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_frames, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  display_frames_ = display_frames;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.display_frames)
}

// optional int32 surface_size = 14 [deprecated = true];
inline bool DisplayContentProto::has_surface_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DisplayContentProto::clear_surface_size() {
  surface_size_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayContentProto::surface_size() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.surface_size)
  return surface_size_;
}
inline void DisplayContentProto::set_surface_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  surface_size_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.surface_size)
}

// optional string focused_app = 15;
inline bool DisplayContentProto::has_focused_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayContentProto::clear_focused_app() {
  focused_app_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayContentProto::focused_app() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.focused_app)
  return focused_app_.GetNoArena();
}
inline void DisplayContentProto::set_focused_app(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.focused_app)
}
inline void DisplayContentProto::set_focused_app(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.DisplayContentProto.focused_app)
}
inline void DisplayContentProto::set_focused_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.DisplayContentProto.focused_app)
}
inline void DisplayContentProto::set_focused_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  focused_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.DisplayContentProto.focused_app)
}
inline std::string* DisplayContentProto::mutable_focused_app() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.focused_app)
  return focused_app_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisplayContentProto::release_focused_app() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.focused_app)
  if (!has_focused_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return focused_app_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayContentProto::set_allocated_focused_app(std::string* focused_app) {
  if (focused_app != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  focused_app_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), focused_app);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.focused_app)
}

// optional .com.android.server.wm.AppTransitionProto app_transition = 16;
inline bool DisplayContentProto::has_app_transition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DisplayContentProto::clear_app_transition() {
  if (app_transition_ != nullptr) app_transition_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::com::android::server::wm::AppTransitionProto& DisplayContentProto::app_transition() const {
  const ::com::android::server::wm::AppTransitionProto* p = app_transition_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.app_transition)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::AppTransitionProto*>(
      &::com::android::server::wm::_AppTransitionProto_default_instance_);
}
inline ::com::android::server::wm::AppTransitionProto* DisplayContentProto::release_app_transition() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.app_transition)
  _has_bits_[0] &= ~0x00000080u;
  ::com::android::server::wm::AppTransitionProto* temp = app_transition_;
  app_transition_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::AppTransitionProto* DisplayContentProto::mutable_app_transition() {
  _has_bits_[0] |= 0x00000080u;
  if (app_transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::AppTransitionProto>(GetArenaNoVirtual());
    app_transition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.app_transition)
  return app_transition_;
}
inline void DisplayContentProto::set_allocated_app_transition(::com::android::server::wm::AppTransitionProto* app_transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_transition_;
  }
  if (app_transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_transition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  app_transition_ = app_transition;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.app_transition)
}

// repeated .com.android.server.wm.IdentifierProto opening_apps = 17;
inline int DisplayContentProto::opening_apps_size() const {
  return opening_apps_.size();
}
inline void DisplayContentProto::clear_opening_apps() {
  opening_apps_.Clear();
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::mutable_opening_apps(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.opening_apps)
  return opening_apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
DisplayContentProto::mutable_opening_apps() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.opening_apps)
  return &opening_apps_;
}
inline const ::com::android::server::wm::IdentifierProto& DisplayContentProto::opening_apps(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.opening_apps)
  return opening_apps_.Get(index);
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::add_opening_apps() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.opening_apps)
  return opening_apps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
DisplayContentProto::opening_apps() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.opening_apps)
  return opening_apps_;
}

// repeated .com.android.server.wm.IdentifierProto closing_apps = 18;
inline int DisplayContentProto::closing_apps_size() const {
  return closing_apps_.size();
}
inline void DisplayContentProto::clear_closing_apps() {
  closing_apps_.Clear();
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::mutable_closing_apps(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.closing_apps)
  return closing_apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
DisplayContentProto::mutable_closing_apps() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.closing_apps)
  return &closing_apps_;
}
inline const ::com::android::server::wm::IdentifierProto& DisplayContentProto::closing_apps(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.closing_apps)
  return closing_apps_.Get(index);
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::add_closing_apps() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.closing_apps)
  return closing_apps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
DisplayContentProto::closing_apps() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.closing_apps)
  return closing_apps_;
}

// repeated .com.android.server.wm.IdentifierProto changing_apps = 19;
inline int DisplayContentProto::changing_apps_size() const {
  return changing_apps_.size();
}
inline void DisplayContentProto::clear_changing_apps() {
  changing_apps_.Clear();
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::mutable_changing_apps(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.changing_apps)
  return changing_apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >*
DisplayContentProto::mutable_changing_apps() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.changing_apps)
  return &changing_apps_;
}
inline const ::com::android::server::wm::IdentifierProto& DisplayContentProto::changing_apps(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.changing_apps)
  return changing_apps_.Get(index);
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::add_changing_apps() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.changing_apps)
  return changing_apps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::IdentifierProto >&
DisplayContentProto::changing_apps() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.changing_apps)
  return changing_apps_;
}

// repeated .com.android.server.wm.WindowTokenProto overlay_windows = 20 [deprecated = true];
inline int DisplayContentProto::overlay_windows_size() const {
  return overlay_windows_.size();
}
inline void DisplayContentProto::clear_overlay_windows() {
  overlay_windows_.Clear();
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::mutable_overlay_windows(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.overlay_windows)
  return overlay_windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >*
DisplayContentProto::mutable_overlay_windows() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.overlay_windows)
  return &overlay_windows_;
}
inline const ::com::android::server::wm::WindowTokenProto& DisplayContentProto::overlay_windows(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.overlay_windows)
  return overlay_windows_.Get(index);
}
inline ::com::android::server::wm::WindowTokenProto* DisplayContentProto::add_overlay_windows() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.overlay_windows)
  return overlay_windows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowTokenProto >&
DisplayContentProto::overlay_windows() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.overlay_windows)
  return overlay_windows_;
}

// optional .com.android.server.wm.DisplayAreaProto root_display_area = 21;
inline bool DisplayContentProto::has_root_display_area() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DisplayContentProto::clear_root_display_area() {
  if (root_display_area_ != nullptr) root_display_area_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::com::android::server::wm::DisplayAreaProto& DisplayContentProto::root_display_area() const {
  const ::com::android::server::wm::DisplayAreaProto* p = root_display_area_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.root_display_area)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::DisplayAreaProto*>(
      &::com::android::server::wm::_DisplayAreaProto_default_instance_);
}
inline ::com::android::server::wm::DisplayAreaProto* DisplayContentProto::release_root_display_area() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.root_display_area)
  _has_bits_[0] &= ~0x00000100u;
  ::com::android::server::wm::DisplayAreaProto* temp = root_display_area_;
  root_display_area_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::DisplayAreaProto* DisplayContentProto::mutable_root_display_area() {
  _has_bits_[0] |= 0x00000100u;
  if (root_display_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::DisplayAreaProto>(GetArenaNoVirtual());
    root_display_area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.root_display_area)
  return root_display_area_;
}
inline void DisplayContentProto::set_allocated_root_display_area(::com::android::server::wm::DisplayAreaProto* root_display_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_display_area_;
  }
  if (root_display_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root_display_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_display_area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  root_display_area_ = root_display_area;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.root_display_area)
}

// optional bool single_task_instance = 22 [deprecated = true];
inline bool DisplayContentProto::has_single_task_instance() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DisplayContentProto::clear_single_task_instance() {
  single_task_instance_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool DisplayContentProto::single_task_instance() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.single_task_instance)
  return single_task_instance_;
}
inline void DisplayContentProto::set_single_task_instance(bool value) {
  _has_bits_[0] |= 0x00200000u;
  single_task_instance_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.single_task_instance)
}

// optional int32 focused_root_task_id = 23;
inline bool DisplayContentProto::has_focused_root_task_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DisplayContentProto::clear_focused_root_task_id() {
  focused_root_task_id_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayContentProto::focused_root_task_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.focused_root_task_id)
  return focused_root_task_id_;
}
inline void DisplayContentProto::set_focused_root_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  focused_root_task_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.focused_root_task_id)
}

// optional .com.android.server.wm.IdentifierProto resumed_activity = 24;
inline bool DisplayContentProto::has_resumed_activity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DisplayContentProto::clear_resumed_activity() {
  if (resumed_activity_ != nullptr) resumed_activity_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::com::android::server::wm::IdentifierProto& DisplayContentProto::resumed_activity() const {
  const ::com::android::server::wm::IdentifierProto* p = resumed_activity_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.resumed_activity)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::release_resumed_activity() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.resumed_activity)
  _has_bits_[0] &= ~0x00000200u;
  ::com::android::server::wm::IdentifierProto* temp = resumed_activity_;
  resumed_activity_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* DisplayContentProto::mutable_resumed_activity() {
  _has_bits_[0] |= 0x00000200u;
  if (resumed_activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    resumed_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.resumed_activity)
  return resumed_activity_;
}
inline void DisplayContentProto::set_allocated_resumed_activity(::com::android::server::wm::IdentifierProto* resumed_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resumed_activity_;
  }
  if (resumed_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resumed_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resumed_activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  resumed_activity_ = resumed_activity;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.resumed_activity)
}

// repeated .com.android.server.wm.TaskProto tasks = 25 [deprecated = true];
inline int DisplayContentProto::tasks_size() const {
  return tasks_.size();
}
inline void DisplayContentProto::clear_tasks() {
  tasks_.Clear();
}
inline ::com::android::server::wm::TaskProto* DisplayContentProto::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >*
DisplayContentProto::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.tasks)
  return &tasks_;
}
inline const ::com::android::server::wm::TaskProto& DisplayContentProto::tasks(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.tasks)
  return tasks_.Get(index);
}
inline ::com::android::server::wm::TaskProto* DisplayContentProto::add_tasks() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.tasks)
  return tasks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >&
DisplayContentProto::tasks() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.tasks)
  return tasks_;
}

// optional bool display_ready = 26;
inline bool DisplayContentProto::has_display_ready() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DisplayContentProto::clear_display_ready() {
  display_ready_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool DisplayContentProto::display_ready() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.display_ready)
  return display_ready_;
}
inline void DisplayContentProto::set_display_ready(bool value) {
  _has_bits_[0] |= 0x00400000u;
  display_ready_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.display_ready)
}

// optional .com.android.server.wm.WindowStateProto input_method_target = 27;
inline bool DisplayContentProto::has_input_method_target() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DisplayContentProto::clear_input_method_target() {
  if (input_method_target_ != nullptr) input_method_target_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::com::android::server::wm::WindowStateProto& DisplayContentProto::input_method_target() const {
  const ::com::android::server::wm::WindowStateProto* p = input_method_target_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.input_method_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::release_input_method_target() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.input_method_target)
  _has_bits_[0] &= ~0x00000400u;
  ::com::android::server::wm::WindowStateProto* temp = input_method_target_;
  input_method_target_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::mutable_input_method_target() {
  _has_bits_[0] |= 0x00000400u;
  if (input_method_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    input_method_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.input_method_target)
  return input_method_target_;
}
inline void DisplayContentProto::set_allocated_input_method_target(::com::android::server::wm::WindowStateProto* input_method_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_method_target_;
  }
  if (input_method_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_method_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_method_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  input_method_target_ = input_method_target;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.input_method_target)
}

// optional .com.android.server.wm.WindowStateProto input_method_input_target = 28;
inline bool DisplayContentProto::has_input_method_input_target() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DisplayContentProto::clear_input_method_input_target() {
  if (input_method_input_target_ != nullptr) input_method_input_target_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::com::android::server::wm::WindowStateProto& DisplayContentProto::input_method_input_target() const {
  const ::com::android::server::wm::WindowStateProto* p = input_method_input_target_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.input_method_input_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::release_input_method_input_target() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.input_method_input_target)
  _has_bits_[0] &= ~0x00000800u;
  ::com::android::server::wm::WindowStateProto* temp = input_method_input_target_;
  input_method_input_target_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::mutable_input_method_input_target() {
  _has_bits_[0] |= 0x00000800u;
  if (input_method_input_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    input_method_input_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.input_method_input_target)
  return input_method_input_target_;
}
inline void DisplayContentProto::set_allocated_input_method_input_target(::com::android::server::wm::WindowStateProto* input_method_input_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_method_input_target_;
  }
  if (input_method_input_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_method_input_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_method_input_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  input_method_input_target_ = input_method_input_target;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.input_method_input_target)
}

// optional .com.android.server.wm.WindowStateProto input_method_control_target = 29;
inline bool DisplayContentProto::has_input_method_control_target() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DisplayContentProto::clear_input_method_control_target() {
  if (input_method_control_target_ != nullptr) input_method_control_target_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::com::android::server::wm::WindowStateProto& DisplayContentProto::input_method_control_target() const {
  const ::com::android::server::wm::WindowStateProto* p = input_method_control_target_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.input_method_control_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::release_input_method_control_target() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.input_method_control_target)
  _has_bits_[0] &= ~0x00001000u;
  ::com::android::server::wm::WindowStateProto* temp = input_method_control_target_;
  input_method_control_target_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::mutable_input_method_control_target() {
  _has_bits_[0] |= 0x00001000u;
  if (input_method_control_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    input_method_control_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.input_method_control_target)
  return input_method_control_target_;
}
inline void DisplayContentProto::set_allocated_input_method_control_target(::com::android::server::wm::WindowStateProto* input_method_control_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_method_control_target_;
  }
  if (input_method_control_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_method_control_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_method_control_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  input_method_control_target_ = input_method_control_target;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.input_method_control_target)
}

// optional .com.android.server.wm.WindowStateProto current_focus = 30;
inline bool DisplayContentProto::has_current_focus() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DisplayContentProto::clear_current_focus() {
  if (current_focus_ != nullptr) current_focus_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::com::android::server::wm::WindowStateProto& DisplayContentProto::current_focus() const {
  const ::com::android::server::wm::WindowStateProto* p = current_focus_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.current_focus)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::release_current_focus() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.current_focus)
  _has_bits_[0] &= ~0x00002000u;
  ::com::android::server::wm::WindowStateProto* temp = current_focus_;
  current_focus_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* DisplayContentProto::mutable_current_focus() {
  _has_bits_[0] |= 0x00002000u;
  if (current_focus_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    current_focus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.current_focus)
  return current_focus_;
}
inline void DisplayContentProto::set_allocated_current_focus(::com::android::server::wm::WindowStateProto* current_focus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_focus_;
  }
  if (current_focus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_focus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_focus, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  current_focus_ = current_focus;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.current_focus)
}

// optional .com.android.server.wm.ImeInsetsSourceProviderProto ime_insets_source_provider = 31;
inline bool DisplayContentProto::has_ime_insets_source_provider() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DisplayContentProto::clear_ime_insets_source_provider() {
  if (ime_insets_source_provider_ != nullptr) ime_insets_source_provider_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::com::android::server::wm::ImeInsetsSourceProviderProto& DisplayContentProto::ime_insets_source_provider() const {
  const ::com::android::server::wm::ImeInsetsSourceProviderProto* p = ime_insets_source_provider_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.ime_insets_source_provider)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::ImeInsetsSourceProviderProto*>(
      &::com::android::server::wm::_ImeInsetsSourceProviderProto_default_instance_);
}
inline ::com::android::server::wm::ImeInsetsSourceProviderProto* DisplayContentProto::release_ime_insets_source_provider() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.ime_insets_source_provider)
  _has_bits_[0] &= ~0x00004000u;
  ::com::android::server::wm::ImeInsetsSourceProviderProto* temp = ime_insets_source_provider_;
  ime_insets_source_provider_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::ImeInsetsSourceProviderProto* DisplayContentProto::mutable_ime_insets_source_provider() {
  _has_bits_[0] |= 0x00004000u;
  if (ime_insets_source_provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::ImeInsetsSourceProviderProto>(GetArenaNoVirtual());
    ime_insets_source_provider_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.ime_insets_source_provider)
  return ime_insets_source_provider_;
}
inline void DisplayContentProto::set_allocated_ime_insets_source_provider(::com::android::server::wm::ImeInsetsSourceProviderProto* ime_insets_source_provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ime_insets_source_provider_;
  }
  if (ime_insets_source_provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ime_insets_source_provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ime_insets_source_provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  ime_insets_source_provider_ = ime_insets_source_provider;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.ime_insets_source_provider)
}

// optional bool can_show_ime = 32 [deprecated = true];
inline bool DisplayContentProto::has_can_show_ime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DisplayContentProto::clear_can_show_ime() {
  can_show_ime_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool DisplayContentProto::can_show_ime() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.can_show_ime)
  return can_show_ime_;
}
inline void DisplayContentProto::set_can_show_ime(bool value) {
  _has_bits_[0] |= 0x00800000u;
  can_show_ime_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.can_show_ime)
}

// optional .com.android.server.wm.DisplayRotationProto display_rotation = 33;
inline bool DisplayContentProto::has_display_rotation() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DisplayContentProto::clear_display_rotation() {
  if (display_rotation_ != nullptr) display_rotation_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::com::android::server::wm::DisplayRotationProto& DisplayContentProto::display_rotation() const {
  const ::com::android::server::wm::DisplayRotationProto* p = display_rotation_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.display_rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::DisplayRotationProto*>(
      &::com::android::server::wm::_DisplayRotationProto_default_instance_);
}
inline ::com::android::server::wm::DisplayRotationProto* DisplayContentProto::release_display_rotation() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayContentProto.display_rotation)
  _has_bits_[0] &= ~0x00008000u;
  ::com::android::server::wm::DisplayRotationProto* temp = display_rotation_;
  display_rotation_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::DisplayRotationProto* DisplayContentProto::mutable_display_rotation() {
  _has_bits_[0] |= 0x00008000u;
  if (display_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::DisplayRotationProto>(GetArenaNoVirtual());
    display_rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.display_rotation)
  return display_rotation_;
}
inline void DisplayContentProto::set_allocated_display_rotation(::com::android::server::wm::DisplayRotationProto* display_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete display_rotation_;
  }
  if (display_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  display_rotation_ = display_rotation;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayContentProto.display_rotation)
}

// optional int32 ime_policy = 34;
inline bool DisplayContentProto::has_ime_policy() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DisplayContentProto::clear_ime_policy() {
  ime_policy_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayContentProto::ime_policy() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.ime_policy)
  return ime_policy_;
}
inline void DisplayContentProto::set_ime_policy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  ime_policy_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.ime_policy)
}

// optional bool is_sleeping = 36;
inline bool DisplayContentProto::has_is_sleeping() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DisplayContentProto::clear_is_sleeping() {
  is_sleeping_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool DisplayContentProto::is_sleeping() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.is_sleeping)
  return is_sleeping_;
}
inline void DisplayContentProto::set_is_sleeping(bool value) {
  _has_bits_[0] |= 0x01000000u;
  is_sleeping_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.is_sleeping)
}

// repeated string sleep_tokens = 37;
inline int DisplayContentProto::sleep_tokens_size() const {
  return sleep_tokens_.size();
}
inline void DisplayContentProto::clear_sleep_tokens() {
  sleep_tokens_.Clear();
}
inline const std::string& DisplayContentProto::sleep_tokens(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayContentProto.sleep_tokens)
  return sleep_tokens_.Get(index);
}
inline std::string* DisplayContentProto::mutable_sleep_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayContentProto.sleep_tokens)
  return sleep_tokens_.Mutable(index);
}
inline void DisplayContentProto::set_sleep_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.sleep_tokens)
  sleep_tokens_.Mutable(index)->assign(value);
}
inline void DisplayContentProto::set_sleep_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayContentProto.sleep_tokens)
  sleep_tokens_.Mutable(index)->assign(std::move(value));
}
inline void DisplayContentProto::set_sleep_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sleep_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.DisplayContentProto.sleep_tokens)
}
inline void DisplayContentProto::set_sleep_tokens(int index, const char* value, size_t size) {
  sleep_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.DisplayContentProto.sleep_tokens)
}
inline std::string* DisplayContentProto::add_sleep_tokens() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.wm.DisplayContentProto.sleep_tokens)
  return sleep_tokens_.Add();
}
inline void DisplayContentProto::add_sleep_tokens(const std::string& value) {
  sleep_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.sleep_tokens)
}
inline void DisplayContentProto::add_sleep_tokens(std::string&& value) {
  sleep_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayContentProto.sleep_tokens)
}
inline void DisplayContentProto::add_sleep_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sleep_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.wm.DisplayContentProto.sleep_tokens)
}
inline void DisplayContentProto::add_sleep_tokens(const char* value, size_t size) {
  sleep_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.wm.DisplayContentProto.sleep_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DisplayContentProto::sleep_tokens() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayContentProto.sleep_tokens)
  return sleep_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DisplayContentProto::mutable_sleep_tokens() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayContentProto.sleep_tokens)
  return &sleep_tokens_;
}

// -------------------------------------------------------------------

// DisplayAreaProto

// optional .com.android.server.wm.WindowContainerProto window_container = 1;
inline bool DisplayAreaProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisplayAreaProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::WindowContainerProto& DisplayAreaProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* DisplayAreaProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayAreaProto.window_container)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* DisplayAreaProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000002u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayAreaProto.window_container)
  return window_container_;
}
inline void DisplayAreaProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayAreaProto.window_container)
}

// optional string name = 2 [(.android.privacy) = {
inline bool DisplayAreaProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayAreaProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayAreaProto::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaProto.name)
  return name_.GetNoArena();
}
inline void DisplayAreaProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayAreaProto.name)
}
inline void DisplayAreaProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.DisplayAreaProto.name)
}
inline void DisplayAreaProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.DisplayAreaProto.name)
}
inline void DisplayAreaProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.DisplayAreaProto.name)
}
inline std::string* DisplayAreaProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayAreaProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisplayAreaProto::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayAreaProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayAreaProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayAreaProto.name)
}

// repeated .com.android.server.wm.DisplayAreaChildProto children = 3 [deprecated = true];
inline int DisplayAreaProto::children_size() const {
  return children_.size();
}
inline void DisplayAreaProto::clear_children() {
  children_.Clear();
}
inline ::com::android::server::wm::DisplayAreaChildProto* DisplayAreaProto::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayAreaProto.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayAreaChildProto >*
DisplayAreaProto::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayAreaProto.children)
  return &children_;
}
inline const ::com::android::server::wm::DisplayAreaChildProto& DisplayAreaProto::children(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaProto.children)
  return children_.Get(index);
}
inline ::com::android::server::wm::DisplayAreaChildProto* DisplayAreaProto::add_children() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayAreaProto.children)
  return children_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::DisplayAreaChildProto >&
DisplayAreaProto::children() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayAreaProto.children)
  return children_;
}

// optional bool is_task_display_area = 4;
inline bool DisplayAreaProto::has_is_task_display_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisplayAreaProto::clear_is_task_display_area() {
  is_task_display_area_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DisplayAreaProto::is_task_display_area() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaProto.is_task_display_area)
  return is_task_display_area_;
}
inline void DisplayAreaProto::set_is_task_display_area(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_task_display_area_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayAreaProto.is_task_display_area)
}

// optional bool is_root_display_area = 5;
inline bool DisplayAreaProto::has_is_root_display_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisplayAreaProto::clear_is_root_display_area() {
  is_root_display_area_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DisplayAreaProto::is_root_display_area() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaProto.is_root_display_area)
  return is_root_display_area_;
}
inline void DisplayAreaProto::set_is_root_display_area(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_root_display_area_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayAreaProto.is_root_display_area)
}

// optional int32 feature_id = 6;
inline bool DisplayAreaProto::has_feature_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DisplayAreaProto::clear_feature_id() {
  feature_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayAreaProto::feature_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaProto.feature_id)
  return feature_id_;
}
inline void DisplayAreaProto::set_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  feature_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayAreaProto.feature_id)
}

// optional bool is_organized = 7;
inline bool DisplayAreaProto::has_is_organized() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DisplayAreaProto::clear_is_organized() {
  is_organized_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DisplayAreaProto::is_organized() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaProto.is_organized)
  return is_organized_;
}
inline void DisplayAreaProto::set_is_organized(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_organized_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayAreaProto.is_organized)
}

// -------------------------------------------------------------------

// DisplayAreaChildProto

// optional .com.android.server.wm.DisplayAreaProto display_area = 1;
inline bool DisplayAreaChildProto::has_display_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayAreaChildProto::clear_display_area() {
  if (display_area_ != nullptr) display_area_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::DisplayAreaProto& DisplayAreaChildProto::display_area() const {
  const ::com::android::server::wm::DisplayAreaProto* p = display_area_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaChildProto.display_area)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::DisplayAreaProto*>(
      &::com::android::server::wm::_DisplayAreaProto_default_instance_);
}
inline ::com::android::server::wm::DisplayAreaProto* DisplayAreaChildProto::release_display_area() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayAreaChildProto.display_area)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::DisplayAreaProto* temp = display_area_;
  display_area_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::DisplayAreaProto* DisplayAreaChildProto::mutable_display_area() {
  _has_bits_[0] |= 0x00000001u;
  if (display_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::DisplayAreaProto>(GetArenaNoVirtual());
    display_area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayAreaChildProto.display_area)
  return display_area_;
}
inline void DisplayAreaChildProto::set_allocated_display_area(::com::android::server::wm::DisplayAreaProto* display_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete display_area_;
  }
  if (display_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_area_ = display_area;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayAreaChildProto.display_area)
}

// optional .com.android.server.wm.WindowTokenProto window = 2;
inline bool DisplayAreaChildProto::has_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisplayAreaChildProto::clear_window() {
  if (window_ != nullptr) window_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::WindowTokenProto& DisplayAreaChildProto::window() const {
  const ::com::android::server::wm::WindowTokenProto* p = window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaChildProto.window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowTokenProto*>(
      &::com::android::server::wm::_WindowTokenProto_default_instance_);
}
inline ::com::android::server::wm::WindowTokenProto* DisplayAreaChildProto::release_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayAreaChildProto.window)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::WindowTokenProto* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowTokenProto* DisplayAreaChildProto::mutable_window() {
  _has_bits_[0] |= 0x00000002u;
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowTokenProto>(GetArenaNoVirtual());
    window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayAreaChildProto.window)
  return window_;
}
inline void DisplayAreaChildProto::set_allocated_window(::com::android::server::wm::WindowTokenProto* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayAreaChildProto.window)
}

// repeated string unknown = 3;
inline int DisplayAreaChildProto::unknown_size() const {
  return unknown_.size();
}
inline void DisplayAreaChildProto::clear_unknown() {
  unknown_.Clear();
}
inline const std::string& DisplayAreaChildProto::unknown(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayAreaChildProto.unknown)
  return unknown_.Get(index);
}
inline std::string* DisplayAreaChildProto::mutable_unknown(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayAreaChildProto.unknown)
  return unknown_.Mutable(index);
}
inline void DisplayAreaChildProto::set_unknown(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayAreaChildProto.unknown)
  unknown_.Mutable(index)->assign(value);
}
inline void DisplayAreaChildProto::set_unknown(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayAreaChildProto.unknown)
  unknown_.Mutable(index)->assign(std::move(value));
}
inline void DisplayAreaChildProto::set_unknown(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unknown_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.DisplayAreaChildProto.unknown)
}
inline void DisplayAreaChildProto::set_unknown(int index, const char* value, size_t size) {
  unknown_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.DisplayAreaChildProto.unknown)
}
inline std::string* DisplayAreaChildProto::add_unknown() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.wm.DisplayAreaChildProto.unknown)
  return unknown_.Add();
}
inline void DisplayAreaChildProto::add_unknown(const std::string& value) {
  unknown_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayAreaChildProto.unknown)
}
inline void DisplayAreaChildProto::add_unknown(std::string&& value) {
  unknown_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.wm.DisplayAreaChildProto.unknown)
}
inline void DisplayAreaChildProto::add_unknown(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unknown_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.wm.DisplayAreaChildProto.unknown)
}
inline void DisplayAreaChildProto::add_unknown(const char* value, size_t size) {
  unknown_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.wm.DisplayAreaChildProto.unknown)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DisplayAreaChildProto::unknown() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.DisplayAreaChildProto.unknown)
  return unknown_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DisplayAreaChildProto::mutable_unknown() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.DisplayAreaChildProto.unknown)
  return &unknown_;
}

// -------------------------------------------------------------------

// DisplayFramesProto

// optional .android.graphics.RectProto stable_bounds = 1 [deprecated = true];
inline bool DisplayFramesProto::has_stable_bounds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::graphics::RectProto& DisplayFramesProto::stable_bounds() const {
  const ::android::graphics::RectProto* p = stable_bounds_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayFramesProto.stable_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* DisplayFramesProto::release_stable_bounds() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayFramesProto.stable_bounds)
  _has_bits_[0] &= ~0x00000001u;
  ::android::graphics::RectProto* temp = stable_bounds_;
  stable_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* DisplayFramesProto::mutable_stable_bounds() {
  _has_bits_[0] |= 0x00000001u;
  if (stable_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    stable_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayFramesProto.stable_bounds)
  return stable_bounds_;
}
inline void DisplayFramesProto::set_allocated_stable_bounds(::android::graphics::RectProto* stable_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stable_bounds_);
  }
  if (stable_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stable_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stable_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stable_bounds_ = stable_bounds;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayFramesProto.stable_bounds)
}

// optional .android.graphics.RectProto dock = 2 [deprecated = true];
inline bool DisplayFramesProto::has_dock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::graphics::RectProto& DisplayFramesProto::dock() const {
  const ::android::graphics::RectProto* p = dock_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayFramesProto.dock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* DisplayFramesProto::release_dock() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayFramesProto.dock)
  _has_bits_[0] &= ~0x00000002u;
  ::android::graphics::RectProto* temp = dock_;
  dock_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* DisplayFramesProto::mutable_dock() {
  _has_bits_[0] |= 0x00000002u;
  if (dock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    dock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayFramesProto.dock)
  return dock_;
}
inline void DisplayFramesProto::set_allocated_dock(::android::graphics::RectProto* dock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dock_);
  }
  if (dock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dock_ = dock;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayFramesProto.dock)
}

// optional .android.graphics.RectProto current = 3 [deprecated = true];
inline bool DisplayFramesProto::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::graphics::RectProto& DisplayFramesProto::current() const {
  const ::android::graphics::RectProto* p = current_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayFramesProto.current)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* DisplayFramesProto::release_current() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.DisplayFramesProto.current)
  _has_bits_[0] &= ~0x00000004u;
  ::android::graphics::RectProto* temp = current_;
  current_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* DisplayFramesProto::mutable_current() {
  _has_bits_[0] |= 0x00000004u;
  if (current_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    current_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.DisplayFramesProto.current)
  return current_;
}
inline void DisplayFramesProto::set_allocated_current(::android::graphics::RectProto* current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_);
  }
  if (current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  current_ = current;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.DisplayFramesProto.current)
}

// -------------------------------------------------------------------

// DisplayRotationProto

// optional int32 rotation = 1 [(.android.typedef) = "android.view.Surface.Rotation"];
inline bool DisplayRotationProto::has_rotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayRotationProto::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayRotationProto::rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayRotationProto.rotation)
  return rotation_;
}
inline void DisplayRotationProto::set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayRotationProto.rotation)
}

// optional bool frozen_to_user_rotation = 2;
inline bool DisplayRotationProto::has_frozen_to_user_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisplayRotationProto::clear_frozen_to_user_rotation() {
  frozen_to_user_rotation_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DisplayRotationProto::frozen_to_user_rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayRotationProto.frozen_to_user_rotation)
  return frozen_to_user_rotation_;
}
inline void DisplayRotationProto::set_frozen_to_user_rotation(bool value) {
  _has_bits_[0] |= 0x00000002u;
  frozen_to_user_rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayRotationProto.frozen_to_user_rotation)
}

// optional int32 user_rotation = 3 [(.android.typedef) = "android.view.Surface.Rotation"];
inline bool DisplayRotationProto::has_user_rotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisplayRotationProto::clear_user_rotation() {
  user_rotation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayRotationProto::user_rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayRotationProto.user_rotation)
  return user_rotation_;
}
inline void DisplayRotationProto::set_user_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayRotationProto.user_rotation)
}

// optional int32 fixed_to_user_rotation_mode = 4;
inline bool DisplayRotationProto::has_fixed_to_user_rotation_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisplayRotationProto::clear_fixed_to_user_rotation_mode() {
  fixed_to_user_rotation_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayRotationProto::fixed_to_user_rotation_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayRotationProto.fixed_to_user_rotation_mode)
  return fixed_to_user_rotation_mode_;
}
inline void DisplayRotationProto::set_fixed_to_user_rotation_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  fixed_to_user_rotation_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayRotationProto.fixed_to_user_rotation_mode)
}

// optional int32 last_orientation = 5 [(.android.typedef) = "android.content.pm.ActivityInfo.ScreenOrientation"];
inline bool DisplayRotationProto::has_last_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DisplayRotationProto::clear_last_orientation() {
  last_orientation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayRotationProto::last_orientation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DisplayRotationProto.last_orientation)
  return last_orientation_;
}
inline void DisplayRotationProto::set_last_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  last_orientation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DisplayRotationProto.last_orientation)
}

// -------------------------------------------------------------------

// DockedTaskDividerControllerProto

// optional bool minimized_dock = 1 [deprecated = true];
inline bool DockedTaskDividerControllerProto::has_minimized_dock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DockedTaskDividerControllerProto::clear_minimized_dock() {
  minimized_dock_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DockedTaskDividerControllerProto::minimized_dock() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.DockedTaskDividerControllerProto.minimized_dock)
  return minimized_dock_;
}
inline void DockedTaskDividerControllerProto::set_minimized_dock(bool value) {
  _has_bits_[0] |= 0x00000001u;
  minimized_dock_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.DockedTaskDividerControllerProto.minimized_dock)
}

// -------------------------------------------------------------------

// PinnedTaskControllerProto

// optional .android.graphics.RectProto default_bounds = 1 [deprecated = true];
inline bool PinnedTaskControllerProto::has_default_bounds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::graphics::RectProto& PinnedTaskControllerProto::default_bounds() const {
  const ::android::graphics::RectProto* p = default_bounds_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.PinnedTaskControllerProto.default_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* PinnedTaskControllerProto::release_default_bounds() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.PinnedTaskControllerProto.default_bounds)
  _has_bits_[0] &= ~0x00000001u;
  ::android::graphics::RectProto* temp = default_bounds_;
  default_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* PinnedTaskControllerProto::mutable_default_bounds() {
  _has_bits_[0] |= 0x00000001u;
  if (default_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    default_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.PinnedTaskControllerProto.default_bounds)
  return default_bounds_;
}
inline void PinnedTaskControllerProto::set_allocated_default_bounds(::android::graphics::RectProto* default_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_bounds_);
  }
  if (default_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_bounds_ = default_bounds;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.PinnedTaskControllerProto.default_bounds)
}

// optional .android.graphics.RectProto movement_bounds = 2 [deprecated = true];
inline bool PinnedTaskControllerProto::has_movement_bounds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::graphics::RectProto& PinnedTaskControllerProto::movement_bounds() const {
  const ::android::graphics::RectProto* p = movement_bounds_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.PinnedTaskControllerProto.movement_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* PinnedTaskControllerProto::release_movement_bounds() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.PinnedTaskControllerProto.movement_bounds)
  _has_bits_[0] &= ~0x00000002u;
  ::android::graphics::RectProto* temp = movement_bounds_;
  movement_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* PinnedTaskControllerProto::mutable_movement_bounds() {
  _has_bits_[0] |= 0x00000002u;
  if (movement_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    movement_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.PinnedTaskControllerProto.movement_bounds)
  return movement_bounds_;
}
inline void PinnedTaskControllerProto::set_allocated_movement_bounds(::android::graphics::RectProto* movement_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movement_bounds_);
  }
  if (movement_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      movement_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movement_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  movement_bounds_ = movement_bounds;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.PinnedTaskControllerProto.movement_bounds)
}

// -------------------------------------------------------------------

// TaskProto

// optional .com.android.server.wm.WindowContainerProto window_container = 1 [deprecated = true];
inline bool TaskProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::wm::WindowContainerProto& TaskProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* TaskProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.window_container)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* TaskProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000008u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.window_container)
  return window_container_;
}
inline void TaskProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.window_container)
}

// optional int32 id = 2;
inline bool TaskProto::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TaskProto::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.id)
  return id_;
}
inline void TaskProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.id)
}

// optional bool fills_parent = 4;
inline bool TaskProto::has_fills_parent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TaskProto::clear_fills_parent() {
  fills_parent_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool TaskProto::fills_parent() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.fills_parent)
  return fills_parent_;
}
inline void TaskProto::set_fills_parent(bool value) {
  _has_bits_[0] |= 0x00004000u;
  fills_parent_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.fills_parent)
}

// optional .android.graphics.RectProto bounds = 5;
inline bool TaskProto::has_bounds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::graphics::RectProto& TaskProto::bounds() const {
  const ::android::graphics::RectProto* p = bounds_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* TaskProto::release_bounds() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.bounds)
  _has_bits_[0] &= ~0x00000010u;
  ::android::graphics::RectProto* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* TaskProto::mutable_bounds() {
  _has_bits_[0] |= 0x00000010u;
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.bounds)
  return bounds_;
}
inline void TaskProto::set_allocated_bounds(::android::graphics::RectProto* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.bounds)
}

// optional .android.graphics.RectProto displayed_bounds = 6 [deprecated = true];
inline bool TaskProto::has_displayed_bounds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::graphics::RectProto& TaskProto::displayed_bounds() const {
  const ::android::graphics::RectProto* p = displayed_bounds_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.displayed_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* TaskProto::release_displayed_bounds() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.displayed_bounds)
  _has_bits_[0] &= ~0x00000020u;
  ::android::graphics::RectProto* temp = displayed_bounds_;
  displayed_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* TaskProto::mutable_displayed_bounds() {
  _has_bits_[0] |= 0x00000020u;
  if (displayed_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    displayed_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.displayed_bounds)
  return displayed_bounds_;
}
inline void TaskProto::set_allocated_displayed_bounds(::android::graphics::RectProto* displayed_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(displayed_bounds_);
  }
  if (displayed_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      displayed_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, displayed_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  displayed_bounds_ = displayed_bounds;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.displayed_bounds)
}

// optional bool defer_removal = 7;
inline bool TaskProto::has_defer_removal() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TaskProto::clear_defer_removal() {
  defer_removal_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool TaskProto::defer_removal() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.defer_removal)
  return defer_removal_;
}
inline void TaskProto::set_defer_removal(bool value) {
  _has_bits_[0] |= 0x00008000u;
  defer_removal_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.defer_removal)
}

// optional int32 surface_width = 8;
inline bool TaskProto::has_surface_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TaskProto::clear_surface_width() {
  surface_width_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::surface_width() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.surface_width)
  return surface_width_;
}
inline void TaskProto::set_surface_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  surface_width_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.surface_width)
}

// optional int32 surface_height = 9;
inline bool TaskProto::has_surface_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TaskProto::clear_surface_height() {
  surface_height_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::surface_height() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.surface_height)
  return surface_height_;
}
inline void TaskProto::set_surface_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  surface_height_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.surface_height)
}

// repeated .com.android.server.wm.TaskProto tasks = 10 [deprecated = true];
inline int TaskProto::tasks_size() const {
  return tasks_.size();
}
inline void TaskProto::clear_tasks() {
  tasks_.Clear();
}
inline ::com::android::server::wm::TaskProto* TaskProto::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >*
TaskProto::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.TaskProto.tasks)
  return &tasks_;
}
inline const ::com::android::server::wm::TaskProto& TaskProto::tasks(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.tasks)
  return tasks_.Get(index);
}
inline ::com::android::server::wm::TaskProto* TaskProto::add_tasks() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.TaskProto.tasks)
  return tasks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::TaskProto >&
TaskProto::tasks() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.TaskProto.tasks)
  return tasks_;
}

// repeated .com.android.server.wm.ActivityRecordProto activities = 11 [deprecated = true];
inline int TaskProto::activities_size() const {
  return activities_.size();
}
inline void TaskProto::clear_activities() {
  activities_.Clear();
}
inline ::com::android::server::wm::ActivityRecordProto* TaskProto::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.activities)
  return activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::ActivityRecordProto >*
TaskProto::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.TaskProto.activities)
  return &activities_;
}
inline const ::com::android::server::wm::ActivityRecordProto& TaskProto::activities(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.activities)
  return activities_.Get(index);
}
inline ::com::android::server::wm::ActivityRecordProto* TaskProto::add_activities() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.TaskProto.activities)
  return activities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::ActivityRecordProto >&
TaskProto::activities() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.TaskProto.activities)
  return activities_;
}

// optional .com.android.server.wm.IdentifierProto resumed_activity = 12;
inline bool TaskProto::has_resumed_activity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskProto::clear_resumed_activity() {
  if (resumed_activity_ != nullptr) resumed_activity_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::wm::IdentifierProto& TaskProto::resumed_activity() const {
  const ::com::android::server::wm::IdentifierProto* p = resumed_activity_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.resumed_activity)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* TaskProto::release_resumed_activity() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.resumed_activity)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::wm::IdentifierProto* temp = resumed_activity_;
  resumed_activity_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* TaskProto::mutable_resumed_activity() {
  _has_bits_[0] |= 0x00000040u;
  if (resumed_activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    resumed_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.resumed_activity)
  return resumed_activity_;
}
inline void TaskProto::set_allocated_resumed_activity(::com::android::server::wm::IdentifierProto* resumed_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resumed_activity_;
  }
  if (resumed_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resumed_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resumed_activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  resumed_activity_ = resumed_activity;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.resumed_activity)
}

// optional string real_activity = 13;
inline bool TaskProto::has_real_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskProto::clear_real_activity() {
  real_activity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskProto::real_activity() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.real_activity)
  return real_activity_.GetNoArena();
}
inline void TaskProto::set_real_activity(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  real_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.real_activity)
}
inline void TaskProto::set_real_activity(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  real_activity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.TaskProto.real_activity)
}
inline void TaskProto::set_real_activity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  real_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.TaskProto.real_activity)
}
inline void TaskProto::set_real_activity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  real_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.TaskProto.real_activity)
}
inline std::string* TaskProto::mutable_real_activity() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.real_activity)
  return real_activity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskProto::release_real_activity() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.real_activity)
  if (!has_real_activity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return real_activity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskProto::set_allocated_real_activity(std::string* real_activity) {
  if (real_activity != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  real_activity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_activity);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.real_activity)
}

// optional string orig_activity = 14;
inline bool TaskProto::has_orig_activity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskProto::clear_orig_activity() {
  orig_activity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskProto::orig_activity() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.orig_activity)
  return orig_activity_.GetNoArena();
}
inline void TaskProto::set_orig_activity(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  orig_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.orig_activity)
}
inline void TaskProto::set_orig_activity(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  orig_activity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.TaskProto.orig_activity)
}
inline void TaskProto::set_orig_activity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  orig_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.TaskProto.orig_activity)
}
inline void TaskProto::set_orig_activity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  orig_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.TaskProto.orig_activity)
}
inline std::string* TaskProto::mutable_orig_activity() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.orig_activity)
  return orig_activity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskProto::release_orig_activity() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.orig_activity)
  if (!has_orig_activity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return orig_activity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskProto::set_allocated_orig_activity(std::string* orig_activity) {
  if (orig_activity != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orig_activity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orig_activity);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.orig_activity)
}

// optional int32 display_id = 15 [deprecated = true];
inline bool TaskProto::has_display_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TaskProto::clear_display_id() {
  display_id_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::display_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.display_id)
  return display_id_;
}
inline void TaskProto::set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  display_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.display_id)
}

// optional int32 root_task_id = 16;
inline bool TaskProto::has_root_task_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TaskProto::clear_root_task_id() {
  root_task_id_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::root_task_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.root_task_id)
  return root_task_id_;
}
inline void TaskProto::set_root_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  root_task_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.root_task_id)
}

// optional int32 activity_type = 17 [deprecated = true, (.android.typedef) = "android.app.WindowConfiguration.ActivityType"];
inline bool TaskProto::has_activity_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TaskProto::clear_activity_type() {
  activity_type_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::activity_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.activity_type)
  return activity_type_;
}
inline void TaskProto::set_activity_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  activity_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.activity_type)
}

// optional int32 resize_mode = 18 [(.android.typedef) = "android.appwidget.AppWidgetProviderInfo.ResizeModeFlags"];
inline bool TaskProto::has_resize_mode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TaskProto::clear_resize_mode() {
  resize_mode_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::resize_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.resize_mode)
  return resize_mode_;
}
inline void TaskProto::set_resize_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  resize_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.resize_mode)
}

// optional int32 min_width = 19 [deprecated = true];
inline bool TaskProto::has_min_width() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TaskProto::clear_min_width() {
  min_width_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::min_width() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.min_width)
  return min_width_;
}
inline void TaskProto::set_min_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  min_width_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.min_width)
}

// optional int32 min_height = 20 [deprecated = true];
inline bool TaskProto::has_min_height() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TaskProto::clear_min_height() {
  min_height_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskProto::min_height() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.min_height)
  return min_height_;
}
inline void TaskProto::set_min_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  min_height_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.min_height)
}

// optional .android.graphics.RectProto adjusted_bounds = 21;
inline bool TaskProto::has_adjusted_bounds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::graphics::RectProto& TaskProto::adjusted_bounds() const {
  const ::android::graphics::RectProto* p = adjusted_bounds_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.adjusted_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* TaskProto::release_adjusted_bounds() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.adjusted_bounds)
  _has_bits_[0] &= ~0x00000080u;
  ::android::graphics::RectProto* temp = adjusted_bounds_;
  adjusted_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* TaskProto::mutable_adjusted_bounds() {
  _has_bits_[0] |= 0x00000080u;
  if (adjusted_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    adjusted_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.adjusted_bounds)
  return adjusted_bounds_;
}
inline void TaskProto::set_allocated_adjusted_bounds(::android::graphics::RectProto* adjusted_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_bounds_);
  }
  if (adjusted_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adjusted_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjusted_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  adjusted_bounds_ = adjusted_bounds;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.adjusted_bounds)
}

// optional .android.graphics.RectProto last_non_fullscreen_bounds = 22;
inline bool TaskProto::has_last_non_fullscreen_bounds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::graphics::RectProto& TaskProto::last_non_fullscreen_bounds() const {
  const ::android::graphics::RectProto* p = last_non_fullscreen_bounds_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.last_non_fullscreen_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* TaskProto::release_last_non_fullscreen_bounds() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.last_non_fullscreen_bounds)
  _has_bits_[0] &= ~0x00000100u;
  ::android::graphics::RectProto* temp = last_non_fullscreen_bounds_;
  last_non_fullscreen_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* TaskProto::mutable_last_non_fullscreen_bounds() {
  _has_bits_[0] |= 0x00000100u;
  if (last_non_fullscreen_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    last_non_fullscreen_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.last_non_fullscreen_bounds)
  return last_non_fullscreen_bounds_;
}
inline void TaskProto::set_allocated_last_non_fullscreen_bounds(::android::graphics::RectProto* last_non_fullscreen_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_non_fullscreen_bounds_);
  }
  if (last_non_fullscreen_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_non_fullscreen_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_non_fullscreen_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  last_non_fullscreen_bounds_ = last_non_fullscreen_bounds;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.last_non_fullscreen_bounds)
}

// optional bool adjusted_for_ime = 23;
inline bool TaskProto::has_adjusted_for_ime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TaskProto::clear_adjusted_for_ime() {
  adjusted_for_ime_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool TaskProto::adjusted_for_ime() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.adjusted_for_ime)
  return adjusted_for_ime_;
}
inline void TaskProto::set_adjusted_for_ime(bool value) {
  _has_bits_[0] |= 0x00010000u;
  adjusted_for_ime_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.adjusted_for_ime)
}

// optional float adjust_ime_amount = 24;
inline bool TaskProto::has_adjust_ime_amount() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TaskProto::clear_adjust_ime_amount() {
  adjust_ime_amount_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float TaskProto::adjust_ime_amount() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.adjust_ime_amount)
  return adjust_ime_amount_;
}
inline void TaskProto::set_adjust_ime_amount(float value) {
  _has_bits_[0] |= 0x00800000u;
  adjust_ime_amount_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.adjust_ime_amount)
}

// optional float adjust_divider_amount = 25;
inline bool TaskProto::has_adjust_divider_amount() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TaskProto::clear_adjust_divider_amount() {
  adjust_divider_amount_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float TaskProto::adjust_divider_amount() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.adjust_divider_amount)
  return adjust_divider_amount_;
}
inline void TaskProto::set_adjust_divider_amount(float value) {
  _has_bits_[0] |= 0x01000000u;
  adjust_divider_amount_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.adjust_divider_amount)
}

// optional bool animating_bounds = 26 [deprecated = true];
inline bool TaskProto::has_animating_bounds() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TaskProto::clear_animating_bounds() {
  animating_bounds_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool TaskProto::animating_bounds() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.animating_bounds)
  return animating_bounds_;
}
inline void TaskProto::set_animating_bounds(bool value) {
  _has_bits_[0] |= 0x00020000u;
  animating_bounds_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.animating_bounds)
}

// optional float minimize_amount = 27;
inline bool TaskProto::has_minimize_amount() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TaskProto::clear_minimize_amount() {
  minimize_amount_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float TaskProto::minimize_amount() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.minimize_amount)
  return minimize_amount_;
}
inline void TaskProto::set_minimize_amount(float value) {
  _has_bits_[0] |= 0x02000000u;
  minimize_amount_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.minimize_amount)
}

// optional bool created_by_organizer = 28;
inline bool TaskProto::has_created_by_organizer() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TaskProto::clear_created_by_organizer() {
  created_by_organizer_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool TaskProto::created_by_organizer() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.created_by_organizer)
  return created_by_organizer_;
}
inline void TaskProto::set_created_by_organizer(bool value) {
  _has_bits_[0] |= 0x04000000u;
  created_by_organizer_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.created_by_organizer)
}

// optional string affinity = 29;
inline bool TaskProto::has_affinity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskProto::clear_affinity() {
  affinity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TaskProto::affinity() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.affinity)
  return affinity_.GetNoArena();
}
inline void TaskProto::set_affinity(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  affinity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.affinity)
}
inline void TaskProto::set_affinity(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  affinity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.TaskProto.affinity)
}
inline void TaskProto::set_affinity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  affinity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.TaskProto.affinity)
}
inline void TaskProto::set_affinity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  affinity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.TaskProto.affinity)
}
inline std::string* TaskProto::mutable_affinity() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.affinity)
  return affinity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskProto::release_affinity() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.affinity)
  if (!has_affinity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return affinity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskProto::set_allocated_affinity(std::string* affinity) {
  if (affinity != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  affinity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affinity);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.affinity)
}

// optional bool has_child_pip_activity = 30;
inline bool TaskProto::has_has_child_pip_activity() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TaskProto::clear_has_child_pip_activity() {
  has_child_pip_activity_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool TaskProto::has_child_pip_activity() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.has_child_pip_activity)
  return has_child_pip_activity_;
}
inline void TaskProto::set_has_child_pip_activity(bool value) {
  _has_bits_[0] |= 0x08000000u;
  has_child_pip_activity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskProto.has_child_pip_activity)
}

// optional .com.android.server.wm.TaskFragmentProto task_fragment = 31;
inline bool TaskProto::has_task_fragment() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TaskProto::clear_task_fragment() {
  if (task_fragment_ != nullptr) task_fragment_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::com::android::server::wm::TaskFragmentProto& TaskProto::task_fragment() const {
  const ::com::android::server::wm::TaskFragmentProto* p = task_fragment_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskProto.task_fragment)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::TaskFragmentProto*>(
      &::com::android::server::wm::_TaskFragmentProto_default_instance_);
}
inline ::com::android::server::wm::TaskFragmentProto* TaskProto::release_task_fragment() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskProto.task_fragment)
  _has_bits_[0] &= ~0x00000200u;
  ::com::android::server::wm::TaskFragmentProto* temp = task_fragment_;
  task_fragment_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::TaskFragmentProto* TaskProto::mutable_task_fragment() {
  _has_bits_[0] |= 0x00000200u;
  if (task_fragment_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::TaskFragmentProto>(GetArenaNoVirtual());
    task_fragment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskProto.task_fragment)
  return task_fragment_;
}
inline void TaskProto::set_allocated_task_fragment(::com::android::server::wm::TaskFragmentProto* task_fragment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_fragment_;
  }
  if (task_fragment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_fragment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_fragment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  task_fragment_ = task_fragment;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskProto.task_fragment)
}

// -------------------------------------------------------------------

// TaskFragmentProto

// optional .com.android.server.wm.WindowContainerProto window_container = 1;
inline bool TaskFragmentProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskFragmentProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::WindowContainerProto& TaskFragmentProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskFragmentProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* TaskFragmentProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.TaskFragmentProto.window_container)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* TaskFragmentProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000001u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.TaskFragmentProto.window_container)
  return window_container_;
}
inline void TaskFragmentProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.TaskFragmentProto.window_container)
}

// optional int32 display_id = 2;
inline bool TaskFragmentProto::has_display_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskFragmentProto::clear_display_id() {
  display_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskFragmentProto::display_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskFragmentProto.display_id)
  return display_id_;
}
inline void TaskFragmentProto::set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  display_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskFragmentProto.display_id)
}

// optional int32 activity_type = 3 [(.android.typedef) = "android.app.WindowConfiguration.ActivityType"];
inline bool TaskFragmentProto::has_activity_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskFragmentProto::clear_activity_type() {
  activity_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskFragmentProto::activity_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskFragmentProto.activity_type)
  return activity_type_;
}
inline void TaskFragmentProto::set_activity_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  activity_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskFragmentProto.activity_type)
}

// optional int32 min_width = 4;
inline bool TaskFragmentProto::has_min_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskFragmentProto::clear_min_width() {
  min_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskFragmentProto::min_width() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskFragmentProto.min_width)
  return min_width_;
}
inline void TaskFragmentProto::set_min_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_width_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskFragmentProto.min_width)
}

// optional int32 min_height = 5;
inline bool TaskFragmentProto::has_min_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskFragmentProto::clear_min_height() {
  min_height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskFragmentProto::min_height() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.TaskFragmentProto.min_height)
  return min_height_;
}
inline void TaskFragmentProto::set_min_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  min_height_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.TaskFragmentProto.min_height)
}

// -------------------------------------------------------------------

// ActivityRecordProto

// optional string name = 1 [(.android.privacy) = {
inline bool ActivityRecordProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityRecordProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityRecordProto::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.name)
  return name_.GetNoArena();
}
inline void ActivityRecordProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.name)
}
inline void ActivityRecordProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.ActivityRecordProto.name)
}
inline void ActivityRecordProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.ActivityRecordProto.name)
}
inline void ActivityRecordProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.ActivityRecordProto.name)
}
inline std::string* ActivityRecordProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ActivityRecordProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityRecordProto::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ActivityRecordProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityRecordProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ActivityRecordProto.name)
}

// optional .com.android.server.wm.WindowTokenProto window_token = 2;
inline bool ActivityRecordProto::has_window_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityRecordProto::clear_window_token() {
  if (window_token_ != nullptr) window_token_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::wm::WindowTokenProto& ActivityRecordProto::window_token() const {
  const ::com::android::server::wm::WindowTokenProto* p = window_token_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.window_token)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowTokenProto*>(
      &::com::android::server::wm::_WindowTokenProto_default_instance_);
}
inline ::com::android::server::wm::WindowTokenProto* ActivityRecordProto::release_window_token() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ActivityRecordProto.window_token)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::wm::WindowTokenProto* temp = window_token_;
  window_token_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowTokenProto* ActivityRecordProto::mutable_window_token() {
  _has_bits_[0] |= 0x00000004u;
  if (window_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowTokenProto>(GetArenaNoVirtual());
    window_token_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ActivityRecordProto.window_token)
  return window_token_;
}
inline void ActivityRecordProto::set_allocated_window_token(::com::android::server::wm::WindowTokenProto* window_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_token_;
  }
  if (window_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  window_token_ = window_token;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ActivityRecordProto.window_token)
}

// optional bool last_surface_showing = 3;
inline bool ActivityRecordProto::has_last_surface_showing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActivityRecordProto::clear_last_surface_showing() {
  last_surface_showing_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ActivityRecordProto::last_surface_showing() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.last_surface_showing)
  return last_surface_showing_;
}
inline void ActivityRecordProto::set_last_surface_showing(bool value) {
  _has_bits_[0] |= 0x00000040u;
  last_surface_showing_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.last_surface_showing)
}

// optional bool is_waiting_for_transition_start = 4;
inline bool ActivityRecordProto::has_is_waiting_for_transition_start() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActivityRecordProto::clear_is_waiting_for_transition_start() {
  is_waiting_for_transition_start_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ActivityRecordProto::is_waiting_for_transition_start() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.is_waiting_for_transition_start)
  return is_waiting_for_transition_start_;
}
inline void ActivityRecordProto::set_is_waiting_for_transition_start(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_waiting_for_transition_start_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.is_waiting_for_transition_start)
}

// optional bool is_animating = 5;
inline bool ActivityRecordProto::has_is_animating() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ActivityRecordProto::clear_is_animating() {
  is_animating_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ActivityRecordProto::is_animating() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.is_animating)
  return is_animating_;
}
inline void ActivityRecordProto::set_is_animating(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_animating_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.is_animating)
}

// optional .com.android.server.wm.WindowContainerThumbnailProto thumbnail = 6;
inline bool ActivityRecordProto::has_thumbnail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::com::android::server::wm::WindowContainerThumbnailProto& ActivityRecordProto::thumbnail() const {
  const ::com::android::server::wm::WindowContainerThumbnailProto* p = thumbnail_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.thumbnail)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerThumbnailProto*>(
      &::com::android::server::wm::_WindowContainerThumbnailProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerThumbnailProto* ActivityRecordProto::release_thumbnail() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ActivityRecordProto.thumbnail)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::wm::WindowContainerThumbnailProto* temp = thumbnail_;
  thumbnail_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerThumbnailProto* ActivityRecordProto::mutable_thumbnail() {
  _has_bits_[0] |= 0x00000008u;
  if (thumbnail_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerThumbnailProto>(GetArenaNoVirtual());
    thumbnail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ActivityRecordProto.thumbnail)
  return thumbnail_;
}
inline void ActivityRecordProto::set_allocated_thumbnail(::com::android::server::wm::WindowContainerThumbnailProto* thumbnail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_);
  }
  if (thumbnail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thumbnail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  thumbnail_ = thumbnail;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ActivityRecordProto.thumbnail)
}

// optional bool fills_parent = 7;
inline bool ActivityRecordProto::has_fills_parent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ActivityRecordProto::clear_fills_parent() {
  fills_parent_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ActivityRecordProto::fills_parent() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.fills_parent)
  return fills_parent_;
}
inline void ActivityRecordProto::set_fills_parent(bool value) {
  _has_bits_[0] |= 0x00000200u;
  fills_parent_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.fills_parent)
}

// optional bool app_stopped = 8;
inline bool ActivityRecordProto::has_app_stopped() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ActivityRecordProto::clear_app_stopped() {
  app_stopped_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ActivityRecordProto::app_stopped() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.app_stopped)
  return app_stopped_;
}
inline void ActivityRecordProto::set_app_stopped(bool value) {
  _has_bits_[0] |= 0x00000400u;
  app_stopped_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.app_stopped)
}

// optional bool visible_requested = 9;
inline bool ActivityRecordProto::has_visible_requested() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ActivityRecordProto::clear_visible_requested() {
  visible_requested_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ActivityRecordProto::visible_requested() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.visible_requested)
  return visible_requested_;
}
inline void ActivityRecordProto::set_visible_requested(bool value) {
  _has_bits_[0] |= 0x00000800u;
  visible_requested_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.visible_requested)
}

// optional bool client_visible = 10;
inline bool ActivityRecordProto::has_client_visible() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ActivityRecordProto::clear_client_visible() {
  client_visible_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ActivityRecordProto::client_visible() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.client_visible)
  return client_visible_;
}
inline void ActivityRecordProto::set_client_visible(bool value) {
  _has_bits_[0] |= 0x00001000u;
  client_visible_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.client_visible)
}

// optional bool defer_hiding_client = 11;
inline bool ActivityRecordProto::has_defer_hiding_client() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ActivityRecordProto::clear_defer_hiding_client() {
  defer_hiding_client_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ActivityRecordProto::defer_hiding_client() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.defer_hiding_client)
  return defer_hiding_client_;
}
inline void ActivityRecordProto::set_defer_hiding_client(bool value) {
  _has_bits_[0] |= 0x00002000u;
  defer_hiding_client_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.defer_hiding_client)
}

// optional bool reported_drawn = 12;
inline bool ActivityRecordProto::has_reported_drawn() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ActivityRecordProto::clear_reported_drawn() {
  reported_drawn_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ActivityRecordProto::reported_drawn() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.reported_drawn)
  return reported_drawn_;
}
inline void ActivityRecordProto::set_reported_drawn(bool value) {
  _has_bits_[0] |= 0x00008000u;
  reported_drawn_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.reported_drawn)
}

// optional bool reported_visible = 13;
inline bool ActivityRecordProto::has_reported_visible() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ActivityRecordProto::clear_reported_visible() {
  reported_visible_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ActivityRecordProto::reported_visible() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.reported_visible)
  return reported_visible_;
}
inline void ActivityRecordProto::set_reported_visible(bool value) {
  _has_bits_[0] |= 0x00010000u;
  reported_visible_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.reported_visible)
}

// optional int32 num_interesting_windows = 14;
inline bool ActivityRecordProto::has_num_interesting_windows() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ActivityRecordProto::clear_num_interesting_windows() {
  num_interesting_windows_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityRecordProto::num_interesting_windows() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.num_interesting_windows)
  return num_interesting_windows_;
}
inline void ActivityRecordProto::set_num_interesting_windows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  num_interesting_windows_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.num_interesting_windows)
}

// optional int32 num_drawn_windows = 15;
inline bool ActivityRecordProto::has_num_drawn_windows() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ActivityRecordProto::clear_num_drawn_windows() {
  num_drawn_windows_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityRecordProto::num_drawn_windows() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.num_drawn_windows)
  return num_drawn_windows_;
}
inline void ActivityRecordProto::set_num_drawn_windows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  num_drawn_windows_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.num_drawn_windows)
}

// optional bool all_drawn = 16;
inline bool ActivityRecordProto::has_all_drawn() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ActivityRecordProto::clear_all_drawn() {
  all_drawn_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ActivityRecordProto::all_drawn() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.all_drawn)
  return all_drawn_;
}
inline void ActivityRecordProto::set_all_drawn(bool value) {
  _has_bits_[0] |= 0x00020000u;
  all_drawn_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.all_drawn)
}

// optional bool last_all_drawn = 17;
inline bool ActivityRecordProto::has_last_all_drawn() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ActivityRecordProto::clear_last_all_drawn() {
  last_all_drawn_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ActivityRecordProto::last_all_drawn() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.last_all_drawn)
  return last_all_drawn_;
}
inline void ActivityRecordProto::set_last_all_drawn(bool value) {
  _has_bits_[0] |= 0x00040000u;
  last_all_drawn_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.last_all_drawn)
}

// optional .com.android.server.wm.IdentifierProto starting_window = 19;
inline bool ActivityRecordProto::has_starting_window() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityRecordProto::clear_starting_window() {
  if (starting_window_ != nullptr) starting_window_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::wm::IdentifierProto& ActivityRecordProto::starting_window() const {
  const ::com::android::server::wm::IdentifierProto* p = starting_window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.starting_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* ActivityRecordProto::release_starting_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ActivityRecordProto.starting_window)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::wm::IdentifierProto* temp = starting_window_;
  starting_window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* ActivityRecordProto::mutable_starting_window() {
  _has_bits_[0] |= 0x00000010u;
  if (starting_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    starting_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ActivityRecordProto.starting_window)
  return starting_window_;
}
inline void ActivityRecordProto::set_allocated_starting_window(::com::android::server::wm::IdentifierProto* starting_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete starting_window_;
  }
  if (starting_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      starting_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starting_window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  starting_window_ = starting_window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ActivityRecordProto.starting_window)
}

// optional bool starting_displayed = 20;
inline bool ActivityRecordProto::has_starting_displayed() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ActivityRecordProto::clear_starting_displayed() {
  starting_displayed_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ActivityRecordProto::starting_displayed() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.starting_displayed)
  return starting_displayed_;
}
inline void ActivityRecordProto::set_starting_displayed(bool value) {
  _has_bits_[0] |= 0x08000000u;
  starting_displayed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.starting_displayed)
}

// optional bool starting_moved = 201;
inline bool ActivityRecordProto::has_starting_moved() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ActivityRecordProto::clear_starting_moved() {
  starting_moved_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ActivityRecordProto::starting_moved() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.starting_moved)
  return starting_moved_;
}
inline void ActivityRecordProto::set_starting_moved(bool value) {
  _has_bits_[0] |= 0x10000000u;
  starting_moved_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.starting_moved)
}

// optional bool visible_set_from_transferred_starting_window = 22;
inline bool ActivityRecordProto::has_visible_set_from_transferred_starting_window() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ActivityRecordProto::clear_visible_set_from_transferred_starting_window() {
  visible_set_from_transferred_starting_window_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ActivityRecordProto::visible_set_from_transferred_starting_window() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.visible_set_from_transferred_starting_window)
  return visible_set_from_transferred_starting_window_;
}
inline void ActivityRecordProto::set_visible_set_from_transferred_starting_window(bool value) {
  _has_bits_[0] |= 0x20000000u;
  visible_set_from_transferred_starting_window_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.visible_set_from_transferred_starting_window)
}

// repeated .android.graphics.RectProto frozen_bounds = 23 [deprecated = true];
inline int ActivityRecordProto::frozen_bounds_size() const {
  return frozen_bounds_.size();
}
inline ::android::graphics::RectProto* ActivityRecordProto::mutable_frozen_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ActivityRecordProto.frozen_bounds)
  return frozen_bounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::graphics::RectProto >*
ActivityRecordProto::mutable_frozen_bounds() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.ActivityRecordProto.frozen_bounds)
  return &frozen_bounds_;
}
inline const ::android::graphics::RectProto& ActivityRecordProto::frozen_bounds(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.frozen_bounds)
  return frozen_bounds_.Get(index);
}
inline ::android::graphics::RectProto* ActivityRecordProto::add_frozen_bounds() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.ActivityRecordProto.frozen_bounds)
  return frozen_bounds_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::graphics::RectProto >&
ActivityRecordProto::frozen_bounds() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.ActivityRecordProto.frozen_bounds)
  return frozen_bounds_;
}

// optional bool visible = 24;
inline bool ActivityRecordProto::has_visible() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ActivityRecordProto::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ActivityRecordProto::visible() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.visible)
  return visible_;
}
inline void ActivityRecordProto::set_visible(bool value) {
  _has_bits_[0] |= 0x40000000u;
  visible_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.visible)
}

// optional .com.android.server.wm.IdentifierProto identifier = 26 [deprecated = true];
inline bool ActivityRecordProto::has_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivityRecordProto::clear_identifier() {
  if (identifier_ != nullptr) identifier_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::wm::IdentifierProto& ActivityRecordProto::identifier() const {
  const ::com::android::server::wm::IdentifierProto* p = identifier_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.identifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* ActivityRecordProto::release_identifier() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ActivityRecordProto.identifier)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::wm::IdentifierProto* temp = identifier_;
  identifier_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* ActivityRecordProto::mutable_identifier() {
  _has_bits_[0] |= 0x00000020u;
  if (identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ActivityRecordProto.identifier)
  return identifier_;
}
inline void ActivityRecordProto::set_allocated_identifier(::com::android::server::wm::IdentifierProto* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete identifier_;
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ActivityRecordProto.identifier)
}

// optional string state = 27 [(.android.privacy) = {
inline bool ActivityRecordProto::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityRecordProto::clear_state() {
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActivityRecordProto::state() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.state)
  return state_.GetNoArena();
}
inline void ActivityRecordProto::set_state(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.state)
}
inline void ActivityRecordProto::set_state(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.ActivityRecordProto.state)
}
inline void ActivityRecordProto::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.ActivityRecordProto.state)
}
inline void ActivityRecordProto::set_state(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.ActivityRecordProto.state)
}
inline std::string* ActivityRecordProto::mutable_state() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ActivityRecordProto.state)
  return state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityRecordProto::release_state() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ActivityRecordProto.state)
  if (!has_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return state_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityRecordProto::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ActivityRecordProto.state)
}

// optional bool front_of_task = 28;
inline bool ActivityRecordProto::has_front_of_task() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ActivityRecordProto::clear_front_of_task() {
  front_of_task_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ActivityRecordProto::front_of_task() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.front_of_task)
  return front_of_task_;
}
inline void ActivityRecordProto::set_front_of_task(bool value) {
  _has_bits_[0] |= 0x00200000u;
  front_of_task_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.front_of_task)
}

// optional int32 proc_id = 29;
inline bool ActivityRecordProto::has_proc_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ActivityRecordProto::clear_proc_id() {
  proc_id_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityRecordProto::proc_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.proc_id)
  return proc_id_;
}
inline void ActivityRecordProto::set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  proc_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.proc_id)
}

// optional bool translucent = 30;
inline bool ActivityRecordProto::has_translucent() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ActivityRecordProto::clear_translucent() {
  translucent_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ActivityRecordProto::translucent() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.translucent)
  return translucent_;
}
inline void ActivityRecordProto::set_translucent(bool value) {
  _has_bits_[0] |= 0x00400000u;
  translucent_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.translucent)
}

// optional bool pip_auto_enter_enabled = 31;
inline bool ActivityRecordProto::has_pip_auto_enter_enabled() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ActivityRecordProto::clear_pip_auto_enter_enabled() {
  pip_auto_enter_enabled_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool ActivityRecordProto::pip_auto_enter_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.pip_auto_enter_enabled)
  return pip_auto_enter_enabled_;
}
inline void ActivityRecordProto::set_pip_auto_enter_enabled(bool value) {
  _has_bits_[0] |= 0x00800000u;
  pip_auto_enter_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.pip_auto_enter_enabled)
}

// optional bool in_size_compat_mode = 32;
inline bool ActivityRecordProto::has_in_size_compat_mode() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ActivityRecordProto::clear_in_size_compat_mode() {
  in_size_compat_mode_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool ActivityRecordProto::in_size_compat_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.in_size_compat_mode)
  return in_size_compat_mode_;
}
inline void ActivityRecordProto::set_in_size_compat_mode(bool value) {
  _has_bits_[0] |= 0x01000000u;
  in_size_compat_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.in_size_compat_mode)
}

// optional float min_aspect_ratio = 33;
inline bool ActivityRecordProto::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ActivityRecordProto::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float ActivityRecordProto::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.min_aspect_ratio)
  return min_aspect_ratio_;
}
inline void ActivityRecordProto::set_min_aspect_ratio(float value) {
  _has_bits_[0] |= 0x02000000u;
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.min_aspect_ratio)
}

// optional bool provides_max_bounds = 34;
inline bool ActivityRecordProto::has_provides_max_bounds() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ActivityRecordProto::clear_provides_max_bounds() {
  provides_max_bounds_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool ActivityRecordProto::provides_max_bounds() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ActivityRecordProto.provides_max_bounds)
  return provides_max_bounds_;
}
inline void ActivityRecordProto::set_provides_max_bounds(bool value) {
  _has_bits_[0] |= 0x04000000u;
  provides_max_bounds_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ActivityRecordProto.provides_max_bounds)
}

// -------------------------------------------------------------------

// WindowTokenProto

// optional .com.android.server.wm.WindowContainerProto window_container = 1;
inline bool WindowTokenProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowTokenProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::WindowContainerProto& WindowTokenProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowTokenProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* WindowTokenProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowTokenProto.window_container)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* WindowTokenProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000001u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowTokenProto.window_container)
  return window_container_;
}
inline void WindowTokenProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowTokenProto.window_container)
}

// optional int32 hash_code = 2;
inline bool WindowTokenProto::has_hash_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowTokenProto::clear_hash_code() {
  hash_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowTokenProto::hash_code() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowTokenProto.hash_code)
  return hash_code_;
}
inline void WindowTokenProto::set_hash_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  hash_code_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowTokenProto.hash_code)
}

// repeated .com.android.server.wm.WindowStateProto windows = 3 [deprecated = true];
inline int WindowTokenProto::windows_size() const {
  return windows_.size();
}
inline void WindowTokenProto::clear_windows() {
  windows_.Clear();
}
inline ::com::android::server::wm::WindowStateProto* WindowTokenProto::mutable_windows(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowTokenProto.windows)
  return windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >*
WindowTokenProto::mutable_windows() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.WindowTokenProto.windows)
  return &windows_;
}
inline const ::com::android::server::wm::WindowStateProto& WindowTokenProto::windows(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowTokenProto.windows)
  return windows_.Get(index);
}
inline ::com::android::server::wm::WindowStateProto* WindowTokenProto::add_windows() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.WindowTokenProto.windows)
  return windows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >&
WindowTokenProto::windows() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.WindowTokenProto.windows)
  return windows_;
}

// optional bool waiting_to_show = 5;
inline bool WindowTokenProto::has_waiting_to_show() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowTokenProto::clear_waiting_to_show() {
  waiting_to_show_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool WindowTokenProto::waiting_to_show() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowTokenProto.waiting_to_show)
  return waiting_to_show_;
}
inline void WindowTokenProto::set_waiting_to_show(bool value) {
  _has_bits_[0] |= 0x00000004u;
  waiting_to_show_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowTokenProto.waiting_to_show)
}

// optional bool paused = 6;
inline bool WindowTokenProto::has_paused() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowTokenProto::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool WindowTokenProto::paused() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowTokenProto.paused)
  return paused_;
}
inline void WindowTokenProto::set_paused(bool value) {
  _has_bits_[0] |= 0x00000008u;
  paused_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowTokenProto.paused)
}

// -------------------------------------------------------------------

// WindowStateProto

// optional .com.android.server.wm.WindowContainerProto window_container = 1;
inline bool WindowStateProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowStateProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::WindowContainerProto& WindowStateProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* WindowStateProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.window_container)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* WindowStateProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000001u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.window_container)
  return window_container_;
}
inline void WindowStateProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.window_container)
}

// optional .com.android.server.wm.IdentifierProto identifier = 2 [deprecated = true];
inline bool WindowStateProto::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowStateProto::clear_identifier() {
  if (identifier_ != nullptr) identifier_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::IdentifierProto& WindowStateProto::identifier() const {
  const ::com::android::server::wm::IdentifierProto* p = identifier_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.identifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* WindowStateProto::release_identifier() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.identifier)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::IdentifierProto* temp = identifier_;
  identifier_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* WindowStateProto::mutable_identifier() {
  _has_bits_[0] |= 0x00000002u;
  if (identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.identifier)
  return identifier_;
}
inline void WindowStateProto::set_allocated_identifier(::com::android::server::wm::IdentifierProto* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete identifier_;
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.identifier)
}

// optional int32 display_id = 3;
inline bool WindowStateProto::has_display_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void WindowStateProto::clear_display_id() {
  display_id_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowStateProto::display_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.display_id)
  return display_id_;
}
inline void WindowStateProto::set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  display_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.display_id)
}

// optional int32 stack_id = 4;
inline bool WindowStateProto::has_stack_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void WindowStateProto::clear_stack_id() {
  stack_id_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowStateProto::stack_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.stack_id)
  return stack_id_;
}
inline void WindowStateProto::set_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  stack_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.stack_id)
}

// optional .android.view.WindowLayoutParamsProto attributes = 5;
inline bool WindowStateProto::has_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::view::WindowLayoutParamsProto& WindowStateProto::attributes() const {
  const ::android::view::WindowLayoutParamsProto* p = attributes_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::WindowLayoutParamsProto*>(
      &::android::view::_WindowLayoutParamsProto_default_instance_);
}
inline ::android::view::WindowLayoutParamsProto* WindowStateProto::release_attributes() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.attributes)
  _has_bits_[0] &= ~0x00000004u;
  ::android::view::WindowLayoutParamsProto* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::android::view::WindowLayoutParamsProto* WindowStateProto::mutable_attributes() {
  _has_bits_[0] |= 0x00000004u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::WindowLayoutParamsProto>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.attributes)
  return attributes_;
}
inline void WindowStateProto::set_allocated_attributes(::android::view::WindowLayoutParamsProto* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.attributes)
}

// optional .android.graphics.RectProto given_content_insets = 6;
inline bool WindowStateProto::has_given_content_insets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::given_content_insets() const {
  const ::android::graphics::RectProto* p = given_content_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.given_content_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_given_content_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.given_content_insets)
  _has_bits_[0] &= ~0x00000008u;
  ::android::graphics::RectProto* temp = given_content_insets_;
  given_content_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_given_content_insets() {
  _has_bits_[0] |= 0x00000008u;
  if (given_content_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    given_content_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.given_content_insets)
  return given_content_insets_;
}
inline void WindowStateProto::set_allocated_given_content_insets(::android::graphics::RectProto* given_content_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(given_content_insets_);
  }
  if (given_content_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      given_content_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, given_content_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  given_content_insets_ = given_content_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.given_content_insets)
}

// optional .android.graphics.RectProto frame = 7 [deprecated = true];
inline bool WindowStateProto::has_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::frame() const {
  const ::android::graphics::RectProto* p = frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.frame)
  _has_bits_[0] &= ~0x00000010u;
  ::android::graphics::RectProto* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_frame() {
  _has_bits_[0] |= 0x00000010u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.frame)
  return frame_;
}
inline void WindowStateProto::set_allocated_frame(::android::graphics::RectProto* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.frame)
}

// optional .android.graphics.RectProto containing_frame = 8 [deprecated = true];
inline bool WindowStateProto::has_containing_frame() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::containing_frame() const {
  const ::android::graphics::RectProto* p = containing_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.containing_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_containing_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.containing_frame)
  _has_bits_[0] &= ~0x00000020u;
  ::android::graphics::RectProto* temp = containing_frame_;
  containing_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_containing_frame() {
  _has_bits_[0] |= 0x00000020u;
  if (containing_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    containing_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.containing_frame)
  return containing_frame_;
}
inline void WindowStateProto::set_allocated_containing_frame(::android::graphics::RectProto* containing_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(containing_frame_);
  }
  if (containing_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      containing_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, containing_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  containing_frame_ = containing_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.containing_frame)
}

// optional .android.graphics.RectProto parent_frame = 9 [deprecated = true];
inline bool WindowStateProto::has_parent_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::parent_frame() const {
  const ::android::graphics::RectProto* p = parent_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.parent_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_parent_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.parent_frame)
  _has_bits_[0] &= ~0x00000040u;
  ::android::graphics::RectProto* temp = parent_frame_;
  parent_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_parent_frame() {
  _has_bits_[0] |= 0x00000040u;
  if (parent_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    parent_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.parent_frame)
  return parent_frame_;
}
inline void WindowStateProto::set_allocated_parent_frame(::android::graphics::RectProto* parent_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_frame_);
  }
  if (parent_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  parent_frame_ = parent_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.parent_frame)
}

// optional .android.graphics.RectProto content_frame = 10 [deprecated = true];
inline bool WindowStateProto::has_content_frame() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::content_frame() const {
  const ::android::graphics::RectProto* p = content_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.content_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_content_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.content_frame)
  _has_bits_[0] &= ~0x00000080u;
  ::android::graphics::RectProto* temp = content_frame_;
  content_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_content_frame() {
  _has_bits_[0] |= 0x00000080u;
  if (content_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    content_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.content_frame)
  return content_frame_;
}
inline void WindowStateProto::set_allocated_content_frame(::android::graphics::RectProto* content_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_frame_);
  }
  if (content_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  content_frame_ = content_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.content_frame)
}

// optional .android.graphics.RectProto content_insets = 11 [deprecated = true];
inline bool WindowStateProto::has_content_insets() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::content_insets() const {
  const ::android::graphics::RectProto* p = content_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.content_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_content_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.content_insets)
  _has_bits_[0] &= ~0x00000100u;
  ::android::graphics::RectProto* temp = content_insets_;
  content_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_content_insets() {
  _has_bits_[0] |= 0x00000100u;
  if (content_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    content_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.content_insets)
  return content_insets_;
}
inline void WindowStateProto::set_allocated_content_insets(::android::graphics::RectProto* content_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_insets_);
  }
  if (content_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  content_insets_ = content_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.content_insets)
}

// optional .android.graphics.RectProto surface_insets = 12;
inline bool WindowStateProto::has_surface_insets() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::surface_insets() const {
  const ::android::graphics::RectProto* p = surface_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.surface_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_surface_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.surface_insets)
  _has_bits_[0] &= ~0x00000200u;
  ::android::graphics::RectProto* temp = surface_insets_;
  surface_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_surface_insets() {
  _has_bits_[0] |= 0x00000200u;
  if (surface_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    surface_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.surface_insets)
  return surface_insets_;
}
inline void WindowStateProto::set_allocated_surface_insets(::android::graphics::RectProto* surface_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surface_insets_);
  }
  if (surface_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  surface_insets_ = surface_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.surface_insets)
}

// optional .com.android.server.wm.WindowStateAnimatorProto animator = 13;
inline bool WindowStateProto::has_animator() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowStateProto::clear_animator() {
  if (animator_ != nullptr) animator_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::com::android::server::wm::WindowStateAnimatorProto& WindowStateProto::animator() const {
  const ::com::android::server::wm::WindowStateAnimatorProto* p = animator_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.animator)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateAnimatorProto*>(
      &::com::android::server::wm::_WindowStateAnimatorProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateAnimatorProto* WindowStateProto::release_animator() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.animator)
  _has_bits_[0] &= ~0x00000400u;
  ::com::android::server::wm::WindowStateAnimatorProto* temp = animator_;
  animator_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateAnimatorProto* WindowStateProto::mutable_animator() {
  _has_bits_[0] |= 0x00000400u;
  if (animator_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateAnimatorProto>(GetArenaNoVirtual());
    animator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.animator)
  return animator_;
}
inline void WindowStateProto::set_allocated_animator(::com::android::server::wm::WindowStateAnimatorProto* animator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete animator_;
  }
  if (animator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      animator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  animator_ = animator;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.animator)
}

// optional bool animating_exit = 14;
inline bool WindowStateProto::has_animating_exit() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void WindowStateProto::clear_animating_exit() {
  animating_exit_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool WindowStateProto::animating_exit() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.animating_exit)
  return animating_exit_;
}
inline void WindowStateProto::set_animating_exit(bool value) {
  _has_bits_[0] |= 0x20000000u;
  animating_exit_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.animating_exit)
}

// repeated .com.android.server.wm.WindowStateProto child_windows = 15 [deprecated = true];
inline int WindowStateProto::child_windows_size() const {
  return child_windows_.size();
}
inline void WindowStateProto::clear_child_windows() {
  child_windows_.Clear();
}
inline ::com::android::server::wm::WindowStateProto* WindowStateProto::mutable_child_windows(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.child_windows)
  return child_windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >*
WindowStateProto::mutable_child_windows() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.WindowStateProto.child_windows)
  return &child_windows_;
}
inline const ::com::android::server::wm::WindowStateProto& WindowStateProto::child_windows(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.child_windows)
  return child_windows_.Get(index);
}
inline ::com::android::server::wm::WindowStateProto* WindowStateProto::add_child_windows() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.WindowStateProto.child_windows)
  return child_windows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowStateProto >&
WindowStateProto::child_windows() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.WindowStateProto.child_windows)
  return child_windows_;
}

// optional .android.graphics.RectProto surface_position = 16;
inline bool WindowStateProto::has_surface_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::surface_position() const {
  const ::android::graphics::RectProto* p = surface_position_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.surface_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_surface_position() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.surface_position)
  _has_bits_[0] &= ~0x00000800u;
  ::android::graphics::RectProto* temp = surface_position_;
  surface_position_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_surface_position() {
  _has_bits_[0] |= 0x00000800u;
  if (surface_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    surface_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.surface_position)
  return surface_position_;
}
inline void WindowStateProto::set_allocated_surface_position(::android::graphics::RectProto* surface_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surface_position_);
  }
  if (surface_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  surface_position_ = surface_position;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.surface_position)
}

// optional int32 requested_width = 18;
inline bool WindowStateProto::has_requested_width() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void WindowStateProto::clear_requested_width() {
  requested_width_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowStateProto::requested_width() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.requested_width)
  return requested_width_;
}
inline void WindowStateProto::set_requested_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  requested_width_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.requested_width)
}

// optional int32 requested_height = 19;
inline bool WindowStateProto::has_requested_height() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void WindowStateProto::clear_requested_height() {
  requested_height_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowStateProto::requested_height() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.requested_height)
  return requested_height_;
}
inline void WindowStateProto::set_requested_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  requested_height_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.requested_height)
}

// optional int32 view_visibility = 20 [(.android.typedef) = "android.view.View.Visibility"];
inline bool WindowStateProto::has_view_visibility() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void WindowStateProto::clear_view_visibility() {
  view_visibility_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowStateProto::view_visibility() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.view_visibility)
  return view_visibility_;
}
inline void WindowStateProto::set_view_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  view_visibility_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.view_visibility)
}

// optional int32 system_ui_visibility = 21 [deprecated = true];
inline bool WindowStateProto::has_system_ui_visibility() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void WindowStateProto::clear_system_ui_visibility() {
  system_ui_visibility_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowStateProto::system_ui_visibility() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.system_ui_visibility)
  return system_ui_visibility_;
}
inline void WindowStateProto::set_system_ui_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  system_ui_visibility_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.system_ui_visibility)
}

// optional bool has_surface = 22;
inline bool WindowStateProto::has_has_surface() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void WindowStateProto::clear_has_surface() {
  has_surface_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool WindowStateProto::has_surface() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.has_surface)
  return has_surface_;
}
inline void WindowStateProto::set_has_surface(bool value) {
  _has_bits_[0] |= 0x40000000u;
  has_surface_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.has_surface)
}

// optional bool is_ready_for_display = 23;
inline bool WindowStateProto::has_is_ready_for_display() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void WindowStateProto::clear_is_ready_for_display() {
  is_ready_for_display_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool WindowStateProto::is_ready_for_display() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.is_ready_for_display)
  return is_ready_for_display_;
}
inline void WindowStateProto::set_is_ready_for_display(bool value) {
  _has_bits_[0] |= 0x80000000u;
  is_ready_for_display_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.is_ready_for_display)
}

// optional .android.graphics.RectProto display_frame = 24 [deprecated = true];
inline bool WindowStateProto::has_display_frame() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::display_frame() const {
  const ::android::graphics::RectProto* p = display_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.display_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_display_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.display_frame)
  _has_bits_[0] &= ~0x00001000u;
  ::android::graphics::RectProto* temp = display_frame_;
  display_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_display_frame() {
  _has_bits_[0] |= 0x00001000u;
  if (display_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    display_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.display_frame)
  return display_frame_;
}
inline void WindowStateProto::set_allocated_display_frame(::android::graphics::RectProto* display_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_frame_);
  }
  if (display_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  display_frame_ = display_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.display_frame)
}

// optional .android.graphics.RectProto overscan_frame = 25 [deprecated = true];
inline bool WindowStateProto::has_overscan_frame() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::overscan_frame() const {
  const ::android::graphics::RectProto* p = overscan_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.overscan_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_overscan_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.overscan_frame)
  _has_bits_[0] &= ~0x00002000u;
  ::android::graphics::RectProto* temp = overscan_frame_;
  overscan_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_overscan_frame() {
  _has_bits_[0] |= 0x00002000u;
  if (overscan_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    overscan_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.overscan_frame)
  return overscan_frame_;
}
inline void WindowStateProto::set_allocated_overscan_frame(::android::graphics::RectProto* overscan_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overscan_frame_);
  }
  if (overscan_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overscan_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overscan_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  overscan_frame_ = overscan_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.overscan_frame)
}

// optional .android.graphics.RectProto visible_frame = 26 [deprecated = true];
inline bool WindowStateProto::has_visible_frame() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::visible_frame() const {
  const ::android::graphics::RectProto* p = visible_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.visible_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_visible_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.visible_frame)
  _has_bits_[0] &= ~0x00004000u;
  ::android::graphics::RectProto* temp = visible_frame_;
  visible_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_visible_frame() {
  _has_bits_[0] |= 0x00004000u;
  if (visible_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    visible_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.visible_frame)
  return visible_frame_;
}
inline void WindowStateProto::set_allocated_visible_frame(::android::graphics::RectProto* visible_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_frame_);
  }
  if (visible_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visible_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  visible_frame_ = visible_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.visible_frame)
}

// optional .android.graphics.RectProto decor_frame = 27 [deprecated = true];
inline bool WindowStateProto::has_decor_frame() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::decor_frame() const {
  const ::android::graphics::RectProto* p = decor_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.decor_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_decor_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.decor_frame)
  _has_bits_[0] &= ~0x00008000u;
  ::android::graphics::RectProto* temp = decor_frame_;
  decor_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_decor_frame() {
  _has_bits_[0] |= 0x00008000u;
  if (decor_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    decor_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.decor_frame)
  return decor_frame_;
}
inline void WindowStateProto::set_allocated_decor_frame(::android::graphics::RectProto* decor_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(decor_frame_);
  }
  if (decor_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decor_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decor_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  decor_frame_ = decor_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.decor_frame)
}

// optional .android.graphics.RectProto outset_frame = 28 [deprecated = true];
inline bool WindowStateProto::has_outset_frame() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::outset_frame() const {
  const ::android::graphics::RectProto* p = outset_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.outset_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_outset_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.outset_frame)
  _has_bits_[0] &= ~0x00010000u;
  ::android::graphics::RectProto* temp = outset_frame_;
  outset_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_outset_frame() {
  _has_bits_[0] |= 0x00010000u;
  if (outset_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    outset_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.outset_frame)
  return outset_frame_;
}
inline void WindowStateProto::set_allocated_outset_frame(::android::graphics::RectProto* outset_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outset_frame_);
  }
  if (outset_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outset_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outset_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  outset_frame_ = outset_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.outset_frame)
}

// optional .android.graphics.RectProto overscan_insets = 29 [deprecated = true];
inline bool WindowStateProto::has_overscan_insets() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::overscan_insets() const {
  const ::android::graphics::RectProto* p = overscan_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.overscan_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_overscan_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.overscan_insets)
  _has_bits_[0] &= ~0x00020000u;
  ::android::graphics::RectProto* temp = overscan_insets_;
  overscan_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_overscan_insets() {
  _has_bits_[0] |= 0x00020000u;
  if (overscan_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    overscan_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.overscan_insets)
  return overscan_insets_;
}
inline void WindowStateProto::set_allocated_overscan_insets(::android::graphics::RectProto* overscan_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overscan_insets_);
  }
  if (overscan_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overscan_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overscan_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  overscan_insets_ = overscan_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.overscan_insets)
}

// optional .android.graphics.RectProto visible_insets = 30 [deprecated = true];
inline bool WindowStateProto::has_visible_insets() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::visible_insets() const {
  const ::android::graphics::RectProto* p = visible_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.visible_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_visible_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.visible_insets)
  _has_bits_[0] &= ~0x00040000u;
  ::android::graphics::RectProto* temp = visible_insets_;
  visible_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_visible_insets() {
  _has_bits_[0] |= 0x00040000u;
  if (visible_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    visible_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.visible_insets)
  return visible_insets_;
}
inline void WindowStateProto::set_allocated_visible_insets(::android::graphics::RectProto* visible_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_insets_);
  }
  if (visible_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visible_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  visible_insets_ = visible_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.visible_insets)
}

// optional .android.graphics.RectProto stable_insets = 31 [deprecated = true];
inline bool WindowStateProto::has_stable_insets() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::stable_insets() const {
  const ::android::graphics::RectProto* p = stable_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.stable_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_stable_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.stable_insets)
  _has_bits_[0] &= ~0x00080000u;
  ::android::graphics::RectProto* temp = stable_insets_;
  stable_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_stable_insets() {
  _has_bits_[0] |= 0x00080000u;
  if (stable_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    stable_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.stable_insets)
  return stable_insets_;
}
inline void WindowStateProto::set_allocated_stable_insets(::android::graphics::RectProto* stable_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stable_insets_);
  }
  if (stable_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stable_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stable_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  stable_insets_ = stable_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.stable_insets)
}

// optional .android.graphics.RectProto outsets = 32 [deprecated = true];
inline bool WindowStateProto::has_outsets() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateProto::outsets() const {
  const ::android::graphics::RectProto* p = outsets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.outsets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateProto::release_outsets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.outsets)
  _has_bits_[0] &= ~0x00100000u;
  ::android::graphics::RectProto* temp = outsets_;
  outsets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateProto::mutable_outsets() {
  _has_bits_[0] |= 0x00100000u;
  if (outsets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    outsets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.outsets)
  return outsets_;
}
inline void WindowStateProto::set_allocated_outsets(::android::graphics::RectProto* outsets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outsets_);
  }
  if (outsets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outsets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outsets, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  outsets_ = outsets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.outsets)
}

// optional .android.view.DisplayCutoutProto cutout = 33 [deprecated = true];
inline bool WindowStateProto::has_cutout() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline const ::android::view::DisplayCutoutProto& WindowStateProto::cutout() const {
  const ::android::view::DisplayCutoutProto* p = cutout_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.cutout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::DisplayCutoutProto*>(
      &::android::view::_DisplayCutoutProto_default_instance_);
}
inline ::android::view::DisplayCutoutProto* WindowStateProto::release_cutout() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.cutout)
  _has_bits_[0] &= ~0x00200000u;
  ::android::view::DisplayCutoutProto* temp = cutout_;
  cutout_ = nullptr;
  return temp;
}
inline ::android::view::DisplayCutoutProto* WindowStateProto::mutable_cutout() {
  _has_bits_[0] |= 0x00200000u;
  if (cutout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::DisplayCutoutProto>(GetArenaNoVirtual());
    cutout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.cutout)
  return cutout_;
}
inline void WindowStateProto::set_allocated_cutout(::android::view::DisplayCutoutProto* cutout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cutout_);
  }
  if (cutout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cutout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cutout, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  cutout_ = cutout;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.cutout)
}

// optional bool remove_on_exit = 34;
inline bool WindowStateProto::has_remove_on_exit() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void WindowStateProto::clear_remove_on_exit() {
  remove_on_exit_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool WindowStateProto::remove_on_exit() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.remove_on_exit)
  return remove_on_exit_;
}
inline void WindowStateProto::set_remove_on_exit(bool value) {
  _has_bits_[1] |= 0x00000001u;
  remove_on_exit_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.remove_on_exit)
}

// optional bool destroying = 35;
inline bool WindowStateProto::has_destroying() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void WindowStateProto::clear_destroying() {
  destroying_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool WindowStateProto::destroying() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.destroying)
  return destroying_;
}
inline void WindowStateProto::set_destroying(bool value) {
  _has_bits_[1] |= 0x00000002u;
  destroying_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.destroying)
}

// optional bool removed = 36;
inline bool WindowStateProto::has_removed() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void WindowStateProto::clear_removed() {
  removed_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool WindowStateProto::removed() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.removed)
  return removed_;
}
inline void WindowStateProto::set_removed(bool value) {
  _has_bits_[1] |= 0x00000004u;
  removed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.removed)
}

// optional bool is_on_screen = 37;
inline bool WindowStateProto::has_is_on_screen() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void WindowStateProto::clear_is_on_screen() {
  is_on_screen_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool WindowStateProto::is_on_screen() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.is_on_screen)
  return is_on_screen_;
}
inline void WindowStateProto::set_is_on_screen(bool value) {
  _has_bits_[1] |= 0x00000008u;
  is_on_screen_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.is_on_screen)
}

// optional bool is_visible = 38;
inline bool WindowStateProto::has_is_visible() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void WindowStateProto::clear_is_visible() {
  is_visible_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool WindowStateProto::is_visible() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.is_visible)
  return is_visible_;
}
inline void WindowStateProto::set_is_visible(bool value) {
  _has_bits_[1] |= 0x00000010u;
  is_visible_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.is_visible)
}

// optional bool pending_seamless_rotation = 39;
inline bool WindowStateProto::has_pending_seamless_rotation() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void WindowStateProto::clear_pending_seamless_rotation() {
  pending_seamless_rotation_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool WindowStateProto::pending_seamless_rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.pending_seamless_rotation)
  return pending_seamless_rotation_;
}
inline void WindowStateProto::set_pending_seamless_rotation(bool value) {
  _has_bits_[1] |= 0x00000040u;
  pending_seamless_rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.pending_seamless_rotation)
}

// optional int64 finished_seamless_rotation_frame = 40;
inline bool WindowStateProto::has_finished_seamless_rotation_frame() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void WindowStateProto::clear_finished_seamless_rotation_frame() {
  finished_seamless_rotation_frame_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowStateProto::finished_seamless_rotation_frame() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.finished_seamless_rotation_frame)
  return finished_seamless_rotation_frame_;
}
inline void WindowStateProto::set_finished_seamless_rotation_frame(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000020u;
  finished_seamless_rotation_frame_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.finished_seamless_rotation_frame)
}

// optional .com.android.server.wm.WindowFramesProto window_frames = 41;
inline bool WindowStateProto::has_window_frames() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void WindowStateProto::clear_window_frames() {
  if (window_frames_ != nullptr) window_frames_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::com::android::server::wm::WindowFramesProto& WindowStateProto::window_frames() const {
  const ::com::android::server::wm::WindowFramesProto* p = window_frames_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.window_frames)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowFramesProto*>(
      &::com::android::server::wm::_WindowFramesProto_default_instance_);
}
inline ::com::android::server::wm::WindowFramesProto* WindowStateProto::release_window_frames() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateProto.window_frames)
  _has_bits_[0] &= ~0x00400000u;
  ::com::android::server::wm::WindowFramesProto* temp = window_frames_;
  window_frames_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowFramesProto* WindowStateProto::mutable_window_frames() {
  _has_bits_[0] |= 0x00400000u;
  if (window_frames_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowFramesProto>(GetArenaNoVirtual());
    window_frames_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateProto.window_frames)
  return window_frames_;
}
inline void WindowStateProto::set_allocated_window_frames(::com::android::server::wm::WindowFramesProto* window_frames) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_frames_;
  }
  if (window_frames) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_frames = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_frames, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  window_frames_ = window_frames;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateProto.window_frames)
}

// optional bool force_seamless_rotation = 42;
inline bool WindowStateProto::has_force_seamless_rotation() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void WindowStateProto::clear_force_seamless_rotation() {
  force_seamless_rotation_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool WindowStateProto::force_seamless_rotation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.force_seamless_rotation)
  return force_seamless_rotation_;
}
inline void WindowStateProto::set_force_seamless_rotation(bool value) {
  _has_bits_[1] |= 0x00000080u;
  force_seamless_rotation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.force_seamless_rotation)
}

// optional bool has_compat_scale = 43;
inline bool WindowStateProto::has_has_compat_scale() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void WindowStateProto::clear_has_compat_scale() {
  has_compat_scale_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool WindowStateProto::has_compat_scale() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.has_compat_scale)
  return has_compat_scale_;
}
inline void WindowStateProto::set_has_compat_scale(bool value) {
  _has_bits_[1] |= 0x00000100u;
  has_compat_scale_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.has_compat_scale)
}

// optional float global_scale = 44;
inline bool WindowStateProto::has_global_scale() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void WindowStateProto::clear_global_scale() {
  global_scale_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float WindowStateProto::global_scale() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateProto.global_scale)
  return global_scale_;
}
inline void WindowStateProto::set_global_scale(float value) {
  _has_bits_[1] |= 0x00000200u;
  global_scale_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateProto.global_scale)
}

// -------------------------------------------------------------------

// IdentifierProto

// optional int32 hash_code = 1;
inline bool IdentifierProto::has_hash_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IdentifierProto::clear_hash_code() {
  hash_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IdentifierProto::hash_code() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.IdentifierProto.hash_code)
  return hash_code_;
}
inline void IdentifierProto::set_hash_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  hash_code_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.IdentifierProto.hash_code)
}

// optional int32 user_id = 2;
inline bool IdentifierProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IdentifierProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IdentifierProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.IdentifierProto.user_id)
  return user_id_;
}
inline void IdentifierProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.IdentifierProto.user_id)
}

// optional string title = 3 [(.android.privacy) = {
inline bool IdentifierProto::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdentifierProto::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IdentifierProto::title() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.IdentifierProto.title)
  return title_.GetNoArena();
}
inline void IdentifierProto::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.IdentifierProto.title)
}
inline void IdentifierProto::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.IdentifierProto.title)
}
inline void IdentifierProto::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.IdentifierProto.title)
}
inline void IdentifierProto::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.IdentifierProto.title)
}
inline std::string* IdentifierProto::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.IdentifierProto.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdentifierProto::release_title() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.IdentifierProto.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdentifierProto::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.IdentifierProto.title)
}

// -------------------------------------------------------------------

// WindowStateAnimatorProto

// optional .android.graphics.RectProto last_clip_rect = 1;
inline bool WindowStateAnimatorProto::has_last_clip_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateAnimatorProto::last_clip_rect() const {
  const ::android::graphics::RectProto* p = last_clip_rect_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateAnimatorProto.last_clip_rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateAnimatorProto::release_last_clip_rect() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateAnimatorProto.last_clip_rect)
  _has_bits_[0] &= ~0x00000001u;
  ::android::graphics::RectProto* temp = last_clip_rect_;
  last_clip_rect_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateAnimatorProto::mutable_last_clip_rect() {
  _has_bits_[0] |= 0x00000001u;
  if (last_clip_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    last_clip_rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateAnimatorProto.last_clip_rect)
  return last_clip_rect_;
}
inline void WindowStateAnimatorProto::set_allocated_last_clip_rect(::android::graphics::RectProto* last_clip_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_clip_rect_);
  }
  if (last_clip_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_clip_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_clip_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_clip_rect_ = last_clip_rect;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateAnimatorProto.last_clip_rect)
}

// optional .com.android.server.wm.WindowSurfaceControllerProto surface = 2;
inline bool WindowStateAnimatorProto::has_surface() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowStateAnimatorProto::clear_surface() {
  if (surface_ != nullptr) surface_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::WindowSurfaceControllerProto& WindowStateAnimatorProto::surface() const {
  const ::com::android::server::wm::WindowSurfaceControllerProto* p = surface_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateAnimatorProto.surface)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowSurfaceControllerProto*>(
      &::com::android::server::wm::_WindowSurfaceControllerProto_default_instance_);
}
inline ::com::android::server::wm::WindowSurfaceControllerProto* WindowStateAnimatorProto::release_surface() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateAnimatorProto.surface)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::WindowSurfaceControllerProto* temp = surface_;
  surface_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowSurfaceControllerProto* WindowStateAnimatorProto::mutable_surface() {
  _has_bits_[0] |= 0x00000002u;
  if (surface_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowSurfaceControllerProto>(GetArenaNoVirtual());
    surface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateAnimatorProto.surface)
  return surface_;
}
inline void WindowStateAnimatorProto::set_allocated_surface(::com::android::server::wm::WindowSurfaceControllerProto* surface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete surface_;
  }
  if (surface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  surface_ = surface;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateAnimatorProto.surface)
}

// optional .com.android.server.wm.WindowStateAnimatorProto.DrawState draw_state = 3;
inline bool WindowStateAnimatorProto::has_draw_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowStateAnimatorProto::clear_draw_state() {
  draw_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::com::android::server::wm::WindowStateAnimatorProto_DrawState WindowStateAnimatorProto::draw_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateAnimatorProto.draw_state)
  return static_cast< ::com::android::server::wm::WindowStateAnimatorProto_DrawState >(draw_state_);
}
inline void WindowStateAnimatorProto::set_draw_state(::com::android::server::wm::WindowStateAnimatorProto_DrawState value) {
  assert(::com::android::server::wm::WindowStateAnimatorProto_DrawState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  draw_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowStateAnimatorProto.draw_state)
}

// optional .android.graphics.RectProto system_decor_rect = 4;
inline bool WindowStateAnimatorProto::has_system_decor_rect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::graphics::RectProto& WindowStateAnimatorProto::system_decor_rect() const {
  const ::android::graphics::RectProto* p = system_decor_rect_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowStateAnimatorProto.system_decor_rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowStateAnimatorProto::release_system_decor_rect() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowStateAnimatorProto.system_decor_rect)
  _has_bits_[0] &= ~0x00000004u;
  ::android::graphics::RectProto* temp = system_decor_rect_;
  system_decor_rect_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowStateAnimatorProto::mutable_system_decor_rect() {
  _has_bits_[0] |= 0x00000004u;
  if (system_decor_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    system_decor_rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowStateAnimatorProto.system_decor_rect)
  return system_decor_rect_;
}
inline void WindowStateAnimatorProto::set_allocated_system_decor_rect(::android::graphics::RectProto* system_decor_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_decor_rect_);
  }
  if (system_decor_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_decor_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_decor_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  system_decor_rect_ = system_decor_rect;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowStateAnimatorProto.system_decor_rect)
}

// -------------------------------------------------------------------

// WindowSurfaceControllerProto

// optional bool shown = 1;
inline bool WindowSurfaceControllerProto::has_shown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowSurfaceControllerProto::clear_shown() {
  shown_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool WindowSurfaceControllerProto::shown() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowSurfaceControllerProto.shown)
  return shown_;
}
inline void WindowSurfaceControllerProto::set_shown(bool value) {
  _has_bits_[0] |= 0x00000001u;
  shown_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowSurfaceControllerProto.shown)
}

// optional int32 layer = 2;
inline bool WindowSurfaceControllerProto::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowSurfaceControllerProto::clear_layer() {
  layer_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSurfaceControllerProto::layer() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowSurfaceControllerProto.layer)
  return layer_;
}
inline void WindowSurfaceControllerProto::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  layer_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowSurfaceControllerProto.layer)
}

// -------------------------------------------------------------------

// ScreenRotationAnimationProto

// optional bool started = 1;
inline bool ScreenRotationAnimationProto::has_started() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScreenRotationAnimationProto::clear_started() {
  started_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ScreenRotationAnimationProto::started() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ScreenRotationAnimationProto.started)
  return started_;
}
inline void ScreenRotationAnimationProto::set_started(bool value) {
  _has_bits_[0] |= 0x00000001u;
  started_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ScreenRotationAnimationProto.started)
}

// optional bool animation_running = 2;
inline bool ScreenRotationAnimationProto::has_animation_running() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScreenRotationAnimationProto::clear_animation_running() {
  animation_running_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ScreenRotationAnimationProto::animation_running() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ScreenRotationAnimationProto.animation_running)
  return animation_running_;
}
inline void ScreenRotationAnimationProto::set_animation_running(bool value) {
  _has_bits_[0] |= 0x00000002u;
  animation_running_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ScreenRotationAnimationProto.animation_running)
}

// -------------------------------------------------------------------

// WindowContainerProto

// optional .com.android.server.wm.ConfigurationContainerProto configuration_container = 1;
inline bool WindowContainerProto::has_configuration_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowContainerProto::clear_configuration_container() {
  if (configuration_container_ != nullptr) configuration_container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::ConfigurationContainerProto& WindowContainerProto::configuration_container() const {
  const ::com::android::server::wm::ConfigurationContainerProto* p = configuration_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerProto.configuration_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::ConfigurationContainerProto*>(
      &::com::android::server::wm::_ConfigurationContainerProto_default_instance_);
}
inline ::com::android::server::wm::ConfigurationContainerProto* WindowContainerProto::release_configuration_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerProto.configuration_container)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::ConfigurationContainerProto* temp = configuration_container_;
  configuration_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::ConfigurationContainerProto* WindowContainerProto::mutable_configuration_container() {
  _has_bits_[0] |= 0x00000001u;
  if (configuration_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::ConfigurationContainerProto>(GetArenaNoVirtual());
    configuration_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerProto.configuration_container)
  return configuration_container_;
}
inline void WindowContainerProto::set_allocated_configuration_container(::com::android::server::wm::ConfigurationContainerProto* configuration_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete configuration_container_;
  }
  if (configuration_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      configuration_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  configuration_container_ = configuration_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerProto.configuration_container)
}

// optional int32 orientation = 2 [(.android.typedef) = "android.content.pm.ActivityInfo.ScreenOrientation"];
inline bool WindowContainerProto::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowContainerProto::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowContainerProto::orientation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerProto.orientation)
  return orientation_;
}
inline void WindowContainerProto::set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  orientation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowContainerProto.orientation)
}

// optional bool visible = 3;
inline bool WindowContainerProto::has_visible() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowContainerProto::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool WindowContainerProto::visible() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerProto.visible)
  return visible_;
}
inline void WindowContainerProto::set_visible(bool value) {
  _has_bits_[0] |= 0x00000020u;
  visible_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowContainerProto.visible)
}

// optional .com.android.server.wm.SurfaceAnimatorProto surface_animator = 4;
inline bool WindowContainerProto::has_surface_animator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::com::android::server::wm::SurfaceAnimatorProto& WindowContainerProto::surface_animator() const {
  const ::com::android::server::wm::SurfaceAnimatorProto* p = surface_animator_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerProto.surface_animator)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::SurfaceAnimatorProto*>(
      &::com::android::server::wm::_SurfaceAnimatorProto_default_instance_);
}
inline ::com::android::server::wm::SurfaceAnimatorProto* WindowContainerProto::release_surface_animator() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerProto.surface_animator)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::SurfaceAnimatorProto* temp = surface_animator_;
  surface_animator_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::SurfaceAnimatorProto* WindowContainerProto::mutable_surface_animator() {
  _has_bits_[0] |= 0x00000002u;
  if (surface_animator_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::SurfaceAnimatorProto>(GetArenaNoVirtual());
    surface_animator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerProto.surface_animator)
  return surface_animator_;
}
inline void WindowContainerProto::set_allocated_surface_animator(::com::android::server::wm::SurfaceAnimatorProto* surface_animator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surface_animator_);
  }
  if (surface_animator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface_animator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_animator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  surface_animator_ = surface_animator;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerProto.surface_animator)
}

// repeated .com.android.server.wm.WindowContainerChildProto children = 5;
inline int WindowContainerProto::children_size() const {
  return children_.size();
}
inline void WindowContainerProto::clear_children() {
  children_.Clear();
}
inline ::com::android::server::wm::WindowContainerChildProto* WindowContainerProto::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerProto.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowContainerChildProto >*
WindowContainerProto::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.wm.WindowContainerProto.children)
  return &children_;
}
inline const ::com::android::server::wm::WindowContainerChildProto& WindowContainerProto::children(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerProto.children)
  return children_.Get(index);
}
inline ::com::android::server::wm::WindowContainerChildProto* WindowContainerProto::add_children() {
  // @@protoc_insertion_point(field_add:com.android.server.wm.WindowContainerProto.children)
  return children_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::wm::WindowContainerChildProto >&
WindowContainerProto::children() const {
  // @@protoc_insertion_point(field_list:com.android.server.wm.WindowContainerProto.children)
  return children_;
}

// optional .com.android.server.wm.IdentifierProto identifier = 6;
inline bool WindowContainerProto::has_identifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowContainerProto::clear_identifier() {
  if (identifier_ != nullptr) identifier_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::wm::IdentifierProto& WindowContainerProto::identifier() const {
  const ::com::android::server::wm::IdentifierProto* p = identifier_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerProto.identifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::IdentifierProto*>(
      &::com::android::server::wm::_IdentifierProto_default_instance_);
}
inline ::com::android::server::wm::IdentifierProto* WindowContainerProto::release_identifier() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerProto.identifier)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::wm::IdentifierProto* temp = identifier_;
  identifier_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::IdentifierProto* WindowContainerProto::mutable_identifier() {
  _has_bits_[0] |= 0x00000004u;
  if (identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::IdentifierProto>(GetArenaNoVirtual());
    identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerProto.identifier)
  return identifier_;
}
inline void WindowContainerProto::set_allocated_identifier(::com::android::server::wm::IdentifierProto* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete identifier_;
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerProto.identifier)
}

// optional .android.view.SurfaceControlProto surface_control = 7;
inline bool WindowContainerProto::has_surface_control() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::view::SurfaceControlProto& WindowContainerProto::surface_control() const {
  const ::android::view::SurfaceControlProto* p = surface_control_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerProto.surface_control)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::SurfaceControlProto*>(
      &::android::view::_SurfaceControlProto_default_instance_);
}
inline ::android::view::SurfaceControlProto* WindowContainerProto::release_surface_control() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerProto.surface_control)
  _has_bits_[0] &= ~0x00000008u;
  ::android::view::SurfaceControlProto* temp = surface_control_;
  surface_control_ = nullptr;
  return temp;
}
inline ::android::view::SurfaceControlProto* WindowContainerProto::mutable_surface_control() {
  _has_bits_[0] |= 0x00000008u;
  if (surface_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::SurfaceControlProto>(GetArenaNoVirtual());
    surface_control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerProto.surface_control)
  return surface_control_;
}
inline void WindowContainerProto::set_allocated_surface_control(::android::view::SurfaceControlProto* surface_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surface_control_);
  }
  if (surface_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_control, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  surface_control_ = surface_control;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerProto.surface_control)
}

// -------------------------------------------------------------------

// WindowContainerChildProto

// optional .com.android.server.wm.WindowContainerProto window_container = 2;
inline bool WindowContainerChildProto::has_window_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowContainerChildProto::clear_window_container() {
  if (window_container_ != nullptr) window_container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::WindowContainerProto& WindowContainerChildProto::window_container() const {
  const ::com::android::server::wm::WindowContainerProto* p = window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowContainerProto*>(
      &::com::android::server::wm::_WindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::WindowContainerProto* WindowContainerChildProto::release_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.window_container)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::WindowContainerProto* temp = window_container_;
  window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowContainerProto* WindowContainerChildProto::mutable_window_container() {
  _has_bits_[0] |= 0x00000001u;
  if (window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowContainerProto>(GetArenaNoVirtual());
    window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.window_container)
  return window_container_;
}
inline void WindowContainerChildProto::set_allocated_window_container(::com::android::server::wm::WindowContainerProto* window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_container_;
  }
  if (window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_container_ = window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.window_container)
}

// optional .com.android.server.wm.DisplayContentProto display_content = 3;
inline bool WindowContainerChildProto::has_display_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowContainerChildProto::clear_display_content() {
  if (display_content_ != nullptr) display_content_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::DisplayContentProto& WindowContainerChildProto::display_content() const {
  const ::com::android::server::wm::DisplayContentProto* p = display_content_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.display_content)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::DisplayContentProto*>(
      &::com::android::server::wm::_DisplayContentProto_default_instance_);
}
inline ::com::android::server::wm::DisplayContentProto* WindowContainerChildProto::release_display_content() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.display_content)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::DisplayContentProto* temp = display_content_;
  display_content_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::DisplayContentProto* WindowContainerChildProto::mutable_display_content() {
  _has_bits_[0] |= 0x00000002u;
  if (display_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::DisplayContentProto>(GetArenaNoVirtual());
    display_content_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.display_content)
  return display_content_;
}
inline void WindowContainerChildProto::set_allocated_display_content(::com::android::server::wm::DisplayContentProto* display_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete display_content_;
  }
  if (display_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_content, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_content_ = display_content;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.display_content)
}

// optional .com.android.server.wm.DisplayAreaProto display_area = 4;
inline bool WindowContainerChildProto::has_display_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowContainerChildProto::clear_display_area() {
  if (display_area_ != nullptr) display_area_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::wm::DisplayAreaProto& WindowContainerChildProto::display_area() const {
  const ::com::android::server::wm::DisplayAreaProto* p = display_area_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.display_area)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::DisplayAreaProto*>(
      &::com::android::server::wm::_DisplayAreaProto_default_instance_);
}
inline ::com::android::server::wm::DisplayAreaProto* WindowContainerChildProto::release_display_area() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.display_area)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::wm::DisplayAreaProto* temp = display_area_;
  display_area_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::DisplayAreaProto* WindowContainerChildProto::mutable_display_area() {
  _has_bits_[0] |= 0x00000004u;
  if (display_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::DisplayAreaProto>(GetArenaNoVirtual());
    display_area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.display_area)
  return display_area_;
}
inline void WindowContainerChildProto::set_allocated_display_area(::com::android::server::wm::DisplayAreaProto* display_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete display_area_;
  }
  if (display_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  display_area_ = display_area;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.display_area)
}

// optional .com.android.server.wm.TaskProto task = 5;
inline bool WindowContainerChildProto::has_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowContainerChildProto::clear_task() {
  if (task_ != nullptr) task_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::wm::TaskProto& WindowContainerChildProto::task() const {
  const ::com::android::server::wm::TaskProto* p = task_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::TaskProto*>(
      &::com::android::server::wm::_TaskProto_default_instance_);
}
inline ::com::android::server::wm::TaskProto* WindowContainerChildProto::release_task() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.task)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::wm::TaskProto* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::TaskProto* WindowContainerChildProto::mutable_task() {
  _has_bits_[0] |= 0x00000008u;
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::TaskProto>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.task)
  return task_;
}
inline void WindowContainerChildProto::set_allocated_task(::com::android::server::wm::TaskProto* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.task)
}

// optional .com.android.server.wm.ActivityRecordProto activity = 6;
inline bool WindowContainerChildProto::has_activity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowContainerChildProto::clear_activity() {
  if (activity_ != nullptr) activity_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::wm::ActivityRecordProto& WindowContainerChildProto::activity() const {
  const ::com::android::server::wm::ActivityRecordProto* p = activity_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.activity)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::ActivityRecordProto*>(
      &::com::android::server::wm::_ActivityRecordProto_default_instance_);
}
inline ::com::android::server::wm::ActivityRecordProto* WindowContainerChildProto::release_activity() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.activity)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::wm::ActivityRecordProto* temp = activity_;
  activity_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::ActivityRecordProto* WindowContainerChildProto::mutable_activity() {
  _has_bits_[0] |= 0x00000010u;
  if (activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::ActivityRecordProto>(GetArenaNoVirtual());
    activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.activity)
  return activity_;
}
inline void WindowContainerChildProto::set_allocated_activity(::com::android::server::wm::ActivityRecordProto* activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activity_;
  }
  if (activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  activity_ = activity;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.activity)
}

// optional .com.android.server.wm.WindowTokenProto window_token = 7;
inline bool WindowContainerChildProto::has_window_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowContainerChildProto::clear_window_token() {
  if (window_token_ != nullptr) window_token_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::wm::WindowTokenProto& WindowContainerChildProto::window_token() const {
  const ::com::android::server::wm::WindowTokenProto* p = window_token_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.window_token)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowTokenProto*>(
      &::com::android::server::wm::_WindowTokenProto_default_instance_);
}
inline ::com::android::server::wm::WindowTokenProto* WindowContainerChildProto::release_window_token() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.window_token)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::wm::WindowTokenProto* temp = window_token_;
  window_token_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowTokenProto* WindowContainerChildProto::mutable_window_token() {
  _has_bits_[0] |= 0x00000020u;
  if (window_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowTokenProto>(GetArenaNoVirtual());
    window_token_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.window_token)
  return window_token_;
}
inline void WindowContainerChildProto::set_allocated_window_token(::com::android::server::wm::WindowTokenProto* window_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_token_;
  }
  if (window_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  window_token_ = window_token;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.window_token)
}

// optional .com.android.server.wm.WindowStateProto window = 8;
inline bool WindowContainerChildProto::has_window() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowContainerChildProto::clear_window() {
  if (window_ != nullptr) window_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::wm::WindowStateProto& WindowContainerChildProto::window() const {
  const ::com::android::server::wm::WindowStateProto* p = window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* WindowContainerChildProto::release_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.window)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::wm::WindowStateProto* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* WindowContainerChildProto::mutable_window() {
  _has_bits_[0] |= 0x00000040u;
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.window)
  return window_;
}
inline void WindowContainerChildProto::set_allocated_window(::com::android::server::wm::WindowStateProto* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.window)
}

// optional .com.android.server.wm.TaskFragmentProto task_fragment = 9;
inline bool WindowContainerChildProto::has_task_fragment() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowContainerChildProto::clear_task_fragment() {
  if (task_fragment_ != nullptr) task_fragment_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::com::android::server::wm::TaskFragmentProto& WindowContainerChildProto::task_fragment() const {
  const ::com::android::server::wm::TaskFragmentProto* p = task_fragment_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerChildProto.task_fragment)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::TaskFragmentProto*>(
      &::com::android::server::wm::_TaskFragmentProto_default_instance_);
}
inline ::com::android::server::wm::TaskFragmentProto* WindowContainerChildProto::release_task_fragment() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerChildProto.task_fragment)
  _has_bits_[0] &= ~0x00000080u;
  ::com::android::server::wm::TaskFragmentProto* temp = task_fragment_;
  task_fragment_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::TaskFragmentProto* WindowContainerChildProto::mutable_task_fragment() {
  _has_bits_[0] |= 0x00000080u;
  if (task_fragment_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::TaskFragmentProto>(GetArenaNoVirtual());
    task_fragment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerChildProto.task_fragment)
  return task_fragment_;
}
inline void WindowContainerChildProto::set_allocated_task_fragment(::com::android::server::wm::TaskFragmentProto* task_fragment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_fragment_;
  }
  if (task_fragment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_fragment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_fragment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  task_fragment_ = task_fragment;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerChildProto.task_fragment)
}

// -------------------------------------------------------------------

// ConfigurationContainerProto

// optional .android.content.ConfigurationProto override_configuration = 1;
inline bool ConfigurationContainerProto::has_override_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ConfigurationProto& ConfigurationContainerProto::override_configuration() const {
  const ::android::content::ConfigurationProto* p = override_configuration_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ConfigurationContainerProto.override_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ConfigurationProto*>(
      &::android::content::_ConfigurationProto_default_instance_);
}
inline ::android::content::ConfigurationProto* ConfigurationContainerProto::release_override_configuration() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ConfigurationContainerProto.override_configuration)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ConfigurationProto* temp = override_configuration_;
  override_configuration_ = nullptr;
  return temp;
}
inline ::android::content::ConfigurationProto* ConfigurationContainerProto::mutable_override_configuration() {
  _has_bits_[0] |= 0x00000001u;
  if (override_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ConfigurationProto>(GetArenaNoVirtual());
    override_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ConfigurationContainerProto.override_configuration)
  return override_configuration_;
}
inline void ConfigurationContainerProto::set_allocated_override_configuration(::android::content::ConfigurationProto* override_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_configuration_);
  }
  if (override_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      override_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  override_configuration_ = override_configuration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ConfigurationContainerProto.override_configuration)
}

// optional .android.content.ConfigurationProto full_configuration = 2;
inline bool ConfigurationContainerProto::has_full_configuration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::ConfigurationProto& ConfigurationContainerProto::full_configuration() const {
  const ::android::content::ConfigurationProto* p = full_configuration_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ConfigurationContainerProto.full_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ConfigurationProto*>(
      &::android::content::_ConfigurationProto_default_instance_);
}
inline ::android::content::ConfigurationProto* ConfigurationContainerProto::release_full_configuration() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ConfigurationContainerProto.full_configuration)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ConfigurationProto* temp = full_configuration_;
  full_configuration_ = nullptr;
  return temp;
}
inline ::android::content::ConfigurationProto* ConfigurationContainerProto::mutable_full_configuration() {
  _has_bits_[0] |= 0x00000002u;
  if (full_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ConfigurationProto>(GetArenaNoVirtual());
    full_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ConfigurationContainerProto.full_configuration)
  return full_configuration_;
}
inline void ConfigurationContainerProto::set_allocated_full_configuration(::android::content::ConfigurationProto* full_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_configuration_);
  }
  if (full_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  full_configuration_ = full_configuration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ConfigurationContainerProto.full_configuration)
}

// optional .android.content.ConfigurationProto merged_override_configuration = 3;
inline bool ConfigurationContainerProto::has_merged_override_configuration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::content::ConfigurationProto& ConfigurationContainerProto::merged_override_configuration() const {
  const ::android::content::ConfigurationProto* p = merged_override_configuration_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ConfigurationContainerProto.merged_override_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ConfigurationProto*>(
      &::android::content::_ConfigurationProto_default_instance_);
}
inline ::android::content::ConfigurationProto* ConfigurationContainerProto::release_merged_override_configuration() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ConfigurationContainerProto.merged_override_configuration)
  _has_bits_[0] &= ~0x00000004u;
  ::android::content::ConfigurationProto* temp = merged_override_configuration_;
  merged_override_configuration_ = nullptr;
  return temp;
}
inline ::android::content::ConfigurationProto* ConfigurationContainerProto::mutable_merged_override_configuration() {
  _has_bits_[0] |= 0x00000004u;
  if (merged_override_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ConfigurationProto>(GetArenaNoVirtual());
    merged_override_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ConfigurationContainerProto.merged_override_configuration)
  return merged_override_configuration_;
}
inline void ConfigurationContainerProto::set_allocated_merged_override_configuration(::android::content::ConfigurationProto* merged_override_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(merged_override_configuration_);
  }
  if (merged_override_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      merged_override_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merged_override_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  merged_override_configuration_ = merged_override_configuration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ConfigurationContainerProto.merged_override_configuration)
}

// -------------------------------------------------------------------

// WindowFramesProto

// optional .android.graphics.RectProto containing_frame = 1;
inline bool WindowFramesProto::has_containing_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::containing_frame() const {
  const ::android::graphics::RectProto* p = containing_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.containing_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_containing_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.containing_frame)
  _has_bits_[0] &= ~0x00000001u;
  ::android::graphics::RectProto* temp = containing_frame_;
  containing_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_containing_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (containing_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    containing_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.containing_frame)
  return containing_frame_;
}
inline void WindowFramesProto::set_allocated_containing_frame(::android::graphics::RectProto* containing_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(containing_frame_);
  }
  if (containing_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      containing_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, containing_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  containing_frame_ = containing_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.containing_frame)
}

// optional .android.graphics.RectProto content_frame = 2 [deprecated = true];
inline bool WindowFramesProto::has_content_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::content_frame() const {
  const ::android::graphics::RectProto* p = content_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.content_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_content_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.content_frame)
  _has_bits_[0] &= ~0x00000002u;
  ::android::graphics::RectProto* temp = content_frame_;
  content_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_content_frame() {
  _has_bits_[0] |= 0x00000002u;
  if (content_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    content_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.content_frame)
  return content_frame_;
}
inline void WindowFramesProto::set_allocated_content_frame(::android::graphics::RectProto* content_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_frame_);
  }
  if (content_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_frame_ = content_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.content_frame)
}

// optional .android.graphics.RectProto decor_frame = 3 [deprecated = true];
inline bool WindowFramesProto::has_decor_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::decor_frame() const {
  const ::android::graphics::RectProto* p = decor_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.decor_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_decor_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.decor_frame)
  _has_bits_[0] &= ~0x00000004u;
  ::android::graphics::RectProto* temp = decor_frame_;
  decor_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_decor_frame() {
  _has_bits_[0] |= 0x00000004u;
  if (decor_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    decor_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.decor_frame)
  return decor_frame_;
}
inline void WindowFramesProto::set_allocated_decor_frame(::android::graphics::RectProto* decor_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(decor_frame_);
  }
  if (decor_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decor_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decor_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  decor_frame_ = decor_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.decor_frame)
}

// optional .android.graphics.RectProto display_frame = 4;
inline bool WindowFramesProto::has_display_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::display_frame() const {
  const ::android::graphics::RectProto* p = display_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.display_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_display_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.display_frame)
  _has_bits_[0] &= ~0x00000008u;
  ::android::graphics::RectProto* temp = display_frame_;
  display_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_display_frame() {
  _has_bits_[0] |= 0x00000008u;
  if (display_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    display_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.display_frame)
  return display_frame_;
}
inline void WindowFramesProto::set_allocated_display_frame(::android::graphics::RectProto* display_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_frame_);
  }
  if (display_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  display_frame_ = display_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.display_frame)
}

// optional .android.graphics.RectProto frame = 5;
inline bool WindowFramesProto::has_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::frame() const {
  const ::android::graphics::RectProto* p = frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.frame)
  _has_bits_[0] &= ~0x00000010u;
  ::android::graphics::RectProto* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_frame() {
  _has_bits_[0] |= 0x00000010u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.frame)
  return frame_;
}
inline void WindowFramesProto::set_allocated_frame(::android::graphics::RectProto* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.frame)
}

// optional .android.graphics.RectProto outset_frame = 6;
inline bool WindowFramesProto::has_outset_frame() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::outset_frame() const {
  const ::android::graphics::RectProto* p = outset_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.outset_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_outset_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.outset_frame)
  _has_bits_[0] &= ~0x00000020u;
  ::android::graphics::RectProto* temp = outset_frame_;
  outset_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_outset_frame() {
  _has_bits_[0] |= 0x00000020u;
  if (outset_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    outset_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.outset_frame)
  return outset_frame_;
}
inline void WindowFramesProto::set_allocated_outset_frame(::android::graphics::RectProto* outset_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outset_frame_);
  }
  if (outset_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outset_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outset_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  outset_frame_ = outset_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.outset_frame)
}

// optional .android.graphics.RectProto overscan_frame = 7 [deprecated = true];
inline bool WindowFramesProto::has_overscan_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::overscan_frame() const {
  const ::android::graphics::RectProto* p = overscan_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.overscan_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_overscan_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.overscan_frame)
  _has_bits_[0] &= ~0x00000040u;
  ::android::graphics::RectProto* temp = overscan_frame_;
  overscan_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_overscan_frame() {
  _has_bits_[0] |= 0x00000040u;
  if (overscan_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    overscan_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.overscan_frame)
  return overscan_frame_;
}
inline void WindowFramesProto::set_allocated_overscan_frame(::android::graphics::RectProto* overscan_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overscan_frame_);
  }
  if (overscan_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overscan_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overscan_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  overscan_frame_ = overscan_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.overscan_frame)
}

// optional .android.graphics.RectProto parent_frame = 8;
inline bool WindowFramesProto::has_parent_frame() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::parent_frame() const {
  const ::android::graphics::RectProto* p = parent_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.parent_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_parent_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.parent_frame)
  _has_bits_[0] &= ~0x00000080u;
  ::android::graphics::RectProto* temp = parent_frame_;
  parent_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_parent_frame() {
  _has_bits_[0] |= 0x00000080u;
  if (parent_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    parent_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.parent_frame)
  return parent_frame_;
}
inline void WindowFramesProto::set_allocated_parent_frame(::android::graphics::RectProto* parent_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_frame_);
  }
  if (parent_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  parent_frame_ = parent_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.parent_frame)
}

// optional .android.graphics.RectProto visible_frame = 9 [deprecated = true];
inline bool WindowFramesProto::has_visible_frame() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::visible_frame() const {
  const ::android::graphics::RectProto* p = visible_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.visible_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_visible_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.visible_frame)
  _has_bits_[0] &= ~0x00000100u;
  ::android::graphics::RectProto* temp = visible_frame_;
  visible_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_visible_frame() {
  _has_bits_[0] |= 0x00000100u;
  if (visible_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    visible_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.visible_frame)
  return visible_frame_;
}
inline void WindowFramesProto::set_allocated_visible_frame(::android::graphics::RectProto* visible_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_frame_);
  }
  if (visible_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visible_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  visible_frame_ = visible_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.visible_frame)
}

// optional .android.view.DisplayCutoutProto cutout = 10 [deprecated = true];
inline bool WindowFramesProto::has_cutout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::view::DisplayCutoutProto& WindowFramesProto::cutout() const {
  const ::android::view::DisplayCutoutProto* p = cutout_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.cutout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::DisplayCutoutProto*>(
      &::android::view::_DisplayCutoutProto_default_instance_);
}
inline ::android::view::DisplayCutoutProto* WindowFramesProto::release_cutout() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.cutout)
  _has_bits_[0] &= ~0x00000200u;
  ::android::view::DisplayCutoutProto* temp = cutout_;
  cutout_ = nullptr;
  return temp;
}
inline ::android::view::DisplayCutoutProto* WindowFramesProto::mutable_cutout() {
  _has_bits_[0] |= 0x00000200u;
  if (cutout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::DisplayCutoutProto>(GetArenaNoVirtual());
    cutout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.cutout)
  return cutout_;
}
inline void WindowFramesProto::set_allocated_cutout(::android::view::DisplayCutoutProto* cutout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cutout_);
  }
  if (cutout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cutout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cutout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  cutout_ = cutout;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.cutout)
}

// optional .android.graphics.RectProto content_insets = 11 [deprecated = true];
inline bool WindowFramesProto::has_content_insets() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::content_insets() const {
  const ::android::graphics::RectProto* p = content_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.content_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_content_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.content_insets)
  _has_bits_[0] &= ~0x00000400u;
  ::android::graphics::RectProto* temp = content_insets_;
  content_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_content_insets() {
  _has_bits_[0] |= 0x00000400u;
  if (content_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    content_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.content_insets)
  return content_insets_;
}
inline void WindowFramesProto::set_allocated_content_insets(::android::graphics::RectProto* content_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_insets_);
  }
  if (content_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  content_insets_ = content_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.content_insets)
}

// optional .android.graphics.RectProto overscan_insets = 12 [deprecated = true];
inline bool WindowFramesProto::has_overscan_insets() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::overscan_insets() const {
  const ::android::graphics::RectProto* p = overscan_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.overscan_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_overscan_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.overscan_insets)
  _has_bits_[0] &= ~0x00000800u;
  ::android::graphics::RectProto* temp = overscan_insets_;
  overscan_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_overscan_insets() {
  _has_bits_[0] |= 0x00000800u;
  if (overscan_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    overscan_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.overscan_insets)
  return overscan_insets_;
}
inline void WindowFramesProto::set_allocated_overscan_insets(::android::graphics::RectProto* overscan_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overscan_insets_);
  }
  if (overscan_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overscan_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overscan_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  overscan_insets_ = overscan_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.overscan_insets)
}

// optional .android.graphics.RectProto visible_insets = 13 [deprecated = true];
inline bool WindowFramesProto::has_visible_insets() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::visible_insets() const {
  const ::android::graphics::RectProto* p = visible_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.visible_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_visible_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.visible_insets)
  _has_bits_[0] &= ~0x00001000u;
  ::android::graphics::RectProto* temp = visible_insets_;
  visible_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_visible_insets() {
  _has_bits_[0] |= 0x00001000u;
  if (visible_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    visible_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.visible_insets)
  return visible_insets_;
}
inline void WindowFramesProto::set_allocated_visible_insets(::android::graphics::RectProto* visible_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_insets_);
  }
  if (visible_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visible_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  visible_insets_ = visible_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.visible_insets)
}

// optional .android.graphics.RectProto stable_insets = 14 [deprecated = true];
inline bool WindowFramesProto::has_stable_insets() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::stable_insets() const {
  const ::android::graphics::RectProto* p = stable_insets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.stable_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_stable_insets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.stable_insets)
  _has_bits_[0] &= ~0x00002000u;
  ::android::graphics::RectProto* temp = stable_insets_;
  stable_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_stable_insets() {
  _has_bits_[0] |= 0x00002000u;
  if (stable_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    stable_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.stable_insets)
  return stable_insets_;
}
inline void WindowFramesProto::set_allocated_stable_insets(::android::graphics::RectProto* stable_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stable_insets_);
  }
  if (stable_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stable_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stable_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  stable_insets_ = stable_insets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.stable_insets)
}

// optional .android.graphics.RectProto outsets = 15;
inline bool WindowFramesProto::has_outsets() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::outsets() const {
  const ::android::graphics::RectProto* p = outsets_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.outsets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_outsets() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.outsets)
  _has_bits_[0] &= ~0x00004000u;
  ::android::graphics::RectProto* temp = outsets_;
  outsets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_outsets() {
  _has_bits_[0] |= 0x00004000u;
  if (outsets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    outsets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.outsets)
  return outsets_;
}
inline void WindowFramesProto::set_allocated_outsets(::android::graphics::RectProto* outsets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outsets_);
  }
  if (outsets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outsets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outsets, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  outsets_ = outsets;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.outsets)
}

// optional .android.graphics.RectProto compat_frame = 16;
inline bool WindowFramesProto::has_compat_frame() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::graphics::RectProto& WindowFramesProto::compat_frame() const {
  const ::android::graphics::RectProto* p = compat_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowFramesProto.compat_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* WindowFramesProto::release_compat_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowFramesProto.compat_frame)
  _has_bits_[0] &= ~0x00008000u;
  ::android::graphics::RectProto* temp = compat_frame_;
  compat_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* WindowFramesProto::mutable_compat_frame() {
  _has_bits_[0] |= 0x00008000u;
  if (compat_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    compat_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowFramesProto.compat_frame)
  return compat_frame_;
}
inline void WindowFramesProto::set_allocated_compat_frame(::android::graphics::RectProto* compat_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compat_frame_);
  }
  if (compat_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compat_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compat_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  compat_frame_ = compat_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowFramesProto.compat_frame)
}

// -------------------------------------------------------------------

// InsetsSourceProviderProto

// optional .android.view.InsetsSourceProto source = 1;
inline bool InsetsSourceProviderProto::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::view::InsetsSourceProto& InsetsSourceProviderProto::source() const {
  const ::android::view::InsetsSourceProto* p = source_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::InsetsSourceProto*>(
      &::android::view::_InsetsSourceProto_default_instance_);
}
inline ::android::view::InsetsSourceProto* InsetsSourceProviderProto::release_source() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.source)
  _has_bits_[0] &= ~0x00000001u;
  ::android::view::InsetsSourceProto* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::android::view::InsetsSourceProto* InsetsSourceProviderProto::mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::InsetsSourceProto>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.source)
  return source_;
}
inline void InsetsSourceProviderProto::set_allocated_source(::android::view::InsetsSourceProto* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.source)
}

// optional .android.graphics.RectProto frame = 2;
inline bool InsetsSourceProviderProto::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::graphics::RectProto& InsetsSourceProviderProto::frame() const {
  const ::android::graphics::RectProto* p = frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* InsetsSourceProviderProto::release_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.frame)
  _has_bits_[0] &= ~0x00000002u;
  ::android::graphics::RectProto* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* InsetsSourceProviderProto::mutable_frame() {
  _has_bits_[0] |= 0x00000002u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.frame)
  return frame_;
}
inline void InsetsSourceProviderProto::set_allocated_frame(::android::graphics::RectProto* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.frame)
}

// optional .android.view.InsetsSourceControlProto fake_control = 3;
inline bool InsetsSourceProviderProto::has_fake_control() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::view::InsetsSourceControlProto& InsetsSourceProviderProto::fake_control() const {
  const ::android::view::InsetsSourceControlProto* p = fake_control_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.fake_control)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::InsetsSourceControlProto*>(
      &::android::view::_InsetsSourceControlProto_default_instance_);
}
inline ::android::view::InsetsSourceControlProto* InsetsSourceProviderProto::release_fake_control() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.fake_control)
  _has_bits_[0] &= ~0x00000004u;
  ::android::view::InsetsSourceControlProto* temp = fake_control_;
  fake_control_ = nullptr;
  return temp;
}
inline ::android::view::InsetsSourceControlProto* InsetsSourceProviderProto::mutable_fake_control() {
  _has_bits_[0] |= 0x00000004u;
  if (fake_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::InsetsSourceControlProto>(GetArenaNoVirtual());
    fake_control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.fake_control)
  return fake_control_;
}
inline void InsetsSourceProviderProto::set_allocated_fake_control(::android::view::InsetsSourceControlProto* fake_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fake_control_);
  }
  if (fake_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fake_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fake_control, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fake_control_ = fake_control;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.fake_control)
}

// optional .android.view.InsetsSourceControlProto control = 4;
inline bool InsetsSourceProviderProto::has_control() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::view::InsetsSourceControlProto& InsetsSourceProviderProto::control() const {
  const ::android::view::InsetsSourceControlProto* p = control_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.control)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::InsetsSourceControlProto*>(
      &::android::view::_InsetsSourceControlProto_default_instance_);
}
inline ::android::view::InsetsSourceControlProto* InsetsSourceProviderProto::release_control() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.control)
  _has_bits_[0] &= ~0x00000008u;
  ::android::view::InsetsSourceControlProto* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::android::view::InsetsSourceControlProto* InsetsSourceProviderProto::mutable_control() {
  _has_bits_[0] |= 0x00000008u;
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::InsetsSourceControlProto>(GetArenaNoVirtual());
    control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.control)
  return control_;
}
inline void InsetsSourceProviderProto::set_allocated_control(::android::view::InsetsSourceControlProto* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.control)
}

// optional .com.android.server.wm.WindowStateProto control_target = 5;
inline bool InsetsSourceProviderProto::has_control_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InsetsSourceProviderProto::clear_control_target() {
  if (control_target_ != nullptr) control_target_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::wm::WindowStateProto& InsetsSourceProviderProto::control_target() const {
  const ::com::android::server::wm::WindowStateProto* p = control_target_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.control_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* InsetsSourceProviderProto::release_control_target() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.control_target)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::wm::WindowStateProto* temp = control_target_;
  control_target_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* InsetsSourceProviderProto::mutable_control_target() {
  _has_bits_[0] |= 0x00000010u;
  if (control_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    control_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.control_target)
  return control_target_;
}
inline void InsetsSourceProviderProto::set_allocated_control_target(::com::android::server::wm::WindowStateProto* control_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_target_;
  }
  if (control_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  control_target_ = control_target;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.control_target)
}

// optional .com.android.server.wm.WindowStateProto pending_control_target = 6;
inline bool InsetsSourceProviderProto::has_pending_control_target() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InsetsSourceProviderProto::clear_pending_control_target() {
  if (pending_control_target_ != nullptr) pending_control_target_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::wm::WindowStateProto& InsetsSourceProviderProto::pending_control_target() const {
  const ::com::android::server::wm::WindowStateProto* p = pending_control_target_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.pending_control_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* InsetsSourceProviderProto::release_pending_control_target() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.pending_control_target)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::wm::WindowStateProto* temp = pending_control_target_;
  pending_control_target_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* InsetsSourceProviderProto::mutable_pending_control_target() {
  _has_bits_[0] |= 0x00000020u;
  if (pending_control_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    pending_control_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.pending_control_target)
  return pending_control_target_;
}
inline void InsetsSourceProviderProto::set_allocated_pending_control_target(::com::android::server::wm::WindowStateProto* pending_control_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pending_control_target_;
  }
  if (pending_control_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_control_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_control_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pending_control_target_ = pending_control_target;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.pending_control_target)
}

// optional .com.android.server.wm.WindowStateProto fake_control_target = 7;
inline bool InsetsSourceProviderProto::has_fake_control_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InsetsSourceProviderProto::clear_fake_control_target() {
  if (fake_control_target_ != nullptr) fake_control_target_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::wm::WindowStateProto& InsetsSourceProviderProto::fake_control_target() const {
  const ::com::android::server::wm::WindowStateProto* p = fake_control_target_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.fake_control_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* InsetsSourceProviderProto::release_fake_control_target() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.fake_control_target)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::wm::WindowStateProto* temp = fake_control_target_;
  fake_control_target_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* InsetsSourceProviderProto::mutable_fake_control_target() {
  _has_bits_[0] |= 0x00000040u;
  if (fake_control_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    fake_control_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.fake_control_target)
  return fake_control_target_;
}
inline void InsetsSourceProviderProto::set_allocated_fake_control_target(::com::android::server::wm::WindowStateProto* fake_control_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fake_control_target_;
  }
  if (fake_control_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fake_control_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fake_control_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  fake_control_target_ = fake_control_target;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.fake_control_target)
}

// optional .android.view.SurfaceControlProto captured_leash = 8;
inline bool InsetsSourceProviderProto::has_captured_leash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::view::SurfaceControlProto& InsetsSourceProviderProto::captured_leash() const {
  const ::android::view::SurfaceControlProto* p = captured_leash_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.captured_leash)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::SurfaceControlProto*>(
      &::android::view::_SurfaceControlProto_default_instance_);
}
inline ::android::view::SurfaceControlProto* InsetsSourceProviderProto::release_captured_leash() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.captured_leash)
  _has_bits_[0] &= ~0x00000080u;
  ::android::view::SurfaceControlProto* temp = captured_leash_;
  captured_leash_ = nullptr;
  return temp;
}
inline ::android::view::SurfaceControlProto* InsetsSourceProviderProto::mutable_captured_leash() {
  _has_bits_[0] |= 0x00000080u;
  if (captured_leash_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::SurfaceControlProto>(GetArenaNoVirtual());
    captured_leash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.captured_leash)
  return captured_leash_;
}
inline void InsetsSourceProviderProto::set_allocated_captured_leash(::android::view::SurfaceControlProto* captured_leash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captured_leash_);
  }
  if (captured_leash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captured_leash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captured_leash, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  captured_leash_ = captured_leash;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.captured_leash)
}

// optional .android.graphics.RectProto ime_overridden_frame = 9;
inline bool InsetsSourceProviderProto::has_ime_overridden_frame() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::graphics::RectProto& InsetsSourceProviderProto::ime_overridden_frame() const {
  const ::android::graphics::RectProto* p = ime_overridden_frame_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.ime_overridden_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* InsetsSourceProviderProto::release_ime_overridden_frame() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.InsetsSourceProviderProto.ime_overridden_frame)
  _has_bits_[0] &= ~0x00000100u;
  ::android::graphics::RectProto* temp = ime_overridden_frame_;
  ime_overridden_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* InsetsSourceProviderProto::mutable_ime_overridden_frame() {
  _has_bits_[0] |= 0x00000100u;
  if (ime_overridden_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    ime_overridden_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.InsetsSourceProviderProto.ime_overridden_frame)
  return ime_overridden_frame_;
}
inline void InsetsSourceProviderProto::set_allocated_ime_overridden_frame(::android::graphics::RectProto* ime_overridden_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ime_overridden_frame_);
  }
  if (ime_overridden_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ime_overridden_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ime_overridden_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ime_overridden_frame_ = ime_overridden_frame;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.InsetsSourceProviderProto.ime_overridden_frame)
}

// optional bool is_leash_ready_for_dispatching = 10;
inline bool InsetsSourceProviderProto::has_is_leash_ready_for_dispatching() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InsetsSourceProviderProto::clear_is_leash_ready_for_dispatching() {
  is_leash_ready_for_dispatching_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool InsetsSourceProviderProto::is_leash_ready_for_dispatching() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.is_leash_ready_for_dispatching)
  return is_leash_ready_for_dispatching_;
}
inline void InsetsSourceProviderProto::set_is_leash_ready_for_dispatching(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_leash_ready_for_dispatching_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.InsetsSourceProviderProto.is_leash_ready_for_dispatching)
}

// optional bool client_visible = 11;
inline bool InsetsSourceProviderProto::has_client_visible() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InsetsSourceProviderProto::clear_client_visible() {
  client_visible_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool InsetsSourceProviderProto::client_visible() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.client_visible)
  return client_visible_;
}
inline void InsetsSourceProviderProto::set_client_visible(bool value) {
  _has_bits_[0] |= 0x00000400u;
  client_visible_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.InsetsSourceProviderProto.client_visible)
}

// optional bool server_visible = 12;
inline bool InsetsSourceProviderProto::has_server_visible() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InsetsSourceProviderProto::clear_server_visible() {
  server_visible_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool InsetsSourceProviderProto::server_visible() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.server_visible)
  return server_visible_;
}
inline void InsetsSourceProviderProto::set_server_visible(bool value) {
  _has_bits_[0] |= 0x00000800u;
  server_visible_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.InsetsSourceProviderProto.server_visible)
}

// optional bool seamless_rotating = 13;
inline bool InsetsSourceProviderProto::has_seamless_rotating() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InsetsSourceProviderProto::clear_seamless_rotating() {
  seamless_rotating_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool InsetsSourceProviderProto::seamless_rotating() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.seamless_rotating)
  return seamless_rotating_;
}
inline void InsetsSourceProviderProto::set_seamless_rotating(bool value) {
  _has_bits_[0] |= 0x00001000u;
  seamless_rotating_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.InsetsSourceProviderProto.seamless_rotating)
}

// optional int64 finish_seamless_rotate_frame_number = 14;
inline bool InsetsSourceProviderProto::has_finish_seamless_rotate_frame_number() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InsetsSourceProviderProto::clear_finish_seamless_rotate_frame_number() {
  finish_seamless_rotate_frame_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsetsSourceProviderProto::finish_seamless_rotate_frame_number() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.finish_seamless_rotate_frame_number)
  return finish_seamless_rotate_frame_number_;
}
inline void InsetsSourceProviderProto::set_finish_seamless_rotate_frame_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  finish_seamless_rotate_frame_number_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.InsetsSourceProviderProto.finish_seamless_rotate_frame_number)
}

// optional bool controllable = 15;
inline bool InsetsSourceProviderProto::has_controllable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InsetsSourceProviderProto::clear_controllable() {
  controllable_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool InsetsSourceProviderProto::controllable() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.InsetsSourceProviderProto.controllable)
  return controllable_;
}
inline void InsetsSourceProviderProto::set_controllable(bool value) {
  _has_bits_[0] |= 0x00002000u;
  controllable_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.InsetsSourceProviderProto.controllable)
}

// -------------------------------------------------------------------

// ImeInsetsSourceProviderProto

// optional .com.android.server.wm.InsetsSourceProviderProto insets_source_provider = 1;
inline bool ImeInsetsSourceProviderProto::has_insets_source_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImeInsetsSourceProviderProto::clear_insets_source_provider() {
  if (insets_source_provider_ != nullptr) insets_source_provider_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::InsetsSourceProviderProto& ImeInsetsSourceProviderProto::insets_source_provider() const {
  const ::com::android::server::wm::InsetsSourceProviderProto* p = insets_source_provider_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ImeInsetsSourceProviderProto.insets_source_provider)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::InsetsSourceProviderProto*>(
      &::com::android::server::wm::_InsetsSourceProviderProto_default_instance_);
}
inline ::com::android::server::wm::InsetsSourceProviderProto* ImeInsetsSourceProviderProto::release_insets_source_provider() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ImeInsetsSourceProviderProto.insets_source_provider)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::InsetsSourceProviderProto* temp = insets_source_provider_;
  insets_source_provider_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::InsetsSourceProviderProto* ImeInsetsSourceProviderProto::mutable_insets_source_provider() {
  _has_bits_[0] |= 0x00000001u;
  if (insets_source_provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::InsetsSourceProviderProto>(GetArenaNoVirtual());
    insets_source_provider_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ImeInsetsSourceProviderProto.insets_source_provider)
  return insets_source_provider_;
}
inline void ImeInsetsSourceProviderProto::set_allocated_insets_source_provider(::com::android::server::wm::InsetsSourceProviderProto* insets_source_provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete insets_source_provider_;
  }
  if (insets_source_provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      insets_source_provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insets_source_provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  insets_source_provider_ = insets_source_provider;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ImeInsetsSourceProviderProto.insets_source_provider)
}

// optional .com.android.server.wm.WindowStateProto ime_target_from_ime = 2;
inline bool ImeInsetsSourceProviderProto::has_ime_target_from_ime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImeInsetsSourceProviderProto::clear_ime_target_from_ime() {
  if (ime_target_from_ime_ != nullptr) ime_target_from_ime_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::WindowStateProto& ImeInsetsSourceProviderProto::ime_target_from_ime() const {
  const ::com::android::server::wm::WindowStateProto* p = ime_target_from_ime_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.ImeInsetsSourceProviderProto.ime_target_from_ime)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowStateProto*>(
      &::com::android::server::wm::_WindowStateProto_default_instance_);
}
inline ::com::android::server::wm::WindowStateProto* ImeInsetsSourceProviderProto::release_ime_target_from_ime() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.ImeInsetsSourceProviderProto.ime_target_from_ime)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::WindowStateProto* temp = ime_target_from_ime_;
  ime_target_from_ime_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowStateProto* ImeInsetsSourceProviderProto::mutable_ime_target_from_ime() {
  _has_bits_[0] |= 0x00000002u;
  if (ime_target_from_ime_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowStateProto>(GetArenaNoVirtual());
    ime_target_from_ime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.ImeInsetsSourceProviderProto.ime_target_from_ime)
  return ime_target_from_ime_;
}
inline void ImeInsetsSourceProviderProto::set_allocated_ime_target_from_ime(::com::android::server::wm::WindowStateProto* ime_target_from_ime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ime_target_from_ime_;
  }
  if (ime_target_from_ime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ime_target_from_ime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ime_target_from_ime, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ime_target_from_ime_ = ime_target_from_ime;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.ImeInsetsSourceProviderProto.ime_target_from_ime)
}

// optional bool is_ime_layout_drawn = 3;
inline bool ImeInsetsSourceProviderProto::has_is_ime_layout_drawn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImeInsetsSourceProviderProto::clear_is_ime_layout_drawn() {
  is_ime_layout_drawn_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ImeInsetsSourceProviderProto::is_ime_layout_drawn() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.ImeInsetsSourceProviderProto.is_ime_layout_drawn)
  return is_ime_layout_drawn_;
}
inline void ImeInsetsSourceProviderProto::set_is_ime_layout_drawn(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_ime_layout_drawn_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.ImeInsetsSourceProviderProto.is_ime_layout_drawn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState>() {
  return ::com::android::server::wm::KeyguardServiceDelegateProto_ScreenState_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState>() {
  return ::com::android::server::wm::KeyguardServiceDelegateProto_InteractiveState_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode>() {
  return ::com::android::server::wm::WindowManagerPolicyProto_UserRotationMode_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::wm::AppTransitionProto_AppState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::wm::AppTransitionProto_AppState>() {
  return ::com::android::server::wm::AppTransitionProto_AppState_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::wm::WindowStateAnimatorProto_DrawState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::wm::WindowStateAnimatorProto_DrawState>() {
  return ::com::android::server::wm::WindowStateAnimatorProto_DrawState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto
