// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/fingerprint.proto

#include "frameworks/base/core/proto/android/server/fingerprint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformanceStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto;
namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace fingerprint {
class FingerprintServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FingerprintServiceDumpProto> _instance;
} _FingerprintServiceDumpProto_default_instance_;
class FingerprintUserStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FingerprintUserStatsProto> _instance;
} _FingerprintUserStatsProto_default_instance_;
class PerformanceStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformanceStatsProto> _instance;
} _PerformanceStatsProto_default_instance_;
}  // namespace fingerprint
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_FingerprintServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::fingerprint::_FingerprintServiceDumpProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FingerprintServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FingerprintServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto}, {
      &scc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base,}};

static void InitDefaultsscc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::fingerprint::_FingerprintUserStatsProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto}, {
      &scc_info_PerformanceStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base,}};

static void InitDefaultsscc_info_PerformanceStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::fingerprint::_PerformanceStatsProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::fingerprint::PerformanceStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformanceStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerformanceStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto, users_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto, num_fingerprints_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto, normal_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto, crypto_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::PerformanceStatsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::PerformanceStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::PerformanceStatsProto, accept_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::PerformanceStatsProto, reject_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::PerformanceStatsProto, acquire_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::PerformanceStatsProto, lockout_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::fingerprint::PerformanceStatsProto, permanent_lockout_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto)},
  { 7, 16, sizeof(::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto)},
  { 20, 30, sizeof(::com::android::server::biometrics::fingerprint::PerformanceStatsProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::fingerprint::_FingerprintServiceDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::fingerprint::_FingerprintUserStatsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::fingerprint::_PerformanceStatsProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;frameworks/base/core/proto/android/ser"
  "ver/fingerprint.proto\022)com.android.serve"
  "r.biometrics.fingerprint\0320frameworks/bas"
  "e/core/proto/android/privacy.proto\"}\n\033Fi"
  "ngerprintServiceDumpProto\022S\n\005users\030\001 \003(\013"
  "2D.com.android.server.biometrics.fingerp"
  "rint.FingerprintUserStatsProto:\t\232\237\325\207\003\003\010\310"
  "\001\"\365\001\n\031FingerprintUserStatsProto\022\017\n\007user_"
  "id\030\001 \001(\005\022\030\n\020num_fingerprints\030\002 \001(\005\022P\n\006no"
  "rmal\030\003 \001(\0132@.com.android.server.biometri"
  "cs.fingerprint.PerformanceStatsProto\022P\n\006"
  "crypto\030\004 \001(\0132@.com.android.server.biomet"
  "rics.fingerprint.PerformanceStatsProto:\t"
  "\232\237\325\207\003\003\010\310\001\"\177\n\025PerformanceStatsProto\022\016\n\006ac"
  "cept\030\001 \001(\005\022\016\n\006reject\030\002 \001(\005\022\017\n\007acquire\030\003 "
  "\001(\005\022\017\n\007lockout\030\004 \001(\005\022\031\n\021permanent_lockou"
  "t\030\005 \001(\005:\t\232\237\325\207\003\003\010\310\001B\033B\027FingerprintService"
  "ProtoP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_deps[1] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_sccs[3] = {
  &scc_info_FingerprintServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base,
  &scc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base,
  &scc_info_PerformanceStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto, "frameworks/base/core/proto/android/server/fingerprint.proto", 687,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto, 3, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace fingerprint {

// ===================================================================

void FingerprintServiceDumpProto::InitAsDefaultInstance() {
}
class FingerprintServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FingerprintServiceDumpProto>()._has_bits_);
};

FingerprintServiceDumpProto::FingerprintServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
}
FingerprintServiceDumpProto::FingerprintServiceDumpProto(const FingerprintServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
}

void FingerprintServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FingerprintServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base);
}

FingerprintServiceDumpProto::~FingerprintServiceDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  SharedDtor();
}

void FingerprintServiceDumpProto::SharedDtor() {
}

void FingerprintServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingerprintServiceDumpProto& FingerprintServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FingerprintServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base);
  return *internal_default_instance();
}


void FingerprintServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FingerprintServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.biometrics.fingerprint.FingerprintUserStatsProto users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FingerprintServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.biometrics.fingerprint.FingerprintUserStatsProto users = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FingerprintServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.fingerprint.FingerprintUserStatsProto users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* FingerprintServiceDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.fingerprint.FingerprintUserStatsProto users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  return target;
}

size_t FingerprintServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.fingerprint.FingerprintUserStatsProto users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingerprintServiceDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FingerprintServiceDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FingerprintServiceDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
    MergeFrom(*source);
  }
}

void FingerprintServiceDumpProto::MergeFrom(const FingerprintServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void FingerprintServiceDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintServiceDumpProto::CopyFrom(const FingerprintServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintServiceDumpProto::IsInitialized() const {
  return true;
}

void FingerprintServiceDumpProto::InternalSwap(FingerprintServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FingerprintServiceDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FingerprintUserStatsProto::InitAsDefaultInstance() {
  ::com::android::server::biometrics::fingerprint::_FingerprintUserStatsProto_default_instance_._instance.get_mutable()->normal_ = const_cast< ::com::android::server::biometrics::fingerprint::PerformanceStatsProto*>(
      ::com::android::server::biometrics::fingerprint::PerformanceStatsProto::internal_default_instance());
  ::com::android::server::biometrics::fingerprint::_FingerprintUserStatsProto_default_instance_._instance.get_mutable()->crypto_ = const_cast< ::com::android::server::biometrics::fingerprint::PerformanceStatsProto*>(
      ::com::android::server::biometrics::fingerprint::PerformanceStatsProto::internal_default_instance());
}
class FingerprintUserStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FingerprintUserStatsProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_fingerprints(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto& normal(const FingerprintUserStatsProto* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto& crypto(const FingerprintUserStatsProto* msg);
  static void set_has_crypto(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto&
FingerprintUserStatsProto::_Internal::normal(const FingerprintUserStatsProto* msg) {
  return *msg->normal_;
}
const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto&
FingerprintUserStatsProto::_Internal::crypto(const FingerprintUserStatsProto* msg) {
  return *msg->crypto_;
}
FingerprintUserStatsProto::FingerprintUserStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
}
FingerprintUserStatsProto::FingerprintUserStatsProto(const FingerprintUserStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_normal()) {
    normal_ = new ::com::android::server::biometrics::fingerprint::PerformanceStatsProto(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  if (from.has_crypto()) {
    crypto_ = new ::com::android::server::biometrics::fingerprint::PerformanceStatsProto(*from.crypto_);
  } else {
    crypto_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_fingerprints_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(num_fingerprints_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
}

void FingerprintUserStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base);
  ::memset(&normal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_fingerprints_) -
      reinterpret_cast<char*>(&normal_)) + sizeof(num_fingerprints_));
}

FingerprintUserStatsProto::~FingerprintUserStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  SharedDtor();
}

void FingerprintUserStatsProto::SharedDtor() {
  if (this != internal_default_instance()) delete normal_;
  if (this != internal_default_instance()) delete crypto_;
}

void FingerprintUserStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingerprintUserStatsProto& FingerprintUserStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FingerprintUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base);
  return *internal_default_instance();
}


void FingerprintUserStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crypto_ != nullptr);
      crypto_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fingerprints_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(num_fingerprints_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FingerprintUserStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_fingerprints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_fingerprints(&has_bits);
          num_fingerprints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto crypto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_crypto(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FingerprintUserStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_fingerprints = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_fingerprints(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_fingerprints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto normal = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto crypto = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FingerprintUserStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional int32 num_fingerprints = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_fingerprints(), output);
  }

  // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto normal = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::normal(this), output);
  }

  // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto crypto = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::crypto(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* FingerprintUserStatsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // optional int32 num_fingerprints = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_fingerprints(), target);
  }

  // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto normal = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::normal(this), target);
  }

  // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto crypto = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::crypto(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  return target;
}

size_t FingerprintUserStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto normal = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto crypto = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypto_);
    }

    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 num_fingerprints = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_fingerprints());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingerprintUserStatsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FingerprintUserStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FingerprintUserStatsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
    MergeFrom(*source);
  }
}

void FingerprintUserStatsProto::MergeFrom(const FingerprintUserStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_normal()->::com::android::server::biometrics::fingerprint::PerformanceStatsProto::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_crypto()->::com::android::server::biometrics::fingerprint::PerformanceStatsProto::MergeFrom(from.crypto());
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_fingerprints_ = from.num_fingerprints_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FingerprintUserStatsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintUserStatsProto::CopyFrom(const FingerprintUserStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintUserStatsProto::IsInitialized() const {
  return true;
}

void FingerprintUserStatsProto::InternalSwap(FingerprintUserStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(normal_, other->normal_);
  swap(crypto_, other->crypto_);
  swap(user_id_, other->user_id_);
  swap(num_fingerprints_, other->num_fingerprints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FingerprintUserStatsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PerformanceStatsProto::InitAsDefaultInstance() {
}
class PerformanceStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformanceStatsProto>()._has_bits_);
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acquire(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lockout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_permanent_lockout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PerformanceStatsProto::PerformanceStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
}
PerformanceStatsProto::PerformanceStatsProto(const PerformanceStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accept_, &from.accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&permanent_lockout_) -
    reinterpret_cast<char*>(&accept_)) + sizeof(permanent_lockout_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
}

void PerformanceStatsProto::SharedCtor() {
  ::memset(&accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permanent_lockout_) -
      reinterpret_cast<char*>(&accept_)) + sizeof(permanent_lockout_));
}

PerformanceStatsProto::~PerformanceStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  SharedDtor();
}

void PerformanceStatsProto::SharedDtor() {
}

void PerformanceStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformanceStatsProto& PerformanceStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformanceStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto.base);
  return *internal_default_instance();
}


void PerformanceStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&accept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permanent_lockout_) -
        reinterpret_cast<char*>(&accept_)) + sizeof(permanent_lockout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerformanceStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reject(&has_bits);
          reject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acquire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_acquire(&has_bits);
          acquire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lockout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lockout(&has_bits);
          lockout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 permanent_lockout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_permanent_lockout(&has_bits);
          permanent_lockout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerformanceStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 accept = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_accept(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reject = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_reject(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acquire = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_acquire(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &acquire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lockout = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_lockout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 permanent_lockout = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_permanent_lockout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &permanent_lockout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerformanceStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 accept = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->accept(), output);
  }

  // optional int32 reject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->reject(), output);
  }

  // optional int32 acquire = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->acquire(), output);
  }

  // optional int32 lockout = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->lockout(), output);
  }

  // optional int32 permanent_lockout = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->permanent_lockout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformanceStatsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 accept = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->accept(), target);
  }

  // optional int32 reject = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->reject(), target);
  }

  // optional int32 acquire = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->acquire(), target);
  }

  // optional int32 lockout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->lockout(), target);
  }

  // optional int32 permanent_lockout = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->permanent_lockout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  return target;
}

size_t PerformanceStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 accept = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->accept());
    }

    // optional int32 reject = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->reject());
    }

    // optional int32 acquire = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->acquire());
    }

    // optional int32 lockout = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lockout());
    }

    // optional int32 permanent_lockout = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->permanent_lockout());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformanceStatsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformanceStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerformanceStatsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
    MergeFrom(*source);
  }
}

void PerformanceStatsProto::MergeFrom(const PerformanceStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000002u) {
      reject_ = from.reject_;
    }
    if (cached_has_bits & 0x00000004u) {
      acquire_ = from.acquire_;
    }
    if (cached_has_bits & 0x00000008u) {
      lockout_ = from.lockout_;
    }
    if (cached_has_bits & 0x00000010u) {
      permanent_lockout_ = from.permanent_lockout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerformanceStatsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformanceStatsProto::CopyFrom(const PerformanceStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceStatsProto::IsInitialized() const {
  return true;
}

void PerformanceStatsProto::InternalSwap(PerformanceStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accept_, other->accept_);
  swap(reject_, other->reject_);
  swap(acquire_, other->acquire_);
  swap(lockout_, other->lockout_);
  swap(permanent_lockout_, other->permanent_lockout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformanceStatsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fingerprint
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::fingerprint::PerformanceStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::fingerprint::PerformanceStatsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
