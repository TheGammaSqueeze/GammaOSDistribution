// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/biometrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
namespace com {
namespace android {
namespace server {
namespace biometrics {
class BiometricSchedulerProto;
class BiometricSchedulerProtoDefaultTypeInternal;
extern BiometricSchedulerProtoDefaultTypeInternal _BiometricSchedulerProto_default_instance_;
class BiometricServiceStateProto;
class BiometricServiceStateProtoDefaultTypeInternal;
extern BiometricServiceStateProtoDefaultTypeInternal _BiometricServiceStateProto_default_instance_;
class SensorServiceStateProto;
class SensorServiceStateProtoDefaultTypeInternal;
extern SensorServiceStateProtoDefaultTypeInternal _SensorServiceStateProto_default_instance_;
class SensorStateProto;
class SensorStateProtoDefaultTypeInternal;
extern SensorStateProtoDefaultTypeInternal _SensorStateProto_default_instance_;
class UserStateProto;
class UserStateProtoDefaultTypeInternal;
extern UserStateProtoDefaultTypeInternal _UserStateProto_default_instance_;
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::biometrics::BiometricSchedulerProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::BiometricSchedulerProto>(Arena*);
template<> ::com::android::server::biometrics::BiometricServiceStateProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::BiometricServiceStateProto>(Arena*);
template<> ::com::android::server::biometrics::SensorServiceStateProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::SensorServiceStateProto>(Arena*);
template<> ::com::android::server::biometrics::SensorStateProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::SensorStateProto>(Arena*);
template<> ::com::android::server::biometrics::UserStateProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::UserStateProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace biometrics {

enum BiometricServiceStateProto_AuthSessionState : int {
  BiometricServiceStateProto_AuthSessionState_STATE_AUTH_IDLE = 0,
  BiometricServiceStateProto_AuthSessionState_STATE_AUTH_CALLED = 1,
  BiometricServiceStateProto_AuthSessionState_STATE_AUTH_STARTED = 2,
  BiometricServiceStateProto_AuthSessionState_STATE_AUTH_STARTED_UI_SHOWING = 3,
  BiometricServiceStateProto_AuthSessionState_STATE_AUTH_PAUSED = 4,
  BiometricServiceStateProto_AuthSessionState_STATE_AUTH_PAUSED_RESUMING = 5,
  BiometricServiceStateProto_AuthSessionState_STATE_AUTH_PENDING_CONFIRM = 6,
  BiometricServiceStateProto_AuthSessionState_STATE_AUTHENTICATED_PENDING_SYSUI = 7,
  BiometricServiceStateProto_AuthSessionState_STATE_ERROR_PENDING_SYSUI = 8,
  BiometricServiceStateProto_AuthSessionState_STATE_SHOWING_DEVICE_CREDENTIAL = 9,
  BiometricServiceStateProto_AuthSessionState_STATE_CLIENT_DIED_CANCELLING = 10
};
bool BiometricServiceStateProto_AuthSessionState_IsValid(int value);
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto_AuthSessionState_AuthSessionState_MIN = BiometricServiceStateProto_AuthSessionState_STATE_AUTH_IDLE;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto_AuthSessionState_AuthSessionState_MAX = BiometricServiceStateProto_AuthSessionState_STATE_CLIENT_DIED_CANCELLING;
constexpr int BiometricServiceStateProto_AuthSessionState_AuthSessionState_ARRAYSIZE = BiometricServiceStateProto_AuthSessionState_AuthSessionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiometricServiceStateProto_AuthSessionState_descriptor();
template<typename T>
inline const std::string& BiometricServiceStateProto_AuthSessionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BiometricServiceStateProto_AuthSessionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BiometricServiceStateProto_AuthSessionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BiometricServiceStateProto_AuthSessionState_descriptor(), enum_t_value);
}
inline bool BiometricServiceStateProto_AuthSessionState_Parse(
    const std::string& name, BiometricServiceStateProto_AuthSessionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BiometricServiceStateProto_AuthSessionState>(
    BiometricServiceStateProto_AuthSessionState_descriptor(), name, value);
}
enum BiometricServiceStateProto_MultiSensorState : int {
  BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_UNKNOWN = 0,
  BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_SWITCHING = 1,
  BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_FACE_SCANNING = 2,
  BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_FP_SCANNING = 3
};
bool BiometricServiceStateProto_MultiSensorState_IsValid(int value);
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto_MultiSensorState_MultiSensorState_MIN = BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_UNKNOWN;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto_MultiSensorState_MultiSensorState_MAX = BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_FP_SCANNING;
constexpr int BiometricServiceStateProto_MultiSensorState_MultiSensorState_ARRAYSIZE = BiometricServiceStateProto_MultiSensorState_MultiSensorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiometricServiceStateProto_MultiSensorState_descriptor();
template<typename T>
inline const std::string& BiometricServiceStateProto_MultiSensorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BiometricServiceStateProto_MultiSensorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BiometricServiceStateProto_MultiSensorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BiometricServiceStateProto_MultiSensorState_descriptor(), enum_t_value);
}
inline bool BiometricServiceStateProto_MultiSensorState_Parse(
    const std::string& name, BiometricServiceStateProto_MultiSensorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BiometricServiceStateProto_MultiSensorState>(
    BiometricServiceStateProto_MultiSensorState_descriptor(), name, value);
}
enum SensorStateProto_Modality : int {
  SensorStateProto_Modality_UNKNOWN = 0,
  SensorStateProto_Modality_FINGERPRINT = 1,
  SensorStateProto_Modality_FACE = 2,
  SensorStateProto_Modality_IRIS = 3
};
bool SensorStateProto_Modality_IsValid(int value);
constexpr SensorStateProto_Modality SensorStateProto_Modality_Modality_MIN = SensorStateProto_Modality_UNKNOWN;
constexpr SensorStateProto_Modality SensorStateProto_Modality_Modality_MAX = SensorStateProto_Modality_IRIS;
constexpr int SensorStateProto_Modality_Modality_ARRAYSIZE = SensorStateProto_Modality_Modality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorStateProto_Modality_descriptor();
template<typename T>
inline const std::string& SensorStateProto_Modality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorStateProto_Modality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorStateProto_Modality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorStateProto_Modality_descriptor(), enum_t_value);
}
inline bool SensorStateProto_Modality_Parse(
    const std::string& name, SensorStateProto_Modality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorStateProto_Modality>(
    SensorStateProto_Modality_descriptor(), name, value);
}
enum SensorStateProto_ModalityFlag : int {
  SensorStateProto_ModalityFlag_FINGERPRINT_UDFPS = 0
};
bool SensorStateProto_ModalityFlag_IsValid(int value);
constexpr SensorStateProto_ModalityFlag SensorStateProto_ModalityFlag_ModalityFlag_MIN = SensorStateProto_ModalityFlag_FINGERPRINT_UDFPS;
constexpr SensorStateProto_ModalityFlag SensorStateProto_ModalityFlag_ModalityFlag_MAX = SensorStateProto_ModalityFlag_FINGERPRINT_UDFPS;
constexpr int SensorStateProto_ModalityFlag_ModalityFlag_ARRAYSIZE = SensorStateProto_ModalityFlag_ModalityFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorStateProto_ModalityFlag_descriptor();
template<typename T>
inline const std::string& SensorStateProto_ModalityFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorStateProto_ModalityFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorStateProto_ModalityFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorStateProto_ModalityFlag_descriptor(), enum_t_value);
}
inline bool SensorStateProto_ModalityFlag_Parse(
    const std::string& name, SensorStateProto_ModalityFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorStateProto_ModalityFlag>(
    SensorStateProto_ModalityFlag_descriptor(), name, value);
}
enum ClientMonitorEnum : int {
  CM_NONE = 0,
  CM_UPDATE_ACTIVE_USER = 1,
  CM_ENROLL = 2,
  CM_AUTHENTICATE = 3,
  CM_REMOVE = 4,
  CM_GET_AUTHENTICATOR_ID = 5,
  CM_ENUMERATE = 6,
  CM_INTERNAL_CLEANUP = 7,
  CM_SET_FEATURE = 8,
  CM_GET_FEATURE = 9,
  CM_GENERATE_CHALLENGE = 10,
  CM_REVOKE_CHALLENGE = 11,
  CM_RESET_LOCKOUT = 12,
  CM_DETECT_INTERACTION = 13,
  CM_INVALIDATION_REQUESTER = 14,
  CM_INVALIDATE = 15,
  CM_STOP_USER = 16,
  CM_START_USER = 17
};
bool ClientMonitorEnum_IsValid(int value);
constexpr ClientMonitorEnum ClientMonitorEnum_MIN = CM_NONE;
constexpr ClientMonitorEnum ClientMonitorEnum_MAX = CM_START_USER;
constexpr int ClientMonitorEnum_ARRAYSIZE = ClientMonitorEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMonitorEnum_descriptor();
template<typename T>
inline const std::string& ClientMonitorEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMonitorEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMonitorEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMonitorEnum_descriptor(), enum_t_value);
}
inline bool ClientMonitorEnum_Parse(
    const std::string& name, ClientMonitorEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMonitorEnum>(
    ClientMonitorEnum_descriptor(), name, value);
}
// ===================================================================

class BiometricServiceStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.BiometricServiceStateProto) */ {
 public:
  BiometricServiceStateProto();
  virtual ~BiometricServiceStateProto();

  BiometricServiceStateProto(const BiometricServiceStateProto& from);
  BiometricServiceStateProto(BiometricServiceStateProto&& from) noexcept
    : BiometricServiceStateProto() {
    *this = ::std::move(from);
  }

  inline BiometricServiceStateProto& operator=(const BiometricServiceStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiometricServiceStateProto& operator=(BiometricServiceStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BiometricServiceStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiometricServiceStateProto* internal_default_instance() {
    return reinterpret_cast<const BiometricServiceStateProto*>(
               &_BiometricServiceStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BiometricServiceStateProto& a, BiometricServiceStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BiometricServiceStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BiometricServiceStateProto* New() const final {
    return CreateMaybeMessage<BiometricServiceStateProto>(nullptr);
  }

  BiometricServiceStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BiometricServiceStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BiometricServiceStateProto& from);
  void MergeFrom(const BiometricServiceStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiometricServiceStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.BiometricServiceStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BiometricServiceStateProto_AuthSessionState AuthSessionState;
  static constexpr AuthSessionState STATE_AUTH_IDLE =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTH_IDLE;
  static constexpr AuthSessionState STATE_AUTH_CALLED =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTH_CALLED;
  static constexpr AuthSessionState STATE_AUTH_STARTED =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTH_STARTED;
  static constexpr AuthSessionState STATE_AUTH_STARTED_UI_SHOWING =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTH_STARTED_UI_SHOWING;
  static constexpr AuthSessionState STATE_AUTH_PAUSED =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTH_PAUSED;
  static constexpr AuthSessionState STATE_AUTH_PAUSED_RESUMING =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTH_PAUSED_RESUMING;
  static constexpr AuthSessionState STATE_AUTH_PENDING_CONFIRM =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTH_PENDING_CONFIRM;
  static constexpr AuthSessionState STATE_AUTHENTICATED_PENDING_SYSUI =
    BiometricServiceStateProto_AuthSessionState_STATE_AUTHENTICATED_PENDING_SYSUI;
  static constexpr AuthSessionState STATE_ERROR_PENDING_SYSUI =
    BiometricServiceStateProto_AuthSessionState_STATE_ERROR_PENDING_SYSUI;
  static constexpr AuthSessionState STATE_SHOWING_DEVICE_CREDENTIAL =
    BiometricServiceStateProto_AuthSessionState_STATE_SHOWING_DEVICE_CREDENTIAL;
  static constexpr AuthSessionState STATE_CLIENT_DIED_CANCELLING =
    BiometricServiceStateProto_AuthSessionState_STATE_CLIENT_DIED_CANCELLING;
  static inline bool AuthSessionState_IsValid(int value) {
    return BiometricServiceStateProto_AuthSessionState_IsValid(value);
  }
  static constexpr AuthSessionState AuthSessionState_MIN =
    BiometricServiceStateProto_AuthSessionState_AuthSessionState_MIN;
  static constexpr AuthSessionState AuthSessionState_MAX =
    BiometricServiceStateProto_AuthSessionState_AuthSessionState_MAX;
  static constexpr int AuthSessionState_ARRAYSIZE =
    BiometricServiceStateProto_AuthSessionState_AuthSessionState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthSessionState_descriptor() {
    return BiometricServiceStateProto_AuthSessionState_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthSessionState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthSessionState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthSessionState_Name.");
    return BiometricServiceStateProto_AuthSessionState_Name(enum_t_value);
  }
  static inline bool AuthSessionState_Parse(const std::string& name,
      AuthSessionState* value) {
    return BiometricServiceStateProto_AuthSessionState_Parse(name, value);
  }

  typedef BiometricServiceStateProto_MultiSensorState MultiSensorState;
  static constexpr MultiSensorState MULTI_SENSOR_STATE_UNKNOWN =
    BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_UNKNOWN;
  static constexpr MultiSensorState MULTI_SENSOR_STATE_SWITCHING =
    BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_SWITCHING;
  static constexpr MultiSensorState MULTI_SENSOR_STATE_FACE_SCANNING =
    BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_FACE_SCANNING;
  static constexpr MultiSensorState MULTI_SENSOR_STATE_FP_SCANNING =
    BiometricServiceStateProto_MultiSensorState_MULTI_SENSOR_STATE_FP_SCANNING;
  static inline bool MultiSensorState_IsValid(int value) {
    return BiometricServiceStateProto_MultiSensorState_IsValid(value);
  }
  static constexpr MultiSensorState MultiSensorState_MIN =
    BiometricServiceStateProto_MultiSensorState_MultiSensorState_MIN;
  static constexpr MultiSensorState MultiSensorState_MAX =
    BiometricServiceStateProto_MultiSensorState_MultiSensorState_MAX;
  static constexpr int MultiSensorState_ARRAYSIZE =
    BiometricServiceStateProto_MultiSensorState_MultiSensorState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MultiSensorState_descriptor() {
    return BiometricServiceStateProto_MultiSensorState_descriptor();
  }
  template<typename T>
  static inline const std::string& MultiSensorState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MultiSensorState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MultiSensorState_Name.");
    return BiometricServiceStateProto_MultiSensorState_Name(enum_t_value);
  }
  static inline bool MultiSensorState_Parse(const std::string& name,
      MultiSensorState* value) {
    return BiometricServiceStateProto_MultiSensorState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSensorServiceStatesFieldNumber = 1,
    kAuthSessionStateFieldNumber = 2,
    kAuthSessionMultiSensorStateFieldNumber = 3,
  };
  // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
  int sensor_service_states_size() const;
  void clear_sensor_service_states();
  ::com::android::server::biometrics::SensorServiceStateProto* mutable_sensor_service_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorServiceStateProto >*
      mutable_sensor_service_states();
  const ::com::android::server::biometrics::SensorServiceStateProto& sensor_service_states(int index) const;
  ::com::android::server::biometrics::SensorServiceStateProto* add_sensor_service_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorServiceStateProto >&
      sensor_service_states() const;

  // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
  bool has_auth_session_state() const;
  void clear_auth_session_state();
  ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState auth_session_state() const;
  void set_auth_session_state(::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState value);

  // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
  bool has_auth_session_multi_sensor_state() const;
  void clear_auth_session_multi_sensor_state();
  ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState auth_session_multi_sensor_state() const;
  void set_auth_session_multi_sensor_state(::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.BiometricServiceStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorServiceStateProto > sensor_service_states_;
  int auth_session_state_;
  int auth_session_multi_sensor_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
};
// -------------------------------------------------------------------

class SensorServiceStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.SensorServiceStateProto) */ {
 public:
  SensorServiceStateProto();
  virtual ~SensorServiceStateProto();

  SensorServiceStateProto(const SensorServiceStateProto& from);
  SensorServiceStateProto(SensorServiceStateProto&& from) noexcept
    : SensorServiceStateProto() {
    *this = ::std::move(from);
  }

  inline SensorServiceStateProto& operator=(const SensorServiceStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorServiceStateProto& operator=(SensorServiceStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorServiceStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorServiceStateProto* internal_default_instance() {
    return reinterpret_cast<const SensorServiceStateProto*>(
               &_SensorServiceStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorServiceStateProto& a, SensorServiceStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorServiceStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorServiceStateProto* New() const final {
    return CreateMaybeMessage<SensorServiceStateProto>(nullptr);
  }

  SensorServiceStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorServiceStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorServiceStateProto& from);
  void MergeFrom(const SensorServiceStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorServiceStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.SensorServiceStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorStatesFieldNumber = 1,
  };
  // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
  int sensor_states_size() const;
  void clear_sensor_states();
  ::com::android::server::biometrics::SensorStateProto* mutable_sensor_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorStateProto >*
      mutable_sensor_states();
  const ::com::android::server::biometrics::SensorStateProto& sensor_states(int index) const;
  ::com::android::server::biometrics::SensorStateProto* add_sensor_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorStateProto >&
      sensor_states() const;

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.SensorServiceStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorStateProto > sensor_states_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
};
// -------------------------------------------------------------------

class SensorStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.SensorStateProto) */ {
 public:
  SensorStateProto();
  virtual ~SensorStateProto();

  SensorStateProto(const SensorStateProto& from);
  SensorStateProto(SensorStateProto&& from) noexcept
    : SensorStateProto() {
    *this = ::std::move(from);
  }

  inline SensorStateProto& operator=(const SensorStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorStateProto& operator=(SensorStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorStateProto* internal_default_instance() {
    return reinterpret_cast<const SensorStateProto*>(
               &_SensorStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorStateProto& a, SensorStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorStateProto* New() const final {
    return CreateMaybeMessage<SensorStateProto>(nullptr);
  }

  SensorStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorStateProto& from);
  void MergeFrom(const SensorStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.SensorStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorStateProto_Modality Modality;
  static constexpr Modality UNKNOWN =
    SensorStateProto_Modality_UNKNOWN;
  static constexpr Modality FINGERPRINT =
    SensorStateProto_Modality_FINGERPRINT;
  static constexpr Modality FACE =
    SensorStateProto_Modality_FACE;
  static constexpr Modality IRIS =
    SensorStateProto_Modality_IRIS;
  static inline bool Modality_IsValid(int value) {
    return SensorStateProto_Modality_IsValid(value);
  }
  static constexpr Modality Modality_MIN =
    SensorStateProto_Modality_Modality_MIN;
  static constexpr Modality Modality_MAX =
    SensorStateProto_Modality_Modality_MAX;
  static constexpr int Modality_ARRAYSIZE =
    SensorStateProto_Modality_Modality_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Modality_descriptor() {
    return SensorStateProto_Modality_descriptor();
  }
  template<typename T>
  static inline const std::string& Modality_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Modality>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Modality_Name.");
    return SensorStateProto_Modality_Name(enum_t_value);
  }
  static inline bool Modality_Parse(const std::string& name,
      Modality* value) {
    return SensorStateProto_Modality_Parse(name, value);
  }

  typedef SensorStateProto_ModalityFlag ModalityFlag;
  static constexpr ModalityFlag FINGERPRINT_UDFPS =
    SensorStateProto_ModalityFlag_FINGERPRINT_UDFPS;
  static inline bool ModalityFlag_IsValid(int value) {
    return SensorStateProto_ModalityFlag_IsValid(value);
  }
  static constexpr ModalityFlag ModalityFlag_MIN =
    SensorStateProto_ModalityFlag_ModalityFlag_MIN;
  static constexpr ModalityFlag ModalityFlag_MAX =
    SensorStateProto_ModalityFlag_ModalityFlag_MAX;
  static constexpr int ModalityFlag_ARRAYSIZE =
    SensorStateProto_ModalityFlag_ModalityFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModalityFlag_descriptor() {
    return SensorStateProto_ModalityFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& ModalityFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModalityFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModalityFlag_Name.");
    return SensorStateProto_ModalityFlag_Name(enum_t_value);
  }
  static inline bool ModalityFlag_Parse(const std::string& name,
      ModalityFlag* value) {
    return SensorStateProto_ModalityFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatesFieldNumber = 5,
    kModalityFlagsFieldNumber = 8,
    kSchedulerFieldNumber = 4,
    kSensorIdFieldNumber = 1,
    kModalityFieldNumber = 2,
    kCurrentStrengthFieldNumber = 3,
    kResetLockoutRequiresHardwareAuthTokenFieldNumber = 6,
    kResetLockoutRequiresChallengeFieldNumber = 7,
  };
  // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
  int user_states_size() const;
  void clear_user_states();
  ::com::android::server::biometrics::UserStateProto* mutable_user_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::UserStateProto >*
      mutable_user_states();
  const ::com::android::server::biometrics::UserStateProto& user_states(int index) const;
  ::com::android::server::biometrics::UserStateProto* add_user_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::UserStateProto >&
      user_states() const;

  // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
  int modality_flags_size() const;
  void clear_modality_flags();
  ::com::android::server::biometrics::SensorStateProto_ModalityFlag modality_flags(int index) const;
  void set_modality_flags(int index, ::com::android::server::biometrics::SensorStateProto_ModalityFlag value);
  void add_modality_flags(::com::android::server::biometrics::SensorStateProto_ModalityFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& modality_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_modality_flags();

  // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
  bool has_scheduler() const;
  void clear_scheduler();
  const ::com::android::server::biometrics::BiometricSchedulerProto& scheduler() const;
  ::com::android::server::biometrics::BiometricSchedulerProto* release_scheduler();
  ::com::android::server::biometrics::BiometricSchedulerProto* mutable_scheduler();
  void set_allocated_scheduler(::com::android::server::biometrics::BiometricSchedulerProto* scheduler);

  // optional int32 sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id() const;
  void set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
  bool has_modality() const;
  void clear_modality();
  ::com::android::server::biometrics::SensorStateProto_Modality modality() const;
  void set_modality(::com::android::server::biometrics::SensorStateProto_Modality value);

  // optional int32 current_strength = 3;
  bool has_current_strength() const;
  void clear_current_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 current_strength() const;
  void set_current_strength(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool reset_lockout_requires_hardware_auth_token = 6;
  bool has_reset_lockout_requires_hardware_auth_token() const;
  void clear_reset_lockout_requires_hardware_auth_token();
  bool reset_lockout_requires_hardware_auth_token() const;
  void set_reset_lockout_requires_hardware_auth_token(bool value);

  // optional bool reset_lockout_requires_challenge = 7;
  bool has_reset_lockout_requires_challenge() const;
  void clear_reset_lockout_requires_challenge();
  bool reset_lockout_requires_challenge() const;
  void set_reset_lockout_requires_challenge(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.SensorStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::UserStateProto > user_states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> modality_flags_;
  ::com::android::server::biometrics::BiometricSchedulerProto* scheduler_;
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id_;
  int modality_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_strength_;
  bool reset_lockout_requires_hardware_auth_token_;
  bool reset_lockout_requires_challenge_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
};
// -------------------------------------------------------------------

class UserStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.UserStateProto) */ {
 public:
  UserStateProto();
  virtual ~UserStateProto();

  UserStateProto(const UserStateProto& from);
  UserStateProto(UserStateProto&& from) noexcept
    : UserStateProto() {
    *this = ::std::move(from);
  }

  inline UserStateProto& operator=(const UserStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserStateProto& operator=(UserStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStateProto* internal_default_instance() {
    return reinterpret_cast<const UserStateProto*>(
               &_UserStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserStateProto& a, UserStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UserStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserStateProto* New() const final {
    return CreateMaybeMessage<UserStateProto>(nullptr);
  }

  UserStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserStateProto& from);
  void MergeFrom(const UserStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.UserStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNumEnrolledFieldNumber = 2,
  };
  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_enrolled = 2;
  bool has_num_enrolled() const;
  void clear_num_enrolled();
  ::PROTOBUF_NAMESPACE_ID::int32 num_enrolled() const;
  void set_num_enrolled(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.UserStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_enrolled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
};
// -------------------------------------------------------------------

class BiometricSchedulerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.BiometricSchedulerProto) */ {
 public:
  BiometricSchedulerProto();
  virtual ~BiometricSchedulerProto();

  BiometricSchedulerProto(const BiometricSchedulerProto& from);
  BiometricSchedulerProto(BiometricSchedulerProto&& from) noexcept
    : BiometricSchedulerProto() {
    *this = ::std::move(from);
  }

  inline BiometricSchedulerProto& operator=(const BiometricSchedulerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiometricSchedulerProto& operator=(BiometricSchedulerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BiometricSchedulerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiometricSchedulerProto* internal_default_instance() {
    return reinterpret_cast<const BiometricSchedulerProto*>(
               &_BiometricSchedulerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BiometricSchedulerProto& a, BiometricSchedulerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BiometricSchedulerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BiometricSchedulerProto* New() const final {
    return CreateMaybeMessage<BiometricSchedulerProto>(nullptr);
  }

  BiometricSchedulerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BiometricSchedulerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BiometricSchedulerProto& from);
  void MergeFrom(const BiometricSchedulerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiometricSchedulerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.BiometricSchedulerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentOperationsFieldNumber = 3,
    kCurrentOperationFieldNumber = 1,
    kTotalOperationsFieldNumber = 2,
  };
  // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
  int recent_operations_size() const;
  void clear_recent_operations();
  ::com::android::server::biometrics::ClientMonitorEnum recent_operations(int index) const;
  void set_recent_operations(int index, ::com::android::server::biometrics::ClientMonitorEnum value);
  void add_recent_operations(::com::android::server::biometrics::ClientMonitorEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& recent_operations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_recent_operations();

  // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
  bool has_current_operation() const;
  void clear_current_operation();
  ::com::android::server::biometrics::ClientMonitorEnum current_operation() const;
  void set_current_operation(::com::android::server::biometrics::ClientMonitorEnum value);

  // optional int32 total_operations = 2;
  bool has_total_operations() const;
  void clear_total_operations();
  ::PROTOBUF_NAMESPACE_ID::int32 total_operations() const;
  void set_total_operations(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.BiometricSchedulerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> recent_operations_;
  int current_operation_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_operations_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BiometricServiceStateProto

// repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
inline int BiometricServiceStateProto::sensor_service_states_size() const {
  return sensor_service_states_.size();
}
inline void BiometricServiceStateProto::clear_sensor_service_states() {
  sensor_service_states_.Clear();
}
inline ::com::android::server::biometrics::SensorServiceStateProto* BiometricServiceStateProto::mutable_sensor_service_states(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.BiometricServiceStateProto.sensor_service_states)
  return sensor_service_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorServiceStateProto >*
BiometricServiceStateProto::mutable_sensor_service_states() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.biometrics.BiometricServiceStateProto.sensor_service_states)
  return &sensor_service_states_;
}
inline const ::com::android::server::biometrics::SensorServiceStateProto& BiometricServiceStateProto::sensor_service_states(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.BiometricServiceStateProto.sensor_service_states)
  return sensor_service_states_.Get(index);
}
inline ::com::android::server::biometrics::SensorServiceStateProto* BiometricServiceStateProto::add_sensor_service_states() {
  // @@protoc_insertion_point(field_add:com.android.server.biometrics.BiometricServiceStateProto.sensor_service_states)
  return sensor_service_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorServiceStateProto >&
BiometricServiceStateProto::sensor_service_states() const {
  // @@protoc_insertion_point(field_list:com.android.server.biometrics.BiometricServiceStateProto.sensor_service_states)
  return sensor_service_states_;
}

// optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
inline bool BiometricServiceStateProto::has_auth_session_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiometricServiceStateProto::clear_auth_session_state() {
  auth_session_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::auth_session_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.BiometricServiceStateProto.auth_session_state)
  return static_cast< ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState >(auth_session_state_);
}
inline void BiometricServiceStateProto::set_auth_session_state(::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState value) {
  assert(::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  auth_session_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.BiometricServiceStateProto.auth_session_state)
}

// optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
inline bool BiometricServiceStateProto::has_auth_session_multi_sensor_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiometricServiceStateProto::clear_auth_session_multi_sensor_state() {
  auth_session_multi_sensor_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::auth_session_multi_sensor_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.BiometricServiceStateProto.auth_session_multi_sensor_state)
  return static_cast< ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState >(auth_session_multi_sensor_state_);
}
inline void BiometricServiceStateProto::set_auth_session_multi_sensor_state(::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState value) {
  assert(::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  auth_session_multi_sensor_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.BiometricServiceStateProto.auth_session_multi_sensor_state)
}

// -------------------------------------------------------------------

// SensorServiceStateProto

// repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
inline int SensorServiceStateProto::sensor_states_size() const {
  return sensor_states_.size();
}
inline void SensorServiceStateProto::clear_sensor_states() {
  sensor_states_.Clear();
}
inline ::com::android::server::biometrics::SensorStateProto* SensorServiceStateProto::mutable_sensor_states(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.SensorServiceStateProto.sensor_states)
  return sensor_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorStateProto >*
SensorServiceStateProto::mutable_sensor_states() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.biometrics.SensorServiceStateProto.sensor_states)
  return &sensor_states_;
}
inline const ::com::android::server::biometrics::SensorStateProto& SensorServiceStateProto::sensor_states(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorServiceStateProto.sensor_states)
  return sensor_states_.Get(index);
}
inline ::com::android::server::biometrics::SensorStateProto* SensorServiceStateProto::add_sensor_states() {
  // @@protoc_insertion_point(field_add:com.android.server.biometrics.SensorServiceStateProto.sensor_states)
  return sensor_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::SensorStateProto >&
SensorServiceStateProto::sensor_states() const {
  // @@protoc_insertion_point(field_list:com.android.server.biometrics.SensorServiceStateProto.sensor_states)
  return sensor_states_;
}

// -------------------------------------------------------------------

// SensorStateProto

// optional int32 sensor_id = 1;
inline bool SensorStateProto::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorStateProto::clear_sensor_id() {
  sensor_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorStateProto::sensor_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.sensor_id)
  return sensor_id_;
}
inline void SensorStateProto::set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.SensorStateProto.sensor_id)
}

// optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
inline bool SensorStateProto::has_modality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorStateProto::clear_modality() {
  modality_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::com::android::server::biometrics::SensorStateProto_Modality SensorStateProto::modality() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.modality)
  return static_cast< ::com::android::server::biometrics::SensorStateProto_Modality >(modality_);
}
inline void SensorStateProto::set_modality(::com::android::server::biometrics::SensorStateProto_Modality value) {
  assert(::com::android::server::biometrics::SensorStateProto_Modality_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  modality_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.SensorStateProto.modality)
}

// optional int32 current_strength = 3;
inline bool SensorStateProto::has_current_strength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorStateProto::clear_current_strength() {
  current_strength_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorStateProto::current_strength() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.current_strength)
  return current_strength_;
}
inline void SensorStateProto::set_current_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  current_strength_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.SensorStateProto.current_strength)
}

// optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
inline bool SensorStateProto::has_scheduler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorStateProto::clear_scheduler() {
  if (scheduler_ != nullptr) scheduler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::biometrics::BiometricSchedulerProto& SensorStateProto::scheduler() const {
  const ::com::android::server::biometrics::BiometricSchedulerProto* p = scheduler_;
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.scheduler)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::biometrics::BiometricSchedulerProto*>(
      &::com::android::server::biometrics::_BiometricSchedulerProto_default_instance_);
}
inline ::com::android::server::biometrics::BiometricSchedulerProto* SensorStateProto::release_scheduler() {
  // @@protoc_insertion_point(field_release:com.android.server.biometrics.SensorStateProto.scheduler)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::biometrics::BiometricSchedulerProto* temp = scheduler_;
  scheduler_ = nullptr;
  return temp;
}
inline ::com::android::server::biometrics::BiometricSchedulerProto* SensorStateProto::mutable_scheduler() {
  _has_bits_[0] |= 0x00000001u;
  if (scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::biometrics::BiometricSchedulerProto>(GetArenaNoVirtual());
    scheduler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.SensorStateProto.scheduler)
  return scheduler_;
}
inline void SensorStateProto::set_allocated_scheduler(::com::android::server::biometrics::BiometricSchedulerProto* scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scheduler_;
  }
  if (scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheduler_ = scheduler;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.biometrics.SensorStateProto.scheduler)
}

// repeated .com.android.server.biometrics.UserStateProto user_states = 5;
inline int SensorStateProto::user_states_size() const {
  return user_states_.size();
}
inline void SensorStateProto::clear_user_states() {
  user_states_.Clear();
}
inline ::com::android::server::biometrics::UserStateProto* SensorStateProto::mutable_user_states(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.SensorStateProto.user_states)
  return user_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::UserStateProto >*
SensorStateProto::mutable_user_states() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.biometrics.SensorStateProto.user_states)
  return &user_states_;
}
inline const ::com::android::server::biometrics::UserStateProto& SensorStateProto::user_states(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.user_states)
  return user_states_.Get(index);
}
inline ::com::android::server::biometrics::UserStateProto* SensorStateProto::add_user_states() {
  // @@protoc_insertion_point(field_add:com.android.server.biometrics.SensorStateProto.user_states)
  return user_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::UserStateProto >&
SensorStateProto::user_states() const {
  // @@protoc_insertion_point(field_list:com.android.server.biometrics.SensorStateProto.user_states)
  return user_states_;
}

// optional bool reset_lockout_requires_hardware_auth_token = 6;
inline bool SensorStateProto::has_reset_lockout_requires_hardware_auth_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorStateProto::clear_reset_lockout_requires_hardware_auth_token() {
  reset_lockout_requires_hardware_auth_token_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SensorStateProto::reset_lockout_requires_hardware_auth_token() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.reset_lockout_requires_hardware_auth_token)
  return reset_lockout_requires_hardware_auth_token_;
}
inline void SensorStateProto::set_reset_lockout_requires_hardware_auth_token(bool value) {
  _has_bits_[0] |= 0x00000010u;
  reset_lockout_requires_hardware_auth_token_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.SensorStateProto.reset_lockout_requires_hardware_auth_token)
}

// optional bool reset_lockout_requires_challenge = 7;
inline bool SensorStateProto::has_reset_lockout_requires_challenge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorStateProto::clear_reset_lockout_requires_challenge() {
  reset_lockout_requires_challenge_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SensorStateProto::reset_lockout_requires_challenge() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.reset_lockout_requires_challenge)
  return reset_lockout_requires_challenge_;
}
inline void SensorStateProto::set_reset_lockout_requires_challenge(bool value) {
  _has_bits_[0] |= 0x00000020u;
  reset_lockout_requires_challenge_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.SensorStateProto.reset_lockout_requires_challenge)
}

// repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
inline int SensorStateProto::modality_flags_size() const {
  return modality_flags_.size();
}
inline void SensorStateProto::clear_modality_flags() {
  modality_flags_.Clear();
}
inline ::com::android::server::biometrics::SensorStateProto_ModalityFlag SensorStateProto::modality_flags(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.SensorStateProto.modality_flags)
  return static_cast< ::com::android::server::biometrics::SensorStateProto_ModalityFlag >(modality_flags_.Get(index));
}
inline void SensorStateProto::set_modality_flags(int index, ::com::android::server::biometrics::SensorStateProto_ModalityFlag value) {
  assert(::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid(value));
  modality_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.SensorStateProto.modality_flags)
}
inline void SensorStateProto::add_modality_flags(::com::android::server::biometrics::SensorStateProto_ModalityFlag value) {
  assert(::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid(value));
  modality_flags_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.biometrics.SensorStateProto.modality_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SensorStateProto::modality_flags() const {
  // @@protoc_insertion_point(field_list:com.android.server.biometrics.SensorStateProto.modality_flags)
  return modality_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SensorStateProto::mutable_modality_flags() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.biometrics.SensorStateProto.modality_flags)
  return &modality_flags_;
}

// -------------------------------------------------------------------

// UserStateProto

// optional int32 user_id = 1;
inline bool UserStateProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStateProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserStateProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.UserStateProto.user_id)
  return user_id_;
}
inline void UserStateProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.UserStateProto.user_id)
}

// optional int32 num_enrolled = 2;
inline bool UserStateProto::has_num_enrolled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStateProto::clear_num_enrolled() {
  num_enrolled_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserStateProto::num_enrolled() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.UserStateProto.num_enrolled)
  return num_enrolled_;
}
inline void UserStateProto::set_num_enrolled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_enrolled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.UserStateProto.num_enrolled)
}

// -------------------------------------------------------------------

// BiometricSchedulerProto

// optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
inline bool BiometricSchedulerProto::has_current_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiometricSchedulerProto::clear_current_operation() {
  current_operation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::com::android::server::biometrics::ClientMonitorEnum BiometricSchedulerProto::current_operation() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.BiometricSchedulerProto.current_operation)
  return static_cast< ::com::android::server::biometrics::ClientMonitorEnum >(current_operation_);
}
inline void BiometricSchedulerProto::set_current_operation(::com::android::server::biometrics::ClientMonitorEnum value) {
  assert(::com::android::server::biometrics::ClientMonitorEnum_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  current_operation_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.BiometricSchedulerProto.current_operation)
}

// optional int32 total_operations = 2;
inline bool BiometricSchedulerProto::has_total_operations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiometricSchedulerProto::clear_total_operations() {
  total_operations_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BiometricSchedulerProto::total_operations() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.BiometricSchedulerProto.total_operations)
  return total_operations_;
}
inline void BiometricSchedulerProto::set_total_operations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_operations_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.BiometricSchedulerProto.total_operations)
}

// repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
inline int BiometricSchedulerProto::recent_operations_size() const {
  return recent_operations_.size();
}
inline void BiometricSchedulerProto::clear_recent_operations() {
  recent_operations_.Clear();
}
inline ::com::android::server::biometrics::ClientMonitorEnum BiometricSchedulerProto::recent_operations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.BiometricSchedulerProto.recent_operations)
  return static_cast< ::com::android::server::biometrics::ClientMonitorEnum >(recent_operations_.Get(index));
}
inline void BiometricSchedulerProto::set_recent_operations(int index, ::com::android::server::biometrics::ClientMonitorEnum value) {
  assert(::com::android::server::biometrics::ClientMonitorEnum_IsValid(value));
  recent_operations_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.BiometricSchedulerProto.recent_operations)
}
inline void BiometricSchedulerProto::add_recent_operations(::com::android::server::biometrics::ClientMonitorEnum value) {
  assert(::com::android::server::biometrics::ClientMonitorEnum_IsValid(value));
  recent_operations_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.biometrics.BiometricSchedulerProto.recent_operations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BiometricSchedulerProto::recent_operations() const {
  // @@protoc_insertion_point(field_list:com.android.server.biometrics.BiometricSchedulerProto.recent_operations)
  return recent_operations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BiometricSchedulerProto::mutable_recent_operations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.biometrics.BiometricSchedulerProto.recent_operations)
  return &recent_operations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState>() {
  return ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState>() {
  return ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::biometrics::SensorStateProto_Modality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::biometrics::SensorStateProto_Modality>() {
  return ::com::android::server::biometrics::SensorStateProto_Modality_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::biometrics::SensorStateProto_ModalityFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::biometrics::SensorStateProto_ModalityFlag>() {
  return ::com::android::server::biometrics::SensorStateProto_ModalityFlag_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::biometrics::ClientMonitorEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::biometrics::ClientMonitorEnum>() {
  return ::com::android::server::biometrics::ClientMonitorEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto
