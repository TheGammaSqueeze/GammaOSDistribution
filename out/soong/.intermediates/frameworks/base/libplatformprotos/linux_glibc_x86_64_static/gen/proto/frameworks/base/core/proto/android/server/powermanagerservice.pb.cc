// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/powermanagerservice.proto

#include "frameworks/base/core/proto/android/server/powermanagerservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LooperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatterySaverStateMachineProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_ActiveWakeLocksProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_UserActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WakeLockProto_WakeLockFlagsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwirelesschargerdetector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WirelessChargerDetectorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwirelesschargerdetector_2eproto;
namespace com {
namespace android {
namespace server {
namespace power {
class PowerManagerServiceDumpProto_ConstantsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerServiceDumpProto_ConstantsProto> _instance;
} _PowerManagerServiceDumpProto_ConstantsProto_default_instance_;
class PowerManagerServiceDumpProto_ActiveWakeLocksProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerServiceDumpProto_ActiveWakeLocksProto> _instance;
} _PowerManagerServiceDumpProto_ActiveWakeLocksProto_default_instance_;
class PowerManagerServiceDumpProto_UserActivityProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerServiceDumpProto_UserActivityProto> _instance;
} _PowerManagerServiceDumpProto_UserActivityProto_default_instance_;
class PowerManagerServiceDumpProto_UidStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerServiceDumpProto_UidStateProto> _instance;
} _PowerManagerServiceDumpProto_UidStateProto_default_instance_;
class PowerManagerServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerServiceDumpProto> _instance;
} _PowerManagerServiceDumpProto_default_instance_;
class SuspendBlockerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuspendBlockerProto> _instance;
} _SuspendBlockerProto_default_instance_;
class WakeLockProto_WakeLockFlagsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WakeLockProto_WakeLockFlagsProto> _instance;
} _WakeLockProto_WakeLockFlagsProto_default_instance_;
class WakeLockProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WakeLockProto> _instance;
} _WakeLockProto_default_instance_;
class PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto> _instance;
} _PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_default_instance_;
class PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto> _instance;
} _PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_default_instance_;
class PowerServiceSettingsAndConfigurationDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerServiceSettingsAndConfigurationDumpProto> _instance;
} _PowerServiceSettingsAndConfigurationDumpProto_default_instance_;
class BatterySaverStateMachineProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatterySaverStateMachineProto> _instance;
} _BatterySaverStateMachineProto_default_instance_;
}  // namespace power
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_BatterySaverStateMachineProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_BatterySaverStateMachineProto_default_instance_;
    new (ptr) ::com::android::server::power::BatterySaverStateMachineProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::BatterySaverStateMachineProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatterySaverStateMachineProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BatterySaverStateMachineProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_PowerManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerManagerServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerManagerServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PowerManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_PowerManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {
      &scc_info_PowerManagerServiceDumpProto_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_PowerManagerServiceDumpProto_ActiveWakeLocksProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_PowerManagerServiceDumpProto_UserActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_LooperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto.base,
      &scc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_WirelessChargerDetectorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwirelesschargerdetector_2eproto.base,
      &scc_info_BatterySaverStateMachineProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_PowerManagerServiceDumpProto_ActiveWakeLocksProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerManagerServiceDumpProto_ActiveWakeLocksProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_ActiveWakeLocksProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerManagerServiceDumpProto_ActiveWakeLocksProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_PowerManagerServiceDumpProto_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerManagerServiceDumpProto_ConstantsProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerManagerServiceDumpProto_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerManagerServiceDumpProto_UidStateProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_PowerManagerServiceDumpProto_UserActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerManagerServiceDumpProto_UserActivityProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerServiceDumpProto_UserActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerManagerServiceDumpProto_UserActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {
      &scc_info_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_default_instance_;
    new (ptr) ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_SuspendBlockerProto_default_instance_;
    new (ptr) ::com::android::server::power::SuspendBlockerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::SuspendBlockerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_WakeLockProto_default_instance_;
    new (ptr) ::com::android::server::power::WakeLockProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::WakeLockProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {
      &scc_info_WakeLockProto_WakeLockFlagsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
      &scc_info_WorkSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto.base,}};

static void InitDefaultsscc_info_WakeLockProto_WakeLockFlagsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::power::_WakeLockProto_WakeLockFlagsProto_default_instance_;
    new (ptr) ::com::android::server::power::WakeLockProto_WakeLockFlagsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::power::WakeLockProto_WakeLockFlagsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WakeLockProto_WakeLockFlagsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WakeLockProto_WakeLockFlagsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto, is_no_cached_wake_locks_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_cpu_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_screen_bright_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_screen_dim_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_button_bright_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_proximity_screen_off_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_stay_awake_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_doze_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto, is_draw_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, is_screen_bright_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, is_screen_dim_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, is_screen_dream_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, last_user_activity_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, last_user_activity_time_no_change_lights_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto, display_group_id_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto, uid_string_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto, is_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto, num_wake_locks_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto, process_state_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, constants_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, dirty_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, wakefulness_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_wakefulness_changing_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_powered_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, plug_type_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, battery_level_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, battery_level_when_dream_started_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, dock_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_stay_on_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_proximity_positive_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_boot_completed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_system_ready_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_hal_auto_suspend_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_hal_auto_interactive_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, active_wake_locks_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, notify_long_scheduled_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, notify_long_dispatched_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, notify_long_next_check_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, user_activity_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_request_wait_for_negative_proximity_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_sandman_scheduled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_sandman_summoned_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_battery_level_low_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_light_device_idle_mode_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_device_idle_mode_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, device_idle_whitelist_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, device_idle_temp_whitelist_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, last_wake_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, last_sleep_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, last_user_activity_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, last_user_activity_time_no_change_lights_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, last_interactive_power_hint_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, last_screen_brightness_boost_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_screen_brightness_boost_in_progress_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_display_ready_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_holding_wake_lock_suspend_blocker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_holding_display_suspend_blocker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, settings_and_configuration_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, sleep_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, screen_off_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, screen_dim_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, are_uids_changing_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, are_uids_changed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, uid_states_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, looper_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, wake_locks_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, suspend_blockers_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, wireless_charger_detector_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, battery_saver_state_machine_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, attentive_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, enhanced_discharge_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, last_enhanced_discharge_time_updated_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerManagerServiceDumpProto, is_enhanced_discharge_prediction_personalized_),
  0,
  6,
  7,
  10,
  11,
  8,
  9,
  14,
  15,
  12,
  13,
  16,
  17,
  18,
  19,
  1,
  20,
  21,
  22,
  ~0u,
  23,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  ~0u,
  31,
  32,
  33,
  34,
  35,
  36,
  29,
  30,
  38,
  39,
  2,
  37,
  42,
  43,
  40,
  41,
  ~0u,
  3,
  ~0u,
  ~0u,
  4,
  5,
  45,
  44,
  47,
  46,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::SuspendBlockerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::SuspendBlockerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::SuspendBlockerProto, name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::SuspendBlockerProto, reference_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto_WakeLockFlagsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto_WakeLockFlagsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto_WakeLockFlagsProto, is_acquire_causes_wakeup_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto_WakeLockFlagsProto, is_on_after_release_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, lock_level_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, is_disabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, acq_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, is_notified_long_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, pid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::WakeLockProto, work_source_),
  8,
  0,
  1,
  4,
  3,
  5,
  6,
  7,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto, is_stay_on_while_plugged_in_ac_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto, is_stay_on_while_plugged_in_usb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto, is_stay_on_while_plugged_in_wireless_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto, setting_minimum_float_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto, setting_maximum_float_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto, setting_default_float_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_decouple_hal_auto_suspend_mode_from_display_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_decouple_hal_interactive_mode_from_display_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_wake_up_when_plugged_or_unplugged_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_theater_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_suspend_when_screen_off_due_to_proximity_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_supported_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_enabled_by_default_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_activated_on_sleep_by_default_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_activated_on_dock_by_default_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_enabled_on_battery_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, dreams_battery_level_minimum_when_powered_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, dreams_battery_level_minimum_when_not_powered_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, dreams_battery_level_drain_cutoff_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_enabled_setting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_activate_on_sleep_setting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, are_dreams_activate_on_dock_setting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_doze_after_screen_off_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, minimum_screen_off_timeout_config_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, maximum_screen_dim_duration_config_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, maximum_screen_dim_ratio_config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, screen_off_timeout_setting_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, sleep_timeout_setting_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, maximum_screen_off_timeout_from_device_admin_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_maximum_screen_off_timeout_from_device_admin_enforced_locked_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, stay_on_while_plugged_in_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, screen_brightness_mode_setting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, screen_brightness_override_from_window_manager_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, user_activity_timeout_override_from_window_manager_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_user_inactive_override_from_window_manager_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, doze_screen_state_override_from_dream_manager_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, dozed_screen_brightness_override_from_dream_manager_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, screen_brightness_setting_limits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_double_tap_wake_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, is_vr_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, draw_wake_lock_override_from_sidekick_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, attentive_timeout_setting_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, attentive_timeout_config_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto, attentive_warning_duration_config_ms_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  14,
  15,
  16,
  13,
  18,
  19,
  20,
  17,
  22,
  23,
  24,
  25,
  26,
  21,
  0,
  27,
  29,
  28,
  32,
  30,
  31,
  1,
  33,
  34,
  35,
  36,
  37,
  38,
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, is_full_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, is_adaptive_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, should_advertise_is_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, boot_completed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, settings_loaded_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, battery_status_set_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, is_powered_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, battery_level_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, is_battery_level_low_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, setting_automatic_trigger_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, setting_battery_saver_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, setting_battery_saver_enabled_sticky_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, setting_battery_saver_trigger_threshold_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, setting_battery_saver_sticky_auto_disable_enabled_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, setting_battery_saver_sticky_auto_disable_threshold_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, last_adaptive_battery_saver_changed_externally_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, default_dynamic_disable_threshold_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, dynamic_disable_threshold_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::power::BatterySaverStateMachineProto, dynamic_battery_saver_enabled_),
  10,
  16,
  11,
  12,
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  17,
  6,
  7,
  9,
  8,
  14,
  15,
  18,
  19,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto)},
  { 7, 20, sizeof(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto)},
  { 28, 39, sizeof(::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto)},
  { 45, 55, sizeof(::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto)},
  { 60, 119, sizeof(::com::android::server::power::PowerManagerServiceDumpProto)},
  { 173, 180, sizeof(::com::android::server::power::SuspendBlockerProto)},
  { 182, 189, sizeof(::com::android::server::power::WakeLockProto_WakeLockFlagsProto)},
  { 191, 205, sizeof(::com::android::server::power::WakeLockProto)},
  { 214, 222, sizeof(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto)},
  { 225, 233, sizeof(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto)},
  { 236, 280, sizeof(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto)},
  { 319, 345, sizeof(::com::android::server::power::BatterySaverStateMachineProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerManagerServiceDumpProto_ConstantsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerManagerServiceDumpProto_ActiveWakeLocksProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerManagerServiceDumpProto_UserActivityProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerManagerServiceDumpProto_UidStateProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_SuspendBlockerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_WakeLockProto_WakeLockFlagsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_WakeLockProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::power::_BatterySaverStateMachineProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nCframeworks/base/core/proto/android/ser"
  "ver/powermanagerservice.proto\022\030com.andro"
  "id.server.power\0327frameworks/base/core/pr"
  "oto/android/content/intent.proto\0322framew"
  "orks/base/core/proto/android/os/looper.p"
  "roto\0328frameworks/base/core/proto/android"
  "/os/powermanager.proto\0326frameworks/base/"
  "core/proto/android/os/worksource.proto\032;"
  "frameworks/base/core/proto/android/provi"
  "ders/settings.proto\032Gframeworks/base/cor"
  "e/proto/android/server/wirelesschargerde"
  "tector.proto\0320frameworks/base/core/proto"
  "/android/privacy.proto\0324frameworks/proto"
  "_logging/stats/enums/app/enums.proto\0323fr"
  "ameworks/proto_logging/stats/enums/os/en"
  "ums.proto\0325frameworks/proto_logging/stat"
  "s/enums/view/enums.proto\"\334\030\n\034PowerManage"
  "rServiceDumpProto\022X\n\tconstants\030\001 \001(\0132E.c"
  "om.android.server.power.PowerManagerServ"
  "iceDumpProto.ConstantsProto\022\r\n\005dirty\030\002 \001"
  "(\005\022F\n\013wakefulness\030\003 \001(\01621.android.os.Pow"
  "erManagerInternalProto.Wakefulness\022\037\n\027is"
  "_wakefulness_changing\030\004 \001(\010\022\022\n\nis_powere"
  "d\030\005 \001(\010\0226\n\tplug_type\030\006 \001(\0162#.android.os."
  "BatteryPluggedStateEnum\022\025\n\rbattery_level"
  "\030\007 \001(\005\022(\n battery_level_when_dream_start"
  "ed\030\010 \001(\005\022:\n\ndock_state\030\t \001(\0162&.android.c"
  "ontent.IntentProto.DockState\022\022\n\nis_stay_"
  "on\030\n \001(\010\022\035\n\025is_proximity_positive\030\013 \001(\010\022"
  "\031\n\021is_boot_completed\030\014 \001(\010\022\027\n\017is_system_"
  "ready\030\r \001(\010\022(\n is_hal_auto_suspend_mode_"
  "enabled\030\016 \001(\010\022,\n$is_hal_auto_interactive"
  "_mode_enabled\030\017 \001(\010\022f\n\021active_wake_locks"
  "\030\020 \001(\0132K.com.android.server.power.PowerM"
  "anagerServiceDumpProto.ActiveWakeLocksPr"
  "oto\022 \n\030notify_long_scheduled_ms\030\021 \001(\003\022!\n"
  "\031notify_long_dispatched_ms\030\022 \001(\003\022!\n\031noti"
  "fy_long_next_check_ms\030\023 \001(\003\022_\n\ruser_acti"
  "vity\030\024 \003(\0132H.com.android.server.power.Po"
  "werManagerServiceDumpProto.UserActivityP"
  "roto\022.\n&is_request_wait_for_negative_pro"
  "ximity\030\025 \001(\010\022\034\n\024is_sandman_scheduled\030\026 \001"
  "(\010\022\033\n\023is_sandman_summoned\030\027 \001(\010\022\034\n\024is_ba"
  "ttery_level_low\030\030 \001(\010\022!\n\031is_light_device"
  "_idle_mode\030\031 \001(\010\022\033\n\023is_device_idle_mode\030"
  "\032 \001(\010\022\035\n\025device_idle_whitelist\030\033 \003(\005\022\"\n\032"
  "device_idle_temp_whitelist\030\034 \003(\005\022\031\n\021last"
  "_wake_time_ms\030\035 \001(\003\022\032\n\022last_sleep_time_m"
  "s\030\036 \001(\003\022&\n\032last_user_activity_time_ms\030\037 "
  "\001(\003B\002\030\001\0227\n+last_user_activity_time_no_ch"
  "ange_lights_ms\030  \001(\003B\002\030\001\022+\n#last_interac"
  "tive_power_hint_time_ms\030! \001(\003\022,\n$last_sc"
  "reen_brightness_boost_time_ms\030\" \001(\003\022.\n&i"
  "s_screen_brightness_boost_in_progress\030# "
  "\001(\010\022\030\n\020is_display_ready\030$ \001(\010\022,\n$is_hold"
  "ing_wake_lock_suspend_blocker\030% \001(\010\022*\n\"i"
  "s_holding_display_suspend_blocker\030& \001(\010\022"
  "k\n\032settings_and_configuration\030\' \001(\0132G.co"
  "m.android.server.power.PowerServiceSetti"
  "ngsAndConfigurationDumpProto\022\030\n\020sleep_ti"
  "meout_ms\030( \001(\021\022\035\n\025screen_off_timeout_ms\030"
  ") \001(\005\022\036\n\026screen_dim_duration_ms\030* \001(\005\022\031\n"
  "\021are_uids_changing\030+ \001(\010\022\030\n\020are_uids_cha"
  "nged\030, \001(\010\022X\n\nuid_states\030- \003(\0132D.com.and"
  "roid.server.power.PowerManagerServiceDum"
  "pProto.UidStateProto\022\'\n\006looper\030. \001(\0132\027.a"
  "ndroid.os.LooperProto\022;\n\nwake_locks\030/ \003("
  "\0132\'.com.android.server.power.WakeLockPro"
  "to\022G\n\020suspend_blockers\0300 \003(\0132-.com.andro"
  "id.server.power.SuspendBlockerProto\022Y\n\031w"
  "ireless_charger_detector\0301 \001(\01326.com.and"
  "roid.server.power.WirelessChargerDetecto"
  "rProto\022\\\n\033battery_saver_state_machine\0302 "
  "\001(\01327.com.android.server.power.BatterySa"
  "verStateMachineProto\022\034\n\024attentive_timeou"
  "t_ms\0303 \001(\021\022\'\n\037enhanced_discharge_time_el"
  "apsed\0304 \001(\003\0224\n,last_enhanced_discharge_t"
  "ime_updated_elapsed\0305 \001(\003\0225\n-is_enhanced"
  "_discharge_prediction_personalized\0306 \001(\010"
  "\032<\n\016ConstantsProto\022\037\n\027is_no_cached_wake_"
  "locks\030\001 \001(\010:\t\232\237\325\207\003\003\010\310\001\032\326\001\n\024ActiveWakeLoc"
  "ksProto\022\016\n\006is_cpu\030\001 \001(\010\022\030\n\020is_screen_bri"
  "ght\030\002 \001(\010\022\025\n\ris_screen_dim\030\003 \001(\010\022\030\n\020is_b"
  "utton_bright\030\004 \001(\010\022\037\n\027is_proximity_scree"
  "n_off\030\005 \001(\010\022\025\n\ris_stay_awake\030\006 \001(\010\022\017\n\007is"
  "_doze\030\007 \001(\010\022\017\n\007is_draw\030\010 \001(\010:\t\232\237\325\207\003\003\010\310\001\032"
  "\333\001\n\021UserActivityProto\022\030\n\020is_screen_brigh"
  "t\030\001 \001(\010\022\025\n\ris_screen_dim\030\002 \001(\010\022\027\n\017is_scr"
  "een_dream\030\003 \001(\010\022\"\n\032last_user_activity_ti"
  "me_ms\030\004 \001(\003\0223\n+last_user_activity_time_n"
  "o_change_lights_ms\030\005 \001(\003\022\030\n\020display_grou"
  "p_id\030\006 \001(\005:\t\232\237\325\207\003\003\010\310\001\032\234\001\n\rUidStateProto\022"
  "\013\n\003uid\030\001 \001(\005\022\022\n\nuid_string\030\002 \001(\t\022\021\n\tis_a"
  "ctive\030\003 \001(\010\022\026\n\016num_wake_locks\030\004 \001(\005\0224\n\rp"
  "rocess_state\030\005 \001(\0162\035.android.app.Process"
  "StateEnum:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"G\n\023Suspe"
  "ndBlockerProto\022\014\n\004name\030\001 \001(\t\022\027\n\017referenc"
  "e_count\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001\"\220\003\n\rWakeLockPro"
  "to\0221\n\nlock_level\030\001 \001(\0162\035.android.os.Wake"
  "LockLevelEnum\022\013\n\003tag\030\002 \001(\t\022I\n\005flags\030\003 \001("
  "\0132:.com.android.server.power.WakeLockPro"
  "to.WakeLockFlagsProto\022\023\n\013is_disabled\030\004 \001"
  "(\010\022\016\n\006acq_ms\030\005 \001(\003\022\030\n\020is_notified_long\030\006"
  " \001(\010\022\013\n\003uid\030\007 \001(\005\022\013\n\003pid\030\010 \001(\005\0220\n\013work_s"
  "ource\030\t \001(\0132\033.android.os.WorkSourceProto"
  "\032^\n\022WakeLockFlagsProto\022 \n\030is_acquire_cau"
  "ses_wakeup\030\001 \001(\010\022\033\n\023is_on_after_release\030"
  "\002 \001(\010:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\233\024\n-PowerSer"
  "viceSettingsAndConfigurationDumpProto\022=\n"
  "5is_decouple_hal_auto_suspend_mode_from_"
  "display_config\030\001 \001(\010\022<\n4is_decouple_hal_"
  "interactive_mode_from_display_config\030\002 \001"
  "(\010\0223\n+is_wake_up_when_plugged_or_unplugg"
  "ed_config\030\003 \001(\010\022C\n;is_wake_up_when_plugg"
  "ed_or_unplugged_in_theater_mode_config\030\004"
  " \001(\010\022\037\n\027is_theater_mode_enabled\030\005 \001(\010\022:\n"
  "2is_suspend_when_screen_off_due_to_proxi"
  "mity_config\030\006 \001(\010\022#\n\033are_dreams_supporte"
  "d_config\030\007 \001(\010\022,\n$are_dreams_enabled_by_"
  "default_config\030\010 \001(\010\0227\n/are_dreams_activ"
  "ated_on_sleep_by_default_config\030\t \001(\010\0226\n"
  ".are_dreams_activated_on_dock_by_default"
  "_config\030\n \001(\010\022,\n$are_dreams_enabled_on_b"
  "attery_config\030\013 \001(\010\0228\n0dreams_battery_le"
  "vel_minimum_when_powered_config\030\014 \001(\021\022<\n"
  "4dreams_battery_level_minimum_when_not_p"
  "owered_config\030\r \001(\021\0220\n(dreams_battery_le"
  "vel_drain_cutoff_config\030\016 \001(\021\022\"\n\032are_dre"
  "ams_enabled_setting\030\017 \001(\010\022,\n$are_dreams_"
  "activate_on_sleep_setting\030\020 \001(\010\022+\n#are_d"
  "reams_activate_on_dock_setting\030\021 \001(\010\022\'\n\037"
  "is_doze_after_screen_off_config\030\022 \001(\010\022,\n"
  "$minimum_screen_off_timeout_config_ms\030\023 "
  "\001(\005\022-\n%maximum_screen_dim_duration_confi"
  "g_ms\030\024 \001(\005\022\'\n\037maximum_screen_dim_ratio_c"
  "onfig\030\025 \001(\002\022%\n\035screen_off_timeout_settin"
  "g_ms\030\026 \001(\005\022 \n\030sleep_timeout_setting_ms\030\027"
  " \001(\021\0227\n/maximum_screen_off_timeout_from_"
  "device_admin_ms\030\030 \001(\005\022G\n\?is_maximum_scre"
  "en_off_timeout_from_device_admin_enforce"
  "d_locked\030\031 \001(\010\022\203\001\n\030stay_on_while_plugged"
  "_in\030\032 \001(\0132a.com.android.server.power.Pow"
  "erServiceSettingsAndConfigurationDumpPro"
  "to.StayOnWhilePluggedInProto\022f\n\036screen_b"
  "rightness_mode_setting\030\033 \001(\0162>.android.p"
  "roviders.settings.SettingsProto.ScreenBr"
  "ightnessMode\0226\n.screen_brightness_overri"
  "de_from_window_manager\030\034 \001(\021\022=\n5user_act"
  "ivity_timeout_override_from_window_manag"
  "er_ms\030\035 \001(\022\0225\n-is_user_inactive_override"
  "_from_window_manager\030\036 \001(\010\022U\n-doze_scree"
  "n_state_override_from_dream_manager\030\037 \001("
  "\0162\036.android.view.DisplayStateEnum\022;\n3doz"
  "ed_screen_brightness_override_from_dream"
  "_manager\030  \001(\002\022\224\001\n screen_brightness_set"
  "ting_limits\030! \001(\0132j.com.android.server.p"
  "ower.PowerServiceSettingsAndConfiguratio"
  "nDumpProto.ScreenBrightnessSettingLimits"
  "Proto\022\"\n\032is_double_tap_wake_enabled\030\" \001("
  "\010\022\032\n\022is_vr_mode_enabled\030# \001(\010\022-\n%draw_wa"
  "ke_lock_override_from_sidekick\030$ \001(\010\022$\n\034"
  "attentive_timeout_setting_ms\030% \001(\021\022#\n\033at"
  "tentive_timeout_config_ms\030& \001(\021\022,\n$atten"
  "tive_warning_duration_config_ms\030\' \001(\021\032\245\001"
  "\n\031StayOnWhilePluggedInProto\022&\n\036is_stay_o"
  "n_while_plugged_in_ac\030\001 \001(\010\022\'\n\037is_stay_o"
  "n_while_plugged_in_usb\030\002 \001(\010\022,\n$is_stay_"
  "on_while_plugged_in_wireless\030\003 \001(\010:\t\232\237\325\207"
  "\003\003\010\310\001\032\236\001\n\"ScreenBrightnessSettingLimitsP"
  "roto\022\035\n\025setting_minimum_float\030\004 \001(\002\022\035\n\025s"
  "etting_maximum_float\030\005 \001(\002\022\035\n\025setting_de"
  "fault_float\030\006 \001(\002:\t\232\237\325\207\003\003\010\310\001J\004\010\001\020\002J\004\010\002\020\003"
  "J\004\010\003\020\004:\t\232\237\325\207\003\003\010\310\001\"\210\t\n\035BatterySaverStateM"
  "achineProto\022\017\n\007enabled\030\001 \001(\010\022P\n\005state\030\022 "
  "\001(\0162A.com.android.server.power.BatterySa"
  "verStateMachineProto.StateEnum\022\027\n\017is_ful"
  "l_enabled\030\016 \001(\010\022\033\n\023is_adaptive_enabled\030\017"
  " \001(\010\022#\n\033should_advertise_is_enabled\030\020 \001("
  "\010\022\026\n\016boot_completed\030\002 \001(\010\022\027\n\017settings_lo"
  "aded\030\003 \001(\010\022\032\n\022battery_status_set\030\004 \001(\010\022\022"
  "\n\nis_powered\030\006 \001(\010\022\025\n\rbattery_level\030\007 \001("
  "\005\022\034\n\024is_battery_level_low\030\010 \001(\010\022o\n\031setti"
  "ng_automatic_trigger\030\023 \001(\0162L.com.android"
  ".server.power.BatterySaverStateMachinePr"
  "oto.AutomaticTriggerEnum\022%\n\035setting_batt"
  "ery_saver_enabled\030\t \001(\010\022,\n$setting_batte"
  "ry_saver_enabled_sticky\030\n \001(\010\022/\n\'setting"
  "_battery_saver_trigger_threshold\030\013 \001(\005\0229"
  "\n1setting_battery_saver_sticky_auto_disa"
  "ble_enabled\030\014 \001(\010\022;\n3setting_battery_sav"
  "er_sticky_auto_disable_threshold\030\r \001(\005\022>"
  "\n6last_adaptive_battery_saver_changed_ex"
  "ternally_elapsed\030\021 \001(\003\022)\n!default_dynami"
  "c_disable_threshold\030\024 \001(\005\022!\n\031dynamic_dis"
  "able_threshold\030\025 \001(\005\022%\n\035dynamic_battery_"
  "saver_enabled\030\026 \001(\010\"\230\001\n\tStateEnum\022\021\n\rSTA"
  "TE_UNKNOWN\020\000\022\r\n\tSTATE_OFF\020\001\022\023\n\017STATE_MAN"
  "UAL_ON\020\002\022\026\n\022STATE_AUTOMATIC_ON\020\003\022\037\n\033STAT"
  "E_OFF_AUTOMATIC_SNOOZED\020\004\022\033\n\027STATE_PENDI"
  "NG_STICKY_ON\020\005\"C\n\024AutomaticTriggerEnum\022\026"
  "\n\022TRIGGER_PERCENTAGE\020\000\022\023\n\017TRIGGER_DYNAMI"
  "C\020\001:\t\232\237\325\207\003\003\010\310\001J\004\010\005\020\006B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_deps[10] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwirelesschargerdetector_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fenums_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fview_2fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_sccs[12] = {
  &scc_info_BatterySaverStateMachineProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerManagerServiceDumpProto_ActiveWakeLocksProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerManagerServiceDumpProto_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerManagerServiceDumpProto_UserActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
  &scc_info_WakeLockProto_WakeLockFlagsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto, "frameworks/base/core/proto/android/server/powermanagerservice.proto", 8064,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto_deps, 12, 10,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto, 12, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace power {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatterySaverStateMachineProto_StateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto[0];
}
bool BatterySaverStateMachineProto_StateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::STATE_UNKNOWN;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::STATE_OFF;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::STATE_MANUAL_ON;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::STATE_AUTOMATIC_ON;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::STATE_OFF_AUTOMATIC_SNOOZED;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::STATE_PENDING_STICKY_ON;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::StateEnum_MIN;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::StateEnum_MAX;
constexpr int BatterySaverStateMachineProto::StateEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatterySaverStateMachineProto_AutomaticTriggerEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto[1];
}
bool BatterySaverStateMachineProto_AutomaticTriggerEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatterySaverStateMachineProto_AutomaticTriggerEnum BatterySaverStateMachineProto::TRIGGER_PERCENTAGE;
constexpr BatterySaverStateMachineProto_AutomaticTriggerEnum BatterySaverStateMachineProto::TRIGGER_DYNAMIC;
constexpr BatterySaverStateMachineProto_AutomaticTriggerEnum BatterySaverStateMachineProto::AutomaticTriggerEnum_MIN;
constexpr BatterySaverStateMachineProto_AutomaticTriggerEnum BatterySaverStateMachineProto::AutomaticTriggerEnum_MAX;
constexpr int BatterySaverStateMachineProto::AutomaticTriggerEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PowerManagerServiceDumpProto_ConstantsProto::InitAsDefaultInstance() {
}
class PowerManagerServiceDumpProto_ConstantsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerServiceDumpProto_ConstantsProto>()._has_bits_);
  static void set_has_is_no_cached_wake_locks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PowerManagerServiceDumpProto_ConstantsProto::PowerManagerServiceDumpProto_ConstantsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
}
PowerManagerServiceDumpProto_ConstantsProto::PowerManagerServiceDumpProto_ConstantsProto(const PowerManagerServiceDumpProto_ConstantsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_no_cached_wake_locks_ = from.is_no_cached_wake_locks_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
}

void PowerManagerServiceDumpProto_ConstantsProto::SharedCtor() {
  is_no_cached_wake_locks_ = false;
}

PowerManagerServiceDumpProto_ConstantsProto::~PowerManagerServiceDumpProto_ConstantsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  SharedDtor();
}

void PowerManagerServiceDumpProto_ConstantsProto::SharedDtor() {
}

void PowerManagerServiceDumpProto_ConstantsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerServiceDumpProto_ConstantsProto& PowerManagerServiceDumpProto_ConstantsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerServiceDumpProto_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerServiceDumpProto_ConstantsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_no_cached_wake_locks_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerServiceDumpProto_ConstantsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_no_cached_wake_locks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_no_cached_wake_locks(&has_bits);
          is_no_cached_wake_locks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerServiceDumpProto_ConstantsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_no_cached_wake_locks = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_no_cached_wake_locks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_no_cached_wake_locks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerServiceDumpProto_ConstantsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_no_cached_wake_locks = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_no_cached_wake_locks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerManagerServiceDumpProto_ConstantsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_no_cached_wake_locks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_no_cached_wake_locks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  return target;
}

size_t PowerManagerServiceDumpProto_ConstantsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_no_cached_wake_locks = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerServiceDumpProto_ConstantsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerManagerServiceDumpProto_ConstantsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerManagerServiceDumpProto_ConstantsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
    MergeFrom(*source);
  }
}

void PowerManagerServiceDumpProto_ConstantsProto::MergeFrom(const PowerManagerServiceDumpProto_ConstantsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_no_cached_wake_locks()) {
    set_is_no_cached_wake_locks(from.is_no_cached_wake_locks());
  }
}

void PowerManagerServiceDumpProto_ConstantsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerManagerServiceDumpProto_ConstantsProto::CopyFrom(const PowerManagerServiceDumpProto_ConstantsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerServiceDumpProto_ConstantsProto::IsInitialized() const {
  return true;
}

void PowerManagerServiceDumpProto_ConstantsProto::InternalSwap(PowerManagerServiceDumpProto_ConstantsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_no_cached_wake_locks_, other->is_no_cached_wake_locks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerManagerServiceDumpProto_ConstantsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::InitAsDefaultInstance() {
}
class PowerManagerServiceDumpProto_ActiveWakeLocksProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerServiceDumpProto_ActiveWakeLocksProto>()._has_bits_);
  static void set_has_is_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_screen_bright(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_screen_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_button_bright(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_proximity_screen_off(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_stay_awake(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_doze(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PowerManagerServiceDumpProto_ActiveWakeLocksProto::PowerManagerServiceDumpProto_ActiveWakeLocksProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
}
PowerManagerServiceDumpProto_ActiveWakeLocksProto::PowerManagerServiceDumpProto_ActiveWakeLocksProto(const PowerManagerServiceDumpProto_ActiveWakeLocksProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_cpu_, &from.is_cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_draw_) -
    reinterpret_cast<char*>(&is_cpu_)) + sizeof(is_draw_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::SharedCtor() {
  ::memset(&is_cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_draw_) -
      reinterpret_cast<char*>(&is_cpu_)) + sizeof(is_draw_));
}

PowerManagerServiceDumpProto_ActiveWakeLocksProto::~PowerManagerServiceDumpProto_ActiveWakeLocksProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  SharedDtor();
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::SharedDtor() {
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerServiceDumpProto_ActiveWakeLocksProto& PowerManagerServiceDumpProto_ActiveWakeLocksProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerServiceDumpProto_ActiveWakeLocksProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerServiceDumpProto_ActiveWakeLocksProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&is_cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_draw_) -
        reinterpret_cast<char*>(&is_cpu_)) + sizeof(is_draw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerServiceDumpProto_ActiveWakeLocksProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_cpu(&has_bits);
          is_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_screen_bright = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_screen_bright(&has_bits);
          is_screen_bright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_screen_dim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_screen_dim(&has_bits);
          is_screen_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_button_bright = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_button_bright(&has_bits);
          is_button_bright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_proximity_screen_off = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_proximity_screen_off(&has_bits);
          is_proximity_screen_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stay_awake = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_stay_awake(&has_bits);
          is_stay_awake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_doze = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_doze(&has_bits);
          is_doze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_draw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_draw(&has_bits);
          is_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_cpu = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_screen_bright = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_screen_bright(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_screen_bright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_screen_dim = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_screen_dim(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_screen_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_button_bright = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_button_bright(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_button_bright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_proximity_screen_off = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_proximity_screen_off(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_proximity_screen_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stay_awake = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_stay_awake(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stay_awake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_doze = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_is_doze(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_doze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_draw = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_draw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_cpu(), output);
  }

  // optional bool is_screen_bright = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_screen_bright(), output);
  }

  // optional bool is_screen_dim = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_screen_dim(), output);
  }

  // optional bool is_button_bright = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_button_bright(), output);
  }

  // optional bool is_proximity_screen_off = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_proximity_screen_off(), output);
  }

  // optional bool is_stay_awake = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_stay_awake(), output);
  }

  // optional bool is_doze = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_doze(), output);
  }

  // optional bool is_draw = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_draw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerManagerServiceDumpProto_ActiveWakeLocksProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_cpu(), target);
  }

  // optional bool is_screen_bright = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_screen_bright(), target);
  }

  // optional bool is_screen_dim = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_screen_dim(), target);
  }

  // optional bool is_button_bright = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_button_bright(), target);
  }

  // optional bool is_proximity_screen_off = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_proximity_screen_off(), target);
  }

  // optional bool is_stay_awake = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_stay_awake(), target);
  }

  // optional bool is_doze = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_doze(), target);
  }

  // optional bool is_draw = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->is_draw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  return target;
}

size_t PowerManagerServiceDumpProto_ActiveWakeLocksProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool is_cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_screen_bright = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_screen_dim = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_button_bright = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_proximity_screen_off = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_stay_awake = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_doze = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_draw = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerManagerServiceDumpProto_ActiveWakeLocksProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerManagerServiceDumpProto_ActiveWakeLocksProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
    MergeFrom(*source);
  }
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::MergeFrom(const PowerManagerServiceDumpProto_ActiveWakeLocksProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      is_cpu_ = from.is_cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_screen_bright_ = from.is_screen_bright_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_screen_dim_ = from.is_screen_dim_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_button_bright_ = from.is_button_bright_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_proximity_screen_off_ = from.is_proximity_screen_off_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_stay_awake_ = from.is_stay_awake_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_doze_ = from.is_doze_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_draw_ = from.is_draw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::CopyFrom(const PowerManagerServiceDumpProto_ActiveWakeLocksProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::IsInitialized() const {
  return true;
}

void PowerManagerServiceDumpProto_ActiveWakeLocksProto::InternalSwap(PowerManagerServiceDumpProto_ActiveWakeLocksProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_cpu_, other->is_cpu_);
  swap(is_screen_bright_, other->is_screen_bright_);
  swap(is_screen_dim_, other->is_screen_dim_);
  swap(is_button_bright_, other->is_button_bright_);
  swap(is_proximity_screen_off_, other->is_proximity_screen_off_);
  swap(is_stay_awake_, other->is_stay_awake_);
  swap(is_doze_, other->is_doze_);
  swap(is_draw_, other->is_draw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerManagerServiceDumpProto_ActiveWakeLocksProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerManagerServiceDumpProto_UserActivityProto::InitAsDefaultInstance() {
}
class PowerManagerServiceDumpProto_UserActivityProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerServiceDumpProto_UserActivityProto>()._has_bits_);
  static void set_has_is_screen_bright(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_screen_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_screen_dream(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_user_activity_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_user_activity_time_no_change_lights_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_display_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PowerManagerServiceDumpProto_UserActivityProto::PowerManagerServiceDumpProto_UserActivityProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
}
PowerManagerServiceDumpProto_UserActivityProto::PowerManagerServiceDumpProto_UserActivityProto(const PowerManagerServiceDumpProto_UserActivityProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_screen_bright_, &from.is_screen_bright_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_user_activity_time_no_change_lights_ms_) -
    reinterpret_cast<char*>(&is_screen_bright_)) + sizeof(last_user_activity_time_no_change_lights_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
}

void PowerManagerServiceDumpProto_UserActivityProto::SharedCtor() {
  ::memset(&is_screen_bright_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_user_activity_time_no_change_lights_ms_) -
      reinterpret_cast<char*>(&is_screen_bright_)) + sizeof(last_user_activity_time_no_change_lights_ms_));
}

PowerManagerServiceDumpProto_UserActivityProto::~PowerManagerServiceDumpProto_UserActivityProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  SharedDtor();
}

void PowerManagerServiceDumpProto_UserActivityProto::SharedDtor() {
}

void PowerManagerServiceDumpProto_UserActivityProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerServiceDumpProto_UserActivityProto& PowerManagerServiceDumpProto_UserActivityProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerServiceDumpProto_UserActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerServiceDumpProto_UserActivityProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&is_screen_bright_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_user_activity_time_no_change_lights_ms_) -
        reinterpret_cast<char*>(&is_screen_bright_)) + sizeof(last_user_activity_time_no_change_lights_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerServiceDumpProto_UserActivityProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_screen_bright = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_screen_bright(&has_bits);
          is_screen_bright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_screen_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_screen_dim(&has_bits);
          is_screen_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_screen_dream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_screen_dream(&has_bits);
          is_screen_dream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_user_activity_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_user_activity_time_ms(&has_bits);
          last_user_activity_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_user_activity_time_no_change_lights_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_user_activity_time_no_change_lights_ms(&has_bits);
          last_user_activity_time_no_change_lights_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 display_group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_display_group_id(&has_bits);
          display_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerServiceDumpProto_UserActivityProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_screen_bright = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_screen_bright(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_screen_bright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_screen_dim = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_screen_dim(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_screen_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_screen_dream = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_screen_dream(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_screen_dream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_user_activity_time_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_user_activity_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_user_activity_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_user_activity_time_no_change_lights_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_user_activity_time_no_change_lights_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_user_activity_time_no_change_lights_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display_group_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_display_group_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerServiceDumpProto_UserActivityProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_screen_bright = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_screen_bright(), output);
  }

  // optional bool is_screen_dim = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_screen_dim(), output);
  }

  // optional bool is_screen_dream = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_screen_dream(), output);
  }

  // optional int64 last_user_activity_time_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_user_activity_time_ms(), output);
  }

  // optional int64 last_user_activity_time_no_change_lights_ms = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->last_user_activity_time_no_change_lights_ms(), output);
  }

  // optional int32 display_group_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->display_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerManagerServiceDumpProto_UserActivityProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_screen_bright = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_screen_bright(), target);
  }

  // optional bool is_screen_dim = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_screen_dim(), target);
  }

  // optional bool is_screen_dream = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_screen_dream(), target);
  }

  // optional int64 last_user_activity_time_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->last_user_activity_time_ms(), target);
  }

  // optional int64 last_user_activity_time_no_change_lights_ms = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->last_user_activity_time_no_change_lights_ms(), target);
  }

  // optional int32 display_group_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->display_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  return target;
}

size_t PowerManagerServiceDumpProto_UserActivityProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool is_screen_bright = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_screen_dim = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_screen_dream = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 display_group_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->display_group_id());
    }

    // optional int64 last_user_activity_time_ms = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_user_activity_time_ms());
    }

    // optional int64 last_user_activity_time_no_change_lights_ms = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_user_activity_time_no_change_lights_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerServiceDumpProto_UserActivityProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerManagerServiceDumpProto_UserActivityProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerManagerServiceDumpProto_UserActivityProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
    MergeFrom(*source);
  }
}

void PowerManagerServiceDumpProto_UserActivityProto::MergeFrom(const PowerManagerServiceDumpProto_UserActivityProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      is_screen_bright_ = from.is_screen_bright_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_screen_dim_ = from.is_screen_dim_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_screen_dream_ = from.is_screen_dream_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_group_id_ = from.display_group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_user_activity_time_ms_ = from.last_user_activity_time_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_user_activity_time_no_change_lights_ms_ = from.last_user_activity_time_no_change_lights_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerManagerServiceDumpProto_UserActivityProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerManagerServiceDumpProto_UserActivityProto::CopyFrom(const PowerManagerServiceDumpProto_UserActivityProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerServiceDumpProto_UserActivityProto::IsInitialized() const {
  return true;
}

void PowerManagerServiceDumpProto_UserActivityProto::InternalSwap(PowerManagerServiceDumpProto_UserActivityProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_screen_bright_, other->is_screen_bright_);
  swap(is_screen_dim_, other->is_screen_dim_);
  swap(is_screen_dream_, other->is_screen_dream_);
  swap(display_group_id_, other->display_group_id_);
  swap(last_user_activity_time_ms_, other->last_user_activity_time_ms_);
  swap(last_user_activity_time_no_change_lights_ms_, other->last_user_activity_time_no_change_lights_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerManagerServiceDumpProto_UserActivityProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerManagerServiceDumpProto_UidStateProto::InitAsDefaultInstance() {
}
class PowerManagerServiceDumpProto_UidStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerServiceDumpProto_UidStateProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_wake_locks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_process_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PowerManagerServiceDumpProto_UidStateProto::PowerManagerServiceDumpProto_UidStateProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
}
PowerManagerServiceDumpProto_UidStateProto::PowerManagerServiceDumpProto_UidStateProto(const PowerManagerServiceDumpProto_UidStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid_string()) {
    uid_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_string_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&process_state_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(process_state_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
}

void PowerManagerServiceDumpProto_UidStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  uid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_wake_locks_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(num_wake_locks_));
  process_state_ = 998;
}

PowerManagerServiceDumpProto_UidStateProto::~PowerManagerServiceDumpProto_UidStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  SharedDtor();
}

void PowerManagerServiceDumpProto_UidStateProto::SharedDtor() {
  uid_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PowerManagerServiceDumpProto_UidStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerServiceDumpProto_UidStateProto& PowerManagerServiceDumpProto_UidStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerServiceDumpProto_UidStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerServiceDumpProto_UidStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uid_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_wake_locks_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(num_wake_locks_));
    process_state_ = 998;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerServiceDumpProto_UidStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uid_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_uid_string(), ptr, ctx, "com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_active(&has_bits);
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_wake_locks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_wake_locks(&has_bits);
          num_wake_locks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.ProcessStateEnum process_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::ProcessStateEnum_IsValid(val))) {
            set_process_state(static_cast<::android::app::ProcessStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerServiceDumpProto_UidStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uid_string = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uid_string()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid_string().data(), static_cast<int>(this->uid_string().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_active = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_wake_locks = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_wake_locks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_wake_locks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.ProcessStateEnum process_state = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::ProcessStateEnum_IsValid(value)) {
            set_process_state(static_cast< ::android::app::ProcessStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerServiceDumpProto_UidStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string uid_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid_string().data(), static_cast<int>(this->uid_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid_string(), output);
  }

  // optional bool is_active = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_active(), output);
  }

  // optional int32 num_wake_locks = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_wake_locks(), output);
  }

  // optional .android.app.ProcessStateEnum process_state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->process_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerManagerServiceDumpProto_UidStateProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string uid_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid_string().data(), static_cast<int>(this->uid_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->uid_string(), target);
  }

  // optional bool is_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_active(), target);
  }

  // optional int32 num_wake_locks = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_wake_locks(), target);
  }

  // optional .android.app.ProcessStateEnum process_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->process_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  return target;
}

size_t PowerManagerServiceDumpProto_UidStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string uid_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uid_string());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool is_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 num_wake_locks = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_wake_locks());
    }

    // optional .android.app.ProcessStateEnum process_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->process_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerServiceDumpProto_UidStateProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerManagerServiceDumpProto_UidStateProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerManagerServiceDumpProto_UidStateProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
    MergeFrom(*source);
  }
}

void PowerManagerServiceDumpProto_UidStateProto::MergeFrom(const PowerManagerServiceDumpProto_UidStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      uid_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_wake_locks_ = from.num_wake_locks_;
    }
    if (cached_has_bits & 0x00000010u) {
      process_state_ = from.process_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerManagerServiceDumpProto_UidStateProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerManagerServiceDumpProto_UidStateProto::CopyFrom(const PowerManagerServiceDumpProto_UidStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerServiceDumpProto_UidStateProto::IsInitialized() const {
  return true;
}

void PowerManagerServiceDumpProto_UidStateProto::InternalSwap(PowerManagerServiceDumpProto_UidStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uid_string_.Swap(&other->uid_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(is_active_, other->is_active_);
  swap(num_wake_locks_, other->num_wake_locks_);
  swap(process_state_, other->process_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerManagerServiceDumpProto_UidStateProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerManagerServiceDumpProto::InitAsDefaultInstance() {
  ::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_._instance.get_mutable()->constants_ = const_cast< ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto*>(
      ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto::internal_default_instance());
  ::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_._instance.get_mutable()->active_wake_locks_ = const_cast< ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto*>(
      ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto::internal_default_instance());
  ::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_._instance.get_mutable()->settings_and_configuration_ = const_cast< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto*>(
      ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto::internal_default_instance());
  ::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_._instance.get_mutable()->looper_ = const_cast< ::android::os::LooperProto*>(
      ::android::os::LooperProto::internal_default_instance());
  ::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_._instance.get_mutable()->wireless_charger_detector_ = const_cast< ::com::android::server::power::WirelessChargerDetectorProto*>(
      ::com::android::server::power::WirelessChargerDetectorProto::internal_default_instance());
  ::com::android::server::power::_PowerManagerServiceDumpProto_default_instance_._instance.get_mutable()->battery_saver_state_machine_ = const_cast< ::com::android::server::power::BatterySaverStateMachineProto*>(
      ::com::android::server::power::BatterySaverStateMachineProto::internal_default_instance());
}
class PowerManagerServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerServiceDumpProto>()._has_bits_);
  static const ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto& constants(const PowerManagerServiceDumpProto* msg);
  static void set_has_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dirty(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wakefulness(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_wakefulness_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_powered(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_plug_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_battery_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_battery_level_when_dream_started(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dock_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_stay_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_proximity_positive(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_boot_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_system_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_hal_auto_suspend_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_is_hal_auto_interactive_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto& active_wake_locks(const PowerManagerServiceDumpProto* msg);
  static void set_has_active_wake_locks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notify_long_scheduled_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_notify_long_dispatched_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_notify_long_next_check_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_is_request_wait_for_negative_proximity(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_is_sandman_scheduled(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_is_sandman_summoned(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_is_battery_level_low(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_light_device_idle_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_is_device_idle_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_last_wake_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_last_sleep_time_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_last_user_activity_time_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_last_user_activity_time_no_change_lights_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_last_interactive_power_hint_time_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_last_screen_brightness_boost_time_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_is_screen_brightness_boost_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_is_display_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_is_holding_wake_lock_suspend_blocker(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_is_holding_display_suspend_blocker(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto& settings_and_configuration(const PowerManagerServiceDumpProto* msg);
  static void set_has_settings_and_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sleep_timeout_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_screen_off_timeout_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_screen_dim_duration_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_are_uids_changing(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_are_uids_changed(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::android::os::LooperProto& looper(const PowerManagerServiceDumpProto* msg);
  static void set_has_looper(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::power::WirelessChargerDetectorProto& wireless_charger_detector(const PowerManagerServiceDumpProto* msg);
  static void set_has_wireless_charger_detector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::com::android::server::power::BatterySaverStateMachineProto& battery_saver_state_machine(const PowerManagerServiceDumpProto* msg);
  static void set_has_battery_saver_state_machine(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attentive_timeout_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_enhanced_discharge_time_elapsed(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_last_enhanced_discharge_time_updated_elapsed(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_is_enhanced_discharge_prediction_personalized(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
};

const ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto&
PowerManagerServiceDumpProto::_Internal::constants(const PowerManagerServiceDumpProto* msg) {
  return *msg->constants_;
}
const ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto&
PowerManagerServiceDumpProto::_Internal::active_wake_locks(const PowerManagerServiceDumpProto* msg) {
  return *msg->active_wake_locks_;
}
const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto&
PowerManagerServiceDumpProto::_Internal::settings_and_configuration(const PowerManagerServiceDumpProto* msg) {
  return *msg->settings_and_configuration_;
}
const ::android::os::LooperProto&
PowerManagerServiceDumpProto::_Internal::looper(const PowerManagerServiceDumpProto* msg) {
  return *msg->looper_;
}
const ::com::android::server::power::WirelessChargerDetectorProto&
PowerManagerServiceDumpProto::_Internal::wireless_charger_detector(const PowerManagerServiceDumpProto* msg) {
  return *msg->wireless_charger_detector_;
}
const ::com::android::server::power::BatterySaverStateMachineProto&
PowerManagerServiceDumpProto::_Internal::battery_saver_state_machine(const PowerManagerServiceDumpProto* msg) {
  return *msg->battery_saver_state_machine_;
}
void PowerManagerServiceDumpProto::clear_looper() {
  if (looper_ != nullptr) looper_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PowerManagerServiceDumpProto::clear_wireless_charger_detector() {
  if (wireless_charger_detector_ != nullptr) wireless_charger_detector_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
PowerManagerServiceDumpProto::PowerManagerServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerManagerServiceDumpProto)
}
PowerManagerServiceDumpProto::PowerManagerServiceDumpProto(const PowerManagerServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      user_activity_(from.user_activity_),
      device_idle_whitelist_(from.device_idle_whitelist_),
      device_idle_temp_whitelist_(from.device_idle_temp_whitelist_),
      uid_states_(from.uid_states_),
      wake_locks_(from.wake_locks_),
      suspend_blockers_(from.suspend_blockers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_constants()) {
    constants_ = new ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto(*from.constants_);
  } else {
    constants_ = nullptr;
  }
  if (from.has_active_wake_locks()) {
    active_wake_locks_ = new ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto(*from.active_wake_locks_);
  } else {
    active_wake_locks_ = nullptr;
  }
  if (from.has_settings_and_configuration()) {
    settings_and_configuration_ = new ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto(*from.settings_and_configuration_);
  } else {
    settings_and_configuration_ = nullptr;
  }
  if (from.has_looper()) {
    looper_ = new ::android::os::LooperProto(*from.looper_);
  } else {
    looper_ = nullptr;
  }
  if (from.has_wireless_charger_detector()) {
    wireless_charger_detector_ = new ::com::android::server::power::WirelessChargerDetectorProto(*from.wireless_charger_detector_);
  } else {
    wireless_charger_detector_ = nullptr;
  }
  if (from.has_battery_saver_state_machine()) {
    battery_saver_state_machine_ = new ::com::android::server::power::BatterySaverStateMachineProto(*from.battery_saver_state_machine_);
  } else {
    battery_saver_state_machine_ = nullptr;
  }
  ::memcpy(&dirty_, &from.dirty_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_enhanced_discharge_time_updated_elapsed_) -
    reinterpret_cast<char*>(&dirty_)) + sizeof(last_enhanced_discharge_time_updated_elapsed_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerManagerServiceDumpProto)
}

void PowerManagerServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  ::memset(&constants_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_enhanced_discharge_time_updated_elapsed_) -
      reinterpret_cast<char*>(&constants_)) + sizeof(last_enhanced_discharge_time_updated_elapsed_));
}

PowerManagerServiceDumpProto::~PowerManagerServiceDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerManagerServiceDumpProto)
  SharedDtor();
}

void PowerManagerServiceDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete constants_;
  if (this != internal_default_instance()) delete active_wake_locks_;
  if (this != internal_default_instance()) delete settings_and_configuration_;
  if (this != internal_default_instance()) delete looper_;
  if (this != internal_default_instance()) delete wireless_charger_detector_;
  if (this != internal_default_instance()) delete battery_saver_state_machine_;
}

void PowerManagerServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerServiceDumpProto& PowerManagerServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_activity_.Clear();
  device_idle_whitelist_.Clear();
  device_idle_temp_whitelist_.Clear();
  uid_states_.Clear();
  wake_locks_.Clear();
  suspend_blockers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(constants_ != nullptr);
      constants_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(active_wake_locks_ != nullptr);
      active_wake_locks_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(settings_and_configuration_ != nullptr);
      settings_and_configuration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(looper_ != nullptr);
      looper_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(wireless_charger_detector_ != nullptr);
      wireless_charger_detector_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(battery_saver_state_machine_ != nullptr);
      battery_saver_state_machine_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&dirty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wakefulness_) -
        reinterpret_cast<char*>(&dirty_)) + sizeof(wakefulness_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&plug_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dock_state_) -
        reinterpret_cast<char*>(&plug_type_)) + sizeof(dock_state_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_boot_completed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_request_wait_for_negative_proximity_) -
        reinterpret_cast<char*>(&is_boot_completed_)) + sizeof(is_request_wait_for_negative_proximity_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&is_sandman_scheduled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_wake_time_ms_) -
        reinterpret_cast<char*>(&is_sandman_scheduled_)) + sizeof(last_wake_time_ms_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&last_sleep_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_holding_display_suspend_blocker_) -
        reinterpret_cast<char*>(&last_sleep_time_ms_)) + sizeof(is_holding_display_suspend_blocker_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&are_uids_changing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_enhanced_discharge_time_updated_elapsed_) -
        reinterpret_cast<char*>(&are_uids_changing_)) + sizeof(last_enhanced_discharge_time_updated_elapsed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto constants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dirty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dirty(&_has_bits_);
          dirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::PowerManagerInternalProto_Wakefulness_IsValid(val))) {
            set_wakefulness(static_cast<::android::os::PowerManagerInternalProto_Wakefulness>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_wakefulness_changing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_wakefulness_changing(&_has_bits_);
          is_wakefulness_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_powered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_powered(&_has_bits_);
          is_powered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.BatteryPluggedStateEnum plug_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::BatteryPluggedStateEnum_IsValid(val))) {
            set_plug_type(static_cast<::android::os::BatteryPluggedStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 battery_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_battery_level(&_has_bits_);
          battery_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 battery_level_when_dream_started = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_battery_level_when_dream_started(&_has_bits_);
          battery_level_when_dream_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.IntentProto.DockState dock_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::content::IntentProto_DockState_IsValid(val))) {
            set_dock_state(static_cast<::android::content::IntentProto_DockState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_stay_on = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_stay_on(&_has_bits_);
          is_stay_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_proximity_positive = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_proximity_positive(&_has_bits_);
          is_proximity_positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_boot_completed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_boot_completed(&_has_bits_);
          is_boot_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_system_ready = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_system_ready(&_has_bits_);
          is_system_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hal_auto_suspend_mode_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_hal_auto_suspend_mode_enabled(&_has_bits_);
          is_hal_auto_suspend_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hal_auto_interactive_mode_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_hal_auto_interactive_mode_enabled(&_has_bits_);
          is_hal_auto_interactive_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto active_wake_locks = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_active_wake_locks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 notify_long_scheduled_ms = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_notify_long_scheduled_ms(&_has_bits_);
          notify_long_scheduled_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 notify_long_dispatched_ms = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_notify_long_dispatched_ms(&_has_bits_);
          notify_long_dispatched_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 notify_long_next_check_ms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_notify_long_next_check_ms(&_has_bits_);
          notify_long_next_check_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto user_activity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_user_activity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // optional bool is_request_wait_for_negative_proximity = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_is_request_wait_for_negative_proximity(&_has_bits_);
          is_request_wait_for_negative_proximity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_sandman_scheduled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_sandman_scheduled(&_has_bits_);
          is_sandman_scheduled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_sandman_summoned = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_sandman_summoned(&_has_bits_);
          is_sandman_summoned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_battery_level_low = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_is_battery_level_low(&_has_bits_);
          is_battery_level_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_light_device_idle_mode = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_is_light_device_idle_mode(&_has_bits_);
          is_light_device_idle_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_device_idle_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_is_device_idle_mode(&_has_bits_);
          is_device_idle_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 device_idle_whitelist = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_device_idle_whitelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 472);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_device_idle_whitelist(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 device_idle_temp_whitelist = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_device_idle_temp_whitelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 480);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_device_idle_temp_whitelist(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_wake_time_ms = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_last_wake_time_ms(&_has_bits_);
          last_wake_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_sleep_time_ms = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_last_sleep_time_ms(&_has_bits_);
          last_sleep_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_user_activity_time_ms = 31 [deprecated = true];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_last_user_activity_time_ms(&_has_bits_);
          last_user_activity_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_user_activity_time_no_change_lights_ms = 32 [deprecated = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_last_user_activity_time_no_change_lights_ms(&_has_bits_);
          last_user_activity_time_no_change_lights_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_interactive_power_hint_time_ms = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_interactive_power_hint_time_ms(&_has_bits_);
          last_interactive_power_hint_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_screen_brightness_boost_time_ms = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_screen_brightness_boost_time_ms(&_has_bits_);
          last_screen_brightness_boost_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_screen_brightness_boost_in_progress = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_screen_brightness_boost_in_progress(&_has_bits_);
          is_screen_brightness_boost_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_display_ready = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_display_ready(&_has_bits_);
          is_display_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_holding_wake_lock_suspend_blocker = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_holding_wake_lock_suspend_blocker(&_has_bits_);
          is_holding_wake_lock_suspend_blocker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_holding_display_suspend_blocker = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_holding_display_suspend_blocker(&_has_bits_);
          is_holding_display_suspend_blocker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto settings_and_configuration = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_settings_and_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 sleep_timeout_ms = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sleep_timeout_ms(&_has_bits_);
          sleep_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_off_timeout_ms = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_screen_off_timeout_ms(&_has_bits_);
          screen_off_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_dim_duration_ms = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_screen_dim_duration_ms(&_has_bits_);
          screen_dim_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_uids_changing = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_are_uids_changing(&_has_bits_);
          are_uids_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_uids_changed = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_are_uids_changed(&_has_bits_);
          are_uids_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.power.PowerManagerServiceDumpProto.UidStateProto uid_states = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_uid_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 746);
        } else goto handle_unusual;
        continue;
      // optional .android.os.LooperProto looper = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_looper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.power.WakeLockProto wake_locks = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wake_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 762);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.power.SuspendBlockerProto suspend_blockers = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_suspend_blockers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 898);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.WirelessChargerDetectorProto wireless_charger_detector = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_wireless_charger_detector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.BatterySaverStateMachineProto battery_saver_state_machine = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_battery_saver_state_machine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 attentive_timeout_ms = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_attentive_timeout_ms(&_has_bits_);
          attentive_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 enhanced_discharge_time_elapsed = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_enhanced_discharge_time_elapsed(&_has_bits_);
          enhanced_discharge_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_enhanced_discharge_time_updated_elapsed = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_last_enhanced_discharge_time_updated_elapsed(&_has_bits_);
          last_enhanced_discharge_time_updated_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enhanced_discharge_prediction_personalized = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_enhanced_discharge_prediction_personalized(&_has_bits_);
          is_enhanced_discharge_prediction_personalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerManagerServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto constants = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dirty = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_dirty(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dirty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::PowerManagerInternalProto_Wakefulness_IsValid(value)) {
            set_wakefulness(static_cast< ::android::os::PowerManagerInternalProto_Wakefulness >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wakefulness_changing = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_wakefulness_changing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wakefulness_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_powered = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_powered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_powered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.BatteryPluggedStateEnum plug_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::BatteryPluggedStateEnum_IsValid(value)) {
            set_plug_type(static_cast< ::android::os::BatteryPluggedStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battery_level = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_battery_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battery_level_when_dream_started = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_battery_level_when_dream_started(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_level_when_dream_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.IntentProto.DockState dock_state = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::content::IntentProto_DockState_IsValid(value)) {
            set_dock_state(static_cast< ::android::content::IntentProto_DockState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stay_on = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_is_stay_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stay_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_proximity_positive = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_is_proximity_positive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_proximity_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_boot_completed = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_is_boot_completed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_boot_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_system_ready = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_is_system_ready(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hal_auto_suspend_mode_enabled = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_is_hal_auto_suspend_mode_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hal_auto_suspend_mode_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hal_auto_interactive_mode_enabled = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_is_hal_auto_interactive_mode_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hal_auto_interactive_mode_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto active_wake_locks = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_wake_locks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 notify_long_scheduled_ms = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_notify_long_scheduled_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &notify_long_scheduled_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 notify_long_dispatched_ms = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_notify_long_dispatched_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &notify_long_dispatched_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 notify_long_next_check_ms = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_notify_long_next_check_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &notify_long_next_check_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto user_activity = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_request_wait_for_negative_proximity = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_is_request_wait_for_negative_proximity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_request_wait_for_negative_proximity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_sandman_scheduled = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_is_sandman_scheduled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sandman_scheduled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_sandman_summoned = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_is_sandman_summoned(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sandman_summoned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_battery_level_low = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_is_battery_level_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_battery_level_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_light_device_idle_mode = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_is_light_device_idle_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_light_device_idle_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_device_idle_mode = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_is_device_idle_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_device_idle_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 device_idle_whitelist = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 216u, input, this->mutable_device_idle_whitelist())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_device_idle_whitelist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 device_idle_temp_whitelist = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 224u, input, this->mutable_device_idle_temp_whitelist())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_device_idle_temp_whitelist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_wake_time_ms = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_last_wake_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_wake_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_sleep_time_ms = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_last_sleep_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sleep_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_user_activity_time_ms = 31 [deprecated = true];
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          _Internal::set_has_last_user_activity_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_user_activity_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_user_activity_time_no_change_lights_ms = 32 [deprecated = true];
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_last_user_activity_time_no_change_lights_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_user_activity_time_no_change_lights_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_interactive_power_hint_time_ms = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_last_interactive_power_hint_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_interactive_power_hint_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_screen_brightness_boost_time_ms = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          _Internal::set_has_last_screen_brightness_boost_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_screen_brightness_boost_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_screen_brightness_boost_in_progress = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          _Internal::set_has_is_screen_brightness_boost_in_progress(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_screen_brightness_boost_in_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_display_ready = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          _Internal::set_has_is_display_ready(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_display_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_holding_wake_lock_suspend_blocker = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {
          _Internal::set_has_is_holding_wake_lock_suspend_blocker(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_holding_wake_lock_suspend_blocker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_holding_display_suspend_blocker = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          _Internal::set_has_is_holding_display_suspend_blocker(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_holding_display_suspend_blocker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto settings_and_configuration = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_and_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 sleep_timeout_ms = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          _Internal::set_has_sleep_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sleep_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_off_timeout_ms = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {
          _Internal::set_has_screen_off_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_off_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_dim_duration_ms = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          _Internal::set_has_screen_dim_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_dim_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_uids_changing = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {
          _Internal::set_has_are_uids_changing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_uids_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_uids_changed = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (352 & 0xFF)) {
          _Internal::set_has_are_uids_changed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_uids_changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.power.PowerManagerServiceDumpProto.UidStateProto uid_states = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_uid_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.LooperProto looper = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_looper()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.power.WakeLockProto wake_locks = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wake_locks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.power.SuspendBlockerProto suspend_blockers = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_suspend_blockers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.WirelessChargerDetectorProto wireless_charger_detector = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wireless_charger_detector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.BatterySaverStateMachineProto battery_saver_state_machine = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_battery_saver_state_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 attentive_timeout_ms = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (408 & 0xFF)) {
          _Internal::set_has_attentive_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attentive_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 enhanced_discharge_time_elapsed = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (416 & 0xFF)) {
          _Internal::set_has_enhanced_discharge_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &enhanced_discharge_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_enhanced_discharge_time_updated_elapsed = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (424 & 0xFF)) {
          _Internal::set_has_last_enhanced_discharge_time_updated_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_enhanced_discharge_time_updated_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_enhanced_discharge_prediction_personalized = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (432 & 0xFF)) {
          _Internal::set_has_is_enhanced_discharge_prediction_personalized(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enhanced_discharge_prediction_personalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerManagerServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerManagerServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto constants = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::constants(this), output);
  }

  // optional int32 dirty = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->dirty(), output);
  }

  // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 3;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->wakefulness(), output);
  }

  // optional bool is_wakefulness_changing = 4;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_wakefulness_changing(), output);
  }

  // optional bool is_powered = 5;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_powered(), output);
  }

  // optional .android.os.BatteryPluggedStateEnum plug_type = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->plug_type(), output);
  }

  // optional int32 battery_level = 7;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->battery_level(), output);
  }

  // optional int32 battery_level_when_dream_started = 8;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->battery_level_when_dream_started(), output);
  }

  // optional .android.content.IntentProto.DockState dock_state = 9;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->dock_state(), output);
  }

  // optional bool is_stay_on = 10;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->is_stay_on(), output);
  }

  // optional bool is_proximity_positive = 11;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->is_proximity_positive(), output);
  }

  // optional bool is_boot_completed = 12;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->is_boot_completed(), output);
  }

  // optional bool is_system_ready = 13;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->is_system_ready(), output);
  }

  // optional bool is_hal_auto_suspend_mode_enabled = 14;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->is_hal_auto_suspend_mode_enabled(), output);
  }

  // optional bool is_hal_auto_interactive_mode_enabled = 15;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->is_hal_auto_interactive_mode_enabled(), output);
  }

  // optional .com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto active_wake_locks = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::active_wake_locks(this), output);
  }

  // optional int64 notify_long_scheduled_ms = 17;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->notify_long_scheduled_ms(), output);
  }

  // optional int64 notify_long_dispatched_ms = 18;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->notify_long_dispatched_ms(), output);
  }

  // optional int64 notify_long_next_check_ms = 19;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->notify_long_next_check_ms(), output);
  }

  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto user_activity = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_activity_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->user_activity(static_cast<int>(i)),
      output);
  }

  // optional bool is_request_wait_for_negative_proximity = 21;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->is_request_wait_for_negative_proximity(), output);
  }

  // optional bool is_sandman_scheduled = 22;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->is_sandman_scheduled(), output);
  }

  // optional bool is_sandman_summoned = 23;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->is_sandman_summoned(), output);
  }

  // optional bool is_battery_level_low = 24;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->is_battery_level_low(), output);
  }

  // optional bool is_light_device_idle_mode = 25;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->is_light_device_idle_mode(), output);
  }

  // optional bool is_device_idle_mode = 26;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->is_device_idle_mode(), output);
  }

  // repeated int32 device_idle_whitelist = 27;
  for (int i = 0, n = this->device_idle_whitelist_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      27, this->device_idle_whitelist(i), output);
  }

  // repeated int32 device_idle_temp_whitelist = 28;
  for (int i = 0, n = this->device_idle_temp_whitelist_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      28, this->device_idle_temp_whitelist(i), output);
  }

  // optional int64 last_wake_time_ms = 29;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(29, this->last_wake_time_ms(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 last_sleep_time_ms = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(30, this->last_sleep_time_ms(), output);
  }

  // optional int64 last_user_activity_time_ms = 31 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(31, this->last_user_activity_time_ms(), output);
  }

  // optional int64 last_user_activity_time_no_change_lights_ms = 32 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(32, this->last_user_activity_time_no_change_lights_ms(), output);
  }

  // optional int64 last_interactive_power_hint_time_ms = 33;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(33, this->last_interactive_power_hint_time_ms(), output);
  }

  // optional int64 last_screen_brightness_boost_time_ms = 34;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(34, this->last_screen_brightness_boost_time_ms(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_screen_brightness_boost_in_progress = 35;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(35, this->is_screen_brightness_boost_in_progress(), output);
  }

  // optional bool is_display_ready = 36;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->is_display_ready(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_holding_wake_lock_suspend_blocker = 37;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(37, this->is_holding_wake_lock_suspend_blocker(), output);
  }

  // optional bool is_holding_display_suspend_blocker = 38;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(38, this->is_holding_display_suspend_blocker(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto settings_and_configuration = 39;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, _Internal::settings_and_configuration(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional sint32 sleep_timeout_ms = 40;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(40, this->sleep_timeout_ms(), output);
  }

  // optional int32 screen_off_timeout_ms = 41;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(41, this->screen_off_timeout_ms(), output);
  }

  // optional int32 screen_dim_duration_ms = 42;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(42, this->screen_dim_duration_ms(), output);
  }

  // optional bool are_uids_changing = 43;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(43, this->are_uids_changing(), output);
  }

  // optional bool are_uids_changed = 44;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(44, this->are_uids_changed(), output);
  }

  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UidStateProto uid_states = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      45,
      this->uid_states(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.os.LooperProto looper = 46;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, _Internal::looper(this), output);
  }

  // repeated .com.android.server.power.WakeLockProto wake_locks = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wake_locks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      47,
      this->wake_locks(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.power.SuspendBlockerProto suspend_blockers = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->suspend_blockers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      48,
      this->suspend_blockers(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.power.WirelessChargerDetectorProto wireless_charger_detector = 49;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, _Internal::wireless_charger_detector(this), output);
  }

  // optional .com.android.server.power.BatterySaverStateMachineProto battery_saver_state_machine = 50;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, _Internal::battery_saver_state_machine(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional sint32 attentive_timeout_ms = 51;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(51, this->attentive_timeout_ms(), output);
  }

  // optional int64 enhanced_discharge_time_elapsed = 52;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(52, this->enhanced_discharge_time_elapsed(), output);
  }

  // optional int64 last_enhanced_discharge_time_updated_elapsed = 53;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(53, this->last_enhanced_discharge_time_updated_elapsed(), output);
  }

  // optional bool is_enhanced_discharge_prediction_personalized = 54;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(54, this->is_enhanced_discharge_prediction_personalized(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerManagerServiceDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerManagerServiceDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto constants = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::constants(this), target);
  }

  // optional int32 dirty = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->dirty(), target);
  }

  // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->wakefulness(), target);
  }

  // optional bool is_wakefulness_changing = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_wakefulness_changing(), target);
  }

  // optional bool is_powered = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_powered(), target);
  }

  // optional .android.os.BatteryPluggedStateEnum plug_type = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->plug_type(), target);
  }

  // optional int32 battery_level = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->battery_level(), target);
  }

  // optional int32 battery_level_when_dream_started = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->battery_level_when_dream_started(), target);
  }

  // optional .android.content.IntentProto.DockState dock_state = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->dock_state(), target);
  }

  // optional bool is_stay_on = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->is_stay_on(), target);
  }

  // optional bool is_proximity_positive = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->is_proximity_positive(), target);
  }

  // optional bool is_boot_completed = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->is_boot_completed(), target);
  }

  // optional bool is_system_ready = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->is_system_ready(), target);
  }

  // optional bool is_hal_auto_suspend_mode_enabled = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->is_hal_auto_suspend_mode_enabled(), target);
  }

  // optional bool is_hal_auto_interactive_mode_enabled = 15;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->is_hal_auto_interactive_mode_enabled(), target);
  }

  // optional .com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto active_wake_locks = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::active_wake_locks(this), target);
  }

  // optional int64 notify_long_scheduled_ms = 17;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->notify_long_scheduled_ms(), target);
  }

  // optional int64 notify_long_dispatched_ms = 18;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->notify_long_dispatched_ms(), target);
  }

  // optional int64 notify_long_next_check_ms = 19;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->notify_long_next_check_ms(), target);
  }

  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto user_activity = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_activity_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->user_activity(static_cast<int>(i)), target);
  }

  // optional bool is_request_wait_for_negative_proximity = 21;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->is_request_wait_for_negative_proximity(), target);
  }

  // optional bool is_sandman_scheduled = 22;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->is_sandman_scheduled(), target);
  }

  // optional bool is_sandman_summoned = 23;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->is_sandman_summoned(), target);
  }

  // optional bool is_battery_level_low = 24;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->is_battery_level_low(), target);
  }

  // optional bool is_light_device_idle_mode = 25;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->is_light_device_idle_mode(), target);
  }

  // optional bool is_device_idle_mode = 26;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->is_device_idle_mode(), target);
  }

  // repeated int32 device_idle_whitelist = 27;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(27, this->device_idle_whitelist_, target);

  // repeated int32 device_idle_temp_whitelist = 28;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(28, this->device_idle_temp_whitelist_, target);

  // optional int64 last_wake_time_ms = 29;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->last_wake_time_ms(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 last_sleep_time_ms = 30;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->last_sleep_time_ms(), target);
  }

  // optional int64 last_user_activity_time_ms = 31 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->last_user_activity_time_ms(), target);
  }

  // optional int64 last_user_activity_time_no_change_lights_ms = 32 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->last_user_activity_time_no_change_lights_ms(), target);
  }

  // optional int64 last_interactive_power_hint_time_ms = 33;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(33, this->last_interactive_power_hint_time_ms(), target);
  }

  // optional int64 last_screen_brightness_boost_time_ms = 34;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(34, this->last_screen_brightness_boost_time_ms(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_screen_brightness_boost_in_progress = 35;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->is_screen_brightness_boost_in_progress(), target);
  }

  // optional bool is_display_ready = 36;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->is_display_ready(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_holding_wake_lock_suspend_blocker = 37;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->is_holding_wake_lock_suspend_blocker(), target);
  }

  // optional bool is_holding_display_suspend_blocker = 38;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->is_holding_display_suspend_blocker(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto settings_and_configuration = 39;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, _Internal::settings_and_configuration(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional sint32 sleep_timeout_ms = 40;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(40, this->sleep_timeout_ms(), target);
  }

  // optional int32 screen_off_timeout_ms = 41;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->screen_off_timeout_ms(), target);
  }

  // optional int32 screen_dim_duration_ms = 42;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->screen_dim_duration_ms(), target);
  }

  // optional bool are_uids_changing = 43;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->are_uids_changing(), target);
  }

  // optional bool are_uids_changed = 44;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->are_uids_changed(), target);
  }

  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UidStateProto uid_states = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45, this->uid_states(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.os.LooperProto looper = 46;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46, _Internal::looper(this), target);
  }

  // repeated .com.android.server.power.WakeLockProto wake_locks = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wake_locks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        47, this->wake_locks(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.power.SuspendBlockerProto suspend_blockers = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->suspend_blockers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, this->suspend_blockers(static_cast<int>(i)), target);
  }

  // optional .com.android.server.power.WirelessChargerDetectorProto wireless_charger_detector = 49;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        49, _Internal::wireless_charger_detector(this), target);
  }

  // optional .com.android.server.power.BatterySaverStateMachineProto battery_saver_state_machine = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, _Internal::battery_saver_state_machine(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional sint32 attentive_timeout_ms = 51;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(51, this->attentive_timeout_ms(), target);
  }

  // optional int64 enhanced_discharge_time_elapsed = 52;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(52, this->enhanced_discharge_time_elapsed(), target);
  }

  // optional int64 last_enhanced_discharge_time_updated_elapsed = 53;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(53, this->last_enhanced_discharge_time_updated_elapsed(), target);
  }

  // optional bool is_enhanced_discharge_prediction_personalized = 54;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->is_enhanced_discharge_prediction_personalized(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerManagerServiceDumpProto)
  return target;
}

size_t PowerManagerServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerManagerServiceDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto user_activity = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->user_activity_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_activity(static_cast<int>(i)));
    }
  }

  // repeated int32 device_idle_whitelist = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->device_idle_whitelist_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_idle_whitelist_size());
    total_size += data_size;
  }

  // repeated int32 device_idle_temp_whitelist = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->device_idle_temp_whitelist_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_idle_temp_whitelist_size());
    total_size += data_size;
  }

  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UidStateProto uid_states = 45;
  {
    unsigned int count = static_cast<unsigned int>(this->uid_states_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->uid_states(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.power.WakeLockProto wake_locks = 47;
  {
    unsigned int count = static_cast<unsigned int>(this->wake_locks_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wake_locks(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.power.SuspendBlockerProto suspend_blockers = 48;
  {
    unsigned int count = static_cast<unsigned int>(this->suspend_blockers_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->suspend_blockers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto constants = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constants_);
    }

    // optional .com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto active_wake_locks = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_wake_locks_);
    }

    // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto settings_and_configuration = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_and_configuration_);
    }

    // optional .android.os.LooperProto looper = 46;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *looper_);
    }

    // optional .com.android.server.power.WirelessChargerDetectorProto wireless_charger_detector = 49;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wireless_charger_detector_);
    }

    // optional .com.android.server.power.BatterySaverStateMachineProto battery_saver_state_machine = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *battery_saver_state_machine_);
    }

    // optional int32 dirty = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dirty());
    }

    // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->wakefulness());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.os.BatteryPluggedStateEnum plug_type = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->plug_type());
    }

    // optional int32 battery_level = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->battery_level());
    }

    // optional bool is_wakefulness_changing = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_powered = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_stay_on = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_proximity_positive = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional int32 battery_level_when_dream_started = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->battery_level_when_dream_started());
    }

    // optional .android.content.IntentProto.DockState dock_state = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dock_state());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_boot_completed = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool is_system_ready = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool is_hal_auto_suspend_mode_enabled = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool is_hal_auto_interactive_mode_enabled = 15;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional int64 notify_long_scheduled_ms = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->notify_long_scheduled_ms());
    }

    // optional int64 notify_long_dispatched_ms = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->notify_long_dispatched_ms());
    }

    // optional int64 notify_long_next_check_ms = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->notify_long_next_check_ms());
    }

    // optional bool is_request_wait_for_negative_proximity = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool is_sandman_scheduled = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_sandman_summoned = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_battery_level_low = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_light_device_idle_mode = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_device_idle_mode = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_screen_brightness_boost_in_progress = 35;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_display_ready = 36;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional int64 last_wake_time_ms = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_wake_time_ms());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 last_sleep_time_ms = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_sleep_time_ms());
    }

    // optional int64 last_user_activity_time_ms = 31 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_user_activity_time_ms());
    }

    // optional int64 last_user_activity_time_no_change_lights_ms = 32 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_user_activity_time_no_change_lights_ms());
    }

    // optional int64 last_interactive_power_hint_time_ms = 33;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_interactive_power_hint_time_ms());
    }

    // optional int64 last_screen_brightness_boost_time_ms = 34;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_screen_brightness_boost_time_ms());
    }

    // optional sint32 sleep_timeout_ms = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->sleep_timeout_ms());
    }

    // optional bool is_holding_wake_lock_suspend_blocker = 37;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool is_holding_display_suspend_blocker = 38;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool are_uids_changing = 43;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool are_uids_changed = 44;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional int32 screen_off_timeout_ms = 41;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_off_timeout_ms());
    }

    // optional int32 screen_dim_duration_ms = 42;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_dim_duration_ms());
    }

    // optional int64 enhanced_discharge_time_elapsed = 52;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->enhanced_discharge_time_elapsed());
    }

    // optional sint32 attentive_timeout_ms = 51;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->attentive_timeout_ms());
    }

    // optional bool is_enhanced_discharge_prediction_personalized = 54;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int64 last_enhanced_discharge_time_updated_elapsed = 53;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_enhanced_discharge_time_updated_elapsed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerServiceDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerManagerServiceDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerManagerServiceDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerManagerServiceDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerManagerServiceDumpProto)
    MergeFrom(*source);
  }
}

void PowerManagerServiceDumpProto::MergeFrom(const PowerManagerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerManagerServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_activity_.MergeFrom(from.user_activity_);
  device_idle_whitelist_.MergeFrom(from.device_idle_whitelist_);
  device_idle_temp_whitelist_.MergeFrom(from.device_idle_temp_whitelist_);
  uid_states_.MergeFrom(from.uid_states_);
  wake_locks_.MergeFrom(from.wake_locks_);
  suspend_blockers_.MergeFrom(from.suspend_blockers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_constants()->::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto::MergeFrom(from.constants());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_active_wake_locks()->::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto::MergeFrom(from.active_wake_locks());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_settings_and_configuration()->::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto::MergeFrom(from.settings_and_configuration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_looper()->::android::os::LooperProto::MergeFrom(from.looper());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_wireless_charger_detector()->::com::android::server::power::WirelessChargerDetectorProto::MergeFrom(from.wireless_charger_detector());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_battery_saver_state_machine()->::com::android::server::power::BatterySaverStateMachineProto::MergeFrom(from.battery_saver_state_machine());
    }
    if (cached_has_bits & 0x00000040u) {
      dirty_ = from.dirty_;
    }
    if (cached_has_bits & 0x00000080u) {
      wakefulness_ = from.wakefulness_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      plug_type_ = from.plug_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      battery_level_ = from.battery_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_wakefulness_changing_ = from.is_wakefulness_changing_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_powered_ = from.is_powered_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_stay_on_ = from.is_stay_on_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_proximity_positive_ = from.is_proximity_positive_;
    }
    if (cached_has_bits & 0x00004000u) {
      battery_level_when_dream_started_ = from.battery_level_when_dream_started_;
    }
    if (cached_has_bits & 0x00008000u) {
      dock_state_ = from.dock_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_boot_completed_ = from.is_boot_completed_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_system_ready_ = from.is_system_ready_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_hal_auto_suspend_mode_enabled_ = from.is_hal_auto_suspend_mode_enabled_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_hal_auto_interactive_mode_enabled_ = from.is_hal_auto_interactive_mode_enabled_;
    }
    if (cached_has_bits & 0x00100000u) {
      notify_long_scheduled_ms_ = from.notify_long_scheduled_ms_;
    }
    if (cached_has_bits & 0x00200000u) {
      notify_long_dispatched_ms_ = from.notify_long_dispatched_ms_;
    }
    if (cached_has_bits & 0x00400000u) {
      notify_long_next_check_ms_ = from.notify_long_next_check_ms_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_request_wait_for_negative_proximity_ = from.is_request_wait_for_negative_proximity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      is_sandman_scheduled_ = from.is_sandman_scheduled_;
    }
    if (cached_has_bits & 0x02000000u) {
      is_sandman_summoned_ = from.is_sandman_summoned_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_battery_level_low_ = from.is_battery_level_low_;
    }
    if (cached_has_bits & 0x08000000u) {
      is_light_device_idle_mode_ = from.is_light_device_idle_mode_;
    }
    if (cached_has_bits & 0x10000000u) {
      is_device_idle_mode_ = from.is_device_idle_mode_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_screen_brightness_boost_in_progress_ = from.is_screen_brightness_boost_in_progress_;
    }
    if (cached_has_bits & 0x40000000u) {
      is_display_ready_ = from.is_display_ready_;
    }
    if (cached_has_bits & 0x80000000u) {
      last_wake_time_ms_ = from.last_wake_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      last_sleep_time_ms_ = from.last_sleep_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_user_activity_time_ms_ = from.last_user_activity_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_user_activity_time_no_change_lights_ms_ = from.last_user_activity_time_no_change_lights_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_interactive_power_hint_time_ms_ = from.last_interactive_power_hint_time_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_screen_brightness_boost_time_ms_ = from.last_screen_brightness_boost_time_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      sleep_timeout_ms_ = from.sleep_timeout_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_holding_wake_lock_suspend_blocker_ = from.is_holding_wake_lock_suspend_blocker_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_holding_display_suspend_blocker_ = from.is_holding_display_suspend_blocker_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      are_uids_changing_ = from.are_uids_changing_;
    }
    if (cached_has_bits & 0x00000200u) {
      are_uids_changed_ = from.are_uids_changed_;
    }
    if (cached_has_bits & 0x00000400u) {
      screen_off_timeout_ms_ = from.screen_off_timeout_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      screen_dim_duration_ms_ = from.screen_dim_duration_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      enhanced_discharge_time_elapsed_ = from.enhanced_discharge_time_elapsed_;
    }
    if (cached_has_bits & 0x00002000u) {
      attentive_timeout_ms_ = from.attentive_timeout_ms_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_enhanced_discharge_prediction_personalized_ = from.is_enhanced_discharge_prediction_personalized_;
    }
    if (cached_has_bits & 0x00008000u) {
      last_enhanced_discharge_time_updated_elapsed_ = from.last_enhanced_discharge_time_updated_elapsed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PowerManagerServiceDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerManagerServiceDumpProto::CopyFrom(const PowerManagerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerManagerServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerServiceDumpProto::IsInitialized() const {
  return true;
}

void PowerManagerServiceDumpProto::InternalSwap(PowerManagerServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  CastToBase(&user_activity_)->InternalSwap(CastToBase(&other->user_activity_));
  device_idle_whitelist_.InternalSwap(&other->device_idle_whitelist_);
  device_idle_temp_whitelist_.InternalSwap(&other->device_idle_temp_whitelist_);
  CastToBase(&uid_states_)->InternalSwap(CastToBase(&other->uid_states_));
  CastToBase(&wake_locks_)->InternalSwap(CastToBase(&other->wake_locks_));
  CastToBase(&suspend_blockers_)->InternalSwap(CastToBase(&other->suspend_blockers_));
  swap(constants_, other->constants_);
  swap(active_wake_locks_, other->active_wake_locks_);
  swap(settings_and_configuration_, other->settings_and_configuration_);
  swap(looper_, other->looper_);
  swap(wireless_charger_detector_, other->wireless_charger_detector_);
  swap(battery_saver_state_machine_, other->battery_saver_state_machine_);
  swap(dirty_, other->dirty_);
  swap(wakefulness_, other->wakefulness_);
  swap(plug_type_, other->plug_type_);
  swap(battery_level_, other->battery_level_);
  swap(is_wakefulness_changing_, other->is_wakefulness_changing_);
  swap(is_powered_, other->is_powered_);
  swap(is_stay_on_, other->is_stay_on_);
  swap(is_proximity_positive_, other->is_proximity_positive_);
  swap(battery_level_when_dream_started_, other->battery_level_when_dream_started_);
  swap(dock_state_, other->dock_state_);
  swap(is_boot_completed_, other->is_boot_completed_);
  swap(is_system_ready_, other->is_system_ready_);
  swap(is_hal_auto_suspend_mode_enabled_, other->is_hal_auto_suspend_mode_enabled_);
  swap(is_hal_auto_interactive_mode_enabled_, other->is_hal_auto_interactive_mode_enabled_);
  swap(notify_long_scheduled_ms_, other->notify_long_scheduled_ms_);
  swap(notify_long_dispatched_ms_, other->notify_long_dispatched_ms_);
  swap(notify_long_next_check_ms_, other->notify_long_next_check_ms_);
  swap(is_request_wait_for_negative_proximity_, other->is_request_wait_for_negative_proximity_);
  swap(is_sandman_scheduled_, other->is_sandman_scheduled_);
  swap(is_sandman_summoned_, other->is_sandman_summoned_);
  swap(is_battery_level_low_, other->is_battery_level_low_);
  swap(is_light_device_idle_mode_, other->is_light_device_idle_mode_);
  swap(is_device_idle_mode_, other->is_device_idle_mode_);
  swap(is_screen_brightness_boost_in_progress_, other->is_screen_brightness_boost_in_progress_);
  swap(is_display_ready_, other->is_display_ready_);
  swap(last_wake_time_ms_, other->last_wake_time_ms_);
  swap(last_sleep_time_ms_, other->last_sleep_time_ms_);
  swap(last_user_activity_time_ms_, other->last_user_activity_time_ms_);
  swap(last_user_activity_time_no_change_lights_ms_, other->last_user_activity_time_no_change_lights_ms_);
  swap(last_interactive_power_hint_time_ms_, other->last_interactive_power_hint_time_ms_);
  swap(last_screen_brightness_boost_time_ms_, other->last_screen_brightness_boost_time_ms_);
  swap(sleep_timeout_ms_, other->sleep_timeout_ms_);
  swap(is_holding_wake_lock_suspend_blocker_, other->is_holding_wake_lock_suspend_blocker_);
  swap(is_holding_display_suspend_blocker_, other->is_holding_display_suspend_blocker_);
  swap(are_uids_changing_, other->are_uids_changing_);
  swap(are_uids_changed_, other->are_uids_changed_);
  swap(screen_off_timeout_ms_, other->screen_off_timeout_ms_);
  swap(screen_dim_duration_ms_, other->screen_dim_duration_ms_);
  swap(enhanced_discharge_time_elapsed_, other->enhanced_discharge_time_elapsed_);
  swap(attentive_timeout_ms_, other->attentive_timeout_ms_);
  swap(is_enhanced_discharge_prediction_personalized_, other->is_enhanced_discharge_prediction_personalized_);
  swap(last_enhanced_discharge_time_updated_elapsed_, other->last_enhanced_discharge_time_updated_elapsed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerManagerServiceDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuspendBlockerProto::InitAsDefaultInstance() {
}
class SuspendBlockerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SuspendBlockerProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reference_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SuspendBlockerProto::SuspendBlockerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.SuspendBlockerProto)
}
SuspendBlockerProto::SuspendBlockerProto(const SuspendBlockerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  reference_count_ = from.reference_count_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.SuspendBlockerProto)
}

void SuspendBlockerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_count_ = 0;
}

SuspendBlockerProto::~SuspendBlockerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.SuspendBlockerProto)
  SharedDtor();
}

void SuspendBlockerProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SuspendBlockerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuspendBlockerProto& SuspendBlockerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuspendBlockerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void SuspendBlockerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.SuspendBlockerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  reference_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SuspendBlockerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.power.SuspendBlockerProto.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reference_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reference_count(&has_bits);
          reference_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SuspendBlockerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.SuspendBlockerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.power.SuspendBlockerProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reference_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_reference_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reference_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.SuspendBlockerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.SuspendBlockerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SuspendBlockerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.SuspendBlockerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.power.SuspendBlockerProto.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 reference_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->reference_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.SuspendBlockerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* SuspendBlockerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.SuspendBlockerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.power.SuspendBlockerProto.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 reference_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->reference_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.SuspendBlockerProto)
  return target;
}

size_t SuspendBlockerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.SuspendBlockerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 reference_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->reference_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuspendBlockerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.SuspendBlockerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SuspendBlockerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuspendBlockerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.SuspendBlockerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.SuspendBlockerProto)
    MergeFrom(*source);
  }
}

void SuspendBlockerProto::MergeFrom(const SuspendBlockerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.SuspendBlockerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      reference_count_ = from.reference_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuspendBlockerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.SuspendBlockerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuspendBlockerProto::CopyFrom(const SuspendBlockerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.SuspendBlockerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuspendBlockerProto::IsInitialized() const {
  return true;
}

void SuspendBlockerProto::InternalSwap(SuspendBlockerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reference_count_, other->reference_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuspendBlockerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WakeLockProto_WakeLockFlagsProto::InitAsDefaultInstance() {
}
class WakeLockProto_WakeLockFlagsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WakeLockProto_WakeLockFlagsProto>()._has_bits_);
  static void set_has_is_acquire_causes_wakeup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_on_after_release(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WakeLockProto_WakeLockFlagsProto::WakeLockProto_WakeLockFlagsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
}
WakeLockProto_WakeLockFlagsProto::WakeLockProto_WakeLockFlagsProto(const WakeLockProto_WakeLockFlagsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_acquire_causes_wakeup_, &from.is_acquire_causes_wakeup_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_on_after_release_) -
    reinterpret_cast<char*>(&is_acquire_causes_wakeup_)) + sizeof(is_on_after_release_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
}

void WakeLockProto_WakeLockFlagsProto::SharedCtor() {
  ::memset(&is_acquire_causes_wakeup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_on_after_release_) -
      reinterpret_cast<char*>(&is_acquire_causes_wakeup_)) + sizeof(is_on_after_release_));
}

WakeLockProto_WakeLockFlagsProto::~WakeLockProto_WakeLockFlagsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  SharedDtor();
}

void WakeLockProto_WakeLockFlagsProto::SharedDtor() {
}

void WakeLockProto_WakeLockFlagsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WakeLockProto_WakeLockFlagsProto& WakeLockProto_WakeLockFlagsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WakeLockProto_WakeLockFlagsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void WakeLockProto_WakeLockFlagsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_acquire_causes_wakeup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_on_after_release_) -
      reinterpret_cast<char*>(&is_acquire_causes_wakeup_)) + sizeof(is_on_after_release_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WakeLockProto_WakeLockFlagsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_acquire_causes_wakeup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_acquire_causes_wakeup(&has_bits);
          is_acquire_causes_wakeup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_on_after_release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_on_after_release(&has_bits);
          is_on_after_release_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WakeLockProto_WakeLockFlagsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_acquire_causes_wakeup = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_acquire_causes_wakeup(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_acquire_causes_wakeup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_on_after_release = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_on_after_release(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_after_release_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WakeLockProto_WakeLockFlagsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_acquire_causes_wakeup = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_acquire_causes_wakeup(), output);
  }

  // optional bool is_on_after_release = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_on_after_release(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* WakeLockProto_WakeLockFlagsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_acquire_causes_wakeup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_acquire_causes_wakeup(), target);
  }

  // optional bool is_on_after_release = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_on_after_release(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  return target;
}

size_t WakeLockProto_WakeLockFlagsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_acquire_causes_wakeup = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_on_after_release = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WakeLockProto_WakeLockFlagsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WakeLockProto_WakeLockFlagsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WakeLockProto_WakeLockFlagsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
    MergeFrom(*source);
  }
}

void WakeLockProto_WakeLockFlagsProto::MergeFrom(const WakeLockProto_WakeLockFlagsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_acquire_causes_wakeup_ = from.is_acquire_causes_wakeup_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_on_after_release_ = from.is_on_after_release_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WakeLockProto_WakeLockFlagsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeLockProto_WakeLockFlagsProto::CopyFrom(const WakeLockProto_WakeLockFlagsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeLockProto_WakeLockFlagsProto::IsInitialized() const {
  return true;
}

void WakeLockProto_WakeLockFlagsProto::InternalSwap(WakeLockProto_WakeLockFlagsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_acquire_causes_wakeup_, other->is_acquire_causes_wakeup_);
  swap(is_on_after_release_, other->is_on_after_release_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WakeLockProto_WakeLockFlagsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WakeLockProto::InitAsDefaultInstance() {
  ::com::android::server::power::_WakeLockProto_default_instance_._instance.get_mutable()->flags_ = const_cast< ::com::android::server::power::WakeLockProto_WakeLockFlagsProto*>(
      ::com::android::server::power::WakeLockProto_WakeLockFlagsProto::internal_default_instance());
  ::com::android::server::power::_WakeLockProto_default_instance_._instance.get_mutable()->work_source_ = const_cast< ::android::os::WorkSourceProto*>(
      ::android::os::WorkSourceProto::internal_default_instance());
}
class WakeLockProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WakeLockProto>()._has_bits_);
  static void set_has_lock_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::power::WakeLockProto_WakeLockFlagsProto& flags(const WakeLockProto* msg);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_acq_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_notified_long(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::os::WorkSourceProto& work_source(const WakeLockProto* msg);
  static void set_has_work_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::com::android::server::power::WakeLockProto_WakeLockFlagsProto&
WakeLockProto::_Internal::flags(const WakeLockProto* msg) {
  return *msg->flags_;
}
const ::android::os::WorkSourceProto&
WakeLockProto::_Internal::work_source(const WakeLockProto* msg) {
  return *msg->work_source_;
}
void WakeLockProto::clear_work_source() {
  if (work_source_ != nullptr) work_source_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
WakeLockProto::WakeLockProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.WakeLockProto)
}
WakeLockProto::WakeLockProto(const WakeLockProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.has_flags()) {
    flags_ = new ::com::android::server::power::WakeLockProto_WakeLockFlagsProto(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_work_source()) {
    work_source_ = new ::android::os::WorkSourceProto(*from.work_source_);
  } else {
    work_source_ = nullptr;
  }
  ::memcpy(&acq_ms_, &from.acq_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_level_) -
    reinterpret_cast<char*>(&acq_ms_)) + sizeof(lock_level_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.WakeLockProto)
}

void WakeLockProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(pid_));
  lock_level_ = 1;
}

WakeLockProto::~WakeLockProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.WakeLockProto)
  SharedDtor();
}

void WakeLockProto::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete work_source_;
}

void WakeLockProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WakeLockProto& WakeLockProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WakeLockProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void WakeLockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.WakeLockProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(flags_ != nullptr);
      flags_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(work_source_ != nullptr);
      work_source_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&acq_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_) -
        reinterpret_cast<char*>(&acq_ms_)) + sizeof(pid_));
  }
  lock_level_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WakeLockProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.WakeLockLevelEnum lock_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::WakeLockLevelEnum_IsValid(val))) {
            set_lock_level(static_cast<::android::os::WakeLockLevelEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.power.WakeLockProto.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.WakeLockProto.WakeLockFlagsProto flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_disabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_disabled(&has_bits);
          is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 acq_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_acq_ms(&has_bits);
          acq_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_notified_long = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_notified_long(&has_bits);
          is_notified_long_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.WorkSourceProto work_source = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_work_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WakeLockProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.WakeLockProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.WakeLockLevelEnum lock_level = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::WakeLockLevelEnum_IsValid(value)) {
            set_lock_level(static_cast< ::android::os::WakeLockLevelEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.power.WakeLockProto.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.WakeLockProto.WakeLockFlagsProto flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_disabled = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_disabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 acq_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_acq_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &acq_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_notified_long = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_notified_long(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_notified_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.WorkSourceProto work_source = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_work_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.WakeLockProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.WakeLockProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WakeLockProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.WakeLockProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.WakeLockLevelEnum lock_level = 1;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->lock_level(), output);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.power.WakeLockProto.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional .com.android.server.power.WakeLockProto.WakeLockFlagsProto flags = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::flags(this), output);
  }

  // optional bool is_disabled = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_disabled(), output);
  }

  // optional int64 acq_ms = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->acq_ms(), output);
  }

  // optional bool is_notified_long = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_notified_long(), output);
  }

  // optional int32 uid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->uid(), output);
  }

  // optional int32 pid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->pid(), output);
  }

  // optional .android.os.WorkSourceProto work_source = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::work_source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.WakeLockProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* WakeLockProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.WakeLockProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.WakeLockLevelEnum lock_level = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->lock_level(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.power.WakeLockProto.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional .com.android.server.power.WakeLockProto.WakeLockFlagsProto flags = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::flags(this), target);
  }

  // optional bool is_disabled = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_disabled(), target);
  }

  // optional int64 acq_ms = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->acq_ms(), target);
  }

  // optional bool is_notified_long = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_notified_long(), target);
  }

  // optional int32 uid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->uid(), target);
  }

  // optional int32 pid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->pid(), target);
  }

  // optional .android.os.WorkSourceProto work_source = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::work_source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.WakeLockProto)
  return target;
}

size_t WakeLockProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.WakeLockProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional .com.android.server.power.WakeLockProto.WakeLockFlagsProto flags = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flags_);
    }

    // optional .android.os.WorkSourceProto work_source = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_source_);
    }

    // optional int64 acq_ms = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->acq_ms());
    }

    // optional bool is_disabled = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_notified_long = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 uid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 pid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  // optional .android.os.WakeLockLevelEnum lock_level = 1;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lock_level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WakeLockProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.WakeLockProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WakeLockProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WakeLockProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.WakeLockProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.WakeLockProto)
    MergeFrom(*source);
  }
}

void WakeLockProto::MergeFrom(const WakeLockProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.WakeLockProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_flags()->::com::android::server::power::WakeLockProto_WakeLockFlagsProto::MergeFrom(from.flags());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_work_source()->::android::os::WorkSourceProto::MergeFrom(from.work_source());
    }
    if (cached_has_bits & 0x00000008u) {
      acq_ms_ = from.acq_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_disabled_ = from.is_disabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_notified_long_ = from.is_notified_long_;
    }
    if (cached_has_bits & 0x00000040u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000080u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_lock_level(from.lock_level());
  }
}

void WakeLockProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.WakeLockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeLockProto::CopyFrom(const WakeLockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.WakeLockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeLockProto::IsInitialized() const {
  return true;
}

void WakeLockProto::InternalSwap(WakeLockProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
  swap(work_source_, other->work_source_);
  swap(acq_ms_, other->acq_ms_);
  swap(is_disabled_, other->is_disabled_);
  swap(is_notified_long_, other->is_notified_long_);
  swap(uid_, other->uid_);
  swap(pid_, other->pid_);
  swap(lock_level_, other->lock_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WakeLockProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::InitAsDefaultInstance() {
}
class PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto>()._has_bits_);
  static void set_has_is_stay_on_while_plugged_in_ac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_stay_on_while_plugged_in_usb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_stay_on_while_plugged_in_wireless(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
}
PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto(const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_stay_on_while_plugged_in_ac_, &from.is_stay_on_while_plugged_in_ac_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_stay_on_while_plugged_in_wireless_) -
    reinterpret_cast<char*>(&is_stay_on_while_plugged_in_ac_)) + sizeof(is_stay_on_while_plugged_in_wireless_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::SharedCtor() {
  ::memset(&is_stay_on_while_plugged_in_ac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_stay_on_while_plugged_in_wireless_) -
      reinterpret_cast<char*>(&is_stay_on_while_plugged_in_ac_)) + sizeof(is_stay_on_while_plugged_in_wireless_));
}

PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::~PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  SharedDtor();
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::SharedDtor() {
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_stay_on_while_plugged_in_ac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_stay_on_while_plugged_in_wireless_) -
      reinterpret_cast<char*>(&is_stay_on_while_plugged_in_ac_)) + sizeof(is_stay_on_while_plugged_in_wireless_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_stay_on_while_plugged_in_ac = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_stay_on_while_plugged_in_ac(&has_bits);
          is_stay_on_while_plugged_in_ac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stay_on_while_plugged_in_usb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_stay_on_while_plugged_in_usb(&has_bits);
          is_stay_on_while_plugged_in_usb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stay_on_while_plugged_in_wireless = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_stay_on_while_plugged_in_wireless(&has_bits);
          is_stay_on_while_plugged_in_wireless_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_stay_on_while_plugged_in_ac = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_stay_on_while_plugged_in_ac(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stay_on_while_plugged_in_ac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stay_on_while_plugged_in_usb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_stay_on_while_plugged_in_usb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stay_on_while_plugged_in_usb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stay_on_while_plugged_in_wireless = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_stay_on_while_plugged_in_wireless(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stay_on_while_plugged_in_wireless_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_stay_on_while_plugged_in_ac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_stay_on_while_plugged_in_ac(), output);
  }

  // optional bool is_stay_on_while_plugged_in_usb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_stay_on_while_plugged_in_usb(), output);
  }

  // optional bool is_stay_on_while_plugged_in_wireless = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_stay_on_while_plugged_in_wireless(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_stay_on_while_plugged_in_ac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_stay_on_while_plugged_in_ac(), target);
  }

  // optional bool is_stay_on_while_plugged_in_usb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_stay_on_while_plugged_in_usb(), target);
  }

  // optional bool is_stay_on_while_plugged_in_wireless = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_stay_on_while_plugged_in_wireless(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  return target;
}

size_t PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool is_stay_on_while_plugged_in_ac = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_stay_on_while_plugged_in_usb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_stay_on_while_plugged_in_wireless = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
    MergeFrom(*source);
  }
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::MergeFrom(const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      is_stay_on_while_plugged_in_ac_ = from.is_stay_on_while_plugged_in_ac_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_stay_on_while_plugged_in_usb_ = from.is_stay_on_while_plugged_in_usb_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_stay_on_while_plugged_in_wireless_ = from.is_stay_on_while_plugged_in_wireless_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::CopyFrom(const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::IsInitialized() const {
  return true;
}

void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::InternalSwap(PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_stay_on_while_plugged_in_ac_, other->is_stay_on_while_plugged_in_ac_);
  swap(is_stay_on_while_plugged_in_usb_, other->is_stay_on_while_plugged_in_usb_);
  swap(is_stay_on_while_plugged_in_wireless_, other->is_stay_on_while_plugged_in_wireless_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::InitAsDefaultInstance() {
}
class PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto>()._has_bits_);
  static void set_has_setting_minimum_float(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_setting_maximum_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_setting_default_float(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
}
PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto(const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&setting_default_float_, &from.setting_default_float_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_maximum_float_) -
    reinterpret_cast<char*>(&setting_default_float_)) + sizeof(setting_maximum_float_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::SharedCtor() {
  ::memset(&setting_default_float_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_maximum_float_) -
      reinterpret_cast<char*>(&setting_default_float_)) + sizeof(setting_maximum_float_));
}

PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::~PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  SharedDtor();
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::SharedDtor() {
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&setting_default_float_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_maximum_float_) -
        reinterpret_cast<char*>(&setting_default_float_)) + sizeof(setting_maximum_float_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float setting_minimum_float = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_setting_minimum_float(&has_bits);
          setting_minimum_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float setting_maximum_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_setting_maximum_float(&has_bits);
          setting_maximum_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float setting_default_float = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_setting_default_float(&has_bits);
          setting_default_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float setting_minimum_float = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_setting_minimum_float(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_minimum_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float setting_maximum_float = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_setting_maximum_float(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_maximum_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float setting_default_float = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_setting_default_float(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_default_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float setting_minimum_float = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->setting_minimum_float(), output);
  }

  // optional float setting_maximum_float = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->setting_maximum_float(), output);
  }

  // optional float setting_default_float = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->setting_default_float(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float setting_minimum_float = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->setting_minimum_float(), target);
  }

  // optional float setting_maximum_float = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->setting_maximum_float(), target);
  }

  // optional float setting_default_float = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->setting_default_float(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  return target;
}

size_t PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float setting_default_float = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float setting_minimum_float = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float setting_maximum_float = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
    MergeFrom(*source);
  }
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::MergeFrom(const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      setting_default_float_ = from.setting_default_float_;
    }
    if (cached_has_bits & 0x00000002u) {
      setting_minimum_float_ = from.setting_minimum_float_;
    }
    if (cached_has_bits & 0x00000004u) {
      setting_maximum_float_ = from.setting_maximum_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::CopyFrom(const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::IsInitialized() const {
  return true;
}

void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::InternalSwap(PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(setting_default_float_, other->setting_default_float_);
  swap(setting_minimum_float_, other->setting_minimum_float_);
  swap(setting_maximum_float_, other->setting_maximum_float_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerServiceSettingsAndConfigurationDumpProto::InitAsDefaultInstance() {
  ::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_default_instance_._instance.get_mutable()->stay_on_while_plugged_in_ = const_cast< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto*>(
      ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::internal_default_instance());
  ::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_default_instance_._instance.get_mutable()->screen_brightness_setting_limits_ = const_cast< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto*>(
      ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::internal_default_instance());
}
class PowerServiceSettingsAndConfigurationDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerServiceSettingsAndConfigurationDumpProto>()._has_bits_);
  static void set_has_is_decouple_hal_auto_suspend_mode_from_display_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_decouple_hal_interactive_mode_from_display_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_wake_up_when_plugged_or_unplugged_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_theater_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_suspend_when_screen_off_due_to_proximity_config(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_are_dreams_supported_config(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_are_dreams_enabled_by_default_config(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_are_dreams_activated_on_sleep_by_default_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_are_dreams_activated_on_dock_by_default_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_are_dreams_enabled_on_battery_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dreams_battery_level_minimum_when_powered_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dreams_battery_level_minimum_when_not_powered_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_dreams_battery_level_drain_cutoff_config(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_are_dreams_enabled_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_are_dreams_activate_on_sleep_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_are_dreams_activate_on_dock_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_doze_after_screen_off_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_minimum_screen_off_timeout_config_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_maximum_screen_dim_duration_config_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_maximum_screen_dim_ratio_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_screen_off_timeout_setting_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_sleep_timeout_setting_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_maximum_screen_off_timeout_from_device_admin_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_maximum_screen_off_timeout_from_device_admin_enforced_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& stay_on_while_plugged_in(const PowerServiceSettingsAndConfigurationDumpProto* msg);
  static void set_has_stay_on_while_plugged_in(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screen_brightness_mode_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_screen_brightness_override_from_window_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_user_activity_timeout_override_from_window_manager_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_is_user_inactive_override_from_window_manager(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_doze_screen_state_override_from_dream_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_dozed_screen_brightness_override_from_dream_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& screen_brightness_setting_limits(const PowerServiceSettingsAndConfigurationDumpProto* msg);
  static void set_has_screen_brightness_setting_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_double_tap_wake_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_is_vr_mode_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_draw_wake_lock_override_from_sidekick(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_attentive_timeout_setting_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_attentive_timeout_config_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_attentive_warning_duration_config_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
};

const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto&
PowerServiceSettingsAndConfigurationDumpProto::_Internal::stay_on_while_plugged_in(const PowerServiceSettingsAndConfigurationDumpProto* msg) {
  return *msg->stay_on_while_plugged_in_;
}
const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto&
PowerServiceSettingsAndConfigurationDumpProto::_Internal::screen_brightness_setting_limits(const PowerServiceSettingsAndConfigurationDumpProto* msg) {
  return *msg->screen_brightness_setting_limits_;
}
PowerServiceSettingsAndConfigurationDumpProto::PowerServiceSettingsAndConfigurationDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
}
PowerServiceSettingsAndConfigurationDumpProto::PowerServiceSettingsAndConfigurationDumpProto(const PowerServiceSettingsAndConfigurationDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stay_on_while_plugged_in()) {
    stay_on_while_plugged_in_ = new ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto(*from.stay_on_while_plugged_in_);
  } else {
    stay_on_while_plugged_in_ = nullptr;
  }
  if (from.has_screen_brightness_setting_limits()) {
    screen_brightness_setting_limits_ = new ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto(*from.screen_brightness_setting_limits_);
  } else {
    screen_brightness_setting_limits_ = nullptr;
  }
  ::memcpy(&is_decouple_hal_auto_suspend_mode_from_display_config_, &from.is_decouple_hal_auto_suspend_mode_from_display_config_,
    static_cast<size_t>(reinterpret_cast<char*>(&attentive_warning_duration_config_ms_) -
    reinterpret_cast<char*>(&is_decouple_hal_auto_suspend_mode_from_display_config_)) + sizeof(attentive_warning_duration_config_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
}

void PowerServiceSettingsAndConfigurationDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  ::memset(&stay_on_while_plugged_in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attentive_warning_duration_config_ms_) -
      reinterpret_cast<char*>(&stay_on_while_plugged_in_)) + sizeof(attentive_warning_duration_config_ms_));
}

PowerServiceSettingsAndConfigurationDumpProto::~PowerServiceSettingsAndConfigurationDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  SharedDtor();
}

void PowerServiceSettingsAndConfigurationDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete stay_on_while_plugged_in_;
  if (this != internal_default_instance()) delete screen_brightness_setting_limits_;
}

void PowerServiceSettingsAndConfigurationDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerServiceSettingsAndConfigurationDumpProto& PowerServiceSettingsAndConfigurationDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerServiceSettingsAndConfigurationDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PowerServiceSettingsAndConfigurationDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stay_on_while_plugged_in_ != nullptr);
      stay_on_while_plugged_in_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(screen_brightness_setting_limits_ != nullptr);
      screen_brightness_setting_limits_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&is_decouple_hal_auto_suspend_mode_from_display_config_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_suspend_when_screen_off_due_to_proximity_config_) -
        reinterpret_cast<char*>(&is_decouple_hal_auto_suspend_mode_from_display_config_)) + sizeof(is_suspend_when_screen_off_due_to_proximity_config_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&are_dreams_supported_config_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dreams_battery_level_minimum_when_not_powered_config_) -
        reinterpret_cast<char*>(&are_dreams_supported_config_)) + sizeof(dreams_battery_level_minimum_when_not_powered_config_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&dreams_battery_level_drain_cutoff_config_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maximum_screen_dim_ratio_config_) -
        reinterpret_cast<char*>(&dreams_battery_level_drain_cutoff_config_)) + sizeof(maximum_screen_dim_ratio_config_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&screen_off_timeout_setting_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dozed_screen_brightness_override_from_dream_manager_) -
        reinterpret_cast<char*>(&screen_off_timeout_setting_ms_)) + sizeof(dozed_screen_brightness_override_from_dream_manager_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&is_user_inactive_override_from_window_manager_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attentive_warning_duration_config_ms_) -
        reinterpret_cast<char*>(&is_user_inactive_override_from_window_manager_)) + sizeof(attentive_warning_duration_config_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerServiceSettingsAndConfigurationDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_decouple_hal_auto_suspend_mode_from_display_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_decouple_hal_auto_suspend_mode_from_display_config(&_has_bits_);
          is_decouple_hal_auto_suspend_mode_from_display_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_decouple_hal_interactive_mode_from_display_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_decouple_hal_interactive_mode_from_display_config(&_has_bits_);
          is_decouple_hal_interactive_mode_from_display_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_wake_up_when_plugged_or_unplugged_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_wake_up_when_plugged_or_unplugged_config(&_has_bits_);
          is_wake_up_when_plugged_or_unplugged_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config(&_has_bits_);
          is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_theater_mode_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_theater_mode_enabled(&_has_bits_);
          is_theater_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_suspend_when_screen_off_due_to_proximity_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_suspend_when_screen_off_due_to_proximity_config(&_has_bits_);
          is_suspend_when_screen_off_due_to_proximity_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_supported_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_are_dreams_supported_config(&_has_bits_);
          are_dreams_supported_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_enabled_by_default_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_are_dreams_enabled_by_default_config(&_has_bits_);
          are_dreams_enabled_by_default_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_activated_on_sleep_by_default_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_are_dreams_activated_on_sleep_by_default_config(&_has_bits_);
          are_dreams_activated_on_sleep_by_default_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_activated_on_dock_by_default_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_are_dreams_activated_on_dock_by_default_config(&_has_bits_);
          are_dreams_activated_on_dock_by_default_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_enabled_on_battery_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_are_dreams_enabled_on_battery_config(&_has_bits_);
          are_dreams_enabled_on_battery_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 dreams_battery_level_minimum_when_powered_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_dreams_battery_level_minimum_when_powered_config(&_has_bits_);
          dreams_battery_level_minimum_when_powered_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 dreams_battery_level_minimum_when_not_powered_config = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_dreams_battery_level_minimum_when_not_powered_config(&_has_bits_);
          dreams_battery_level_minimum_when_not_powered_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 dreams_battery_level_drain_cutoff_config = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dreams_battery_level_drain_cutoff_config(&_has_bits_);
          dreams_battery_level_drain_cutoff_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_enabled_setting = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_are_dreams_enabled_setting(&_has_bits_);
          are_dreams_enabled_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_activate_on_sleep_setting = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_are_dreams_activate_on_sleep_setting(&_has_bits_);
          are_dreams_activate_on_sleep_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_dreams_activate_on_dock_setting = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_are_dreams_activate_on_dock_setting(&_has_bits_);
          are_dreams_activate_on_dock_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_doze_after_screen_off_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_doze_after_screen_off_config(&_has_bits_);
          is_doze_after_screen_off_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minimum_screen_off_timeout_config_ms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_minimum_screen_off_timeout_config_ms(&_has_bits_);
          minimum_screen_off_timeout_config_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maximum_screen_dim_duration_config_ms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_maximum_screen_dim_duration_config_ms(&_has_bits_);
          maximum_screen_dim_duration_config_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float maximum_screen_dim_ratio_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_maximum_screen_dim_ratio_config(&_has_bits_);
          maximum_screen_dim_ratio_config_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_off_timeout_setting_ms = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_screen_off_timeout_setting_ms(&_has_bits_);
          screen_off_timeout_setting_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 sleep_timeout_setting_ms = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_sleep_timeout_setting_ms(&_has_bits_);
          sleep_timeout_setting_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maximum_screen_off_timeout_from_device_admin_ms = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_maximum_screen_off_timeout_from_device_admin_ms(&_has_bits_);
          maximum_screen_off_timeout_from_device_admin_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_is_maximum_screen_off_timeout_from_device_admin_enforced_locked(&_has_bits_);
          is_maximum_screen_off_timeout_from_device_admin_enforced_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto stay_on_while_plugged_in = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_stay_on_while_plugged_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingsProto.ScreenBrightnessMode screen_brightness_mode_setting = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::providers::settings::SettingsProto_ScreenBrightnessMode_IsValid(val))) {
            set_screen_brightness_mode_setting(static_cast<::android::providers::settings::SettingsProto_ScreenBrightnessMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional sint32 screen_brightness_override_from_window_manager = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_screen_brightness_override_from_window_manager(&_has_bits_);
          screen_brightness_override_from_window_manager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 user_activity_timeout_override_from_window_manager_ms = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_user_activity_timeout_override_from_window_manager_ms(&_has_bits_);
          user_activity_timeout_override_from_window_manager_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_user_inactive_override_from_window_manager = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_is_user_inactive_override_from_window_manager(&_has_bits_);
          is_user_inactive_override_from_window_manager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.view.DisplayStateEnum doze_screen_state_override_from_dream_manager = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::view::DisplayStateEnum_IsValid(val))) {
            set_doze_screen_state_override_from_dream_manager(static_cast<::android::view::DisplayStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float dozed_screen_brightness_override_from_dream_manager = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_dozed_screen_brightness_override_from_dream_manager(&_has_bits_);
          dozed_screen_brightness_override_from_dream_manager_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto screen_brightness_setting_limits = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_screen_brightness_setting_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_double_tap_wake_enabled = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_double_tap_wake_enabled(&_has_bits_);
          is_double_tap_wake_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vr_mode_enabled = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_vr_mode_enabled(&_has_bits_);
          is_vr_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool draw_wake_lock_override_from_sidekick = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_draw_wake_lock_override_from_sidekick(&_has_bits_);
          draw_wake_lock_override_from_sidekick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 attentive_timeout_setting_ms = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_attentive_timeout_setting_ms(&_has_bits_);
          attentive_timeout_setting_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 attentive_timeout_config_ms = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_attentive_timeout_config_ms(&_has_bits_);
          attentive_timeout_config_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 attentive_warning_duration_config_ms = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_attentive_warning_duration_config_ms(&_has_bits_);
          attentive_warning_duration_config_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerServiceSettingsAndConfigurationDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_decouple_hal_auto_suspend_mode_from_display_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_decouple_hal_auto_suspend_mode_from_display_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_decouple_hal_auto_suspend_mode_from_display_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_decouple_hal_interactive_mode_from_display_config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_decouple_hal_interactive_mode_from_display_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_decouple_hal_interactive_mode_from_display_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wake_up_when_plugged_or_unplugged_config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_wake_up_when_plugged_or_unplugged_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wake_up_when_plugged_or_unplugged_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_theater_mode_enabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_theater_mode_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_theater_mode_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_suspend_when_screen_off_due_to_proximity_config = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_suspend_when_screen_off_due_to_proximity_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suspend_when_screen_off_due_to_proximity_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_supported_config = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_are_dreams_supported_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_supported_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_enabled_by_default_config = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_are_dreams_enabled_by_default_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_enabled_by_default_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_activated_on_sleep_by_default_config = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_are_dreams_activated_on_sleep_by_default_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_activated_on_sleep_by_default_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_activated_on_dock_by_default_config = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_are_dreams_activated_on_dock_by_default_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_activated_on_dock_by_default_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_enabled_on_battery_config = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_are_dreams_enabled_on_battery_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_enabled_on_battery_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 dreams_battery_level_minimum_when_powered_config = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_dreams_battery_level_minimum_when_powered_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dreams_battery_level_minimum_when_powered_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 dreams_battery_level_minimum_when_not_powered_config = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_dreams_battery_level_minimum_when_not_powered_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dreams_battery_level_minimum_when_not_powered_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 dreams_battery_level_drain_cutoff_config = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_dreams_battery_level_drain_cutoff_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dreams_battery_level_drain_cutoff_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_enabled_setting = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_are_dreams_enabled_setting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_enabled_setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_activate_on_sleep_setting = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_are_dreams_activate_on_sleep_setting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_activate_on_sleep_setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_dreams_activate_on_dock_setting = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_are_dreams_activate_on_dock_setting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_dreams_activate_on_dock_setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_doze_after_screen_off_config = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_is_doze_after_screen_off_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_doze_after_screen_off_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minimum_screen_off_timeout_config_ms = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_minimum_screen_off_timeout_config_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_screen_off_timeout_config_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_screen_dim_duration_config_ms = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_maximum_screen_dim_duration_config_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_screen_dim_duration_config_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float maximum_screen_dim_ratio_config = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {
          _Internal::set_has_maximum_screen_dim_ratio_config(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maximum_screen_dim_ratio_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_off_timeout_setting_ms = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_screen_off_timeout_setting_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_off_timeout_setting_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 sleep_timeout_setting_ms = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_sleep_timeout_setting_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sleep_timeout_setting_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_screen_off_timeout_from_device_admin_ms = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_maximum_screen_off_timeout_from_device_admin_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_screen_off_timeout_from_device_admin_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_is_maximum_screen_off_timeout_from_device_admin_enforced_locked(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_maximum_screen_off_timeout_from_device_admin_enforced_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto stay_on_while_plugged_in = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stay_on_while_plugged_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingsProto.ScreenBrightnessMode screen_brightness_mode_setting = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::providers::settings::SettingsProto_ScreenBrightnessMode_IsValid(value)) {
            set_screen_brightness_mode_setting(static_cast< ::android::providers::settings::SettingsProto_ScreenBrightnessMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 screen_brightness_override_from_window_manager = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_screen_brightness_override_from_window_manager(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &screen_brightness_override_from_window_manager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 user_activity_timeout_override_from_window_manager_ms = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_user_activity_timeout_override_from_window_manager_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &user_activity_timeout_override_from_window_manager_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_user_inactive_override_from_window_manager = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_is_user_inactive_override_from_window_manager(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_user_inactive_override_from_window_manager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.view.DisplayStateEnum doze_screen_state_override_from_dream_manager = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::view::DisplayStateEnum_IsValid(value)) {
            set_doze_screen_state_override_from_dream_manager(static_cast< ::android::view::DisplayStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dozed_screen_brightness_override_from_dream_manager = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (261 & 0xFF)) {
          _Internal::set_has_dozed_screen_brightness_override_from_dream_manager(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dozed_screen_brightness_override_from_dream_manager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto screen_brightness_setting_limits = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_brightness_setting_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_double_tap_wake_enabled = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          _Internal::set_has_is_double_tap_wake_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_double_tap_wake_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vr_mode_enabled = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          _Internal::set_has_is_vr_mode_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vr_mode_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool draw_wake_lock_override_from_sidekick = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          _Internal::set_has_draw_wake_lock_override_from_sidekick(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draw_wake_lock_override_from_sidekick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 attentive_timeout_setting_ms = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {
          _Internal::set_has_attentive_timeout_setting_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attentive_timeout_setting_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 attentive_timeout_config_ms = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          _Internal::set_has_attentive_timeout_config_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attentive_timeout_config_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 attentive_warning_duration_config_ms = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {
          _Internal::set_has_attentive_warning_duration_config_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attentive_warning_duration_config_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerServiceSettingsAndConfigurationDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_decouple_hal_auto_suspend_mode_from_display_config = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_decouple_hal_auto_suspend_mode_from_display_config(), output);
  }

  // optional bool is_decouple_hal_interactive_mode_from_display_config = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_decouple_hal_interactive_mode_from_display_config(), output);
  }

  // optional bool is_wake_up_when_plugged_or_unplugged_config = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_wake_up_when_plugged_or_unplugged_config(), output);
  }

  // optional bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_wake_up_when_plugged_or_unplugged_in_theater_mode_config(), output);
  }

  // optional bool is_theater_mode_enabled = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_theater_mode_enabled(), output);
  }

  // optional bool is_suspend_when_screen_off_due_to_proximity_config = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_suspend_when_screen_off_due_to_proximity_config(), output);
  }

  // optional bool are_dreams_supported_config = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->are_dreams_supported_config(), output);
  }

  // optional bool are_dreams_enabled_by_default_config = 8;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->are_dreams_enabled_by_default_config(), output);
  }

  // optional bool are_dreams_activated_on_sleep_by_default_config = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->are_dreams_activated_on_sleep_by_default_config(), output);
  }

  // optional bool are_dreams_activated_on_dock_by_default_config = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->are_dreams_activated_on_dock_by_default_config(), output);
  }

  // optional bool are_dreams_enabled_on_battery_config = 11;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->are_dreams_enabled_on_battery_config(), output);
  }

  // optional sint32 dreams_battery_level_minimum_when_powered_config = 12;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(12, this->dreams_battery_level_minimum_when_powered_config(), output);
  }

  // optional sint32 dreams_battery_level_minimum_when_not_powered_config = 13;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(13, this->dreams_battery_level_minimum_when_not_powered_config(), output);
  }

  // optional sint32 dreams_battery_level_drain_cutoff_config = 14;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(14, this->dreams_battery_level_drain_cutoff_config(), output);
  }

  // optional bool are_dreams_enabled_setting = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->are_dreams_enabled_setting(), output);
  }

  // optional bool are_dreams_activate_on_sleep_setting = 16;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->are_dreams_activate_on_sleep_setting(), output);
  }

  // optional bool are_dreams_activate_on_dock_setting = 17;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->are_dreams_activate_on_dock_setting(), output);
  }

  // optional bool is_doze_after_screen_off_config = 18;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->is_doze_after_screen_off_config(), output);
  }

  // optional int32 minimum_screen_off_timeout_config_ms = 19;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->minimum_screen_off_timeout_config_ms(), output);
  }

  // optional int32 maximum_screen_dim_duration_config_ms = 20;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->maximum_screen_dim_duration_config_ms(), output);
  }

  // optional float maximum_screen_dim_ratio_config = 21;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->maximum_screen_dim_ratio_config(), output);
  }

  // optional int32 screen_off_timeout_setting_ms = 22;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->screen_off_timeout_setting_ms(), output);
  }

  // optional sint32 sleep_timeout_setting_ms = 23;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(23, this->sleep_timeout_setting_ms(), output);
  }

  // optional int32 maximum_screen_off_timeout_from_device_admin_ms = 24;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->maximum_screen_off_timeout_from_device_admin_ms(), output);
  }

  // optional bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked = 25;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->is_maximum_screen_off_timeout_from_device_admin_enforced_locked(), output);
  }

  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto stay_on_while_plugged_in = 26;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, _Internal::stay_on_while_plugged_in(this), output);
  }

  // optional .android.providers.settings.SettingsProto.ScreenBrightnessMode screen_brightness_mode_setting = 27;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->screen_brightness_mode_setting(), output);
  }

  // optional sint32 screen_brightness_override_from_window_manager = 28;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(28, this->screen_brightness_override_from_window_manager(), output);
  }

  // optional sint64 user_activity_timeout_override_from_window_manager_ms = 29;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(29, this->user_activity_timeout_override_from_window_manager_ms(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_user_inactive_override_from_window_manager = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->is_user_inactive_override_from_window_manager(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.view.DisplayStateEnum doze_screen_state_override_from_dream_manager = 31;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->doze_screen_state_override_from_dream_manager(), output);
  }

  // optional float dozed_screen_brightness_override_from_dream_manager = 32;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(32, this->dozed_screen_brightness_override_from_dream_manager(), output);
  }

  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto screen_brightness_setting_limits = 33;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, _Internal::screen_brightness_setting_limits(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_double_tap_wake_enabled = 34;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->is_double_tap_wake_enabled(), output);
  }

  // optional bool is_vr_mode_enabled = 35;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(35, this->is_vr_mode_enabled(), output);
  }

  // optional bool draw_wake_lock_override_from_sidekick = 36;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->draw_wake_lock_override_from_sidekick(), output);
  }

  // optional sint32 attentive_timeout_setting_ms = 37;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(37, this->attentive_timeout_setting_ms(), output);
  }

  // optional sint32 attentive_timeout_config_ms = 38;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(38, this->attentive_timeout_config_ms(), output);
  }

  // optional sint32 attentive_warning_duration_config_ms = 39;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(39, this->attentive_warning_duration_config_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerServiceSettingsAndConfigurationDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_decouple_hal_auto_suspend_mode_from_display_config = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_decouple_hal_auto_suspend_mode_from_display_config(), target);
  }

  // optional bool is_decouple_hal_interactive_mode_from_display_config = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_decouple_hal_interactive_mode_from_display_config(), target);
  }

  // optional bool is_wake_up_when_plugged_or_unplugged_config = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_wake_up_when_plugged_or_unplugged_config(), target);
  }

  // optional bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_wake_up_when_plugged_or_unplugged_in_theater_mode_config(), target);
  }

  // optional bool is_theater_mode_enabled = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_theater_mode_enabled(), target);
  }

  // optional bool is_suspend_when_screen_off_due_to_proximity_config = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_suspend_when_screen_off_due_to_proximity_config(), target);
  }

  // optional bool are_dreams_supported_config = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->are_dreams_supported_config(), target);
  }

  // optional bool are_dreams_enabled_by_default_config = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->are_dreams_enabled_by_default_config(), target);
  }

  // optional bool are_dreams_activated_on_sleep_by_default_config = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->are_dreams_activated_on_sleep_by_default_config(), target);
  }

  // optional bool are_dreams_activated_on_dock_by_default_config = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->are_dreams_activated_on_dock_by_default_config(), target);
  }

  // optional bool are_dreams_enabled_on_battery_config = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->are_dreams_enabled_on_battery_config(), target);
  }

  // optional sint32 dreams_battery_level_minimum_when_powered_config = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->dreams_battery_level_minimum_when_powered_config(), target);
  }

  // optional sint32 dreams_battery_level_minimum_when_not_powered_config = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->dreams_battery_level_minimum_when_not_powered_config(), target);
  }

  // optional sint32 dreams_battery_level_drain_cutoff_config = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(14, this->dreams_battery_level_drain_cutoff_config(), target);
  }

  // optional bool are_dreams_enabled_setting = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->are_dreams_enabled_setting(), target);
  }

  // optional bool are_dreams_activate_on_sleep_setting = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->are_dreams_activate_on_sleep_setting(), target);
  }

  // optional bool are_dreams_activate_on_dock_setting = 17;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->are_dreams_activate_on_dock_setting(), target);
  }

  // optional bool is_doze_after_screen_off_config = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->is_doze_after_screen_off_config(), target);
  }

  // optional int32 minimum_screen_off_timeout_config_ms = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->minimum_screen_off_timeout_config_ms(), target);
  }

  // optional int32 maximum_screen_dim_duration_config_ms = 20;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->maximum_screen_dim_duration_config_ms(), target);
  }

  // optional float maximum_screen_dim_ratio_config = 21;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->maximum_screen_dim_ratio_config(), target);
  }

  // optional int32 screen_off_timeout_setting_ms = 22;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->screen_off_timeout_setting_ms(), target);
  }

  // optional sint32 sleep_timeout_setting_ms = 23;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(23, this->sleep_timeout_setting_ms(), target);
  }

  // optional int32 maximum_screen_off_timeout_from_device_admin_ms = 24;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->maximum_screen_off_timeout_from_device_admin_ms(), target);
  }

  // optional bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->is_maximum_screen_off_timeout_from_device_admin_enforced_locked(), target);
  }

  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto stay_on_while_plugged_in = 26;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::stay_on_while_plugged_in(this), target);
  }

  // optional .android.providers.settings.SettingsProto.ScreenBrightnessMode screen_brightness_mode_setting = 27;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->screen_brightness_mode_setting(), target);
  }

  // optional sint32 screen_brightness_override_from_window_manager = 28;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(28, this->screen_brightness_override_from_window_manager(), target);
  }

  // optional sint64 user_activity_timeout_override_from_window_manager_ms = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(29, this->user_activity_timeout_override_from_window_manager_ms(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_user_inactive_override_from_window_manager = 30;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->is_user_inactive_override_from_window_manager(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.view.DisplayStateEnum doze_screen_state_override_from_dream_manager = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->doze_screen_state_override_from_dream_manager(), target);
  }

  // optional float dozed_screen_brightness_override_from_dream_manager = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->dozed_screen_brightness_override_from_dream_manager(), target);
  }

  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto screen_brightness_setting_limits = 33;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, _Internal::screen_brightness_setting_limits(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_double_tap_wake_enabled = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->is_double_tap_wake_enabled(), target);
  }

  // optional bool is_vr_mode_enabled = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->is_vr_mode_enabled(), target);
  }

  // optional bool draw_wake_lock_override_from_sidekick = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->draw_wake_lock_override_from_sidekick(), target);
  }

  // optional sint32 attentive_timeout_setting_ms = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(37, this->attentive_timeout_setting_ms(), target);
  }

  // optional sint32 attentive_timeout_config_ms = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(38, this->attentive_timeout_config_ms(), target);
  }

  // optional sint32 attentive_warning_duration_config_ms = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(39, this->attentive_warning_duration_config_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  return target;
}

size_t PowerServiceSettingsAndConfigurationDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto stay_on_while_plugged_in = 26;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stay_on_while_plugged_in_);
    }

    // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto screen_brightness_setting_limits = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screen_brightness_setting_limits_);
    }

    // optional bool is_decouple_hal_auto_suspend_mode_from_display_config = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_decouple_hal_interactive_mode_from_display_config = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_wake_up_when_plugged_or_unplugged_config = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_theater_mode_enabled = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_suspend_when_screen_off_due_to_proximity_config = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool are_dreams_supported_config = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool are_dreams_enabled_by_default_config = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool are_dreams_activated_on_sleep_by_default_config = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool are_dreams_activated_on_dock_by_default_config = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool are_dreams_enabled_on_battery_config = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool are_dreams_enabled_setting = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional sint32 dreams_battery_level_minimum_when_powered_config = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->dreams_battery_level_minimum_when_powered_config());
    }

    // optional sint32 dreams_battery_level_minimum_when_not_powered_config = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->dreams_battery_level_minimum_when_not_powered_config());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional sint32 dreams_battery_level_drain_cutoff_config = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->dreams_battery_level_drain_cutoff_config());
    }

    // optional int32 minimum_screen_off_timeout_config_ms = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->minimum_screen_off_timeout_config_ms());
    }

    // optional bool are_dreams_activate_on_sleep_setting = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool are_dreams_activate_on_dock_setting = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool is_doze_after_screen_off_config = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 maximum_screen_dim_duration_config_ms = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->maximum_screen_dim_duration_config_ms());
    }

    // optional float maximum_screen_dim_ratio_config = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 screen_off_timeout_setting_ms = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_off_timeout_setting_ms());
    }

    // optional sint32 sleep_timeout_setting_ms = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->sleep_timeout_setting_ms());
    }

    // optional int32 maximum_screen_off_timeout_from_device_admin_ms = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->maximum_screen_off_timeout_from_device_admin_ms());
    }

    // optional .android.providers.settings.SettingsProto.ScreenBrightnessMode screen_brightness_mode_setting = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->screen_brightness_mode_setting());
    }

    // optional sint64 user_activity_timeout_override_from_window_manager_ms = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->user_activity_timeout_override_from_window_manager_ms());
    }

    // optional sint32 screen_brightness_override_from_window_manager = 28;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->screen_brightness_override_from_window_manager());
    }

    // optional .android.view.DisplayStateEnum doze_screen_state_override_from_dream_manager = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->doze_screen_state_override_from_dream_manager());
    }

    // optional float dozed_screen_brightness_override_from_dream_manager = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool is_user_inactive_override_from_window_manager = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool is_double_tap_wake_enabled = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool is_vr_mode_enabled = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool draw_wake_lock_override_from_sidekick = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional sint32 attentive_timeout_setting_ms = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->attentive_timeout_setting_ms());
    }

    // optional sint32 attentive_timeout_config_ms = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->attentive_timeout_config_ms());
    }

    // optional sint32 attentive_warning_duration_config_ms = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->attentive_warning_duration_config_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerServiceSettingsAndConfigurationDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerServiceSettingsAndConfigurationDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerServiceSettingsAndConfigurationDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
    MergeFrom(*source);
  }
}

void PowerServiceSettingsAndConfigurationDumpProto::MergeFrom(const PowerServiceSettingsAndConfigurationDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stay_on_while_plugged_in()->::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::MergeFrom(from.stay_on_while_plugged_in());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_screen_brightness_setting_limits()->::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::MergeFrom(from.screen_brightness_setting_limits());
    }
    if (cached_has_bits & 0x00000004u) {
      is_decouple_hal_auto_suspend_mode_from_display_config_ = from.is_decouple_hal_auto_suspend_mode_from_display_config_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_decouple_hal_interactive_mode_from_display_config_ = from.is_decouple_hal_interactive_mode_from_display_config_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wake_up_when_plugged_or_unplugged_config_ = from.is_wake_up_when_plugged_or_unplugged_config_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_ = from.is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_theater_mode_enabled_ = from.is_theater_mode_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_suspend_when_screen_off_due_to_proximity_config_ = from.is_suspend_when_screen_off_due_to_proximity_config_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      are_dreams_supported_config_ = from.are_dreams_supported_config_;
    }
    if (cached_has_bits & 0x00000200u) {
      are_dreams_enabled_by_default_config_ = from.are_dreams_enabled_by_default_config_;
    }
    if (cached_has_bits & 0x00000400u) {
      are_dreams_activated_on_sleep_by_default_config_ = from.are_dreams_activated_on_sleep_by_default_config_;
    }
    if (cached_has_bits & 0x00000800u) {
      are_dreams_activated_on_dock_by_default_config_ = from.are_dreams_activated_on_dock_by_default_config_;
    }
    if (cached_has_bits & 0x00001000u) {
      are_dreams_enabled_on_battery_config_ = from.are_dreams_enabled_on_battery_config_;
    }
    if (cached_has_bits & 0x00002000u) {
      are_dreams_enabled_setting_ = from.are_dreams_enabled_setting_;
    }
    if (cached_has_bits & 0x00004000u) {
      dreams_battery_level_minimum_when_powered_config_ = from.dreams_battery_level_minimum_when_powered_config_;
    }
    if (cached_has_bits & 0x00008000u) {
      dreams_battery_level_minimum_when_not_powered_config_ = from.dreams_battery_level_minimum_when_not_powered_config_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      dreams_battery_level_drain_cutoff_config_ = from.dreams_battery_level_drain_cutoff_config_;
    }
    if (cached_has_bits & 0x00020000u) {
      minimum_screen_off_timeout_config_ms_ = from.minimum_screen_off_timeout_config_ms_;
    }
    if (cached_has_bits & 0x00040000u) {
      are_dreams_activate_on_sleep_setting_ = from.are_dreams_activate_on_sleep_setting_;
    }
    if (cached_has_bits & 0x00080000u) {
      are_dreams_activate_on_dock_setting_ = from.are_dreams_activate_on_dock_setting_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_doze_after_screen_off_config_ = from.is_doze_after_screen_off_config_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_maximum_screen_off_timeout_from_device_admin_enforced_locked_ = from.is_maximum_screen_off_timeout_from_device_admin_enforced_locked_;
    }
    if (cached_has_bits & 0x00400000u) {
      maximum_screen_dim_duration_config_ms_ = from.maximum_screen_dim_duration_config_ms_;
    }
    if (cached_has_bits & 0x00800000u) {
      maximum_screen_dim_ratio_config_ = from.maximum_screen_dim_ratio_config_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      screen_off_timeout_setting_ms_ = from.screen_off_timeout_setting_ms_;
    }
    if (cached_has_bits & 0x02000000u) {
      sleep_timeout_setting_ms_ = from.sleep_timeout_setting_ms_;
    }
    if (cached_has_bits & 0x04000000u) {
      maximum_screen_off_timeout_from_device_admin_ms_ = from.maximum_screen_off_timeout_from_device_admin_ms_;
    }
    if (cached_has_bits & 0x08000000u) {
      screen_brightness_mode_setting_ = from.screen_brightness_mode_setting_;
    }
    if (cached_has_bits & 0x10000000u) {
      user_activity_timeout_override_from_window_manager_ms_ = from.user_activity_timeout_override_from_window_manager_ms_;
    }
    if (cached_has_bits & 0x20000000u) {
      screen_brightness_override_from_window_manager_ = from.screen_brightness_override_from_window_manager_;
    }
    if (cached_has_bits & 0x40000000u) {
      doze_screen_state_override_from_dream_manager_ = from.doze_screen_state_override_from_dream_manager_;
    }
    if (cached_has_bits & 0x80000000u) {
      dozed_screen_brightness_override_from_dream_manager_ = from.dozed_screen_brightness_override_from_dream_manager_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      is_user_inactive_override_from_window_manager_ = from.is_user_inactive_override_from_window_manager_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_double_tap_wake_enabled_ = from.is_double_tap_wake_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_vr_mode_enabled_ = from.is_vr_mode_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      draw_wake_lock_override_from_sidekick_ = from.draw_wake_lock_override_from_sidekick_;
    }
    if (cached_has_bits & 0x00000010u) {
      attentive_timeout_setting_ms_ = from.attentive_timeout_setting_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      attentive_timeout_config_ms_ = from.attentive_timeout_config_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      attentive_warning_duration_config_ms_ = from.attentive_warning_duration_config_ms_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PowerServiceSettingsAndConfigurationDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerServiceSettingsAndConfigurationDumpProto::CopyFrom(const PowerServiceSettingsAndConfigurationDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerServiceSettingsAndConfigurationDumpProto::IsInitialized() const {
  return true;
}

void PowerServiceSettingsAndConfigurationDumpProto::InternalSwap(PowerServiceSettingsAndConfigurationDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(stay_on_while_plugged_in_, other->stay_on_while_plugged_in_);
  swap(screen_brightness_setting_limits_, other->screen_brightness_setting_limits_);
  swap(is_decouple_hal_auto_suspend_mode_from_display_config_, other->is_decouple_hal_auto_suspend_mode_from_display_config_);
  swap(is_decouple_hal_interactive_mode_from_display_config_, other->is_decouple_hal_interactive_mode_from_display_config_);
  swap(is_wake_up_when_plugged_or_unplugged_config_, other->is_wake_up_when_plugged_or_unplugged_config_);
  swap(is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_, other->is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_);
  swap(is_theater_mode_enabled_, other->is_theater_mode_enabled_);
  swap(is_suspend_when_screen_off_due_to_proximity_config_, other->is_suspend_when_screen_off_due_to_proximity_config_);
  swap(are_dreams_supported_config_, other->are_dreams_supported_config_);
  swap(are_dreams_enabled_by_default_config_, other->are_dreams_enabled_by_default_config_);
  swap(are_dreams_activated_on_sleep_by_default_config_, other->are_dreams_activated_on_sleep_by_default_config_);
  swap(are_dreams_activated_on_dock_by_default_config_, other->are_dreams_activated_on_dock_by_default_config_);
  swap(are_dreams_enabled_on_battery_config_, other->are_dreams_enabled_on_battery_config_);
  swap(are_dreams_enabled_setting_, other->are_dreams_enabled_setting_);
  swap(dreams_battery_level_minimum_when_powered_config_, other->dreams_battery_level_minimum_when_powered_config_);
  swap(dreams_battery_level_minimum_when_not_powered_config_, other->dreams_battery_level_minimum_when_not_powered_config_);
  swap(dreams_battery_level_drain_cutoff_config_, other->dreams_battery_level_drain_cutoff_config_);
  swap(minimum_screen_off_timeout_config_ms_, other->minimum_screen_off_timeout_config_ms_);
  swap(are_dreams_activate_on_sleep_setting_, other->are_dreams_activate_on_sleep_setting_);
  swap(are_dreams_activate_on_dock_setting_, other->are_dreams_activate_on_dock_setting_);
  swap(is_doze_after_screen_off_config_, other->is_doze_after_screen_off_config_);
  swap(is_maximum_screen_off_timeout_from_device_admin_enforced_locked_, other->is_maximum_screen_off_timeout_from_device_admin_enforced_locked_);
  swap(maximum_screen_dim_duration_config_ms_, other->maximum_screen_dim_duration_config_ms_);
  swap(maximum_screen_dim_ratio_config_, other->maximum_screen_dim_ratio_config_);
  swap(screen_off_timeout_setting_ms_, other->screen_off_timeout_setting_ms_);
  swap(sleep_timeout_setting_ms_, other->sleep_timeout_setting_ms_);
  swap(maximum_screen_off_timeout_from_device_admin_ms_, other->maximum_screen_off_timeout_from_device_admin_ms_);
  swap(screen_brightness_mode_setting_, other->screen_brightness_mode_setting_);
  swap(user_activity_timeout_override_from_window_manager_ms_, other->user_activity_timeout_override_from_window_manager_ms_);
  swap(screen_brightness_override_from_window_manager_, other->screen_brightness_override_from_window_manager_);
  swap(doze_screen_state_override_from_dream_manager_, other->doze_screen_state_override_from_dream_manager_);
  swap(dozed_screen_brightness_override_from_dream_manager_, other->dozed_screen_brightness_override_from_dream_manager_);
  swap(is_user_inactive_override_from_window_manager_, other->is_user_inactive_override_from_window_manager_);
  swap(is_double_tap_wake_enabled_, other->is_double_tap_wake_enabled_);
  swap(is_vr_mode_enabled_, other->is_vr_mode_enabled_);
  swap(draw_wake_lock_override_from_sidekick_, other->draw_wake_lock_override_from_sidekick_);
  swap(attentive_timeout_setting_ms_, other->attentive_timeout_setting_ms_);
  swap(attentive_timeout_config_ms_, other->attentive_timeout_config_ms_);
  swap(attentive_warning_duration_config_ms_, other->attentive_warning_duration_config_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerServiceSettingsAndConfigurationDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatterySaverStateMachineProto::InitAsDefaultInstance() {
}
class BatterySaverStateMachineProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BatterySaverStateMachineProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_full_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_adaptive_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_should_advertise_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_boot_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_settings_loaded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battery_status_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_powered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_battery_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_battery_level_low(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_setting_automatic_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_setting_battery_saver_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_setting_battery_saver_enabled_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_setting_battery_saver_trigger_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_setting_battery_saver_sticky_auto_disable_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_setting_battery_saver_sticky_auto_disable_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_last_adaptive_battery_saver_changed_externally_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_default_dynamic_disable_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dynamic_disable_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_dynamic_battery_saver_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

BatterySaverStateMachineProto::BatterySaverStateMachineProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.power.BatterySaverStateMachineProto)
}
BatterySaverStateMachineProto::BatterySaverStateMachineProto(const BatterySaverStateMachineProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boot_completed_, &from.boot_completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamic_battery_saver_enabled_) -
    reinterpret_cast<char*>(&boot_completed_)) + sizeof(dynamic_battery_saver_enabled_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.power.BatterySaverStateMachineProto)
}

void BatterySaverStateMachineProto::SharedCtor() {
  ::memset(&boot_completed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dynamic_battery_saver_enabled_) -
      reinterpret_cast<char*>(&boot_completed_)) + sizeof(dynamic_battery_saver_enabled_));
}

BatterySaverStateMachineProto::~BatterySaverStateMachineProto() {
  // @@protoc_insertion_point(destructor:com.android.server.power.BatterySaverStateMachineProto)
  SharedDtor();
}

void BatterySaverStateMachineProto::SharedDtor() {
}

void BatterySaverStateMachineProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatterySaverStateMachineProto& BatterySaverStateMachineProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatterySaverStateMachineProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BatterySaverStateMachineProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.power.BatterySaverStateMachineProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&boot_completed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_battery_saver_enabled_sticky_) -
        reinterpret_cast<char*>(&boot_completed_)) + sizeof(setting_battery_saver_enabled_sticky_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&setting_battery_saver_sticky_auto_disable_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_adaptive_battery_saver_changed_externally_elapsed_) -
        reinterpret_cast<char*>(&setting_battery_saver_sticky_auto_disable_enabled_)) + sizeof(last_adaptive_battery_saver_changed_externally_elapsed_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dynamic_battery_saver_enabled_) -
        reinterpret_cast<char*>(&state_)) + sizeof(dynamic_battery_saver_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatterySaverStateMachineProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boot_completed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_boot_completed(&has_bits);
          boot_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool settings_loaded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_settings_loaded(&has_bits);
          settings_loaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool battery_status_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_battery_status_set(&has_bits);
          battery_status_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_powered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_powered(&has_bits);
          is_powered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 battery_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_battery_level(&has_bits);
          battery_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_battery_level_low = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_battery_level_low(&has_bits);
          is_battery_level_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool setting_battery_saver_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_setting_battery_saver_enabled(&has_bits);
          setting_battery_saver_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool setting_battery_saver_enabled_sticky = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_setting_battery_saver_enabled_sticky(&has_bits);
          setting_battery_saver_enabled_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 setting_battery_saver_trigger_threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_setting_battery_saver_trigger_threshold(&has_bits);
          setting_battery_saver_trigger_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool setting_battery_saver_sticky_auto_disable_enabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_setting_battery_saver_sticky_auto_disable_enabled(&has_bits);
          setting_battery_saver_sticky_auto_disable_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 setting_battery_saver_sticky_auto_disable_threshold = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_setting_battery_saver_sticky_auto_disable_threshold(&has_bits);
          setting_battery_saver_sticky_auto_disable_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_full_enabled(&has_bits);
          is_full_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_adaptive_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_adaptive_enabled(&has_bits);
          is_adaptive_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_advertise_is_enabled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_should_advertise_is_enabled(&has_bits);
          should_advertise_is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_adaptive_battery_saver_changed_externally_elapsed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_last_adaptive_battery_saver_changed_externally_elapsed(&has_bits);
          last_adaptive_battery_saver_changed_externally_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.BatterySaverStateMachineProto.StateEnum state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::power::BatterySaverStateMachineProto_StateEnum_IsValid(val))) {
            set_state(static_cast<::com::android::server::power::BatterySaverStateMachineProto_StateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum setting_automatic_trigger = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum_IsValid(val))) {
            set_setting_automatic_trigger(static_cast<::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 default_dynamic_disable_threshold = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_default_dynamic_disable_threshold(&has_bits);
          default_dynamic_disable_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dynamic_disable_threshold = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_dynamic_disable_threshold(&has_bits);
          dynamic_disable_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dynamic_battery_saver_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_dynamic_battery_saver_enabled(&has_bits);
          dynamic_battery_saver_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatterySaverStateMachineProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.power.BatterySaverStateMachineProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boot_completed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_boot_completed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boot_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool settings_loaded = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_settings_loaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &settings_loaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool battery_status_set = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_battery_status_set(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battery_status_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_powered = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_powered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_powered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battery_level = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_battery_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_battery_level_low = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_battery_level_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_battery_level_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool setting_battery_saver_enabled = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_setting_battery_saver_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_battery_saver_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool setting_battery_saver_enabled_sticky = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_setting_battery_saver_enabled_sticky(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_battery_saver_enabled_sticky_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 setting_battery_saver_trigger_threshold = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_setting_battery_saver_trigger_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_battery_saver_trigger_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool setting_battery_saver_sticky_auto_disable_enabled = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_setting_battery_saver_sticky_auto_disable_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_battery_saver_sticky_auto_disable_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 setting_battery_saver_sticky_auto_disable_threshold = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_setting_battery_saver_sticky_auto_disable_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_battery_saver_sticky_auto_disable_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_full_enabled = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_is_full_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_adaptive_enabled = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_is_adaptive_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_adaptive_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool should_advertise_is_enabled = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_should_advertise_is_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_advertise_is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_adaptive_battery_saver_changed_externally_elapsed = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_last_adaptive_battery_saver_changed_externally_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_adaptive_battery_saver_changed_externally_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.BatterySaverStateMachineProto.StateEnum state = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::power::BatterySaverStateMachineProto_StateEnum_IsValid(value)) {
            set_state(static_cast< ::com::android::server::power::BatterySaverStateMachineProto_StateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum setting_automatic_trigger = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum_IsValid(value)) {
            set_setting_automatic_trigger(static_cast< ::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 default_dynamic_disable_threshold = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_default_dynamic_disable_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_dynamic_disable_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dynamic_disable_threshold = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_dynamic_disable_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynamic_disable_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dynamic_battery_saver_enabled = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_dynamic_battery_saver_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamic_battery_saver_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.power.BatterySaverStateMachineProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.power.BatterySaverStateMachineProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatterySaverStateMachineProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.power.BatterySaverStateMachineProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional bool boot_completed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->boot_completed(), output);
  }

  // optional bool settings_loaded = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->settings_loaded(), output);
  }

  // optional bool battery_status_set = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->battery_status_set(), output);
  }

  // optional bool is_powered = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_powered(), output);
  }

  // optional int32 battery_level = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->battery_level(), output);
  }

  // optional bool is_battery_level_low = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_battery_level_low(), output);
  }

  // optional bool setting_battery_saver_enabled = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->setting_battery_saver_enabled(), output);
  }

  // optional bool setting_battery_saver_enabled_sticky = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->setting_battery_saver_enabled_sticky(), output);
  }

  // optional int32 setting_battery_saver_trigger_threshold = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->setting_battery_saver_trigger_threshold(), output);
  }

  // optional bool setting_battery_saver_sticky_auto_disable_enabled = 12;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->setting_battery_saver_sticky_auto_disable_enabled(), output);
  }

  // optional int32 setting_battery_saver_sticky_auto_disable_threshold = 13;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->setting_battery_saver_sticky_auto_disable_threshold(), output);
  }

  // optional bool is_full_enabled = 14;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->is_full_enabled(), output);
  }

  // optional bool is_adaptive_enabled = 15;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->is_adaptive_enabled(), output);
  }

  // optional bool should_advertise_is_enabled = 16;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->should_advertise_is_enabled(), output);
  }

  // optional int64 last_adaptive_battery_saver_changed_externally_elapsed = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->last_adaptive_battery_saver_changed_externally_elapsed(), output);
  }

  // optional .com.android.server.power.BatterySaverStateMachineProto.StateEnum state = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->state(), output);
  }

  // optional .com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum setting_automatic_trigger = 19;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->setting_automatic_trigger(), output);
  }

  // optional int32 default_dynamic_disable_threshold = 20;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->default_dynamic_disable_threshold(), output);
  }

  // optional int32 dynamic_disable_threshold = 21;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->dynamic_disable_threshold(), output);
  }

  // optional bool dynamic_battery_saver_enabled = 22;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->dynamic_battery_saver_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.power.BatterySaverStateMachineProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BatterySaverStateMachineProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.power.BatterySaverStateMachineProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional bool boot_completed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->boot_completed(), target);
  }

  // optional bool settings_loaded = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->settings_loaded(), target);
  }

  // optional bool battery_status_set = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->battery_status_set(), target);
  }

  // optional bool is_powered = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_powered(), target);
  }

  // optional int32 battery_level = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->battery_level(), target);
  }

  // optional bool is_battery_level_low = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->is_battery_level_low(), target);
  }

  // optional bool setting_battery_saver_enabled = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->setting_battery_saver_enabled(), target);
  }

  // optional bool setting_battery_saver_enabled_sticky = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->setting_battery_saver_enabled_sticky(), target);
  }

  // optional int32 setting_battery_saver_trigger_threshold = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->setting_battery_saver_trigger_threshold(), target);
  }

  // optional bool setting_battery_saver_sticky_auto_disable_enabled = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->setting_battery_saver_sticky_auto_disable_enabled(), target);
  }

  // optional int32 setting_battery_saver_sticky_auto_disable_threshold = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->setting_battery_saver_sticky_auto_disable_threshold(), target);
  }

  // optional bool is_full_enabled = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->is_full_enabled(), target);
  }

  // optional bool is_adaptive_enabled = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->is_adaptive_enabled(), target);
  }

  // optional bool should_advertise_is_enabled = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->should_advertise_is_enabled(), target);
  }

  // optional int64 last_adaptive_battery_saver_changed_externally_elapsed = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->last_adaptive_battery_saver_changed_externally_elapsed(), target);
  }

  // optional .com.android.server.power.BatterySaverStateMachineProto.StateEnum state = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->state(), target);
  }

  // optional .com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum setting_automatic_trigger = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->setting_automatic_trigger(), target);
  }

  // optional int32 default_dynamic_disable_threshold = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->default_dynamic_disable_threshold(), target);
  }

  // optional int32 dynamic_disable_threshold = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->dynamic_disable_threshold(), target);
  }

  // optional bool dynamic_battery_saver_enabled = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->dynamic_battery_saver_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.power.BatterySaverStateMachineProto)
  return target;
}

size_t BatterySaverStateMachineProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.power.BatterySaverStateMachineProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool boot_completed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool settings_loaded = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool battery_status_set = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_powered = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 battery_level = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->battery_level());
    }

    // optional bool is_battery_level_low = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool setting_battery_saver_enabled = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool setting_battery_saver_enabled_sticky = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool setting_battery_saver_sticky_auto_disable_enabled = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 setting_battery_saver_trigger_threshold = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->setting_battery_saver_trigger_threshold());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_full_enabled = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_adaptive_enabled = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool should_advertise_is_enabled = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional int32 setting_battery_saver_sticky_auto_disable_threshold = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->setting_battery_saver_sticky_auto_disable_threshold());
    }

    // optional int64 last_adaptive_battery_saver_changed_externally_elapsed = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_adaptive_battery_saver_changed_externally_elapsed());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional .com.android.server.power.BatterySaverStateMachineProto.StateEnum state = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum setting_automatic_trigger = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->setting_automatic_trigger());
    }

    // optional int32 default_dynamic_disable_threshold = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->default_dynamic_disable_threshold());
    }

    // optional int32 dynamic_disable_threshold = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dynamic_disable_threshold());
    }

    // optional bool dynamic_battery_saver_enabled = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatterySaverStateMachineProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.power.BatterySaverStateMachineProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BatterySaverStateMachineProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatterySaverStateMachineProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.power.BatterySaverStateMachineProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.power.BatterySaverStateMachineProto)
    MergeFrom(*source);
  }
}

void BatterySaverStateMachineProto::MergeFrom(const BatterySaverStateMachineProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.power.BatterySaverStateMachineProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      boot_completed_ = from.boot_completed_;
    }
    if (cached_has_bits & 0x00000002u) {
      settings_loaded_ = from.settings_loaded_;
    }
    if (cached_has_bits & 0x00000004u) {
      battery_status_set_ = from.battery_status_set_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_powered_ = from.is_powered_;
    }
    if (cached_has_bits & 0x00000010u) {
      battery_level_ = from.battery_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_battery_level_low_ = from.is_battery_level_low_;
    }
    if (cached_has_bits & 0x00000040u) {
      setting_battery_saver_enabled_ = from.setting_battery_saver_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      setting_battery_saver_enabled_sticky_ = from.setting_battery_saver_enabled_sticky_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      setting_battery_saver_sticky_auto_disable_enabled_ = from.setting_battery_saver_sticky_auto_disable_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      setting_battery_saver_trigger_threshold_ = from.setting_battery_saver_trigger_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_full_enabled_ = from.is_full_enabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_adaptive_enabled_ = from.is_adaptive_enabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      should_advertise_is_enabled_ = from.should_advertise_is_enabled_;
    }
    if (cached_has_bits & 0x00004000u) {
      setting_battery_saver_sticky_auto_disable_threshold_ = from.setting_battery_saver_sticky_auto_disable_threshold_;
    }
    if (cached_has_bits & 0x00008000u) {
      last_adaptive_battery_saver_changed_externally_elapsed_ = from.last_adaptive_battery_saver_changed_externally_elapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00020000u) {
      setting_automatic_trigger_ = from.setting_automatic_trigger_;
    }
    if (cached_has_bits & 0x00040000u) {
      default_dynamic_disable_threshold_ = from.default_dynamic_disable_threshold_;
    }
    if (cached_has_bits & 0x00080000u) {
      dynamic_disable_threshold_ = from.dynamic_disable_threshold_;
    }
    if (cached_has_bits & 0x00100000u) {
      dynamic_battery_saver_enabled_ = from.dynamic_battery_saver_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatterySaverStateMachineProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.power.BatterySaverStateMachineProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatterySaverStateMachineProto::CopyFrom(const BatterySaverStateMachineProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.power.BatterySaverStateMachineProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatterySaverStateMachineProto::IsInitialized() const {
  return true;
}

void BatterySaverStateMachineProto::InternalSwap(BatterySaverStateMachineProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(boot_completed_, other->boot_completed_);
  swap(settings_loaded_, other->settings_loaded_);
  swap(battery_status_set_, other->battery_status_set_);
  swap(is_powered_, other->is_powered_);
  swap(battery_level_, other->battery_level_);
  swap(is_battery_level_low_, other->is_battery_level_low_);
  swap(setting_battery_saver_enabled_, other->setting_battery_saver_enabled_);
  swap(setting_battery_saver_enabled_sticky_, other->setting_battery_saver_enabled_sticky_);
  swap(setting_battery_saver_sticky_auto_disable_enabled_, other->setting_battery_saver_sticky_auto_disable_enabled_);
  swap(setting_battery_saver_trigger_threshold_, other->setting_battery_saver_trigger_threshold_);
  swap(enabled_, other->enabled_);
  swap(is_full_enabled_, other->is_full_enabled_);
  swap(is_adaptive_enabled_, other->is_adaptive_enabled_);
  swap(should_advertise_is_enabled_, other->should_advertise_is_enabled_);
  swap(setting_battery_saver_sticky_auto_disable_threshold_, other->setting_battery_saver_sticky_auto_disable_threshold_);
  swap(last_adaptive_battery_saver_changed_externally_elapsed_, other->last_adaptive_battery_saver_changed_externally_elapsed_);
  swap(state_, other->state_);
  swap(setting_automatic_trigger_, other->setting_automatic_trigger_);
  swap(default_dynamic_disable_threshold_, other->default_dynamic_disable_threshold_);
  swap(dynamic_disable_threshold_, other->dynamic_disable_threshold_);
  swap(dynamic_battery_saver_enabled_, other->dynamic_battery_saver_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatterySaverStateMachineProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace power
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerManagerServiceDumpProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerManagerServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerManagerServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::SuspendBlockerProto* Arena::CreateMaybeMessage< ::com::android::server::power::SuspendBlockerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::SuspendBlockerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* Arena::CreateMaybeMessage< ::com::android::server::power::WakeLockProto_WakeLockFlagsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::WakeLockProto_WakeLockFlagsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::WakeLockProto* Arena::CreateMaybeMessage< ::com::android::server::power::WakeLockProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::WakeLockProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* Arena::CreateMaybeMessage< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::power::BatterySaverStateMachineProto* Arena::CreateMaybeMessage< ::com::android::server::power::BatterySaverStateMachineProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::power::BatterySaverStateMachineProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
