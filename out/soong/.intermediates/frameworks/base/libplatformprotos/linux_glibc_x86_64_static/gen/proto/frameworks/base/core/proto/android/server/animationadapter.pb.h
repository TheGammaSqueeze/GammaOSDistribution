// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/animationadapter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/graphics/point.pb.h"
#include "frameworks/base/core/proto/android/view/remote_animation_target.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
namespace com {
namespace android {
namespace server {
namespace wm {
class AlphaAnimationSpecProto;
class AlphaAnimationSpecProtoDefaultTypeInternal;
extern AlphaAnimationSpecProtoDefaultTypeInternal _AlphaAnimationSpecProto_default_instance_;
class AnimationAdapterProto;
class AnimationAdapterProtoDefaultTypeInternal;
extern AnimationAdapterProtoDefaultTypeInternal _AnimationAdapterProto_default_instance_;
class AnimationSpecProto;
class AnimationSpecProtoDefaultTypeInternal;
extern AnimationSpecProtoDefaultTypeInternal _AnimationSpecProto_default_instance_;
class LocalAnimationAdapterProto;
class LocalAnimationAdapterProtoDefaultTypeInternal;
extern LocalAnimationAdapterProtoDefaultTypeInternal _LocalAnimationAdapterProto_default_instance_;
class MoveAnimationSpecProto;
class MoveAnimationSpecProtoDefaultTypeInternal;
extern MoveAnimationSpecProtoDefaultTypeInternal _MoveAnimationSpecProto_default_instance_;
class RemoteAnimationAdapterWrapperProto;
class RemoteAnimationAdapterWrapperProtoDefaultTypeInternal;
extern RemoteAnimationAdapterWrapperProtoDefaultTypeInternal _RemoteAnimationAdapterWrapperProto_default_instance_;
class RotationAnimationSpecProto;
class RotationAnimationSpecProtoDefaultTypeInternal;
extern RotationAnimationSpecProtoDefaultTypeInternal _RotationAnimationSpecProto_default_instance_;
class WindowAnimationSpecProto;
class WindowAnimationSpecProtoDefaultTypeInternal;
extern WindowAnimationSpecProtoDefaultTypeInternal _WindowAnimationSpecProto_default_instance_;
}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::wm::AlphaAnimationSpecProto* Arena::CreateMaybeMessage<::com::android::server::wm::AlphaAnimationSpecProto>(Arena*);
template<> ::com::android::server::wm::AnimationAdapterProto* Arena::CreateMaybeMessage<::com::android::server::wm::AnimationAdapterProto>(Arena*);
template<> ::com::android::server::wm::AnimationSpecProto* Arena::CreateMaybeMessage<::com::android::server::wm::AnimationSpecProto>(Arena*);
template<> ::com::android::server::wm::LocalAnimationAdapterProto* Arena::CreateMaybeMessage<::com::android::server::wm::LocalAnimationAdapterProto>(Arena*);
template<> ::com::android::server::wm::MoveAnimationSpecProto* Arena::CreateMaybeMessage<::com::android::server::wm::MoveAnimationSpecProto>(Arena*);
template<> ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* Arena::CreateMaybeMessage<::com::android::server::wm::RemoteAnimationAdapterWrapperProto>(Arena*);
template<> ::com::android::server::wm::RotationAnimationSpecProto* Arena::CreateMaybeMessage<::com::android::server::wm::RotationAnimationSpecProto>(Arena*);
template<> ::com::android::server::wm::WindowAnimationSpecProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowAnimationSpecProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace wm {

// ===================================================================

class AnimationAdapterProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.AnimationAdapterProto) */ {
 public:
  AnimationAdapterProto();
  virtual ~AnimationAdapterProto();

  AnimationAdapterProto(const AnimationAdapterProto& from);
  AnimationAdapterProto(AnimationAdapterProto&& from) noexcept
    : AnimationAdapterProto() {
    *this = ::std::move(from);
  }

  inline AnimationAdapterProto& operator=(const AnimationAdapterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationAdapterProto& operator=(AnimationAdapterProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationAdapterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimationAdapterProto* internal_default_instance() {
    return reinterpret_cast<const AnimationAdapterProto*>(
               &_AnimationAdapterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnimationAdapterProto& a, AnimationAdapterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationAdapterProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationAdapterProto* New() const final {
    return CreateMaybeMessage<AnimationAdapterProto>(nullptr);
  }

  AnimationAdapterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationAdapterProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationAdapterProto& from);
  void MergeFrom(const AnimationAdapterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationAdapterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.AnimationAdapterProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalFieldNumber = 1,
    kRemoteFieldNumber = 2,
  };
  // optional .com.android.server.wm.LocalAnimationAdapterProto local = 1;
  bool has_local() const;
  void clear_local();
  const ::com::android::server::wm::LocalAnimationAdapterProto& local() const;
  ::com::android::server::wm::LocalAnimationAdapterProto* release_local();
  ::com::android::server::wm::LocalAnimationAdapterProto* mutable_local();
  void set_allocated_local(::com::android::server::wm::LocalAnimationAdapterProto* local);

  // optional .com.android.server.wm.RemoteAnimationAdapterWrapperProto remote = 2;
  bool has_remote() const;
  void clear_remote();
  const ::com::android::server::wm::RemoteAnimationAdapterWrapperProto& remote() const;
  ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* release_remote();
  ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* mutable_remote();
  void set_allocated_remote(::com::android::server::wm::RemoteAnimationAdapterWrapperProto* remote);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.AnimationAdapterProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::LocalAnimationAdapterProto* local_;
  ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* remote_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// -------------------------------------------------------------------

class RemoteAnimationAdapterWrapperProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.RemoteAnimationAdapterWrapperProto) */ {
 public:
  RemoteAnimationAdapterWrapperProto();
  virtual ~RemoteAnimationAdapterWrapperProto();

  RemoteAnimationAdapterWrapperProto(const RemoteAnimationAdapterWrapperProto& from);
  RemoteAnimationAdapterWrapperProto(RemoteAnimationAdapterWrapperProto&& from) noexcept
    : RemoteAnimationAdapterWrapperProto() {
    *this = ::std::move(from);
  }

  inline RemoteAnimationAdapterWrapperProto& operator=(const RemoteAnimationAdapterWrapperProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteAnimationAdapterWrapperProto& operator=(RemoteAnimationAdapterWrapperProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteAnimationAdapterWrapperProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteAnimationAdapterWrapperProto* internal_default_instance() {
    return reinterpret_cast<const RemoteAnimationAdapterWrapperProto*>(
               &_RemoteAnimationAdapterWrapperProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RemoteAnimationAdapterWrapperProto& a, RemoteAnimationAdapterWrapperProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteAnimationAdapterWrapperProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteAnimationAdapterWrapperProto* New() const final {
    return CreateMaybeMessage<RemoteAnimationAdapterWrapperProto>(nullptr);
  }

  RemoteAnimationAdapterWrapperProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteAnimationAdapterWrapperProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteAnimationAdapterWrapperProto& from);
  void MergeFrom(const RemoteAnimationAdapterWrapperProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteAnimationAdapterWrapperProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.RemoteAnimationAdapterWrapperProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // optional .android.view.RemoteAnimationTargetProto target = 1;
  bool has_target() const;
  void clear_target();
  const ::android::view::RemoteAnimationTargetProto& target() const;
  ::android::view::RemoteAnimationTargetProto* release_target();
  ::android::view::RemoteAnimationTargetProto* mutable_target();
  void set_allocated_target(::android::view::RemoteAnimationTargetProto* target);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::view::RemoteAnimationTargetProto* target_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// -------------------------------------------------------------------

class LocalAnimationAdapterProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.LocalAnimationAdapterProto) */ {
 public:
  LocalAnimationAdapterProto();
  virtual ~LocalAnimationAdapterProto();

  LocalAnimationAdapterProto(const LocalAnimationAdapterProto& from);
  LocalAnimationAdapterProto(LocalAnimationAdapterProto&& from) noexcept
    : LocalAnimationAdapterProto() {
    *this = ::std::move(from);
  }

  inline LocalAnimationAdapterProto& operator=(const LocalAnimationAdapterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalAnimationAdapterProto& operator=(LocalAnimationAdapterProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalAnimationAdapterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalAnimationAdapterProto* internal_default_instance() {
    return reinterpret_cast<const LocalAnimationAdapterProto*>(
               &_LocalAnimationAdapterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalAnimationAdapterProto& a, LocalAnimationAdapterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalAnimationAdapterProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalAnimationAdapterProto* New() const final {
    return CreateMaybeMessage<LocalAnimationAdapterProto>(nullptr);
  }

  LocalAnimationAdapterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalAnimationAdapterProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalAnimationAdapterProto& from);
  void MergeFrom(const LocalAnimationAdapterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalAnimationAdapterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.LocalAnimationAdapterProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationSpecFieldNumber = 1,
  };
  // optional .com.android.server.wm.AnimationSpecProto animation_spec = 1;
  bool has_animation_spec() const;
  void clear_animation_spec();
  const ::com::android::server::wm::AnimationSpecProto& animation_spec() const;
  ::com::android::server::wm::AnimationSpecProto* release_animation_spec();
  ::com::android::server::wm::AnimationSpecProto* mutable_animation_spec();
  void set_allocated_animation_spec(::com::android::server::wm::AnimationSpecProto* animation_spec);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.LocalAnimationAdapterProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::AnimationSpecProto* animation_spec_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// -------------------------------------------------------------------

class AnimationSpecProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.AnimationSpecProto) */ {
 public:
  AnimationSpecProto();
  virtual ~AnimationSpecProto();

  AnimationSpecProto(const AnimationSpecProto& from);
  AnimationSpecProto(AnimationSpecProto&& from) noexcept
    : AnimationSpecProto() {
    *this = ::std::move(from);
  }

  inline AnimationSpecProto& operator=(const AnimationSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationSpecProto& operator=(AnimationSpecProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationSpecProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimationSpecProto* internal_default_instance() {
    return reinterpret_cast<const AnimationSpecProto*>(
               &_AnimationSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnimationSpecProto& a, AnimationSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationSpecProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationSpecProto* New() const final {
    return CreateMaybeMessage<AnimationSpecProto>(nullptr);
  }

  AnimationSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationSpecProto& from);
  void MergeFrom(const AnimationSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.AnimationSpecProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 1,
    kMoveFieldNumber = 2,
    kAlphaFieldNumber = 3,
    kRotateFieldNumber = 4,
  };
  // optional .com.android.server.wm.WindowAnimationSpecProto window = 1;
  bool has_window() const;
  void clear_window();
  const ::com::android::server::wm::WindowAnimationSpecProto& window() const;
  ::com::android::server::wm::WindowAnimationSpecProto* release_window();
  ::com::android::server::wm::WindowAnimationSpecProto* mutable_window();
  void set_allocated_window(::com::android::server::wm::WindowAnimationSpecProto* window);

  // optional .com.android.server.wm.MoveAnimationSpecProto move = 2;
  bool has_move() const;
  void clear_move();
  const ::com::android::server::wm::MoveAnimationSpecProto& move() const;
  ::com::android::server::wm::MoveAnimationSpecProto* release_move();
  ::com::android::server::wm::MoveAnimationSpecProto* mutable_move();
  void set_allocated_move(::com::android::server::wm::MoveAnimationSpecProto* move);

  // optional .com.android.server.wm.AlphaAnimationSpecProto alpha = 3;
  bool has_alpha() const;
  void clear_alpha();
  const ::com::android::server::wm::AlphaAnimationSpecProto& alpha() const;
  ::com::android::server::wm::AlphaAnimationSpecProto* release_alpha();
  ::com::android::server::wm::AlphaAnimationSpecProto* mutable_alpha();
  void set_allocated_alpha(::com::android::server::wm::AlphaAnimationSpecProto* alpha);

  // optional .com.android.server.wm.RotationAnimationSpecProto rotate = 4;
  bool has_rotate() const;
  void clear_rotate();
  const ::com::android::server::wm::RotationAnimationSpecProto& rotate() const;
  ::com::android::server::wm::RotationAnimationSpecProto* release_rotate();
  ::com::android::server::wm::RotationAnimationSpecProto* mutable_rotate();
  void set_allocated_rotate(::com::android::server::wm::RotationAnimationSpecProto* rotate);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.AnimationSpecProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::WindowAnimationSpecProto* window_;
  ::com::android::server::wm::MoveAnimationSpecProto* move_;
  ::com::android::server::wm::AlphaAnimationSpecProto* alpha_;
  ::com::android::server::wm::RotationAnimationSpecProto* rotate_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// -------------------------------------------------------------------

class WindowAnimationSpecProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowAnimationSpecProto) */ {
 public:
  WindowAnimationSpecProto();
  virtual ~WindowAnimationSpecProto();

  WindowAnimationSpecProto(const WindowAnimationSpecProto& from);
  WindowAnimationSpecProto(WindowAnimationSpecProto&& from) noexcept
    : WindowAnimationSpecProto() {
    *this = ::std::move(from);
  }

  inline WindowAnimationSpecProto& operator=(const WindowAnimationSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowAnimationSpecProto& operator=(WindowAnimationSpecProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowAnimationSpecProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowAnimationSpecProto* internal_default_instance() {
    return reinterpret_cast<const WindowAnimationSpecProto*>(
               &_WindowAnimationSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WindowAnimationSpecProto& a, WindowAnimationSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowAnimationSpecProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowAnimationSpecProto* New() const final {
    return CreateMaybeMessage<WindowAnimationSpecProto>(nullptr);
  }

  WindowAnimationSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowAnimationSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowAnimationSpecProto& from);
  void MergeFrom(const WindowAnimationSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowAnimationSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowAnimationSpecProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationFieldNumber = 1,
  };
  // optional string animation = 1;
  bool has_animation() const;
  void clear_animation();
  const std::string& animation() const;
  void set_animation(const std::string& value);
  void set_animation(std::string&& value);
  void set_animation(const char* value);
  void set_animation(const char* value, size_t size);
  std::string* mutable_animation();
  std::string* release_animation();
  void set_allocated_animation(std::string* animation);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowAnimationSpecProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// -------------------------------------------------------------------

class MoveAnimationSpecProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.MoveAnimationSpecProto) */ {
 public:
  MoveAnimationSpecProto();
  virtual ~MoveAnimationSpecProto();

  MoveAnimationSpecProto(const MoveAnimationSpecProto& from);
  MoveAnimationSpecProto(MoveAnimationSpecProto&& from) noexcept
    : MoveAnimationSpecProto() {
    *this = ::std::move(from);
  }

  inline MoveAnimationSpecProto& operator=(const MoveAnimationSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveAnimationSpecProto& operator=(MoveAnimationSpecProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveAnimationSpecProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveAnimationSpecProto* internal_default_instance() {
    return reinterpret_cast<const MoveAnimationSpecProto*>(
               &_MoveAnimationSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveAnimationSpecProto& a, MoveAnimationSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveAnimationSpecProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveAnimationSpecProto* New() const final {
    return CreateMaybeMessage<MoveAnimationSpecProto>(nullptr);
  }

  MoveAnimationSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveAnimationSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveAnimationSpecProto& from);
  void MergeFrom(const MoveAnimationSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveAnimationSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.MoveAnimationSpecProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDurationMsFieldNumber = 3,
  };
  // optional .android.graphics.PointProto from = 1;
  bool has_from() const;
  void clear_from();
  const ::android::graphics::PointProto& from() const;
  ::android::graphics::PointProto* release_from();
  ::android::graphics::PointProto* mutable_from();
  void set_allocated_from(::android::graphics::PointProto* from);

  // optional .android.graphics.PointProto to = 2;
  bool has_to() const;
  void clear_to();
  const ::android::graphics::PointProto& to() const;
  ::android::graphics::PointProto* release_to();
  ::android::graphics::PointProto* mutable_to();
  void set_allocated_to(::android::graphics::PointProto* to);

  // optional int64 duration_ms = 3;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.MoveAnimationSpecProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::graphics::PointProto* from_;
  ::android::graphics::PointProto* to_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// -------------------------------------------------------------------

class AlphaAnimationSpecProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.AlphaAnimationSpecProto) */ {
 public:
  AlphaAnimationSpecProto();
  virtual ~AlphaAnimationSpecProto();

  AlphaAnimationSpecProto(const AlphaAnimationSpecProto& from);
  AlphaAnimationSpecProto(AlphaAnimationSpecProto&& from) noexcept
    : AlphaAnimationSpecProto() {
    *this = ::std::move(from);
  }

  inline AlphaAnimationSpecProto& operator=(const AlphaAnimationSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphaAnimationSpecProto& operator=(AlphaAnimationSpecProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlphaAnimationSpecProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlphaAnimationSpecProto* internal_default_instance() {
    return reinterpret_cast<const AlphaAnimationSpecProto*>(
               &_AlphaAnimationSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AlphaAnimationSpecProto& a, AlphaAnimationSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphaAnimationSpecProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphaAnimationSpecProto* New() const final {
    return CreateMaybeMessage<AlphaAnimationSpecProto>(nullptr);
  }

  AlphaAnimationSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphaAnimationSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlphaAnimationSpecProto& from);
  void MergeFrom(const AlphaAnimationSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlphaAnimationSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.AlphaAnimationSpecProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDurationMsFieldNumber = 3,
  };
  // optional float from = 1;
  bool has_from() const;
  void clear_from();
  float from() const;
  void set_from(float value);

  // optional float to = 2;
  bool has_to() const;
  void clear_to();
  float to() const;
  void set_to(float value);

  // optional int64 duration_ms = 3;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.AlphaAnimationSpecProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float from_;
  float to_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// -------------------------------------------------------------------

class RotationAnimationSpecProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.wm.RotationAnimationSpecProto) */ {
 public:
  RotationAnimationSpecProto();
  virtual ~RotationAnimationSpecProto();

  RotationAnimationSpecProto(const RotationAnimationSpecProto& from);
  RotationAnimationSpecProto(RotationAnimationSpecProto&& from) noexcept
    : RotationAnimationSpecProto() {
    *this = ::std::move(from);
  }

  inline RotationAnimationSpecProto& operator=(const RotationAnimationSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotationAnimationSpecProto& operator=(RotationAnimationSpecProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RotationAnimationSpecProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RotationAnimationSpecProto* internal_default_instance() {
    return reinterpret_cast<const RotationAnimationSpecProto*>(
               &_RotationAnimationSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RotationAnimationSpecProto& a, RotationAnimationSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RotationAnimationSpecProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RotationAnimationSpecProto* New() const final {
    return CreateMaybeMessage<RotationAnimationSpecProto>(nullptr);
  }

  RotationAnimationSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RotationAnimationSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RotationAnimationSpecProto& from);
  void MergeFrom(const RotationAnimationSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotationAnimationSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.RotationAnimationSpecProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartLumaFieldNumber = 1,
    kEndLumaFieldNumber = 2,
    kDurationMsFieldNumber = 3,
  };
  // optional float start_luma = 1;
  bool has_start_luma() const;
  void clear_start_luma();
  float start_luma() const;
  void set_start_luma(float value);

  // optional float end_luma = 2;
  bool has_end_luma() const;
  void clear_end_luma();
  float end_luma() const;
  void set_end_luma(float value);

  // optional int64 duration_ms = 3;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.RotationAnimationSpecProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float start_luma_;
  float end_luma_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnimationAdapterProto

// optional .com.android.server.wm.LocalAnimationAdapterProto local = 1;
inline bool AnimationAdapterProto::has_local() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnimationAdapterProto::clear_local() {
  if (local_ != nullptr) local_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::LocalAnimationAdapterProto& AnimationAdapterProto::local() const {
  const ::com::android::server::wm::LocalAnimationAdapterProto* p = local_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.AnimationAdapterProto.local)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::LocalAnimationAdapterProto*>(
      &::com::android::server::wm::_LocalAnimationAdapterProto_default_instance_);
}
inline ::com::android::server::wm::LocalAnimationAdapterProto* AnimationAdapterProto::release_local() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.AnimationAdapterProto.local)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::LocalAnimationAdapterProto* temp = local_;
  local_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::LocalAnimationAdapterProto* AnimationAdapterProto::mutable_local() {
  _has_bits_[0] |= 0x00000001u;
  if (local_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::LocalAnimationAdapterProto>(GetArenaNoVirtual());
    local_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.AnimationAdapterProto.local)
  return local_;
}
inline void AnimationAdapterProto::set_allocated_local(::com::android::server::wm::LocalAnimationAdapterProto* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_;
  }
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  local_ = local;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.AnimationAdapterProto.local)
}

// optional .com.android.server.wm.RemoteAnimationAdapterWrapperProto remote = 2;
inline bool AnimationAdapterProto::has_remote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnimationAdapterProto::clear_remote() {
  if (remote_ != nullptr) remote_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::RemoteAnimationAdapterWrapperProto& AnimationAdapterProto::remote() const {
  const ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* p = remote_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.AnimationAdapterProto.remote)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::RemoteAnimationAdapterWrapperProto*>(
      &::com::android::server::wm::_RemoteAnimationAdapterWrapperProto_default_instance_);
}
inline ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* AnimationAdapterProto::release_remote() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.AnimationAdapterProto.remote)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* temp = remote_;
  remote_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* AnimationAdapterProto::mutable_remote() {
  _has_bits_[0] |= 0x00000002u;
  if (remote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::RemoteAnimationAdapterWrapperProto>(GetArenaNoVirtual());
    remote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.AnimationAdapterProto.remote)
  return remote_;
}
inline void AnimationAdapterProto::set_allocated_remote(::com::android::server::wm::RemoteAnimationAdapterWrapperProto* remote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete remote_;
  }
  if (remote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  remote_ = remote;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.AnimationAdapterProto.remote)
}

// -------------------------------------------------------------------

// RemoteAnimationAdapterWrapperProto

// optional .android.view.RemoteAnimationTargetProto target = 1;
inline bool RemoteAnimationAdapterWrapperProto::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::view::RemoteAnimationTargetProto& RemoteAnimationAdapterWrapperProto::target() const {
  const ::android::view::RemoteAnimationTargetProto* p = target_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.RemoteAnimationAdapterWrapperProto.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::RemoteAnimationTargetProto*>(
      &::android::view::_RemoteAnimationTargetProto_default_instance_);
}
inline ::android::view::RemoteAnimationTargetProto* RemoteAnimationAdapterWrapperProto::release_target() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.RemoteAnimationAdapterWrapperProto.target)
  _has_bits_[0] &= ~0x00000001u;
  ::android::view::RemoteAnimationTargetProto* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::android::view::RemoteAnimationTargetProto* RemoteAnimationAdapterWrapperProto::mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::RemoteAnimationTargetProto>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.RemoteAnimationAdapterWrapperProto.target)
  return target_;
}
inline void RemoteAnimationAdapterWrapperProto::set_allocated_target(::android::view::RemoteAnimationTargetProto* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.RemoteAnimationAdapterWrapperProto.target)
}

// -------------------------------------------------------------------

// LocalAnimationAdapterProto

// optional .com.android.server.wm.AnimationSpecProto animation_spec = 1;
inline bool LocalAnimationAdapterProto::has_animation_spec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalAnimationAdapterProto::clear_animation_spec() {
  if (animation_spec_ != nullptr) animation_spec_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::AnimationSpecProto& LocalAnimationAdapterProto::animation_spec() const {
  const ::com::android::server::wm::AnimationSpecProto* p = animation_spec_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.LocalAnimationAdapterProto.animation_spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::AnimationSpecProto*>(
      &::com::android::server::wm::_AnimationSpecProto_default_instance_);
}
inline ::com::android::server::wm::AnimationSpecProto* LocalAnimationAdapterProto::release_animation_spec() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.LocalAnimationAdapterProto.animation_spec)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::AnimationSpecProto* temp = animation_spec_;
  animation_spec_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::AnimationSpecProto* LocalAnimationAdapterProto::mutable_animation_spec() {
  _has_bits_[0] |= 0x00000001u;
  if (animation_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::AnimationSpecProto>(GetArenaNoVirtual());
    animation_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.LocalAnimationAdapterProto.animation_spec)
  return animation_spec_;
}
inline void LocalAnimationAdapterProto::set_allocated_animation_spec(::com::android::server::wm::AnimationSpecProto* animation_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete animation_spec_;
  }
  if (animation_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      animation_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation_spec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  animation_spec_ = animation_spec;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.LocalAnimationAdapterProto.animation_spec)
}

// -------------------------------------------------------------------

// AnimationSpecProto

// optional .com.android.server.wm.WindowAnimationSpecProto window = 1;
inline bool AnimationSpecProto::has_window() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnimationSpecProto::clear_window() {
  if (window_ != nullptr) window_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::wm::WindowAnimationSpecProto& AnimationSpecProto::window() const {
  const ::com::android::server::wm::WindowAnimationSpecProto* p = window_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.AnimationSpecProto.window)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowAnimationSpecProto*>(
      &::com::android::server::wm::_WindowAnimationSpecProto_default_instance_);
}
inline ::com::android::server::wm::WindowAnimationSpecProto* AnimationSpecProto::release_window() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.AnimationSpecProto.window)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::WindowAnimationSpecProto* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowAnimationSpecProto* AnimationSpecProto::mutable_window() {
  _has_bits_[0] |= 0x00000001u;
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowAnimationSpecProto>(GetArenaNoVirtual());
    window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.AnimationSpecProto.window)
  return window_;
}
inline void AnimationSpecProto::set_allocated_window(::com::android::server::wm::WindowAnimationSpecProto* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.AnimationSpecProto.window)
}

// optional .com.android.server.wm.MoveAnimationSpecProto move = 2;
inline bool AnimationSpecProto::has_move() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnimationSpecProto::clear_move() {
  if (move_ != nullptr) move_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::wm::MoveAnimationSpecProto& AnimationSpecProto::move() const {
  const ::com::android::server::wm::MoveAnimationSpecProto* p = move_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.AnimationSpecProto.move)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::MoveAnimationSpecProto*>(
      &::com::android::server::wm::_MoveAnimationSpecProto_default_instance_);
}
inline ::com::android::server::wm::MoveAnimationSpecProto* AnimationSpecProto::release_move() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.AnimationSpecProto.move)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::wm::MoveAnimationSpecProto* temp = move_;
  move_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::MoveAnimationSpecProto* AnimationSpecProto::mutable_move() {
  _has_bits_[0] |= 0x00000002u;
  if (move_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::MoveAnimationSpecProto>(GetArenaNoVirtual());
    move_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.AnimationSpecProto.move)
  return move_;
}
inline void AnimationSpecProto::set_allocated_move(::com::android::server::wm::MoveAnimationSpecProto* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete move_;
  }
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  move_ = move;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.AnimationSpecProto.move)
}

// optional .com.android.server.wm.AlphaAnimationSpecProto alpha = 3;
inline bool AnimationSpecProto::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnimationSpecProto::clear_alpha() {
  if (alpha_ != nullptr) alpha_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::wm::AlphaAnimationSpecProto& AnimationSpecProto::alpha() const {
  const ::com::android::server::wm::AlphaAnimationSpecProto* p = alpha_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.AnimationSpecProto.alpha)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::AlphaAnimationSpecProto*>(
      &::com::android::server::wm::_AlphaAnimationSpecProto_default_instance_);
}
inline ::com::android::server::wm::AlphaAnimationSpecProto* AnimationSpecProto::release_alpha() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.AnimationSpecProto.alpha)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::wm::AlphaAnimationSpecProto* temp = alpha_;
  alpha_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::AlphaAnimationSpecProto* AnimationSpecProto::mutable_alpha() {
  _has_bits_[0] |= 0x00000004u;
  if (alpha_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::AlphaAnimationSpecProto>(GetArenaNoVirtual());
    alpha_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.AnimationSpecProto.alpha)
  return alpha_;
}
inline void AnimationSpecProto::set_allocated_alpha(::com::android::server::wm::AlphaAnimationSpecProto* alpha) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alpha_;
  }
  if (alpha) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alpha = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alpha, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  alpha_ = alpha;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.AnimationSpecProto.alpha)
}

// optional .com.android.server.wm.RotationAnimationSpecProto rotate = 4;
inline bool AnimationSpecProto::has_rotate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnimationSpecProto::clear_rotate() {
  if (rotate_ != nullptr) rotate_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::wm::RotationAnimationSpecProto& AnimationSpecProto::rotate() const {
  const ::com::android::server::wm::RotationAnimationSpecProto* p = rotate_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.AnimationSpecProto.rotate)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::RotationAnimationSpecProto*>(
      &::com::android::server::wm::_RotationAnimationSpecProto_default_instance_);
}
inline ::com::android::server::wm::RotationAnimationSpecProto* AnimationSpecProto::release_rotate() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.AnimationSpecProto.rotate)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::wm::RotationAnimationSpecProto* temp = rotate_;
  rotate_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::RotationAnimationSpecProto* AnimationSpecProto::mutable_rotate() {
  _has_bits_[0] |= 0x00000008u;
  if (rotate_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::RotationAnimationSpecProto>(GetArenaNoVirtual());
    rotate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.AnimationSpecProto.rotate)
  return rotate_;
}
inline void AnimationSpecProto::set_allocated_rotate(::com::android::server::wm::RotationAnimationSpecProto* rotate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rotate_;
  }
  if (rotate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rotate_ = rotate;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.AnimationSpecProto.rotate)
}

// -------------------------------------------------------------------

// WindowAnimationSpecProto

// optional string animation = 1;
inline bool WindowAnimationSpecProto::has_animation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowAnimationSpecProto::clear_animation() {
  animation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WindowAnimationSpecProto::animation() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowAnimationSpecProto.animation)
  return animation_.GetNoArena();
}
inline void WindowAnimationSpecProto::set_animation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  animation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowAnimationSpecProto.animation)
}
inline void WindowAnimationSpecProto::set_animation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  animation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.wm.WindowAnimationSpecProto.animation)
}
inline void WindowAnimationSpecProto::set_animation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  animation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.wm.WindowAnimationSpecProto.animation)
}
inline void WindowAnimationSpecProto::set_animation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  animation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.wm.WindowAnimationSpecProto.animation)
}
inline std::string* WindowAnimationSpecProto::mutable_animation() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowAnimationSpecProto.animation)
  return animation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WindowAnimationSpecProto::release_animation() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowAnimationSpecProto.animation)
  if (!has_animation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return animation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WindowAnimationSpecProto::set_allocated_animation(std::string* animation) {
  if (animation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  animation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animation);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowAnimationSpecProto.animation)
}

// -------------------------------------------------------------------

// MoveAnimationSpecProto

// optional .android.graphics.PointProto from = 1;
inline bool MoveAnimationSpecProto::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::graphics::PointProto& MoveAnimationSpecProto::from() const {
  const ::android::graphics::PointProto* p = from_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.MoveAnimationSpecProto.from)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::PointProto*>(
      &::android::graphics::_PointProto_default_instance_);
}
inline ::android::graphics::PointProto* MoveAnimationSpecProto::release_from() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.MoveAnimationSpecProto.from)
  _has_bits_[0] &= ~0x00000001u;
  ::android::graphics::PointProto* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::android::graphics::PointProto* MoveAnimationSpecProto::mutable_from() {
  _has_bits_[0] |= 0x00000001u;
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::PointProto>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.MoveAnimationSpecProto.from)
  return from_;
}
inline void MoveAnimationSpecProto::set_allocated_from(::android::graphics::PointProto* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.MoveAnimationSpecProto.from)
}

// optional .android.graphics.PointProto to = 2;
inline bool MoveAnimationSpecProto::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::graphics::PointProto& MoveAnimationSpecProto::to() const {
  const ::android::graphics::PointProto* p = to_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.MoveAnimationSpecProto.to)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::PointProto*>(
      &::android::graphics::_PointProto_default_instance_);
}
inline ::android::graphics::PointProto* MoveAnimationSpecProto::release_to() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.MoveAnimationSpecProto.to)
  _has_bits_[0] &= ~0x00000002u;
  ::android::graphics::PointProto* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::android::graphics::PointProto* MoveAnimationSpecProto::mutable_to() {
  _has_bits_[0] |= 0x00000002u;
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::PointProto>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.MoveAnimationSpecProto.to)
  return to_;
}
inline void MoveAnimationSpecProto::set_allocated_to(::android::graphics::PointProto* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.MoveAnimationSpecProto.to)
}

// optional int64 duration_ms = 3;
inline bool MoveAnimationSpecProto::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveAnimationSpecProto::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveAnimationSpecProto::duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.MoveAnimationSpecProto.duration_ms)
  return duration_ms_;
}
inline void MoveAnimationSpecProto::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.MoveAnimationSpecProto.duration_ms)
}

// -------------------------------------------------------------------

// AlphaAnimationSpecProto

// optional float from = 1;
inline bool AlphaAnimationSpecProto::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlphaAnimationSpecProto::clear_from() {
  from_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float AlphaAnimationSpecProto::from() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.AlphaAnimationSpecProto.from)
  return from_;
}
inline void AlphaAnimationSpecProto::set_from(float value) {
  _has_bits_[0] |= 0x00000001u;
  from_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.AlphaAnimationSpecProto.from)
}

// optional float to = 2;
inline bool AlphaAnimationSpecProto::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlphaAnimationSpecProto::clear_to() {
  to_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float AlphaAnimationSpecProto::to() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.AlphaAnimationSpecProto.to)
  return to_;
}
inline void AlphaAnimationSpecProto::set_to(float value) {
  _has_bits_[0] |= 0x00000002u;
  to_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.AlphaAnimationSpecProto.to)
}

// optional int64 duration_ms = 3;
inline bool AlphaAnimationSpecProto::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlphaAnimationSpecProto::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlphaAnimationSpecProto::duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.AlphaAnimationSpecProto.duration_ms)
  return duration_ms_;
}
inline void AlphaAnimationSpecProto::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.AlphaAnimationSpecProto.duration_ms)
}

// -------------------------------------------------------------------

// RotationAnimationSpecProto

// optional float start_luma = 1;
inline bool RotationAnimationSpecProto::has_start_luma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotationAnimationSpecProto::clear_start_luma() {
  start_luma_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float RotationAnimationSpecProto::start_luma() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RotationAnimationSpecProto.start_luma)
  return start_luma_;
}
inline void RotationAnimationSpecProto::set_start_luma(float value) {
  _has_bits_[0] |= 0x00000001u;
  start_luma_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.RotationAnimationSpecProto.start_luma)
}

// optional float end_luma = 2;
inline bool RotationAnimationSpecProto::has_end_luma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotationAnimationSpecProto::clear_end_luma() {
  end_luma_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RotationAnimationSpecProto::end_luma() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RotationAnimationSpecProto.end_luma)
  return end_luma_;
}
inline void RotationAnimationSpecProto::set_end_luma(float value) {
  _has_bits_[0] |= 0x00000002u;
  end_luma_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.RotationAnimationSpecProto.end_luma)
}

// optional int64 duration_ms = 3;
inline bool RotationAnimationSpecProto::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotationAnimationSpecProto::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RotationAnimationSpecProto::duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.RotationAnimationSpecProto.duration_ms)
  return duration_ms_;
}
inline void RotationAnimationSpecProto::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.RotationAnimationSpecProto.duration_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto
