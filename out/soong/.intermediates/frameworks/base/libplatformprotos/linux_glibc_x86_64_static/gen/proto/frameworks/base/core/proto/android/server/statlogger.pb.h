// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/statlogger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto;
namespace com {
namespace android {
namespace server {
class StatLoggerProto;
class StatLoggerProtoDefaultTypeInternal;
extern StatLoggerProtoDefaultTypeInternal _StatLoggerProto_default_instance_;
class StatLoggerProto_Event;
class StatLoggerProto_EventDefaultTypeInternal;
extern StatLoggerProto_EventDefaultTypeInternal _StatLoggerProto_Event_default_instance_;
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::StatLoggerProto* Arena::CreateMaybeMessage<::com::android::server::StatLoggerProto>(Arena*);
template<> ::com::android::server::StatLoggerProto_Event* Arena::CreateMaybeMessage<::com::android::server::StatLoggerProto_Event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {

// ===================================================================

class StatLoggerProto_Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.StatLoggerProto.Event) */ {
 public:
  StatLoggerProto_Event();
  virtual ~StatLoggerProto_Event();

  StatLoggerProto_Event(const StatLoggerProto_Event& from);
  StatLoggerProto_Event(StatLoggerProto_Event&& from) noexcept
    : StatLoggerProto_Event() {
    *this = ::std::move(from);
  }

  inline StatLoggerProto_Event& operator=(const StatLoggerProto_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatLoggerProto_Event& operator=(StatLoggerProto_Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatLoggerProto_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatLoggerProto_Event* internal_default_instance() {
    return reinterpret_cast<const StatLoggerProto_Event*>(
               &_StatLoggerProto_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatLoggerProto_Event& a, StatLoggerProto_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(StatLoggerProto_Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatLoggerProto_Event* New() const final {
    return CreateMaybeMessage<StatLoggerProto_Event>(nullptr);
  }

  StatLoggerProto_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatLoggerProto_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatLoggerProto_Event& from);
  void MergeFrom(const StatLoggerProto_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatLoggerProto_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.StatLoggerProto.Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kEventIdFieldNumber = 1,
    kCountFieldNumber = 3,
    kTotalDurationMicrosFieldNumber = 4,
    kMaxDurationPerSecondMicrosFieldNumber = 6,
    kMaxDurationStatsMicrosFieldNumber = 7,
    kMaxCallsPerSecondFieldNumber = 5,
  };
  // optional string label = 2;
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional int32 event_id = 1;
  bool has_event_id() const;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 total_duration_micros = 4;
  bool has_total_duration_micros() const;
  void clear_total_duration_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_micros() const;
  void set_total_duration_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 max_duration_per_second_micros = 6;
  bool has_max_duration_per_second_micros() const;
  void clear_max_duration_per_second_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 max_duration_per_second_micros() const;
  void set_max_duration_per_second_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 max_duration_stats_micros = 7;
  bool has_max_duration_stats_micros() const;
  void clear_max_duration_stats_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 max_duration_stats_micros() const;
  void set_max_duration_stats_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 max_calls_per_second = 5;
  bool has_max_calls_per_second() const;
  void clear_max_calls_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 max_calls_per_second() const;
  void set_max_calls_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.StatLoggerProto.Event)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_micros_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_duration_per_second_micros_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_duration_stats_micros_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_calls_per_second_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto;
};
// -------------------------------------------------------------------

class StatLoggerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.StatLoggerProto) */ {
 public:
  StatLoggerProto();
  virtual ~StatLoggerProto();

  StatLoggerProto(const StatLoggerProto& from);
  StatLoggerProto(StatLoggerProto&& from) noexcept
    : StatLoggerProto() {
    *this = ::std::move(from);
  }

  inline StatLoggerProto& operator=(const StatLoggerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatLoggerProto& operator=(StatLoggerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatLoggerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatLoggerProto* internal_default_instance() {
    return reinterpret_cast<const StatLoggerProto*>(
               &_StatLoggerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatLoggerProto& a, StatLoggerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StatLoggerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatLoggerProto* New() const final {
    return CreateMaybeMessage<StatLoggerProto>(nullptr);
  }

  StatLoggerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatLoggerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatLoggerProto& from);
  void MergeFrom(const StatLoggerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatLoggerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.StatLoggerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatLoggerProto_Event Event;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .com.android.server.StatLoggerProto.Event events = 1;
  int events_size() const;
  void clear_events();
  ::com::android::server::StatLoggerProto_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::StatLoggerProto_Event >*
      mutable_events();
  const ::com::android::server::StatLoggerProto_Event& events(int index) const;
  ::com::android::server::StatLoggerProto_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::StatLoggerProto_Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:com.android.server.StatLoggerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::StatLoggerProto_Event > events_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatLoggerProto_Event

// optional int32 event_id = 1;
inline bool StatLoggerProto_Event::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatLoggerProto_Event::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatLoggerProto_Event::event_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.Event.event_id)
  return event_id_;
}
inline void StatLoggerProto_Event::set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.StatLoggerProto.Event.event_id)
}

// optional string label = 2;
inline bool StatLoggerProto_Event::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatLoggerProto_Event::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatLoggerProto_Event::label() const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.Event.label)
  return label_.GetNoArena();
}
inline void StatLoggerProto_Event::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.StatLoggerProto.Event.label)
}
inline void StatLoggerProto_Event::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.StatLoggerProto.Event.label)
}
inline void StatLoggerProto_Event::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.StatLoggerProto.Event.label)
}
inline void StatLoggerProto_Event::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.StatLoggerProto.Event.label)
}
inline std::string* StatLoggerProto_Event::mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.StatLoggerProto.Event.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StatLoggerProto_Event::release_label() {
  // @@protoc_insertion_point(field_release:com.android.server.StatLoggerProto.Event.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StatLoggerProto_Event::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.StatLoggerProto.Event.label)
}

// optional int32 count = 3;
inline bool StatLoggerProto_Event::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatLoggerProto_Event::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatLoggerProto_Event::count() const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.Event.count)
  return count_;
}
inline void StatLoggerProto_Event::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.StatLoggerProto.Event.count)
}

// optional int64 total_duration_micros = 4;
inline bool StatLoggerProto_Event::has_total_duration_micros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatLoggerProto_Event::clear_total_duration_micros() {
  total_duration_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatLoggerProto_Event::total_duration_micros() const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.Event.total_duration_micros)
  return total_duration_micros_;
}
inline void StatLoggerProto_Event::set_total_duration_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  total_duration_micros_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.StatLoggerProto.Event.total_duration_micros)
}

// optional int32 max_calls_per_second = 5;
inline bool StatLoggerProto_Event::has_max_calls_per_second() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatLoggerProto_Event::clear_max_calls_per_second() {
  max_calls_per_second_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatLoggerProto_Event::max_calls_per_second() const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.Event.max_calls_per_second)
  return max_calls_per_second_;
}
inline void StatLoggerProto_Event::set_max_calls_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_calls_per_second_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.StatLoggerProto.Event.max_calls_per_second)
}

// optional int64 max_duration_per_second_micros = 6;
inline bool StatLoggerProto_Event::has_max_duration_per_second_micros() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatLoggerProto_Event::clear_max_duration_per_second_micros() {
  max_duration_per_second_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatLoggerProto_Event::max_duration_per_second_micros() const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.Event.max_duration_per_second_micros)
  return max_duration_per_second_micros_;
}
inline void StatLoggerProto_Event::set_max_duration_per_second_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  max_duration_per_second_micros_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.StatLoggerProto.Event.max_duration_per_second_micros)
}

// optional int64 max_duration_stats_micros = 7;
inline bool StatLoggerProto_Event::has_max_duration_stats_micros() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatLoggerProto_Event::clear_max_duration_stats_micros() {
  max_duration_stats_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatLoggerProto_Event::max_duration_stats_micros() const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.Event.max_duration_stats_micros)
  return max_duration_stats_micros_;
}
inline void StatLoggerProto_Event::set_max_duration_stats_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  max_duration_stats_micros_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.StatLoggerProto.Event.max_duration_stats_micros)
}

// -------------------------------------------------------------------

// StatLoggerProto

// repeated .com.android.server.StatLoggerProto.Event events = 1;
inline int StatLoggerProto::events_size() const {
  return events_.size();
}
inline void StatLoggerProto::clear_events() {
  events_.Clear();
}
inline ::com::android::server::StatLoggerProto_Event* StatLoggerProto::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.StatLoggerProto.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::StatLoggerProto_Event >*
StatLoggerProto::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.StatLoggerProto.events)
  return &events_;
}
inline const ::com::android::server::StatLoggerProto_Event& StatLoggerProto::events(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.StatLoggerProto.events)
  return events_.Get(index);
}
inline ::com::android::server::StatLoggerProto_Event* StatLoggerProto::add_events() {
  // @@protoc_insertion_point(field_add:com.android.server.StatLoggerProto.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::StatLoggerProto_Event >&
StatLoggerProto::events() const {
  // @@protoc_insertion_point(field_list:com.android.server.StatLoggerProto.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto
