// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/restricted_image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto;
namespace android {
namespace service {
namespace restricted_image {
class RestrictedImageProto;
class RestrictedImageProtoDefaultTypeInternal;
extern RestrictedImageProtoDefaultTypeInternal _RestrictedImageProto_default_instance_;
class RestrictedImageSetProto;
class RestrictedImageSetProtoDefaultTypeInternal;
extern RestrictedImageSetProtoDefaultTypeInternal _RestrictedImageSetProto_default_instance_;
class RestrictedImagesDumpProto;
class RestrictedImagesDumpProtoDefaultTypeInternal;
extern RestrictedImagesDumpProtoDefaultTypeInternal _RestrictedImagesDumpProto_default_instance_;
}  // namespace restricted_image
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::restricted_image::RestrictedImageProto* Arena::CreateMaybeMessage<::android::service::restricted_image::RestrictedImageProto>(Arena*);
template<> ::android::service::restricted_image::RestrictedImageSetProto* Arena::CreateMaybeMessage<::android::service::restricted_image::RestrictedImageSetProto>(Arena*);
template<> ::android::service::restricted_image::RestrictedImagesDumpProto* Arena::CreateMaybeMessage<::android::service::restricted_image::RestrictedImagesDumpProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace restricted_image {

// ===================================================================

class RestrictedImagesDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.restricted_image.RestrictedImagesDumpProto) */ {
 public:
  RestrictedImagesDumpProto();
  virtual ~RestrictedImagesDumpProto();

  RestrictedImagesDumpProto(const RestrictedImagesDumpProto& from);
  RestrictedImagesDumpProto(RestrictedImagesDumpProto&& from) noexcept
    : RestrictedImagesDumpProto() {
    *this = ::std::move(from);
  }

  inline RestrictedImagesDumpProto& operator=(const RestrictedImagesDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictedImagesDumpProto& operator=(RestrictedImagesDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictedImagesDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictedImagesDumpProto* internal_default_instance() {
    return reinterpret_cast<const RestrictedImagesDumpProto*>(
               &_RestrictedImagesDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RestrictedImagesDumpProto& a, RestrictedImagesDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictedImagesDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictedImagesDumpProto* New() const final {
    return CreateMaybeMessage<RestrictedImagesDumpProto>(nullptr);
  }

  RestrictedImagesDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictedImagesDumpProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictedImagesDumpProto& from);
  void MergeFrom(const RestrictedImagesDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictedImagesDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.restricted_image.RestrictedImagesDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetsFieldNumber = 1,
  };
  // repeated .android.service.restricted_image.RestrictedImageSetProto sets = 1;
  int sets_size() const;
  void clear_sets();
  ::android::service::restricted_image::RestrictedImageSetProto* mutable_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageSetProto >*
      mutable_sets();
  const ::android::service::restricted_image::RestrictedImageSetProto& sets(int index) const;
  ::android::service::restricted_image::RestrictedImageSetProto* add_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageSetProto >&
      sets() const;

  // @@protoc_insertion_point(class_scope:android.service.restricted_image.RestrictedImagesDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageSetProto > sets_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto;
};
// -------------------------------------------------------------------

class RestrictedImageSetProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.restricted_image.RestrictedImageSetProto) */ {
 public:
  RestrictedImageSetProto();
  virtual ~RestrictedImageSetProto();

  RestrictedImageSetProto(const RestrictedImageSetProto& from);
  RestrictedImageSetProto(RestrictedImageSetProto&& from) noexcept
    : RestrictedImageSetProto() {
    *this = ::std::move(from);
  }

  inline RestrictedImageSetProto& operator=(const RestrictedImageSetProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictedImageSetProto& operator=(RestrictedImageSetProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictedImageSetProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictedImageSetProto* internal_default_instance() {
    return reinterpret_cast<const RestrictedImageSetProto*>(
               &_RestrictedImageSetProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RestrictedImageSetProto& a, RestrictedImageSetProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictedImageSetProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictedImageSetProto* New() const final {
    return CreateMaybeMessage<RestrictedImageSetProto>(nullptr);
  }

  RestrictedImageSetProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictedImageSetProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictedImageSetProto& from);
  void MergeFrom(const RestrictedImageSetProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictedImageSetProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.restricted_image.RestrictedImageSetProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kCategoryFieldNumber = 1,
    kMetadataFieldNumber = 3,
  };
  // repeated .android.service.restricted_image.RestrictedImageProto images = 2;
  int images_size() const;
  void clear_images();
  ::android::service::restricted_image::RestrictedImageProto* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageProto >*
      mutable_images();
  const ::android::service::restricted_image::RestrictedImageProto& images(int index) const;
  ::android::service::restricted_image::RestrictedImageProto* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageProto >&
      images() const;

  // optional string category = 1;
  bool has_category() const;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // optional bytes metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);

  // @@protoc_insertion_point(class_scope:android.service.restricted_image.RestrictedImageSetProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageProto > images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto;
};
// -------------------------------------------------------------------

class RestrictedImageProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.restricted_image.RestrictedImageProto) */ {
 public:
  RestrictedImageProto();
  virtual ~RestrictedImageProto();

  RestrictedImageProto(const RestrictedImageProto& from);
  RestrictedImageProto(RestrictedImageProto&& from) noexcept
    : RestrictedImageProto() {
    *this = ::std::move(from);
  }

  inline RestrictedImageProto& operator=(const RestrictedImageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictedImageProto& operator=(RestrictedImageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictedImageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictedImageProto* internal_default_instance() {
    return reinterpret_cast<const RestrictedImageProto*>(
               &_RestrictedImageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RestrictedImageProto& a, RestrictedImageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictedImageProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictedImageProto* New() const final {
    return CreateMaybeMessage<RestrictedImageProto>(nullptr);
  }

  RestrictedImageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictedImageProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictedImageProto& from);
  void MergeFrom(const RestrictedImageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictedImageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.restricted_image.RestrictedImageProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kImageDataFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // optional string mime_type = 1;
  bool has_mime_type() const;
  void clear_mime_type();
  const std::string& mime_type() const;
  void set_mime_type(const std::string& value);
  void set_mime_type(std::string&& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  std::string* mutable_mime_type();
  std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);

  // optional bytes image_data = 2;
  bool has_image_data() const;
  void clear_image_data();
  const std::string& image_data() const;
  void set_image_data(const std::string& value);
  void set_image_data(std::string&& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  std::string* mutable_image_data();
  std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);

  // optional bytes metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);

  // @@protoc_insertion_point(class_scope:android.service.restricted_image.RestrictedImageProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RestrictedImagesDumpProto

// repeated .android.service.restricted_image.RestrictedImageSetProto sets = 1;
inline int RestrictedImagesDumpProto::sets_size() const {
  return sets_.size();
}
inline void RestrictedImagesDumpProto::clear_sets() {
  sets_.Clear();
}
inline ::android::service::restricted_image::RestrictedImageSetProto* RestrictedImagesDumpProto::mutable_sets(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.restricted_image.RestrictedImagesDumpProto.sets)
  return sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageSetProto >*
RestrictedImagesDumpProto::mutable_sets() {
  // @@protoc_insertion_point(field_mutable_list:android.service.restricted_image.RestrictedImagesDumpProto.sets)
  return &sets_;
}
inline const ::android::service::restricted_image::RestrictedImageSetProto& RestrictedImagesDumpProto::sets(int index) const {
  // @@protoc_insertion_point(field_get:android.service.restricted_image.RestrictedImagesDumpProto.sets)
  return sets_.Get(index);
}
inline ::android::service::restricted_image::RestrictedImageSetProto* RestrictedImagesDumpProto::add_sets() {
  // @@protoc_insertion_point(field_add:android.service.restricted_image.RestrictedImagesDumpProto.sets)
  return sets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageSetProto >&
RestrictedImagesDumpProto::sets() const {
  // @@protoc_insertion_point(field_list:android.service.restricted_image.RestrictedImagesDumpProto.sets)
  return sets_;
}

// -------------------------------------------------------------------

// RestrictedImageSetProto

// optional string category = 1;
inline bool RestrictedImageSetProto::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestrictedImageSetProto::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RestrictedImageSetProto::category() const {
  // @@protoc_insertion_point(field_get:android.service.restricted_image.RestrictedImageSetProto.category)
  return category_.GetNoArena();
}
inline void RestrictedImageSetProto::set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.restricted_image.RestrictedImageSetProto.category)
}
inline void RestrictedImageSetProto::set_category(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.restricted_image.RestrictedImageSetProto.category)
}
inline void RestrictedImageSetProto::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.restricted_image.RestrictedImageSetProto.category)
}
inline void RestrictedImageSetProto::set_category(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.restricted_image.RestrictedImageSetProto.category)
}
inline std::string* RestrictedImageSetProto::mutable_category() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.restricted_image.RestrictedImageSetProto.category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RestrictedImageSetProto::release_category() {
  // @@protoc_insertion_point(field_release:android.service.restricted_image.RestrictedImageSetProto.category)
  if (!has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return category_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RestrictedImageSetProto::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:android.service.restricted_image.RestrictedImageSetProto.category)
}

// repeated .android.service.restricted_image.RestrictedImageProto images = 2;
inline int RestrictedImageSetProto::images_size() const {
  return images_.size();
}
inline void RestrictedImageSetProto::clear_images() {
  images_.Clear();
}
inline ::android::service::restricted_image::RestrictedImageProto* RestrictedImageSetProto::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.restricted_image.RestrictedImageSetProto.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageProto >*
RestrictedImageSetProto::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:android.service.restricted_image.RestrictedImageSetProto.images)
  return &images_;
}
inline const ::android::service::restricted_image::RestrictedImageProto& RestrictedImageSetProto::images(int index) const {
  // @@protoc_insertion_point(field_get:android.service.restricted_image.RestrictedImageSetProto.images)
  return images_.Get(index);
}
inline ::android::service::restricted_image::RestrictedImageProto* RestrictedImageSetProto::add_images() {
  // @@protoc_insertion_point(field_add:android.service.restricted_image.RestrictedImageSetProto.images)
  return images_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::restricted_image::RestrictedImageProto >&
RestrictedImageSetProto::images() const {
  // @@protoc_insertion_point(field_list:android.service.restricted_image.RestrictedImageSetProto.images)
  return images_;
}

// optional bytes metadata = 3;
inline bool RestrictedImageSetProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RestrictedImageSetProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RestrictedImageSetProto::metadata() const {
  // @@protoc_insertion_point(field_get:android.service.restricted_image.RestrictedImageSetProto.metadata)
  return metadata_.GetNoArena();
}
inline void RestrictedImageSetProto::set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.restricted_image.RestrictedImageSetProto.metadata)
}
inline void RestrictedImageSetProto::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.restricted_image.RestrictedImageSetProto.metadata)
}
inline void RestrictedImageSetProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.restricted_image.RestrictedImageSetProto.metadata)
}
inline void RestrictedImageSetProto::set_metadata(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.restricted_image.RestrictedImageSetProto.metadata)
}
inline std::string* RestrictedImageSetProto::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.restricted_image.RestrictedImageSetProto.metadata)
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RestrictedImageSetProto::release_metadata() {
  // @@protoc_insertion_point(field_release:android.service.restricted_image.RestrictedImageSetProto.metadata)
  if (!has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RestrictedImageSetProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:android.service.restricted_image.RestrictedImageSetProto.metadata)
}

// -------------------------------------------------------------------

// RestrictedImageProto

// optional string mime_type = 1;
inline bool RestrictedImageProto::has_mime_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestrictedImageProto::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RestrictedImageProto::mime_type() const {
  // @@protoc_insertion_point(field_get:android.service.restricted_image.RestrictedImageProto.mime_type)
  return mime_type_.GetNoArena();
}
inline void RestrictedImageProto::set_mime_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.restricted_image.RestrictedImageProto.mime_type)
}
inline void RestrictedImageProto::set_mime_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.restricted_image.RestrictedImageProto.mime_type)
}
inline void RestrictedImageProto::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.restricted_image.RestrictedImageProto.mime_type)
}
inline void RestrictedImageProto::set_mime_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.restricted_image.RestrictedImageProto.mime_type)
}
inline std::string* RestrictedImageProto::mutable_mime_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.restricted_image.RestrictedImageProto.mime_type)
  return mime_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RestrictedImageProto::release_mime_type() {
  // @@protoc_insertion_point(field_release:android.service.restricted_image.RestrictedImageProto.mime_type)
  if (!has_mime_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mime_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RestrictedImageProto::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mime_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:android.service.restricted_image.RestrictedImageProto.mime_type)
}

// optional bytes image_data = 2;
inline bool RestrictedImageProto::has_image_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RestrictedImageProto::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RestrictedImageProto::image_data() const {
  // @@protoc_insertion_point(field_get:android.service.restricted_image.RestrictedImageProto.image_data)
  return image_data_.GetNoArena();
}
inline void RestrictedImageProto::set_image_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.restricted_image.RestrictedImageProto.image_data)
}
inline void RestrictedImageProto::set_image_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  image_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.restricted_image.RestrictedImageProto.image_data)
}
inline void RestrictedImageProto::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.restricted_image.RestrictedImageProto.image_data)
}
inline void RestrictedImageProto::set_image_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.restricted_image.RestrictedImageProto.image_data)
}
inline std::string* RestrictedImageProto::mutable_image_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.restricted_image.RestrictedImageProto.image_data)
  return image_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RestrictedImageProto::release_image_data() {
  // @@protoc_insertion_point(field_release:android.service.restricted_image.RestrictedImageProto.image_data)
  if (!has_image_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return image_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RestrictedImageProto::set_allocated_image_data(std::string* image_data) {
  if (image_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:android.service.restricted_image.RestrictedImageProto.image_data)
}

// optional bytes metadata = 3;
inline bool RestrictedImageProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RestrictedImageProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RestrictedImageProto::metadata() const {
  // @@protoc_insertion_point(field_get:android.service.restricted_image.RestrictedImageProto.metadata)
  return metadata_.GetNoArena();
}
inline void RestrictedImageProto::set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.restricted_image.RestrictedImageProto.metadata)
}
inline void RestrictedImageProto::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.restricted_image.RestrictedImageProto.metadata)
}
inline void RestrictedImageProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.restricted_image.RestrictedImageProto.metadata)
}
inline void RestrictedImageProto::set_metadata(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.restricted_image.RestrictedImageProto.metadata)
}
inline std::string* RestrictedImageProto::mutable_metadata() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.restricted_image.RestrictedImageProto.metadata)
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RestrictedImageProto::release_metadata() {
  // @@protoc_insertion_point(field_release:android.service.restricted_image.RestrictedImageProto.metadata)
  if (!has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RestrictedImageProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:android.service.restricted_image.RestrictedImageProto.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace restricted_image
}  // namespace service
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto
