// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/usagestatsservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/content/configuration.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace usage {
class IntervalStatsProto;
class IntervalStatsProtoDefaultTypeInternal;
extern IntervalStatsProtoDefaultTypeInternal _IntervalStatsProto_default_instance_;
class IntervalStatsProto_Configuration;
class IntervalStatsProto_ConfigurationDefaultTypeInternal;
extern IntervalStatsProto_ConfigurationDefaultTypeInternal _IntervalStatsProto_Configuration_default_instance_;
class IntervalStatsProto_CountAndTime;
class IntervalStatsProto_CountAndTimeDefaultTypeInternal;
extern IntervalStatsProto_CountAndTimeDefaultTypeInternal _IntervalStatsProto_CountAndTime_default_instance_;
class IntervalStatsProto_Event;
class IntervalStatsProto_EventDefaultTypeInternal;
extern IntervalStatsProto_EventDefaultTypeInternal _IntervalStatsProto_Event_default_instance_;
class IntervalStatsProto_StringPool;
class IntervalStatsProto_StringPoolDefaultTypeInternal;
extern IntervalStatsProto_StringPoolDefaultTypeInternal _IntervalStatsProto_StringPool_default_instance_;
class IntervalStatsProto_UsageStats;
class IntervalStatsProto_UsageStatsDefaultTypeInternal;
extern IntervalStatsProto_UsageStatsDefaultTypeInternal _IntervalStatsProto_UsageStats_default_instance_;
class IntervalStatsProto_UsageStats_ChooserAction;
class IntervalStatsProto_UsageStats_ChooserActionDefaultTypeInternal;
extern IntervalStatsProto_UsageStats_ChooserActionDefaultTypeInternal _IntervalStatsProto_UsageStats_ChooserAction_default_instance_;
class IntervalStatsProto_UsageStats_ChooserAction_CategoryCount;
class IntervalStatsProto_UsageStats_ChooserAction_CategoryCountDefaultTypeInternal;
extern IntervalStatsProto_UsageStats_ChooserAction_CategoryCountDefaultTypeInternal _IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_default_instance_;
}  // namespace usage
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::usage::IntervalStatsProto* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto>(Arena*);
template<> ::com::android::server::usage::IntervalStatsProto_Configuration* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_Configuration>(Arena*);
template<> ::com::android::server::usage::IntervalStatsProto_CountAndTime* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_CountAndTime>(Arena*);
template<> ::com::android::server::usage::IntervalStatsProto_Event* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_Event>(Arena*);
template<> ::com::android::server::usage::IntervalStatsProto_StringPool* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_StringPool>(Arena*);
template<> ::com::android::server::usage::IntervalStatsProto_UsageStats* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_UsageStats>(Arena*);
template<> ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction>(Arena*);
template<> ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* Arena::CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace usage {

// ===================================================================

class IntervalStatsProto_StringPool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto.StringPool) */ {
 public:
  IntervalStatsProto_StringPool();
  virtual ~IntervalStatsProto_StringPool();

  IntervalStatsProto_StringPool(const IntervalStatsProto_StringPool& from);
  IntervalStatsProto_StringPool(IntervalStatsProto_StringPool&& from) noexcept
    : IntervalStatsProto_StringPool() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto_StringPool& operator=(const IntervalStatsProto_StringPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto_StringPool& operator=(IntervalStatsProto_StringPool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto_StringPool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto_StringPool* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto_StringPool*>(
               &_IntervalStatsProto_StringPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntervalStatsProto_StringPool& a, IntervalStatsProto_StringPool& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto_StringPool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto_StringPool* New() const final {
    return CreateMaybeMessage<IntervalStatsProto_StringPool>(nullptr);
  }

  IntervalStatsProto_StringPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto_StringPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto_StringPool& from);
  void MergeFrom(const IntervalStatsProto_StringPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto_StringPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto.StringPool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated string strings = 2;
  int strings_size() const;
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();

  // optional int32 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto.StringPool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// -------------------------------------------------------------------

class IntervalStatsProto_CountAndTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto.CountAndTime) */ {
 public:
  IntervalStatsProto_CountAndTime();
  virtual ~IntervalStatsProto_CountAndTime();

  IntervalStatsProto_CountAndTime(const IntervalStatsProto_CountAndTime& from);
  IntervalStatsProto_CountAndTime(IntervalStatsProto_CountAndTime&& from) noexcept
    : IntervalStatsProto_CountAndTime() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto_CountAndTime& operator=(const IntervalStatsProto_CountAndTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto_CountAndTime& operator=(IntervalStatsProto_CountAndTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto_CountAndTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto_CountAndTime* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto_CountAndTime*>(
               &_IntervalStatsProto_CountAndTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntervalStatsProto_CountAndTime& a, IntervalStatsProto_CountAndTime& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto_CountAndTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto_CountAndTime* New() const final {
    return CreateMaybeMessage<IntervalStatsProto_CountAndTime>(nullptr);
  }

  IntervalStatsProto_CountAndTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto_CountAndTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto_CountAndTime& from);
  void MergeFrom(const IntervalStatsProto_CountAndTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto_CountAndTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto.CountAndTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeMsFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // optional int64 time_ms = 2;
  bool has_time_ms() const;
  void clear_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 time_ms() const;
  void set_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 count = 1;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto.CountAndTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// -------------------------------------------------------------------

class IntervalStatsProto_UsageStats_ChooserAction_CategoryCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount) */ {
 public:
  IntervalStatsProto_UsageStats_ChooserAction_CategoryCount();
  virtual ~IntervalStatsProto_UsageStats_ChooserAction_CategoryCount();

  IntervalStatsProto_UsageStats_ChooserAction_CategoryCount(const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& from);
  IntervalStatsProto_UsageStats_ChooserAction_CategoryCount(IntervalStatsProto_UsageStats_ChooserAction_CategoryCount&& from) noexcept
    : IntervalStatsProto_UsageStats_ChooserAction_CategoryCount() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& operator=(const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& operator=(IntervalStatsProto_UsageStats_ChooserAction_CategoryCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount*>(
               &_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& a, IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* New() const final {
    return CreateMaybeMessage<IntervalStatsProto_UsageStats_ChooserAction_CategoryCount>(nullptr);
  }

  IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto_UsageStats_ChooserAction_CategoryCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& from);
  void MergeFrom(const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// -------------------------------------------------------------------

class IntervalStatsProto_UsageStats_ChooserAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction) */ {
 public:
  IntervalStatsProto_UsageStats_ChooserAction();
  virtual ~IntervalStatsProto_UsageStats_ChooserAction();

  IntervalStatsProto_UsageStats_ChooserAction(const IntervalStatsProto_UsageStats_ChooserAction& from);
  IntervalStatsProto_UsageStats_ChooserAction(IntervalStatsProto_UsageStats_ChooserAction&& from) noexcept
    : IntervalStatsProto_UsageStats_ChooserAction() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto_UsageStats_ChooserAction& operator=(const IntervalStatsProto_UsageStats_ChooserAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto_UsageStats_ChooserAction& operator=(IntervalStatsProto_UsageStats_ChooserAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto_UsageStats_ChooserAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto_UsageStats_ChooserAction* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto_UsageStats_ChooserAction*>(
               &_IntervalStatsProto_UsageStats_ChooserAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IntervalStatsProto_UsageStats_ChooserAction& a, IntervalStatsProto_UsageStats_ChooserAction& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto_UsageStats_ChooserAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto_UsageStats_ChooserAction* New() const final {
    return CreateMaybeMessage<IntervalStatsProto_UsageStats_ChooserAction>(nullptr);
  }

  IntervalStatsProto_UsageStats_ChooserAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto_UsageStats_ChooserAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto_UsageStats_ChooserAction& from);
  void MergeFrom(const IntervalStatsProto_UsageStats_ChooserAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto_UsageStats_ChooserAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IntervalStatsProto_UsageStats_ChooserAction_CategoryCount CategoryCount;

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount counts = 3;
  int counts_size() const;
  void clear_counts();
  ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* mutable_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount >*
      mutable_counts();
  const ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& counts(int index) const;
  ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* add_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount >&
      counts() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount > counts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// -------------------------------------------------------------------

class IntervalStatsProto_UsageStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto.UsageStats) */ {
 public:
  IntervalStatsProto_UsageStats();
  virtual ~IntervalStatsProto_UsageStats();

  IntervalStatsProto_UsageStats(const IntervalStatsProto_UsageStats& from);
  IntervalStatsProto_UsageStats(IntervalStatsProto_UsageStats&& from) noexcept
    : IntervalStatsProto_UsageStats() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto_UsageStats& operator=(const IntervalStatsProto_UsageStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto_UsageStats& operator=(IntervalStatsProto_UsageStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto_UsageStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto_UsageStats* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto_UsageStats*>(
               &_IntervalStatsProto_UsageStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IntervalStatsProto_UsageStats& a, IntervalStatsProto_UsageStats& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto_UsageStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto_UsageStats* New() const final {
    return CreateMaybeMessage<IntervalStatsProto_UsageStats>(nullptr);
  }

  IntervalStatsProto_UsageStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto_UsageStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto_UsageStats& from);
  void MergeFrom(const IntervalStatsProto_UsageStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto_UsageStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto.UsageStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IntervalStatsProto_UsageStats_ChooserAction ChooserAction;

  // accessors -------------------------------------------------------

  enum : int {
    kChooserActionsFieldNumber = 7,
    kPackageFieldNumber = 1,
    kLastTimeActiveMsFieldNumber = 3,
    kPackageIndexFieldNumber = 2,
    kLastEventFieldNumber = 5,
    kTotalTimeActiveMsFieldNumber = 4,
    kLastTimeServiceUsedMsFieldNumber = 8,
    kTotalTimeServiceUsedMsFieldNumber = 9,
    kLastTimeVisibleMsFieldNumber = 10,
    kTotalTimeVisibleMsFieldNumber = 11,
    kLastTimeComponentUsedMsFieldNumber = 12,
    kAppLaunchCountFieldNumber = 6,
  };
  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction chooser_actions = 7;
  int chooser_actions_size() const;
  void clear_chooser_actions();
  ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction* mutable_chooser_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction >*
      mutable_chooser_actions();
  const ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction& chooser_actions(int index) const;
  ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction* add_chooser_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction >&
      chooser_actions() const;

  // optional string package = 1;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional int64 last_time_active_ms = 3;
  bool has_last_time_active_ms() const;
  void clear_last_time_active_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_active_ms() const;
  void set_last_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 package_index = 2;
  bool has_package_index() const;
  void clear_package_index();
  ::PROTOBUF_NAMESPACE_ID::int32 package_index() const;
  void set_package_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 last_event = 5;
  bool has_last_event() const;
  void clear_last_event();
  ::PROTOBUF_NAMESPACE_ID::int32 last_event() const;
  void set_last_event(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 total_time_active_ms = 4;
  bool has_total_time_active_ms() const;
  void clear_total_time_active_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_active_ms() const;
  void set_total_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_time_service_used_ms = 8;
  bool has_last_time_service_used_ms() const;
  void clear_last_time_service_used_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_service_used_ms() const;
  void set_last_time_service_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_time_service_used_ms = 9;
  bool has_total_time_service_used_ms() const;
  void clear_total_time_service_used_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_service_used_ms() const;
  void set_total_time_service_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_time_visible_ms = 10;
  bool has_last_time_visible_ms() const;
  void clear_last_time_visible_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_visible_ms() const;
  void set_last_time_visible_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_time_visible_ms = 11;
  bool has_total_time_visible_ms() const;
  void clear_total_time_visible_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_visible_ms() const;
  void set_total_time_visible_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_time_component_used_ms = 12;
  bool has_last_time_component_used_ms() const;
  void clear_last_time_component_used_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_component_used_ms() const;
  void set_last_time_component_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 app_launch_count = 6;
  bool has_app_launch_count() const;
  void clear_app_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 app_launch_count() const;
  void set_app_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto.UsageStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction > chooser_actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_active_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 package_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_event_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_active_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_service_used_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_service_used_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_visible_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_visible_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_component_used_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_launch_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// -------------------------------------------------------------------

class IntervalStatsProto_Configuration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto.Configuration) */ {
 public:
  IntervalStatsProto_Configuration();
  virtual ~IntervalStatsProto_Configuration();

  IntervalStatsProto_Configuration(const IntervalStatsProto_Configuration& from);
  IntervalStatsProto_Configuration(IntervalStatsProto_Configuration&& from) noexcept
    : IntervalStatsProto_Configuration() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto_Configuration& operator=(const IntervalStatsProto_Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto_Configuration& operator=(IntervalStatsProto_Configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto_Configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto_Configuration* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto_Configuration*>(
               &_IntervalStatsProto_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IntervalStatsProto_Configuration& a, IntervalStatsProto_Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto_Configuration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto_Configuration* New() const final {
    return CreateMaybeMessage<IntervalStatsProto_Configuration>(nullptr);
  }

  IntervalStatsProto_Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto_Configuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto_Configuration& from);
  void MergeFrom(const IntervalStatsProto_Configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto_Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto.Configuration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kLastTimeActiveMsFieldNumber = 2,
    kTotalTimeActiveMsFieldNumber = 3,
    kCountFieldNumber = 4,
    kActiveFieldNumber = 5,
  };
  // optional .android.content.ConfigurationProto config = 1;
  bool has_config() const;
  void clear_config();
  const ::android::content::ConfigurationProto& config() const;
  ::android::content::ConfigurationProto* release_config();
  ::android::content::ConfigurationProto* mutable_config();
  void set_allocated_config(::android::content::ConfigurationProto* config);

  // optional int64 last_time_active_ms = 2;
  bool has_last_time_active_ms() const;
  void clear_last_time_active_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_active_ms() const;
  void set_last_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_time_active_ms = 3;
  bool has_total_time_active_ms() const;
  void clear_total_time_active_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_active_ms() const;
  void set_total_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 count = 4;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool active = 5;
  bool has_active() const;
  void clear_active();
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto.Configuration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::content::ConfigurationProto* config_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_time_active_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_active_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  bool active_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// -------------------------------------------------------------------

class IntervalStatsProto_Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto.Event) */ {
 public:
  IntervalStatsProto_Event();
  virtual ~IntervalStatsProto_Event();

  IntervalStatsProto_Event(const IntervalStatsProto_Event& from);
  IntervalStatsProto_Event(IntervalStatsProto_Event&& from) noexcept
    : IntervalStatsProto_Event() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto_Event& operator=(const IntervalStatsProto_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto_Event& operator=(IntervalStatsProto_Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto_Event* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto_Event*>(
               &_IntervalStatsProto_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IntervalStatsProto_Event& a, IntervalStatsProto_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto_Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto_Event* New() const final {
    return CreateMaybeMessage<IntervalStatsProto_Event>(nullptr);
  }

  IntervalStatsProto_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto_Event& from);
  void MergeFrom(const IntervalStatsProto_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto.Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
    kClassFieldNumber = 3,
    kShortcutIdFieldNumber = 9,
    kNotificationChannelFieldNumber = 12,
    kConfigFieldNumber = 8,
    kPackageIndexFieldNumber = 2,
    kClassIndexFieldNumber = 4,
    kTimeMsFieldNumber = 5,
    kFlagsFieldNumber = 6,
    kTypeFieldNumber = 7,
    kStandbyBucketFieldNumber = 11,
    kNotificationChannelIndexFieldNumber = 13,
    kInstanceIdFieldNumber = 14,
    kTaskRootPackageIndexFieldNumber = 15,
    kTaskRootClassIndexFieldNumber = 16,
    kLocusIdIndexFieldNumber = 17,
  };
  // optional string package = 1;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional string class = 3;
  bool has_class_() const;
  void clear_class_();
  const std::string& class_() const;
  void set_class_(const std::string& value);
  void set_class_(std::string&& value);
  void set_class_(const char* value);
  void set_class_(const char* value, size_t size);
  std::string* mutable_class_();
  std::string* release_class_();
  void set_allocated_class_(std::string* class_);

  // optional string shortcut_id = 9;
  bool has_shortcut_id() const;
  void clear_shortcut_id();
  const std::string& shortcut_id() const;
  void set_shortcut_id(const std::string& value);
  void set_shortcut_id(std::string&& value);
  void set_shortcut_id(const char* value);
  void set_shortcut_id(const char* value, size_t size);
  std::string* mutable_shortcut_id();
  std::string* release_shortcut_id();
  void set_allocated_shortcut_id(std::string* shortcut_id);

  // optional string notification_channel = 12;
  bool has_notification_channel() const;
  void clear_notification_channel();
  const std::string& notification_channel() const;
  void set_notification_channel(const std::string& value);
  void set_notification_channel(std::string&& value);
  void set_notification_channel(const char* value);
  void set_notification_channel(const char* value, size_t size);
  std::string* mutable_notification_channel();
  std::string* release_notification_channel();
  void set_allocated_notification_channel(std::string* notification_channel);

  // optional .android.content.ConfigurationProto config = 8;
  bool has_config() const;
  void clear_config();
  const ::android::content::ConfigurationProto& config() const;
  ::android::content::ConfigurationProto* release_config();
  ::android::content::ConfigurationProto* mutable_config();
  void set_allocated_config(::android::content::ConfigurationProto* config);

  // optional int32 package_index = 2;
  bool has_package_index() const;
  void clear_package_index();
  ::PROTOBUF_NAMESPACE_ID::int32 package_index() const;
  void set_package_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 class_index = 4;
  bool has_class_index() const;
  void clear_class_index();
  ::PROTOBUF_NAMESPACE_ID::int32 class_index() const;
  void set_class_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 time_ms = 5;
  bool has_time_ms() const;
  void clear_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 time_ms() const;
  void set_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 flags = 6;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 type = 7;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 standby_bucket = 11;
  bool has_standby_bucket() const;
  void clear_standby_bucket();
  ::PROTOBUF_NAMESPACE_ID::int32 standby_bucket() const;
  void set_standby_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 notification_channel_index = 13;
  bool has_notification_channel_index() const;
  void clear_notification_channel_index();
  ::PROTOBUF_NAMESPACE_ID::int32 notification_channel_index() const;
  void set_notification_channel_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 instance_id = 14;
  bool has_instance_id() const;
  void clear_instance_id();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id() const;
  void set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 task_root_package_index = 15;
  bool has_task_root_package_index() const;
  void clear_task_root_package_index();
  ::PROTOBUF_NAMESPACE_ID::int32 task_root_package_index() const;
  void set_task_root_package_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 task_root_class_index = 16;
  bool has_task_root_class_index() const;
  void clear_task_root_class_index();
  ::PROTOBUF_NAMESPACE_ID::int32 task_root_class_index() const;
  void set_task_root_class_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 locus_id_index = 17;
  bool has_locus_id_index() const;
  void clear_locus_id_index();
  ::PROTOBUF_NAMESPACE_ID::int32 locus_id_index() const;
  void set_locus_id_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto.Event)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shortcut_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_channel_;
  ::android::content::ConfigurationProto* config_;
  ::PROTOBUF_NAMESPACE_ID::int32 package_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 class_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 standby_bucket_;
  ::PROTOBUF_NAMESPACE_ID::int32 notification_channel_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_root_package_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_root_class_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 locus_id_index_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// -------------------------------------------------------------------

class IntervalStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.usage.IntervalStatsProto) */ {
 public:
  IntervalStatsProto();
  virtual ~IntervalStatsProto();

  IntervalStatsProto(const IntervalStatsProto& from);
  IntervalStatsProto(IntervalStatsProto&& from) noexcept
    : IntervalStatsProto() {
    *this = ::std::move(from);
  }

  inline IntervalStatsProto& operator=(const IntervalStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalStatsProto& operator=(IntervalStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalStatsProto* internal_default_instance() {
    return reinterpret_cast<const IntervalStatsProto*>(
               &_IntervalStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IntervalStatsProto& a, IntervalStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalStatsProto* New() const final {
    return CreateMaybeMessage<IntervalStatsProto>(nullptr);
  }

  IntervalStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalStatsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalStatsProto& from);
  void MergeFrom(const IntervalStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.usage.IntervalStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IntervalStatsProto_StringPool StringPool;
  typedef IntervalStatsProto_CountAndTime CountAndTime;
  typedef IntervalStatsProto_UsageStats UsageStats;
  typedef IntervalStatsProto_Configuration Configuration;
  typedef IntervalStatsProto_Event Event;

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 20,
    kConfigurationsFieldNumber = 21,
    kEventLogFieldNumber = 22,
    kStringpoolFieldNumber = 2,
    kInteractiveFieldNumber = 10,
    kNonInteractiveFieldNumber = 11,
    kKeyguardShownFieldNumber = 12,
    kKeyguardHiddenFieldNumber = 13,
    kEndTimeMsFieldNumber = 1,
    kMajorVersionFieldNumber = 3,
    kMinorVersionFieldNumber = 4,
  };
  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats packages = 20;
  int packages_size() const;
  void clear_packages();
  ::com::android::server::usage::IntervalStatsProto_UsageStats* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats >*
      mutable_packages();
  const ::com::android::server::usage::IntervalStatsProto_UsageStats& packages(int index) const;
  ::com::android::server::usage::IntervalStatsProto_UsageStats* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats >&
      packages() const;

  // repeated .com.android.server.usage.IntervalStatsProto.Configuration configurations = 21;
  int configurations_size() const;
  void clear_configurations();
  ::com::android::server::usage::IntervalStatsProto_Configuration* mutable_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Configuration >*
      mutable_configurations();
  const ::com::android::server::usage::IntervalStatsProto_Configuration& configurations(int index) const;
  ::com::android::server::usage::IntervalStatsProto_Configuration* add_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Configuration >&
      configurations() const;

  // repeated .com.android.server.usage.IntervalStatsProto.Event event_log = 22;
  int event_log_size() const;
  void clear_event_log();
  ::com::android::server::usage::IntervalStatsProto_Event* mutable_event_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Event >*
      mutable_event_log();
  const ::com::android::server::usage::IntervalStatsProto_Event& event_log(int index) const;
  ::com::android::server::usage::IntervalStatsProto_Event* add_event_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Event >&
      event_log() const;

  // optional .com.android.server.usage.IntervalStatsProto.StringPool stringpool = 2;
  bool has_stringpool() const;
  void clear_stringpool();
  const ::com::android::server::usage::IntervalStatsProto_StringPool& stringpool() const;
  ::com::android::server::usage::IntervalStatsProto_StringPool* release_stringpool();
  ::com::android::server::usage::IntervalStatsProto_StringPool* mutable_stringpool();
  void set_allocated_stringpool(::com::android::server::usage::IntervalStatsProto_StringPool* stringpool);

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime interactive = 10;
  bool has_interactive() const;
  void clear_interactive();
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime& interactive() const;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* release_interactive();
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* mutable_interactive();
  void set_allocated_interactive(::com::android::server::usage::IntervalStatsProto_CountAndTime* interactive);

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime non_interactive = 11;
  bool has_non_interactive() const;
  void clear_non_interactive();
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime& non_interactive() const;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* release_non_interactive();
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* mutable_non_interactive();
  void set_allocated_non_interactive(::com::android::server::usage::IntervalStatsProto_CountAndTime* non_interactive);

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_shown = 12;
  bool has_keyguard_shown() const;
  void clear_keyguard_shown();
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime& keyguard_shown() const;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* release_keyguard_shown();
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* mutable_keyguard_shown();
  void set_allocated_keyguard_shown(::com::android::server::usage::IntervalStatsProto_CountAndTime* keyguard_shown);

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_hidden = 13;
  bool has_keyguard_hidden() const;
  void clear_keyguard_hidden();
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime& keyguard_hidden() const;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* release_keyguard_hidden();
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* mutable_keyguard_hidden();
  void set_allocated_keyguard_hidden(::com::android::server::usage::IntervalStatsProto_CountAndTime* keyguard_hidden);

  // optional int64 end_time_ms = 1;
  bool has_end_time_ms() const;
  void clear_end_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_ms() const;
  void set_end_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 major_version = 3;
  bool has_major_version() const;
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::int32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 minor_version = 4;
  bool has_minor_version() const;
  void clear_minor_version();
  ::PROTOBUF_NAMESPACE_ID::int32 minor_version() const;
  void set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.usage.IntervalStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats > packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Configuration > configurations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Event > event_log_;
  ::com::android::server::usage::IntervalStatsProto_StringPool* stringpool_;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* interactive_;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* non_interactive_;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* keyguard_shown_;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* keyguard_hidden_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 major_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 minor_version_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntervalStatsProto_StringPool

// optional int32 size = 1;
inline bool IntervalStatsProto_StringPool::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntervalStatsProto_StringPool::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_StringPool::size() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.StringPool.size)
  return size_;
}
inline void IntervalStatsProto_StringPool::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.StringPool.size)
}

// repeated string strings = 2;
inline int IntervalStatsProto_StringPool::strings_size() const {
  return strings_.size();
}
inline void IntervalStatsProto_StringPool::clear_strings() {
  strings_.Clear();
}
inline const std::string& IntervalStatsProto_StringPool::strings(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.StringPool.strings)
  return strings_.Get(index);
}
inline std::string* IntervalStatsProto_StringPool::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.StringPool.strings)
  return strings_.Mutable(index);
}
inline void IntervalStatsProto_StringPool::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.StringPool.strings)
  strings_.Mutable(index)->assign(value);
}
inline void IntervalStatsProto_StringPool::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.StringPool.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void IntervalStatsProto_StringPool::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.StringPool.strings)
}
inline void IntervalStatsProto_StringPool::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.StringPool.strings)
}
inline std::string* IntervalStatsProto_StringPool::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.usage.IntervalStatsProto.StringPool.strings)
  return strings_.Add();
}
inline void IntervalStatsProto_StringPool::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.usage.IntervalStatsProto.StringPool.strings)
}
inline void IntervalStatsProto_StringPool::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.usage.IntervalStatsProto.StringPool.strings)
}
inline void IntervalStatsProto_StringPool::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.usage.IntervalStatsProto.StringPool.strings)
}
inline void IntervalStatsProto_StringPool::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.usage.IntervalStatsProto.StringPool.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IntervalStatsProto_StringPool::strings() const {
  // @@protoc_insertion_point(field_list:com.android.server.usage.IntervalStatsProto.StringPool.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IntervalStatsProto_StringPool::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.usage.IntervalStatsProto.StringPool.strings)
  return &strings_;
}

// -------------------------------------------------------------------

// IntervalStatsProto_CountAndTime

// optional int32 count = 1;
inline bool IntervalStatsProto_CountAndTime::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntervalStatsProto_CountAndTime::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_CountAndTime::count() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.CountAndTime.count)
  return count_;
}
inline void IntervalStatsProto_CountAndTime::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.CountAndTime.count)
}

// optional int64 time_ms = 2;
inline bool IntervalStatsProto_CountAndTime::has_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntervalStatsProto_CountAndTime::clear_time_ms() {
  time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_CountAndTime::time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.CountAndTime.time_ms)
  return time_ms_;
}
inline void IntervalStatsProto_CountAndTime::set_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.CountAndTime.time_ms)
}

// -------------------------------------------------------------------

// IntervalStatsProto_UsageStats_ChooserAction_CategoryCount

// optional string name = 1;
inline bool IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
  return name_.GetNoArena();
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
}
inline std::string* IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name)
}

// optional int32 count = 3;
inline bool IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::count() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.count)
  return count_;
}
inline void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.count)
}

// -------------------------------------------------------------------

// IntervalStatsProto_UsageStats_ChooserAction

// optional string name = 1;
inline bool IntervalStatsProto_UsageStats_ChooserAction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntervalStatsProto_UsageStats_ChooserAction::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IntervalStatsProto_UsageStats_ChooserAction::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
  return name_.GetNoArena();
}
inline void IntervalStatsProto_UsageStats_ChooserAction::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
}
inline void IntervalStatsProto_UsageStats_ChooserAction::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
}
inline void IntervalStatsProto_UsageStats_ChooserAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
}
inline void IntervalStatsProto_UsageStats_ChooserAction::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
}
inline std::string* IntervalStatsProto_UsageStats_ChooserAction::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalStatsProto_UsageStats_ChooserAction::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalStatsProto_UsageStats_ChooserAction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name)
}

// repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount counts = 3;
inline int IntervalStatsProto_UsageStats_ChooserAction::counts_size() const {
  return counts_.size();
}
inline void IntervalStatsProto_UsageStats_ChooserAction::clear_counts() {
  counts_.Clear();
}
inline ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* IntervalStatsProto_UsageStats_ChooserAction::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.counts)
  return counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount >*
IntervalStatsProto_UsageStats_ChooserAction::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.counts)
  return &counts_;
}
inline const ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& IntervalStatsProto_UsageStats_ChooserAction::counts(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.counts)
  return counts_.Get(index);
}
inline ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* IntervalStatsProto_UsageStats_ChooserAction::add_counts() {
  // @@protoc_insertion_point(field_add:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.counts)
  return counts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount >&
IntervalStatsProto_UsageStats_ChooserAction::counts() const {
  // @@protoc_insertion_point(field_list:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.counts)
  return counts_;
}

// -------------------------------------------------------------------

// IntervalStatsProto_UsageStats

// optional string package = 1;
inline bool IntervalStatsProto_UsageStats::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IntervalStatsProto_UsageStats::package() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.package)
  return package_.GetNoArena();
}
inline void IntervalStatsProto_UsageStats::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.package)
}
inline void IntervalStatsProto_UsageStats::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.usage.IntervalStatsProto.UsageStats.package)
}
inline void IntervalStatsProto_UsageStats::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.UsageStats.package)
}
inline void IntervalStatsProto_UsageStats::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.UsageStats.package)
}
inline std::string* IntervalStatsProto_UsageStats::mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.UsageStats.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalStatsProto_UsageStats::release_package() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.UsageStats.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalStatsProto_UsageStats::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.UsageStats.package)
}

// optional int32 package_index = 2;
inline bool IntervalStatsProto_UsageStats::has_package_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_package_index() {
  package_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_UsageStats::package_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.package_index)
  return package_index_;
}
inline void IntervalStatsProto_UsageStats::set_package_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  package_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.package_index)
}

// optional int64 last_time_active_ms = 3;
inline bool IntervalStatsProto_UsageStats::has_last_time_active_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_last_time_active_ms() {
  last_time_active_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_UsageStats::last_time_active_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_active_ms)
  return last_time_active_ms_;
}
inline void IntervalStatsProto_UsageStats::set_last_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_time_active_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_active_ms)
}

// optional int64 total_time_active_ms = 4;
inline bool IntervalStatsProto_UsageStats::has_total_time_active_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_total_time_active_ms() {
  total_time_active_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_UsageStats::total_time_active_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.total_time_active_ms)
  return total_time_active_ms_;
}
inline void IntervalStatsProto_UsageStats::set_total_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  total_time_active_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.total_time_active_ms)
}

// optional int32 last_event = 5;
inline bool IntervalStatsProto_UsageStats::has_last_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_last_event() {
  last_event_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_UsageStats::last_event() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.last_event)
  return last_event_;
}
inline void IntervalStatsProto_UsageStats::set_last_event(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_event_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.last_event)
}

// optional int32 app_launch_count = 6;
inline bool IntervalStatsProto_UsageStats::has_app_launch_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_app_launch_count() {
  app_launch_count_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_UsageStats::app_launch_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.app_launch_count)
  return app_launch_count_;
}
inline void IntervalStatsProto_UsageStats::set_app_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  app_launch_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.app_launch_count)
}

// repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction chooser_actions = 7;
inline int IntervalStatsProto_UsageStats::chooser_actions_size() const {
  return chooser_actions_.size();
}
inline void IntervalStatsProto_UsageStats::clear_chooser_actions() {
  chooser_actions_.Clear();
}
inline ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction* IntervalStatsProto_UsageStats::mutable_chooser_actions(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.UsageStats.chooser_actions)
  return chooser_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction >*
IntervalStatsProto_UsageStats::mutable_chooser_actions() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.usage.IntervalStatsProto.UsageStats.chooser_actions)
  return &chooser_actions_;
}
inline const ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction& IntervalStatsProto_UsageStats::chooser_actions(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.chooser_actions)
  return chooser_actions_.Get(index);
}
inline ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction* IntervalStatsProto_UsageStats::add_chooser_actions() {
  // @@protoc_insertion_point(field_add:com.android.server.usage.IntervalStatsProto.UsageStats.chooser_actions)
  return chooser_actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction >&
IntervalStatsProto_UsageStats::chooser_actions() const {
  // @@protoc_insertion_point(field_list:com.android.server.usage.IntervalStatsProto.UsageStats.chooser_actions)
  return chooser_actions_;
}

// optional int64 last_time_service_used_ms = 8;
inline bool IntervalStatsProto_UsageStats::has_last_time_service_used_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_last_time_service_used_ms() {
  last_time_service_used_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_UsageStats::last_time_service_used_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_service_used_ms)
  return last_time_service_used_ms_;
}
inline void IntervalStatsProto_UsageStats::set_last_time_service_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  last_time_service_used_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_service_used_ms)
}

// optional int64 total_time_service_used_ms = 9;
inline bool IntervalStatsProto_UsageStats::has_total_time_service_used_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_total_time_service_used_ms() {
  total_time_service_used_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_UsageStats::total_time_service_used_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.total_time_service_used_ms)
  return total_time_service_used_ms_;
}
inline void IntervalStatsProto_UsageStats::set_total_time_service_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  total_time_service_used_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.total_time_service_used_ms)
}

// optional int64 last_time_visible_ms = 10;
inline bool IntervalStatsProto_UsageStats::has_last_time_visible_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_last_time_visible_ms() {
  last_time_visible_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_UsageStats::last_time_visible_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_visible_ms)
  return last_time_visible_ms_;
}
inline void IntervalStatsProto_UsageStats::set_last_time_visible_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  last_time_visible_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_visible_ms)
}

// optional int64 total_time_visible_ms = 11;
inline bool IntervalStatsProto_UsageStats::has_total_time_visible_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_total_time_visible_ms() {
  total_time_visible_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_UsageStats::total_time_visible_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.total_time_visible_ms)
  return total_time_visible_ms_;
}
inline void IntervalStatsProto_UsageStats::set_total_time_visible_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  total_time_visible_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.total_time_visible_ms)
}

// optional int64 last_time_component_used_ms = 12;
inline bool IntervalStatsProto_UsageStats::has_last_time_component_used_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IntervalStatsProto_UsageStats::clear_last_time_component_used_ms() {
  last_time_component_used_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_UsageStats::last_time_component_used_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_component_used_ms)
  return last_time_component_used_ms_;
}
inline void IntervalStatsProto_UsageStats::set_last_time_component_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  last_time_component_used_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.UsageStats.last_time_component_used_ms)
}

// -------------------------------------------------------------------

// IntervalStatsProto_Configuration

// optional .android.content.ConfigurationProto config = 1;
inline bool IntervalStatsProto_Configuration::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ConfigurationProto& IntervalStatsProto_Configuration::config() const {
  const ::android::content::ConfigurationProto* p = config_;
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Configuration.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ConfigurationProto*>(
      &::android::content::_ConfigurationProto_default_instance_);
}
inline ::android::content::ConfigurationProto* IntervalStatsProto_Configuration::release_config() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.Configuration.config)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ConfigurationProto* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::android::content::ConfigurationProto* IntervalStatsProto_Configuration::mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ConfigurationProto>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.Configuration.config)
  return config_;
}
inline void IntervalStatsProto_Configuration::set_allocated_config(::android::content::ConfigurationProto* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.Configuration.config)
}

// optional int64 last_time_active_ms = 2;
inline bool IntervalStatsProto_Configuration::has_last_time_active_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntervalStatsProto_Configuration::clear_last_time_active_ms() {
  last_time_active_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_Configuration::last_time_active_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Configuration.last_time_active_ms)
  return last_time_active_ms_;
}
inline void IntervalStatsProto_Configuration::set_last_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_time_active_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Configuration.last_time_active_ms)
}

// optional int64 total_time_active_ms = 3;
inline bool IntervalStatsProto_Configuration::has_total_time_active_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntervalStatsProto_Configuration::clear_total_time_active_ms() {
  total_time_active_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_Configuration::total_time_active_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Configuration.total_time_active_ms)
  return total_time_active_ms_;
}
inline void IntervalStatsProto_Configuration::set_total_time_active_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  total_time_active_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Configuration.total_time_active_ms)
}

// optional int32 count = 4;
inline bool IntervalStatsProto_Configuration::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntervalStatsProto_Configuration::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Configuration::count() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Configuration.count)
  return count_;
}
inline void IntervalStatsProto_Configuration::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Configuration.count)
}

// optional bool active = 5;
inline bool IntervalStatsProto_Configuration::has_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntervalStatsProto_Configuration::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool IntervalStatsProto_Configuration::active() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Configuration.active)
  return active_;
}
inline void IntervalStatsProto_Configuration::set_active(bool value) {
  _has_bits_[0] |= 0x00000010u;
  active_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Configuration.active)
}

// -------------------------------------------------------------------

// IntervalStatsProto_Event

// optional string package = 1;
inline bool IntervalStatsProto_Event::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntervalStatsProto_Event::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IntervalStatsProto_Event::package() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.package)
  return package_.GetNoArena();
}
inline void IntervalStatsProto_Event::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.package)
}
inline void IntervalStatsProto_Event::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.usage.IntervalStatsProto.Event.package)
}
inline void IntervalStatsProto_Event::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.Event.package)
}
inline void IntervalStatsProto_Event::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.Event.package)
}
inline std::string* IntervalStatsProto_Event::mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.Event.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalStatsProto_Event::release_package() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.Event.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalStatsProto_Event::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.Event.package)
}

// optional int32 package_index = 2;
inline bool IntervalStatsProto_Event::has_package_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IntervalStatsProto_Event::clear_package_index() {
  package_index_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::package_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.package_index)
  return package_index_;
}
inline void IntervalStatsProto_Event::set_package_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  package_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.package_index)
}

// optional string class = 3;
inline bool IntervalStatsProto_Event::has_class_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntervalStatsProto_Event::clear_class_() {
  class__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IntervalStatsProto_Event::class_() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.class)
  return class__.GetNoArena();
}
inline void IntervalStatsProto_Event::set_class_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  class__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.class)
}
inline void IntervalStatsProto_Event::set_class_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  class__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.usage.IntervalStatsProto.Event.class)
}
inline void IntervalStatsProto_Event::set_class_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  class__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.Event.class)
}
inline void IntervalStatsProto_Event::set_class_(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  class__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.Event.class)
}
inline std::string* IntervalStatsProto_Event::mutable_class_() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.Event.class)
  return class__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalStatsProto_Event::release_class_() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.Event.class)
  if (!has_class_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return class__.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalStatsProto_Event::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  class__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.Event.class)
}

// optional int32 class_index = 4;
inline bool IntervalStatsProto_Event::has_class_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IntervalStatsProto_Event::clear_class_index() {
  class_index_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::class_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.class_index)
  return class_index_;
}
inline void IntervalStatsProto_Event::set_class_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  class_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.class_index)
}

// optional int64 time_ms = 5;
inline bool IntervalStatsProto_Event::has_time_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IntervalStatsProto_Event::clear_time_ms() {
  time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto_Event::time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.time_ms)
  return time_ms_;
}
inline void IntervalStatsProto_Event::set_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.time_ms)
}

// optional int32 flags = 6;
inline bool IntervalStatsProto_Event::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IntervalStatsProto_Event::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::flags() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.flags)
  return flags_;
}
inline void IntervalStatsProto_Event::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.flags)
}

// optional int32 type = 7;
inline bool IntervalStatsProto_Event::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IntervalStatsProto_Event::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::type() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.type)
  return type_;
}
inline void IntervalStatsProto_Event::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.type)
}

// optional .android.content.ConfigurationProto config = 8;
inline bool IntervalStatsProto_Event::has_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::content::ConfigurationProto& IntervalStatsProto_Event::config() const {
  const ::android::content::ConfigurationProto* p = config_;
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ConfigurationProto*>(
      &::android::content::_ConfigurationProto_default_instance_);
}
inline ::android::content::ConfigurationProto* IntervalStatsProto_Event::release_config() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.Event.config)
  _has_bits_[0] &= ~0x00000010u;
  ::android::content::ConfigurationProto* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::android::content::ConfigurationProto* IntervalStatsProto_Event::mutable_config() {
  _has_bits_[0] |= 0x00000010u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ConfigurationProto>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.Event.config)
  return config_;
}
inline void IntervalStatsProto_Event::set_allocated_config(::android::content::ConfigurationProto* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.Event.config)
}

// optional string shortcut_id = 9;
inline bool IntervalStatsProto_Event::has_shortcut_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntervalStatsProto_Event::clear_shortcut_id() {
  shortcut_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IntervalStatsProto_Event::shortcut_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
  return shortcut_id_.GetNoArena();
}
inline void IntervalStatsProto_Event::set_shortcut_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  shortcut_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
}
inline void IntervalStatsProto_Event::set_shortcut_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  shortcut_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
}
inline void IntervalStatsProto_Event::set_shortcut_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  shortcut_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
}
inline void IntervalStatsProto_Event::set_shortcut_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  shortcut_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
}
inline std::string* IntervalStatsProto_Event::mutable_shortcut_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
  return shortcut_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalStatsProto_Event::release_shortcut_id() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
  if (!has_shortcut_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return shortcut_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalStatsProto_Event::set_allocated_shortcut_id(std::string* shortcut_id) {
  if (shortcut_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shortcut_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shortcut_id);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.Event.shortcut_id)
}

// optional int32 standby_bucket = 11;
inline bool IntervalStatsProto_Event::has_standby_bucket() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IntervalStatsProto_Event::clear_standby_bucket() {
  standby_bucket_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::standby_bucket() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.standby_bucket)
  return standby_bucket_;
}
inline void IntervalStatsProto_Event::set_standby_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  standby_bucket_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.standby_bucket)
}

// optional string notification_channel = 12;
inline bool IntervalStatsProto_Event::has_notification_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntervalStatsProto_Event::clear_notification_channel() {
  notification_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& IntervalStatsProto_Event::notification_channel() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
  return notification_channel_.GetNoArena();
}
inline void IntervalStatsProto_Event::set_notification_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  notification_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
}
inline void IntervalStatsProto_Event::set_notification_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  notification_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
}
inline void IntervalStatsProto_Event::set_notification_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  notification_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
}
inline void IntervalStatsProto_Event::set_notification_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  notification_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
}
inline std::string* IntervalStatsProto_Event::mutable_notification_channel() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
  return notification_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalStatsProto_Event::release_notification_channel() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
  if (!has_notification_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return notification_channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalStatsProto_Event::set_allocated_notification_channel(std::string* notification_channel) {
  if (notification_channel != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  notification_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_channel);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.Event.notification_channel)
}

// optional int32 notification_channel_index = 13;
inline bool IntervalStatsProto_Event::has_notification_channel_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IntervalStatsProto_Event::clear_notification_channel_index() {
  notification_channel_index_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::notification_channel_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.notification_channel_index)
  return notification_channel_index_;
}
inline void IntervalStatsProto_Event::set_notification_channel_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  notification_channel_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.notification_channel_index)
}

// optional int32 instance_id = 14;
inline bool IntervalStatsProto_Event::has_instance_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IntervalStatsProto_Event::clear_instance_id() {
  instance_id_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::instance_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.instance_id)
  return instance_id_;
}
inline void IntervalStatsProto_Event::set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.instance_id)
}

// optional int32 task_root_package_index = 15;
inline bool IntervalStatsProto_Event::has_task_root_package_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IntervalStatsProto_Event::clear_task_root_package_index() {
  task_root_package_index_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::task_root_package_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.task_root_package_index)
  return task_root_package_index_;
}
inline void IntervalStatsProto_Event::set_task_root_package_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  task_root_package_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.task_root_package_index)
}

// optional int32 task_root_class_index = 16;
inline bool IntervalStatsProto_Event::has_task_root_class_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IntervalStatsProto_Event::clear_task_root_class_index() {
  task_root_class_index_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::task_root_class_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.task_root_class_index)
  return task_root_class_index_;
}
inline void IntervalStatsProto_Event::set_task_root_class_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  task_root_class_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.task_root_class_index)
}

// optional int32 locus_id_index = 17;
inline bool IntervalStatsProto_Event::has_locus_id_index() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IntervalStatsProto_Event::clear_locus_id_index() {
  locus_id_index_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto_Event::locus_id_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.Event.locus_id_index)
  return locus_id_index_;
}
inline void IntervalStatsProto_Event::set_locus_id_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  locus_id_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.Event.locus_id_index)
}

// -------------------------------------------------------------------

// IntervalStatsProto

// optional int64 end_time_ms = 1;
inline bool IntervalStatsProto::has_end_time_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IntervalStatsProto::clear_end_time_ms() {
  end_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntervalStatsProto::end_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.end_time_ms)
  return end_time_ms_;
}
inline void IntervalStatsProto::set_end_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  end_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.end_time_ms)
}

// optional .com.android.server.usage.IntervalStatsProto.StringPool stringpool = 2;
inline bool IntervalStatsProto::has_stringpool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntervalStatsProto::clear_stringpool() {
  if (stringpool_ != nullptr) stringpool_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::usage::IntervalStatsProto_StringPool& IntervalStatsProto::stringpool() const {
  const ::com::android::server::usage::IntervalStatsProto_StringPool* p = stringpool_;
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.stringpool)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::usage::IntervalStatsProto_StringPool*>(
      &::com::android::server::usage::_IntervalStatsProto_StringPool_default_instance_);
}
inline ::com::android::server::usage::IntervalStatsProto_StringPool* IntervalStatsProto::release_stringpool() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.stringpool)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::usage::IntervalStatsProto_StringPool* temp = stringpool_;
  stringpool_ = nullptr;
  return temp;
}
inline ::com::android::server::usage::IntervalStatsProto_StringPool* IntervalStatsProto::mutable_stringpool() {
  _has_bits_[0] |= 0x00000001u;
  if (stringpool_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_StringPool>(GetArenaNoVirtual());
    stringpool_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.stringpool)
  return stringpool_;
}
inline void IntervalStatsProto::set_allocated_stringpool(::com::android::server::usage::IntervalStatsProto_StringPool* stringpool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stringpool_;
  }
  if (stringpool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stringpool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringpool, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stringpool_ = stringpool;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.stringpool)
}

// optional int32 major_version = 3;
inline bool IntervalStatsProto::has_major_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IntervalStatsProto::clear_major_version() {
  major_version_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto::major_version() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.major_version)
  return major_version_;
}
inline void IntervalStatsProto::set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  major_version_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.major_version)
}

// optional int32 minor_version = 4;
inline bool IntervalStatsProto::has_minor_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IntervalStatsProto::clear_minor_version() {
  minor_version_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntervalStatsProto::minor_version() const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.minor_version)
  return minor_version_;
}
inline void IntervalStatsProto::set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.usage.IntervalStatsProto.minor_version)
}

// optional .com.android.server.usage.IntervalStatsProto.CountAndTime interactive = 10;
inline bool IntervalStatsProto::has_interactive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntervalStatsProto::clear_interactive() {
  if (interactive_ != nullptr) interactive_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::usage::IntervalStatsProto_CountAndTime& IntervalStatsProto::interactive() const {
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime* p = interactive_;
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.interactive)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      &::com::android::server::usage::_IntervalStatsProto_CountAndTime_default_instance_);
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::release_interactive() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.interactive)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* temp = interactive_;
  interactive_ = nullptr;
  return temp;
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::mutable_interactive() {
  _has_bits_[0] |= 0x00000002u;
  if (interactive_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_CountAndTime>(GetArenaNoVirtual());
    interactive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.interactive)
  return interactive_;
}
inline void IntervalStatsProto::set_allocated_interactive(::com::android::server::usage::IntervalStatsProto_CountAndTime* interactive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete interactive_;
  }
  if (interactive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interactive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  interactive_ = interactive;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.interactive)
}

// optional .com.android.server.usage.IntervalStatsProto.CountAndTime non_interactive = 11;
inline bool IntervalStatsProto::has_non_interactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntervalStatsProto::clear_non_interactive() {
  if (non_interactive_ != nullptr) non_interactive_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::usage::IntervalStatsProto_CountAndTime& IntervalStatsProto::non_interactive() const {
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime* p = non_interactive_;
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.non_interactive)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      &::com::android::server::usage::_IntervalStatsProto_CountAndTime_default_instance_);
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::release_non_interactive() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.non_interactive)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* temp = non_interactive_;
  non_interactive_ = nullptr;
  return temp;
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::mutable_non_interactive() {
  _has_bits_[0] |= 0x00000004u;
  if (non_interactive_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_CountAndTime>(GetArenaNoVirtual());
    non_interactive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.non_interactive)
  return non_interactive_;
}
inline void IntervalStatsProto::set_allocated_non_interactive(::com::android::server::usage::IntervalStatsProto_CountAndTime* non_interactive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete non_interactive_;
  }
  if (non_interactive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      non_interactive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_interactive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  non_interactive_ = non_interactive;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.non_interactive)
}

// optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_shown = 12;
inline bool IntervalStatsProto::has_keyguard_shown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntervalStatsProto::clear_keyguard_shown() {
  if (keyguard_shown_ != nullptr) keyguard_shown_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::usage::IntervalStatsProto_CountAndTime& IntervalStatsProto::keyguard_shown() const {
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime* p = keyguard_shown_;
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.keyguard_shown)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      &::com::android::server::usage::_IntervalStatsProto_CountAndTime_default_instance_);
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::release_keyguard_shown() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.keyguard_shown)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* temp = keyguard_shown_;
  keyguard_shown_ = nullptr;
  return temp;
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::mutable_keyguard_shown() {
  _has_bits_[0] |= 0x00000008u;
  if (keyguard_shown_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_CountAndTime>(GetArenaNoVirtual());
    keyguard_shown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.keyguard_shown)
  return keyguard_shown_;
}
inline void IntervalStatsProto::set_allocated_keyguard_shown(::com::android::server::usage::IntervalStatsProto_CountAndTime* keyguard_shown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keyguard_shown_;
  }
  if (keyguard_shown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keyguard_shown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyguard_shown, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  keyguard_shown_ = keyguard_shown;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.keyguard_shown)
}

// optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_hidden = 13;
inline bool IntervalStatsProto::has_keyguard_hidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntervalStatsProto::clear_keyguard_hidden() {
  if (keyguard_hidden_ != nullptr) keyguard_hidden_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::usage::IntervalStatsProto_CountAndTime& IntervalStatsProto::keyguard_hidden() const {
  const ::com::android::server::usage::IntervalStatsProto_CountAndTime* p = keyguard_hidden_;
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.keyguard_hidden)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      &::com::android::server::usage::_IntervalStatsProto_CountAndTime_default_instance_);
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::release_keyguard_hidden() {
  // @@protoc_insertion_point(field_release:com.android.server.usage.IntervalStatsProto.keyguard_hidden)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::usage::IntervalStatsProto_CountAndTime* temp = keyguard_hidden_;
  keyguard_hidden_ = nullptr;
  return temp;
}
inline ::com::android::server::usage::IntervalStatsProto_CountAndTime* IntervalStatsProto::mutable_keyguard_hidden() {
  _has_bits_[0] |= 0x00000010u;
  if (keyguard_hidden_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::usage::IntervalStatsProto_CountAndTime>(GetArenaNoVirtual());
    keyguard_hidden_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.keyguard_hidden)
  return keyguard_hidden_;
}
inline void IntervalStatsProto::set_allocated_keyguard_hidden(::com::android::server::usage::IntervalStatsProto_CountAndTime* keyguard_hidden) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keyguard_hidden_;
  }
  if (keyguard_hidden) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keyguard_hidden = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyguard_hidden, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  keyguard_hidden_ = keyguard_hidden;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.usage.IntervalStatsProto.keyguard_hidden)
}

// repeated .com.android.server.usage.IntervalStatsProto.UsageStats packages = 20;
inline int IntervalStatsProto::packages_size() const {
  return packages_.size();
}
inline void IntervalStatsProto::clear_packages() {
  packages_.Clear();
}
inline ::com::android::server::usage::IntervalStatsProto_UsageStats* IntervalStatsProto::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats >*
IntervalStatsProto::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.usage.IntervalStatsProto.packages)
  return &packages_;
}
inline const ::com::android::server::usage::IntervalStatsProto_UsageStats& IntervalStatsProto::packages(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.packages)
  return packages_.Get(index);
}
inline ::com::android::server::usage::IntervalStatsProto_UsageStats* IntervalStatsProto::add_packages() {
  // @@protoc_insertion_point(field_add:com.android.server.usage.IntervalStatsProto.packages)
  return packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_UsageStats >&
IntervalStatsProto::packages() const {
  // @@protoc_insertion_point(field_list:com.android.server.usage.IntervalStatsProto.packages)
  return packages_;
}

// repeated .com.android.server.usage.IntervalStatsProto.Configuration configurations = 21;
inline int IntervalStatsProto::configurations_size() const {
  return configurations_.size();
}
inline void IntervalStatsProto::clear_configurations() {
  configurations_.Clear();
}
inline ::com::android::server::usage::IntervalStatsProto_Configuration* IntervalStatsProto::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.configurations)
  return configurations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Configuration >*
IntervalStatsProto::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.usage.IntervalStatsProto.configurations)
  return &configurations_;
}
inline const ::com::android::server::usage::IntervalStatsProto_Configuration& IntervalStatsProto::configurations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.configurations)
  return configurations_.Get(index);
}
inline ::com::android::server::usage::IntervalStatsProto_Configuration* IntervalStatsProto::add_configurations() {
  // @@protoc_insertion_point(field_add:com.android.server.usage.IntervalStatsProto.configurations)
  return configurations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Configuration >&
IntervalStatsProto::configurations() const {
  // @@protoc_insertion_point(field_list:com.android.server.usage.IntervalStatsProto.configurations)
  return configurations_;
}

// repeated .com.android.server.usage.IntervalStatsProto.Event event_log = 22;
inline int IntervalStatsProto::event_log_size() const {
  return event_log_.size();
}
inline void IntervalStatsProto::clear_event_log() {
  event_log_.Clear();
}
inline ::com::android::server::usage::IntervalStatsProto_Event* IntervalStatsProto::mutable_event_log(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.usage.IntervalStatsProto.event_log)
  return event_log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Event >*
IntervalStatsProto::mutable_event_log() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.usage.IntervalStatsProto.event_log)
  return &event_log_;
}
inline const ::com::android::server::usage::IntervalStatsProto_Event& IntervalStatsProto::event_log(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.usage.IntervalStatsProto.event_log)
  return event_log_.Get(index);
}
inline ::com::android::server::usage::IntervalStatsProto_Event* IntervalStatsProto::add_event_log() {
  // @@protoc_insertion_point(field_add:com.android.server.usage.IntervalStatsProto.event_log)
  return event_log_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::usage::IntervalStatsProto_Event >&
IntervalStatsProto::event_log() const {
  // @@protoc_insertion_point(field_list:com.android.server.usage.IntervalStatsProto.event_log)
  return event_log_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usage
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto
