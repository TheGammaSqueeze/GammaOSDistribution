// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/util/log.proto

#include "frameworks/base/core/proto/android/util/log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
namespace android {
namespace util {
class TextLogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextLogEntry> _instance;
} _TextLogEntry_default_instance_;
class BinaryLogEntry_ElemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryLogEntry_Elem> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 val_int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 val_int64_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_string_;
  float val_float_;
} _BinaryLogEntry_Elem_default_instance_;
class BinaryLogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryLogEntry> _instance;
} _BinaryLogEntry_default_instance_;
class LogProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogProto> _instance;
} _LogProto_default_instance_;
class PersistedLogProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistedLogProto> _instance;
} _PersistedLogProto_default_instance_;
}  // namespace util
}  // namespace android
static void InitDefaultsscc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_BinaryLogEntry_default_instance_;
    new (ptr) ::android::util::BinaryLogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::BinaryLogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {
      &scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,}};

static void InitDefaultsscc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_BinaryLogEntry_Elem_default_instance_;
    new (ptr) ::android::util::BinaryLogEntry_Elem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::BinaryLogEntry_Elem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {}};

static void InitDefaultsscc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_LogProto_default_instance_;
    new (ptr) ::android::util::LogProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::LogProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {
      &scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,
      &scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,}};

static void InitDefaultsscc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_PersistedLogProto_default_instance_;
    new (ptr) ::android::util::PersistedLogProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::PersistedLogProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {
      &scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,}};

static void InitDefaultsscc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_TextLogEntry_default_instance_;
    new (ptr) ::android::util::TextLogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::TextLogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, sec_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, nanosec_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, priority_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, uid_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, pid_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, tid_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, tag_),
  PROTOBUF_FIELD_OFFSET(::android::util::TextLogEntry, log_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry_Elem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry_Elem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry_Elem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry_Elem, type_),
  offsetof(::android::util::BinaryLogEntry_ElemDefaultTypeInternal, val_int32_),
  offsetof(::android::util::BinaryLogEntry_ElemDefaultTypeInternal, val_int64_),
  offsetof(::android::util::BinaryLogEntry_ElemDefaultTypeInternal, val_string_),
  offsetof(::android::util::BinaryLogEntry_ElemDefaultTypeInternal, val_float_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry_Elem, value_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, sec_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, nanosec_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, uid_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, pid_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, tid_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, tag_index_),
  PROTOBUF_FIELD_OFFSET(::android::util::BinaryLogEntry, elems_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::android::util::LogProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::util::LogProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::util::LogProto, text_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::LogProto, binary_logs_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, main_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, radio_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, events_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, system_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, crash_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, stats_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, security_logs_),
  PROTOBUF_FIELD_OFFSET(::android::util::PersistedLogProto, kernel_logs_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::android::util::TextLogEntry)},
  { 21, 32, sizeof(::android::util::BinaryLogEntry_Elem)},
  { 37, 49, sizeof(::android::util::BinaryLogEntry)},
  { 56, 63, sizeof(::android::util::LogProto)},
  { 65, 78, sizeof(::android::util::PersistedLogProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::util::_TextLogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::util::_BinaryLogEntry_Elem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::util::_BinaryLogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::util::_LogProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::util::_PersistedLogProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1frameworks/base/core/proto/android/uti"
  "l/log.proto\022\014android.util\0320frameworks/ba"
  "se/core/proto/android/privacy.proto\"\315\002\n\014"
  "TextLogEntry\022\013\n\003sec\030\001 \001(\004\022\017\n\007nanosec\030\002 \001"
  "(\004\0228\n\010priority\030\003 \001(\0162&.android.util.Text"
  "LogEntry.LogPriority\022\013\n\003uid\030\004 \001(\005\022\013\n\003pid"
  "\030\005 \001(\005\022\013\n\003tid\030\006 \001(\005\022\013\n\003tag\030\007 \001(\t\022\013\n\003log\030"
  "\010 \001(\t\"\231\001\n\013LogPriority\022\017\n\013LOG_UNKNOWN\020\000\022\017"
  "\n\013LOG_DEFAULT\020\001\022\017\n\013LOG_VERBOSE\020\002\022\r\n\tLOG_"
  "DEBUG\020\003\022\014\n\010LOG_INFO\020\004\022\014\n\010LOG_WARN\020\005\022\r\n\tL"
  "OG_ERROR\020\006\022\r\n\tLOG_FATAL\020\007\022\016\n\nLOG_SILENT\020"
  "\010:\010\232\237\325\207\003\002\010d\"\373\003\n\016BinaryLogEntry\022\013\n\003sec\030\001 "
  "\001(\004\022\017\n\007nanosec\030\002 \001(\004\022\013\n\003uid\030\003 \001(\005\022\013\n\003pid"
  "\030\004 \001(\005\022\013\n\003tid\030\005 \001(\005\022\021\n\ttag_index\030\006 \001(\r\0220"
  "\n\005elems\030\007 \003(\0132!.android.util.BinaryLogEn"
  "try.Elem\032\324\002\n\004Elem\022H\n\004type\030\001 \001(\0162&.androi"
  "d.util.BinaryLogEntry.Elem.Type:\022EVENT_T"
  "YPE_UNKNOWN\022\023\n\tval_int32\030\002 \001(\005H\000\022\023\n\tval_"
  "int64\030\003 \001(\003H\000\022\024\n\nval_string\030\004 \001(\tH\000\022\023\n\tv"
  "al_float\030\005 \001(\002H\000\"\243\001\n\004Type\022\030\n\024EVENT_TYPE_"
  "LIST_STOP\020\n\022\026\n\022EVENT_TYPE_UNKNOWN\020\?\022\022\n\016E"
  "VENT_TYPE_INT\020\000\022\023\n\017EVENT_TYPE_LONG\020\001\022\025\n\021"
  "EVENT_TYPE_STRING\020\002\022\023\n\017EVENT_TYPE_LIST\020\003"
  "\022\024\n\020EVENT_TYPE_FLOAT\020\004B\007\n\005value:\010\232\237\325\207\003\002\010"
  "d\"v\n\010LogProto\022-\n\ttext_logs\030\001 \003(\0132\032.andro"
  "id.util.TextLogEntry\0221\n\013binary_logs\030\002 \003("
  "\0132\034.android.util.BinaryLogEntry:\010\232\237\325\207\003\002\010"
  "d\"\242\003\n\021PersistedLogProto\022-\n\tmain_logs\030\001 \003"
  "(\0132\032.android.util.TextLogEntry\022.\n\nradio_"
  "logs\030\002 \003(\0132\032.android.util.TextLogEntry\022/"
  "\n\013events_logs\030\003 \003(\0132\032.android.util.TextL"
  "ogEntry\022/\n\013system_logs\030\004 \003(\0132\032.android.u"
  "til.TextLogEntry\022.\n\ncrash_logs\030\005 \003(\0132\032.a"
  "ndroid.util.TextLogEntry\022.\n\nstats_logs\030\006"
  " \003(\0132\032.android.util.TextLogEntry\0221\n\rsecu"
  "rity_logs\030\007 \003(\0132\032.android.util.TextLogEn"
  "try\022/\n\013kernel_logs\030\010 \003(\0132\032.android.util."
  "TextLogEntry:\010\232\237\325\207\003\002\010dB\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_deps[1] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_sccs[5] = {
  &scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,
  &scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,
  &scc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,
  &scc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,
  &scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto, "frameworks/base/core/proto/android/util/log.proto", 1506,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto, 5, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto), true);
namespace android {
namespace util {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextLogEntry_LogPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto[0];
}
bool TextLogEntry_LogPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_UNKNOWN;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_DEFAULT;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_VERBOSE;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_DEBUG;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_INFO;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_WARN;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_ERROR;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_FATAL;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_SILENT;
constexpr TextLogEntry_LogPriority TextLogEntry::LogPriority_MIN;
constexpr TextLogEntry_LogPriority TextLogEntry::LogPriority_MAX;
constexpr int TextLogEntry::LogPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BinaryLogEntry_Elem_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto[1];
}
bool BinaryLogEntry_Elem_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 63:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_LIST_STOP;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_UNKNOWN;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_INT;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_LONG;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_STRING;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_LIST;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_FLOAT;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::Type_MIN;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::Type_MAX;
constexpr int BinaryLogEntry_Elem::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TextLogEntry::InitAsDefaultInstance() {
}
class TextLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TextLogEntry>()._has_bits_);
  static void set_has_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nanosec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_log(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TextLogEntry::TextLogEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.TextLogEntry)
}
TextLogEntry::TextLogEntry(const TextLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_log()) {
    log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:android.util.TextLogEntry)
}

void TextLogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(tid_));
}

TextLogEntry::~TextLogEntry() {
  // @@protoc_insertion_point(destructor:android.util.TextLogEntry)
  SharedDtor();
}

void TextLogEntry::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextLogEntry& TextLogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void TextLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.TextLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      log_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tid_) -
        reinterpret_cast<char*>(&sec_)) + sizeof(tid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextLogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sec(&has_bits);
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nanosec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nanosec(&has_bits);
          nanosec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.TextLogEntry.LogPriority priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::util::TextLogEntry_LogPriority_IsValid(val))) {
            set_priority(static_cast<::android::util::TextLogEntry_LogPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "android.util.TextLogEntry.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string log = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_log(), ptr, ctx, "android.util.TextLogEntry.log");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextLogEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.util.TextLogEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nanosec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_nanosec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nanosec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.TextLogEntry.LogPriority priority = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::util::TextLogEntry_LogPriority_IsValid(value)) {
            set_priority(static_cast< ::android::util::TextLogEntry_LogPriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_tid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.util.TextLogEntry.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string log = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), static_cast<int>(this->log().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.util.TextLogEntry.log");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.TextLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.TextLogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextLogEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.TextLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sec(), output);
  }

  // optional uint64 nanosec = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nanosec(), output);
  }

  // optional .android.util.TextLogEntry.LogPriority priority = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->priority(), output);
  }

  // optional int32 uid = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }

  // optional int32 pid = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->pid(), output);
  }

  // optional int32 tid = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->tid(), output);
  }

  // optional string tag = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.util.TextLogEntry.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tag(), output);
  }

  // optional string log = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), static_cast<int>(this->log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.util.TextLogEntry.log");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.util.TextLogEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* TextLogEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.util.TextLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->sec(), target);
  }

  // optional uint64 nanosec = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->nanosec(), target);
  }

  // optional .android.util.TextLogEntry.LogPriority priority = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->priority(), target);
  }

  // optional int32 uid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->uid(), target);
  }

  // optional int32 pid = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->pid(), target);
  }

  // optional int32 tid = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->tid(), target);
  }

  // optional string tag = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.util.TextLogEntry.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->tag(), target);
  }

  // optional string log = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), static_cast<int>(this->log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.util.TextLogEntry.log");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.util.TextLogEntry)
  return target;
}

size_t TextLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.TextLogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string log = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->log());
    }

    // optional uint64 sec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sec());
    }

    // optional uint64 nanosec = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nanosec());
    }

    // optional .android.util.TextLogEntry.LogPriority priority = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional int32 uid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 pid = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 tid = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextLogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.util.TextLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const TextLogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextLogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.util.TextLogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.util.TextLogEntry)
    MergeFrom(*source);
  }
}

void TextLogEntry::MergeFrom(const TextLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.TextLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
    }
    if (cached_has_bits & 0x00000004u) {
      sec_ = from.sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      nanosec_ = from.nanosec_;
    }
    if (cached_has_bits & 0x00000010u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000020u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000040u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000080u) {
      tid_ = from.tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextLogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.util.TextLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextLogEntry::CopyFrom(const TextLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.TextLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextLogEntry::IsInitialized() const {
  return true;
}

void TextLogEntry::InternalSwap(TextLogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_.Swap(&other->log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sec_, other->sec_);
  swap(nanosec_, other->nanosec_);
  swap(priority_, other->priority_);
  swap(uid_, other->uid_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextLogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryLogEntry_Elem::InitAsDefaultInstance() {
  ::android::util::_BinaryLogEntry_Elem_default_instance_.val_int32_ = 0;
  ::android::util::_BinaryLogEntry_Elem_default_instance_.val_int64_ = PROTOBUF_LONGLONG(0);
  ::android::util::_BinaryLogEntry_Elem_default_instance_.val_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::android::util::_BinaryLogEntry_Elem_default_instance_.val_float_ = 0;
}
class BinaryLogEntry_Elem::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryLogEntry_Elem>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinaryLogEntry_Elem::BinaryLogEntry_Elem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.BinaryLogEntry.Elem)
}
BinaryLogEntry_Elem::BinaryLogEntry_Elem(const BinaryLogEntry_Elem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kValInt32: {
      set_val_int32(from.val_int32());
      break;
    }
    case kValInt64: {
      set_val_int64(from.val_int64());
      break;
    }
    case kValString: {
      set_val_string(from.val_string());
      break;
    }
    case kValFloat: {
      set_val_float(from.val_float());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.util.BinaryLogEntry.Elem)
}

void BinaryLogEntry_Elem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  type_ = 63;
  clear_has_value();
}

BinaryLogEntry_Elem::~BinaryLogEntry_Elem() {
  // @@protoc_insertion_point(destructor:android.util.BinaryLogEntry.Elem)
  SharedDtor();
}

void BinaryLogEntry_Elem::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void BinaryLogEntry_Elem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryLogEntry_Elem& BinaryLogEntry_Elem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void BinaryLogEntry_Elem::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:android.util.BinaryLogEntry.Elem)
  switch (value_case()) {
    case kValInt32: {
      // No need to clear
      break;
    }
    case kValInt64: {
      // No need to clear
      break;
    }
    case kValString: {
      value_.val_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValFloat: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void BinaryLogEntry_Elem::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.BinaryLogEntry.Elem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 63;
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryLogEntry_Elem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::util::BinaryLogEntry_Elem_Type_IsValid(val))) {
            set_type(static_cast<::android::util::BinaryLogEntry_Elem_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 val_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_val_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 val_int64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_val_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string val_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_val_string(), ptr, ctx, "android.util.BinaryLogEntry.Elem.val_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float val_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          set_val_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryLogEntry_Elem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.util.BinaryLogEntry.Elem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::util::BinaryLogEntry_Elem_Type_IsValid(value)) {
            set_type(static_cast< ::android::util::BinaryLogEntry_Elem_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_int32 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.val_int32_)));
          set_has_val_int32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 val_int64 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.val_int64_)));
          set_has_val_int64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string val_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), static_cast<int>(this->val_string().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.util.BinaryLogEntry.Elem.val_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float val_float = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.val_float_)));
          set_has_val_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.BinaryLogEntry.Elem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.BinaryLogEntry.Elem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryLogEntry_Elem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.BinaryLogEntry.Elem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  switch (value_case()) {
    case kValInt32:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->val_int32(), output);
      break;
    case kValInt64:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->val_int64(), output);
      break;
    case kValString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->val_string().data(), static_cast<int>(this->val_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.util.BinaryLogEntry.Elem.val_string");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->val_string(), output);
      break;
    case kValFloat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->val_float(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.util.BinaryLogEntry.Elem)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryLogEntry_Elem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.util.BinaryLogEntry.Elem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  switch (value_case()) {
    case kValInt32:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->val_int32(), target);
      break;
    case kValInt64:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->val_int64(), target);
      break;
    case kValString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->val_string().data(), static_cast<int>(this->val_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.util.BinaryLogEntry.Elem.val_string");
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
          4, this->val_string(), target);
      break;
    case kValFloat:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->val_float(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.util.BinaryLogEntry.Elem)
  return target;
}

size_t BinaryLogEntry_Elem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.BinaryLogEntry.Elem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (value_case()) {
    // optional int32 val_int32 = 2;
    case kValInt32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->val_int32());
      break;
    }
    // optional int64 val_int64 = 3;
    case kValInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->val_int64());
      break;
    }
    // optional string val_string = 4;
    case kValString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->val_string());
      break;
    }
    // optional float val_float = 5;
    case kValFloat: {
      total_size += 1 + 4;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryLogEntry_Elem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.util.BinaryLogEntry.Elem)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryLogEntry_Elem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryLogEntry_Elem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.util.BinaryLogEntry.Elem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.util.BinaryLogEntry.Elem)
    MergeFrom(*source);
  }
}

void BinaryLogEntry_Elem::MergeFrom(const BinaryLogEntry_Elem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.BinaryLogEntry.Elem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
  switch (from.value_case()) {
    case kValInt32: {
      set_val_int32(from.val_int32());
      break;
    }
    case kValInt64: {
      set_val_int64(from.val_int64());
      break;
    }
    case kValString: {
      set_val_string(from.val_string());
      break;
    }
    case kValFloat: {
      set_val_float(from.val_float());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void BinaryLogEntry_Elem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.util.BinaryLogEntry.Elem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryLogEntry_Elem::CopyFrom(const BinaryLogEntry_Elem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.BinaryLogEntry.Elem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryLogEntry_Elem::IsInitialized() const {
  return true;
}

void BinaryLogEntry_Elem::InternalSwap(BinaryLogEntry_Elem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryLogEntry_Elem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryLogEntry::InitAsDefaultInstance() {
}
class BinaryLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryLogEntry>()._has_bits_);
  static void set_has_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nanosec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tag_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BinaryLogEntry::BinaryLogEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.BinaryLogEntry)
}
BinaryLogEntry::BinaryLogEntry(const BinaryLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_index_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(tag_index_));
  // @@protoc_insertion_point(copy_constructor:android.util.BinaryLogEntry)
}

void BinaryLogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_index_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(tag_index_));
}

BinaryLogEntry::~BinaryLogEntry() {
  // @@protoc_insertion_point(destructor:android.util.BinaryLogEntry)
  SharedDtor();
}

void BinaryLogEntry::SharedDtor() {
}

void BinaryLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryLogEntry& BinaryLogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void BinaryLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.BinaryLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_index_) -
        reinterpret_cast<char*>(&sec_)) + sizeof(tag_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryLogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sec(&has_bits);
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nanosec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nanosec(&has_bits);
          nanosec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tag_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tag_index(&has_bits);
          tag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.BinaryLogEntry.Elem elems = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryLogEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.util.BinaryLogEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nanosec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_nanosec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nanosec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_tid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tag_index = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_tag_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.BinaryLogEntry.Elem elems = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_elems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.BinaryLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.BinaryLogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryLogEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.BinaryLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sec(), output);
  }

  // optional uint64 nanosec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nanosec(), output);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->pid(), output);
  }

  // optional int32 tid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->tid(), output);
  }

  // optional uint32 tag_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->tag_index(), output);
  }

  // repeated .android.util.BinaryLogEntry.Elem elems = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elems_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->elems(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.util.BinaryLogEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryLogEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.util.BinaryLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->sec(), target);
  }

  // optional uint64 nanosec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->nanosec(), target);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->pid(), target);
  }

  // optional int32 tid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->tid(), target);
  }

  // optional uint32 tag_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->tag_index(), target);
  }

  // repeated .android.util.BinaryLogEntry.Elem elems = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elems_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->elems(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.util.BinaryLogEntry)
  return target;
}

size_t BinaryLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.BinaryLogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.BinaryLogEntry.Elem elems = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->elems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->elems(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sec());
    }

    // optional uint64 nanosec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nanosec());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 tid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional uint32 tag_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tag_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryLogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.util.BinaryLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryLogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryLogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.util.BinaryLogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.util.BinaryLogEntry)
    MergeFrom(*source);
  }
}

void BinaryLogEntry::MergeFrom(const BinaryLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.BinaryLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      sec_ = from.sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      nanosec_ = from.nanosec_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000010u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000020u) {
      tag_index_ = from.tag_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BinaryLogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.util.BinaryLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryLogEntry::CopyFrom(const BinaryLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.BinaryLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryLogEntry::IsInitialized() const {
  return true;
}

void BinaryLogEntry::InternalSwap(BinaryLogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&elems_)->InternalSwap(CastToBase(&other->elems_));
  swap(sec_, other->sec_);
  swap(nanosec_, other->nanosec_);
  swap(uid_, other->uid_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(tag_index_, other->tag_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryLogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogProto::InitAsDefaultInstance() {
}
class LogProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LogProto>()._has_bits_);
};

LogProto::LogProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.LogProto)
}
LogProto::LogProto(const LogProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      text_logs_(from.text_logs_),
      binary_logs_(from.binary_logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.util.LogProto)
}

void LogProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
}

LogProto::~LogProto() {
  // @@protoc_insertion_point(destructor:android.util.LogProto)
  SharedDtor();
}

void LogProto::SharedDtor() {
}

void LogProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogProto& LogProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void LogProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.LogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_logs_.Clear();
  binary_logs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.util.TextLogEntry text_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_text_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.BinaryLogEntry binary_logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_binary_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.util.LogProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.util.TextLogEntry text_logs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_text_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.BinaryLogEntry binary_logs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_binary_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.LogProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.LogProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.LogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry text_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->text_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.BinaryLogEntry binary_logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binary_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->binary_logs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.util.LogProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.util.LogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry text_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->text_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.BinaryLogEntry binary_logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binary_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->binary_logs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.util.LogProto)
  return target;
}

size_t LogProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.LogProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry text_logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->text_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->text_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.BinaryLogEntry binary_logs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->binary_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->binary_logs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.util.LogProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LogProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.util.LogProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.util.LogProto)
    MergeFrom(*source);
  }
}

void LogProto::MergeFrom(const LogProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.LogProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_logs_.MergeFrom(from.text_logs_);
  binary_logs_.MergeFrom(from.binary_logs_);
}

void LogProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.util.LogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogProto::CopyFrom(const LogProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.LogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogProto::IsInitialized() const {
  return true;
}

void LogProto::InternalSwap(LogProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&text_logs_)->InternalSwap(CastToBase(&other->text_logs_));
  CastToBase(&binary_logs_)->InternalSwap(CastToBase(&other->binary_logs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistedLogProto::InitAsDefaultInstance() {
}
class PersistedLogProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistedLogProto>()._has_bits_);
};

PersistedLogProto::PersistedLogProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.PersistedLogProto)
}
PersistedLogProto::PersistedLogProto(const PersistedLogProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      main_logs_(from.main_logs_),
      radio_logs_(from.radio_logs_),
      events_logs_(from.events_logs_),
      system_logs_(from.system_logs_),
      crash_logs_(from.crash_logs_),
      stats_logs_(from.stats_logs_),
      security_logs_(from.security_logs_),
      kernel_logs_(from.kernel_logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.util.PersistedLogProto)
}

void PersistedLogProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
}

PersistedLogProto::~PersistedLogProto() {
  // @@protoc_insertion_point(destructor:android.util.PersistedLogProto)
  SharedDtor();
}

void PersistedLogProto::SharedDtor() {
}

void PersistedLogProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistedLogProto& PersistedLogProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void PersistedLogProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.PersistedLogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_logs_.Clear();
  radio_logs_.Clear();
  events_logs_.Clear();
  system_logs_.Clear();
  crash_logs_.Clear();
  stats_logs_.Clear();
  security_logs_.Clear();
  kernel_logs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistedLogProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.util.TextLogEntry main_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_main_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry radio_logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_radio_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry events_logs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry system_logs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_system_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry crash_logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_crash_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry stats_logs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stats_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry security_logs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_security_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry kernel_logs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_kernel_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistedLogProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.util.PersistedLogProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.util.TextLogEntry main_logs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_main_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry radio_logs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_radio_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry events_logs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry system_logs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_system_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry crash_logs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_crash_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry stats_logs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stats_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry security_logs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_security_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry kernel_logs = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_kernel_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.PersistedLogProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.PersistedLogProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistedLogProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.PersistedLogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry main_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->main_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->main_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry radio_logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radio_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->radio_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry events_logs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->events_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry system_logs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->system_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry crash_logs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crash_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->crash_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry stats_logs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stats_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry security_logs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->security_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->security_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry kernel_logs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kernel_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->kernel_logs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.util.PersistedLogProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistedLogProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.util.PersistedLogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry main_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->main_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->main_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.TextLogEntry radio_logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radio_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->radio_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.TextLogEntry events_logs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->events_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.TextLogEntry system_logs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->system_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.TextLogEntry crash_logs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crash_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->crash_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.TextLogEntry stats_logs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stats_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.TextLogEntry security_logs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->security_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->security_logs(static_cast<int>(i)), target);
  }

  // repeated .android.util.TextLogEntry kernel_logs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kernel_logs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->kernel_logs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.util.PersistedLogProto)
  return target;
}

size_t PersistedLogProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.PersistedLogProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry main_logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->main_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->main_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry radio_logs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->radio_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->radio_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry events_logs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry system_logs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->system_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->system_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry crash_logs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->crash_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->crash_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry stats_logs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stats_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry security_logs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->security_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->security_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry kernel_logs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->kernel_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->kernel_logs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistedLogProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.util.PersistedLogProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistedLogProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistedLogProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.util.PersistedLogProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.util.PersistedLogProto)
    MergeFrom(*source);
  }
}

void PersistedLogProto::MergeFrom(const PersistedLogProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.PersistedLogProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  main_logs_.MergeFrom(from.main_logs_);
  radio_logs_.MergeFrom(from.radio_logs_);
  events_logs_.MergeFrom(from.events_logs_);
  system_logs_.MergeFrom(from.system_logs_);
  crash_logs_.MergeFrom(from.crash_logs_);
  stats_logs_.MergeFrom(from.stats_logs_);
  security_logs_.MergeFrom(from.security_logs_);
  kernel_logs_.MergeFrom(from.kernel_logs_);
}

void PersistedLogProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.util.PersistedLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistedLogProto::CopyFrom(const PersistedLogProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.PersistedLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistedLogProto::IsInitialized() const {
  return true;
}

void PersistedLogProto::InternalSwap(PersistedLogProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&main_logs_)->InternalSwap(CastToBase(&other->main_logs_));
  CastToBase(&radio_logs_)->InternalSwap(CastToBase(&other->radio_logs_));
  CastToBase(&events_logs_)->InternalSwap(CastToBase(&other->events_logs_));
  CastToBase(&system_logs_)->InternalSwap(CastToBase(&other->system_logs_));
  CastToBase(&crash_logs_)->InternalSwap(CastToBase(&other->crash_logs_));
  CastToBase(&stats_logs_)->InternalSwap(CastToBase(&other->stats_logs_));
  CastToBase(&security_logs_)->InternalSwap(CastToBase(&other->security_logs_));
  CastToBase(&kernel_logs_)->InternalSwap(CastToBase(&other->kernel_logs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistedLogProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace util
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::util::TextLogEntry* Arena::CreateMaybeMessage< ::android::util::TextLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::TextLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::BinaryLogEntry_Elem* Arena::CreateMaybeMessage< ::android::util::BinaryLogEntry_Elem >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::BinaryLogEntry_Elem >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::BinaryLogEntry* Arena::CreateMaybeMessage< ::android::util::BinaryLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::BinaryLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::LogProto* Arena::CreateMaybeMessage< ::android::util::LogProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::LogProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::PersistedLogProto* Arena::CreateMaybeMessage< ::android::util::PersistedLogProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::PersistedLogProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
