// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/ps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto;
namespace android {
namespace os {
class PsProto;
class PsProtoDefaultTypeInternal;
extern PsProtoDefaultTypeInternal _PsProto_default_instance_;
class PsProto_Process;
class PsProto_ProcessDefaultTypeInternal;
extern PsProto_ProcessDefaultTypeInternal _PsProto_Process_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::PsProto* Arena::CreateMaybeMessage<::android::os::PsProto>(Arena*);
template<> ::android::os::PsProto_Process* Arena::CreateMaybeMessage<::android::os::PsProto_Process>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

enum PsProto_Process_ProcessStateCode : int {
  PsProto_Process_ProcessStateCode_STATE_UNKNOWN = 0,
  PsProto_Process_ProcessStateCode_STATE_D = 1,
  PsProto_Process_ProcessStateCode_STATE_R = 2,
  PsProto_Process_ProcessStateCode_STATE_S = 3,
  PsProto_Process_ProcessStateCode_STATE_T = 4,
  PsProto_Process_ProcessStateCode_STATE_TRACING = 5,
  PsProto_Process_ProcessStateCode_STATE_X = 6,
  PsProto_Process_ProcessStateCode_STATE_Z = 7
};
bool PsProto_Process_ProcessStateCode_IsValid(int value);
constexpr PsProto_Process_ProcessStateCode PsProto_Process_ProcessStateCode_ProcessStateCode_MIN = PsProto_Process_ProcessStateCode_STATE_UNKNOWN;
constexpr PsProto_Process_ProcessStateCode PsProto_Process_ProcessStateCode_ProcessStateCode_MAX = PsProto_Process_ProcessStateCode_STATE_Z;
constexpr int PsProto_Process_ProcessStateCode_ProcessStateCode_ARRAYSIZE = PsProto_Process_ProcessStateCode_ProcessStateCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PsProto_Process_ProcessStateCode_descriptor();
template<typename T>
inline const std::string& PsProto_Process_ProcessStateCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PsProto_Process_ProcessStateCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PsProto_Process_ProcessStateCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PsProto_Process_ProcessStateCode_descriptor(), enum_t_value);
}
inline bool PsProto_Process_ProcessStateCode_Parse(
    const std::string& name, PsProto_Process_ProcessStateCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PsProto_Process_ProcessStateCode>(
    PsProto_Process_ProcessStateCode_descriptor(), name, value);
}
enum PsProto_Process_SchedulingPolicy : int {
  PsProto_Process_SchedulingPolicy_SCH_OTHER = 0,
  PsProto_Process_SchedulingPolicy_SCH_NORMAL = 0,
  PsProto_Process_SchedulingPolicy_SCH_FIFO = 1,
  PsProto_Process_SchedulingPolicy_SCH_RR = 2,
  PsProto_Process_SchedulingPolicy_SCH_BATCH = 3,
  PsProto_Process_SchedulingPolicy_SCH_ISO = 4,
  PsProto_Process_SchedulingPolicy_SCH_IDLE = 5
};
bool PsProto_Process_SchedulingPolicy_IsValid(int value);
constexpr PsProto_Process_SchedulingPolicy PsProto_Process_SchedulingPolicy_SchedulingPolicy_MIN = PsProto_Process_SchedulingPolicy_SCH_OTHER;
constexpr PsProto_Process_SchedulingPolicy PsProto_Process_SchedulingPolicy_SchedulingPolicy_MAX = PsProto_Process_SchedulingPolicy_SCH_IDLE;
constexpr int PsProto_Process_SchedulingPolicy_SchedulingPolicy_ARRAYSIZE = PsProto_Process_SchedulingPolicy_SchedulingPolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PsProto_Process_SchedulingPolicy_descriptor();
template<typename T>
inline const std::string& PsProto_Process_SchedulingPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PsProto_Process_SchedulingPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PsProto_Process_SchedulingPolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PsProto_Process_SchedulingPolicy_descriptor(), enum_t_value);
}
inline bool PsProto_Process_SchedulingPolicy_Parse(
    const std::string& name, PsProto_Process_SchedulingPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PsProto_Process_SchedulingPolicy>(
    PsProto_Process_SchedulingPolicy_descriptor(), name, value);
}
enum PsProto_Process_Policy : int {
  PsProto_Process_Policy_POLICY_UNKNOWN = 0,
  PsProto_Process_Policy_POLICY_FG = 1,
  PsProto_Process_Policy_POLICY_BG = 2,
  PsProto_Process_Policy_POLICY_TA = 3
};
bool PsProto_Process_Policy_IsValid(int value);
constexpr PsProto_Process_Policy PsProto_Process_Policy_Policy_MIN = PsProto_Process_Policy_POLICY_UNKNOWN;
constexpr PsProto_Process_Policy PsProto_Process_Policy_Policy_MAX = PsProto_Process_Policy_POLICY_TA;
constexpr int PsProto_Process_Policy_Policy_ARRAYSIZE = PsProto_Process_Policy_Policy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PsProto_Process_Policy_descriptor();
template<typename T>
inline const std::string& PsProto_Process_Policy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PsProto_Process_Policy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PsProto_Process_Policy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PsProto_Process_Policy_descriptor(), enum_t_value);
}
inline bool PsProto_Process_Policy_Parse(
    const std::string& name, PsProto_Process_Policy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PsProto_Process_Policy>(
    PsProto_Process_Policy_descriptor(), name, value);
}
// ===================================================================

class PsProto_Process :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.PsProto.Process) */ {
 public:
  PsProto_Process();
  virtual ~PsProto_Process();

  PsProto_Process(const PsProto_Process& from);
  PsProto_Process(PsProto_Process&& from) noexcept
    : PsProto_Process() {
    *this = ::std::move(from);
  }

  inline PsProto_Process& operator=(const PsProto_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline PsProto_Process& operator=(PsProto_Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PsProto_Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PsProto_Process* internal_default_instance() {
    return reinterpret_cast<const PsProto_Process*>(
               &_PsProto_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PsProto_Process& a, PsProto_Process& b) {
    a.Swap(&b);
  }
  inline void Swap(PsProto_Process* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PsProto_Process* New() const final {
    return CreateMaybeMessage<PsProto_Process>(nullptr);
  }

  PsProto_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PsProto_Process>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PsProto_Process& from);
  void MergeFrom(const PsProto_Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PsProto_Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.PsProto.Process";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PsProto_Process_ProcessStateCode ProcessStateCode;
  static constexpr ProcessStateCode STATE_UNKNOWN =
    PsProto_Process_ProcessStateCode_STATE_UNKNOWN;
  static constexpr ProcessStateCode STATE_D =
    PsProto_Process_ProcessStateCode_STATE_D;
  static constexpr ProcessStateCode STATE_R =
    PsProto_Process_ProcessStateCode_STATE_R;
  static constexpr ProcessStateCode STATE_S =
    PsProto_Process_ProcessStateCode_STATE_S;
  static constexpr ProcessStateCode STATE_T =
    PsProto_Process_ProcessStateCode_STATE_T;
  static constexpr ProcessStateCode STATE_TRACING =
    PsProto_Process_ProcessStateCode_STATE_TRACING;
  static constexpr ProcessStateCode STATE_X =
    PsProto_Process_ProcessStateCode_STATE_X;
  static constexpr ProcessStateCode STATE_Z =
    PsProto_Process_ProcessStateCode_STATE_Z;
  static inline bool ProcessStateCode_IsValid(int value) {
    return PsProto_Process_ProcessStateCode_IsValid(value);
  }
  static constexpr ProcessStateCode ProcessStateCode_MIN =
    PsProto_Process_ProcessStateCode_ProcessStateCode_MIN;
  static constexpr ProcessStateCode ProcessStateCode_MAX =
    PsProto_Process_ProcessStateCode_ProcessStateCode_MAX;
  static constexpr int ProcessStateCode_ARRAYSIZE =
    PsProto_Process_ProcessStateCode_ProcessStateCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcessStateCode_descriptor() {
    return PsProto_Process_ProcessStateCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcessStateCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessStateCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessStateCode_Name.");
    return PsProto_Process_ProcessStateCode_Name(enum_t_value);
  }
  static inline bool ProcessStateCode_Parse(const std::string& name,
      ProcessStateCode* value) {
    return PsProto_Process_ProcessStateCode_Parse(name, value);
  }

  typedef PsProto_Process_SchedulingPolicy SchedulingPolicy;
  static constexpr SchedulingPolicy SCH_OTHER =
    PsProto_Process_SchedulingPolicy_SCH_OTHER;
  static constexpr SchedulingPolicy SCH_NORMAL =
    PsProto_Process_SchedulingPolicy_SCH_NORMAL;
  static constexpr SchedulingPolicy SCH_FIFO =
    PsProto_Process_SchedulingPolicy_SCH_FIFO;
  static constexpr SchedulingPolicy SCH_RR =
    PsProto_Process_SchedulingPolicy_SCH_RR;
  static constexpr SchedulingPolicy SCH_BATCH =
    PsProto_Process_SchedulingPolicy_SCH_BATCH;
  static constexpr SchedulingPolicy SCH_ISO =
    PsProto_Process_SchedulingPolicy_SCH_ISO;
  static constexpr SchedulingPolicy SCH_IDLE =
    PsProto_Process_SchedulingPolicy_SCH_IDLE;
  static inline bool SchedulingPolicy_IsValid(int value) {
    return PsProto_Process_SchedulingPolicy_IsValid(value);
  }
  static constexpr SchedulingPolicy SchedulingPolicy_MIN =
    PsProto_Process_SchedulingPolicy_SchedulingPolicy_MIN;
  static constexpr SchedulingPolicy SchedulingPolicy_MAX =
    PsProto_Process_SchedulingPolicy_SchedulingPolicy_MAX;
  static constexpr int SchedulingPolicy_ARRAYSIZE =
    PsProto_Process_SchedulingPolicy_SchedulingPolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SchedulingPolicy_descriptor() {
    return PsProto_Process_SchedulingPolicy_descriptor();
  }
  template<typename T>
  static inline const std::string& SchedulingPolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SchedulingPolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SchedulingPolicy_Name.");
    return PsProto_Process_SchedulingPolicy_Name(enum_t_value);
  }
  static inline bool SchedulingPolicy_Parse(const std::string& name,
      SchedulingPolicy* value) {
    return PsProto_Process_SchedulingPolicy_Parse(name, value);
  }

  typedef PsProto_Process_Policy Policy;
  static constexpr Policy POLICY_UNKNOWN =
    PsProto_Process_Policy_POLICY_UNKNOWN;
  static constexpr Policy POLICY_FG =
    PsProto_Process_Policy_POLICY_FG;
  static constexpr Policy POLICY_BG =
    PsProto_Process_Policy_POLICY_BG;
  static constexpr Policy POLICY_TA =
    PsProto_Process_Policy_POLICY_TA;
  static inline bool Policy_IsValid(int value) {
    return PsProto_Process_Policy_IsValid(value);
  }
  static constexpr Policy Policy_MIN =
    PsProto_Process_Policy_Policy_MIN;
  static constexpr Policy Policy_MAX =
    PsProto_Process_Policy_Policy_MAX;
  static constexpr int Policy_ARRAYSIZE =
    PsProto_Process_Policy_Policy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Policy_descriptor() {
    return PsProto_Process_Policy_descriptor();
  }
  template<typename T>
  static inline const std::string& Policy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Policy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Policy_Name.");
    return PsProto_Process_Policy_Name(enum_t_value);
  }
  static inline bool Policy_Parse(const std::string& name,
      Policy* value) {
    return PsProto_Process_Policy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kUserFieldNumber = 2,
    kWchanFieldNumber = 8,
    kAddrFieldNumber = 9,
    kRtprioFieldNumber = 13,
    kTimeFieldNumber = 16,
    kCmdFieldNumber = 17,
    kPidFieldNumber = 3,
    kTidFieldNumber = 4,
    kPpidFieldNumber = 5,
    kVszFieldNumber = 6,
    kRssFieldNumber = 7,
    kSFieldNumber = 10,
    kPriFieldNumber = 11,
    kNiFieldNumber = 12,
    kSchFieldNumber = 14,
    kPcyFieldNumber = 15,
  };
  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional string user = 2;
  bool has_user() const;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // optional string wchan = 8;
  bool has_wchan() const;
  void clear_wchan();
  const std::string& wchan() const;
  void set_wchan(const std::string& value);
  void set_wchan(std::string&& value);
  void set_wchan(const char* value);
  void set_wchan(const char* value, size_t size);
  std::string* mutable_wchan();
  std::string* release_wchan();
  void set_allocated_wchan(std::string* wchan);

  // optional string addr = 9 [(.android.privacy) = {
  bool has_addr() const;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);

  // optional string rtprio = 13;
  bool has_rtprio() const;
  void clear_rtprio();
  const std::string& rtprio() const;
  void set_rtprio(const std::string& value);
  void set_rtprio(std::string&& value);
  void set_rtprio(const char* value);
  void set_rtprio(const char* value, size_t size);
  std::string* mutable_rtprio();
  std::string* release_rtprio();
  void set_allocated_rtprio(std::string* rtprio);

  // optional string time = 16;
  bool has_time() const;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // optional string cmd = 17;
  bool has_cmd() const;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tid = 4;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ppid = 5;
  bool has_ppid() const;
  void clear_ppid();
  ::PROTOBUF_NAMESPACE_ID::int32 ppid() const;
  void set_ppid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 vsz = 6;
  bool has_vsz() const;
  void clear_vsz();
  ::PROTOBUF_NAMESPACE_ID::int32 vsz() const;
  void set_vsz(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 rss = 7;
  bool has_rss() const;
  void clear_rss();
  ::PROTOBUF_NAMESPACE_ID::int32 rss() const;
  void set_rss(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.PsProto.Process.ProcessStateCode s = 10;
  bool has_s() const;
  void clear_s();
  ::android::os::PsProto_Process_ProcessStateCode s() const;
  void set_s(::android::os::PsProto_Process_ProcessStateCode value);

  // optional int32 pri = 11;
  bool has_pri() const;
  void clear_pri();
  ::PROTOBUF_NAMESPACE_ID::int32 pri() const;
  void set_pri(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 ni = 12;
  bool has_ni() const;
  void clear_ni();
  ::PROTOBUF_NAMESPACE_ID::int32 ni() const;
  void set_ni(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.PsProto.Process.SchedulingPolicy sch = 14;
  bool has_sch() const;
  void clear_sch();
  ::android::os::PsProto_Process_SchedulingPolicy sch() const;
  void set_sch(::android::os::PsProto_Process_SchedulingPolicy value);

  // optional .android.os.PsProto.Process.Policy pcy = 15;
  bool has_pcy() const;
  void clear_pcy();
  ::android::os::PsProto_Process_Policy pcy() const;
  void set_pcy(::android::os::PsProto_Process_Policy value);

  // @@protoc_insertion_point(class_scope:android.os.PsProto.Process)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wchan_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtprio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ppid_;
  ::PROTOBUF_NAMESPACE_ID::int32 vsz_;
  ::PROTOBUF_NAMESPACE_ID::int32 rss_;
  int s_;
  ::PROTOBUF_NAMESPACE_ID::int32 pri_;
  ::PROTOBUF_NAMESPACE_ID::int32 ni_;
  int sch_;
  int pcy_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto;
};
// -------------------------------------------------------------------

class PsProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.PsProto) */ {
 public:
  PsProto();
  virtual ~PsProto();

  PsProto(const PsProto& from);
  PsProto(PsProto&& from) noexcept
    : PsProto() {
    *this = ::std::move(from);
  }

  inline PsProto& operator=(const PsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PsProto& operator=(PsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PsProto* internal_default_instance() {
    return reinterpret_cast<const PsProto*>(
               &_PsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PsProto& a, PsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PsProto* New() const final {
    return CreateMaybeMessage<PsProto>(nullptr);
  }

  PsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PsProto& from);
  void MergeFrom(const PsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.PsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PsProto_Process Process;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
  };
  // repeated .android.os.PsProto.Process processes = 1;
  int processes_size() const;
  void clear_processes();
  ::android::os::PsProto_Process* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PsProto_Process >*
      mutable_processes();
  const ::android::os::PsProto_Process& processes(int index) const;
  ::android::os::PsProto_Process* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PsProto_Process >&
      processes() const;

  // @@protoc_insertion_point(class_scope:android.os.PsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PsProto_Process > processes_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PsProto_Process

// optional string label = 1;
inline bool PsProto_Process::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PsProto_Process::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PsProto_Process::label() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.label)
  return label_.GetNoArena();
}
inline void PsProto_Process::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.label)
}
inline void PsProto_Process::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PsProto.Process.label)
}
inline void PsProto_Process::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PsProto.Process.label)
}
inline void PsProto_Process::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PsProto.Process.label)
}
inline std::string* PsProto_Process::mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.Process.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsProto_Process::release_label() {
  // @@protoc_insertion_point(field_release:android.os.PsProto.Process.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsProto_Process::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:android.os.PsProto.Process.label)
}

// optional string user = 2;
inline bool PsProto_Process::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PsProto_Process::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PsProto_Process::user() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.user)
  return user_.GetNoArena();
}
inline void PsProto_Process::set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.user)
}
inline void PsProto_Process::set_user(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PsProto.Process.user)
}
inline void PsProto_Process::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PsProto.Process.user)
}
inline void PsProto_Process::set_user(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PsProto.Process.user)
}
inline std::string* PsProto_Process::mutable_user() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.Process.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsProto_Process::release_user() {
  // @@protoc_insertion_point(field_release:android.os.PsProto.Process.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsProto_Process::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:android.os.PsProto.Process.user)
}

// optional int32 pid = 3;
inline bool PsProto_Process::has_pid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PsProto_Process::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PsProto_Process::pid() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.pid)
  return pid_;
}
inline void PsProto_Process::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.pid)
}

// optional int32 tid = 4;
inline bool PsProto_Process::has_tid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PsProto_Process::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PsProto_Process::tid() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.tid)
  return tid_;
}
inline void PsProto_Process::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.tid)
}

// optional int32 ppid = 5;
inline bool PsProto_Process::has_ppid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PsProto_Process::clear_ppid() {
  ppid_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PsProto_Process::ppid() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.ppid)
  return ppid_;
}
inline void PsProto_Process::set_ppid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  ppid_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.ppid)
}

// optional int32 vsz = 6;
inline bool PsProto_Process::has_vsz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PsProto_Process::clear_vsz() {
  vsz_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PsProto_Process::vsz() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.vsz)
  return vsz_;
}
inline void PsProto_Process::set_vsz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  vsz_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.vsz)
}

// optional int32 rss = 7;
inline bool PsProto_Process::has_rss() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PsProto_Process::clear_rss() {
  rss_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PsProto_Process::rss() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.rss)
  return rss_;
}
inline void PsProto_Process::set_rss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  rss_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.rss)
}

// optional string wchan = 8;
inline bool PsProto_Process::has_wchan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PsProto_Process::clear_wchan() {
  wchan_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PsProto_Process::wchan() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.wchan)
  return wchan_.GetNoArena();
}
inline void PsProto_Process::set_wchan(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  wchan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.wchan)
}
inline void PsProto_Process::set_wchan(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  wchan_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PsProto.Process.wchan)
}
inline void PsProto_Process::set_wchan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  wchan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PsProto.Process.wchan)
}
inline void PsProto_Process::set_wchan(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  wchan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PsProto.Process.wchan)
}
inline std::string* PsProto_Process::mutable_wchan() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.Process.wchan)
  return wchan_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsProto_Process::release_wchan() {
  // @@protoc_insertion_point(field_release:android.os.PsProto.Process.wchan)
  if (!has_wchan()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return wchan_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsProto_Process::set_allocated_wchan(std::string* wchan) {
  if (wchan != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  wchan_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wchan);
  // @@protoc_insertion_point(field_set_allocated:android.os.PsProto.Process.wchan)
}

// optional string addr = 9 [(.android.privacy) = {
inline bool PsProto_Process::has_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PsProto_Process::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PsProto_Process::addr() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.addr)
  return addr_.GetNoArena();
}
inline void PsProto_Process::set_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.addr)
}
inline void PsProto_Process::set_addr(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PsProto.Process.addr)
}
inline void PsProto_Process::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PsProto.Process.addr)
}
inline void PsProto_Process::set_addr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PsProto.Process.addr)
}
inline std::string* PsProto_Process::mutable_addr() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.Process.addr)
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsProto_Process::release_addr() {
  // @@protoc_insertion_point(field_release:android.os.PsProto.Process.addr)
  if (!has_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return addr_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsProto_Process::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:android.os.PsProto.Process.addr)
}

// optional .android.os.PsProto.Process.ProcessStateCode s = 10;
inline bool PsProto_Process::has_s() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PsProto_Process::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::android::os::PsProto_Process_ProcessStateCode PsProto_Process::s() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.s)
  return static_cast< ::android::os::PsProto_Process_ProcessStateCode >(s_);
}
inline void PsProto_Process::set_s(::android::os::PsProto_Process_ProcessStateCode value) {
  assert(::android::os::PsProto_Process_ProcessStateCode_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  s_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.s)
}

// optional int32 pri = 11;
inline bool PsProto_Process::has_pri() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PsProto_Process::clear_pri() {
  pri_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PsProto_Process::pri() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.pri)
  return pri_;
}
inline void PsProto_Process::set_pri(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  pri_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.pri)
}

// optional sint32 ni = 12;
inline bool PsProto_Process::has_ni() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PsProto_Process::clear_ni() {
  ni_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PsProto_Process::ni() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.ni)
  return ni_;
}
inline void PsProto_Process::set_ni(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  ni_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.ni)
}

// optional string rtprio = 13;
inline bool PsProto_Process::has_rtprio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PsProto_Process::clear_rtprio() {
  rtprio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PsProto_Process::rtprio() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.rtprio)
  return rtprio_.GetNoArena();
}
inline void PsProto_Process::set_rtprio(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  rtprio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.rtprio)
}
inline void PsProto_Process::set_rtprio(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  rtprio_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PsProto.Process.rtprio)
}
inline void PsProto_Process::set_rtprio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  rtprio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PsProto.Process.rtprio)
}
inline void PsProto_Process::set_rtprio(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  rtprio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PsProto.Process.rtprio)
}
inline std::string* PsProto_Process::mutable_rtprio() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.Process.rtprio)
  return rtprio_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsProto_Process::release_rtprio() {
  // @@protoc_insertion_point(field_release:android.os.PsProto.Process.rtprio)
  if (!has_rtprio()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return rtprio_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsProto_Process::set_allocated_rtprio(std::string* rtprio) {
  if (rtprio != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  rtprio_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rtprio);
  // @@protoc_insertion_point(field_set_allocated:android.os.PsProto.Process.rtprio)
}

// optional .android.os.PsProto.Process.SchedulingPolicy sch = 14;
inline bool PsProto_Process::has_sch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PsProto_Process::clear_sch() {
  sch_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::android::os::PsProto_Process_SchedulingPolicy PsProto_Process::sch() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.sch)
  return static_cast< ::android::os::PsProto_Process_SchedulingPolicy >(sch_);
}
inline void PsProto_Process::set_sch(::android::os::PsProto_Process_SchedulingPolicy value) {
  assert(::android::os::PsProto_Process_SchedulingPolicy_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  sch_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.sch)
}

// optional .android.os.PsProto.Process.Policy pcy = 15;
inline bool PsProto_Process::has_pcy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PsProto_Process::clear_pcy() {
  pcy_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::android::os::PsProto_Process_Policy PsProto_Process::pcy() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.pcy)
  return static_cast< ::android::os::PsProto_Process_Policy >(pcy_);
}
inline void PsProto_Process::set_pcy(::android::os::PsProto_Process_Policy value) {
  assert(::android::os::PsProto_Process_Policy_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  pcy_ = value;
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.pcy)
}

// optional string time = 16;
inline bool PsProto_Process::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PsProto_Process::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PsProto_Process::time() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.time)
  return time_.GetNoArena();
}
inline void PsProto_Process::set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.time)
}
inline void PsProto_Process::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PsProto.Process.time)
}
inline void PsProto_Process::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PsProto.Process.time)
}
inline void PsProto_Process::set_time(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PsProto.Process.time)
}
inline std::string* PsProto_Process::mutable_time() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.Process.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsProto_Process::release_time() {
  // @@protoc_insertion_point(field_release:android.os.PsProto.Process.time)
  if (!has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsProto_Process::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:android.os.PsProto.Process.time)
}

// optional string cmd = 17;
inline bool PsProto_Process::has_cmd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PsProto_Process::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PsProto_Process::cmd() const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.Process.cmd)
  return cmd_.GetNoArena();
}
inline void PsProto_Process::set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PsProto.Process.cmd)
}
inline void PsProto_Process::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PsProto.Process.cmd)
}
inline void PsProto_Process::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PsProto.Process.cmd)
}
inline void PsProto_Process::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PsProto.Process.cmd)
}
inline std::string* PsProto_Process::mutable_cmd() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.Process.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsProto_Process::release_cmd() {
  // @@protoc_insertion_point(field_release:android.os.PsProto.Process.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsProto_Process::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:android.os.PsProto.Process.cmd)
}

// -------------------------------------------------------------------

// PsProto

// repeated .android.os.PsProto.Process processes = 1;
inline int PsProto::processes_size() const {
  return processes_.size();
}
inline void PsProto::clear_processes() {
  processes_.Clear();
}
inline ::android::os::PsProto_Process* PsProto::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.PsProto.processes)
  return processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PsProto_Process >*
PsProto::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:android.os.PsProto.processes)
  return &processes_;
}
inline const ::android::os::PsProto_Process& PsProto::processes(int index) const {
  // @@protoc_insertion_point(field_get:android.os.PsProto.processes)
  return processes_.Get(index);
}
inline ::android::os::PsProto_Process* PsProto::add_processes() {
  // @@protoc_insertion_point(field_add:android.os.PsProto.processes)
  return processes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PsProto_Process >&
PsProto::processes() const {
  // @@protoc_insertion_point(field_list:android.os.PsProto.processes)
  return processes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::os::PsProto_Process_ProcessStateCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::os::PsProto_Process_ProcessStateCode>() {
  return ::android::os::PsProto_Process_ProcessStateCode_descriptor();
}
template <> struct is_proto_enum< ::android::os::PsProto_Process_SchedulingPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::os::PsProto_Process_SchedulingPolicy>() {
  return ::android::os::PsProto_Process_SchedulingPolicy_descriptor();
}
template <> struct is_proto_enum< ::android::os::PsProto_Process_Policy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::os::PsProto_Process_Policy>() {
  return ::android::os::PsProto_Process_Policy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fps_2eproto
