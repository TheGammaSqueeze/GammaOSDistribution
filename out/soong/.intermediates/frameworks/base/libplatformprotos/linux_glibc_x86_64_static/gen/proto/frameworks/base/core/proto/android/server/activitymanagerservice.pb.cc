// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/activitymanagerservice.proto

#include "frameworks/base/core/proto/android/server/activitymanagerservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fappexitinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fappexitinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotificationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntentFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ApplicationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BundleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LooperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fintentresolver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntentResolverProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fintentresolver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppErrorsProto_ProcessCrashTime_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_AppData_ObjectStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_ProcessMemory_AppSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessOomProto_Detail_CpuRunTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceRecordProto_Start_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidRecordProto_ProcStateSequence_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserControllerProto_UserProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VrControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RootWindowContainerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace am {
class ActivityManagerServiceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceProto> _instance;
} _ActivityManagerServiceProto_default_instance_;
class ActivityManagerServiceDumpActivitiesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpActivitiesProto> _instance;
} _ActivityManagerServiceDumpActivitiesProto_default_instance_;
class ActivityManagerServiceDumpBroadcastsProto_MainHandlerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpBroadcastsProto_MainHandler> _instance;
} _ActivityManagerServiceDumpBroadcastsProto_MainHandler_default_instance_;
class ActivityManagerServiceDumpBroadcastsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpBroadcastsProto> _instance;
} _ActivityManagerServiceDumpBroadcastsProto_default_instance_;
class ReceiverListProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiverListProto> _instance;
} _ReceiverListProto_default_instance_;
class ProcessRecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessRecordProto> _instance;
} _ProcessRecordProto_default_instance_;
class BroadcastRecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastRecordProto> _instance;
} _BroadcastRecordProto_default_instance_;
class BroadcastFilterProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastFilterProto> _instance;
} _BroadcastFilterProto_default_instance_;
class BroadcastQueueProto_BroadcastSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastQueueProto_BroadcastSummary> _instance;
} _BroadcastQueueProto_BroadcastSummary_default_instance_;
class BroadcastQueueProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastQueueProto> _instance;
} _BroadcastQueueProto_default_instance_;
class MemInfoDumpProto_ProcessMemory_MemoryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_ProcessMemory_MemoryInfo> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_swap_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_swap_pss_kb_;
} _MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_;
class MemInfoDumpProto_ProcessMemory_HeapInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_ProcessMemory_HeapInfo> _instance;
} _MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_;
class MemInfoDumpProto_ProcessMemory_AppSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_ProcessMemory_AppSummary> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 total_swap_pss_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_swap_kb_;
} _MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_;
class MemInfoDumpProto_ProcessMemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_ProcessMemory> _instance;
} _MemInfoDumpProto_ProcessMemory_default_instance_;
class MemInfoDumpProto_AppData_ObjectStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_AppData_ObjectStats> _instance;
} _MemInfoDumpProto_AppData_ObjectStats_default_instance_;
class MemInfoDumpProto_AppData_SqlStats_DatabaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_AppData_SqlStats_Database> _instance;
} _MemInfoDumpProto_AppData_SqlStats_Database_default_instance_;
class MemInfoDumpProto_AppData_SqlStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_AppData_SqlStats> _instance;
} _MemInfoDumpProto_AppData_SqlStats_default_instance_;
class MemInfoDumpProto_AppDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_AppData> _instance;
} _MemInfoDumpProto_AppData_default_instance_;
class MemInfoDumpProto_MemItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto_MemItem> _instance;
} _MemInfoDumpProto_MemItem_default_instance_;
class MemInfoDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemInfoDumpProto> _instance;
} _MemInfoDumpProto_default_instance_;
class StickyBroadcastProto_StickyActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StickyBroadcastProto_StickyAction> _instance;
} _StickyBroadcastProto_StickyAction_default_instance_;
class StickyBroadcastProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StickyBroadcastProto> _instance;
} _StickyBroadcastProto_default_instance_;
class ActivityManagerServiceDumpServicesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpServicesProto> _instance;
} _ActivityManagerServiceDumpServicesProto_default_instance_;
class ActiveServicesProto_ServicesByUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveServicesProto_ServicesByUser> _instance;
} _ActiveServicesProto_ServicesByUser_default_instance_;
class ActiveServicesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveServicesProto> _instance;
} _ActiveServicesProto_default_instance_;
class GrantUriProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrantUriProto> _instance;
} _GrantUriProto_default_instance_;
class NeededUriGrantsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NeededUriGrantsProto> _instance;
} _NeededUriGrantsProto_default_instance_;
class UriPermissionOwnerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UriPermissionOwnerProto> _instance;
} _UriPermissionOwnerProto_default_instance_;
class ServiceRecordProto_AppInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRecordProto_AppInfo> _instance;
} _ServiceRecordProto_AppInfo_default_instance_;
class ServiceRecordProto_ForegroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRecordProto_Foreground> _instance;
} _ServiceRecordProto_Foreground_default_instance_;
class ServiceRecordProto_StartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRecordProto_Start> _instance;
} _ServiceRecordProto_Start_default_instance_;
class ServiceRecordProto_ExecuteNestingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRecordProto_ExecuteNesting> _instance;
} _ServiceRecordProto_ExecuteNesting_default_instance_;
class ServiceRecordProto_CrashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRecordProto_Crash> _instance;
} _ServiceRecordProto_Crash_default_instance_;
class ServiceRecordProto_StartItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRecordProto_StartItem> _instance;
} _ServiceRecordProto_StartItem_default_instance_;
class ServiceRecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRecordProto> _instance;
} _ServiceRecordProto_default_instance_;
class ConnectionRecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionRecordProto> _instance;
} _ConnectionRecordProto_default_instance_;
class AppBindRecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppBindRecordProto> _instance;
} _AppBindRecordProto_default_instance_;
class IntentBindRecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntentBindRecordProto> _instance;
} _IntentBindRecordProto_default_instance_;
class ActivityManagerServiceDumpProcessesProto_LruProcessesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_LruProcesses> _instance;
} _ActivityManagerServiceDumpProcessesProto_LruProcesses_default_instance_;
class ActivityManagerServiceDumpProcessesProto_ScreenCompatPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage> _instance;
} _ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_default_instance_;
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState> _instance;
} _ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_default_instance_;
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto> _instance;
} _ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_default_instance_;
class ActivityManagerServiceDumpProcessesProto_PendingTempWhitelistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist> _instance;
} _ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_default_instance_;
class ActivityManagerServiceDumpProcessesProto_SleepStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_SleepStatus> _instance;
} _ActivityManagerServiceDumpProcessesProto_SleepStatus_default_instance_;
class ActivityManagerServiceDumpProcessesProto_VoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_Voice> _instance;
} _ActivityManagerServiceDumpProcessesProto_Voice_default_instance_;
class ActivityManagerServiceDumpProcessesProto_DebugAppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_DebugApp> _instance;
} _ActivityManagerServiceDumpProcessesProto_DebugApp_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats> _instance;
} _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_ProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process> _instance;
} _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_DumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump> _instance;
} _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_MemWatchProcess> _instance;
} _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_default_instance_;
class ActivityManagerServiceDumpProcessesProto_ProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_Profile> _instance;
} _ActivityManagerServiceDumpProcessesProto_Profile_default_instance_;
class ActivityManagerServiceDumpProcessesProto_ControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto_Controller> _instance;
} _ActivityManagerServiceDumpProcessesProto_Controller_default_instance_;
class ActivityManagerServiceDumpProcessesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityManagerServiceDumpProcessesProto> _instance;
} _ActivityManagerServiceDumpProcessesProto_default_instance_;
class ActiveInstrumentationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveInstrumentationProto> _instance;
} _ActiveInstrumentationProto_default_instance_;
class UidRecordProto_ProcStateSequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidRecordProto_ProcStateSequence> _instance;
} _UidRecordProto_ProcStateSequence_default_instance_;
class UidRecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidRecordProto> _instance;
} _UidRecordProto_default_instance_;
class ImportanceTokenProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportanceTokenProto> _instance;
} _ImportanceTokenProto_default_instance_;
class VrControllerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VrControllerProto> _instance;
} _VrControllerProto_default_instance_;
class ProcessOomProto_Detail_CpuRunTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessOomProto_Detail_CpuRunTime> _instance;
} _ProcessOomProto_Detail_CpuRunTime_default_instance_;
class ProcessOomProto_DetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessOomProto_Detail> _instance;
} _ProcessOomProto_Detail_default_instance_;
class ProcessOomProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessOomProto> _instance;
  bool activities_;
  bool services_;
  const ::android::content::ComponentNameProto* adj_target_component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adj_target_object_;
  const ::com::android::server::am::ProcessRecordProto* adj_source_proc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adj_source_object_;
} _ProcessOomProto_default_instance_;
class ProcessToGcProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessToGcProto> _instance;
} _ProcessToGcProto_default_instance_;
class AppErrorsProto_ProcessCrashTime_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppErrorsProto_ProcessCrashTime_Entry> _instance;
} _AppErrorsProto_ProcessCrashTime_Entry_default_instance_;
class AppErrorsProto_ProcessCrashTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppErrorsProto_ProcessCrashTime> _instance;
} _AppErrorsProto_ProcessCrashTime_default_instance_;
class AppErrorsProto_BadProcess_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppErrorsProto_BadProcess_Entry> _instance;
} _AppErrorsProto_BadProcess_Entry_default_instance_;
class AppErrorsProto_BadProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppErrorsProto_BadProcess> _instance;
} _AppErrorsProto_BadProcess_default_instance_;
class AppErrorsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppErrorsProto> _instance;
} _AppErrorsProto_default_instance_;
class UserStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserStateProto> _instance;
} _UserStateProto_default_instance_;
class UserControllerProto_UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserControllerProto_User> _instance;
} _UserControllerProto_User_default_instance_;
class UserControllerProto_UserProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserControllerProto_UserProfile> _instance;
} _UserControllerProto_UserProfile_default_instance_;
class UserControllerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserControllerProto> _instance;
} _UserControllerProto_default_instance_;
class AppTimeTrackerProto_PackageTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppTimeTrackerProto_PackageTime> _instance;
} _AppTimeTrackerProto_PackageTime_default_instance_;
class AppTimeTrackerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppTimeTrackerProto> _instance;
} _AppTimeTrackerProto_default_instance_;
class AppsExitInfoProto_Package_UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppsExitInfoProto_Package_User> _instance;
} _AppsExitInfoProto_Package_User_default_instance_;
class AppsExitInfoProto_PackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppsExitInfoProto_Package> _instance;
} _AppsExitInfoProto_Package_default_instance_;
class AppsExitInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppsExitInfoProto> _instance;
} _AppsExitInfoProto_default_instance_;
}  // namespace am
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActiveInstrumentationProto_default_instance_;
    new (ptr) ::com::android::server::am::ActiveInstrumentationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActiveInstrumentationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,
      &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ApplicationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto.base,
      &scc_info_BundleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto.base,}};

static void InitDefaultsscc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActiveServicesProto_default_instance_;
    new (ptr) ::com::android::server::am::ActiveServicesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActiveServicesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActiveServicesProto_ServicesByUser_default_instance_;
    new (ptr) ::com::android::server::am::ActiveServicesProto_ServicesByUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActiveServicesProto_ServicesByUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpActivitiesProto_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_RootWindowContainerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_IntentResolverProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fintentresolver_2eproto.base,
      &scc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_MainHandler_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_LooperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_VrControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto.base,
      &scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Controller_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_DebugApp_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_LruProcesses_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Profile_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ProfilerInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_SleepStatus_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Voice_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceDumpServicesProto_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceDumpServicesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceDumpServicesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ActivityManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ActivityManagerServiceProto_default_instance_;
    new (ptr) ::com::android::server::am::ActivityManagerServiceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ActivityManagerServiceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActivityManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ActivityManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppBindRecordProto_default_instance_;
    new (ptr) ::com::android::server::am::AppBindRecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppBindRecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppErrorsProto_default_instance_;
    new (ptr) ::com::android::server::am::AppErrorsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppErrorsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppErrorsProto_BadProcess_default_instance_;
    new (ptr) ::com::android::server::am::AppErrorsProto_BadProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppErrorsProto_BadProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppErrorsProto_BadProcess_Entry_default_instance_;
    new (ptr) ::com::android::server::am::AppErrorsProto_BadProcess_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppErrorsProto_BadProcess_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppErrorsProto_ProcessCrashTime_default_instance_;
    new (ptr) ::com::android::server::am::AppErrorsProto_ProcessCrashTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppErrorsProto_ProcessCrashTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_AppErrorsProto_ProcessCrashTime_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AppErrorsProto_ProcessCrashTime_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppErrorsProto_ProcessCrashTime_Entry_default_instance_;
    new (ptr) ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppErrorsProto_ProcessCrashTime_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppErrorsProto_ProcessCrashTime_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppTimeTrackerProto_default_instance_;
    new (ptr) ::com::android::server::am::AppTimeTrackerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppTimeTrackerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppTimeTrackerProto_PackageTime_default_instance_;
    new (ptr) ::com::android::server::am::AppTimeTrackerProto_PackageTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppTimeTrackerProto_PackageTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_AppsExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppsExitInfoProto_default_instance_;
    new (ptr) ::com::android::server::am::AppsExitInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppsExitInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppsExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppsExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppsExitInfoProto_Package_default_instance_;
    new (ptr) ::com::android::server::am::AppsExitInfoProto_Package();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppsExitInfoProto_Package::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_AppsExitInfoProto_Package_User_default_instance_;
    new (ptr) ::com::android::server::am::AppsExitInfoProto_Package_User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::AppsExitInfoProto_Package_User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ApplicationExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fappexitinfo_2eproto.base,}};

static void InitDefaultsscc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_BroadcastFilterProto_default_instance_;
    new (ptr) ::com::android::server::am::BroadcastFilterProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::BroadcastFilterProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_IntentFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,}};

static void InitDefaultsscc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_BroadcastQueueProto_default_instance_;
    new (ptr) ::com::android::server::am::BroadcastQueueProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::BroadcastQueueProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_BroadcastQueueProto_BroadcastSummary_default_instance_;
    new (ptr) ::com::android::server::am::BroadcastQueueProto_BroadcastSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::BroadcastQueueProto_BroadcastSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,}};

static void InitDefaultsscc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_BroadcastRecordProto_default_instance_;
    new (ptr) ::com::android::server::am::BroadcastRecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::BroadcastRecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ConnectionRecordProto_default_instance_;
    new (ptr) ::com::android::server::am::ConnectionRecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ConnectionRecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_GrantUriProto_default_instance_;
    new (ptr) ::com::android::server::am::GrantUriProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::GrantUriProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ImportanceTokenProto_default_instance_;
    new (ptr) ::com::android::server::am::ImportanceTokenProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ImportanceTokenProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_IntentBindRecordProto_default_instance_;
    new (ptr) ::com::android::server::am::IntentBindRecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::IntentBindRecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,
      &scc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_MemInfoDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MemInfoDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MemInfoDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_AppData_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_AppData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_AppData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_MemInfoDumpProto_AppData_ObjectStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_MemInfoDumpProto_AppData_ObjectStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_AppData_ObjectStats_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_AppData_ObjectStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemInfoDumpProto_AppData_ObjectStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_AppData_SqlStats_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_AppData_SqlStats_Database_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_MemItem_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_MemItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_MemItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_ProcessMemory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_MemInfoDumpProto_ProcessMemory_AppSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_AppSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_ProcessMemory_AppSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_AppSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_;
    new (ptr) ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_NeededUriGrantsProto_default_instance_;
    new (ptr) ::com::android::server::am::NeededUriGrantsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::NeededUriGrantsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ProcessOomProto_default_instance_;
    new (ptr) ::com::android::server::am::ProcessOomProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ProcessOomProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,
      &scc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ProcessOomProto_Detail_default_instance_;
    new (ptr) ::com::android::server::am::ProcessOomProto_Detail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ProcessOomProto_Detail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ProcessOomProto_Detail_CpuRunTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ProcessOomProto_Detail_CpuRunTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ProcessOomProto_Detail_CpuRunTime_default_instance_;
    new (ptr) ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessOomProto_Detail_CpuRunTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProcessOomProto_Detail_CpuRunTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ProcessRecordProto_default_instance_;
    new (ptr) ::com::android::server::am::ProcessRecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ProcessRecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ProcessToGcProto_default_instance_;
    new (ptr) ::com::android::server::am::ProcessToGcProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ProcessToGcProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ReceiverListProto_default_instance_;
    new (ptr) ::com::android::server::am::ReceiverListProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ReceiverListProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ServiceRecordProto_default_instance_;
    new (ptr) ::com::android::server::am::ServiceRecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ServiceRecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsscc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,
      &scc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto.base,
      &scc_info_ServiceRecordProto_Start_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ServiceRecordProto_AppInfo_default_instance_;
    new (ptr) ::com::android::server::am::ServiceRecordProto_AppInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ServiceRecordProto_AppInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ServiceRecordProto_Crash_default_instance_;
    new (ptr) ::com::android::server::am::ServiceRecordProto_Crash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ServiceRecordProto_Crash::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ServiceRecordProto_ExecuteNesting_default_instance_;
    new (ptr) ::com::android::server::am::ServiceRecordProto_ExecuteNesting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ServiceRecordProto_ExecuteNesting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ServiceRecordProto_Foreground_default_instance_;
    new (ptr) ::com::android::server::am::ServiceRecordProto_Foreground();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ServiceRecordProto_Foreground::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_NotificationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_2eproto.base,}};

static void InitDefaultsscc_info_ServiceRecordProto_Start_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ServiceRecordProto_Start_default_instance_;
    new (ptr) ::com::android::server::am::ServiceRecordProto_Start();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ServiceRecordProto_Start::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceRecordProto_Start_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServiceRecordProto_Start_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_ServiceRecordProto_StartItem_default_instance_;
    new (ptr) ::com::android::server::am::ServiceRecordProto_StartItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::ServiceRecordProto_StartItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto.base,
      &scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,
      &scc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_StickyBroadcastProto_default_instance_;
    new (ptr) ::com::android::server::am::StickyBroadcastProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::StickyBroadcastProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_StickyBroadcastProto_StickyAction_default_instance_;
    new (ptr) ::com::android::server::am::StickyBroadcastProto_StickyAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::StickyBroadcastProto_StickyAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,}};

static void InitDefaultsscc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_UidRecordProto_default_instance_;
    new (ptr) ::com::android::server::am::UidRecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::UidRecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_Duration_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto.base,
      &scc_info_UidRecordProto_ProcStateSequence_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_UidRecordProto_ProcStateSequence_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_UidRecordProto_ProcStateSequence_default_instance_;
    new (ptr) ::com::android::server::am::UidRecordProto_ProcStateSequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::UidRecordProto_ProcStateSequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidRecordProto_ProcStateSequence_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidRecordProto_ProcStateSequence_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_UriPermissionOwnerProto_default_instance_;
    new (ptr) ::com::android::server::am::UriPermissionOwnerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::UriPermissionOwnerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_UserControllerProto_default_instance_;
    new (ptr) ::com::android::server::am::UserControllerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::UserControllerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
      &scc_info_UserControllerProto_UserProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_UserControllerProto_User_default_instance_;
    new (ptr) ::com::android::server::am::UserControllerProto_User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::UserControllerProto_User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {
      &scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_UserControllerProto_UserProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_UserControllerProto_UserProfile_default_instance_;
    new (ptr) ::com::android::server::am::UserControllerProto_UserProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::UserControllerProto_UserProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserControllerProto_UserProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserControllerProto_UserProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_UserStateProto_default_instance_;
    new (ptr) ::com::android::server::am::UserStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::UserStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_VrControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::am::_VrControllerProto_default_instance_;
    new (ptr) ::com::android::server::am::VrControllerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::am::VrControllerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VrControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VrControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[76];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceProto, activities_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceProto, broadcasts_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceProto, services_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceProto, processes_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpActivitiesProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpActivitiesProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpActivitiesProto, root_window_container_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler, handler_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler, looper_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto, receiver_list_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto, receiver_resolver_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto, broadcast_queue_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto, sticky_broadcasts_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto, handler_),
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, app_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, pid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, user_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, current_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, linked_to_death_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, filters_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ReceiverListProto, hex_hash_),
  1,
  3,
  4,
  5,
  2,
  6,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, pid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, process_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, app_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, isolated_app_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, persistent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessRecordProto, lru_index_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastRecordProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastRecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastRecordProto, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastRecordProto, intent_action_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastFilterProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastFilterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastFilterProto, intent_filter_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastFilterProto, required_permission_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastFilterProto, hex_hash_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastFilterProto, owning_user_id_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto_BroadcastSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto_BroadcastSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto_BroadcastSummary, intent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto_BroadcastSummary, enqueue_clock_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto_BroadcastSummary, dispatch_clock_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto_BroadcastSummary, finish_clock_time_ms_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, queue_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, parallel_broadcasts_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, ordered_broadcasts_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, pending_broadcast_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, historical_broadcasts_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::BroadcastQueueProto, historical_broadcasts_summary_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, total_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, clean_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, shared_dirty_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, private_dirty_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, shared_clean_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, private_clean_kb_),
  offsetof(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfoDefaultTypeInternal, dirty_swap_kb_),
  offsetof(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfoDefaultTypeInternal, dirty_swap_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, total_rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo, dirty_swap_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  7,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo, mem_info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo, heap_size_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo, heap_alloc_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo, heap_free_kb_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, java_heap_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, native_heap_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, code_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, stack_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, graphics_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, private_other_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, system_pss_kb_),
  offsetof(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummaryDefaultTypeInternal, total_swap_pss_),
  offsetof(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummaryDefaultTypeInternal, total_swap_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, java_heap_rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, native_heap_rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, code_rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, stack_rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, graphics_rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, unknown_rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary, total_swap_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, pid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, process_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, native_heap_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, dalvik_heap_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, other_heaps_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, unknown_heap_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, total_heap_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, dalvik_details_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_ProcessMemory, app_summary_),
  6,
  0,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, view_instance_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, view_root_instance_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, app_context_instance_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, activity_instance_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, global_asset_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, global_asset_manager_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, local_binder_object_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, proxy_binder_object_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, parcel_memory_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, parcel_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, binder_object_death_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, open_ssl_socket_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats, webview_instance_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database, name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database, page_size_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database, db_size_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database, lookaside_b_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database, cache_),
  0,
  2,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats, memory_used_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats, pagecache_overflow_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats, malloc_size_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats, databases_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData, process_memory_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData, objects_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData, sql_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData, asset_allocations_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_AppData, unreachable_memory_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, label_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, is_proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, has_activities_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, rss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, swap_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto_MemItem, sub_items_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, uptime_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, elapsed_realtime_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, native_processes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, app_processes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_rss_by_process_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_rss_by_oom_adjustment_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_rss_by_category_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_pss_by_process_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_pss_by_oom_adjustment_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_pss_by_category_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_ram_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, status_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, cached_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, cached_kernel_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, free_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, used_pss_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, used_kernel_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, lost_ram_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_zram_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, zram_physical_used_in_swap_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, total_zram_swap_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, ksm_sharing_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, ksm_shared_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, ksm_unshared_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, ksm_volatile_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, tuning_mb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, tuning_large_mb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, oom_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, restore_limit_kb_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, is_low_ram_device_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::MemInfoDumpProto, is_high_end_gfx_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  10,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  12,
  13,
  14,
  15,
  16,
  17,
  11,
  20,
  18,
  19,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto_StickyAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto_StickyAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto_StickyAction, name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto_StickyAction, intents_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto, user_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::StickyBroadcastProto, actions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpServicesProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpServicesProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpServicesProto, active_services_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveServicesProto_ServicesByUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveServicesProto_ServicesByUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveServicesProto_ServicesByUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveServicesProto_ServicesByUser, service_records_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveServicesProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveServicesProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveServicesProto, services_by_users_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::GrantUriProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::GrantUriProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::GrantUriProto, source_user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::GrantUriProto, uri_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::NeededUriGrantsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::NeededUriGrantsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::NeededUriGrantsProto, target_package_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::NeededUriGrantsProto, target_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::NeededUriGrantsProto, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::NeededUriGrantsProto, grants_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UriPermissionOwnerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UriPermissionOwnerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UriPermissionOwnerProto, owner_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UriPermissionOwnerProto, read_perms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UriPermissionOwnerProto, write_perms_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_AppInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_AppInfo, base_dir_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_AppInfo, res_dir_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_AppInfo, data_dir_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Foreground, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Foreground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Foreground, id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Foreground, notification_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Start, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Start, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Start, start_requested_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Start, delayed_stop_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Start, stop_if_killed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Start, call_start_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Start, last_start_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_ExecuteNesting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_ExecuteNesting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_ExecuteNesting, execute_nesting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_ExecuteNesting, execute_fg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_ExecuteNesting, executing_start_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Crash, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Crash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Crash, restart_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Crash, restart_delay_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Crash, next_restart_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_Crash, crash_count_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, duration_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, delivery_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, done_executing_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, intent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, needed_grants_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto_StartItem, uri_permissions_),
  4,
  0,
  5,
  6,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, short_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, is_running_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, pid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, intent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, process_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, permission_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, appinfo_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, app_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, isolated_proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, whitelist_manager_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, delayed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, foreground_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, create_real_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, starting_bg_timeout_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, last_activity_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, restart_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, created_from_fg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, start_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, execute_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, destory_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, crash_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, delivered_starts_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, pending_starts_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, bindings_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, connections_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ServiceRecordProto, allow_while_in_use_permission_in_fgs_),
  0,
  18,
  17,
  4,
  1,
  2,
  3,
  5,
  6,
  7,
  19,
  20,
  8,
  9,
  10,
  11,
  12,
  21,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  22,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ConnectionRecordProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ConnectionRecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ConnectionRecordProto, hex_hash_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ConnectionRecordProto, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ConnectionRecordProto, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ConnectionRecordProto, service_name_),
  0,
  2,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppBindRecordProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppBindRecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppBindRecordProto, service_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppBindRecordProto, client_proc_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppBindRecordProto, connections_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, intent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, binder_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, auto_create_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, requested_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, received_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, has_bound_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, do_rebind_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::IntentBindRecordProto, apps_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses, size_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses, non_act_at_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses, non_svc_at_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses, list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage, package_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage, mode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto, package_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto, cut_point_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto, last_proc_states_),
  1,
  0,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, target_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, type_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, reason_code_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist, calling_uid_),
  2,
  1,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus, wakefulness_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus, sleep_tokens_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus, sleeping_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus, shutting_down_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus, test_pss_mode_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice, session_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice, wakelock_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp, debug_app_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp, orig_debug_app_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp, debug_transient_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp, orig_wait_for_debugger_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats, size_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats, report_to_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process, name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process, mem_stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump, proc_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump, pid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump, is_user_initiated_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump, uri_),
  0,
  2,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess, procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess, dump_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile, app_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile, proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile, type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller, controller_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller, is_a_monkey_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, isolated_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, active_instrumentations_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, active_uids_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, validate_uids_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, lru_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, pids_self_locked_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, important_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, persistent_starting_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, removed_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, on_hold_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, gc_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, app_errors_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, user_controller_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, home_proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, previous_proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, previous_proc_visible_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, heavy_weight_proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, global_configuration_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, config_will_change_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, screen_compat_packages_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, uid_observers_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, device_idle_whitelist_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, device_idle_temp_whitelist_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, pending_temp_whitelist_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, sleep_status_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, running_voice_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, vr_controller_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, debug_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, current_tracker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, mem_watch_processes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, track_allocation_app_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, profile_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, native_debugging_app_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, always_finish_activities_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, controller_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, total_persistent_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, processes_ready_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, system_ready_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, booted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, factory_test_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, booting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, call_finish_booting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, boot_animation_complete_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, last_power_check_uptime_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, going_to_sleep_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, launching_activity_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, adj_seq_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, lru_seq_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, num_non_cached_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, num_cached_hidden_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, num_service_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, new_num_service_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, allow_lower_mem_level_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, last_memory_level_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, last_num_processes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, last_idle_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActivityManagerServiceDumpProcessesProto, low_ram_since_last_idle_ms_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  20,
  7,
  8,
  21,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  15,
  1,
  22,
  16,
  25,
  23,
  24,
  27,
  26,
  28,
  29,
  30,
  31,
  17,
  18,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  41,
  19,
  40,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, class__),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, finished_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, running_processes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, target_processes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, target_info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, profile_file_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, watcher_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, ui_automation_connection_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ActiveInstrumentationProto, arguments_),
  3,
  6,
  ~0u,
  ~0u,
  4,
  0,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto_ProcStateSequence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto_ProcStateSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto_ProcStateSequence, cururent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto_ProcStateSequence, last_network_updated_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto_ProcStateSequence, last_dispatched_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, current_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, ephemeral_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, fg_services_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, whilelist_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, last_background_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, idle_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, last_reported_changes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, num_procs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UidRecordProto, network_state_update_),
  2,
  8,
  3,
  4,
  5,
  0,
  6,
  ~0u,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ImportanceTokenProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ImportanceTokenProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ImportanceTokenProto, pid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ImportanceTokenProto, token_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ImportanceTokenProto, reason_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::VrControllerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::VrControllerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::VrControllerProto, vr_mode_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::VrControllerProto, render_thread_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime, over_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime, used_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime, ultilization_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, max_adj_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, cur_raw_adj_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, set_raw_adj_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, cur_adj_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, set_adj_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, current_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, set_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, last_pss_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, last_swap_pss_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, last_cached_pss_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, cached_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, empty_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, has_above_client_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto_Detail, service_run_time_),
  4,
  5,
  6,
  7,
  8,
  12,
  13,
  0,
  1,
  2,
  9,
  10,
  11,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, persistent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, num_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, oom_adj_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, sched_group_),
  offsetof(::com::android::server::am::ProcessOomProtoDefaultTypeInternal, activities_),
  offsetof(::com::android::server::am::ProcessOomProtoDefaultTypeInternal, services_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, trim_memory_level_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, adj_type_),
  offsetof(::com::android::server::am::ProcessOomProtoDefaultTypeInternal, adj_target_component_name_),
  offsetof(::com::android::server::am::ProcessOomProtoDefaultTypeInternal, adj_target_object_),
  offsetof(::com::android::server::am::ProcessOomProtoDefaultTypeInternal, adj_source_proc_),
  offsetof(::com::android::server::am::ProcessOomProtoDefaultTypeInternal, adj_source_object_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, detail_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, Foreground_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, AdjTarget_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessOomProto, AdjSource_),
  4,
  5,
  0,
  7,
  ~0u,
  ~0u,
  8,
  6,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessToGcProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessToGcProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessToGcProto, proc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessToGcProto, report_low_memory_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessToGcProto, now_uptime_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessToGcProto, last_gced_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::ProcessToGcProto, last_low_memory_ms_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry, last_crashed_at_ms_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime, process_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_ProcessCrashTime, entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess_Entry, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess_Entry, crashed_at_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess_Entry, short_msg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess_Entry, long_msg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess_Entry, stack_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess, process_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto_BadProcess, entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto, now_uptime_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto, process_crash_times_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppErrorsProto, bad_processes_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserStateProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserStateProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserStateProto, state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserStateProto, switching_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_User, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_User, id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_User, state_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_UserProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_UserProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_UserProfile, user_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto_UserProfile, profile_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto, started_users_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto, started_user_array_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto, user_lru_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::UserControllerProto, user_profile_group_ids_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto_PackageTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto_PackageTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto_PackageTime, package_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto_PackageTime, duration_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto, receiver_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto, total_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto, package_times_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto, started_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppTimeTrackerProto, started_package_),
  0,
  3,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package_User, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package_User, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package_User, app_exit_info_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package, package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto_Package, users_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto, last_update_timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::am::AppsExitInfoProto, packages_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::com::android::server::am::ActivityManagerServiceProto)},
  { 13, 19, sizeof(::com::android::server::am::ActivityManagerServiceDumpActivitiesProto)},
  { 20, 27, sizeof(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler)},
  { 29, 39, sizeof(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto)},
  { 44, 57, sizeof(::com::android::server::am::ReceiverListProto)},
  { 65, 78, sizeof(::com::android::server::am::ProcessRecordProto)},
  { 86, 93, sizeof(::com::android::server::am::BroadcastRecordProto)},
  { 95, 104, sizeof(::com::android::server::am::BroadcastFilterProto)},
  { 108, 117, sizeof(::com::android::server::am::BroadcastQueueProto_BroadcastSummary)},
  { 121, 132, sizeof(::com::android::server::am::BroadcastQueueProto)},
  { 138, 154, sizeof(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo)},
  { 164, 173, sizeof(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo)},
  { 177, 198, sizeof(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary)},
  { 213, 227, sizeof(::com::android::server::am::MemInfoDumpProto_ProcessMemory)},
  { 236, 254, sizeof(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats)},
  { 267, 277, sizeof(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database)},
  { 282, 291, sizeof(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats)},
  { 295, 305, sizeof(::com::android::server::am::MemInfoDumpProto_AppData)},
  { 310, 324, sizeof(::com::android::server::am::MemInfoDumpProto_MemItem)},
  { 333, 369, sizeof(::com::android::server::am::MemInfoDumpProto)},
  { 400, 407, sizeof(::com::android::server::am::StickyBroadcastProto_StickyAction)},
  { 409, 416, sizeof(::com::android::server::am::StickyBroadcastProto)},
  { 418, 424, sizeof(::com::android::server::am::ActivityManagerServiceDumpServicesProto)},
  { 425, 432, sizeof(::com::android::server::am::ActiveServicesProto_ServicesByUser)},
  { 434, 440, sizeof(::com::android::server::am::ActiveServicesProto)},
  { 441, 448, sizeof(::com::android::server::am::GrantUriProto)},
  { 450, 459, sizeof(::com::android::server::am::NeededUriGrantsProto)},
  { 463, 471, sizeof(::com::android::server::am::UriPermissionOwnerProto)},
  { 474, 482, sizeof(::com::android::server::am::ServiceRecordProto_AppInfo)},
  { 485, 492, sizeof(::com::android::server::am::ServiceRecordProto_Foreground)},
  { 494, 504, sizeof(::com::android::server::am::ServiceRecordProto_Start)},
  { 509, 517, sizeof(::com::android::server::am::ServiceRecordProto_ExecuteNesting)},
  { 520, 529, sizeof(::com::android::server::am::ServiceRecordProto_Crash)},
  { 533, 545, sizeof(::com::android::server::am::ServiceRecordProto_StartItem)},
  { 552, 584, sizeof(::com::android::server::am::ServiceRecordProto)},
  { 611, 620, sizeof(::com::android::server::am::ConnectionRecordProto)},
  { 624, 632, sizeof(::com::android::server::am::AppBindRecordProto)},
  { 635, 648, sizeof(::com::android::server::am::IntentBindRecordProto)},
  { 656, 665, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses)},
  { 669, 676, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage)},
  { 678, 685, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState)},
  { 687, 697, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto)},
  { 702, 713, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist)},
  { 719, 729, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus)},
  { 734, 741, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice)},
  { 743, 752, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp)},
  { 756, 764, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats)},
  { 767, 774, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process)},
  { 776, 786, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump)},
  { 791, 798, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess)},
  { 800, 809, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile)},
  { 813, 820, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller)},
  { 822, 885, sizeof(::com::android::server::am::ActivityManagerServiceDumpProcessesProto)},
  { 943, 957, sizeof(::com::android::server::am::ActiveInstrumentationProto)},
  { 966, 974, sizeof(::com::android::server::am::UidRecordProto_ProcStateSequence)},
  { 977, 992, sizeof(::com::android::server::am::UidRecordProto)},
  { 1002, 1010, sizeof(::com::android::server::am::ImportanceTokenProto)},
  { 1013, 1020, sizeof(::com::android::server::am::VrControllerProto)},
  { 1022, 1030, sizeof(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime)},
  { 1033, 1052, sizeof(::com::android::server::am::ProcessOomProto_Detail)},
  { 1066, 1089, sizeof(::com::android::server::am::ProcessOomProto)},
  { 1104, 1114, sizeof(::com::android::server::am::ProcessToGcProto)},
  { 1119, 1126, sizeof(::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry)},
  { 1128, 1135, sizeof(::com::android::server::am::AppErrorsProto_ProcessCrashTime)},
  { 1137, 1147, sizeof(::com::android::server::am::AppErrorsProto_BadProcess_Entry)},
  { 1152, 1159, sizeof(::com::android::server::am::AppErrorsProto_BadProcess)},
  { 1161, 1169, sizeof(::com::android::server::am::AppErrorsProto)},
  { 1172, 1179, sizeof(::com::android::server::am::UserStateProto)},
  { 1181, 1188, sizeof(::com::android::server::am::UserControllerProto_User)},
  { 1190, 1197, sizeof(::com::android::server::am::UserControllerProto_UserProfile)},
  { 1199, 1208, sizeof(::com::android::server::am::UserControllerProto)},
  { 1212, 1219, sizeof(::com::android::server::am::AppTimeTrackerProto_PackageTime)},
  { 1221, 1231, sizeof(::com::android::server::am::AppTimeTrackerProto)},
  { 1236, 1243, sizeof(::com::android::server::am::AppsExitInfoProto_Package_User)},
  { 1245, 1252, sizeof(::com::android::server::am::AppsExitInfoProto_Package)},
  { 1254, 1261, sizeof(::com::android::server::am::AppsExitInfoProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpActivitiesProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_MainHandler_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ReceiverListProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ProcessRecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_BroadcastRecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_BroadcastFilterProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_BroadcastQueueProto_BroadcastSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_BroadcastQueueProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_AppData_ObjectStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_AppData_SqlStats_Database_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_AppData_SqlStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_AppData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_MemItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_MemInfoDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_StickyBroadcastProto_StickyAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_StickyBroadcastProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpServicesProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActiveServicesProto_ServicesByUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActiveServicesProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_GrantUriProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_NeededUriGrantsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_UriPermissionOwnerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ServiceRecordProto_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ServiceRecordProto_Foreground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ServiceRecordProto_Start_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ServiceRecordProto_ExecuteNesting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ServiceRecordProto_Crash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ServiceRecordProto_StartItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ServiceRecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ConnectionRecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppBindRecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_IntentBindRecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_LruProcesses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_SleepStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Voice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_DebugApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Profile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Controller_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ActiveInstrumentationProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_UidRecordProto_ProcStateSequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_UidRecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ImportanceTokenProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_VrControllerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ProcessOomProto_Detail_CpuRunTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ProcessOomProto_Detail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ProcessOomProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_ProcessToGcProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppErrorsProto_ProcessCrashTime_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppErrorsProto_ProcessCrashTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppErrorsProto_BadProcess_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppErrorsProto_BadProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppErrorsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_UserStateProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_UserControllerProto_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_UserControllerProto_UserProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_UserControllerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppTimeTrackerProto_PackageTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppTimeTrackerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppsExitInfoProto_Package_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppsExitInfoProto_Package_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::am::_AppsExitInfoProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nFframeworks/base/core/proto/android/ser"
  "ver/activitymanagerservice.proto\022\025com.an"
  "droid.server.am\032<frameworks/base/core/pr"
  "oto/android/app/activitymanager.proto\0328f"
  "rameworks/base/core/proto/android/app/ap"
  "pexitinfo.proto\0329frameworks/base/core/pr"
  "oto/android/app/notification.proto\0329fram"
  "eworks/base/core/proto/android/app/profi"
  "lerinfo.proto\032\?frameworks/base/core/prot"
  "o/android/content/component_name.proto\032>"
  "frameworks/base/core/proto/android/conte"
  "nt/configuration.proto\0327frameworks/base/"
  "core/proto/android/content/intent.proto\032"
  "Bframeworks/base/core/proto/android/cont"
  "ent/package_item_info.proto\032>frameworks/"
  "base/core/proto/android/internal/process"
  "stats.proto\0322frameworks/base/core/proto/"
  "android/os/bundle.proto\0322frameworks/base"
  "/core/proto/android/os/looper.proto\0328fra"
  "meworks/base/core/proto/android/os/power"
  "manager.proto\032>frameworks/base/core/prot"
  "o/android/server/intentresolver.proto\032Df"
  "rameworks/base/core/proto/android/server"
  "/windowmanagerservice.proto\0324frameworks/"
  "base/core/proto/android/util/common.prot"
  "o\0320frameworks/base/core/proto/android/pr"
  "ivacy.proto\0324frameworks/proto_logging/st"
  "ats/enums/app/enums.proto\"\372\002\n\033ActivityMa"
  "nagerServiceProto\022T\n\nactivities\030\001 \001(\0132@."
  "com.android.server.am.ActivityManagerSer"
  "viceDumpActivitiesProto\022T\n\nbroadcasts\030\002 "
  "\001(\0132@.com.android.server.am.ActivityMana"
  "gerServiceDumpBroadcastsProto\022P\n\010service"
  "s\030\003 \001(\0132>.com.android.server.am.Activity"
  "ManagerServiceDumpServicesProto\022R\n\tproce"
  "sses\030\004 \001(\0132\?.com.android.server.am.Activ"
  "ityManagerServiceDumpProcessesProto:\t\232\237\325"
  "\207\003\003\010\310\001\"\214\001\n)ActivityManagerServiceDumpAct"
  "ivitiesProto\022N\n\025root_window_container\030\002 "
  "\001(\0132/.com.android.server.wm.RootWindowCo"
  "ntainerProto:\t\232\237\325\207\003\003\010\310\001J\004\010\001\020\002\"\373\003\n)Activi"
  "tyManagerServiceDumpBroadcastsProto\022\?\n\rr"
  "eceiver_list\030\001 \003(\0132(.com.android.server."
  "am.ReceiverListProto\022B\n\021receiver_resolve"
  "r\030\002 \001(\0132\'.com.android.server.IntentResol"
  "verProto\022C\n\017broadcast_queue\030\003 \003(\0132*.com."
  "android.server.am.BroadcastQueueProto\022F\n"
  "\021sticky_broadcasts\030\004 \003(\0132+.com.android.s"
  "erver.am.StickyBroadcastProto\022]\n\007handler"
  "\030\005 \001(\0132L.com.android.server.am.ActivityM"
  "anagerServiceDumpBroadcastsProto.MainHan"
  "dler\032R\n\013MainHandler\022\017\n\007handler\030\001 \001(\t\022\'\n\006"
  "looper\030\002 \001(\0132\027.android.os.LooperProto:\t\232"
  "\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\245\002\n\021ReceiverListProt"
  "o\0226\n\003app\030\001 \001(\0132).com.android.server.am.P"
  "rocessRecordProto\022\013\n\003pid\030\002 \001(\005\022\013\n\003uid\030\003 "
  "\001(\005\022\014\n\004user\030\004 \001(\005\022<\n\007current\030\005 \001(\0132+.com"
  ".android.server.am.BroadcastRecordProto\022"
  "\027\n\017linked_to_death\030\006 \001(\010\022<\n\007filters\030\007 \003("
  "\0132+.com.android.server.am.BroadcastFilte"
  "rProto\022\020\n\010hex_hash\030\010 \001(\t:\t\232\237\325\207\003\003\010\310\001\"\260\001\n\022"
  "ProcessRecordProto\022\013\n\003pid\030\001 \001(\005\022\024\n\014proce"
  "ss_name\030\002 \001(\t\022\013\n\003uid\030\003 \001(\005\022\017\n\007user_id\030\004 "
  "\001(\005\022\016\n\006app_id\030\005 \001(\005\022\027\n\017isolated_app_id\030\006"
  " \001(\005\022\022\n\npersistent\030\007 \001(\010\022\021\n\tlru_index\030\010 "
  "\001(\005:\t\232\237\325\207\003\003\010\310\001\"I\n\024BroadcastRecordProto\022\017"
  "\n\007user_id\030\001 \001(\005\022\025\n\rintent_action\030\002 \001(\t:\t"
  "\232\237\325\207\003\003\010\310\001\"\243\001\n\024BroadcastFilterProto\0229\n\rin"
  "tent_filter\030\001 \001(\0132\".android.content.Inte"
  "ntFilterProto\022\033\n\023required_permission\030\002 \001"
  "(\t\022\020\n\010hex_hash\030\003 \001(\t\022\026\n\016owning_user_id\030\004"
  " \001(\005:\t\232\237\325\207\003\003\010\310\001\"\352\004\n\023BroadcastQueueProto\022"
  "\022\n\nqueue_name\030\001 \001(\t\022H\n\023parallel_broadcas"
  "ts\030\002 \003(\0132+.com.android.server.am.Broadca"
  "stRecordProto\022G\n\022ordered_broadcasts\030\003 \003("
  "\0132+.com.android.server.am.BroadcastRecor"
  "dProto\022F\n\021pending_broadcast\030\004 \001(\0132+.com."
  "android.server.am.BroadcastRecordProto\022J"
  "\n\025historical_broadcasts\030\005 \003(\0132+.com.andr"
  "oid.server.am.BroadcastRecordProto\022b\n\035hi"
  "storical_broadcasts_summary\030\006 \003(\0132;.com."
  "android.server.am.BroadcastQueueProto.Br"
  "oadcastSummary\032\250\001\n\020BroadcastSummary\022,\n\006i"
  "ntent\030\001 \001(\0132\034.android.content.IntentProt"
  "o\022\035\n\025enqueue_clock_time_ms\030\002 \001(\003\022\036\n\026disp"
  "atch_clock_time_ms\030\003 \001(\003\022\034\n\024finish_clock"
  "_time_ms\030\004 \001(\003:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\375\037\n"
  "\020MemInfoDumpProto\022\032\n\022uptime_duration_ms\030"
  "\001 \001(\003\022\033\n\023elapsed_realtime_ms\030\002 \001(\003\022O\n\020na"
  "tive_processes\030\003 \003(\01325.com.android.serve"
  "r.am.MemInfoDumpProto.ProcessMemory\022F\n\ra"
  "pp_processes\030\004 \003(\0132/.com.android.server."
  "am.MemInfoDumpProto.AppData\022M\n\024total_rss"
  "_by_process\030\035 \003(\0132/.com.android.server.a"
  "m.MemInfoDumpProto.MemItem\022T\n\033total_rss_"
  "by_oom_adjustment\030\036 \003(\0132/.com.android.se"
  "rver.am.MemInfoDumpProto.MemItem\022N\n\025tota"
  "l_rss_by_category\030\037 \003(\0132/.com.android.se"
  "rver.am.MemInfoDumpProto.MemItem\022M\n\024tota"
  "l_pss_by_process\030\005 \003(\0132/.com.android.ser"
  "ver.am.MemInfoDumpProto.MemItem\022T\n\033total"
  "_pss_by_oom_adjustment\030\006 \003(\0132/.com.andro"
  "id.server.am.MemInfoDumpProto.MemItem\022N\n"
  "\025total_pss_by_category\030\007 \003(\0132/.com.andro"
  "id.server.am.MemInfoDumpProto.MemItem\022\024\n"
  "\014total_ram_kb\030\010 \001(\003\022R\n\006status\030\t \001(\0162B.co"
  "m.android.internal.app.procstats.Process"
  "StatsProto.MemoryFactor\022\025\n\rcached_pss_kb"
  "\030\n \001(\003\022\030\n\020cached_kernel_kb\030\013 \001(\003\022\017\n\007free"
  "_kb\030\014 \001(\003\022\023\n\013used_pss_kb\030\r \001(\003\022\026\n\016used_k"
  "ernel_kb\030\016 \001(\003\022\023\n\013lost_ram_kb\030\017 \001(\003\022\025\n\rt"
  "otal_zram_kb\030\020 \001(\003\022%\n\035zram_physical_used"
  "_in_swap_kb\030\021 \001(\003\022\032\n\022total_zram_swap_kb\030"
  "\022 \001(\003\022\026\n\016ksm_sharing_kb\030\023 \001(\003\022\025\n\rksm_sha"
  "red_kb\030\024 \001(\003\022\027\n\017ksm_unshared_kb\030\025 \001(\003\022\027\n"
  "\017ksm_volatile_kb\030\026 \001(\003\022\021\n\ttuning_mb\030\027 \001("
  "\005\022\027\n\017tuning_large_mb\030\030 \001(\005\022\016\n\006oom_kb\030\031 \001"
  "(\003\022\030\n\020restore_limit_kb\030\032 \001(\003\022\031\n\021is_low_r"
  "am_device\030\033 \001(\010\022\027\n\017is_high_end_gfx\030\034 \001(\010"
  "\032\372\013\n\rProcessMemory\022\013\n\003pid\030\001 \001(\005\022\024\n\014proce"
  "ss_name\030\002 \001(\t\022S\n\013native_heap\030\003 \001(\0132>.com"
  ".android.server.am.MemInfoDumpProto.Proc"
  "essMemory.HeapInfo\022S\n\013dalvik_heap\030\004 \001(\0132"
  ">.com.android.server.am.MemInfoDumpProto"
  ".ProcessMemory.HeapInfo\022U\n\013other_heaps\030\005"
  " \003(\0132@.com.android.server.am.MemInfoDump"
  "Proto.ProcessMemory.MemoryInfo\022V\n\014unknow"
  "n_heap\030\006 \001(\0132@.com.android.server.am.Mem"
  "InfoDumpProto.ProcessMemory.MemoryInfo\022R"
  "\n\ntotal_heap\030\007 \001(\0132>.com.android.server."
  "am.MemInfoDumpProto.ProcessMemory.HeapIn"
  "fo\022X\n\016dalvik_details\030\010 \003(\0132@.com.android"
  ".server.am.MemInfoDumpProto.ProcessMemor"
  "y.MemoryInfo\022U\n\013app_summary\030\t \001(\0132@.com."
  "android.server.am.MemInfoDumpProto.Proce"
  "ssMemory.AppSummary\032\221\002\n\nMemoryInfo\022\014\n\004na"
  "me\030\001 \001(\t\022\024\n\014total_pss_kb\030\002 \001(\005\022\024\n\014clean_"
  "pss_kb\030\003 \001(\005\022\027\n\017shared_dirty_kb\030\004 \001(\005\022\030\n"
  "\020private_dirty_kb\030\005 \001(\005\022\027\n\017shared_clean_"
  "kb\030\006 \001(\005\022\030\n\020private_clean_kb\030\007 \001(\005\022\027\n\rdi"
  "rty_swap_kb\030\010 \001(\005H\000\022\033\n\021dirty_swap_pss_kb"
  "\030\t \001(\005H\000\022\024\n\014total_rss_kb\030\n \001(\005:\t\232\237\325\207\003\003\010\310"
  "\001B\014\n\ndirty_swap\032\254\001\n\010HeapInfo\022R\n\010mem_info"
  "\030\001 \001(\0132@.com.android.server.am.MemInfoDu"
  "mpProto.ProcessMemory.MemoryInfo\022\024\n\014heap"
  "_size_kb\030\002 \001(\005\022\025\n\rheap_alloc_kb\030\003 \001(\005\022\024\n"
  "\014heap_free_kb\030\004 \001(\005:\t\232\237\325\207\003\003\010\310\001\032\231\003\n\nAppSu"
  "mmary\022\030\n\020java_heap_pss_kb\030\001 \001(\005\022\032\n\022nativ"
  "e_heap_pss_kb\030\002 \001(\005\022\023\n\013code_pss_kb\030\003 \001(\005"
  "\022\024\n\014stack_pss_kb\030\004 \001(\005\022\027\n\017graphics_pss_k"
  "b\030\005 \001(\005\022\034\n\024private_other_pss_kb\030\006 \001(\005\022\025\n"
  "\rsystem_pss_kb\030\007 \001(\005\022\030\n\016total_swap_pss\030\010"
  " \001(\005H\000\022\027\n\rtotal_swap_kb\030\t \001(\005H\000\022\030\n\020java_"
  "heap_rss_kb\030\n \001(\005\022\032\n\022native_heap_rss_kb\030"
  "\013 \001(\005\022\023\n\013code_rss_kb\030\014 \001(\005\022\024\n\014stack_rss_"
  "kb\030\r \001(\005\022\027\n\017graphics_rss_kb\030\016 \001(\005\022\026\n\016unk"
  "nown_rss_kb\030\017 \001(\005:\t\232\237\325\207\003\003\010\310\001B\014\n\ntotal_sw"
  "ap:\t\232\237\325\207\003\003\010\310\001\032\220\010\n\007AppData\022M\n\016process_mem"
  "ory\030\001 \001(\01325.com.android.server.am.MemInf"
  "oDumpProto.ProcessMemory\022L\n\007objects\030\002 \001("
  "\0132;.com.android.server.am.MemInfoDumpPro"
  "to.AppData.ObjectStats\022E\n\003sql\030\003 \001(\01328.co"
  "m.android.server.am.MemInfoDumpProto.App"
  "Data.SqlStats\022\031\n\021asset_allocations\030\004 \001(\t"
  "\022\032\n\022unreachable_memory\030\005 \001(\t\032\264\003\n\013ObjectS"
  "tats\022\033\n\023view_instance_count\030\001 \001(\005\022 \n\030vie"
  "w_root_instance_count\030\002 \001(\005\022\"\n\032app_conte"
  "xt_instance_count\030\003 \001(\005\022\037\n\027activity_inst"
  "ance_count\030\004 \001(\005\022\032\n\022global_asset_count\030\005"
  " \001(\005\022\"\n\032global_asset_manager_count\030\006 \001(\005"
  "\022!\n\031local_binder_object_count\030\007 \001(\005\022!\n\031p"
  "roxy_binder_object_count\030\010 \001(\005\022\030\n\020parcel"
  "_memory_kb\030\t \001(\003\022\024\n\014parcel_count\030\n \001(\005\022!"
  "\n\031binder_object_death_count\030\013 \001(\005\022\035\n\025ope"
  "n_ssl_socket_count\030\014 \001(\005\022\036\n\026webview_inst"
  "ance_count\030\r \001(\005:\t\232\237\325\207\003\003\010\310\001\032\247\002\n\010SqlStats"
  "\022\026\n\016memory_used_kb\030\001 \001(\005\022\035\n\025pagecache_ov"
  "erflow_kb\030\002 \001(\005\022\026\n\016malloc_size_kb\030\003 \001(\005\022"
  "T\n\tdatabases\030\004 \003(\0132A.com.android.server."
  "am.MemInfoDumpProto.AppData.SqlStats.Dat"
  "abase\032k\n\010Database\022\014\n\004name\030\001 \001(\t\022\021\n\tpage_"
  "size\030\002 \001(\005\022\017\n\007db_size\030\003 \001(\005\022\023\n\013lookaside"
  "_b\030\004 \001(\005\022\r\n\005cache\030\005 \001(\t:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207"
  "\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\032\336\001\n\007MemItem\022\013\n\003tag\030\001 \001("
  "\t\022\r\n\005label\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\022\017\n\007is_proc\030"
  "\004 \001(\010\022\026\n\016has_activities\030\005 \001(\010\022\016\n\006pss_kb\030"
  "\006 \001(\003\022\016\n\006rss_kb\030\t \001(\003\022\023\n\013swap_pss_kb\030\007 \001"
  "(\003\022B\n\tsub_items\030\010 \003(\0132/.com.android.serv"
  "er.am.MemInfoDumpProto.MemItem:\t\232\237\325\207\003\003\010\310"
  "\001:\t\232\237\325\207\003\003\010\310\001\"\322\001\n\024StickyBroadcastProto\022\014\n"
  "\004user\030\001 \001(\005\022I\n\007actions\030\002 \003(\01328.com.andro"
  "id.server.am.StickyBroadcastProto.Sticky"
  "Action\032V\n\014StickyAction\022\014\n\004name\030\001 \001(\t\022-\n\007"
  "intents\030\002 \003(\0132\034.android.content.IntentPr"
  "oto:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"y\n\'ActivityMan"
  "agerServiceDumpServicesProto\022C\n\017active_s"
  "ervices\030\001 \001(\0132*.com.android.server.am.Ac"
  "tiveServicesProto:\t\232\237\325\207\003\003\010\310\001\"\350\001\n\023ActiveS"
  "ervicesProto\022T\n\021services_by_users\030\001 \003(\0132"
  "9.com.android.server.am.ActiveServicesPr"
  "oto.ServicesByUser\032p\n\016ServicesByUser\022\017\n\007"
  "user_id\030\001 \001(\005\022B\n\017service_records\030\002 \003(\0132)"
  ".com.android.server.am.ServiceRecordProt"
  "o:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"I\n\rGrantUriProto"
  "\022\026\n\016source_user_id\030\001 \001(\005\022\025\n\003uri\030\002 \001(\tB\010\232"
  "\237\325\207\003\002\010d:\t\232\237\325\207\003\003\010\310\001\"\222\001\n\024NeededUriGrantsPr"
  "oto\022\026\n\016target_package\030\001 \001(\t\022\022\n\ntarget_ui"
  "d\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\0224\n\006grants\030\004 \003(\0132$"
  ".com.android.server.am.GrantUriProto:\t\232\237"
  "\325\207\003\003\010\310\001\"\247\001\n\027UriPermissionOwnerProto\022\r\n\005o"
  "wner\030\001 \001(\t\0228\n\nread_perms\030\002 \003(\0132$.com.and"
  "roid.server.am.GrantUriProto\0229\n\013write_pe"
  "rms\030\003 \003(\0132$.com.android.server.am.GrantU"
  "riProto:\010\232\237\325\207\003\002\010d\"\250\021\n\022ServiceRecordProto"
  "\022\022\n\nshort_name\030\001 \001(\t\022\022\n\nis_running\030\002 \001(\010"
  "\022\013\n\003pid\030\003 \001(\005\022,\n\006intent\030\004 \001(\0132\034.android."
  "content.IntentProto\022\024\n\014package_name\030\005 \001("
  "\t\022\024\n\014process_name\030\006 \001(\t\022\022\n\npermission\030\007 "
  "\001(\t\022B\n\007appinfo\030\010 \001(\01321.com.android.serve"
  "r.am.ServiceRecordProto.AppInfo\0226\n\003app\030\t"
  " \001(\0132).com.android.server.am.ProcessReco"
  "rdProto\022@\n\risolated_proc\030\n \001(\0132).com.and"
  "roid.server.am.ProcessRecordProto\022\031\n\021whi"
  "telist_manager\030\013 \001(\010\022\017\n\007delayed\030\014 \001(\010\022H\n"
  "\nforeground\030\r \001(\01324.com.android.server.a"
  "m.ServiceRecordProto.Foreground\0220\n\020creat"
  "e_real_time\030\016 \001(\0132\026.android.util.Duratio"
  "n\0223\n\023starting_bg_timeout\030\017 \001(\0132\026.android"
  ".util.Duration\0222\n\022last_activity_time\030\020 \001"
  "(\0132\026.android.util.Duration\022,\n\014restart_ti"
  "me\030\021 \001(\0132\026.android.util.Duration\022\027\n\017crea"
  "ted_from_fg\030\022 \001(\010\022>\n\005start\030\023 \001(\0132/.com.a"
  "ndroid.server.am.ServiceRecordProto.Star"
  "t\022I\n\007execute\030\024 \001(\01328.com.android.server."
  "am.ServiceRecordProto.ExecuteNesting\022,\n\014"
  "destory_time\030\025 \001(\0132\026.android.util.Durati"
  "on\022>\n\005crash\030\026 \001(\0132/.com.android.server.a"
  "m.ServiceRecordProto.Crash\022M\n\020delivered_"
  "starts\030\027 \003(\01323.com.android.server.am.Ser"
  "viceRecordProto.StartItem\022K\n\016pending_sta"
  "rts\030\030 \003(\01323.com.android.server.am.Servic"
  "eRecordProto.StartItem\022>\n\010bindings\030\031 \003(\013"
  "2,.com.android.server.am.IntentBindRecor"
  "dProto\022A\n\013connections\030\032 \003(\0132,.com.androi"
  "d.server.am.ConnectionRecordProto\022,\n$all"
  "ow_while_in_use_permission_in_fgs\030\033 \001(\010\032"
  "H\n\007AppInfo\022\020\n\010base_dir\030\001 \001(\t\022\017\n\007res_dir\030"
  "\002 \001(\t\022\020\n\010data_dir\030\003 \001(\t:\010\232\237\325\207\003\002\010d\032Y\n\nFor"
  "eground\022\n\n\002id\030\001 \001(\005\0224\n\014notification\030\002 \001("
  "\0132\036.android.app.NotificationProto:\t\232\237\325\207\003"
  "\003\010\310\001\032\204\001\n\005Start\022\027\n\017start_requested\030\001 \001(\010\022"
  "\024\n\014delayed_stop\030\002 \001(\010\022\026\n\016stop_if_killed\030"
  "\003 \001(\010\022\022\n\ncall_start\030\004 \001(\010\022\025\n\rlast_start_"
  "id\030\005 \001(\005:\t\232\237\325\207\003\003\010\310\001\032y\n\016ExecuteNesting\022\027\n"
  "\017execute_nesting\030\001 \001(\005\022\022\n\nexecute_fg\030\002 \001"
  "(\010\022/\n\017executing_start\030\003 \001(\0132\026.android.ut"
  "il.Duration:\t\232\237\325\207\003\003\010\310\001\032\240\001\n\005Crash\022\025\n\rrest"
  "art_count\030\001 \001(\005\022-\n\rrestart_delay\030\002 \001(\0132\026"
  ".android.util.Duration\0221\n\021next_restart_t"
  "ime\030\003 \001(\0132\026.android.util.Duration\022\023\n\013cra"
  "sh_count\030\004 \001(\005:\t\232\237\325\207\003\003\010\310\001\032\275\002\n\tStartItem\022"
  "\n\n\002id\030\001 \001(\005\022(\n\010duration\030\002 \001(\0132\026.android."
  "util.Duration\022\026\n\016delivery_count\030\003 \001(\005\022\034\n"
  "\024done_executing_count\030\004 \001(\005\022,\n\006intent\030\005 "
  "\001(\0132\034.android.content.IntentProto\022B\n\rnee"
  "ded_grants\030\006 \001(\0132+.com.android.server.am"
  ".NeededUriGrantsProto\022G\n\017uri_permissions"
  "\030\007 \001(\0132..com.android.server.am.UriPermis"
  "sionOwnerProto:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\374\003\n"
  "\025ConnectionRecordProto\022\020\n\010hex_hash\030\001 \001(\t"
  "\022\017\n\007user_id\030\002 \001(\005\022@\n\005flags\030\003 \003(\01621.com.a"
  "ndroid.server.am.ConnectionRecordProto.F"
  "lag\022\024\n\014service_name\030\004 \001(\t\"\334\002\n\004Flag\022\017\n\013AU"
  "TO_CREATE\020\000\022\020\n\014DEBUG_UNBIND\020\001\022\n\n\006NOT_FG\020"
  "\002\022\020\n\014IMPORTANT_BG\020\003\022\020\n\014ABOVE_CLIENT\020\004\022\030\n"
  "\024ALLOW_OOM_MANAGEMENT\020\005\022\022\n\016WAIVE_PRIORIT"
  "Y\020\006\022\r\n\tIMPORTANT\020\007\022\030\n\024ADJUST_WITH_ACTIVI"
  "TY\020\010\022\032\n\026FG_SERVICE_WHILE_AWAKE\020\t\022\016\n\nFG_S"
  "ERVICE\020\n\022\027\n\023TREAT_LIKE_ACTIVITY\020\013\022\013\n\007VIS"
  "IBLE\020\014\022\016\n\nSHOWING_UI\020\r\022\017\n\013NOT_VISIBLE\020\016\022"
  "\010\n\004DEAD\020\017\022\023\n\017NOT_PERCEPTIBLE\020\020\022\030\n\024INCLUD"
  "E_CAPABILITIES\020\021:\t\232\237\325\207\003\003\010\310\001\"d\n\022AppBindRe"
  "cordProto\022\024\n\014service_name\030\001 \001(\t\022\030\n\020clien"
  "t_proc_name\030\002 \001(\t\022\023\n\013connections\030\003 \003(\t:\t"
  "\232\237\325\207\003\003\010\310\001\"\371\001\n\025IntentBindRecordProto\022,\n\006i"
  "ntent\030\001 \001(\0132\034.android.content.IntentProt"
  "o\022\016\n\006binder\030\002 \001(\t\022\023\n\013auto_create\030\003 \001(\010\022\021"
  "\n\trequested\030\004 \001(\010\022\020\n\010received\030\005 \001(\010\022\021\n\th"
  "as_bound\030\006 \001(\010\022\021\n\tdo_rebind\030\007 \001(\010\0227\n\004app"
  "s\030\010 \003(\0132).com.android.server.am.AppBindR"
  "ecordProto:\t\232\237\325\207\003\003\010\310\001\"\232(\n(ActivityManage"
  "rServiceDumpProcessesProto\0228\n\005procs\030\001 \003("
  "\0132).com.android.server.am.ProcessRecordP"
  "roto\022A\n\016isolated_procs\030\002 \003(\0132).com.andro"
  "id.server.am.ProcessRecordProto\022R\n\027activ"
  "e_instrumentations\030\003 \003(\01321.com.android.s"
  "erver.am.ActiveInstrumentationProto\022:\n\013a"
  "ctive_uids\030\004 \003(\0132%.com.android.server.am"
  ".UidRecordProto\022<\n\rvalidate_uids\030\005 \003(\0132%"
  ".com.android.server.am.UidRecordProto\022_\n"
  "\tlru_procs\030\006 \001(\0132L.com.android.server.am"
  ".ActivityManagerServiceDumpProcessesProt"
  "o.LruProcesses\022C\n\020pids_self_locked\030\007 \003(\013"
  "2).com.android.server.am.ProcessRecordPr"
  "oto\022D\n\017important_procs\030\010 \003(\0132+.com.andro"
  "id.server.am.ImportanceTokenProto\022L\n\031per"
  "sistent_starting_procs\030\t \003(\0132).com.andro"
  "id.server.am.ProcessRecordProto\022@\n\rremov"
  "ed_procs\030\n \003(\0132).com.android.server.am.P"
  "rocessRecordProto\022@\n\ron_hold_procs\030\013 \003(\013"
  "2).com.android.server.am.ProcessRecordPr"
  "oto\0229\n\010gc_procs\030\014 \003(\0132\'.com.android.serv"
  "er.am.ProcessToGcProto\0229\n\napp_errors\030\r \001"
  "(\0132%.com.android.server.am.AppErrorsProt"
  "o\022C\n\017user_controller\030\016 \001(\0132*.com.android"
  ".server.am.UserControllerProto\022<\n\thome_p"
  "roc\030\017 \001(\0132).com.android.server.am.Proces"
  "sRecordProto\022@\n\rprevious_proc\030\020 \001(\0132).co"
  "m.android.server.am.ProcessRecordProto\022%"
  "\n\035previous_proc_visible_time_ms\030\021 \001(\003\022D\n"
  "\021heavy_weight_proc\030\022 \001(\0132).com.android.s"
  "erver.am.ProcessRecordProto\022A\n\024global_co"
  "nfiguration\030\023 \001(\0132#.android.content.Conf"
  "igurationProto\022\032\n\022config_will_change\030\025 \001"
  "(\010\022s\n\026screen_compat_packages\030\026 \003(\0132S.com"
  ".android.server.am.ActivityManagerServic"
  "eDumpProcessesProto.ScreenCompatPackage\022"
  "s\n\ruid_observers\030\027 \003(\0132\\.com.android.ser"
  "ver.am.ActivityManagerServiceDumpProcess"
  "esProto.UidObserverRegistrationProto\022\035\n\025"
  "device_idle_whitelist\030\030 \003(\005\022\"\n\032device_id"
  "le_temp_whitelist\030\031 \003(\005\022t\n\026pending_temp_"
  "whitelist\030\032 \003(\0132T.com.android.server.am."
  "ActivityManagerServiceDumpProcessesProto"
  ".PendingTempWhitelist\022a\n\014sleep_status\030\033 "
  "\001(\0132K.com.android.server.am.ActivityMana"
  "gerServiceDumpProcessesProto.SleepStatus"
  "\022\\\n\rrunning_voice\030\034 \001(\0132E.com.android.se"
  "rver.am.ActivityManagerServiceDumpProces"
  "sesProto.Voice\022\?\n\rvr_controller\030\035 \001(\0132(."
  "com.android.server.am.VrControllerProto\022"
  "W\n\005debug\030\036 \001(\0132H.com.android.server.am.A"
  "ctivityManagerServiceDumpProcessesProto."
  "DebugApp\022C\n\017current_tracker\030\037 \001(\0132*.com."
  "android.server.am.AppTimeTrackerProto\022l\n"
  "\023mem_watch_processes\030  \001(\0132O.com.android"
  ".server.am.ActivityManagerServiceDumpPro"
  "cessesProto.MemWatchProcess\022\034\n\024track_all"
  "ocation_app\030! \001(\t\022X\n\007profile\030\" \001(\0132G.com"
  ".android.server.am.ActivityManagerServic"
  "eDumpProcessesProto.Profile\022\034\n\024native_de"
  "bugging_app\030# \001(\t\022 \n\030always_finish_activ"
  "ities\030$ \001(\010\022^\n\ncontroller\030% \001(\0132J.com.an"
  "droid.server.am.ActivityManagerServiceDu"
  "mpProcessesProto.Controller\022\036\n\026total_per"
  "sistent_procs\030& \001(\005\022\027\n\017processes_ready\030\'"
  " \001(\010\022\024\n\014system_ready\030( \001(\010\022\016\n\006booted\030) \001"
  "(\010\022\024\n\014factory_test\030* \001(\005\022\017\n\007booting\030+ \001("
  "\010\022\033\n\023call_finish_booting\030, \001(\010\022\037\n\027boot_a"
  "nimation_complete\030- \001(\010\022\"\n\032last_power_ch"
  "eck_uptime_ms\030. \001(\003\022>\n\016going_to_sleep\030/ "
  "\001(\0132&.android.os.PowerManagerProto.WakeL"
  "ock\022B\n\022launching_activity\0300 \001(\0132&.androi"
  "d.os.PowerManagerProto.WakeLock\022\017\n\007adj_s"
  "eq\0301 \001(\005\022\017\n\007lru_seq\0302 \001(\005\022\034\n\024num_non_cac"
  "hed_procs\0303 \001(\005\022\037\n\027num_cached_hidden_pro"
  "cs\0304 \001(\005\022\031\n\021num_service_procs\0305 \001(\005\022\035\n\025n"
  "ew_num_service_procs\0306 \001(\005\022\035\n\025allow_lowe"
  "r_mem_level\0307 \001(\010\022\031\n\021last_memory_level\0308"
  " \001(\005\022\032\n\022last_num_processes\0309 \001(\005\022.\n\016last"
  "_idle_time\030: \001(\0132\026.android.util.Duration"
  "\022\"\n\032low_ram_since_last_idle_ms\030; \001(\003\032\205\001\n"
  "\014LruProcesses\022\014\n\004size\030\001 \001(\005\022\022\n\nnon_act_a"
  "t\030\002 \001(\005\022\022\n\nnon_svc_at\030\003 \001(\005\0224\n\004list\030\004 \003("
  "\0132&.com.android.server.am.ProcessOomProt"
  "o:\t\232\237\325\207\003\003\010\310\001\032\?\n\023ScreenCompatPackage\022\017\n\007p"
  "ackage\030\001 \001(\t\022\014\n\004mode\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001\032\276\002"
  "\n\034UidObserverRegistrationProto\022\013\n\003uid\030\001 "
  "\001(\005\022\017\n\007package\030\002 \001(\t\022+\n\005flags\030\003 \003(\0162\034.an"
  "droid.app.UidObserverFlag\022\021\n\tcut_point\030\004"
  " \001(\005\022\200\001\n\020last_proc_states\030\005 \003(\0132f.com.an"
  "droid.server.am.ActivityManagerServiceDu"
  "mpProcessesProto.UidObserverRegistration"
  "Proto.ProcState\0322\n\tProcState\022\013\n\003uid\030\001 \001("
  "\005\022\r\n\005state\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\032\217"
  "\001\n\024PendingTempWhitelist\022\022\n\ntarget_uid\030\001 "
  "\001(\005\022\023\n\013duration_ms\030\002 \001(\003\022\013\n\003tag\030\003 \001(\t\022\014\n"
  "\004type\030\004 \001(\005\022\023\n\013reason_code\030\005 \001(\005\022\023\n\013call"
  "ing_uid\030\006 \001(\005:\t\232\237\325\207\003\003\010\310\001\032\300\001\n\013SleepStatus"
  "\022F\n\013wakefulness\030\001 \001(\01621.android.os.Power"
  "ManagerInternalProto.Wakefulness\022\036\n\014slee"
  "p_tokens\030\002 \003(\tB\010\232\237\325\207\003\002\010d\022\020\n\010sleeping\030\003 \001"
  "(\010\022\025\n\rshutting_down\030\004 \001(\010\022\025\n\rtest_pss_mo"
  "de\030\005 \001(\010:\t\232\237\325\207\003\003\010\310\001\032]\n\005Voice\022\017\n\007session\030"
  "\001 \001(\t\0228\n\010wakelock\030\002 \001(\0132&.android.os.Pow"
  "erManagerProto.WakeLock:\t\232\237\325\207\003\003\010\310\001\032y\n\010De"
  "bugApp\022\021\n\tdebug_app\030\001 \001(\t\022\026\n\016orig_debug_"
  "app\030\002 \001(\t\022\027\n\017debug_transient\030\003 \001(\010\022\036\n\026or"
  "ig_wait_for_debugger\030\004 \001(\010:\t\232\237\325\207\003\003\010\310\001\032\277\004"
  "\n\017MemWatchProcess\022f\n\005procs\030\001 \003(\0132W.com.a"
  "ndroid.server.am.ActivityManagerServiceD"
  "umpProcessesProto.MemWatchProcess.Proces"
  "s\022b\n\004dump\030\002 \001(\0132T.com.android.server.am."
  "ActivityManagerServiceDumpProcessesProto"
  ".MemWatchProcess.Dump\032\334\001\n\007Process\022\014\n\004nam"
  "e\030\001 \001(\t\022s\n\tmem_stats\030\002 \003(\0132`.com.android"
  ".server.am.ActivityManagerServiceDumpPro"
  "cessesProto.MemWatchProcess.Process.MemS"
  "tats\032C\n\010MemStats\022\013\n\003uid\030\001 \001(\005\022\014\n\004size\030\002 "
  "\001(\t\022\021\n\treport_to\030\003 \001(\t:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003"
  "\003\010\310\001\032v\n\004Dump\022\021\n\tproc_name\030\001 \001(\t\022\013\n\003pid\030\003"
  " \001(\005\022\013\n\003uid\030\004 \001(\005\022\031\n\021is_user_initiated\030\005"
  " \001(\010\022\025\n\003uri\030\006 \001(\tB\010\232\237\325\207\003\002\010d:\t\232\237\325\207\003\003\010\310\001J\004"
  "\010\002\020\003:\t\232\237\325\207\003\003\010\310\001\032\233\001\n\007Profile\022\020\n\010app_name\030"
  "\001 \001(\t\0227\n\004proc\030\002 \001(\0132).com.android.server"
  ".am.ProcessRecordProto\022,\n\004info\030\003 \001(\0132\036.a"
  "ndroid.app.ProfilerInfoProto\022\014\n\004type\030\004 \001"
  "(\005:\t\232\237\325\207\003\003\010\310\001\032@\n\nController\022\022\n\ncontrolle"
  "r\030\001 \001(\t\022\023\n\013is_a_monkey\030\002 \001(\010:\t\232\237\325\207\003\003\010\310\001:"
  "\t\232\237\325\207\003\003\010\310\001\"\207\003\n\032ActiveInstrumentationProt"
  "o\0222\n\005class\030\001 \001(\0132#.android.content.Compo"
  "nentNameProto\022\020\n\010finished\030\002 \001(\010\022D\n\021runni"
  "ng_processes\030\003 \003(\0132).com.android.server."
  "am.ProcessRecordProto\022\030\n\020target_processe"
  "s\030\004 \003(\t\022=\n\013target_info\030\005 \001(\0132(.android.c"
  "ontent.pm.ApplicationInfoProto\022\024\n\014profil"
  "e_file\030\006 \001(\t\022\017\n\007watcher\030\007 \001(\t\022 \n\030ui_auto"
  "mation_connection\030\010 \001(\t\022*\n\targuments\030\n \001"
  "(\0132\027.android.os.BundleProto:\t\232\237\325\207\003\003\010\310\001J\004"
  "\010\t\020\n\"\365\004\n\016UidRecordProto\022\013\n\003uid\030\001 \001(\005\022.\n\007"
  "current\030\002 \001(\0162\035.android.app.ProcessState"
  "Enum\022\021\n\tephemeral\030\003 \001(\010\022\023\n\013fg_services\030\004"
  " \001(\010\022\021\n\twhilelist\030\005 \001(\010\0224\n\024last_backgrou"
  "nd_time\030\006 \001(\0132\026.android.util.Duration\022\014\n"
  "\004idle\030\007 \001(\010\022K\n\025last_reported_changes\030\010 \003"
  "(\0162,.com.android.server.am.UidRecordProt"
  "o.Change\022\021\n\tnum_procs\030\t \001(\005\022U\n\024network_s"
  "tate_update\030\n \001(\01327.com.android.server.a"
  "m.UidRecordProto.ProcStateSequence\032g\n\021Pr"
  "ocStateSequence\022\020\n\010cururent\030\001 \001(\003\022\034\n\024las"
  "t_network_updated\030\002 \001(\003\022\027\n\017last_dispatch"
  "ed\030\003 \001(\003:\t\232\237\325\207\003\003\010\310\001\"|\n\006Change\022\017\n\013CHANGE_"
  "GONE\020\000\022\017\n\013CHANGE_IDLE\020\001\022\021\n\rCHANGE_ACTIVE"
  "\020\002\022\021\n\rCHANGE_CACHED\020\003\022\023\n\017CHANGE_UNCACHED"
  "\020\004\022\025\n\021CHANGE_CAPABILITY\020\005:\t\232\237\325\207\003\003\010\310\001\"L\n\024"
  "ImportanceTokenProto\022\013\n\003pid\030\001 \001(\005\022\r\n\005tok"
  "en\030\002 \001(\t\022\016\n\006reason\030\003 \001(\t:\010\232\237\325\207\003\002\010d\"\311\001\n\021V"
  "rControllerProto\022@\n\007vr_mode\030\001 \003(\0162/.com."
  "android.server.am.VrControllerProto.VrMo"
  "de\022\030\n\020render_thread_id\030\002 \001(\005\"M\n\006VrMode\022\024"
  "\n\020FLAG_NON_VR_MODE\020\000\022\020\n\014FLAG_VR_MODE\020\001\022\033"
  "\n\027FLAG_PERSISTENT_VR_MODE\020\002:\t\232\237\325\207\003\003\010\310\001\"\263"
  "\n\n\017ProcessOomProto\022\022\n\npersistent\030\001 \001(\010\022\013"
  "\n\003num\030\002 \001(\005\022\017\n\007oom_adj\030\003 \001(\t\022[\n\013sched_gr"
  "oup\030\004 \001(\01621.com.android.server.am.Proces"
  "sOomProto.SchedGroup:\023SCHED_GROUP_UNKNOW"
  "N\022\024\n\nactivities\030\005 \001(\010H\000\022\022\n\010services\030\006 \001("
  "\010H\000\022,\n\005state\030\007 \001(\0162\035.android.app.Process"
  "StateEnum\022\031\n\021trim_memory_level\030\010 \001(\005\0227\n\004"
  "proc\030\t \001(\0132).com.android.server.am.Proce"
  "ssRecordProto\022\020\n\010adj_type\030\n \001(\t\022H\n\031adj_t"
  "arget_component_name\030\013 \001(\0132#.android.con"
  "tent.ComponentNameProtoH\001\022\033\n\021adj_target_"
  "object\030\014 \001(\tH\001\022D\n\017adj_source_proc\030\r \001(\0132"
  ").com.android.server.am.ProcessRecordPro"
  "toH\002\022\033\n\021adj_source_object\030\016 \001(\tH\002\022=\n\006det"
  "ail\030\017 \001(\0132-.com.android.server.am.Proces"
  "sOomProto.Detail\032\370\003\n\006Detail\022\017\n\007max_adj\030\001"
  " \001(\005\022\023\n\013cur_raw_adj\030\002 \001(\005\022\023\n\013set_raw_adj"
  "\030\003 \001(\005\022\017\n\007cur_adj\030\004 \001(\005\022\017\n\007set_adj\030\005 \001(\005"
  "\0224\n\rcurrent_state\030\007 \001(\0162\035.android.app.Pr"
  "ocessStateEnum\0220\n\tset_state\030\010 \001(\0162\035.andr"
  "oid.app.ProcessStateEnum\022\020\n\010last_pss\030\t \001"
  "(\t\022\025\n\rlast_swap_pss\030\n \001(\t\022\027\n\017last_cached"
  "_pss\030\013 \001(\t\022\016\n\006cached\030\014 \001(\010\022\r\n\005empty\030\r \001("
  "\010\022\030\n\020has_above_client\030\016 \001(\010\022R\n\020service_r"
  "un_time\030\017 \001(\01328.com.android.server.am.Pr"
  "ocessOomProto.Detail.CpuRunTime\032O\n\nCpuRu"
  "nTime\022\017\n\007over_ms\030\001 \001(\003\022\017\n\007used_ms\030\002 \001(\003\022"
  "\024\n\014ultilization\030\003 \001(\002:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003"
  "\010\310\001\"\233\001\n\nSchedGroup\022 \n\023SCHED_GROUP_UNKNOW"
  "N\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026SCHED_GROUP_BACKGROUND\020\000"
  "\022\027\n\023SCHED_GROUP_DEFAULT\020\001\022\027\n\023SCHED_GROUP"
  "_TOP_APP\020\002\022\035\n\031SCHED_GROUP_TOP_APP_BOUND\020"
  "\003:\t\232\237\325\207\003\003\010\310\001B\014\n\nForegroundB\013\n\tAdjTargetB"
  "\013\n\tAdjSource\"\272\001\n\020ProcessToGcProto\0227\n\004pro"
  "c\030\001 \001(\0132).com.android.server.am.ProcessR"
  "ecordProto\022\031\n\021report_low_memory\030\002 \001(\010\022\025\n"
  "\rnow_uptime_ms\030\003 \001(\003\022\024\n\014last_gced_ms\030\004 \001"
  "(\003\022\032\n\022last_low_memory_ms\030\005 \001(\003:\t\232\237\325\207\003\003\010\310"
  "\001\"\213\005\n\016AppErrorsProto\022\025\n\rnow_uptime_ms\030\001 "
  "\001(\003\022S\n\023process_crash_times\030\002 \003(\01326.com.a"
  "ndroid.server.am.AppErrorsProto.ProcessC"
  "rashTime\022G\n\rbad_processes\030\003 \003(\01320.com.an"
  "droid.server.am.AppErrorsProto.BadProces"
  "s\032\277\001\n\020ProcessCrashTime\022\024\n\014process_name\030\001"
  " \001(\t\022M\n\007entries\030\002 \003(\0132<.com.android.serv"
  "er.am.AppErrorsProto.ProcessCrashTime.En"
  "try\032;\n\005Entry\022\013\n\003uid\030\001 \001(\005\022\032\n\022last_crashe"
  "d_at_ms\030\002 \001(\003:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\032\366\001\n\n"
  "BadProcess\022\024\n\014process_name\030\001 \001(\t\022G\n\007entr"
  "ies\030\002 \003(\01326.com.android.server.am.AppErr"
  "orsProto.BadProcess.Entry\032~\n\005Entry\022\013\n\003ui"
  "d\030\001 \001(\005\022\025\n\rcrashed_at_ms\030\002 \001(\003\022\021\n\tshort_"
  "msg\030\003 \001(\t\022\032\n\010long_msg\030\004 \001(\tB\010\232\237\325\207\003\002\010d\022\027\n"
  "\005stack\030\005 \001(\tB\010\232\237\325\207\003\002\010d:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003"
  "\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\202\002\n\016UserStateProto\022:\n\005st"
  "ate\030\001 \001(\0162+.com.android.server.am.UserSt"
  "ateProto.State\022\021\n\tswitching\030\002 \001(\010\"\225\001\n\005St"
  "ate\022\021\n\rSTATE_BOOTING\020\000\022\030\n\024STATE_RUNNING_"
  "LOCKED\020\001\022\033\n\027STATE_RUNNING_UNLOCKING\020\002\022\032\n"
  "\026STATE_RUNNING_UNLOCKED\020\003\022\022\n\016STATE_STOPP"
  "ING\020\004\022\022\n\016STATE_SHUTDOWN\020\005:\t\232\237\325\207\003\003\010\310\001\"\374\002\n"
  "\023UserControllerProto\022F\n\rstarted_users\030\001 "
  "\003(\0132/.com.android.server.am.UserControll"
  "erProto.User\022\032\n\022started_user_array\030\002 \003(\005"
  "\022\020\n\010user_lru\030\003 \003(\005\022V\n\026user_profile_group"
  "_ids\030\004 \003(\01326.com.android.server.am.UserC"
  "ontrollerProto.UserProfile\032S\n\004User\022\n\n\002id"
  "\030\001 \001(\005\0224\n\005state\030\002 \001(\0132%.com.android.serv"
  "er.am.UserStateProto:\t\232\237\325\207\003\003\010\310\001\0327\n\013UserP"
  "rofile\022\014\n\004user\030\001 \001(\005\022\017\n\007profile\030\002 \001(\005:\t\232"
  "\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\243\002\n\023AppTimeTrackerPr"
  "oto\022\020\n\010receiver\030\001 \001(\t\022\031\n\021total_duration_"
  "ms\030\002 \001(\003\022M\n\rpackage_times\030\003 \003(\01326.com.an"
  "droid.server.am.AppTimeTrackerProto.Pack"
  "ageTime\022,\n\014started_time\030\004 \001(\0132\026.android."
  "util.Duration\022\027\n\017started_package\030\005 \001(\t\032>"
  "\n\013PackageTime\022\017\n\007package\030\001 \001(\t\022\023\n\013durati"
  "on_ms\030\002 \001(\003:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\322\002\n\021Ap"
  "psExitInfoProto\022\035\n\025last_update_timestamp"
  "\030\001 \001(\003\022B\n\010packages\030\002 \003(\01320.com.android.s"
  "erver.am.AppsExitInfoProto.Package\032\316\001\n\007P"
  "ackage\022\024\n\014package_name\030\001 \001(\t\022D\n\005users\030\002 "
  "\003(\01325.com.android.server.am.AppsExitInfo"
  "Proto.Package.User\032\\\n\004User\022\013\n\003uid\030\001 \001(\005\022"
  "<\n\rapp_exit_info\030\002 \003(\0132%.android.app.App"
  "licationExitInfoProto:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003"
  "\010\310\001:\t\232\237\325\207\003\003\010\310\001B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_deps[17] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2factivitymanager_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fappexitinfo_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fprocessstats_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2flooper_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fintentresolver_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fcommon_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_sccs[76] = {
  &scc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ActivityManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppErrorsProto_ProcessCrashTime_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppsExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_AppData_ObjectStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_ProcessMemory_AppSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ProcessOomProto_Detail_CpuRunTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ServiceRecordProto_Start_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_UidRecordProto_ProcStateSequence_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_UserControllerProto_UserProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
  &scc_info_VrControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto, "frameworks/base/core/proto/android/server/activitymanagerservice.proto", 21538,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto_deps, 76, 17,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto, 76, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace am {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionRecordProto_Flag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[0];
}
bool ConnectionRecordProto_Flag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::AUTO_CREATE;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::DEBUG_UNBIND;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::NOT_FG;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::IMPORTANT_BG;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::ABOVE_CLIENT;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::ALLOW_OOM_MANAGEMENT;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::WAIVE_PRIORITY;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::IMPORTANT;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::ADJUST_WITH_ACTIVITY;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::FG_SERVICE_WHILE_AWAKE;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::FG_SERVICE;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::TREAT_LIKE_ACTIVITY;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::VISIBLE;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::SHOWING_UI;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::NOT_VISIBLE;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::DEAD;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::NOT_PERCEPTIBLE;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::INCLUDE_CAPABILITIES;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::Flag_MIN;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto::Flag_MAX;
constexpr int ConnectionRecordProto::Flag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UidRecordProto_Change_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[1];
}
bool UidRecordProto_Change_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UidRecordProto_Change UidRecordProto::CHANGE_GONE;
constexpr UidRecordProto_Change UidRecordProto::CHANGE_IDLE;
constexpr UidRecordProto_Change UidRecordProto::CHANGE_ACTIVE;
constexpr UidRecordProto_Change UidRecordProto::CHANGE_CACHED;
constexpr UidRecordProto_Change UidRecordProto::CHANGE_UNCACHED;
constexpr UidRecordProto_Change UidRecordProto::CHANGE_CAPABILITY;
constexpr UidRecordProto_Change UidRecordProto::Change_MIN;
constexpr UidRecordProto_Change UidRecordProto::Change_MAX;
constexpr int UidRecordProto::Change_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VrControllerProto_VrMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[2];
}
bool VrControllerProto_VrMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VrControllerProto_VrMode VrControllerProto::FLAG_NON_VR_MODE;
constexpr VrControllerProto_VrMode VrControllerProto::FLAG_VR_MODE;
constexpr VrControllerProto_VrMode VrControllerProto::FLAG_PERSISTENT_VR_MODE;
constexpr VrControllerProto_VrMode VrControllerProto::VrMode_MIN;
constexpr VrControllerProto_VrMode VrControllerProto::VrMode_MAX;
constexpr int VrControllerProto::VrMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessOomProto_SchedGroup_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[3];
}
bool ProcessOomProto_SchedGroup_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProcessOomProto_SchedGroup ProcessOomProto::SCHED_GROUP_UNKNOWN;
constexpr ProcessOomProto_SchedGroup ProcessOomProto::SCHED_GROUP_BACKGROUND;
constexpr ProcessOomProto_SchedGroup ProcessOomProto::SCHED_GROUP_DEFAULT;
constexpr ProcessOomProto_SchedGroup ProcessOomProto::SCHED_GROUP_TOP_APP;
constexpr ProcessOomProto_SchedGroup ProcessOomProto::SCHED_GROUP_TOP_APP_BOUND;
constexpr ProcessOomProto_SchedGroup ProcessOomProto::SchedGroup_MIN;
constexpr ProcessOomProto_SchedGroup ProcessOomProto::SchedGroup_MAX;
constexpr int ProcessOomProto::SchedGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserStateProto_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto[4];
}
bool UserStateProto_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserStateProto_State UserStateProto::STATE_BOOTING;
constexpr UserStateProto_State UserStateProto::STATE_RUNNING_LOCKED;
constexpr UserStateProto_State UserStateProto::STATE_RUNNING_UNLOCKING;
constexpr UserStateProto_State UserStateProto::STATE_RUNNING_UNLOCKED;
constexpr UserStateProto_State UserStateProto::STATE_STOPPING;
constexpr UserStateProto_State UserStateProto::STATE_SHUTDOWN;
constexpr UserStateProto_State UserStateProto::State_MIN;
constexpr UserStateProto_State UserStateProto::State_MAX;
constexpr int UserStateProto::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ActivityManagerServiceProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceProto_default_instance_._instance.get_mutable()->activities_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto*>(
      ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceProto_default_instance_._instance.get_mutable()->broadcasts_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto*>(
      ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceProto_default_instance_._instance.get_mutable()->services_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpServicesProto*>(
      ::com::android::server::am::ActivityManagerServiceDumpServicesProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceProto_default_instance_._instance.get_mutable()->processes_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto::internal_default_instance());
}
class ActivityManagerServiceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceProto>()._has_bits_);
  static const ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto& activities(const ActivityManagerServiceProto* msg);
  static void set_has_activities(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto& broadcasts(const ActivityManagerServiceProto* msg);
  static void set_has_broadcasts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpServicesProto& services(const ActivityManagerServiceProto* msg);
  static void set_has_services(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto& processes(const ActivityManagerServiceProto* msg);
  static void set_has_processes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto&
ActivityManagerServiceProto::_Internal::activities(const ActivityManagerServiceProto* msg) {
  return *msg->activities_;
}
const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto&
ActivityManagerServiceProto::_Internal::broadcasts(const ActivityManagerServiceProto* msg) {
  return *msg->broadcasts_;
}
const ::com::android::server::am::ActivityManagerServiceDumpServicesProto&
ActivityManagerServiceProto::_Internal::services(const ActivityManagerServiceProto* msg) {
  return *msg->services_;
}
const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto&
ActivityManagerServiceProto::_Internal::processes(const ActivityManagerServiceProto* msg) {
  return *msg->processes_;
}
ActivityManagerServiceProto::ActivityManagerServiceProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceProto)
}
ActivityManagerServiceProto::ActivityManagerServiceProto(const ActivityManagerServiceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_activities()) {
    activities_ = new ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto(*from.activities_);
  } else {
    activities_ = nullptr;
  }
  if (from.has_broadcasts()) {
    broadcasts_ = new ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto(*from.broadcasts_);
  } else {
    broadcasts_ = nullptr;
  }
  if (from.has_services()) {
    services_ = new ::com::android::server::am::ActivityManagerServiceDumpServicesProto(*from.services_);
  } else {
    services_ = nullptr;
  }
  if (from.has_processes()) {
    processes_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto(*from.processes_);
  } else {
    processes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceProto)
}

void ActivityManagerServiceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&activities_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processes_) -
      reinterpret_cast<char*>(&activities_)) + sizeof(processes_));
}

ActivityManagerServiceProto::~ActivityManagerServiceProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceProto)
  SharedDtor();
}

void ActivityManagerServiceProto::SharedDtor() {
  if (this != internal_default_instance()) delete activities_;
  if (this != internal_default_instance()) delete broadcasts_;
  if (this != internal_default_instance()) delete services_;
  if (this != internal_default_instance()) delete processes_;
}

void ActivityManagerServiceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceProto& ActivityManagerServiceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(activities_ != nullptr);
      activities_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(broadcasts_ != nullptr);
      broadcasts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(services_ != nullptr);
      services_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(processes_ != nullptr);
      processes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.am.ActivityManagerServiceDumpActivitiesProto activities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_activities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto broadcasts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_broadcasts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpServicesProto services = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto processes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_processes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.am.ActivityManagerServiceDumpActivitiesProto activities = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto broadcasts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_broadcasts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpServicesProto services = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto processes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_processes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActivityManagerServiceDumpActivitiesProto activities = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::activities(this), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto broadcasts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::broadcasts(this), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpServicesProto services = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::services(this), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto processes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::processes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActivityManagerServiceDumpActivitiesProto activities = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::activities(this), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto broadcasts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::broadcasts(this), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpServicesProto services = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::services(this), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto processes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::processes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceProto)
  return target;
}

size_t ActivityManagerServiceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.am.ActivityManagerServiceDumpActivitiesProto activities = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activities_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto broadcasts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcasts_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpServicesProto services = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *services_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto processes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *processes_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceProto)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceProto::MergeFrom(const ActivityManagerServiceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_activities()->::com::android::server::am::ActivityManagerServiceDumpActivitiesProto::MergeFrom(from.activities());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_broadcasts()->::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto::MergeFrom(from.broadcasts());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_services()->::com::android::server::am::ActivityManagerServiceDumpServicesProto::MergeFrom(from.services());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_processes()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto::MergeFrom(from.processes());
    }
  }
}

void ActivityManagerServiceProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceProto::CopyFrom(const ActivityManagerServiceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceProto::IsInitialized() const {
  return true;
}

void ActivityManagerServiceProto::InternalSwap(ActivityManagerServiceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activities_, other->activities_);
  swap(broadcasts_, other->broadcasts_);
  swap(services_, other->services_);
  swap(processes_, other->processes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpActivitiesProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpActivitiesProto_default_instance_._instance.get_mutable()->root_window_container_ = const_cast< ::com::android::server::wm::RootWindowContainerProto*>(
      ::com::android::server::wm::RootWindowContainerProto::internal_default_instance());
}
class ActivityManagerServiceDumpActivitiesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpActivitiesProto>()._has_bits_);
  static const ::com::android::server::wm::RootWindowContainerProto& root_window_container(const ActivityManagerServiceDumpActivitiesProto* msg);
  static void set_has_root_window_container(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::wm::RootWindowContainerProto&
ActivityManagerServiceDumpActivitiesProto::_Internal::root_window_container(const ActivityManagerServiceDumpActivitiesProto* msg) {
  return *msg->root_window_container_;
}
void ActivityManagerServiceDumpActivitiesProto::clear_root_window_container() {
  if (root_window_container_ != nullptr) root_window_container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ActivityManagerServiceDumpActivitiesProto::ActivityManagerServiceDumpActivitiesProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
}
ActivityManagerServiceDumpActivitiesProto::ActivityManagerServiceDumpActivitiesProto(const ActivityManagerServiceDumpActivitiesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_root_window_container()) {
    root_window_container_ = new ::com::android::server::wm::RootWindowContainerProto(*from.root_window_container_);
  } else {
    root_window_container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
}

void ActivityManagerServiceDumpActivitiesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  root_window_container_ = nullptr;
}

ActivityManagerServiceDumpActivitiesProto::~ActivityManagerServiceDumpActivitiesProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  SharedDtor();
}

void ActivityManagerServiceDumpActivitiesProto::SharedDtor() {
  if (this != internal_default_instance()) delete root_window_container_;
}

void ActivityManagerServiceDumpActivitiesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpActivitiesProto& ActivityManagerServiceDumpActivitiesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpActivitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpActivitiesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(root_window_container_ != nullptr);
    root_window_container_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpActivitiesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_root_window_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpActivitiesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_root_window_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpActivitiesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::root_window_container(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpActivitiesProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::root_window_container(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  return target;
}

size_t ActivityManagerServiceDumpActivitiesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_window_container_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpActivitiesProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpActivitiesProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpActivitiesProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpActivitiesProto::MergeFrom(const ActivityManagerServiceDumpActivitiesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_root_window_container()) {
    mutable_root_window_container()->::com::android::server::wm::RootWindowContainerProto::MergeFrom(from.root_window_container());
  }
}

void ActivityManagerServiceDumpActivitiesProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpActivitiesProto::CopyFrom(const ActivityManagerServiceDumpActivitiesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpActivitiesProto::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpActivitiesProto::InternalSwap(ActivityManagerServiceDumpActivitiesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(root_window_container_, other->root_window_container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpActivitiesProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_MainHandler_default_instance_._instance.get_mutable()->looper_ = const_cast< ::android::os::LooperProto*>(
      ::android::os::LooperProto::internal_default_instance());
}
class ActivityManagerServiceDumpBroadcastsProto_MainHandler::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpBroadcastsProto_MainHandler>()._has_bits_);
  static void set_has_handler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::LooperProto& looper(const ActivityManagerServiceDumpBroadcastsProto_MainHandler* msg);
  static void set_has_looper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::LooperProto&
ActivityManagerServiceDumpBroadcastsProto_MainHandler::_Internal::looper(const ActivityManagerServiceDumpBroadcastsProto_MainHandler* msg) {
  return *msg->looper_;
}
void ActivityManagerServiceDumpBroadcastsProto_MainHandler::clear_looper() {
  if (looper_ != nullptr) looper_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ActivityManagerServiceDumpBroadcastsProto_MainHandler::ActivityManagerServiceDumpBroadcastsProto_MainHandler()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
}
ActivityManagerServiceDumpBroadcastsProto_MainHandler::ActivityManagerServiceDumpBroadcastsProto_MainHandler(const ActivityManagerServiceDumpBroadcastsProto_MainHandler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_handler()) {
    handler_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.handler_);
  }
  if (from.has_looper()) {
    looper_ = new ::android::os::LooperProto(*from.looper_);
  } else {
    looper_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  looper_ = nullptr;
}

ActivityManagerServiceDumpBroadcastsProto_MainHandler::~ActivityManagerServiceDumpBroadcastsProto_MainHandler() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  SharedDtor();
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::SharedDtor() {
  handler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete looper_;
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpBroadcastsProto_MainHandler& ActivityManagerServiceDumpBroadcastsProto_MainHandler::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpBroadcastsProto_MainHandler_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpBroadcastsProto_MainHandler::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      handler_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(looper_ != nullptr);
      looper_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpBroadcastsProto_MainHandler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string handler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_handler(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.LooperProto looper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_looper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpBroadcastsProto_MainHandler::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string handler = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_handler()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->handler().data(), static_cast<int>(this->handler().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.LooperProto looper = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_looper()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string handler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->handler().data(), static_cast<int>(this->handler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->handler(), output);
  }

  // optional .android.os.LooperProto looper = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::looper(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpBroadcastsProto_MainHandler::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string handler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->handler().data(), static_cast<int>(this->handler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->handler(), target);
  }

  // optional .android.os.LooperProto looper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::looper(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  return target;
}

size_t ActivityManagerServiceDumpBroadcastsProto_MainHandler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string handler = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->handler());
    }

    // optional .android.os.LooperProto looper = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *looper_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpBroadcastsProto_MainHandler* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpBroadcastsProto_MainHandler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::MergeFrom(const ActivityManagerServiceDumpBroadcastsProto_MainHandler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      handler_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.handler_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_looper()->::android::os::LooperProto::MergeFrom(from.looper());
    }
  }
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::CopyFrom(const ActivityManagerServiceDumpBroadcastsProto_MainHandler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpBroadcastsProto_MainHandler::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpBroadcastsProto_MainHandler::InternalSwap(ActivityManagerServiceDumpBroadcastsProto_MainHandler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  handler_.Swap(&other->handler_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(looper_, other->looper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpBroadcastsProto_MainHandler::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpBroadcastsProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_default_instance_._instance.get_mutable()->receiver_resolver_ = const_cast< ::com::android::server::IntentResolverProto*>(
      ::com::android::server::IntentResolverProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_default_instance_._instance.get_mutable()->handler_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler*>(
      ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler::internal_default_instance());
}
class ActivityManagerServiceDumpBroadcastsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpBroadcastsProto>()._has_bits_);
  static const ::com::android::server::IntentResolverProto& receiver_resolver(const ActivityManagerServiceDumpBroadcastsProto* msg);
  static void set_has_receiver_resolver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler& handler(const ActivityManagerServiceDumpBroadcastsProto* msg);
  static void set_has_handler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::IntentResolverProto&
ActivityManagerServiceDumpBroadcastsProto::_Internal::receiver_resolver(const ActivityManagerServiceDumpBroadcastsProto* msg) {
  return *msg->receiver_resolver_;
}
const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler&
ActivityManagerServiceDumpBroadcastsProto::_Internal::handler(const ActivityManagerServiceDumpBroadcastsProto* msg) {
  return *msg->handler_;
}
void ActivityManagerServiceDumpBroadcastsProto::clear_receiver_resolver() {
  if (receiver_resolver_ != nullptr) receiver_resolver_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ActivityManagerServiceDumpBroadcastsProto::ActivityManagerServiceDumpBroadcastsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
}
ActivityManagerServiceDumpBroadcastsProto::ActivityManagerServiceDumpBroadcastsProto(const ActivityManagerServiceDumpBroadcastsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      receiver_list_(from.receiver_list_),
      broadcast_queue_(from.broadcast_queue_),
      sticky_broadcasts_(from.sticky_broadcasts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_receiver_resolver()) {
    receiver_resolver_ = new ::com::android::server::IntentResolverProto(*from.receiver_resolver_);
  } else {
    receiver_resolver_ = nullptr;
  }
  if (from.has_handler()) {
    handler_ = new ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler(*from.handler_);
  } else {
    handler_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
}

void ActivityManagerServiceDumpBroadcastsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&receiver_resolver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handler_) -
      reinterpret_cast<char*>(&receiver_resolver_)) + sizeof(handler_));
}

ActivityManagerServiceDumpBroadcastsProto::~ActivityManagerServiceDumpBroadcastsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  SharedDtor();
}

void ActivityManagerServiceDumpBroadcastsProto::SharedDtor() {
  if (this != internal_default_instance()) delete receiver_resolver_;
  if (this != internal_default_instance()) delete handler_;
}

void ActivityManagerServiceDumpBroadcastsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpBroadcastsProto& ActivityManagerServiceDumpBroadcastsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpBroadcastsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpBroadcastsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_list_.Clear();
  broadcast_queue_.Clear();
  sticky_broadcasts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(receiver_resolver_ != nullptr);
      receiver_resolver_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(handler_ != nullptr);
      handler_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpBroadcastsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.am.ReceiverListProto receiver_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_receiver_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.IntentResolverProto receiver_resolver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_receiver_resolver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.BroadcastQueueProto broadcast_queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_broadcast_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.StickyBroadcastProto sticky_broadcasts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sticky_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler handler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_handler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpBroadcastsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.am.ReceiverListProto receiver_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_receiver_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.IntentResolverProto receiver_resolver = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver_resolver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.BroadcastQueueProto broadcast_queue = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_broadcast_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.StickyBroadcastProto sticky_broadcasts = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sticky_broadcasts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler handler = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_handler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpBroadcastsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ReceiverListProto receiver_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->receiver_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->receiver_list(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.IntentResolverProto receiver_resolver = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::receiver_resolver(this), output);
  }

  // repeated .com.android.server.am.BroadcastQueueProto broadcast_queue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcast_queue_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->broadcast_queue(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.StickyBroadcastProto sticky_broadcasts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sticky_broadcasts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sticky_broadcasts(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler handler = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::handler(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpBroadcastsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ReceiverListProto receiver_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->receiver_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->receiver_list(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.IntentResolverProto receiver_resolver = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::receiver_resolver(this), target);
  }

  // repeated .com.android.server.am.BroadcastQueueProto broadcast_queue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->broadcast_queue_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->broadcast_queue(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.StickyBroadcastProto sticky_broadcasts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sticky_broadcasts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sticky_broadcasts(static_cast<int>(i)), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler handler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::handler(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  return target;
}

size_t ActivityManagerServiceDumpBroadcastsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ReceiverListProto receiver_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->receiver_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->receiver_list(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.BroadcastQueueProto broadcast_queue = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->broadcast_queue_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->broadcast_queue(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.StickyBroadcastProto sticky_broadcasts = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sticky_broadcasts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sticky_broadcasts(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.IntentResolverProto receiver_resolver = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *receiver_resolver_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler handler = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *handler_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpBroadcastsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpBroadcastsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpBroadcastsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpBroadcastsProto::MergeFrom(const ActivityManagerServiceDumpBroadcastsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiver_list_.MergeFrom(from.receiver_list_);
  broadcast_queue_.MergeFrom(from.broadcast_queue_);
  sticky_broadcasts_.MergeFrom(from.sticky_broadcasts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_receiver_resolver()->::com::android::server::IntentResolverProto::MergeFrom(from.receiver_resolver());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_handler()->::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler::MergeFrom(from.handler());
    }
  }
}

void ActivityManagerServiceDumpBroadcastsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpBroadcastsProto::CopyFrom(const ActivityManagerServiceDumpBroadcastsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpBroadcastsProto::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpBroadcastsProto::InternalSwap(ActivityManagerServiceDumpBroadcastsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&receiver_list_)->InternalSwap(CastToBase(&other->receiver_list_));
  CastToBase(&broadcast_queue_)->InternalSwap(CastToBase(&other->broadcast_queue_));
  CastToBase(&sticky_broadcasts_)->InternalSwap(CastToBase(&other->sticky_broadcasts_));
  swap(receiver_resolver_, other->receiver_resolver_);
  swap(handler_, other->handler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpBroadcastsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceiverListProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ReceiverListProto_default_instance_._instance.get_mutable()->app_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ReceiverListProto_default_instance_._instance.get_mutable()->current_ = const_cast< ::com::android::server::am::BroadcastRecordProto*>(
      ::com::android::server::am::BroadcastRecordProto::internal_default_instance());
}
class ReceiverListProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceiverListProto>()._has_bits_);
  static const ::com::android::server::am::ProcessRecordProto& app(const ReceiverListProto* msg);
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::android::server::am::BroadcastRecordProto& current(const ReceiverListProto* msg);
  static void set_has_current(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linked_to_death(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hex_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::am::ProcessRecordProto&
ReceiverListProto::_Internal::app(const ReceiverListProto* msg) {
  return *msg->app_;
}
const ::com::android::server::am::BroadcastRecordProto&
ReceiverListProto::_Internal::current(const ReceiverListProto* msg) {
  return *msg->current_;
}
ReceiverListProto::ReceiverListProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ReceiverListProto)
}
ReceiverListProto::ReceiverListProto(const ReceiverListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hex_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hex_hash()) {
    hex_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_hash_);
  }
  if (from.has_app()) {
    app_ = new ::com::android::server::am::ProcessRecordProto(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from.has_current()) {
    current_ = new ::com::android::server::am::BroadcastRecordProto(*from.current_);
  } else {
    current_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&linked_to_death_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(linked_to_death_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ReceiverListProto)
}

void ReceiverListProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  hex_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linked_to_death_) -
      reinterpret_cast<char*>(&app_)) + sizeof(linked_to_death_));
}

ReceiverListProto::~ReceiverListProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ReceiverListProto)
  SharedDtor();
}

void ReceiverListProto::SharedDtor() {
  hex_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete current_;
}

void ReceiverListProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceiverListProto& ReceiverListProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceiverListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ReceiverListProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ReceiverListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hex_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(app_ != nullptr);
      app_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(current_ != nullptr);
      current_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linked_to_death_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(linked_to_death_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReceiverListProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.am.ProcessRecordProto app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_user(&has_bits);
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.BroadcastRecordProto current = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool linked_to_death = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_linked_to_death(&has_bits);
          linked_to_death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.BroadcastFilterProto filters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional string hex_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_hex_hash(), ptr, ctx, "com.android.server.am.ReceiverListProto.hex_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReceiverListProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ReceiverListProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.am.ProcessRecordProto app = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_user(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.BroadcastRecordProto current = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool linked_to_death = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_linked_to_death(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_to_death_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.BroadcastFilterProto filters = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hex_hash = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hex_hash()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ReceiverListProto.hex_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ReceiverListProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ReceiverListProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReceiverListProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ReceiverListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ProcessRecordProto app = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::app(this), output);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional int32 user = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->user(), output);
  }

  // optional .com.android.server.am.BroadcastRecordProto current = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::current(this), output);
  }

  // optional bool linked_to_death = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->linked_to_death(), output);
  }

  // repeated .com.android.server.am.BroadcastFilterProto filters = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->filters(static_cast<int>(i)),
      output);
  }

  // optional string hex_hash = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ReceiverListProto.hex_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hex_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ReceiverListProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiverListProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ReceiverListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ProcessRecordProto app = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::app(this), target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // optional int32 user = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->user(), target);
  }

  // optional .com.android.server.am.BroadcastRecordProto current = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::current(this), target);
  }

  // optional bool linked_to_death = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->linked_to_death(), target);
  }

  // repeated .com.android.server.am.BroadcastFilterProto filters = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->filters(static_cast<int>(i)), target);
  }

  // optional string hex_hash = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ReceiverListProto.hex_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->hex_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ReceiverListProto)
  return target;
}

size_t ReceiverListProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ReceiverListProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.BroadcastFilterProto filters = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string hex_hash = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hex_hash());
    }

    // optional .com.android.server.am.ProcessRecordProto app = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_);
    }

    // optional .com.android.server.am.BroadcastRecordProto current = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_);
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 user = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user());
    }

    // optional bool linked_to_death = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiverListProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ReceiverListProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiverListProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceiverListProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ReceiverListProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ReceiverListProto)
    MergeFrom(*source);
  }
}

void ReceiverListProto::MergeFrom(const ReceiverListProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ReceiverListProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hex_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_app()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.app());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_current()->::com::android::server::am::BroadcastRecordProto::MergeFrom(from.current());
    }
    if (cached_has_bits & 0x00000008u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000010u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000020u) {
      user_ = from.user_;
    }
    if (cached_has_bits & 0x00000040u) {
      linked_to_death_ = from.linked_to_death_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReceiverListProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ReceiverListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverListProto::CopyFrom(const ReceiverListProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ReceiverListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverListProto::IsInitialized() const {
  return true;
}

void ReceiverListProto::InternalSwap(ReceiverListProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&filters_)->InternalSwap(CastToBase(&other->filters_));
  hex_hash_.Swap(&other->hex_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_, other->app_);
  swap(current_, other->current_);
  swap(pid_, other->pid_);
  swap(uid_, other->uid_);
  swap(user_, other->user_);
  swap(linked_to_death_, other->linked_to_death_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiverListProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessRecordProto::InitAsDefaultInstance() {
}
class ProcessRecordProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessRecordProto>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isolated_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_persistent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lru_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ProcessRecordProto::ProcessRecordProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ProcessRecordProto)
}
ProcessRecordProto::ProcessRecordProto(const ProcessRecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lru_index_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(lru_index_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ProcessRecordProto)
}

void ProcessRecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lru_index_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(lru_index_));
}

ProcessRecordProto::~ProcessRecordProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ProcessRecordProto)
  SharedDtor();
}

void ProcessRecordProto::SharedDtor() {
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessRecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessRecordProto& ProcessRecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ProcessRecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ProcessRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    process_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lru_index_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(lru_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessRecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_process_name(), ptr, ctx, "com.android.server.am.ProcessRecordProto.process_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 isolated_app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_isolated_app_id(&has_bits);
          isolated_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool persistent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_persistent(&has_bits);
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lru_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lru_index(&has_bits);
          lru_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessRecordProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ProcessRecordProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessRecordProto.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 app_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_app_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 isolated_app_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_isolated_app_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &isolated_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persistent = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_persistent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persistent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lru_index = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_lru_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lru_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ProcessRecordProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ProcessRecordProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessRecordProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ProcessRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string process_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessRecordProto.process_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->process_name(), output);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional int32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->user_id(), output);
  }

  // optional int32 app_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->app_id(), output);
  }

  // optional int32 isolated_app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->isolated_app_id(), output);
  }

  // optional bool persistent = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->persistent(), output);
  }

  // optional int32 lru_index = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->lru_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ProcessRecordProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessRecordProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ProcessRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional string process_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessRecordProto.process_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->process_name(), target);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // optional int32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->user_id(), target);
  }

  // optional int32 app_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->app_id(), target);
  }

  // optional int32 isolated_app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->isolated_app_id(), target);
  }

  // optional bool persistent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->persistent(), target);
  }

  // optional int32 lru_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->lru_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ProcessRecordProto)
  return target;
}

size_t ProcessRecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ProcessRecordProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string process_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 app_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // optional int32 isolated_app_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->isolated_app_id());
    }

    // optional bool persistent = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 lru_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lru_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessRecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ProcessRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessRecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessRecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ProcessRecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ProcessRecordProto)
    MergeFrom(*source);
  }
}

void ProcessRecordProto::MergeFrom(const ProcessRecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ProcessRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      isolated_app_id_ = from.isolated_app_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      persistent_ = from.persistent_;
    }
    if (cached_has_bits & 0x00000080u) {
      lru_index_ = from.lru_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessRecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ProcessRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessRecordProto::CopyFrom(const ProcessRecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ProcessRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRecordProto::IsInitialized() const {
  return true;
}

void ProcessRecordProto::InternalSwap(ProcessRecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(uid_, other->uid_);
  swap(user_id_, other->user_id_);
  swap(app_id_, other->app_id_);
  swap(isolated_app_id_, other->isolated_app_id_);
  swap(persistent_, other->persistent_);
  swap(lru_index_, other->lru_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastRecordProto::InitAsDefaultInstance() {
}
class BroadcastRecordProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastRecordProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_intent_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BroadcastRecordProto::BroadcastRecordProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.BroadcastRecordProto)
}
BroadcastRecordProto::BroadcastRecordProto(const BroadcastRecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intent_action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_intent_action()) {
    intent_action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_action_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.BroadcastRecordProto)
}

void BroadcastRecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  intent_action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

BroadcastRecordProto::~BroadcastRecordProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.BroadcastRecordProto)
  SharedDtor();
}

void BroadcastRecordProto::SharedDtor() {
  intent_action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastRecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastRecordProto& BroadcastRecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BroadcastRecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.BroadcastRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    intent_action_.ClearNonDefaultToEmptyNoArena();
  }
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastRecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string intent_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_intent_action(), ptr, ctx, "com.android.server.am.BroadcastRecordProto.intent_action");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastRecordProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.BroadcastRecordProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string intent_action = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_intent_action()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->intent_action().data(), static_cast<int>(this->intent_action().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.BroadcastRecordProto.intent_action");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.BroadcastRecordProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.BroadcastRecordProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastRecordProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.BroadcastRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional string intent_action = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->intent_action().data(), static_cast<int>(this->intent_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastRecordProto.intent_action");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->intent_action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.BroadcastRecordProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastRecordProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.BroadcastRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // optional string intent_action = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->intent_action().data(), static_cast<int>(this->intent_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastRecordProto.intent_action");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->intent_action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.BroadcastRecordProto)
  return target;
}

size_t BroadcastRecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.BroadcastRecordProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string intent_action = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->intent_action());
    }

    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastRecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.BroadcastRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastRecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.BroadcastRecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.BroadcastRecordProto)
    MergeFrom(*source);
  }
}

void BroadcastRecordProto::MergeFrom(const BroadcastRecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.BroadcastRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      intent_action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_action_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BroadcastRecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.BroadcastRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRecordProto::CopyFrom(const BroadcastRecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.BroadcastRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRecordProto::IsInitialized() const {
  return true;
}

void BroadcastRecordProto::InternalSwap(BroadcastRecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intent_action_.Swap(&other->intent_action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastFilterProto::InitAsDefaultInstance() {
  ::com::android::server::am::_BroadcastFilterProto_default_instance_._instance.get_mutable()->intent_filter_ = const_cast< ::android::content::IntentFilterProto*>(
      ::android::content::IntentFilterProto::internal_default_instance());
}
class BroadcastFilterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastFilterProto>()._has_bits_);
  static const ::android::content::IntentFilterProto& intent_filter(const BroadcastFilterProto* msg);
  static void set_has_intent_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_required_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hex_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owning_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::content::IntentFilterProto&
BroadcastFilterProto::_Internal::intent_filter(const BroadcastFilterProto* msg) {
  return *msg->intent_filter_;
}
void BroadcastFilterProto::clear_intent_filter() {
  if (intent_filter_ != nullptr) intent_filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BroadcastFilterProto::BroadcastFilterProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.BroadcastFilterProto)
}
BroadcastFilterProto::BroadcastFilterProto(const BroadcastFilterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  required_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_required_permission()) {
    required_permission_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.required_permission_);
  }
  hex_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hex_hash()) {
    hex_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_hash_);
  }
  if (from.has_intent_filter()) {
    intent_filter_ = new ::android::content::IntentFilterProto(*from.intent_filter_);
  } else {
    intent_filter_ = nullptr;
  }
  owning_user_id_ = from.owning_user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.BroadcastFilterProto)
}

void BroadcastFilterProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  required_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hex_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intent_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owning_user_id_) -
      reinterpret_cast<char*>(&intent_filter_)) + sizeof(owning_user_id_));
}

BroadcastFilterProto::~BroadcastFilterProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.BroadcastFilterProto)
  SharedDtor();
}

void BroadcastFilterProto::SharedDtor() {
  required_permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hex_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_filter_;
}

void BroadcastFilterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastFilterProto& BroadcastFilterProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastFilterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BroadcastFilterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.BroadcastFilterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      required_permission_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hex_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(intent_filter_ != nullptr);
      intent_filter_->Clear();
    }
  }
  owning_user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastFilterProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.IntentFilterProto intent_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_intent_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string required_permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_required_permission(), ptr, ctx, "com.android.server.am.BroadcastFilterProto.required_permission");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hex_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_hex_hash(), ptr, ctx, "com.android.server.am.BroadcastFilterProto.hex_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 owning_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_owning_user_id(&has_bits);
          owning_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastFilterProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.BroadcastFilterProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.IntentFilterProto intent_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string required_permission = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_required_permission()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->required_permission().data(), static_cast<int>(this->required_permission().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.BroadcastFilterProto.required_permission");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hex_hash = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hex_hash()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.BroadcastFilterProto.hex_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 owning_user_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_owning_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &owning_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.BroadcastFilterProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.BroadcastFilterProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastFilterProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.BroadcastFilterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.IntentFilterProto intent_filter = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::intent_filter(this), output);
  }

  // optional string required_permission = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_permission().data(), static_cast<int>(this->required_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastFilterProto.required_permission");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->required_permission(), output);
  }

  // optional string hex_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastFilterProto.hex_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hex_hash(), output);
  }

  // optional int32 owning_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->owning_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.BroadcastFilterProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastFilterProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.BroadcastFilterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.IntentFilterProto intent_filter = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::intent_filter(this), target);
  }

  // optional string required_permission = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_permission().data(), static_cast<int>(this->required_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastFilterProto.required_permission");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->required_permission(), target);
  }

  // optional string hex_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastFilterProto.hex_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->hex_hash(), target);
  }

  // optional int32 owning_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->owning_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.BroadcastFilterProto)
  return target;
}

size_t BroadcastFilterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.BroadcastFilterProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string required_permission = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->required_permission());
    }

    // optional string hex_hash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hex_hash());
    }

    // optional .android.content.IntentFilterProto intent_filter = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_filter_);
    }

    // optional int32 owning_user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->owning_user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastFilterProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.BroadcastFilterProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastFilterProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastFilterProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.BroadcastFilterProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.BroadcastFilterProto)
    MergeFrom(*source);
  }
}

void BroadcastFilterProto::MergeFrom(const BroadcastFilterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.BroadcastFilterProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      required_permission_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.required_permission_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      hex_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_intent_filter()->::android::content::IntentFilterProto::MergeFrom(from.intent_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      owning_user_id_ = from.owning_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BroadcastFilterProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.BroadcastFilterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastFilterProto::CopyFrom(const BroadcastFilterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.BroadcastFilterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastFilterProto::IsInitialized() const {
  return true;
}

void BroadcastFilterProto::InternalSwap(BroadcastFilterProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  required_permission_.Swap(&other->required_permission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hex_hash_.Swap(&other->hex_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(intent_filter_, other->intent_filter_);
  swap(owning_user_id_, other->owning_user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastFilterProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastQueueProto_BroadcastSummary::InitAsDefaultInstance() {
  ::com::android::server::am::_BroadcastQueueProto_BroadcastSummary_default_instance_._instance.get_mutable()->intent_ = const_cast< ::android::content::IntentProto*>(
      ::android::content::IntentProto::internal_default_instance());
}
class BroadcastQueueProto_BroadcastSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastQueueProto_BroadcastSummary>()._has_bits_);
  static const ::android::content::IntentProto& intent(const BroadcastQueueProto_BroadcastSummary* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enqueue_clock_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dispatch_clock_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_finish_clock_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::content::IntentProto&
BroadcastQueueProto_BroadcastSummary::_Internal::intent(const BroadcastQueueProto_BroadcastSummary* msg) {
  return *msg->intent_;
}
void BroadcastQueueProto_BroadcastSummary::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BroadcastQueueProto_BroadcastSummary::BroadcastQueueProto_BroadcastSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
}
BroadcastQueueProto_BroadcastSummary::BroadcastQueueProto_BroadcastSummary(const BroadcastQueueProto_BroadcastSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intent()) {
    intent_ = new ::android::content::IntentProto(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  ::memcpy(&enqueue_clock_time_ms_, &from.enqueue_clock_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_clock_time_ms_) -
    reinterpret_cast<char*>(&enqueue_clock_time_ms_)) + sizeof(finish_clock_time_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
}

void BroadcastQueueProto_BroadcastSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_clock_time_ms_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(finish_clock_time_ms_));
}

BroadcastQueueProto_BroadcastSummary::~BroadcastQueueProto_BroadcastSummary() {
  // @@protoc_insertion_point(destructor:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  SharedDtor();
}

void BroadcastQueueProto_BroadcastSummary::SharedDtor() {
  if (this != internal_default_instance()) delete intent_;
}

void BroadcastQueueProto_BroadcastSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastQueueProto_BroadcastSummary& BroadcastQueueProto_BroadcastSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastQueueProto_BroadcastSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BroadcastQueueProto_BroadcastSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(intent_ != nullptr);
    intent_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&enqueue_clock_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finish_clock_time_ms_) -
        reinterpret_cast<char*>(&enqueue_clock_time_ms_)) + sizeof(finish_clock_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastQueueProto_BroadcastSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.IntentProto intent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 enqueue_clock_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enqueue_clock_time_ms(&has_bits);
          enqueue_clock_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 dispatch_clock_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dispatch_clock_time_ms(&has_bits);
          dispatch_clock_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 finish_clock_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_finish_clock_time_ms(&has_bits);
          finish_clock_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastQueueProto_BroadcastSummary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.IntentProto intent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 enqueue_clock_time_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_enqueue_clock_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &enqueue_clock_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dispatch_clock_time_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_dispatch_clock_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &dispatch_clock_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 finish_clock_time_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_finish_clock_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_clock_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastQueueProto_BroadcastSummary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.IntentProto intent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::intent(this), output);
  }

  // optional int64 enqueue_clock_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->enqueue_clock_time_ms(), output);
  }

  // optional int64 dispatch_clock_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->dispatch_clock_time_ms(), output);
  }

  // optional int64 finish_clock_time_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->finish_clock_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastQueueProto_BroadcastSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.IntentProto intent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::intent(this), target);
  }

  // optional int64 enqueue_clock_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->enqueue_clock_time_ms(), target);
  }

  // optional int64 dispatch_clock_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->dispatch_clock_time_ms(), target);
  }

  // optional int64 finish_clock_time_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->finish_clock_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  return target;
}

size_t BroadcastQueueProto_BroadcastSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.content.IntentProto intent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional int64 enqueue_clock_time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->enqueue_clock_time_ms());
    }

    // optional int64 dispatch_clock_time_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->dispatch_clock_time_ms());
    }

    // optional int64 finish_clock_time_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->finish_clock_time_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastQueueProto_BroadcastSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastQueueProto_BroadcastSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastQueueProto_BroadcastSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
    MergeFrom(*source);
  }
}

void BroadcastQueueProto_BroadcastSummary::MergeFrom(const BroadcastQueueProto_BroadcastSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_intent()->::android::content::IntentProto::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000002u) {
      enqueue_clock_time_ms_ = from.enqueue_clock_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      dispatch_clock_time_ms_ = from.dispatch_clock_time_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      finish_clock_time_ms_ = from.finish_clock_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BroadcastQueueProto_BroadcastSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastQueueProto_BroadcastSummary::CopyFrom(const BroadcastQueueProto_BroadcastSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastQueueProto_BroadcastSummary::IsInitialized() const {
  return true;
}

void BroadcastQueueProto_BroadcastSummary::InternalSwap(BroadcastQueueProto_BroadcastSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(intent_, other->intent_);
  swap(enqueue_clock_time_ms_, other->enqueue_clock_time_ms_);
  swap(dispatch_clock_time_ms_, other->dispatch_clock_time_ms_);
  swap(finish_clock_time_ms_, other->finish_clock_time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastQueueProto_BroadcastSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastQueueProto::InitAsDefaultInstance() {
  ::com::android::server::am::_BroadcastQueueProto_default_instance_._instance.get_mutable()->pending_broadcast_ = const_cast< ::com::android::server::am::BroadcastRecordProto*>(
      ::com::android::server::am::BroadcastRecordProto::internal_default_instance());
}
class BroadcastQueueProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastQueueProto>()._has_bits_);
  static void set_has_queue_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::am::BroadcastRecordProto& pending_broadcast(const BroadcastQueueProto* msg);
  static void set_has_pending_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::am::BroadcastRecordProto&
BroadcastQueueProto::_Internal::pending_broadcast(const BroadcastQueueProto* msg) {
  return *msg->pending_broadcast_;
}
BroadcastQueueProto::BroadcastQueueProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.BroadcastQueueProto)
}
BroadcastQueueProto::BroadcastQueueProto(const BroadcastQueueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      parallel_broadcasts_(from.parallel_broadcasts_),
      ordered_broadcasts_(from.ordered_broadcasts_),
      historical_broadcasts_(from.historical_broadcasts_),
      historical_broadcasts_summary_(from.historical_broadcasts_summary_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_queue_name()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.has_pending_broadcast()) {
    pending_broadcast_ = new ::com::android::server::am::BroadcastRecordProto(*from.pending_broadcast_);
  } else {
    pending_broadcast_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.BroadcastQueueProto)
}

void BroadcastQueueProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_broadcast_ = nullptr;
}

BroadcastQueueProto::~BroadcastQueueProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.BroadcastQueueProto)
  SharedDtor();
}

void BroadcastQueueProto::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pending_broadcast_;
}

void BroadcastQueueProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastQueueProto& BroadcastQueueProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastQueueProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BroadcastQueueProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.BroadcastQueueProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parallel_broadcasts_.Clear();
  ordered_broadcasts_.Clear();
  historical_broadcasts_.Clear();
  historical_broadcasts_summary_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      queue_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pending_broadcast_ != nullptr);
      pending_broadcast_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastQueueProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_queue_name(), ptr, ctx, "com.android.server.am.BroadcastQueueProto.queue_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.BroadcastRecordProto parallel_broadcasts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_parallel_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.BroadcastRecordProto ordered_broadcasts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ordered_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.BroadcastRecordProto pending_broadcast = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_pending_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.BroadcastRecordProto historical_broadcasts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_historical_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.BroadcastQueueProto.BroadcastSummary historical_broadcasts_summary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_historical_broadcasts_summary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastQueueProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.BroadcastQueueProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string queue_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queue_name().data(), static_cast<int>(this->queue_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.BroadcastQueueProto.queue_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.BroadcastRecordProto parallel_broadcasts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_parallel_broadcasts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.BroadcastRecordProto ordered_broadcasts = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ordered_broadcasts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.BroadcastRecordProto pending_broadcast = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_broadcast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.BroadcastRecordProto historical_broadcasts = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_historical_broadcasts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.BroadcastQueueProto.BroadcastSummary historical_broadcasts_summary = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_historical_broadcasts_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.BroadcastQueueProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.BroadcastQueueProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastQueueProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.BroadcastQueueProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string queue_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queue_name().data(), static_cast<int>(this->queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastQueueProto.queue_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queue_name(), output);
  }

  // repeated .com.android.server.am.BroadcastRecordProto parallel_broadcasts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parallel_broadcasts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->parallel_broadcasts(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.BroadcastRecordProto ordered_broadcasts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ordered_broadcasts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->ordered_broadcasts(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.am.BroadcastRecordProto pending_broadcast = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::pending_broadcast(this), output);
  }

  // repeated .com.android.server.am.BroadcastRecordProto historical_broadcasts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_broadcasts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->historical_broadcasts(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.BroadcastQueueProto.BroadcastSummary historical_broadcasts_summary = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_broadcasts_summary_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->historical_broadcasts_summary(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.BroadcastQueueProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastQueueProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.BroadcastQueueProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string queue_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queue_name().data(), static_cast<int>(this->queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.BroadcastQueueProto.queue_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->queue_name(), target);
  }

  // repeated .com.android.server.am.BroadcastRecordProto parallel_broadcasts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parallel_broadcasts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->parallel_broadcasts(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.BroadcastRecordProto ordered_broadcasts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ordered_broadcasts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ordered_broadcasts(static_cast<int>(i)), target);
  }

  // optional .com.android.server.am.BroadcastRecordProto pending_broadcast = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::pending_broadcast(this), target);
  }

  // repeated .com.android.server.am.BroadcastRecordProto historical_broadcasts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_broadcasts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->historical_broadcasts(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.BroadcastQueueProto.BroadcastSummary historical_broadcasts_summary = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_broadcasts_summary_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->historical_broadcasts_summary(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.BroadcastQueueProto)
  return target;
}

size_t BroadcastQueueProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.BroadcastQueueProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.BroadcastRecordProto parallel_broadcasts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->parallel_broadcasts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->parallel_broadcasts(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.BroadcastRecordProto ordered_broadcasts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ordered_broadcasts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ordered_broadcasts(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.BroadcastRecordProto historical_broadcasts = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->historical_broadcasts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->historical_broadcasts(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.BroadcastQueueProto.BroadcastSummary historical_broadcasts_summary = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->historical_broadcasts_summary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->historical_broadcasts_summary(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string queue_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->queue_name());
    }

    // optional .com.android.server.am.BroadcastRecordProto pending_broadcast = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_broadcast_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastQueueProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.BroadcastQueueProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastQueueProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastQueueProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.BroadcastQueueProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.BroadcastQueueProto)
    MergeFrom(*source);
  }
}

void BroadcastQueueProto::MergeFrom(const BroadcastQueueProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.BroadcastQueueProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parallel_broadcasts_.MergeFrom(from.parallel_broadcasts_);
  ordered_broadcasts_.MergeFrom(from.ordered_broadcasts_);
  historical_broadcasts_.MergeFrom(from.historical_broadcasts_);
  historical_broadcasts_summary_.MergeFrom(from.historical_broadcasts_summary_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pending_broadcast()->::com::android::server::am::BroadcastRecordProto::MergeFrom(from.pending_broadcast());
    }
  }
}

void BroadcastQueueProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.BroadcastQueueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastQueueProto::CopyFrom(const BroadcastQueueProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.BroadcastQueueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastQueueProto::IsInitialized() const {
  return true;
}

void BroadcastQueueProto::InternalSwap(BroadcastQueueProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&parallel_broadcasts_)->InternalSwap(CastToBase(&other->parallel_broadcasts_));
  CastToBase(&ordered_broadcasts_)->InternalSwap(CastToBase(&other->ordered_broadcasts_));
  CastToBase(&historical_broadcasts_)->InternalSwap(CastToBase(&other->historical_broadcasts_));
  CastToBase(&historical_broadcasts_summary_)->InternalSwap(CastToBase(&other->historical_broadcasts_summary_));
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pending_broadcast_, other->pending_broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastQueueProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_ProcessMemory_MemoryInfo::InitAsDefaultInstance() {
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_.dirty_swap_kb_ = 0;
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_.dirty_swap_pss_kb_ = 0;
}
class MemInfoDumpProto_ProcessMemory_MemoryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_ProcessMemory_MemoryInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clean_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shared_dirty_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_private_dirty_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shared_clean_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_private_clean_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MemInfoDumpProto_ProcessMemory_MemoryInfo::MemInfoDumpProto_ProcessMemory_MemoryInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
}
MemInfoDumpProto_ProcessMemory_MemoryInfo::MemInfoDumpProto_ProcessMemory_MemoryInfo(const MemInfoDumpProto_ProcessMemory_MemoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&total_pss_kb_, &from.total_pss_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_rss_kb_) -
    reinterpret_cast<char*>(&total_pss_kb_)) + sizeof(total_rss_kb_));
  clear_has_dirty_swap();
  switch (from.dirty_swap_case()) {
    case kDirtySwapKb: {
      set_dirty_swap_kb(from.dirty_swap_kb());
      break;
    }
    case kDirtySwapPssKb: {
      set_dirty_swap_pss_kb(from.dirty_swap_pss_kb());
      break;
    }
    case DIRTY_SWAP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_pss_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_rss_kb_) -
      reinterpret_cast<char*>(&total_pss_kb_)) + sizeof(total_rss_kb_));
  clear_has_dirty_swap();
}

MemInfoDumpProto_ProcessMemory_MemoryInfo::~MemInfoDumpProto_ProcessMemory_MemoryInfo() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  SharedDtor();
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_dirty_swap()) {
    clear_dirty_swap();
  }
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_ProcessMemory_MemoryInfo& MemInfoDumpProto_ProcessMemory_MemoryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_ProcessMemory_MemoryInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_dirty_swap() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  switch (dirty_swap_case()) {
    case kDirtySwapKb: {
      // No need to clear
      break;
    }
    case kDirtySwapPssKb: {
      // No need to clear
      break;
    }
    case DIRTY_SWAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DIRTY_SWAP_NOT_SET;
}


void MemInfoDumpProto_ProcessMemory_MemoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&total_pss_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_rss_kb_) -
        reinterpret_cast<char*>(&total_pss_kb_)) + sizeof(total_rss_kb_));
  }
  clear_dirty_swap();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_ProcessMemory_MemoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_pss_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_pss_kb(&has_bits);
          total_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clean_pss_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clean_pss_kb(&has_bits);
          clean_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shared_dirty_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_shared_dirty_kb(&has_bits);
          shared_dirty_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 private_dirty_kb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_private_dirty_kb(&has_bits);
          private_dirty_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shared_clean_kb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_shared_clean_kb(&has_bits);
          shared_clean_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 private_clean_kb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_private_clean_kb(&has_bits);
          private_clean_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dirty_swap_kb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          set_dirty_swap_kb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dirty_swap_pss_kb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          set_dirty_swap_pss_kb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_rss_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_rss_kb(&has_bits);
          total_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_ProcessMemory_MemoryInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_pss_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clean_pss_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_clean_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &clean_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shared_dirty_kb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_shared_dirty_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_dirty_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 private_dirty_kb = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_private_dirty_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &private_dirty_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shared_clean_kb = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_shared_clean_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_clean_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 private_clean_kb = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_private_clean_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &private_clean_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dirty_swap_kb = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          clear_dirty_swap();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dirty_swap_.dirty_swap_kb_)));
          set_has_dirty_swap_kb();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dirty_swap_pss_kb = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          clear_dirty_swap();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dirty_swap_.dirty_swap_pss_kb_)));
          set_has_dirty_swap_pss_kb();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_rss_kb = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_total_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_ProcessMemory_MemoryInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 total_pss_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->total_pss_kb(), output);
  }

  // optional int32 clean_pss_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->clean_pss_kb(), output);
  }

  // optional int32 shared_dirty_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->shared_dirty_kb(), output);
  }

  // optional int32 private_dirty_kb = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->private_dirty_kb(), output);
  }

  // optional int32 shared_clean_kb = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->shared_clean_kb(), output);
  }

  // optional int32 private_clean_kb = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->private_clean_kb(), output);
  }

  switch (dirty_swap_case()) {
    case kDirtySwapKb:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->dirty_swap_kb(), output);
      break;
    case kDirtySwapPssKb:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->dirty_swap_pss_kb(), output);
      break;
    default: ;
  }
  // optional int32 total_rss_kb = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->total_rss_kb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_ProcessMemory_MemoryInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 total_pss_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->total_pss_kb(), target);
  }

  // optional int32 clean_pss_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->clean_pss_kb(), target);
  }

  // optional int32 shared_dirty_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->shared_dirty_kb(), target);
  }

  // optional int32 private_dirty_kb = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->private_dirty_kb(), target);
  }

  // optional int32 shared_clean_kb = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->shared_clean_kb(), target);
  }

  // optional int32 private_clean_kb = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->private_clean_kb(), target);
  }

  switch (dirty_swap_case()) {
    case kDirtySwapKb:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->dirty_swap_kb(), target);
      break;
    case kDirtySwapPssKb:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->dirty_swap_pss_kb(), target);
      break;
    default: ;
  }
  // optional int32 total_rss_kb = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->total_rss_kb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  return target;
}

size_t MemInfoDumpProto_ProcessMemory_MemoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 total_pss_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_pss_kb());
    }

    // optional int32 clean_pss_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->clean_pss_kb());
    }

    // optional int32 shared_dirty_kb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->shared_dirty_kb());
    }

    // optional int32 private_dirty_kb = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->private_dirty_kb());
    }

    // optional int32 shared_clean_kb = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->shared_clean_kb());
    }

    // optional int32 private_clean_kb = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->private_clean_kb());
    }

    // optional int32 total_rss_kb = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_rss_kb());
    }

  }
  switch (dirty_swap_case()) {
    // optional int32 dirty_swap_kb = 8;
    case kDirtySwapKb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dirty_swap_kb());
      break;
    }
    // optional int32 dirty_swap_pss_kb = 9;
    case kDirtySwapPssKb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dirty_swap_pss_kb());
      break;
    }
    case DIRTY_SWAP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_ProcessMemory_MemoryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_ProcessMemory_MemoryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::MergeFrom(const MemInfoDumpProto_ProcessMemory_MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      total_pss_kb_ = from.total_pss_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      clean_pss_kb_ = from.clean_pss_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      shared_dirty_kb_ = from.shared_dirty_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      private_dirty_kb_ = from.private_dirty_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      shared_clean_kb_ = from.shared_clean_kb_;
    }
    if (cached_has_bits & 0x00000040u) {
      private_clean_kb_ = from.private_clean_kb_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_rss_kb_ = from.total_rss_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.dirty_swap_case()) {
    case kDirtySwapKb: {
      set_dirty_swap_kb(from.dirty_swap_kb());
      break;
    }
    case kDirtySwapPssKb: {
      set_dirty_swap_pss_kb(from.dirty_swap_pss_kb());
      break;
    }
    case DIRTY_SWAP_NOT_SET: {
      break;
    }
  }
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::CopyFrom(const MemInfoDumpProto_ProcessMemory_MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_ProcessMemory_MemoryInfo::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_ProcessMemory_MemoryInfo::InternalSwap(MemInfoDumpProto_ProcessMemory_MemoryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_pss_kb_, other->total_pss_kb_);
  swap(clean_pss_kb_, other->clean_pss_kb_);
  swap(shared_dirty_kb_, other->shared_dirty_kb_);
  swap(private_dirty_kb_, other->private_dirty_kb_);
  swap(shared_clean_kb_, other->shared_clean_kb_);
  swap(private_clean_kb_, other->private_clean_kb_);
  swap(total_rss_kb_, other->total_rss_kb_);
  swap(dirty_swap_, other->dirty_swap_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_ProcessMemory_MemoryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_ProcessMemory_HeapInfo::InitAsDefaultInstance() {
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_._instance.get_mutable()->mem_info_ = const_cast< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo*>(
      ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo::internal_default_instance());
}
class MemInfoDumpProto_ProcessMemory_HeapInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_ProcessMemory_HeapInfo>()._has_bits_);
  static const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& mem_info(const MemInfoDumpProto_ProcessMemory_HeapInfo* msg);
  static void set_has_mem_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heap_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heap_alloc_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heap_free_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo&
MemInfoDumpProto_ProcessMemory_HeapInfo::_Internal::mem_info(const MemInfoDumpProto_ProcessMemory_HeapInfo* msg) {
  return *msg->mem_info_;
}
MemInfoDumpProto_ProcessMemory_HeapInfo::MemInfoDumpProto_ProcessMemory_HeapInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
}
MemInfoDumpProto_ProcessMemory_HeapInfo::MemInfoDumpProto_ProcessMemory_HeapInfo(const MemInfoDumpProto_ProcessMemory_HeapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mem_info()) {
    mem_info_ = new ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo(*from.mem_info_);
  } else {
    mem_info_ = nullptr;
  }
  ::memcpy(&heap_size_kb_, &from.heap_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&heap_free_kb_) -
    reinterpret_cast<char*>(&heap_size_kb_)) + sizeof(heap_free_kb_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&mem_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heap_free_kb_) -
      reinterpret_cast<char*>(&mem_info_)) + sizeof(heap_free_kb_));
}

MemInfoDumpProto_ProcessMemory_HeapInfo::~MemInfoDumpProto_ProcessMemory_HeapInfo() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  SharedDtor();
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete mem_info_;
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_ProcessMemory_HeapInfo& MemInfoDumpProto_ProcessMemory_HeapInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_ProcessMemory_HeapInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_ProcessMemory_HeapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mem_info_ != nullptr);
    mem_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&heap_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heap_free_kb_) -
        reinterpret_cast<char*>(&heap_size_kb_)) + sizeof(heap_free_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_ProcessMemory_HeapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo mem_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mem_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 heap_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heap_size_kb(&has_bits);
          heap_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 heap_alloc_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heap_alloc_kb(&has_bits);
          heap_alloc_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 heap_free_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_heap_free_kb(&has_bits);
          heap_free_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_ProcessMemory_HeapInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo mem_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mem_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heap_size_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_heap_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &heap_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heap_alloc_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_heap_alloc_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &heap_alloc_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heap_free_kb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_heap_free_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &heap_free_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_ProcessMemory_HeapInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo mem_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::mem_info(this), output);
  }

  // optional int32 heap_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->heap_size_kb(), output);
  }

  // optional int32 heap_alloc_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->heap_alloc_kb(), output);
  }

  // optional int32 heap_free_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->heap_free_kb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_ProcessMemory_HeapInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo mem_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::mem_info(this), target);
  }

  // optional int32 heap_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->heap_size_kb(), target);
  }

  // optional int32 heap_alloc_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->heap_alloc_kb(), target);
  }

  // optional int32 heap_free_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->heap_free_kb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  return target;
}

size_t MemInfoDumpProto_ProcessMemory_HeapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo mem_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mem_info_);
    }

    // optional int32 heap_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->heap_size_kb());
    }

    // optional int32 heap_alloc_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->heap_alloc_kb());
    }

    // optional int32 heap_free_kb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->heap_free_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_ProcessMemory_HeapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_ProcessMemory_HeapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::MergeFrom(const MemInfoDumpProto_ProcessMemory_HeapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mem_info()->::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo::MergeFrom(from.mem_info());
    }
    if (cached_has_bits & 0x00000002u) {
      heap_size_kb_ = from.heap_size_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      heap_alloc_kb_ = from.heap_alloc_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      heap_free_kb_ = from.heap_free_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::CopyFrom(const MemInfoDumpProto_ProcessMemory_HeapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_ProcessMemory_HeapInfo::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_ProcessMemory_HeapInfo::InternalSwap(MemInfoDumpProto_ProcessMemory_HeapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mem_info_, other->mem_info_);
  swap(heap_size_kb_, other->heap_size_kb_);
  swap(heap_alloc_kb_, other->heap_alloc_kb_);
  swap(heap_free_kb_, other->heap_free_kb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_ProcessMemory_HeapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_ProcessMemory_AppSummary::InitAsDefaultInstance() {
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_.total_swap_pss_ = 0;
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_.total_swap_kb_ = 0;
}
class MemInfoDumpProto_ProcessMemory_AppSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_ProcessMemory_AppSummary>()._has_bits_);
  static void set_has_java_heap_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_native_heap_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stack_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_graphics_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_private_other_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_system_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_java_heap_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_native_heap_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_code_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stack_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_graphics_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_unknown_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

MemInfoDumpProto_ProcessMemory_AppSummary::MemInfoDumpProto_ProcessMemory_AppSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
}
MemInfoDumpProto_ProcessMemory_AppSummary::MemInfoDumpProto_ProcessMemory_AppSummary(const MemInfoDumpProto_ProcessMemory_AppSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&java_heap_pss_kb_, &from.java_heap_pss_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_rss_kb_) -
    reinterpret_cast<char*>(&java_heap_pss_kb_)) + sizeof(unknown_rss_kb_));
  clear_has_total_swap();
  switch (from.total_swap_case()) {
    case kTotalSwapPss: {
      set_total_swap_pss(from.total_swap_pss());
      break;
    }
    case kTotalSwapKb: {
      set_total_swap_kb(from.total_swap_kb());
      break;
    }
    case TOTAL_SWAP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
}

void MemInfoDumpProto_ProcessMemory_AppSummary::SharedCtor() {
  ::memset(&java_heap_pss_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_rss_kb_) -
      reinterpret_cast<char*>(&java_heap_pss_kb_)) + sizeof(unknown_rss_kb_));
  clear_has_total_swap();
}

MemInfoDumpProto_ProcessMemory_AppSummary::~MemInfoDumpProto_ProcessMemory_AppSummary() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  SharedDtor();
}

void MemInfoDumpProto_ProcessMemory_AppSummary::SharedDtor() {
  if (has_total_swap()) {
    clear_total_swap();
  }
}

void MemInfoDumpProto_ProcessMemory_AppSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_ProcessMemory_AppSummary& MemInfoDumpProto_ProcessMemory_AppSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_ProcessMemory_AppSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_ProcessMemory_AppSummary::clear_total_swap() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  switch (total_swap_case()) {
    case kTotalSwapPss: {
      // No need to clear
      break;
    }
    case kTotalSwapKb: {
      // No need to clear
      break;
    }
    case TOTAL_SWAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TOTAL_SWAP_NOT_SET;
}


void MemInfoDumpProto_ProcessMemory_AppSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&java_heap_pss_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&java_heap_rss_kb_) -
        reinterpret_cast<char*>(&java_heap_pss_kb_)) + sizeof(java_heap_rss_kb_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&native_heap_rss_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unknown_rss_kb_) -
        reinterpret_cast<char*>(&native_heap_rss_kb_)) + sizeof(unknown_rss_kb_));
  }
  clear_total_swap();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_ProcessMemory_AppSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 java_heap_pss_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_java_heap_pss_kb(&has_bits);
          java_heap_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 native_heap_pss_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_native_heap_pss_kb(&has_bits);
          native_heap_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 code_pss_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_code_pss_kb(&has_bits);
          code_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stack_pss_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stack_pss_kb(&has_bits);
          stack_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 graphics_pss_kb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_graphics_pss_kb(&has_bits);
          graphics_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 private_other_pss_kb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_private_other_pss_kb(&has_bits);
          private_other_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 system_pss_kb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_system_pss_kb(&has_bits);
          system_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_swap_pss = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          set_total_swap_pss(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_swap_kb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          set_total_swap_kb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 java_heap_rss_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_java_heap_rss_kb(&has_bits);
          java_heap_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 native_heap_rss_kb = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_native_heap_rss_kb(&has_bits);
          native_heap_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 code_rss_kb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_code_rss_kb(&has_bits);
          code_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stack_rss_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_stack_rss_kb(&has_bits);
          stack_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 graphics_rss_kb = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_graphics_rss_kb(&has_bits);
          graphics_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unknown_rss_kb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_unknown_rss_kb(&has_bits);
          unknown_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_ProcessMemory_AppSummary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 java_heap_pss_kb = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_java_heap_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &java_heap_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 native_heap_pss_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_native_heap_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &native_heap_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 code_pss_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_code_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stack_pss_kb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stack_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 graphics_pss_kb = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_graphics_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &graphics_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 private_other_pss_kb = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_private_other_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &private_other_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 system_pss_kb = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_system_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &system_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_swap_pss = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          clear_total_swap();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_swap_.total_swap_pss_)));
          set_has_total_swap_pss();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_swap_kb = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          clear_total_swap();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_swap_.total_swap_kb_)));
          set_has_total_swap_kb();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 java_heap_rss_kb = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_java_heap_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &java_heap_rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 native_heap_rss_kb = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_native_heap_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &native_heap_rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 code_rss_kb = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_code_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stack_rss_kb = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_stack_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 graphics_rss_kb = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_graphics_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &graphics_rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unknown_rss_kb = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_unknown_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_ProcessMemory_AppSummary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 java_heap_pss_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->java_heap_pss_kb(), output);
  }

  // optional int32 native_heap_pss_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->native_heap_pss_kb(), output);
  }

  // optional int32 code_pss_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->code_pss_kb(), output);
  }

  // optional int32 stack_pss_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->stack_pss_kb(), output);
  }

  // optional int32 graphics_pss_kb = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->graphics_pss_kb(), output);
  }

  // optional int32 private_other_pss_kb = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->private_other_pss_kb(), output);
  }

  // optional int32 system_pss_kb = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->system_pss_kb(), output);
  }

  switch (total_swap_case()) {
    case kTotalSwapPss:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->total_swap_pss(), output);
      break;
    case kTotalSwapKb:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->total_swap_kb(), output);
      break;
    default: ;
  }
  // optional int32 java_heap_rss_kb = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->java_heap_rss_kb(), output);
  }

  // optional int32 native_heap_rss_kb = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->native_heap_rss_kb(), output);
  }

  // optional int32 code_rss_kb = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->code_rss_kb(), output);
  }

  // optional int32 stack_rss_kb = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->stack_rss_kb(), output);
  }

  // optional int32 graphics_rss_kb = 14;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->graphics_rss_kb(), output);
  }

  // optional int32 unknown_rss_kb = 15;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->unknown_rss_kb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_ProcessMemory_AppSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 java_heap_pss_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->java_heap_pss_kb(), target);
  }

  // optional int32 native_heap_pss_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->native_heap_pss_kb(), target);
  }

  // optional int32 code_pss_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->code_pss_kb(), target);
  }

  // optional int32 stack_pss_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->stack_pss_kb(), target);
  }

  // optional int32 graphics_pss_kb = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->graphics_pss_kb(), target);
  }

  // optional int32 private_other_pss_kb = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->private_other_pss_kb(), target);
  }

  // optional int32 system_pss_kb = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->system_pss_kb(), target);
  }

  switch (total_swap_case()) {
    case kTotalSwapPss:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->total_swap_pss(), target);
      break;
    case kTotalSwapKb:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->total_swap_kb(), target);
      break;
    default: ;
  }
  // optional int32 java_heap_rss_kb = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->java_heap_rss_kb(), target);
  }

  // optional int32 native_heap_rss_kb = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->native_heap_rss_kb(), target);
  }

  // optional int32 code_rss_kb = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->code_rss_kb(), target);
  }

  // optional int32 stack_rss_kb = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->stack_rss_kb(), target);
  }

  // optional int32 graphics_rss_kb = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->graphics_rss_kb(), target);
  }

  // optional int32 unknown_rss_kb = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->unknown_rss_kb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  return target;
}

size_t MemInfoDumpProto_ProcessMemory_AppSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 java_heap_pss_kb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->java_heap_pss_kb());
    }

    // optional int32 native_heap_pss_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->native_heap_pss_kb());
    }

    // optional int32 code_pss_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->code_pss_kb());
    }

    // optional int32 stack_pss_kb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->stack_pss_kb());
    }

    // optional int32 graphics_pss_kb = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->graphics_pss_kb());
    }

    // optional int32 private_other_pss_kb = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->private_other_pss_kb());
    }

    // optional int32 system_pss_kb = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->system_pss_kb());
    }

    // optional int32 java_heap_rss_kb = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->java_heap_rss_kb());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 native_heap_rss_kb = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->native_heap_rss_kb());
    }

    // optional int32 code_rss_kb = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->code_rss_kb());
    }

    // optional int32 stack_rss_kb = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->stack_rss_kb());
    }

    // optional int32 graphics_rss_kb = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->graphics_rss_kb());
    }

    // optional int32 unknown_rss_kb = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->unknown_rss_kb());
    }

  }
  switch (total_swap_case()) {
    // optional int32 total_swap_pss = 8;
    case kTotalSwapPss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_swap_pss());
      break;
    }
    // optional int32 total_swap_kb = 9;
    case kTotalSwapKb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_swap_kb());
      break;
    }
    case TOTAL_SWAP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_ProcessMemory_AppSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_ProcessMemory_AppSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_ProcessMemory_AppSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_ProcessMemory_AppSummary::MergeFrom(const MemInfoDumpProto_ProcessMemory_AppSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      java_heap_pss_kb_ = from.java_heap_pss_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      native_heap_pss_kb_ = from.native_heap_pss_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_pss_kb_ = from.code_pss_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      stack_pss_kb_ = from.stack_pss_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      graphics_pss_kb_ = from.graphics_pss_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      private_other_pss_kb_ = from.private_other_pss_kb_;
    }
    if (cached_has_bits & 0x00000040u) {
      system_pss_kb_ = from.system_pss_kb_;
    }
    if (cached_has_bits & 0x00000080u) {
      java_heap_rss_kb_ = from.java_heap_rss_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      native_heap_rss_kb_ = from.native_heap_rss_kb_;
    }
    if (cached_has_bits & 0x00000200u) {
      code_rss_kb_ = from.code_rss_kb_;
    }
    if (cached_has_bits & 0x00000400u) {
      stack_rss_kb_ = from.stack_rss_kb_;
    }
    if (cached_has_bits & 0x00000800u) {
      graphics_rss_kb_ = from.graphics_rss_kb_;
    }
    if (cached_has_bits & 0x00001000u) {
      unknown_rss_kb_ = from.unknown_rss_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.total_swap_case()) {
    case kTotalSwapPss: {
      set_total_swap_pss(from.total_swap_pss());
      break;
    }
    case kTotalSwapKb: {
      set_total_swap_kb(from.total_swap_kb());
      break;
    }
    case TOTAL_SWAP_NOT_SET: {
      break;
    }
  }
}

void MemInfoDumpProto_ProcessMemory_AppSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_ProcessMemory_AppSummary::CopyFrom(const MemInfoDumpProto_ProcessMemory_AppSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_ProcessMemory_AppSummary::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_ProcessMemory_AppSummary::InternalSwap(MemInfoDumpProto_ProcessMemory_AppSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(java_heap_pss_kb_, other->java_heap_pss_kb_);
  swap(native_heap_pss_kb_, other->native_heap_pss_kb_);
  swap(code_pss_kb_, other->code_pss_kb_);
  swap(stack_pss_kb_, other->stack_pss_kb_);
  swap(graphics_pss_kb_, other->graphics_pss_kb_);
  swap(private_other_pss_kb_, other->private_other_pss_kb_);
  swap(system_pss_kb_, other->system_pss_kb_);
  swap(java_heap_rss_kb_, other->java_heap_rss_kb_);
  swap(native_heap_rss_kb_, other->native_heap_rss_kb_);
  swap(code_rss_kb_, other->code_rss_kb_);
  swap(stack_rss_kb_, other->stack_rss_kb_);
  swap(graphics_rss_kb_, other->graphics_rss_kb_);
  swap(unknown_rss_kb_, other->unknown_rss_kb_);
  swap(total_swap_, other->total_swap_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_ProcessMemory_AppSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_ProcessMemory::InitAsDefaultInstance() {
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_._instance.get_mutable()->native_heap_ = const_cast< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo*>(
      ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo::internal_default_instance());
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_._instance.get_mutable()->dalvik_heap_ = const_cast< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo*>(
      ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo::internal_default_instance());
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_._instance.get_mutable()->unknown_heap_ = const_cast< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo*>(
      ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo::internal_default_instance());
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_._instance.get_mutable()->total_heap_ = const_cast< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo*>(
      ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo::internal_default_instance());
  ::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_._instance.get_mutable()->app_summary_ = const_cast< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary*>(
      ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary::internal_default_instance());
}
class MemInfoDumpProto_ProcessMemory::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_ProcessMemory>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& native_heap(const MemInfoDumpProto_ProcessMemory* msg);
  static void set_has_native_heap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& dalvik_heap(const MemInfoDumpProto_ProcessMemory* msg);
  static void set_has_dalvik_heap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& unknown_heap(const MemInfoDumpProto_ProcessMemory* msg);
  static void set_has_unknown_heap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& total_heap(const MemInfoDumpProto_ProcessMemory* msg);
  static void set_has_total_heap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary& app_summary(const MemInfoDumpProto_ProcessMemory* msg);
  static void set_has_app_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo&
MemInfoDumpProto_ProcessMemory::_Internal::native_heap(const MemInfoDumpProto_ProcessMemory* msg) {
  return *msg->native_heap_;
}
const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo&
MemInfoDumpProto_ProcessMemory::_Internal::dalvik_heap(const MemInfoDumpProto_ProcessMemory* msg) {
  return *msg->dalvik_heap_;
}
const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo&
MemInfoDumpProto_ProcessMemory::_Internal::unknown_heap(const MemInfoDumpProto_ProcessMemory* msg) {
  return *msg->unknown_heap_;
}
const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo&
MemInfoDumpProto_ProcessMemory::_Internal::total_heap(const MemInfoDumpProto_ProcessMemory* msg) {
  return *msg->total_heap_;
}
const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary&
MemInfoDumpProto_ProcessMemory::_Internal::app_summary(const MemInfoDumpProto_ProcessMemory* msg) {
  return *msg->app_summary_;
}
MemInfoDumpProto_ProcessMemory::MemInfoDumpProto_ProcessMemory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory)
}
MemInfoDumpProto_ProcessMemory::MemInfoDumpProto_ProcessMemory(const MemInfoDumpProto_ProcessMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      other_heaps_(from.other_heaps_),
      dalvik_details_(from.dalvik_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  if (from.has_native_heap()) {
    native_heap_ = new ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo(*from.native_heap_);
  } else {
    native_heap_ = nullptr;
  }
  if (from.has_dalvik_heap()) {
    dalvik_heap_ = new ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo(*from.dalvik_heap_);
  } else {
    dalvik_heap_ = nullptr;
  }
  if (from.has_unknown_heap()) {
    unknown_heap_ = new ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo(*from.unknown_heap_);
  } else {
    unknown_heap_ = nullptr;
  }
  if (from.has_total_heap()) {
    total_heap_ = new ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo(*from.total_heap_);
  } else {
    total_heap_ = nullptr;
  }
  if (from.has_app_summary()) {
    app_summary_ = new ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary(*from.app_summary_);
  } else {
    app_summary_ = nullptr;
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.ProcessMemory)
}

void MemInfoDumpProto_ProcessMemory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&native_heap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&native_heap_)) + sizeof(pid_));
}

MemInfoDumpProto_ProcessMemory::~MemInfoDumpProto_ProcessMemory() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  SharedDtor();
}

void MemInfoDumpProto_ProcessMemory::SharedDtor() {
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete native_heap_;
  if (this != internal_default_instance()) delete dalvik_heap_;
  if (this != internal_default_instance()) delete unknown_heap_;
  if (this != internal_default_instance()) delete total_heap_;
  if (this != internal_default_instance()) delete app_summary_;
}

void MemInfoDumpProto_ProcessMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_ProcessMemory& MemInfoDumpProto_ProcessMemory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_ProcessMemory_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_ProcessMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_heaps_.Clear();
  dalvik_details_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      process_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(native_heap_ != nullptr);
      native_heap_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dalvik_heap_ != nullptr);
      dalvik_heap_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(unknown_heap_ != nullptr);
      unknown_heap_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(total_heap_ != nullptr);
      total_heap_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(app_summary_ != nullptr);
      app_summary_->Clear();
    }
  }
  pid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_ProcessMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_process_name(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo native_heap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_native_heap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo dalvik_heap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_dalvik_heap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo other_heaps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_other_heaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo unknown_heap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_unknown_heap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo total_heap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_total_heap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo dalvik_details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dalvik_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary app_summary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_app_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_ProcessMemory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo native_heap = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_native_heap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo dalvik_heap = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dalvik_heap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo other_heaps = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_other_heaps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo unknown_heap = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unknown_heap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo total_heap = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total_heap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo dalvik_details = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dalvik_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary app_summary = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_ProcessMemory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string process_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->process_name(), output);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo native_heap = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::native_heap(this), output);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo dalvik_heap = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::dalvik_heap(this), output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo other_heaps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_heaps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->other_heaps(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo unknown_heap = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::unknown_heap(this), output);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo total_heap = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::total_heap(this), output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo dalvik_details = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dalvik_details_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->dalvik_details(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary app_summary = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::app_summary(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.ProcessMemory)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_ProcessMemory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional string process_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->process_name(), target);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo native_heap = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::native_heap(this), target);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo dalvik_heap = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::dalvik_heap(this), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo other_heaps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_heaps_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->other_heaps(static_cast<int>(i)), target);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo unknown_heap = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::unknown_heap(this), target);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo total_heap = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::total_heap(this), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo dalvik_details = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dalvik_details_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->dalvik_details(static_cast<int>(i)), target);
  }

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary app_summary = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::app_summary(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  return target;
}

size_t MemInfoDumpProto_ProcessMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo other_heaps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->other_heaps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->other_heaps(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo dalvik_details = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->dalvik_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dalvik_details(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string process_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo native_heap = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *native_heap_);
    }

    // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo dalvik_heap = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dalvik_heap_);
    }

    // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo unknown_heap = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unknown_heap_);
    }

    // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo total_heap = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_heap_);
    }

    // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary app_summary = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_summary_);
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_ProcessMemory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_ProcessMemory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_ProcessMemory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.ProcessMemory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.ProcessMemory)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_ProcessMemory::MergeFrom(const MemInfoDumpProto_ProcessMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_heaps_.MergeFrom(from.other_heaps_);
  dalvik_details_.MergeFrom(from.dalvik_details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_native_heap()->::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo::MergeFrom(from.native_heap());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dalvik_heap()->::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo::MergeFrom(from.dalvik_heap());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_unknown_heap()->::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo::MergeFrom(from.unknown_heap());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_total_heap()->::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo::MergeFrom(from.total_heap());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_app_summary()->::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary::MergeFrom(from.app_summary());
    }
    if (cached_has_bits & 0x00000040u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemInfoDumpProto_ProcessMemory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_ProcessMemory::CopyFrom(const MemInfoDumpProto_ProcessMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.ProcessMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_ProcessMemory::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_ProcessMemory::InternalSwap(MemInfoDumpProto_ProcessMemory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&other_heaps_)->InternalSwap(CastToBase(&other->other_heaps_));
  CastToBase(&dalvik_details_)->InternalSwap(CastToBase(&other->dalvik_details_));
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(native_heap_, other->native_heap_);
  swap(dalvik_heap_, other->dalvik_heap_);
  swap(unknown_heap_, other->unknown_heap_);
  swap(total_heap_, other->total_heap_);
  swap(app_summary_, other->app_summary_);
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_ProcessMemory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_AppData_ObjectStats::InitAsDefaultInstance() {
}
class MemInfoDumpProto_AppData_ObjectStats::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_AppData_ObjectStats>()._has_bits_);
  static void set_has_view_instance_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_root_instance_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_context_instance_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_activity_instance_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_global_asset_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_global_asset_manager_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_local_binder_object_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_proxy_binder_object_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_parcel_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_parcel_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_binder_object_death_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_open_ssl_socket_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_webview_instance_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

MemInfoDumpProto_AppData_ObjectStats::MemInfoDumpProto_AppData_ObjectStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
}
MemInfoDumpProto_AppData_ObjectStats::MemInfoDumpProto_AppData_ObjectStats(const MemInfoDumpProto_AppData_ObjectStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&view_instance_count_, &from.view_instance_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&webview_instance_count_) -
    reinterpret_cast<char*>(&view_instance_count_)) + sizeof(webview_instance_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
}

void MemInfoDumpProto_AppData_ObjectStats::SharedCtor() {
  ::memset(&view_instance_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webview_instance_count_) -
      reinterpret_cast<char*>(&view_instance_count_)) + sizeof(webview_instance_count_));
}

MemInfoDumpProto_AppData_ObjectStats::~MemInfoDumpProto_AppData_ObjectStats() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  SharedDtor();
}

void MemInfoDumpProto_AppData_ObjectStats::SharedDtor() {
}

void MemInfoDumpProto_AppData_ObjectStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_AppData_ObjectStats& MemInfoDumpProto_AppData_ObjectStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_AppData_ObjectStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_AppData_ObjectStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&view_instance_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proxy_binder_object_count_) -
        reinterpret_cast<char*>(&view_instance_count_)) + sizeof(proxy_binder_object_count_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&parcel_memory_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webview_instance_count_) -
        reinterpret_cast<char*>(&parcel_memory_kb_)) + sizeof(webview_instance_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_AppData_ObjectStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 view_instance_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view_instance_count(&has_bits);
          view_instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 view_root_instance_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_view_root_instance_count(&has_bits);
          view_root_instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 app_context_instance_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_app_context_instance_count(&has_bits);
          app_context_instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 activity_instance_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_activity_instance_count(&has_bits);
          activity_instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 global_asset_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_global_asset_count(&has_bits);
          global_asset_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 global_asset_manager_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_global_asset_manager_count(&has_bits);
          global_asset_manager_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 local_binder_object_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_local_binder_object_count(&has_bits);
          local_binder_object_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proxy_binder_object_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_proxy_binder_object_count(&has_bits);
          proxy_binder_object_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 parcel_memory_kb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_parcel_memory_kb(&has_bits);
          parcel_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 parcel_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_parcel_count(&has_bits);
          parcel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 binder_object_death_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_binder_object_death_count(&has_bits);
          binder_object_death_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 open_ssl_socket_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_open_ssl_socket_count(&has_bits);
          open_ssl_socket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 webview_instance_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_webview_instance_count(&has_bits);
          webview_instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_AppData_ObjectStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 view_instance_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_view_instance_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 view_root_instance_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_view_root_instance_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_root_instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 app_context_instance_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_app_context_instance_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_context_instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activity_instance_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_activity_instance_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_asset_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_global_asset_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_asset_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_asset_manager_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_global_asset_manager_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_asset_manager_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_binder_object_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_local_binder_object_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_binder_object_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proxy_binder_object_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_proxy_binder_object_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_binder_object_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parcel_memory_kb = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_parcel_memory_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &parcel_memory_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parcel_count = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_parcel_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parcel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 binder_object_death_count = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_binder_object_death_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &binder_object_death_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 open_ssl_socket_count = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_open_ssl_socket_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_ssl_socket_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 webview_instance_count = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_webview_instance_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &webview_instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_AppData_ObjectStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 view_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->view_instance_count(), output);
  }

  // optional int32 view_root_instance_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->view_root_instance_count(), output);
  }

  // optional int32 app_context_instance_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->app_context_instance_count(), output);
  }

  // optional int32 activity_instance_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->activity_instance_count(), output);
  }

  // optional int32 global_asset_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->global_asset_count(), output);
  }

  // optional int32 global_asset_manager_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->global_asset_manager_count(), output);
  }

  // optional int32 local_binder_object_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->local_binder_object_count(), output);
  }

  // optional int32 proxy_binder_object_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->proxy_binder_object_count(), output);
  }

  // optional int64 parcel_memory_kb = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->parcel_memory_kb(), output);
  }

  // optional int32 parcel_count = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->parcel_count(), output);
  }

  // optional int32 binder_object_death_count = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->binder_object_death_count(), output);
  }

  // optional int32 open_ssl_socket_count = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->open_ssl_socket_count(), output);
  }

  // optional int32 webview_instance_count = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->webview_instance_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_AppData_ObjectStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 view_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->view_instance_count(), target);
  }

  // optional int32 view_root_instance_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->view_root_instance_count(), target);
  }

  // optional int32 app_context_instance_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->app_context_instance_count(), target);
  }

  // optional int32 activity_instance_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->activity_instance_count(), target);
  }

  // optional int32 global_asset_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->global_asset_count(), target);
  }

  // optional int32 global_asset_manager_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->global_asset_manager_count(), target);
  }

  // optional int32 local_binder_object_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->local_binder_object_count(), target);
  }

  // optional int32 proxy_binder_object_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->proxy_binder_object_count(), target);
  }

  // optional int64 parcel_memory_kb = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->parcel_memory_kb(), target);
  }

  // optional int32 parcel_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->parcel_count(), target);
  }

  // optional int32 binder_object_death_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->binder_object_death_count(), target);
  }

  // optional int32 open_ssl_socket_count = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->open_ssl_socket_count(), target);
  }

  // optional int32 webview_instance_count = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->webview_instance_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  return target;
}

size_t MemInfoDumpProto_AppData_ObjectStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 view_instance_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->view_instance_count());
    }

    // optional int32 view_root_instance_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->view_root_instance_count());
    }

    // optional int32 app_context_instance_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->app_context_instance_count());
    }

    // optional int32 activity_instance_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->activity_instance_count());
    }

    // optional int32 global_asset_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->global_asset_count());
    }

    // optional int32 global_asset_manager_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->global_asset_manager_count());
    }

    // optional int32 local_binder_object_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->local_binder_object_count());
    }

    // optional int32 proxy_binder_object_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->proxy_binder_object_count());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int64 parcel_memory_kb = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->parcel_memory_kb());
    }

    // optional int32 parcel_count = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->parcel_count());
    }

    // optional int32 binder_object_death_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->binder_object_death_count());
    }

    // optional int32 open_ssl_socket_count = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->open_ssl_socket_count());
    }

    // optional int32 webview_instance_count = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->webview_instance_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_AppData_ObjectStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_AppData_ObjectStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_AppData_ObjectStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_AppData_ObjectStats::MergeFrom(const MemInfoDumpProto_AppData_ObjectStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      view_instance_count_ = from.view_instance_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_root_instance_count_ = from.view_root_instance_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_context_instance_count_ = from.app_context_instance_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      activity_instance_count_ = from.activity_instance_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      global_asset_count_ = from.global_asset_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      global_asset_manager_count_ = from.global_asset_manager_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      local_binder_object_count_ = from.local_binder_object_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      proxy_binder_object_count_ = from.proxy_binder_object_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      parcel_memory_kb_ = from.parcel_memory_kb_;
    }
    if (cached_has_bits & 0x00000200u) {
      parcel_count_ = from.parcel_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      binder_object_death_count_ = from.binder_object_death_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      open_ssl_socket_count_ = from.open_ssl_socket_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      webview_instance_count_ = from.webview_instance_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemInfoDumpProto_AppData_ObjectStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_AppData_ObjectStats::CopyFrom(const MemInfoDumpProto_AppData_ObjectStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_AppData_ObjectStats::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_AppData_ObjectStats::InternalSwap(MemInfoDumpProto_AppData_ObjectStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(view_instance_count_, other->view_instance_count_);
  swap(view_root_instance_count_, other->view_root_instance_count_);
  swap(app_context_instance_count_, other->app_context_instance_count_);
  swap(activity_instance_count_, other->activity_instance_count_);
  swap(global_asset_count_, other->global_asset_count_);
  swap(global_asset_manager_count_, other->global_asset_manager_count_);
  swap(local_binder_object_count_, other->local_binder_object_count_);
  swap(proxy_binder_object_count_, other->proxy_binder_object_count_);
  swap(parcel_memory_kb_, other->parcel_memory_kb_);
  swap(parcel_count_, other->parcel_count_);
  swap(binder_object_death_count_, other->binder_object_death_count_);
  swap(open_ssl_socket_count_, other->open_ssl_socket_count_);
  swap(webview_instance_count_, other->webview_instance_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_AppData_ObjectStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_AppData_SqlStats_Database::InitAsDefaultInstance() {
}
class MemInfoDumpProto_AppData_SqlStats_Database::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_AppData_SqlStats_Database>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_db_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lookaside_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MemInfoDumpProto_AppData_SqlStats_Database::MemInfoDumpProto_AppData_SqlStats_Database()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
}
MemInfoDumpProto_AppData_SqlStats_Database::MemInfoDumpProto_AppData_SqlStats_Database(const MemInfoDumpProto_AppData_SqlStats_Database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cache_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache()) {
    cache_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_);
  }
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&lookaside_b_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(lookaside_b_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
}

void MemInfoDumpProto_AppData_SqlStats_Database::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lookaside_b_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(lookaside_b_));
}

MemInfoDumpProto_AppData_SqlStats_Database::~MemInfoDumpProto_AppData_SqlStats_Database() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  SharedDtor();
}

void MemInfoDumpProto_AppData_SqlStats_Database::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemInfoDumpProto_AppData_SqlStats_Database::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_AppData_SqlStats_Database& MemInfoDumpProto_AppData_SqlStats_Database::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_AppData_SqlStats_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_AppData_SqlStats_Database::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cache_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&page_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lookaside_b_) -
        reinterpret_cast<char*>(&page_size_)) + sizeof(lookaside_b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_AppData_SqlStats_Database::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_page_size(&has_bits);
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 db_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_db_size(&has_bits);
          db_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lookaside_b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lookaside_b(&has_bits);
          lookaside_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cache = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cache(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_AppData_SqlStats_Database::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 page_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_page_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 db_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_db_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lookaside_b = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_lookaside_b(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lookaside_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cache()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache().data(), static_cast<int>(this->cache().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_AppData_SqlStats_Database::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 page_size = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // optional int32 db_size = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->db_size(), output);
  }

  // optional int32 lookaside_b = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->lookaside_b(), output);
  }

  // optional string cache = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache().data(), static_cast<int>(this->cache().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cache(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_AppData_SqlStats_Database::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 page_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // optional int32 db_size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->db_size(), target);
  }

  // optional int32 lookaside_b = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->lookaside_b(), target);
  }

  // optional string cache = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache().data(), static_cast<int>(this->cache().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->cache(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  return target;
}

size_t MemInfoDumpProto_AppData_SqlStats_Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cache = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cache());
    }

    // optional int32 page_size = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->page_size());
    }

    // optional int32 db_size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->db_size());
    }

    // optional int32 lookaside_b = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lookaside_b());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_AppData_SqlStats_Database::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_AppData_SqlStats_Database* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_AppData_SqlStats_Database>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_AppData_SqlStats_Database::MergeFrom(const MemInfoDumpProto_AppData_SqlStats_Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cache_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_);
    }
    if (cached_has_bits & 0x00000004u) {
      page_size_ = from.page_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      db_size_ = from.db_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      lookaside_b_ = from.lookaside_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemInfoDumpProto_AppData_SqlStats_Database::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_AppData_SqlStats_Database::CopyFrom(const MemInfoDumpProto_AppData_SqlStats_Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_AppData_SqlStats_Database::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_AppData_SqlStats_Database::InternalSwap(MemInfoDumpProto_AppData_SqlStats_Database* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cache_.Swap(&other->cache_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
  swap(db_size_, other->db_size_);
  swap(lookaside_b_, other->lookaside_b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_AppData_SqlStats_Database::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_AppData_SqlStats::InitAsDefaultInstance() {
}
class MemInfoDumpProto_AppData_SqlStats::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_AppData_SqlStats>()._has_bits_);
  static void set_has_memory_used_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pagecache_overflow_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_malloc_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MemInfoDumpProto_AppData_SqlStats::MemInfoDumpProto_AppData_SqlStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
}
MemInfoDumpProto_AppData_SqlStats::MemInfoDumpProto_AppData_SqlStats(const MemInfoDumpProto_AppData_SqlStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      databases_(from.databases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memory_used_kb_, &from.memory_used_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&malloc_size_kb_) -
    reinterpret_cast<char*>(&memory_used_kb_)) + sizeof(malloc_size_kb_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
}

void MemInfoDumpProto_AppData_SqlStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&memory_used_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&malloc_size_kb_) -
      reinterpret_cast<char*>(&memory_used_kb_)) + sizeof(malloc_size_kb_));
}

MemInfoDumpProto_AppData_SqlStats::~MemInfoDumpProto_AppData_SqlStats() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  SharedDtor();
}

void MemInfoDumpProto_AppData_SqlStats::SharedDtor() {
}

void MemInfoDumpProto_AppData_SqlStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_AppData_SqlStats& MemInfoDumpProto_AppData_SqlStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_AppData_SqlStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_AppData_SqlStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  databases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&memory_used_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&malloc_size_kb_) -
        reinterpret_cast<char*>(&memory_used_kb_)) + sizeof(malloc_size_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_AppData_SqlStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 memory_used_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memory_used_kb(&has_bits);
          memory_used_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pagecache_overflow_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pagecache_overflow_kb(&has_bits);
          pagecache_overflow_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 malloc_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_malloc_size_kb(&has_bits);
          malloc_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database databases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_databases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_AppData_SqlStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 memory_used_kb = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_memory_used_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_used_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pagecache_overflow_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_pagecache_overflow_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagecache_overflow_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 malloc_size_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_malloc_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &malloc_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database databases = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_databases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_AppData_SqlStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 memory_used_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->memory_used_kb(), output);
  }

  // optional int32 pagecache_overflow_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pagecache_overflow_kb(), output);
  }

  // optional int32 malloc_size_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->malloc_size_kb(), output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database databases = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->databases_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->databases(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_AppData_SqlStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 memory_used_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->memory_used_kb(), target);
  }

  // optional int32 pagecache_overflow_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pagecache_overflow_kb(), target);
  }

  // optional int32 malloc_size_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->malloc_size_kb(), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database databases = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->databases_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->databases(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  return target;
}

size_t MemInfoDumpProto_AppData_SqlStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database databases = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->databases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->databases(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 memory_used_kb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->memory_used_kb());
    }

    // optional int32 pagecache_overflow_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pagecache_overflow_kb());
    }

    // optional int32 malloc_size_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->malloc_size_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_AppData_SqlStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_AppData_SqlStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_AppData_SqlStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_AppData_SqlStats::MergeFrom(const MemInfoDumpProto_AppData_SqlStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  databases_.MergeFrom(from.databases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      memory_used_kb_ = from.memory_used_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      pagecache_overflow_kb_ = from.pagecache_overflow_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      malloc_size_kb_ = from.malloc_size_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemInfoDumpProto_AppData_SqlStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_AppData_SqlStats::CopyFrom(const MemInfoDumpProto_AppData_SqlStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_AppData_SqlStats::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_AppData_SqlStats::InternalSwap(MemInfoDumpProto_AppData_SqlStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&databases_)->InternalSwap(CastToBase(&other->databases_));
  swap(memory_used_kb_, other->memory_used_kb_);
  swap(pagecache_overflow_kb_, other->pagecache_overflow_kb_);
  swap(malloc_size_kb_, other->malloc_size_kb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_AppData_SqlStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_AppData::InitAsDefaultInstance() {
  ::com::android::server::am::_MemInfoDumpProto_AppData_default_instance_._instance.get_mutable()->process_memory_ = const_cast< ::com::android::server::am::MemInfoDumpProto_ProcessMemory*>(
      ::com::android::server::am::MemInfoDumpProto_ProcessMemory::internal_default_instance());
  ::com::android::server::am::_MemInfoDumpProto_AppData_default_instance_._instance.get_mutable()->objects_ = const_cast< ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats*>(
      ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats::internal_default_instance());
  ::com::android::server::am::_MemInfoDumpProto_AppData_default_instance_._instance.get_mutable()->sql_ = const_cast< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats*>(
      ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats::internal_default_instance());
}
class MemInfoDumpProto_AppData::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_AppData>()._has_bits_);
  static const ::com::android::server::am::MemInfoDumpProto_ProcessMemory& process_memory(const MemInfoDumpProto_AppData* msg);
  static void set_has_process_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats& objects(const MemInfoDumpProto_AppData* msg);
  static void set_has_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats& sql(const MemInfoDumpProto_AppData* msg);
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_asset_allocations(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unreachable_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::am::MemInfoDumpProto_ProcessMemory&
MemInfoDumpProto_AppData::_Internal::process_memory(const MemInfoDumpProto_AppData* msg) {
  return *msg->process_memory_;
}
const ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats&
MemInfoDumpProto_AppData::_Internal::objects(const MemInfoDumpProto_AppData* msg) {
  return *msg->objects_;
}
const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats&
MemInfoDumpProto_AppData::_Internal::sql(const MemInfoDumpProto_AppData* msg) {
  return *msg->sql_;
}
MemInfoDumpProto_AppData::MemInfoDumpProto_AppData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.AppData)
}
MemInfoDumpProto_AppData::MemInfoDumpProto_AppData(const MemInfoDumpProto_AppData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_allocations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_allocations()) {
    asset_allocations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_allocations_);
  }
  unreachable_memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unreachable_memory()) {
    unreachable_memory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unreachable_memory_);
  }
  if (from.has_process_memory()) {
    process_memory_ = new ::com::android::server::am::MemInfoDumpProto_ProcessMemory(*from.process_memory_);
  } else {
    process_memory_ = nullptr;
  }
  if (from.has_objects()) {
    objects_ = new ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats(*from.objects_);
  } else {
    objects_ = nullptr;
  }
  if (from.has_sql()) {
    sql_ = new ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats(*from.sql_);
  } else {
    sql_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.AppData)
}

void MemInfoDumpProto_AppData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  asset_allocations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unreachable_memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&process_memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sql_) -
      reinterpret_cast<char*>(&process_memory_)) + sizeof(sql_));
}

MemInfoDumpProto_AppData::~MemInfoDumpProto_AppData() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.AppData)
  SharedDtor();
}

void MemInfoDumpProto_AppData::SharedDtor() {
  asset_allocations_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unreachable_memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete process_memory_;
  if (this != internal_default_instance()) delete objects_;
  if (this != internal_default_instance()) delete sql_;
}

void MemInfoDumpProto_AppData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_AppData& MemInfoDumpProto_AppData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_AppData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_AppData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.AppData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      asset_allocations_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      unreachable_memory_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(process_memory_ != nullptr);
      process_memory_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(objects_ != nullptr);
      objects_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sql_ != nullptr);
      sql_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_AppData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory process_memory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_process_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.MemInfoDumpProto.AppData.ObjectStats objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_objects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.MemInfoDumpProto.AppData.SqlStats sql = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sql(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string asset_allocations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_asset_allocations(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.AppData.asset_allocations");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unreachable_memory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_unreachable_memory(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_AppData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.AppData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory process_memory = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_process_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.MemInfoDumpProto.AppData.ObjectStats objects = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.MemInfoDumpProto.AppData.SqlStats sql = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sql()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string asset_allocations = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_allocations()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asset_allocations().data(), static_cast<int>(this->asset_allocations().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.AppData.asset_allocations");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unreachable_memory = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unreachable_memory()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unreachable_memory().data(), static_cast<int>(this->unreachable_memory().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.AppData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.AppData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_AppData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.AppData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory process_memory = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::process_memory(this), output);
  }

  // optional .com.android.server.am.MemInfoDumpProto.AppData.ObjectStats objects = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::objects(this), output);
  }

  // optional .com.android.server.am.MemInfoDumpProto.AppData.SqlStats sql = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::sql(this), output);
  }

  // optional string asset_allocations = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_allocations().data(), static_cast<int>(this->asset_allocations().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.asset_allocations");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset_allocations(), output);
  }

  // optional string unreachable_memory = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unreachable_memory().data(), static_cast<int>(this->unreachable_memory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unreachable_memory(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.AppData)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_AppData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.AppData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory process_memory = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::process_memory(this), target);
  }

  // optional .com.android.server.am.MemInfoDumpProto.AppData.ObjectStats objects = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::objects(this), target);
  }

  // optional .com.android.server.am.MemInfoDumpProto.AppData.SqlStats sql = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::sql(this), target);
  }

  // optional string asset_allocations = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_allocations().data(), static_cast<int>(this->asset_allocations().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.asset_allocations");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->asset_allocations(), target);
  }

  // optional string unreachable_memory = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unreachable_memory().data(), static_cast<int>(this->unreachable_memory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->unreachable_memory(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.AppData)
  return target;
}

size_t MemInfoDumpProto_AppData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.AppData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string asset_allocations = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->asset_allocations());
    }

    // optional string unreachable_memory = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unreachable_memory());
    }

    // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory process_memory = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_memory_);
    }

    // optional .com.android.server.am.MemInfoDumpProto.AppData.ObjectStats objects = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *objects_);
    }

    // optional .com.android.server.am.MemInfoDumpProto.AppData.SqlStats sql = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sql_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_AppData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_AppData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_AppData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.AppData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.AppData)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_AppData::MergeFrom(const MemInfoDumpProto_AppData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.AppData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      asset_allocations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_allocations_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      unreachable_memory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unreachable_memory_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_process_memory()->::com::android::server::am::MemInfoDumpProto_ProcessMemory::MergeFrom(from.process_memory());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_objects()->::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats::MergeFrom(from.objects());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sql()->::com::android::server::am::MemInfoDumpProto_AppData_SqlStats::MergeFrom(from.sql());
    }
  }
}

void MemInfoDumpProto_AppData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_AppData::CopyFrom(const MemInfoDumpProto_AppData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.AppData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_AppData::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_AppData::InternalSwap(MemInfoDumpProto_AppData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  asset_allocations_.Swap(&other->asset_allocations_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unreachable_memory_.Swap(&other->unreachable_memory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(process_memory_, other->process_memory_);
  swap(objects_, other->objects_);
  swap(sql_, other->sql_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_AppData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto_MemItem::InitAsDefaultInstance() {
}
class MemInfoDumpProto_MemItem::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto_MemItem>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_activities(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_swap_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MemInfoDumpProto_MemItem::MemInfoDumpProto_MemItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto.MemItem)
}
MemInfoDumpProto_MemItem::MemInfoDumpProto_MemItem(const MemInfoDumpProto_MemItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sub_items_(from.sub_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rss_kb_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rss_kb_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto.MemItem)
}

void MemInfoDumpProto_MemItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rss_kb_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rss_kb_));
}

MemInfoDumpProto_MemItem::~MemInfoDumpProto_MemItem() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto.MemItem)
  SharedDtor();
}

void MemInfoDumpProto_MemItem::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemInfoDumpProto_MemItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto_MemItem& MemInfoDumpProto_MemItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_MemItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto_MemItem::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto.MemItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rss_kb_) -
        reinterpret_cast<char*>(&id_)) + sizeof(rss_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto_MemItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.MemItem.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_label(), ptr, ctx, "com.android.server.am.MemInfoDumpProto.MemItem.label");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_proc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_proc(&has_bits);
          is_proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_activities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_activities(&has_bits);
          has_activities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pss_kb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pss_kb(&has_bits);
          pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 swap_pss_kb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_swap_pss_kb(&has_bits);
          swap_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.MemItem sub_items = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sub_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional int64 rss_kb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_rss_kb(&has_bits);
          rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto_MemItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto.MemItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.MemItem.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.MemInfoDumpProto.MemItem.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_proc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_proc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_proc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_activities = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_has_activities(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_activities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pss_kb = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 swap_pss_kb = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_swap_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &swap_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.MemItem sub_items = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sub_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rss_kb = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_rss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto.MemItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto.MemItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto_MemItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto.MemItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.MemItem.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.MemItem.label");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional bool is_proc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_proc(), output);
  }

  // optional bool has_activities = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->has_activities(), output);
  }

  // optional int64 pss_kb = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->pss_kb(), output);
  }

  // optional int64 swap_pss_kb = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->swap_pss_kb(), output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem sub_items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_items_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->sub_items(static_cast<int>(i)),
      output);
  }

  // optional int64 rss_kb = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->rss_kb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto.MemItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto_MemItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto.MemItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.MemItem.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.MemInfoDumpProto.MemItem.label");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional bool is_proc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_proc(), target);
  }

  // optional bool has_activities = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->has_activities(), target);
  }

  // optional int64 pss_kb = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->pss_kb(), target);
  }

  // optional int64 swap_pss_kb = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->swap_pss_kb(), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem sub_items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_items_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->sub_items(static_cast<int>(i)), target);
  }

  // optional int64 rss_kb = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->rss_kb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto.MemItem)
  return target;
}

size_t MemInfoDumpProto_MemItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto.MemItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem sub_items = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sub_items(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional int32 id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool is_proc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool has_activities = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int64 pss_kb = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->pss_kb());
    }

    // optional int64 swap_pss_kb = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->swap_pss_kb());
    }

    // optional int64 rss_kb = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rss_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto_MemItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto.MemItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto_MemItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto_MemItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto.MemItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto.MemItem)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto_MemItem::MergeFrom(const MemInfoDumpProto_MemItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto.MemItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_items_.MergeFrom(from.sub_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_proc_ = from.is_proc_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_activities_ = from.has_activities_;
    }
    if (cached_has_bits & 0x00000020u) {
      pss_kb_ = from.pss_kb_;
    }
    if (cached_has_bits & 0x00000040u) {
      swap_pss_kb_ = from.swap_pss_kb_;
    }
    if (cached_has_bits & 0x00000080u) {
      rss_kb_ = from.rss_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemInfoDumpProto_MemItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto.MemItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto_MemItem::CopyFrom(const MemInfoDumpProto_MemItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto.MemItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto_MemItem::IsInitialized() const {
  return true;
}

void MemInfoDumpProto_MemItem::InternalSwap(MemInfoDumpProto_MemItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sub_items_)->InternalSwap(CastToBase(&other->sub_items_));
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(is_proc_, other->is_proc_);
  swap(has_activities_, other->has_activities_);
  swap(pss_kb_, other->pss_kb_);
  swap(swap_pss_kb_, other->swap_pss_kb_);
  swap(rss_kb_, other->rss_kb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto_MemItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemInfoDumpProto::InitAsDefaultInstance() {
}
class MemInfoDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MemInfoDumpProto>()._has_bits_);
  static void set_has_uptime_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elapsed_realtime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_ram_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cached_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cached_kernel_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_free_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_used_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_used_kernel_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lost_ram_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_zram_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_zram_physical_used_in_swap_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_zram_swap_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ksm_sharing_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ksm_shared_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ksm_unshared_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ksm_volatile_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tuning_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tuning_large_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_oom_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_restore_limit_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_low_ram_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_is_high_end_gfx(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

MemInfoDumpProto::MemInfoDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.MemInfoDumpProto)
}
MemInfoDumpProto::MemInfoDumpProto(const MemInfoDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      native_processes_(from.native_processes_),
      app_processes_(from.app_processes_),
      total_pss_by_process_(from.total_pss_by_process_),
      total_pss_by_oom_adjustment_(from.total_pss_by_oom_adjustment_),
      total_pss_by_category_(from.total_pss_by_category_),
      total_rss_by_process_(from.total_rss_by_process_),
      total_rss_by_oom_adjustment_(from.total_rss_by_oom_adjustment_),
      total_rss_by_category_(from.total_rss_by_category_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uptime_duration_ms_, &from.uptime_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_high_end_gfx_) -
    reinterpret_cast<char*>(&uptime_duration_ms_)) + sizeof(is_high_end_gfx_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.MemInfoDumpProto)
}

void MemInfoDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemInfoDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&uptime_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_high_end_gfx_) -
      reinterpret_cast<char*>(&uptime_duration_ms_)) + sizeof(is_high_end_gfx_));
}

MemInfoDumpProto::~MemInfoDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.MemInfoDumpProto)
  SharedDtor();
}

void MemInfoDumpProto::SharedDtor() {
}

void MemInfoDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemInfoDumpProto& MemInfoDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemInfoDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void MemInfoDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.MemInfoDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  native_processes_.Clear();
  app_processes_.Clear();
  total_pss_by_process_.Clear();
  total_pss_by_oom_adjustment_.Clear();
  total_pss_by_category_.Clear();
  total_rss_by_process_.Clear();
  total_rss_by_oom_adjustment_.Clear();
  total_rss_by_category_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&uptime_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_kernel_kb_) -
        reinterpret_cast<char*>(&uptime_duration_ms_)) + sizeof(used_kernel_kb_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&lost_ram_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ksm_shared_kb_) -
        reinterpret_cast<char*>(&lost_ram_kb_)) + sizeof(ksm_shared_kb_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&ksm_unshared_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_high_end_gfx_) -
        reinterpret_cast<char*>(&ksm_unshared_kb_)) + sizeof(is_high_end_gfx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemInfoDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 uptime_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uptime_duration_ms(&has_bits);
          uptime_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 elapsed_realtime_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_elapsed_realtime_ms(&has_bits);
          elapsed_realtime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory native_processes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_native_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.AppData app_processes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_app_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_process = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_total_pss_by_process(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_oom_adjustment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_total_pss_by_oom_adjustment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_category = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_total_pss_by_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional int64 total_ram_kb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_total_ram_kb(&has_bits);
          total_ram_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.internal.app.procstats.ProcessStatsProto.MemoryFactor status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor_IsValid(val))) {
            set_status(static_cast<::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 cached_pss_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cached_pss_kb(&has_bits);
          cached_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 cached_kernel_kb = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cached_kernel_kb(&has_bits);
          cached_kernel_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 free_kb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_free_kb(&has_bits);
          free_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 used_pss_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_used_pss_kb(&has_bits);
          used_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 used_kernel_kb = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_used_kernel_kb(&has_bits);
          used_kernel_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lost_ram_kb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_lost_ram_kb(&has_bits);
          lost_ram_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_zram_kb = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_total_zram_kb(&has_bits);
          total_zram_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 zram_physical_used_in_swap_kb = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_zram_physical_used_in_swap_kb(&has_bits);
          zram_physical_used_in_swap_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_zram_swap_kb = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_total_zram_swap_kb(&has_bits);
          total_zram_swap_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ksm_sharing_kb = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ksm_sharing_kb(&has_bits);
          ksm_sharing_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ksm_shared_kb = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_ksm_shared_kb(&has_bits);
          ksm_shared_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ksm_unshared_kb = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ksm_unshared_kb(&has_bits);
          ksm_unshared_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ksm_volatile_kb = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_ksm_volatile_kb(&has_bits);
          ksm_volatile_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tuning_mb = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tuning_mb(&has_bits);
          tuning_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tuning_large_mb = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tuning_large_mb(&has_bits);
          tuning_large_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 oom_kb = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_oom_kb(&has_bits);
          oom_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 restore_limit_kb = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_restore_limit_kb(&has_bits);
          restore_limit_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_low_ram_device = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_is_low_ram_device(&has_bits);
          is_low_ram_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_high_end_gfx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_is_high_end_gfx(&has_bits);
          is_high_end_gfx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_process = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_total_rss_by_process(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 490);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_oom_adjustment = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_total_rss_by_oom_adjustment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 498);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_category = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_total_rss_by_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 506);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemInfoDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.MemInfoDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uptime_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uptime_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 elapsed_realtime_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_elapsed_realtime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_realtime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory native_processes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_native_processes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.AppData app_processes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_app_processes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_process = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_total_pss_by_process()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_oom_adjustment = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_total_pss_by_oom_adjustment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_category = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_total_pss_by_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_ram_kb = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_total_ram_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_ram_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.internal.app.procstats.ProcessStatsProto.MemoryFactor status = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor_IsValid(value)) {
            set_status(static_cast< ::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cached_pss_kb = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_cached_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cached_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cached_kernel_kb = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_cached_kernel_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cached_kernel_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 free_kb = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_free_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 used_pss_kb = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_used_pss_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_pss_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 used_kernel_kb = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_used_kernel_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_kernel_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lost_ram_kb = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_lost_ram_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lost_ram_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_zram_kb = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_total_zram_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_zram_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 zram_physical_used_in_swap_kb = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_zram_physical_used_in_swap_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &zram_physical_used_in_swap_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_zram_swap_kb = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_total_zram_swap_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_zram_swap_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ksm_sharing_kb = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_ksm_sharing_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ksm_sharing_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ksm_shared_kb = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_ksm_shared_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ksm_shared_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ksm_unshared_kb = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_ksm_unshared_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ksm_unshared_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ksm_volatile_kb = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_ksm_volatile_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ksm_volatile_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tuning_mb = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_tuning_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuning_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tuning_large_mb = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_tuning_large_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuning_large_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 oom_kb = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_oom_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &oom_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 restore_limit_kb = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_restore_limit_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &restore_limit_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_low_ram_device = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_is_low_ram_device(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_ram_device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_high_end_gfx = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_is_high_end_gfx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_high_end_gfx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_process = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_total_rss_by_process()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_oom_adjustment = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_total_rss_by_oom_adjustment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_category = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_total_rss_by_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.MemInfoDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.MemInfoDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemInfoDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.MemInfoDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 uptime_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->uptime_duration_ms(), output);
  }

  // optional int64 elapsed_realtime_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->elapsed_realtime_ms(), output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory native_processes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->native_processes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->native_processes(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.AppData app_processes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_processes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->app_processes(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_process = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_pss_by_process_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->total_pss_by_process(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_oom_adjustment = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_pss_by_oom_adjustment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->total_pss_by_oom_adjustment(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_category = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_pss_by_category_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->total_pss_by_category(static_cast<int>(i)),
      output);
  }

  // optional int64 total_ram_kb = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->total_ram_kb(), output);
  }

  // optional .com.android.internal.app.procstats.ProcessStatsProto.MemoryFactor status = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->status(), output);
  }

  // optional int64 cached_pss_kb = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->cached_pss_kb(), output);
  }

  // optional int64 cached_kernel_kb = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->cached_kernel_kb(), output);
  }

  // optional int64 free_kb = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->free_kb(), output);
  }

  // optional int64 used_pss_kb = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->used_pss_kb(), output);
  }

  // optional int64 used_kernel_kb = 14;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->used_kernel_kb(), output);
  }

  // optional int64 lost_ram_kb = 15;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->lost_ram_kb(), output);
  }

  // optional int64 total_zram_kb = 16;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->total_zram_kb(), output);
  }

  // optional int64 zram_physical_used_in_swap_kb = 17;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->zram_physical_used_in_swap_kb(), output);
  }

  // optional int64 total_zram_swap_kb = 18;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->total_zram_swap_kb(), output);
  }

  // optional int64 ksm_sharing_kb = 19;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->ksm_sharing_kb(), output);
  }

  // optional int64 ksm_shared_kb = 20;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->ksm_shared_kb(), output);
  }

  // optional int64 ksm_unshared_kb = 21;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->ksm_unshared_kb(), output);
  }

  // optional int64 ksm_volatile_kb = 22;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->ksm_volatile_kb(), output);
  }

  // optional int32 tuning_mb = 23;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->tuning_mb(), output);
  }

  // optional int32 tuning_large_mb = 24;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->tuning_large_mb(), output);
  }

  // optional int64 oom_kb = 25;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(25, this->oom_kb(), output);
  }

  // optional int64 restore_limit_kb = 26;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(26, this->restore_limit_kb(), output);
  }

  // optional bool is_low_ram_device = 27;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->is_low_ram_device(), output);
  }

  // optional bool is_high_end_gfx = 28;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(28, this->is_high_end_gfx(), output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_process = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_rss_by_process_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29,
      this->total_rss_by_process(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_oom_adjustment = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_rss_by_oom_adjustment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30,
      this->total_rss_by_oom_adjustment(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_category = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_rss_by_category_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31,
      this->total_rss_by_category(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.MemInfoDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemInfoDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.MemInfoDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 uptime_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->uptime_duration_ms(), target);
  }

  // optional int64 elapsed_realtime_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->elapsed_realtime_ms(), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory native_processes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->native_processes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->native_processes(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.AppData app_processes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_processes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->app_processes(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_process = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_pss_by_process_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->total_pss_by_process(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_oom_adjustment = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_pss_by_oom_adjustment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->total_pss_by_oom_adjustment(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_category = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_pss_by_category_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->total_pss_by_category(static_cast<int>(i)), target);
  }

  // optional int64 total_ram_kb = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->total_ram_kb(), target);
  }

  // optional .com.android.internal.app.procstats.ProcessStatsProto.MemoryFactor status = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->status(), target);
  }

  // optional int64 cached_pss_kb = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->cached_pss_kb(), target);
  }

  // optional int64 cached_kernel_kb = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->cached_kernel_kb(), target);
  }

  // optional int64 free_kb = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->free_kb(), target);
  }

  // optional int64 used_pss_kb = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->used_pss_kb(), target);
  }

  // optional int64 used_kernel_kb = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->used_kernel_kb(), target);
  }

  // optional int64 lost_ram_kb = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->lost_ram_kb(), target);
  }

  // optional int64 total_zram_kb = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->total_zram_kb(), target);
  }

  // optional int64 zram_physical_used_in_swap_kb = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->zram_physical_used_in_swap_kb(), target);
  }

  // optional int64 total_zram_swap_kb = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->total_zram_swap_kb(), target);
  }

  // optional int64 ksm_sharing_kb = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->ksm_sharing_kb(), target);
  }

  // optional int64 ksm_shared_kb = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->ksm_shared_kb(), target);
  }

  // optional int64 ksm_unshared_kb = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->ksm_unshared_kb(), target);
  }

  // optional int64 ksm_volatile_kb = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->ksm_volatile_kb(), target);
  }

  // optional int32 tuning_mb = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->tuning_mb(), target);
  }

  // optional int32 tuning_large_mb = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->tuning_large_mb(), target);
  }

  // optional int64 oom_kb = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->oom_kb(), target);
  }

  // optional int64 restore_limit_kb = 26;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->restore_limit_kb(), target);
  }

  // optional bool is_low_ram_device = 27;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->is_low_ram_device(), target);
  }

  // optional bool is_high_end_gfx = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->is_high_end_gfx(), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_process = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_rss_by_process_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->total_rss_by_process(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_oom_adjustment = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_rss_by_oom_adjustment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->total_rss_by_oom_adjustment(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_category = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->total_rss_by_category_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->total_rss_by_category(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.MemInfoDumpProto)
  return target;
}

size_t MemInfoDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.MemInfoDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory native_processes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->native_processes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->native_processes(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.AppData app_processes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->app_processes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->app_processes(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_process = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->total_pss_by_process_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->total_pss_by_process(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_oom_adjustment = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->total_pss_by_oom_adjustment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->total_pss_by_oom_adjustment(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_category = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->total_pss_by_category_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->total_pss_by_category(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_process = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->total_rss_by_process_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->total_rss_by_process(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_oom_adjustment = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->total_rss_by_oom_adjustment_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->total_rss_by_oom_adjustment(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_category = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->total_rss_by_category_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->total_rss_by_category(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 uptime_duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->uptime_duration_ms());
    }

    // optional int64 elapsed_realtime_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->elapsed_realtime_ms());
    }

    // optional int64 total_ram_kb = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_ram_kb());
    }

    // optional int64 cached_pss_kb = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cached_pss_kb());
    }

    // optional int64 cached_kernel_kb = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cached_kernel_kb());
    }

    // optional int64 free_kb = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->free_kb());
    }

    // optional int64 used_pss_kb = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->used_pss_kb());
    }

    // optional int64 used_kernel_kb = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->used_kernel_kb());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 lost_ram_kb = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lost_ram_kb());
    }

    // optional int64 total_zram_kb = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_zram_kb());
    }

    // optional .com.android.internal.app.procstats.ProcessStatsProto.MemoryFactor status = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 tuning_mb = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tuning_mb());
    }

    // optional int64 zram_physical_used_in_swap_kb = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->zram_physical_used_in_swap_kb());
    }

    // optional int64 total_zram_swap_kb = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_zram_swap_kb());
    }

    // optional int64 ksm_sharing_kb = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ksm_sharing_kb());
    }

    // optional int64 ksm_shared_kb = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ksm_shared_kb());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional int64 ksm_unshared_kb = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ksm_unshared_kb());
    }

    // optional int64 ksm_volatile_kb = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ksm_volatile_kb());
    }

    // optional int64 oom_kb = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->oom_kb());
    }

    // optional int64 restore_limit_kb = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->restore_limit_kb());
    }

    // optional int32 tuning_large_mb = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tuning_large_mb());
    }

    // optional bool is_low_ram_device = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool is_high_end_gfx = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemInfoDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.MemInfoDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfoDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemInfoDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.MemInfoDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.MemInfoDumpProto)
    MergeFrom(*source);
  }
}

void MemInfoDumpProto::MergeFrom(const MemInfoDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.MemInfoDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  native_processes_.MergeFrom(from.native_processes_);
  app_processes_.MergeFrom(from.app_processes_);
  total_pss_by_process_.MergeFrom(from.total_pss_by_process_);
  total_pss_by_oom_adjustment_.MergeFrom(from.total_pss_by_oom_adjustment_);
  total_pss_by_category_.MergeFrom(from.total_pss_by_category_);
  total_rss_by_process_.MergeFrom(from.total_rss_by_process_);
  total_rss_by_oom_adjustment_.MergeFrom(from.total_rss_by_oom_adjustment_);
  total_rss_by_category_.MergeFrom(from.total_rss_by_category_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      uptime_duration_ms_ = from.uptime_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      elapsed_realtime_ms_ = from.elapsed_realtime_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_ram_kb_ = from.total_ram_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      cached_pss_kb_ = from.cached_pss_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      cached_kernel_kb_ = from.cached_kernel_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      free_kb_ = from.free_kb_;
    }
    if (cached_has_bits & 0x00000040u) {
      used_pss_kb_ = from.used_pss_kb_;
    }
    if (cached_has_bits & 0x00000080u) {
      used_kernel_kb_ = from.used_kernel_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      lost_ram_kb_ = from.lost_ram_kb_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_zram_kb_ = from.total_zram_kb_;
    }
    if (cached_has_bits & 0x00000400u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000800u) {
      tuning_mb_ = from.tuning_mb_;
    }
    if (cached_has_bits & 0x00001000u) {
      zram_physical_used_in_swap_kb_ = from.zram_physical_used_in_swap_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_zram_swap_kb_ = from.total_zram_swap_kb_;
    }
    if (cached_has_bits & 0x00004000u) {
      ksm_sharing_kb_ = from.ksm_sharing_kb_;
    }
    if (cached_has_bits & 0x00008000u) {
      ksm_shared_kb_ = from.ksm_shared_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ksm_unshared_kb_ = from.ksm_unshared_kb_;
    }
    if (cached_has_bits & 0x00020000u) {
      ksm_volatile_kb_ = from.ksm_volatile_kb_;
    }
    if (cached_has_bits & 0x00040000u) {
      oom_kb_ = from.oom_kb_;
    }
    if (cached_has_bits & 0x00080000u) {
      restore_limit_kb_ = from.restore_limit_kb_;
    }
    if (cached_has_bits & 0x00100000u) {
      tuning_large_mb_ = from.tuning_large_mb_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_low_ram_device_ = from.is_low_ram_device_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_high_end_gfx_ = from.is_high_end_gfx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemInfoDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.MemInfoDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfoDumpProto::CopyFrom(const MemInfoDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.MemInfoDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfoDumpProto::IsInitialized() const {
  return true;
}

void MemInfoDumpProto::InternalSwap(MemInfoDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&native_processes_)->InternalSwap(CastToBase(&other->native_processes_));
  CastToBase(&app_processes_)->InternalSwap(CastToBase(&other->app_processes_));
  CastToBase(&total_pss_by_process_)->InternalSwap(CastToBase(&other->total_pss_by_process_));
  CastToBase(&total_pss_by_oom_adjustment_)->InternalSwap(CastToBase(&other->total_pss_by_oom_adjustment_));
  CastToBase(&total_pss_by_category_)->InternalSwap(CastToBase(&other->total_pss_by_category_));
  CastToBase(&total_rss_by_process_)->InternalSwap(CastToBase(&other->total_rss_by_process_));
  CastToBase(&total_rss_by_oom_adjustment_)->InternalSwap(CastToBase(&other->total_rss_by_oom_adjustment_));
  CastToBase(&total_rss_by_category_)->InternalSwap(CastToBase(&other->total_rss_by_category_));
  swap(uptime_duration_ms_, other->uptime_duration_ms_);
  swap(elapsed_realtime_ms_, other->elapsed_realtime_ms_);
  swap(total_ram_kb_, other->total_ram_kb_);
  swap(cached_pss_kb_, other->cached_pss_kb_);
  swap(cached_kernel_kb_, other->cached_kernel_kb_);
  swap(free_kb_, other->free_kb_);
  swap(used_pss_kb_, other->used_pss_kb_);
  swap(used_kernel_kb_, other->used_kernel_kb_);
  swap(lost_ram_kb_, other->lost_ram_kb_);
  swap(total_zram_kb_, other->total_zram_kb_);
  swap(status_, other->status_);
  swap(tuning_mb_, other->tuning_mb_);
  swap(zram_physical_used_in_swap_kb_, other->zram_physical_used_in_swap_kb_);
  swap(total_zram_swap_kb_, other->total_zram_swap_kb_);
  swap(ksm_sharing_kb_, other->ksm_sharing_kb_);
  swap(ksm_shared_kb_, other->ksm_shared_kb_);
  swap(ksm_unshared_kb_, other->ksm_unshared_kb_);
  swap(ksm_volatile_kb_, other->ksm_volatile_kb_);
  swap(oom_kb_, other->oom_kb_);
  swap(restore_limit_kb_, other->restore_limit_kb_);
  swap(tuning_large_mb_, other->tuning_large_mb_);
  swap(is_low_ram_device_, other->is_low_ram_device_);
  swap(is_high_end_gfx_, other->is_high_end_gfx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfoDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StickyBroadcastProto_StickyAction::InitAsDefaultInstance() {
}
class StickyBroadcastProto_StickyAction::_Internal {
 public:
  using HasBits = decltype(std::declval<StickyBroadcastProto_StickyAction>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void StickyBroadcastProto_StickyAction::clear_intents() {
  intents_.Clear();
}
StickyBroadcastProto_StickyAction::StickyBroadcastProto_StickyAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.StickyBroadcastProto.StickyAction)
}
StickyBroadcastProto_StickyAction::StickyBroadcastProto_StickyAction(const StickyBroadcastProto_StickyAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      intents_(from.intents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.StickyBroadcastProto.StickyAction)
}

void StickyBroadcastProto_StickyAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StickyBroadcastProto_StickyAction::~StickyBroadcastProto_StickyAction() {
  // @@protoc_insertion_point(destructor:com.android.server.am.StickyBroadcastProto.StickyAction)
  SharedDtor();
}

void StickyBroadcastProto_StickyAction::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StickyBroadcastProto_StickyAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StickyBroadcastProto_StickyAction& StickyBroadcastProto_StickyAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StickyBroadcastProto_StickyAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void StickyBroadcastProto_StickyAction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intents_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StickyBroadcastProto_StickyAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.am.StickyBroadcastProto.StickyAction.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.content.IntentProto intents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_intents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StickyBroadcastProto_StickyAction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.StickyBroadcastProto.StickyAction.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.content.IntentProto intents = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.StickyBroadcastProto.StickyAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.StickyBroadcastProto.StickyAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StickyBroadcastProto_StickyAction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.StickyBroadcastProto.StickyAction.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .android.content.IntentProto intents = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->intents(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.StickyBroadcastProto.StickyAction)
}

::PROTOBUF_NAMESPACE_ID::uint8* StickyBroadcastProto_StickyAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.StickyBroadcastProto.StickyAction.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .android.content.IntentProto intents = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->intents(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.StickyBroadcastProto.StickyAction)
  return target;
}

size_t StickyBroadcastProto_StickyAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.content.IntentProto intents = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->intents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->intents(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StickyBroadcastProto_StickyAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  GOOGLE_DCHECK_NE(&from, this);
  const StickyBroadcastProto_StickyAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StickyBroadcastProto_StickyAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.StickyBroadcastProto.StickyAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.StickyBroadcastProto.StickyAction)
    MergeFrom(*source);
  }
}

void StickyBroadcastProto_StickyAction::MergeFrom(const StickyBroadcastProto_StickyAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intents_.MergeFrom(from.intents_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void StickyBroadcastProto_StickyAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StickyBroadcastProto_StickyAction::CopyFrom(const StickyBroadcastProto_StickyAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.StickyBroadcastProto.StickyAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StickyBroadcastProto_StickyAction::IsInitialized() const {
  return true;
}

void StickyBroadcastProto_StickyAction::InternalSwap(StickyBroadcastProto_StickyAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&intents_)->InternalSwap(CastToBase(&other->intents_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StickyBroadcastProto_StickyAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StickyBroadcastProto::InitAsDefaultInstance() {
}
class StickyBroadcastProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StickyBroadcastProto>()._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StickyBroadcastProto::StickyBroadcastProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.StickyBroadcastProto)
}
StickyBroadcastProto::StickyBroadcastProto(const StickyBroadcastProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_ = from.user_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.StickyBroadcastProto)
}

void StickyBroadcastProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  user_ = 0;
}

StickyBroadcastProto::~StickyBroadcastProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.StickyBroadcastProto)
  SharedDtor();
}

void StickyBroadcastProto::SharedDtor() {
}

void StickyBroadcastProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StickyBroadcastProto& StickyBroadcastProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StickyBroadcastProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void StickyBroadcastProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.StickyBroadcastProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  user_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StickyBroadcastProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user(&has_bits);
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.StickyBroadcastProto.StickyAction actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StickyBroadcastProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.StickyBroadcastProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.StickyBroadcastProto.StickyAction actions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.StickyBroadcastProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.StickyBroadcastProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StickyBroadcastProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.StickyBroadcastProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user(), output);
  }

  // repeated .com.android.server.am.StickyBroadcastProto.StickyAction actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.StickyBroadcastProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* StickyBroadcastProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.StickyBroadcastProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user(), target);
  }

  // repeated .com.android.server.am.StickyBroadcastProto.StickyAction actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->actions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.StickyBroadcastProto)
  return target;
}

size_t StickyBroadcastProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.StickyBroadcastProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.StickyBroadcastProto.StickyAction actions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  // optional int32 user = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->user());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StickyBroadcastProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.StickyBroadcastProto)
  GOOGLE_DCHECK_NE(&from, this);
  const StickyBroadcastProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StickyBroadcastProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.StickyBroadcastProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.StickyBroadcastProto)
    MergeFrom(*source);
  }
}

void StickyBroadcastProto::MergeFrom(const StickyBroadcastProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.StickyBroadcastProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.has_user()) {
    set_user(from.user());
  }
}

void StickyBroadcastProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.StickyBroadcastProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StickyBroadcastProto::CopyFrom(const StickyBroadcastProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.StickyBroadcastProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StickyBroadcastProto::IsInitialized() const {
  return true;
}

void StickyBroadcastProto::InternalSwap(StickyBroadcastProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StickyBroadcastProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpServicesProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpServicesProto_default_instance_._instance.get_mutable()->active_services_ = const_cast< ::com::android::server::am::ActiveServicesProto*>(
      ::com::android::server::am::ActiveServicesProto::internal_default_instance());
}
class ActivityManagerServiceDumpServicesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpServicesProto>()._has_bits_);
  static const ::com::android::server::am::ActiveServicesProto& active_services(const ActivityManagerServiceDumpServicesProto* msg);
  static void set_has_active_services(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::am::ActiveServicesProto&
ActivityManagerServiceDumpServicesProto::_Internal::active_services(const ActivityManagerServiceDumpServicesProto* msg) {
  return *msg->active_services_;
}
ActivityManagerServiceDumpServicesProto::ActivityManagerServiceDumpServicesProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpServicesProto)
}
ActivityManagerServiceDumpServicesProto::ActivityManagerServiceDumpServicesProto(const ActivityManagerServiceDumpServicesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_active_services()) {
    active_services_ = new ::com::android::server::am::ActiveServicesProto(*from.active_services_);
  } else {
    active_services_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpServicesProto)
}

void ActivityManagerServiceDumpServicesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  active_services_ = nullptr;
}

ActivityManagerServiceDumpServicesProto::~ActivityManagerServiceDumpServicesProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  SharedDtor();
}

void ActivityManagerServiceDumpServicesProto::SharedDtor() {
  if (this != internal_default_instance()) delete active_services_;
}

void ActivityManagerServiceDumpServicesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpServicesProto& ActivityManagerServiceDumpServicesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpServicesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(active_services_ != nullptr);
    active_services_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpServicesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.am.ActiveServicesProto active_services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_active_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpServicesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.am.ActiveServicesProto active_services = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpServicesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActiveServicesProto active_services = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::active_services(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpServicesProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpServicesProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActiveServicesProto active_services = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::active_services(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  return target;
}

size_t ActivityManagerServiceDumpServicesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.android.server.am.ActiveServicesProto active_services = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_services_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpServicesProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpServicesProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpServicesProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpServicesProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpServicesProto)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpServicesProto::MergeFrom(const ActivityManagerServiceDumpServicesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_active_services()) {
    mutable_active_services()->::com::android::server::am::ActiveServicesProto::MergeFrom(from.active_services());
  }
}

void ActivityManagerServiceDumpServicesProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpServicesProto::CopyFrom(const ActivityManagerServiceDumpServicesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpServicesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpServicesProto::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpServicesProto::InternalSwap(ActivityManagerServiceDumpServicesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(active_services_, other->active_services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpServicesProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActiveServicesProto_ServicesByUser::InitAsDefaultInstance() {
}
class ActiveServicesProto_ServicesByUser::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveServicesProto_ServicesByUser>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActiveServicesProto_ServicesByUser::ActiveServicesProto_ServicesByUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActiveServicesProto.ServicesByUser)
}
ActiveServicesProto_ServicesByUser::ActiveServicesProto_ServicesByUser(const ActiveServicesProto_ServicesByUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      service_records_(from.service_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActiveServicesProto.ServicesByUser)
}

void ActiveServicesProto_ServicesByUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  user_id_ = 0;
}

ActiveServicesProto_ServicesByUser::~ActiveServicesProto_ServicesByUser() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActiveServicesProto.ServicesByUser)
  SharedDtor();
}

void ActiveServicesProto_ServicesByUser::SharedDtor() {
}

void ActiveServicesProto_ServicesByUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveServicesProto_ServicesByUser& ActiveServicesProto_ServicesByUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveServicesProto_ServicesByUser_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActiveServicesProto_ServicesByUser::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_records_.Clear();
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveServicesProto_ServicesByUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ServiceRecordProto service_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_service_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveServicesProto_ServicesByUser::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ServiceRecordProto service_records = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_service_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActiveServicesProto.ServicesByUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActiveServicesProto.ServicesByUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveServicesProto_ServicesByUser::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // repeated .com.android.server.am.ServiceRecordProto service_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->service_records_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->service_records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActiveServicesProto.ServicesByUser)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveServicesProto_ServicesByUser::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // repeated .com.android.server.am.ServiceRecordProto service_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->service_records_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->service_records(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActiveServicesProto.ServicesByUser)
  return target;
}

size_t ActiveServicesProto_ServicesByUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ServiceRecordProto service_records = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->service_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->service_records(static_cast<int>(i)));
    }
  }

  // optional int32 user_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveServicesProto_ServicesByUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveServicesProto_ServicesByUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveServicesProto_ServicesByUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActiveServicesProto.ServicesByUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActiveServicesProto.ServicesByUser)
    MergeFrom(*source);
  }
}

void ActiveServicesProto_ServicesByUser::MergeFrom(const ActiveServicesProto_ServicesByUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_records_.MergeFrom(from.service_records_);
  if (from.has_user_id()) {
    set_user_id(from.user_id());
  }
}

void ActiveServicesProto_ServicesByUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveServicesProto_ServicesByUser::CopyFrom(const ActiveServicesProto_ServicesByUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActiveServicesProto.ServicesByUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveServicesProto_ServicesByUser::IsInitialized() const {
  return true;
}

void ActiveServicesProto_ServicesByUser::InternalSwap(ActiveServicesProto_ServicesByUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&service_records_)->InternalSwap(CastToBase(&other->service_records_));
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveServicesProto_ServicesByUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActiveServicesProto::InitAsDefaultInstance() {
}
class ActiveServicesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveServicesProto>()._has_bits_);
};

ActiveServicesProto::ActiveServicesProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActiveServicesProto)
}
ActiveServicesProto::ActiveServicesProto(const ActiveServicesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      services_by_users_(from.services_by_users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActiveServicesProto)
}

void ActiveServicesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
}

ActiveServicesProto::~ActiveServicesProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActiveServicesProto)
  SharedDtor();
}

void ActiveServicesProto::SharedDtor() {
}

void ActiveServicesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveServicesProto& ActiveServicesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActiveServicesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActiveServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_by_users_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveServicesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.am.ActiveServicesProto.ServicesByUser services_by_users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_services_by_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveServicesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActiveServicesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.am.ActiveServicesProto.ServicesByUser services_by_users = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_services_by_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActiveServicesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActiveServicesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveServicesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActiveServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ActiveServicesProto.ServicesByUser services_by_users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_by_users_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->services_by_users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActiveServicesProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveServicesProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActiveServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ActiveServicesProto.ServicesByUser services_by_users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_by_users_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->services_by_users(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActiveServicesProto)
  return target;
}

size_t ActiveServicesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActiveServicesProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ActiveServicesProto.ServicesByUser services_by_users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->services_by_users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->services_by_users(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveServicesProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActiveServicesProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveServicesProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveServicesProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActiveServicesProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActiveServicesProto)
    MergeFrom(*source);
  }
}

void ActiveServicesProto::MergeFrom(const ActiveServicesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActiveServicesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_by_users_.MergeFrom(from.services_by_users_);
}

void ActiveServicesProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActiveServicesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveServicesProto::CopyFrom(const ActiveServicesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActiveServicesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveServicesProto::IsInitialized() const {
  return true;
}

void ActiveServicesProto::InternalSwap(ActiveServicesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&services_by_users_)->InternalSwap(CastToBase(&other->services_by_users_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveServicesProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrantUriProto::InitAsDefaultInstance() {
}
class GrantUriProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GrantUriProto>()._has_bits_);
  static void set_has_source_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GrantUriProto::GrantUriProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.GrantUriProto)
}
GrantUriProto::GrantUriProto(const GrantUriProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  source_user_id_ = from.source_user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.GrantUriProto)
}

void GrantUriProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_user_id_ = 0;
}

GrantUriProto::~GrantUriProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.GrantUriProto)
  SharedDtor();
}

void GrantUriProto::SharedDtor() {
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GrantUriProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrantUriProto& GrantUriProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrantUriProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void GrantUriProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.GrantUriProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uri_.ClearNonDefaultToEmptyNoArena();
  }
  source_user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GrantUriProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_user_id(&has_bits);
          source_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uri = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_uri(), ptr, ctx, "com.android.server.am.GrantUriProto.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GrantUriProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.GrantUriProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 source_user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_source_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uri = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.GrantUriProto.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.GrantUriProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.GrantUriProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GrantUriProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.GrantUriProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->source_user_id(), output);
  }

  // optional string uri = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.GrantUriProto.uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.GrantUriProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantUriProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.GrantUriProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->source_user_id(), target);
  }

  // optional string uri = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.GrantUriProto.uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.GrantUriProto)
  return target;
}

size_t GrantUriProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.GrantUriProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uri = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional int32 source_user_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantUriProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.GrantUriProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantUriProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantUriProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.GrantUriProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.GrantUriProto)
    MergeFrom(*source);
  }
}

void GrantUriProto::MergeFrom(const GrantUriProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.GrantUriProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      source_user_id_ = from.source_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GrantUriProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.GrantUriProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantUriProto::CopyFrom(const GrantUriProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.GrantUriProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantUriProto::IsInitialized() const {
  return true;
}

void GrantUriProto::InternalSwap(GrantUriProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_user_id_, other->source_user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantUriProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NeededUriGrantsProto::InitAsDefaultInstance() {
}
class NeededUriGrantsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NeededUriGrantsProto>()._has_bits_);
  static void set_has_target_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NeededUriGrantsProto::NeededUriGrantsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.NeededUriGrantsProto)
}
NeededUriGrantsProto::NeededUriGrantsProto(const NeededUriGrantsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      grants_(from.grants_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_package()) {
    target_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_package_);
  }
  ::memcpy(&target_uid_, &from.target_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&target_uid_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.NeededUriGrantsProto)
}

void NeededUriGrantsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  target_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&target_uid_)) + sizeof(flags_));
}

NeededUriGrantsProto::~NeededUriGrantsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.NeededUriGrantsProto)
  SharedDtor();
}

void NeededUriGrantsProto::SharedDtor() {
  target_package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NeededUriGrantsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NeededUriGrantsProto& NeededUriGrantsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NeededUriGrantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void NeededUriGrantsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.NeededUriGrantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grants_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    target_package_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&target_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&target_uid_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NeededUriGrantsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string target_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_target_package(), ptr, ctx, "com.android.server.am.NeededUriGrantsProto.target_package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_uid(&has_bits);
          target_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.GrantUriProto grants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_grants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NeededUriGrantsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.NeededUriGrantsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target_package = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target_package()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_package().data(), static_cast<int>(this->target_package().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.NeededUriGrantsProto.target_package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_target_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.GrantUriProto grants = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_grants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.NeededUriGrantsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.NeededUriGrantsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NeededUriGrantsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.NeededUriGrantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string target_package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_package().data(), static_cast<int>(this->target_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.NeededUriGrantsProto.target_package");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_package(), output);
  }

  // optional int32 target_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->target_uid(), output);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // repeated .com.android.server.am.GrantUriProto grants = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grants_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->grants(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.NeededUriGrantsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* NeededUriGrantsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.NeededUriGrantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string target_package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_package().data(), static_cast<int>(this->target_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.NeededUriGrantsProto.target_package");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->target_package(), target);
  }

  // optional int32 target_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->target_uid(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  // repeated .com.android.server.am.GrantUriProto grants = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grants_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->grants(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.NeededUriGrantsProto)
  return target;
}

size_t NeededUriGrantsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.NeededUriGrantsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.GrantUriProto grants = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->grants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->grants(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string target_package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->target_package());
    }

    // optional int32 target_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->target_uid());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeededUriGrantsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.NeededUriGrantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NeededUriGrantsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NeededUriGrantsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.NeededUriGrantsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.NeededUriGrantsProto)
    MergeFrom(*source);
  }
}

void NeededUriGrantsProto::MergeFrom(const NeededUriGrantsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.NeededUriGrantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grants_.MergeFrom(from.grants_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      target_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_package_);
    }
    if (cached_has_bits & 0x00000002u) {
      target_uid_ = from.target_uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NeededUriGrantsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.NeededUriGrantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeededUriGrantsProto::CopyFrom(const NeededUriGrantsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.NeededUriGrantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeededUriGrantsProto::IsInitialized() const {
  return true;
}

void NeededUriGrantsProto::InternalSwap(NeededUriGrantsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&grants_)->InternalSwap(CastToBase(&other->grants_));
  target_package_.Swap(&other->target_package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_uid_, other->target_uid_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeededUriGrantsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UriPermissionOwnerProto::InitAsDefaultInstance() {
}
class UriPermissionOwnerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UriPermissionOwnerProto>()._has_bits_);
  static void set_has_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UriPermissionOwnerProto::UriPermissionOwnerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.UriPermissionOwnerProto)
}
UriPermissionOwnerProto::UriPermissionOwnerProto(const UriPermissionOwnerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      read_perms_(from.read_perms_),
      write_perms_(from.write_perms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_owner()) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.UriPermissionOwnerProto)
}

void UriPermissionOwnerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UriPermissionOwnerProto::~UriPermissionOwnerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.UriPermissionOwnerProto)
  SharedDtor();
}

void UriPermissionOwnerProto::SharedDtor() {
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UriPermissionOwnerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UriPermissionOwnerProto& UriPermissionOwnerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UriPermissionOwnerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void UriPermissionOwnerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.UriPermissionOwnerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_perms_.Clear();
  write_perms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    owner_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UriPermissionOwnerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_owner(), ptr, ctx, "com.android.server.am.UriPermissionOwnerProto.owner");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.GrantUriProto read_perms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_read_perms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.GrantUriProto write_perms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_write_perms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UriPermissionOwnerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.UriPermissionOwnerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string owner = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner().data(), static_cast<int>(this->owner().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.UriPermissionOwnerProto.owner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.GrantUriProto read_perms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_read_perms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.GrantUriProto write_perms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_write_perms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.UriPermissionOwnerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.UriPermissionOwnerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UriPermissionOwnerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.UriPermissionOwnerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string owner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.UriPermissionOwnerProto.owner");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->owner(), output);
  }

  // repeated .com.android.server.am.GrantUriProto read_perms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_perms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->read_perms(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.GrantUriProto write_perms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_perms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->write_perms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.UriPermissionOwnerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* UriPermissionOwnerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.UriPermissionOwnerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string owner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.UriPermissionOwnerProto.owner");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->owner(), target);
  }

  // repeated .com.android.server.am.GrantUriProto read_perms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_perms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->read_perms(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.GrantUriProto write_perms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_perms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->write_perms(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.UriPermissionOwnerProto)
  return target;
}

size_t UriPermissionOwnerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.UriPermissionOwnerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.GrantUriProto read_perms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->read_perms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->read_perms(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.GrantUriProto write_perms = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->write_perms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->write_perms(static_cast<int>(i)));
    }
  }

  // optional string owner = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->owner());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UriPermissionOwnerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.UriPermissionOwnerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UriPermissionOwnerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UriPermissionOwnerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.UriPermissionOwnerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.UriPermissionOwnerProto)
    MergeFrom(*source);
  }
}

void UriPermissionOwnerProto::MergeFrom(const UriPermissionOwnerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.UriPermissionOwnerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_perms_.MergeFrom(from.read_perms_);
  write_perms_.MergeFrom(from.write_perms_);
  if (from.has_owner()) {
    _has_bits_[0] |= 0x00000001u;
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
}

void UriPermissionOwnerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.UriPermissionOwnerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UriPermissionOwnerProto::CopyFrom(const UriPermissionOwnerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.UriPermissionOwnerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UriPermissionOwnerProto::IsInitialized() const {
  return true;
}

void UriPermissionOwnerProto::InternalSwap(UriPermissionOwnerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&read_perms_)->InternalSwap(CastToBase(&other->read_perms_));
  CastToBase(&write_perms_)->InternalSwap(CastToBase(&other->write_perms_));
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UriPermissionOwnerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRecordProto_AppInfo::InitAsDefaultInstance() {
}
class ServiceRecordProto_AppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRecordProto_AppInfo>()._has_bits_);
  static void set_has_base_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_res_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ServiceRecordProto_AppInfo::ServiceRecordProto_AppInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ServiceRecordProto.AppInfo)
}
ServiceRecordProto_AppInfo::ServiceRecordProto_AppInfo(const ServiceRecordProto_AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_dir()) {
    base_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_dir_);
  }
  res_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_res_dir()) {
    res_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_dir_);
  }
  data_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_dir()) {
    data_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_dir_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ServiceRecordProto.AppInfo)
}

void ServiceRecordProto_AppInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  base_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceRecordProto_AppInfo::~ServiceRecordProto_AppInfo() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ServiceRecordProto.AppInfo)
  SharedDtor();
}

void ServiceRecordProto_AppInfo::SharedDtor() {
  base_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceRecordProto_AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRecordProto_AppInfo& ServiceRecordProto_AppInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRecordProto_AppInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceRecordProto_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ServiceRecordProto.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      base_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      res_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_dir_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceRecordProto_AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string base_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_base_dir(), ptr, ctx, "com.android.server.am.ServiceRecordProto.AppInfo.base_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string res_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_res_dir(), ptr, ctx, "com.android.server.am.ServiceRecordProto.AppInfo.res_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_data_dir(), ptr, ctx, "com.android.server.am.ServiceRecordProto.AppInfo.data_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceRecordProto_AppInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ServiceRecordProto.AppInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string base_dir = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_base_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_dir().data(), static_cast<int>(this->base_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ServiceRecordProto.AppInfo.base_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string res_dir = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_res_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_dir().data(), static_cast<int>(this->res_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ServiceRecordProto.AppInfo.res_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_dir = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_data_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_dir().data(), static_cast<int>(this->data_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ServiceRecordProto.AppInfo.data_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ServiceRecordProto.AppInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ServiceRecordProto.AppInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceRecordProto_AppInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ServiceRecordProto.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string base_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_dir().data(), static_cast<int>(this->base_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.AppInfo.base_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->base_dir(), output);
  }

  // optional string res_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_dir().data(), static_cast<int>(this->res_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.AppInfo.res_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->res_dir(), output);
  }

  // optional string data_dir = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_dir().data(), static_cast<int>(this->data_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.AppInfo.data_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data_dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ServiceRecordProto.AppInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRecordProto_AppInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ServiceRecordProto.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string base_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_dir().data(), static_cast<int>(this->base_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.AppInfo.base_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->base_dir(), target);
  }

  // optional string res_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_dir().data(), static_cast<int>(this->res_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.AppInfo.res_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->res_dir(), target);
  }

  // optional string data_dir = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_dir().data(), static_cast<int>(this->data_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.AppInfo.data_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->data_dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ServiceRecordProto.AppInfo)
  return target;
}

size_t ServiceRecordProto_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ServiceRecordProto.AppInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string base_dir = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->base_dir());
    }

    // optional string res_dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->res_dir());
    }

    // optional string data_dir = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->data_dir());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRecordProto_AppInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ServiceRecordProto.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRecordProto_AppInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRecordProto_AppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ServiceRecordProto.AppInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ServiceRecordProto.AppInfo)
    MergeFrom(*source);
  }
}

void ServiceRecordProto_AppInfo::MergeFrom(const ServiceRecordProto_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ServiceRecordProto.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      base_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      res_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_dir_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      data_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_dir_);
    }
  }
}

void ServiceRecordProto_AppInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ServiceRecordProto.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRecordProto_AppInfo::CopyFrom(const ServiceRecordProto_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ServiceRecordProto.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRecordProto_AppInfo::IsInitialized() const {
  return true;
}

void ServiceRecordProto_AppInfo::InternalSwap(ServiceRecordProto_AppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_dir_.Swap(&other->base_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  res_dir_.Swap(&other->res_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_dir_.Swap(&other->data_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRecordProto_AppInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRecordProto_Foreground::InitAsDefaultInstance() {
  ::com::android::server::am::_ServiceRecordProto_Foreground_default_instance_._instance.get_mutable()->notification_ = const_cast< ::android::app::NotificationProto*>(
      ::android::app::NotificationProto::internal_default_instance());
}
class ServiceRecordProto_Foreground::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRecordProto_Foreground>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::app::NotificationProto& notification(const ServiceRecordProto_Foreground* msg);
  static void set_has_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::app::NotificationProto&
ServiceRecordProto_Foreground::_Internal::notification(const ServiceRecordProto_Foreground* msg) {
  return *msg->notification_;
}
void ServiceRecordProto_Foreground::clear_notification() {
  if (notification_ != nullptr) notification_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ServiceRecordProto_Foreground::ServiceRecordProto_Foreground()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ServiceRecordProto.Foreground)
}
ServiceRecordProto_Foreground::ServiceRecordProto_Foreground(const ServiceRecordProto_Foreground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_notification()) {
    notification_ = new ::android::app::NotificationProto(*from.notification_);
  } else {
    notification_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ServiceRecordProto.Foreground)
}

void ServiceRecordProto_Foreground::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&notification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&notification_)) + sizeof(id_));
}

ServiceRecordProto_Foreground::~ServiceRecordProto_Foreground() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ServiceRecordProto.Foreground)
  SharedDtor();
}

void ServiceRecordProto_Foreground::SharedDtor() {
  if (this != internal_default_instance()) delete notification_;
}

void ServiceRecordProto_Foreground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRecordProto_Foreground& ServiceRecordProto_Foreground::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRecordProto_Foreground_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceRecordProto_Foreground::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ServiceRecordProto.Foreground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(notification_ != nullptr);
    notification_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceRecordProto_Foreground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.NotificationProto notification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceRecordProto_Foreground::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ServiceRecordProto.Foreground)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.NotificationProto notification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ServiceRecordProto.Foreground)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ServiceRecordProto.Foreground)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceRecordProto_Foreground::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ServiceRecordProto.Foreground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .android.app.NotificationProto notification = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::notification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ServiceRecordProto.Foreground)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRecordProto_Foreground::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ServiceRecordProto.Foreground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .android.app.NotificationProto notification = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::notification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ServiceRecordProto.Foreground)
  return target;
}

size_t ServiceRecordProto_Foreground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ServiceRecordProto.Foreground)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.app.NotificationProto notification = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRecordProto_Foreground::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ServiceRecordProto.Foreground)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRecordProto_Foreground* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRecordProto_Foreground>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ServiceRecordProto.Foreground)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ServiceRecordProto.Foreground)
    MergeFrom(*source);
  }
}

void ServiceRecordProto_Foreground::MergeFrom(const ServiceRecordProto_Foreground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ServiceRecordProto.Foreground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_notification()->::android::app::NotificationProto::MergeFrom(from.notification());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceRecordProto_Foreground::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ServiceRecordProto.Foreground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRecordProto_Foreground::CopyFrom(const ServiceRecordProto_Foreground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ServiceRecordProto.Foreground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRecordProto_Foreground::IsInitialized() const {
  return true;
}

void ServiceRecordProto_Foreground::InternalSwap(ServiceRecordProto_Foreground* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(notification_, other->notification_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRecordProto_Foreground::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRecordProto_Start::InitAsDefaultInstance() {
}
class ServiceRecordProto_Start::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRecordProto_Start>()._has_bits_);
  static void set_has_start_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delayed_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_if_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_call_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_start_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ServiceRecordProto_Start::ServiceRecordProto_Start()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ServiceRecordProto.Start)
}
ServiceRecordProto_Start::ServiceRecordProto_Start(const ServiceRecordProto_Start& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_requested_, &from.start_requested_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_start_id_) -
    reinterpret_cast<char*>(&start_requested_)) + sizeof(last_start_id_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ServiceRecordProto.Start)
}

void ServiceRecordProto_Start::SharedCtor() {
  ::memset(&start_requested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_start_id_) -
      reinterpret_cast<char*>(&start_requested_)) + sizeof(last_start_id_));
}

ServiceRecordProto_Start::~ServiceRecordProto_Start() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ServiceRecordProto.Start)
  SharedDtor();
}

void ServiceRecordProto_Start::SharedDtor() {
}

void ServiceRecordProto_Start::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRecordProto_Start& ServiceRecordProto_Start::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRecordProto_Start_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceRecordProto_Start::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ServiceRecordProto.Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&start_requested_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_start_id_) -
        reinterpret_cast<char*>(&start_requested_)) + sizeof(last_start_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceRecordProto_Start::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool start_requested = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_requested(&has_bits);
          start_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delayed_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delayed_stop(&has_bits);
          delayed_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stop_if_killed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stop_if_killed(&has_bits);
          stop_if_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool call_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_call_start(&has_bits);
          call_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_start_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_start_id(&has_bits);
          last_start_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceRecordProto_Start::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ServiceRecordProto.Start)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool start_requested = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_requested(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delayed_stop = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_delayed_stop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delayed_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stop_if_killed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_stop_if_killed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_if_killed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool call_start = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_call_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_start_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_start_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_start_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ServiceRecordProto.Start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ServiceRecordProto.Start)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceRecordProto_Start::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ServiceRecordProto.Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_requested = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->start_requested(), output);
  }

  // optional bool delayed_stop = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->delayed_stop(), output);
  }

  // optional bool stop_if_killed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->stop_if_killed(), output);
  }

  // optional bool call_start = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->call_start(), output);
  }

  // optional int32 last_start_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->last_start_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ServiceRecordProto.Start)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRecordProto_Start::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ServiceRecordProto.Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_requested = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->start_requested(), target);
  }

  // optional bool delayed_stop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->delayed_stop(), target);
  }

  // optional bool stop_if_killed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->stop_if_killed(), target);
  }

  // optional bool call_start = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->call_start(), target);
  }

  // optional int32 last_start_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->last_start_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ServiceRecordProto.Start)
  return target;
}

size_t ServiceRecordProto_Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ServiceRecordProto.Start)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool start_requested = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool delayed_stop = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool stop_if_killed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool call_start = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 last_start_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_start_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRecordProto_Start::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ServiceRecordProto.Start)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRecordProto_Start* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRecordProto_Start>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ServiceRecordProto.Start)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ServiceRecordProto.Start)
    MergeFrom(*source);
  }
}

void ServiceRecordProto_Start::MergeFrom(const ServiceRecordProto_Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ServiceRecordProto.Start)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      start_requested_ = from.start_requested_;
    }
    if (cached_has_bits & 0x00000002u) {
      delayed_stop_ = from.delayed_stop_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_if_killed_ = from.stop_if_killed_;
    }
    if (cached_has_bits & 0x00000008u) {
      call_start_ = from.call_start_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_start_id_ = from.last_start_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceRecordProto_Start::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ServiceRecordProto.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRecordProto_Start::CopyFrom(const ServiceRecordProto_Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ServiceRecordProto.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRecordProto_Start::IsInitialized() const {
  return true;
}

void ServiceRecordProto_Start::InternalSwap(ServiceRecordProto_Start* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_requested_, other->start_requested_);
  swap(delayed_stop_, other->delayed_stop_);
  swap(stop_if_killed_, other->stop_if_killed_);
  swap(call_start_, other->call_start_);
  swap(last_start_id_, other->last_start_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRecordProto_Start::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRecordProto_ExecuteNesting::InitAsDefaultInstance() {
  ::com::android::server::am::_ServiceRecordProto_ExecuteNesting_default_instance_._instance.get_mutable()->executing_start_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
}
class ServiceRecordProto_ExecuteNesting::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRecordProto_ExecuteNesting>()._has_bits_);
  static void set_has_execute_nesting(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_execute_fg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::util::Duration& executing_start(const ServiceRecordProto_ExecuteNesting* msg);
  static void set_has_executing_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::util::Duration&
ServiceRecordProto_ExecuteNesting::_Internal::executing_start(const ServiceRecordProto_ExecuteNesting* msg) {
  return *msg->executing_start_;
}
void ServiceRecordProto_ExecuteNesting::clear_executing_start() {
  if (executing_start_ != nullptr) executing_start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ServiceRecordProto_ExecuteNesting::ServiceRecordProto_ExecuteNesting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ServiceRecordProto.ExecuteNesting)
}
ServiceRecordProto_ExecuteNesting::ServiceRecordProto_ExecuteNesting(const ServiceRecordProto_ExecuteNesting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_executing_start()) {
    executing_start_ = new ::android::util::Duration(*from.executing_start_);
  } else {
    executing_start_ = nullptr;
  }
  ::memcpy(&execute_nesting_, &from.execute_nesting_,
    static_cast<size_t>(reinterpret_cast<char*>(&execute_fg_) -
    reinterpret_cast<char*>(&execute_nesting_)) + sizeof(execute_fg_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ServiceRecordProto.ExecuteNesting)
}

void ServiceRecordProto_ExecuteNesting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&executing_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_fg_) -
      reinterpret_cast<char*>(&executing_start_)) + sizeof(execute_fg_));
}

ServiceRecordProto_ExecuteNesting::~ServiceRecordProto_ExecuteNesting() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  SharedDtor();
}

void ServiceRecordProto_ExecuteNesting::SharedDtor() {
  if (this != internal_default_instance()) delete executing_start_;
}

void ServiceRecordProto_ExecuteNesting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRecordProto_ExecuteNesting& ServiceRecordProto_ExecuteNesting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRecordProto_ExecuteNesting_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceRecordProto_ExecuteNesting::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(executing_start_ != nullptr);
    executing_start_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&execute_nesting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execute_fg_) -
        reinterpret_cast<char*>(&execute_nesting_)) + sizeof(execute_fg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceRecordProto_ExecuteNesting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 execute_nesting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_execute_nesting(&has_bits);
          execute_nesting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool execute_fg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_execute_fg(&has_bits);
          execute_fg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration executing_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_executing_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceRecordProto_ExecuteNesting::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 execute_nesting = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_execute_nesting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &execute_nesting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool execute_fg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_execute_fg(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &execute_fg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration executing_start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_executing_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceRecordProto_ExecuteNesting::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 execute_nesting = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->execute_nesting(), output);
  }

  // optional bool execute_fg = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->execute_fg(), output);
  }

  // optional .android.util.Duration executing_start = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::executing_start(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ServiceRecordProto.ExecuteNesting)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRecordProto_ExecuteNesting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 execute_nesting = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->execute_nesting(), target);
  }

  // optional bool execute_fg = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->execute_fg(), target);
  }

  // optional .android.util.Duration executing_start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::executing_start(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  return target;
}

size_t ServiceRecordProto_ExecuteNesting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.util.Duration executing_start = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *executing_start_);
    }

    // optional int32 execute_nesting = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->execute_nesting());
    }

    // optional bool execute_fg = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRecordProto_ExecuteNesting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRecordProto_ExecuteNesting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRecordProto_ExecuteNesting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ServiceRecordProto.ExecuteNesting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ServiceRecordProto.ExecuteNesting)
    MergeFrom(*source);
  }
}

void ServiceRecordProto_ExecuteNesting::MergeFrom(const ServiceRecordProto_ExecuteNesting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_executing_start()->::android::util::Duration::MergeFrom(from.executing_start());
    }
    if (cached_has_bits & 0x00000002u) {
      execute_nesting_ = from.execute_nesting_;
    }
    if (cached_has_bits & 0x00000004u) {
      execute_fg_ = from.execute_fg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceRecordProto_ExecuteNesting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRecordProto_ExecuteNesting::CopyFrom(const ServiceRecordProto_ExecuteNesting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ServiceRecordProto.ExecuteNesting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRecordProto_ExecuteNesting::IsInitialized() const {
  return true;
}

void ServiceRecordProto_ExecuteNesting::InternalSwap(ServiceRecordProto_ExecuteNesting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(executing_start_, other->executing_start_);
  swap(execute_nesting_, other->execute_nesting_);
  swap(execute_fg_, other->execute_fg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRecordProto_ExecuteNesting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRecordProto_Crash::InitAsDefaultInstance() {
  ::com::android::server::am::_ServiceRecordProto_Crash_default_instance_._instance.get_mutable()->restart_delay_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_Crash_default_instance_._instance.get_mutable()->next_restart_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
}
class ServiceRecordProto_Crash::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRecordProto_Crash>()._has_bits_);
  static void set_has_restart_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::util::Duration& restart_delay(const ServiceRecordProto_Crash* msg);
  static void set_has_restart_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::util::Duration& next_restart_time(const ServiceRecordProto_Crash* msg);
  static void set_has_next_restart_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crash_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::util::Duration&
ServiceRecordProto_Crash::_Internal::restart_delay(const ServiceRecordProto_Crash* msg) {
  return *msg->restart_delay_;
}
const ::android::util::Duration&
ServiceRecordProto_Crash::_Internal::next_restart_time(const ServiceRecordProto_Crash* msg) {
  return *msg->next_restart_time_;
}
void ServiceRecordProto_Crash::clear_restart_delay() {
  if (restart_delay_ != nullptr) restart_delay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceRecordProto_Crash::clear_next_restart_time() {
  if (next_restart_time_ != nullptr) next_restart_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ServiceRecordProto_Crash::ServiceRecordProto_Crash()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ServiceRecordProto.Crash)
}
ServiceRecordProto_Crash::ServiceRecordProto_Crash(const ServiceRecordProto_Crash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_restart_delay()) {
    restart_delay_ = new ::android::util::Duration(*from.restart_delay_);
  } else {
    restart_delay_ = nullptr;
  }
  if (from.has_next_restart_time()) {
    next_restart_time_ = new ::android::util::Duration(*from.next_restart_time_);
  } else {
    next_restart_time_ = nullptr;
  }
  ::memcpy(&restart_count_, &from.restart_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&crash_count_) -
    reinterpret_cast<char*>(&restart_count_)) + sizeof(crash_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ServiceRecordProto.Crash)
}

void ServiceRecordProto_Crash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&restart_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crash_count_) -
      reinterpret_cast<char*>(&restart_delay_)) + sizeof(crash_count_));
}

ServiceRecordProto_Crash::~ServiceRecordProto_Crash() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ServiceRecordProto.Crash)
  SharedDtor();
}

void ServiceRecordProto_Crash::SharedDtor() {
  if (this != internal_default_instance()) delete restart_delay_;
  if (this != internal_default_instance()) delete next_restart_time_;
}

void ServiceRecordProto_Crash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRecordProto_Crash& ServiceRecordProto_Crash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRecordProto_Crash_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceRecordProto_Crash::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ServiceRecordProto.Crash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(restart_delay_ != nullptr);
      restart_delay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(next_restart_time_ != nullptr);
      next_restart_time_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&restart_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crash_count_) -
        reinterpret_cast<char*>(&restart_count_)) + sizeof(crash_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceRecordProto_Crash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 restart_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_restart_count(&has_bits);
          restart_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration restart_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_restart_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration next_restart_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_next_restart_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crash_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_crash_count(&has_bits);
          crash_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceRecordProto_Crash::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ServiceRecordProto.Crash)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 restart_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_restart_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &restart_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration restart_delay = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_restart_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration next_restart_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_next_restart_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crash_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_crash_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ServiceRecordProto.Crash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ServiceRecordProto.Crash)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceRecordProto_Crash::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ServiceRecordProto.Crash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 restart_count = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->restart_count(), output);
  }

  // optional .android.util.Duration restart_delay = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::restart_delay(this), output);
  }

  // optional .android.util.Duration next_restart_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::next_restart_time(this), output);
  }

  // optional int32 crash_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->crash_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ServiceRecordProto.Crash)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRecordProto_Crash::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ServiceRecordProto.Crash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 restart_count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->restart_count(), target);
  }

  // optional .android.util.Duration restart_delay = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::restart_delay(this), target);
  }

  // optional .android.util.Duration next_restart_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::next_restart_time(this), target);
  }

  // optional int32 crash_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->crash_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ServiceRecordProto.Crash)
  return target;
}

size_t ServiceRecordProto_Crash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ServiceRecordProto.Crash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.util.Duration restart_delay = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restart_delay_);
    }

    // optional .android.util.Duration next_restart_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *next_restart_time_);
    }

    // optional int32 restart_count = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->restart_count());
    }

    // optional int32 crash_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crash_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRecordProto_Crash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ServiceRecordProto.Crash)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRecordProto_Crash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRecordProto_Crash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ServiceRecordProto.Crash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ServiceRecordProto.Crash)
    MergeFrom(*source);
  }
}

void ServiceRecordProto_Crash::MergeFrom(const ServiceRecordProto_Crash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ServiceRecordProto.Crash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_restart_delay()->::android::util::Duration::MergeFrom(from.restart_delay());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_next_restart_time()->::android::util::Duration::MergeFrom(from.next_restart_time());
    }
    if (cached_has_bits & 0x00000004u) {
      restart_count_ = from.restart_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      crash_count_ = from.crash_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceRecordProto_Crash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ServiceRecordProto.Crash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRecordProto_Crash::CopyFrom(const ServiceRecordProto_Crash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ServiceRecordProto.Crash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRecordProto_Crash::IsInitialized() const {
  return true;
}

void ServiceRecordProto_Crash::InternalSwap(ServiceRecordProto_Crash* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(restart_delay_, other->restart_delay_);
  swap(next_restart_time_, other->next_restart_time_);
  swap(restart_count_, other->restart_count_);
  swap(crash_count_, other->crash_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRecordProto_Crash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRecordProto_StartItem::InitAsDefaultInstance() {
  ::com::android::server::am::_ServiceRecordProto_StartItem_default_instance_._instance.get_mutable()->duration_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_StartItem_default_instance_._instance.get_mutable()->intent_ = const_cast< ::android::content::IntentProto*>(
      ::android::content::IntentProto::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_StartItem_default_instance_._instance.get_mutable()->needed_grants_ = const_cast< ::com::android::server::am::NeededUriGrantsProto*>(
      ::com::android::server::am::NeededUriGrantsProto::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_StartItem_default_instance_._instance.get_mutable()->uri_permissions_ = const_cast< ::com::android::server::am::UriPermissionOwnerProto*>(
      ::com::android::server::am::UriPermissionOwnerProto::internal_default_instance());
}
class ServiceRecordProto_StartItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRecordProto_StartItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::util::Duration& duration(const ServiceRecordProto_StartItem* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delivery_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_done_executing_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::content::IntentProto& intent(const ServiceRecordProto_StartItem* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::am::NeededUriGrantsProto& needed_grants(const ServiceRecordProto_StartItem* msg);
  static void set_has_needed_grants(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::am::UriPermissionOwnerProto& uri_permissions(const ServiceRecordProto_StartItem* msg);
  static void set_has_uri_permissions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::util::Duration&
ServiceRecordProto_StartItem::_Internal::duration(const ServiceRecordProto_StartItem* msg) {
  return *msg->duration_;
}
const ::android::content::IntentProto&
ServiceRecordProto_StartItem::_Internal::intent(const ServiceRecordProto_StartItem* msg) {
  return *msg->intent_;
}
const ::com::android::server::am::NeededUriGrantsProto&
ServiceRecordProto_StartItem::_Internal::needed_grants(const ServiceRecordProto_StartItem* msg) {
  return *msg->needed_grants_;
}
const ::com::android::server::am::UriPermissionOwnerProto&
ServiceRecordProto_StartItem::_Internal::uri_permissions(const ServiceRecordProto_StartItem* msg) {
  return *msg->uri_permissions_;
}
void ServiceRecordProto_StartItem::clear_duration() {
  if (duration_ != nullptr) duration_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceRecordProto_StartItem::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ServiceRecordProto_StartItem::ServiceRecordProto_StartItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ServiceRecordProto.StartItem)
}
ServiceRecordProto_StartItem::ServiceRecordProto_StartItem(const ServiceRecordProto_StartItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duration()) {
    duration_ = new ::android::util::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from.has_intent()) {
    intent_ = new ::android::content::IntentProto(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from.has_needed_grants()) {
    needed_grants_ = new ::com::android::server::am::NeededUriGrantsProto(*from.needed_grants_);
  } else {
    needed_grants_ = nullptr;
  }
  if (from.has_uri_permissions()) {
    uri_permissions_ = new ::com::android::server::am::UriPermissionOwnerProto(*from.uri_permissions_);
  } else {
    uri_permissions_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&done_executing_count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(done_executing_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ServiceRecordProto.StartItem)
}

void ServiceRecordProto_StartItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_executing_count_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(done_executing_count_));
}

ServiceRecordProto_StartItem::~ServiceRecordProto_StartItem() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ServiceRecordProto.StartItem)
  SharedDtor();
}

void ServiceRecordProto_StartItem::SharedDtor() {
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete needed_grants_;
  if (this != internal_default_instance()) delete uri_permissions_;
}

void ServiceRecordProto_StartItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRecordProto_StartItem& ServiceRecordProto_StartItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRecordProto_StartItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceRecordProto_StartItem::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ServiceRecordProto.StartItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(duration_ != nullptr);
      duration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(needed_grants_ != nullptr);
      needed_grants_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(uri_permissions_ != nullptr);
      uri_permissions_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&done_executing_count_) -
        reinterpret_cast<char*>(&id_)) + sizeof(done_executing_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceRecordProto_StartItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 delivery_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_delivery_count(&has_bits);
          delivery_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 done_executing_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_done_executing_count(&has_bits);
          done_executing_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.IntentProto intent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.NeededUriGrantsProto needed_grants = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_needed_grants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.UriPermissionOwnerProto uri_permissions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_uri_permissions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceRecordProto_StartItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ServiceRecordProto.StartItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration duration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delivery_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_delivery_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delivery_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 done_executing_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_done_executing_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &done_executing_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.IntentProto intent = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.NeededUriGrantsProto needed_grants = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_needed_grants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.UriPermissionOwnerProto uri_permissions = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uri_permissions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ServiceRecordProto.StartItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ServiceRecordProto.StartItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceRecordProto_StartItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ServiceRecordProto.StartItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .android.util.Duration duration = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::duration(this), output);
  }

  // optional int32 delivery_count = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->delivery_count(), output);
  }

  // optional int32 done_executing_count = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->done_executing_count(), output);
  }

  // optional .android.content.IntentProto intent = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::intent(this), output);
  }

  // optional .com.android.server.am.NeededUriGrantsProto needed_grants = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::needed_grants(this), output);
  }

  // optional .com.android.server.am.UriPermissionOwnerProto uri_permissions = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::uri_permissions(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ServiceRecordProto.StartItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRecordProto_StartItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ServiceRecordProto.StartItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .android.util.Duration duration = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::duration(this), target);
  }

  // optional int32 delivery_count = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->delivery_count(), target);
  }

  // optional int32 done_executing_count = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->done_executing_count(), target);
  }

  // optional .android.content.IntentProto intent = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::intent(this), target);
  }

  // optional .com.android.server.am.NeededUriGrantsProto needed_grants = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::needed_grants(this), target);
  }

  // optional .com.android.server.am.UriPermissionOwnerProto uri_permissions = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::uri_permissions(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ServiceRecordProto.StartItem)
  return target;
}

size_t ServiceRecordProto_StartItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ServiceRecordProto.StartItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.util.Duration duration = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_);
    }

    // optional .android.content.IntentProto intent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .com.android.server.am.NeededUriGrantsProto needed_grants = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *needed_grants_);
    }

    // optional .com.android.server.am.UriPermissionOwnerProto uri_permissions = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uri_permissions_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 delivery_count = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->delivery_count());
    }

    // optional int32 done_executing_count = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->done_executing_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRecordProto_StartItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ServiceRecordProto.StartItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRecordProto_StartItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRecordProto_StartItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ServiceRecordProto.StartItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ServiceRecordProto.StartItem)
    MergeFrom(*source);
  }
}

void ServiceRecordProto_StartItem::MergeFrom(const ServiceRecordProto_StartItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ServiceRecordProto.StartItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_duration()->::android::util::Duration::MergeFrom(from.duration());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_intent()->::android::content::IntentProto::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_needed_grants()->::com::android::server::am::NeededUriGrantsProto::MergeFrom(from.needed_grants());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_uri_permissions()->::com::android::server::am::UriPermissionOwnerProto::MergeFrom(from.uri_permissions());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      delivery_count_ = from.delivery_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      done_executing_count_ = from.done_executing_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceRecordProto_StartItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ServiceRecordProto.StartItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRecordProto_StartItem::CopyFrom(const ServiceRecordProto_StartItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ServiceRecordProto.StartItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRecordProto_StartItem::IsInitialized() const {
  return true;
}

void ServiceRecordProto_StartItem::InternalSwap(ServiceRecordProto_StartItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
  swap(intent_, other->intent_);
  swap(needed_grants_, other->needed_grants_);
  swap(uri_permissions_, other->uri_permissions_);
  swap(id_, other->id_);
  swap(delivery_count_, other->delivery_count_);
  swap(done_executing_count_, other->done_executing_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRecordProto_StartItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRecordProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->intent_ = const_cast< ::android::content::IntentProto*>(
      ::android::content::IntentProto::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->appinfo_ = const_cast< ::com::android::server::am::ServiceRecordProto_AppInfo*>(
      ::com::android::server::am::ServiceRecordProto_AppInfo::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->app_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->isolated_proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->foreground_ = const_cast< ::com::android::server::am::ServiceRecordProto_Foreground*>(
      ::com::android::server::am::ServiceRecordProto_Foreground::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->create_real_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->starting_bg_timeout_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->last_activity_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->restart_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->start_ = const_cast< ::com::android::server::am::ServiceRecordProto_Start*>(
      ::com::android::server::am::ServiceRecordProto_Start::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->execute_ = const_cast< ::com::android::server::am::ServiceRecordProto_ExecuteNesting*>(
      ::com::android::server::am::ServiceRecordProto_ExecuteNesting::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->destory_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_ServiceRecordProto_default_instance_._instance.get_mutable()->crash_ = const_cast< ::com::android::server::am::ServiceRecordProto_Crash*>(
      ::com::android::server::am::ServiceRecordProto_Crash::internal_default_instance());
}
class ServiceRecordProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRecordProto>()._has_bits_);
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_running(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::content::IntentProto& intent(const ServiceRecordProto* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::am::ServiceRecordProto_AppInfo& appinfo(const ServiceRecordProto* msg);
  static void set_has_appinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::android::server::am::ProcessRecordProto& app(const ServiceRecordProto* msg);
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::android::server::am::ProcessRecordProto& isolated_proc(const ServiceRecordProto* msg);
  static void set_has_isolated_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_whitelist_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::com::android::server::am::ServiceRecordProto_Foreground& foreground(const ServiceRecordProto* msg);
  static void set_has_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::util::Duration& create_real_time(const ServiceRecordProto* msg);
  static void set_has_create_real_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::util::Duration& starting_bg_timeout(const ServiceRecordProto* msg);
  static void set_has_starting_bg_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::util::Duration& last_activity_time(const ServiceRecordProto* msg);
  static void set_has_last_activity_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::util::Duration& restart_time(const ServiceRecordProto* msg);
  static void set_has_restart_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_created_from_fg(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::com::android::server::am::ServiceRecordProto_Start& start(const ServiceRecordProto* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::com::android::server::am::ServiceRecordProto_ExecuteNesting& execute(const ServiceRecordProto* msg);
  static void set_has_execute(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::util::Duration& destory_time(const ServiceRecordProto* msg);
  static void set_has_destory_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::com::android::server::am::ServiceRecordProto_Crash& crash(const ServiceRecordProto* msg);
  static void set_has_crash(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_allow_while_in_use_permission_in_fgs(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::android::content::IntentProto&
ServiceRecordProto::_Internal::intent(const ServiceRecordProto* msg) {
  return *msg->intent_;
}
const ::com::android::server::am::ServiceRecordProto_AppInfo&
ServiceRecordProto::_Internal::appinfo(const ServiceRecordProto* msg) {
  return *msg->appinfo_;
}
const ::com::android::server::am::ProcessRecordProto&
ServiceRecordProto::_Internal::app(const ServiceRecordProto* msg) {
  return *msg->app_;
}
const ::com::android::server::am::ProcessRecordProto&
ServiceRecordProto::_Internal::isolated_proc(const ServiceRecordProto* msg) {
  return *msg->isolated_proc_;
}
const ::com::android::server::am::ServiceRecordProto_Foreground&
ServiceRecordProto::_Internal::foreground(const ServiceRecordProto* msg) {
  return *msg->foreground_;
}
const ::android::util::Duration&
ServiceRecordProto::_Internal::create_real_time(const ServiceRecordProto* msg) {
  return *msg->create_real_time_;
}
const ::android::util::Duration&
ServiceRecordProto::_Internal::starting_bg_timeout(const ServiceRecordProto* msg) {
  return *msg->starting_bg_timeout_;
}
const ::android::util::Duration&
ServiceRecordProto::_Internal::last_activity_time(const ServiceRecordProto* msg) {
  return *msg->last_activity_time_;
}
const ::android::util::Duration&
ServiceRecordProto::_Internal::restart_time(const ServiceRecordProto* msg) {
  return *msg->restart_time_;
}
const ::com::android::server::am::ServiceRecordProto_Start&
ServiceRecordProto::_Internal::start(const ServiceRecordProto* msg) {
  return *msg->start_;
}
const ::com::android::server::am::ServiceRecordProto_ExecuteNesting&
ServiceRecordProto::_Internal::execute(const ServiceRecordProto* msg) {
  return *msg->execute_;
}
const ::android::util::Duration&
ServiceRecordProto::_Internal::destory_time(const ServiceRecordProto* msg) {
  return *msg->destory_time_;
}
const ::com::android::server::am::ServiceRecordProto_Crash&
ServiceRecordProto::_Internal::crash(const ServiceRecordProto* msg) {
  return *msg->crash_;
}
void ServiceRecordProto::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ServiceRecordProto::clear_create_real_time() {
  if (create_real_time_ != nullptr) create_real_time_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ServiceRecordProto::clear_starting_bg_timeout() {
  if (starting_bg_timeout_ != nullptr) starting_bg_timeout_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ServiceRecordProto::clear_last_activity_time() {
  if (last_activity_time_ != nullptr) last_activity_time_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ServiceRecordProto::clear_restart_time() {
  if (restart_time_ != nullptr) restart_time_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ServiceRecordProto::clear_destory_time() {
  if (destory_time_ != nullptr) destory_time_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
ServiceRecordProto::ServiceRecordProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ServiceRecordProto)
}
ServiceRecordProto::ServiceRecordProto(const ServiceRecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      delivered_starts_(from.delivered_starts_),
      pending_starts_(from.pending_starts_),
      bindings_(from.bindings_),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_name()) {
    short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
  }
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_permission()) {
    permission_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_);
  }
  if (from.has_intent()) {
    intent_ = new ::android::content::IntentProto(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from.has_appinfo()) {
    appinfo_ = new ::com::android::server::am::ServiceRecordProto_AppInfo(*from.appinfo_);
  } else {
    appinfo_ = nullptr;
  }
  if (from.has_app()) {
    app_ = new ::com::android::server::am::ProcessRecordProto(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from.has_isolated_proc()) {
    isolated_proc_ = new ::com::android::server::am::ProcessRecordProto(*from.isolated_proc_);
  } else {
    isolated_proc_ = nullptr;
  }
  if (from.has_foreground()) {
    foreground_ = new ::com::android::server::am::ServiceRecordProto_Foreground(*from.foreground_);
  } else {
    foreground_ = nullptr;
  }
  if (from.has_create_real_time()) {
    create_real_time_ = new ::android::util::Duration(*from.create_real_time_);
  } else {
    create_real_time_ = nullptr;
  }
  if (from.has_starting_bg_timeout()) {
    starting_bg_timeout_ = new ::android::util::Duration(*from.starting_bg_timeout_);
  } else {
    starting_bg_timeout_ = nullptr;
  }
  if (from.has_last_activity_time()) {
    last_activity_time_ = new ::android::util::Duration(*from.last_activity_time_);
  } else {
    last_activity_time_ = nullptr;
  }
  if (from.has_restart_time()) {
    restart_time_ = new ::android::util::Duration(*from.restart_time_);
  } else {
    restart_time_ = nullptr;
  }
  if (from.has_start()) {
    start_ = new ::com::android::server::am::ServiceRecordProto_Start(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_execute()) {
    execute_ = new ::com::android::server::am::ServiceRecordProto_ExecuteNesting(*from.execute_);
  } else {
    execute_ = nullptr;
  }
  if (from.has_destory_time()) {
    destory_time_ = new ::android::util::Duration(*from.destory_time_);
  } else {
    destory_time_ = nullptr;
  }
  if (from.has_crash()) {
    crash_ = new ::com::android::server::am::ServiceRecordProto_Crash(*from.crash_);
  } else {
    crash_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_while_in_use_permission_in_fgs_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(allow_while_in_use_permission_in_fgs_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ServiceRecordProto)
}

void ServiceRecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_while_in_use_permission_in_fgs_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(allow_while_in_use_permission_in_fgs_));
}

ServiceRecordProto::~ServiceRecordProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ServiceRecordProto)
  SharedDtor();
}

void ServiceRecordProto::SharedDtor() {
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete appinfo_;
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete isolated_proc_;
  if (this != internal_default_instance()) delete foreground_;
  if (this != internal_default_instance()) delete create_real_time_;
  if (this != internal_default_instance()) delete starting_bg_timeout_;
  if (this != internal_default_instance()) delete last_activity_time_;
  if (this != internal_default_instance()) delete restart_time_;
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete execute_;
  if (this != internal_default_instance()) delete destory_time_;
  if (this != internal_default_instance()) delete crash_;
}

void ServiceRecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRecordProto& ServiceRecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ServiceRecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ServiceRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delivered_starts_.Clear();
  pending_starts_.Clear();
  bindings_.Clear();
  connections_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      short_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      process_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      permission_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(appinfo_ != nullptr);
      appinfo_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(app_ != nullptr);
      app_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(isolated_proc_ != nullptr);
      isolated_proc_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(foreground_ != nullptr);
      foreground_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(create_real_time_ != nullptr);
      create_real_time_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(starting_bg_timeout_ != nullptr);
      starting_bg_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(last_activity_time_ != nullptr);
      last_activity_time_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(restart_time_ != nullptr);
      restart_time_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(execute_ != nullptr);
      execute_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(destory_time_ != nullptr);
      destory_time_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(crash_ != nullptr);
    crash_->Clear();
  }
  if (cached_has_bits & 0x007e0000u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_while_in_use_permission_in_fgs_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(allow_while_in_use_permission_in_fgs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceRecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string short_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_short_name(), ptr, ctx, "com.android.server.am.ServiceRecordProto.short_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_running = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_running(&has_bits);
          is_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.IntentProto intent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package_name(), ptr, ctx, "com.android.server.am.ServiceRecordProto.package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_process_name(), ptr, ctx, "com.android.server.am.ServiceRecordProto.process_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string permission = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_permission(), ptr, ctx, "com.android.server.am.ServiceRecordProto.permission");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ServiceRecordProto.AppInfo appinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_appinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto app = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto isolated_proc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_isolated_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool whitelist_manager = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_whitelist_manager(&has_bits);
          whitelist_manager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delayed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_delayed(&has_bits);
          delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ServiceRecordProto.Foreground foreground = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_foreground(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration create_real_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_create_real_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration starting_bg_timeout = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_starting_bg_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration last_activity_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_last_activity_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration restart_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_restart_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool created_from_fg = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_created_from_fg(&has_bits);
          created_from_fg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ServiceRecordProto.Start start = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ServiceRecordProto.ExecuteNesting execute = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_execute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration destory_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_destory_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ServiceRecordProto.Crash crash = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_crash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ServiceRecordProto.StartItem delivered_starts = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_delivered_starts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ServiceRecordProto.StartItem pending_starts = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pending_starts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.IntentBindRecordProto bindings = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_bindings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 458);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ConnectionRecordProto connections = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 466);
        } else goto handle_unusual;
        continue;
      // optional bool allow_while_in_use_permission_in_fgs = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_allow_while_in_use_permission_in_fgs(&has_bits);
          allow_while_in_use_permission_in_fgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceRecordProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ServiceRecordProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string short_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_name().data(), static_cast<int>(this->short_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ServiceRecordProto.short_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_running = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_running(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.IntentProto intent = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), static_cast<int>(this->package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ServiceRecordProto.package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ServiceRecordProto.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string permission = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_permission()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->permission().data(), static_cast<int>(this->permission().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ServiceRecordProto.permission");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ServiceRecordProto.AppInfo appinfo = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_appinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto app = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto isolated_proc = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_isolated_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool whitelist_manager = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_whitelist_manager(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whitelist_manager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delayed = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_delayed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ServiceRecordProto.Foreground foreground = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration create_real_time = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_create_real_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration starting_bg_timeout = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_starting_bg_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration last_activity_time = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_activity_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration restart_time = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_restart_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool created_from_fg = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_created_from_fg(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &created_from_fg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ServiceRecordProto.Start start = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ServiceRecordProto.ExecuteNesting execute = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_execute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration destory_time = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destory_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ServiceRecordProto.Crash crash = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ServiceRecordProto.StartItem delivered_starts = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_delivered_starts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ServiceRecordProto.StartItem pending_starts = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_starts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.IntentBindRecordProto bindings = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bindings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ConnectionRecordProto connections = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_while_in_use_permission_in_fgs = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_allow_while_in_use_permission_in_fgs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_while_in_use_permission_in_fgs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ServiceRecordProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ServiceRecordProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceRecordProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ServiceRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string short_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), static_cast<int>(this->short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.short_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->short_name(), output);
  }

  // optional bool is_running = 2;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_running(), output);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  // optional .android.content.IntentProto intent = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::intent(this), output);
  }

  // optional string package_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->package_name(), output);
  }

  // optional string process_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.process_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->process_name(), output);
  }

  // optional string permission = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission().data(), static_cast<int>(this->permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.permission");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->permission(), output);
  }

  // optional .com.android.server.am.ServiceRecordProto.AppInfo appinfo = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::appinfo(this), output);
  }

  // optional .com.android.server.am.ProcessRecordProto app = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::app(this), output);
  }

  // optional .com.android.server.am.ProcessRecordProto isolated_proc = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::isolated_proc(this), output);
  }

  // optional bool whitelist_manager = 11;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->whitelist_manager(), output);
  }

  // optional bool delayed = 12;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->delayed(), output);
  }

  // optional .com.android.server.am.ServiceRecordProto.Foreground foreground = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::foreground(this), output);
  }

  // optional .android.util.Duration create_real_time = 14;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::create_real_time(this), output);
  }

  // optional .android.util.Duration starting_bg_timeout = 15;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::starting_bg_timeout(this), output);
  }

  // optional .android.util.Duration last_activity_time = 16;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::last_activity_time(this), output);
  }

  // optional .android.util.Duration restart_time = 17;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, _Internal::restart_time(this), output);
  }

  // optional bool created_from_fg = 18;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->created_from_fg(), output);
  }

  // optional .com.android.server.am.ServiceRecordProto.Start start = 19;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, _Internal::start(this), output);
  }

  // optional .com.android.server.am.ServiceRecordProto.ExecuteNesting execute = 20;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::execute(this), output);
  }

  // optional .android.util.Duration destory_time = 21;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::destory_time(this), output);
  }

  // optional .com.android.server.am.ServiceRecordProto.Crash crash = 22;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, _Internal::crash(this), output);
  }

  // repeated .com.android.server.am.ServiceRecordProto.StartItem delivered_starts = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->delivered_starts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->delivered_starts(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ServiceRecordProto.StartItem pending_starts = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_starts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->pending_starts(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.IntentBindRecordProto bindings = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bindings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->bindings(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ConnectionRecordProto connections = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26,
      this->connections(static_cast<int>(i)),
      output);
  }

  // optional bool allow_while_in_use_permission_in_fgs = 27;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->allow_while_in_use_permission_in_fgs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ServiceRecordProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRecordProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ServiceRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string short_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), static_cast<int>(this->short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.short_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->short_name(), target);
  }

  // optional bool is_running = 2;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_running(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }

  // optional .android.content.IntentProto intent = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::intent(this), target);
  }

  // optional string package_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }

  // optional string process_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.process_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->process_name(), target);
  }

  // optional string permission = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission().data(), static_cast<int>(this->permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ServiceRecordProto.permission");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->permission(), target);
  }

  // optional .com.android.server.am.ServiceRecordProto.AppInfo appinfo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::appinfo(this), target);
  }

  // optional .com.android.server.am.ProcessRecordProto app = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::app(this), target);
  }

  // optional .com.android.server.am.ProcessRecordProto isolated_proc = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::isolated_proc(this), target);
  }

  // optional bool whitelist_manager = 11;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->whitelist_manager(), target);
  }

  // optional bool delayed = 12;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->delayed(), target);
  }

  // optional .com.android.server.am.ServiceRecordProto.Foreground foreground = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::foreground(this), target);
  }

  // optional .android.util.Duration create_real_time = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::create_real_time(this), target);
  }

  // optional .android.util.Duration starting_bg_timeout = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::starting_bg_timeout(this), target);
  }

  // optional .android.util.Duration last_activity_time = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::last_activity_time(this), target);
  }

  // optional .android.util.Duration restart_time = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::restart_time(this), target);
  }

  // optional bool created_from_fg = 18;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->created_from_fg(), target);
  }

  // optional .com.android.server.am.ServiceRecordProto.Start start = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::start(this), target);
  }

  // optional .com.android.server.am.ServiceRecordProto.ExecuteNesting execute = 20;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::execute(this), target);
  }

  // optional .android.util.Duration destory_time = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::destory_time(this), target);
  }

  // optional .com.android.server.am.ServiceRecordProto.Crash crash = 22;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::crash(this), target);
  }

  // repeated .com.android.server.am.ServiceRecordProto.StartItem delivered_starts = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->delivered_starts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->delivered_starts(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ServiceRecordProto.StartItem pending_starts = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_starts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->pending_starts(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.IntentBindRecordProto bindings = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bindings_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->bindings(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ConnectionRecordProto connections = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->connections(static_cast<int>(i)), target);
  }

  // optional bool allow_while_in_use_permission_in_fgs = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->allow_while_in_use_permission_in_fgs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ServiceRecordProto)
  return target;
}

size_t ServiceRecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ServiceRecordProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ServiceRecordProto.StartItem delivered_starts = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->delivered_starts_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->delivered_starts(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ServiceRecordProto.StartItem pending_starts = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_starts_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_starts(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.IntentBindRecordProto bindings = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->bindings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bindings(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ConnectionRecordProto connections = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->connections_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->connections(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string short_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->short_name());
    }

    // optional string package_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional string process_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional string permission = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->permission());
    }

    // optional .android.content.IntentProto intent = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .com.android.server.am.ServiceRecordProto.AppInfo appinfo = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *appinfo_);
    }

    // optional .com.android.server.am.ProcessRecordProto app = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_);
    }

    // optional .com.android.server.am.ProcessRecordProto isolated_proc = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *isolated_proc_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .com.android.server.am.ServiceRecordProto.Foreground foreground = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_);
    }

    // optional .android.util.Duration create_real_time = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *create_real_time_);
    }

    // optional .android.util.Duration starting_bg_timeout = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *starting_bg_timeout_);
    }

    // optional .android.util.Duration last_activity_time = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_activity_time_);
    }

    // optional .android.util.Duration restart_time = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restart_time_);
    }

    // optional .com.android.server.am.ServiceRecordProto.Start start = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .com.android.server.am.ServiceRecordProto.ExecuteNesting execute = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *execute_);
    }

    // optional .android.util.Duration destory_time = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destory_time_);
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional .com.android.server.am.ServiceRecordProto.Crash crash = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crash_);
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional bool is_running = 2;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool whitelist_manager = 11;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool delayed = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool created_from_fg = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool allow_while_in_use_permission_in_fgs = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ServiceRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ServiceRecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ServiceRecordProto)
    MergeFrom(*source);
  }
}

void ServiceRecordProto::MergeFrom(const ServiceRecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ServiceRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delivered_starts_.MergeFrom(from.delivered_starts_);
  pending_starts_.MergeFrom(from.pending_starts_);
  bindings_.MergeFrom(from.bindings_);
  connections_.MergeFrom(from.connections_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      permission_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_intent()->::android::content::IntentProto::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_appinfo()->::com::android::server::am::ServiceRecordProto_AppInfo::MergeFrom(from.appinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_app()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.app());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_isolated_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.isolated_proc());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_foreground()->::com::android::server::am::ServiceRecordProto_Foreground::MergeFrom(from.foreground());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_create_real_time()->::android::util::Duration::MergeFrom(from.create_real_time());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_starting_bg_timeout()->::android::util::Duration::MergeFrom(from.starting_bg_timeout());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_last_activity_time()->::android::util::Duration::MergeFrom(from.last_activity_time());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_restart_time()->::android::util::Duration::MergeFrom(from.restart_time());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_start()->::com::android::server::am::ServiceRecordProto_Start::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_execute()->::com::android::server::am::ServiceRecordProto_ExecuteNesting::MergeFrom(from.execute());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_destory_time()->::android::util::Duration::MergeFrom(from.destory_time());
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_crash()->::com::android::server::am::ServiceRecordProto_Crash::MergeFrom(from.crash());
    }
    if (cached_has_bits & 0x00020000u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_running_ = from.is_running_;
    }
    if (cached_has_bits & 0x00080000u) {
      whitelist_manager_ = from.whitelist_manager_;
    }
    if (cached_has_bits & 0x00100000u) {
      delayed_ = from.delayed_;
    }
    if (cached_has_bits & 0x00200000u) {
      created_from_fg_ = from.created_from_fg_;
    }
    if (cached_has_bits & 0x00400000u) {
      allow_while_in_use_permission_in_fgs_ = from.allow_while_in_use_permission_in_fgs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceRecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ServiceRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRecordProto::CopyFrom(const ServiceRecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ServiceRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRecordProto::IsInitialized() const {
  return true;
}

void ServiceRecordProto::InternalSwap(ServiceRecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&delivered_starts_)->InternalSwap(CastToBase(&other->delivered_starts_));
  CastToBase(&pending_starts_)->InternalSwap(CastToBase(&other->pending_starts_));
  CastToBase(&bindings_)->InternalSwap(CastToBase(&other->bindings_));
  CastToBase(&connections_)->InternalSwap(CastToBase(&other->connections_));
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  permission_.Swap(&other->permission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(intent_, other->intent_);
  swap(appinfo_, other->appinfo_);
  swap(app_, other->app_);
  swap(isolated_proc_, other->isolated_proc_);
  swap(foreground_, other->foreground_);
  swap(create_real_time_, other->create_real_time_);
  swap(starting_bg_timeout_, other->starting_bg_timeout_);
  swap(last_activity_time_, other->last_activity_time_);
  swap(restart_time_, other->restart_time_);
  swap(start_, other->start_);
  swap(execute_, other->execute_);
  swap(destory_time_, other->destory_time_);
  swap(crash_, other->crash_);
  swap(pid_, other->pid_);
  swap(is_running_, other->is_running_);
  swap(whitelist_manager_, other->whitelist_manager_);
  swap(delayed_, other->delayed_);
  swap(created_from_fg_, other->created_from_fg_);
  swap(allow_while_in_use_permission_in_fgs_, other->allow_while_in_use_permission_in_fgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectionRecordProto::InitAsDefaultInstance() {
}
class ConnectionRecordProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionRecordProto>()._has_bits_);
  static void set_has_hex_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConnectionRecordProto::ConnectionRecordProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ConnectionRecordProto)
}
ConnectionRecordProto::ConnectionRecordProto(const ConnectionRecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      flags_(from.flags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hex_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hex_hash()) {
    hex_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_hash_);
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ConnectionRecordProto)
}

void ConnectionRecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  hex_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

ConnectionRecordProto::~ConnectionRecordProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ConnectionRecordProto)
  SharedDtor();
}

void ConnectionRecordProto::SharedDtor() {
  hex_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionRecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionRecordProto& ConnectionRecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ConnectionRecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ConnectionRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hex_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectionRecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hex_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_hex_hash(), ptr, ctx, "com.android.server.am.ConnectionRecordProto.hex_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ConnectionRecordProto.Flag flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::am::ConnectionRecordProto_Flag_IsValid(val))) {
              add_flags(static_cast<::com::android::server::am::ConnectionRecordProto_Flag>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_flags(), ptr, ctx, ::com::android::server::am::ConnectionRecordProto_Flag_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string service_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_service_name(), ptr, ctx, "com.android.server.am.ConnectionRecordProto.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectionRecordProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ConnectionRecordProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hex_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hex_hash()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ConnectionRecordProto.hex_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ConnectionRecordProto.Flag flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::am::ConnectionRecordProto_Flag_IsValid(value)) {
            add_flags(static_cast< ::com::android::server::am::ConnectionRecordProto_Flag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::com::android::server::am::ConnectionRecordProto_Flag_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_flags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ConnectionRecordProto.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ConnectionRecordProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ConnectionRecordProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectionRecordProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ConnectionRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hex_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ConnectionRecordProto.hex_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hex_hash(), output);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // repeated .com.android.server.am.ConnectionRecordProto.Flag flags = 3;
  for (int i = 0, n = this->flags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->flags(i), output);
  }

  // optional string service_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ConnectionRecordProto.service_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->service_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ConnectionRecordProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionRecordProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ConnectionRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hex_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hex_hash().data(), static_cast<int>(this->hex_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ConnectionRecordProto.hex_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->hex_hash(), target);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // repeated .com.android.server.am.ConnectionRecordProto.Flag flags = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    3, this->flags_, target);

  // optional string service_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ConnectionRecordProto.service_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->service_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ConnectionRecordProto)
  return target;
}

size_t ConnectionRecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ConnectionRecordProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ConnectionRecordProto.Flag flags = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->flags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string hex_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hex_hash());
    }

    // optional string service_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional int32 user_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionRecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ConnectionRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionRecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionRecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ConnectionRecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ConnectionRecordProto)
    MergeFrom(*source);
  }
}

void ConnectionRecordProto::MergeFrom(const ConnectionRecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ConnectionRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flags_.MergeFrom(from.flags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hex_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectionRecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ConnectionRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRecordProto::CopyFrom(const ConnectionRecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ConnectionRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRecordProto::IsInitialized() const {
  return true;
}

void ConnectionRecordProto::InternalSwap(ConnectionRecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flags_.InternalSwap(&other->flags_);
  hex_hash_.Swap(&other->hex_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionRecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppBindRecordProto::InitAsDefaultInstance() {
}
class AppBindRecordProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppBindRecordProto>()._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_proc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppBindRecordProto::AppBindRecordProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppBindRecordProto)
}
AppBindRecordProto::AppBindRecordProto(const AppBindRecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  client_proc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_proc_name()) {
    client_proc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_proc_name_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppBindRecordProto)
}

void AppBindRecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_proc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppBindRecordProto::~AppBindRecordProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppBindRecordProto)
  SharedDtor();
}

void AppBindRecordProto::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_proc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppBindRecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppBindRecordProto& AppBindRecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppBindRecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppBindRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      client_proc_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppBindRecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_service_name(), ptr, ctx, "com.android.server.am.AppBindRecordProto.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string client_proc_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_client_proc_name(), ptr, ctx, "com.android.server.am.AppBindRecordProto.client_proc_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string connections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_connections(), ptr, ctx, "com.android.server.am.AppBindRecordProto.connections");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppBindRecordProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppBindRecordProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppBindRecordProto.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_proc_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_proc_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_proc_name().data(), static_cast<int>(this->client_proc_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppBindRecordProto.client_proc_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string connections = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_connections()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connections(this->connections_size() - 1).data(),
            static_cast<int>(this->connections(this->connections_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppBindRecordProto.connections");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppBindRecordProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppBindRecordProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppBindRecordProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppBindRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppBindRecordProto.service_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // optional string client_proc_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_proc_name().data(), static_cast<int>(this->client_proc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppBindRecordProto.client_proc_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_proc_name(), output);
  }

  // repeated string connections = 3;
  for (int i = 0, n = this->connections_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connections(i).data(), static_cast<int>(this->connections(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppBindRecordProto.connections");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->connections(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppBindRecordProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppBindRecordProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppBindRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppBindRecordProto.service_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // optional string client_proc_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_proc_name().data(), static_cast<int>(this->client_proc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppBindRecordProto.client_proc_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->client_proc_name(), target);
  }

  // repeated string connections = 3;
  for (int i = 0, n = this->connections_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connections(i).data(), static_cast<int>(this->connections(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppBindRecordProto.connections");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->connections(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppBindRecordProto)
  return target;
}

size_t AppBindRecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppBindRecordProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string connections = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->connections_size());
  for (int i = 0, n = this->connections_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->connections(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string service_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional string client_proc_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->client_proc_name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppBindRecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppBindRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AppBindRecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppBindRecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppBindRecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppBindRecordProto)
    MergeFrom(*source);
  }
}

void AppBindRecordProto::MergeFrom(const AppBindRecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppBindRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      client_proc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_proc_name_);
    }
  }
}

void AppBindRecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppBindRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppBindRecordProto::CopyFrom(const AppBindRecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppBindRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppBindRecordProto::IsInitialized() const {
  return true;
}

void AppBindRecordProto::InternalSwap(AppBindRecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connections_.InternalSwap(CastToBase(&other->connections_));
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_proc_name_.Swap(&other->client_proc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppBindRecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntentBindRecordProto::InitAsDefaultInstance() {
  ::com::android::server::am::_IntentBindRecordProto_default_instance_._instance.get_mutable()->intent_ = const_cast< ::android::content::IntentProto*>(
      ::android::content::IntentProto::internal_default_instance());
}
class IntentBindRecordProto::_Internal {
 public:
  using HasBits = decltype(std::declval<IntentBindRecordProto>()._has_bits_);
  static const ::android::content::IntentProto& intent(const IntentBindRecordProto* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_binder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auto_create(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_do_rebind(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::content::IntentProto&
IntentBindRecordProto::_Internal::intent(const IntentBindRecordProto* msg) {
  return *msg->intent_;
}
void IntentBindRecordProto::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
IntentBindRecordProto::IntentBindRecordProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.IntentBindRecordProto)
}
IntentBindRecordProto::IntentBindRecordProto(const IntentBindRecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  binder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_binder()) {
    binder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binder_);
  }
  if (from.has_intent()) {
    intent_ = new ::android::content::IntentProto(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  ::memcpy(&auto_create_, &from.auto_create_,
    static_cast<size_t>(reinterpret_cast<char*>(&do_rebind_) -
    reinterpret_cast<char*>(&auto_create_)) + sizeof(do_rebind_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.IntentBindRecordProto)
}

void IntentBindRecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  binder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_rebind_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(do_rebind_));
}

IntentBindRecordProto::~IntentBindRecordProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.IntentBindRecordProto)
  SharedDtor();
}

void IntentBindRecordProto::SharedDtor() {
  binder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
}

void IntentBindRecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntentBindRecordProto& IntentBindRecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntentBindRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void IntentBindRecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.IntentBindRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      binder_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&auto_create_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&do_rebind_) -
        reinterpret_cast<char*>(&auto_create_)) + sizeof(do_rebind_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntentBindRecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.IntentProto intent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string binder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_binder(), ptr, ctx, "com.android.server.am.IntentBindRecordProto.binder");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_create = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_auto_create(&has_bits);
          auto_create_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requested = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_requested(&has_bits);
          requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_bound = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_has_bound(&has_bits);
          has_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool do_rebind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_do_rebind(&has_bits);
          do_rebind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppBindRecordProto apps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntentBindRecordProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.IntentBindRecordProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.IntentProto intent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string binder = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_binder()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->binder().data(), static_cast<int>(this->binder().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.IntentBindRecordProto.binder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_create = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_auto_create(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_create_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requested = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_requested(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool received = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_received(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_bound = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_has_bound(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool do_rebind = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_do_rebind(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_rebind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppBindRecordProto apps = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.IntentBindRecordProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.IntentBindRecordProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntentBindRecordProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.IntentBindRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.IntentProto intent = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::intent(this), output);
  }

  // optional string binder = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->binder().data(), static_cast<int>(this->binder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.IntentBindRecordProto.binder");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->binder(), output);
  }

  // optional bool auto_create = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->auto_create(), output);
  }

  // optional bool requested = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->requested(), output);
  }

  // optional bool received = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->received(), output);
  }

  // optional bool has_bound = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->has_bound(), output);
  }

  // optional bool do_rebind = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->do_rebind(), output);
  }

  // repeated .com.android.server.am.AppBindRecordProto apps = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->apps(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.IntentBindRecordProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntentBindRecordProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.IntentBindRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.IntentProto intent = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::intent(this), target);
  }

  // optional string binder = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->binder().data(), static_cast<int>(this->binder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.IntentBindRecordProto.binder");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->binder(), target);
  }

  // optional bool auto_create = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->auto_create(), target);
  }

  // optional bool requested = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->requested(), target);
  }

  // optional bool received = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->received(), target);
  }

  // optional bool has_bound = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->has_bound(), target);
  }

  // optional bool do_rebind = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->do_rebind(), target);
  }

  // repeated .com.android.server.am.AppBindRecordProto apps = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->apps(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.IntentBindRecordProto)
  return target;
}

size_t IntentBindRecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.IntentBindRecordProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.AppBindRecordProto apps = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string binder = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->binder());
    }

    // optional .android.content.IntentProto intent = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional bool auto_create = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool requested = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool received = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_bound = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool do_rebind = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntentBindRecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.IntentBindRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IntentBindRecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntentBindRecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.IntentBindRecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.IntentBindRecordProto)
    MergeFrom(*source);
  }
}

void IntentBindRecordProto::MergeFrom(const IntentBindRecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.IntentBindRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      binder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binder_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_intent()->::android::content::IntentProto::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000004u) {
      auto_create_ = from.auto_create_;
    }
    if (cached_has_bits & 0x00000008u) {
      requested_ = from.requested_;
    }
    if (cached_has_bits & 0x00000010u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_bound_ = from.has_bound_;
    }
    if (cached_has_bits & 0x00000040u) {
      do_rebind_ = from.do_rebind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntentBindRecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.IntentBindRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntentBindRecordProto::CopyFrom(const IntentBindRecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.IntentBindRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntentBindRecordProto::IsInitialized() const {
  return true;
}

void IntentBindRecordProto::InternalSwap(IntentBindRecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  binder_.Swap(&other->binder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(intent_, other->intent_);
  swap(auto_create_, other->auto_create_);
  swap(requested_, other->requested_);
  swap(received_, other->received_);
  swap(has_bound_, other->has_bound_);
  swap(do_rebind_, other->do_rebind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntentBindRecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_LruProcesses::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_LruProcesses::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_LruProcesses>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_non_act_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_non_svc_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ActivityManagerServiceDumpProcessesProto_LruProcesses::ActivityManagerServiceDumpProcessesProto_LruProcesses()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
}
ActivityManagerServiceDumpProcessesProto_LruProcesses::ActivityManagerServiceDumpProcessesProto_LruProcesses(const ActivityManagerServiceDumpProcessesProto_LruProcesses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&non_svc_at_) -
    reinterpret_cast<char*>(&size_)) + sizeof(non_svc_at_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&non_svc_at_) -
      reinterpret_cast<char*>(&size_)) + sizeof(non_svc_at_));
}

ActivityManagerServiceDumpProcessesProto_LruProcesses::~ActivityManagerServiceDumpProcessesProto_LruProcesses() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::SharedDtor() {
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_LruProcesses& ActivityManagerServiceDumpProcessesProto_LruProcesses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_LruProcesses_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_LruProcesses::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&non_svc_at_) -
        reinterpret_cast<char*>(&size_)) + sizeof(non_svc_at_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_LruProcesses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 non_act_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_non_act_at(&has_bits);
          non_act_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 non_svc_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_non_svc_at(&has_bits);
          non_svc_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessOomProto list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_LruProcesses::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 non_act_at = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_non_act_at(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &non_act_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 non_svc_at = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_non_svc_at(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &non_svc_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessOomProto list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_LruProcesses::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // optional int32 non_act_at = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->non_act_at(), output);
  }

  // optional int32 non_svc_at = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->non_svc_at(), output);
  }

  // repeated .com.android.server.am.ProcessOomProto list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_LruProcesses::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // optional int32 non_act_at = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->non_act_at(), target);
  }

  // optional int32 non_svc_at = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->non_svc_at(), target);
  }

  // repeated .com.android.server.am.ProcessOomProto list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_LruProcesses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ProcessOomProto list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 non_act_at = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->non_act_at());
    }

    // optional int32 non_svc_at = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->non_svc_at());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_LruProcesses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_LruProcesses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::MergeFrom(const ActivityManagerServiceDumpProcessesProto_LruProcesses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000002u) {
      non_act_at_ = from.non_act_at_;
    }
    if (cached_has_bits & 0x00000004u) {
      non_svc_at_ = from.non_svc_at_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::CopyFrom(const ActivityManagerServiceDumpProcessesProto_LruProcesses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_LruProcesses::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_LruProcesses::InternalSwap(ActivityManagerServiceDumpProcessesProto_LruProcesses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(size_, other->size_);
  swap(non_act_at_, other->non_act_at_);
  swap(non_svc_at_, other->non_svc_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_LruProcesses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage>()._has_bits_);
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
}
ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage(const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::~ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::SharedDtor() {
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_.ClearNonDefaultToEmptyNoArena();
  }
  mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package().data(), static_cast<int>(this->package().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package(), output);
  }

  // optional int32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->package(), target);
  }

  // optional int32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional int32 mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::MergeFrom(const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::CopyFrom(const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::InternalSwap(ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
}
ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(state_));
}

ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::~ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::SharedDtor() {
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::MergeFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::CopyFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::InternalSwap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uid_, other->uid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cut_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
}
ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      flags_(from.flags_),
      last_proc_states_(from.last_proc_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cut_point_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(cut_point_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cut_point_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(cut_point_));
}

ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::~ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::SharedDtor() {
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.Clear();
  last_proc_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cut_point_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(cut_point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.app.UidObserverFlag flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::android::app::UidObserverFlag_IsValid(val))) {
              add_flags(static_cast<::android::app::UidObserverFlag>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_flags(), ptr, ctx, ::android::app::UidObserverFlag_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cut_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cut_point(&has_bits);
          cut_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState last_proc_states = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_last_proc_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package().data(), static_cast<int>(this->package().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.app.UidObserverFlag flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::UidObserverFlag_IsValid(value)) {
            add_flags(static_cast< ::android::app::UidObserverFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::android::app::UidObserverFlag_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_flags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cut_point = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_cut_point(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cut_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState last_proc_states = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_last_proc_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string package = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package(), output);
  }

  // repeated .android.app.UidObserverFlag flags = 3;
  for (int i = 0, n = this->flags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->flags(i), output);
  }

  // optional int32 cut_point = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->cut_point(), output);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState last_proc_states = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_proc_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->last_proc_states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string package = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->package(), target);
  }

  // repeated .android.app.UidObserverFlag flags = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    3, this->flags_, target);

  // optional int32 cut_point = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->cut_point(), target);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState last_proc_states = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_proc_states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->last_proc_states(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.app.UidObserverFlag flags = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->flags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState last_proc_states = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->last_proc_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->last_proc_states(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string package = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 cut_point = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cut_point());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::MergeFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flags_.MergeFrom(from.flags_);
  last_proc_states_.MergeFrom(from.last_proc_states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      cut_point_ = from.cut_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::CopyFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::InternalSwap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flags_.InternalSwap(&other->flags_);
  CastToBase(&last_proc_states_)->InternalSwap(CastToBase(&other->last_proc_states_));
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(cut_point_, other->cut_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist>()._has_bits_);
  static void set_has_target_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_calling_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
}
ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist(const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&calling_uid_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(calling_uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calling_uid_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(calling_uid_));
}

ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::~ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&calling_uid_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(calling_uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 target_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_uid(&has_bits);
          target_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reason_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_reason_code(&has_bits);
          reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 calling_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_calling_uid(&has_bits);
          calling_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target_uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_target_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reason_code = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_reason_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 calling_uid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_calling_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &calling_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_uid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->target_uid(), output);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->duration_ms(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional int32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 reason_code = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->reason_code(), output);
  }

  // optional int32 calling_uid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->calling_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->target_uid(), target);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->duration_ms(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional int32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 reason_code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->reason_code(), target);
  }

  // optional int32 calling_uid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->calling_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tag = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional int64 duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int32 target_uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->target_uid());
    }

    // optional int32 type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 reason_code = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->reason_code());
    }

    // optional int32 calling_uid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->calling_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::MergeFrom(const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_uid_ = from.target_uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      reason_code_ = from.reason_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      calling_uid_ = from.calling_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::CopyFrom(const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::InternalSwap(ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_ms_, other->duration_ms_);
  swap(target_uid_, other->target_uid_);
  swap(type_, other->type_);
  swap(reason_code_, other->reason_code_);
  swap(calling_uid_, other->calling_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_SleepStatus::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_SleepStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_SleepStatus>()._has_bits_);
  static void set_has_wakefulness(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sleeping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shutting_down(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_test_pss_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ActivityManagerServiceDumpProcessesProto_SleepStatus::ActivityManagerServiceDumpProcessesProto_SleepStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
}
ActivityManagerServiceDumpProcessesProto_SleepStatus::ActivityManagerServiceDumpProcessesProto_SleepStatus(const ActivityManagerServiceDumpProcessesProto_SleepStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sleep_tokens_(from.sleep_tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wakefulness_, &from.wakefulness_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_pss_mode_) -
    reinterpret_cast<char*>(&wakefulness_)) + sizeof(test_pss_mode_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&wakefulness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_pss_mode_) -
      reinterpret_cast<char*>(&wakefulness_)) + sizeof(test_pss_mode_));
}

ActivityManagerServiceDumpProcessesProto_SleepStatus::~ActivityManagerServiceDumpProcessesProto_SleepStatus() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::SharedDtor() {
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_SleepStatus& ActivityManagerServiceDumpProcessesProto_SleepStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_SleepStatus_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_SleepStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sleep_tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&wakefulness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_pss_mode_) -
        reinterpret_cast<char*>(&wakefulness_)) + sizeof(test_pss_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_SleepStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::PowerManagerInternalProto_Wakefulness_IsValid(val))) {
            set_wakefulness(static_cast<::android::os::PowerManagerInternalProto_Wakefulness>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string sleep_tokens = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_sleep_tokens(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bool sleeping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sleeping(&has_bits);
          sleeping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shutting_down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_shutting_down(&has_bits);
          shutting_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool test_pss_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_test_pss_mode(&has_bits);
          test_pss_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_SleepStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::PowerManagerInternalProto_Wakefulness_IsValid(value)) {
            set_wakefulness(static_cast< ::android::os::PowerManagerInternalProto_Wakefulness >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sleep_tokens = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_sleep_tokens()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sleep_tokens(this->sleep_tokens_size() - 1).data(),
            static_cast<int>(this->sleep_tokens(this->sleep_tokens_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sleeping = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_sleeping(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sleeping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shutting_down = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_shutting_down(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shutting_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_pss_mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_test_pss_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_pss_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_SleepStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->wakefulness(), output);
  }

  // repeated string sleep_tokens = 2 [(.android.privacy) = {
  for (int i = 0, n = this->sleep_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sleep_tokens(i).data(), static_cast<int>(this->sleep_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->sleep_tokens(i), output);
  }

  // optional bool sleeping = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->sleeping(), output);
  }

  // optional bool shutting_down = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->shutting_down(), output);
  }

  // optional bool test_pss_mode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->test_pss_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_SleepStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->wakefulness(), target);
  }

  // repeated string sleep_tokens = 2 [(.android.privacy) = {
  for (int i = 0, n = this->sleep_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sleep_tokens(i).data(), static_cast<int>(this->sleep_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->sleep_tokens(i), target);
  }

  // optional bool sleeping = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->sleeping(), target);
  }

  // optional bool shutting_down = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->shutting_down(), target);
  }

  // optional bool test_pss_mode = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->test_pss_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_SleepStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sleep_tokens = 2 [(.android.privacy) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sleep_tokens_size());
  for (int i = 0, n = this->sleep_tokens_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->sleep_tokens(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->wakefulness());
    }

    // optional bool sleeping = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool shutting_down = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool test_pss_mode = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_SleepStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_SleepStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::MergeFrom(const ActivityManagerServiceDumpProcessesProto_SleepStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sleep_tokens_.MergeFrom(from.sleep_tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      wakefulness_ = from.wakefulness_;
    }
    if (cached_has_bits & 0x00000002u) {
      sleeping_ = from.sleeping_;
    }
    if (cached_has_bits & 0x00000004u) {
      shutting_down_ = from.shutting_down_;
    }
    if (cached_has_bits & 0x00000008u) {
      test_pss_mode_ = from.test_pss_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::CopyFrom(const ActivityManagerServiceDumpProcessesProto_SleepStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_SleepStatus::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_SleepStatus::InternalSwap(ActivityManagerServiceDumpProcessesProto_SleepStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sleep_tokens_.InternalSwap(CastToBase(&other->sleep_tokens_));
  swap(wakefulness_, other->wakefulness_);
  swap(sleeping_, other->sleeping_);
  swap(shutting_down_, other->shutting_down_);
  swap(test_pss_mode_, other->test_pss_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_SleepStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_Voice::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Voice_default_instance_._instance.get_mutable()->wakelock_ = const_cast< ::android::os::PowerManagerProto_WakeLock*>(
      ::android::os::PowerManagerProto_WakeLock::internal_default_instance());
}
class ActivityManagerServiceDumpProcessesProto_Voice::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_Voice>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::PowerManagerProto_WakeLock& wakelock(const ActivityManagerServiceDumpProcessesProto_Voice* msg);
  static void set_has_wakelock(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::PowerManagerProto_WakeLock&
ActivityManagerServiceDumpProcessesProto_Voice::_Internal::wakelock(const ActivityManagerServiceDumpProcessesProto_Voice* msg) {
  return *msg->wakelock_;
}
void ActivityManagerServiceDumpProcessesProto_Voice::clear_wakelock() {
  if (wakelock_ != nullptr) wakelock_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ActivityManagerServiceDumpProcessesProto_Voice::ActivityManagerServiceDumpProcessesProto_Voice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
}
ActivityManagerServiceDumpProcessesProto_Voice::ActivityManagerServiceDumpProcessesProto_Voice(const ActivityManagerServiceDumpProcessesProto_Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session()) {
    session_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.has_wakelock()) {
    wakelock_ = new ::android::os::PowerManagerProto_WakeLock(*from.wakelock_);
  } else {
    wakelock_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
}

void ActivityManagerServiceDumpProcessesProto_Voice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wakelock_ = nullptr;
}

ActivityManagerServiceDumpProcessesProto_Voice::~ActivityManagerServiceDumpProcessesProto_Voice() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_Voice::SharedDtor() {
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wakelock_;
}

void ActivityManagerServiceDumpProcessesProto_Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_Voice& ActivityManagerServiceDumpProcessesProto_Voice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wakelock_ != nullptr);
      wakelock_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_Voice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_session(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.PowerManagerProto.WakeLock wakelock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_wakelock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_Voice::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), static_cast<int>(this->session().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.PowerManagerProto.WakeLock wakelock = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wakelock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_Voice::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), static_cast<int>(this->session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // optional .android.os.PowerManagerProto.WakeLock wakelock = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::wakelock(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_Voice::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), static_cast<int>(this->session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // optional .android.os.PowerManagerProto.WakeLock wakelock = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::wakelock(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session());
    }

    // optional .android.os.PowerManagerProto.WakeLock wakelock = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wakelock_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_Voice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_Voice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_Voice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_Voice::MergeFrom(const ActivityManagerServiceDumpProcessesProto_Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wakelock()->::android::os::PowerManagerProto_WakeLock::MergeFrom(from.wakelock());
    }
  }
}

void ActivityManagerServiceDumpProcessesProto_Voice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_Voice::CopyFrom(const ActivityManagerServiceDumpProcessesProto_Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_Voice::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_Voice::InternalSwap(ActivityManagerServiceDumpProcessesProto_Voice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(wakelock_, other->wakelock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_Voice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_DebugApp::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_DebugApp::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_DebugApp>()._has_bits_);
  static void set_has_debug_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_orig_debug_app(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_transient(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orig_wait_for_debugger(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ActivityManagerServiceDumpProcessesProto_DebugApp::ActivityManagerServiceDumpProcessesProto_DebugApp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
}
ActivityManagerServiceDumpProcessesProto_DebugApp::ActivityManagerServiceDumpProcessesProto_DebugApp(const ActivityManagerServiceDumpProcessesProto_DebugApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debug_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug_app()) {
    debug_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.debug_app_);
  }
  orig_debug_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_orig_debug_app()) {
    orig_debug_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orig_debug_app_);
  }
  ::memcpy(&debug_transient_, &from.debug_transient_,
    static_cast<size_t>(reinterpret_cast<char*>(&orig_wait_for_debugger_) -
    reinterpret_cast<char*>(&debug_transient_)) + sizeof(orig_wait_for_debugger_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  debug_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orig_debug_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&debug_transient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orig_wait_for_debugger_) -
      reinterpret_cast<char*>(&debug_transient_)) + sizeof(orig_wait_for_debugger_));
}

ActivityManagerServiceDumpProcessesProto_DebugApp::~ActivityManagerServiceDumpProcessesProto_DebugApp() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::SharedDtor() {
  debug_app_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orig_debug_app_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_DebugApp& ActivityManagerServiceDumpProcessesProto_DebugApp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_DebugApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_DebugApp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      debug_app_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orig_debug_app_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&debug_transient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orig_wait_for_debugger_) -
      reinterpret_cast<char*>(&debug_transient_)) + sizeof(orig_wait_for_debugger_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_DebugApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string debug_app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_debug_app(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string orig_debug_app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_orig_debug_app(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug_transient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_debug_transient(&has_bits);
          debug_transient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool orig_wait_for_debugger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_orig_wait_for_debugger(&has_bits);
          orig_wait_for_debugger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_DebugApp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug_app = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_app()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_app().data(), static_cast<int>(this->debug_app().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orig_debug_app = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_debug_app()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_debug_app().data(), static_cast<int>(this->orig_debug_app().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_transient = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_debug_transient(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_transient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool orig_wait_for_debugger = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_orig_wait_for_debugger(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orig_wait_for_debugger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_DebugApp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug_app = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_app().data(), static_cast<int>(this->debug_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->debug_app(), output);
  }

  // optional string orig_debug_app = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_debug_app().data(), static_cast<int>(this->orig_debug_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orig_debug_app(), output);
  }

  // optional bool debug_transient = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->debug_transient(), output);
  }

  // optional bool orig_wait_for_debugger = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->orig_wait_for_debugger(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_DebugApp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug_app = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_app().data(), static_cast<int>(this->debug_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->debug_app(), target);
  }

  // optional string orig_debug_app = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_debug_app().data(), static_cast<int>(this->orig_debug_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->orig_debug_app(), target);
  }

  // optional bool debug_transient = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->debug_transient(), target);
  }

  // optional bool orig_wait_for_debugger = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->orig_wait_for_debugger(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_DebugApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string debug_app = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->debug_app());
    }

    // optional string orig_debug_app = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->orig_debug_app());
    }

    // optional bool debug_transient = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool orig_wait_for_debugger = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_DebugApp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_DebugApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::MergeFrom(const ActivityManagerServiceDumpProcessesProto_DebugApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      debug_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.debug_app_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      orig_debug_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orig_debug_app_);
    }
    if (cached_has_bits & 0x00000004u) {
      debug_transient_ = from.debug_transient_;
    }
    if (cached_has_bits & 0x00000008u) {
      orig_wait_for_debugger_ = from.orig_wait_for_debugger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::CopyFrom(const ActivityManagerServiceDumpProcessesProto_DebugApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_DebugApp::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_DebugApp::InternalSwap(ActivityManagerServiceDumpProcessesProto_DebugApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debug_app_.Swap(&other->debug_app_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orig_debug_app_.Swap(&other->orig_debug_app_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(debug_transient_, other->debug_transient_);
  swap(orig_wait_for_debugger_, other->orig_wait_for_debugger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_DebugApp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
}
ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_size()) {
    size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.size_);
  }
  report_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_report_to()) {
    report_to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.report_to_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::~ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::SharedDtor() {
  size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      report_to_.ClearNonDefaultToEmptyNoArena();
    }
  }
  uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_size(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string report_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_report_to(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->size().data(), static_cast<int>(this->size().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string report_to = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_report_to()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->report_to().data(), static_cast<int>(this->report_to().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), static_cast<int>(this->size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->size(), output);
  }

  // optional string report_to = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->report_to().data(), static_cast<int>(this->report_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->report_to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), static_cast<int>(this->size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->size(), target);
  }

  // optional string report_to = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->report_to().data(), static_cast<int>(this->report_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->report_to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string size = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->size());
    }

    // optional string report_to = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->report_to());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.size_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      report_to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.report_to_);
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  size_.Swap(&other->size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  report_to_.Swap(&other->report_to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
}
ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mem_stats_(from.mem_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::~ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mem_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats mem_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mem_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats mem_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mem_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats mem_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mem_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->mem_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats mem_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mem_stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->mem_stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats mem_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mem_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mem_stats(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mem_stats_.MergeFrom(from.mem_stats_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&mem_stats_)->InternalSwap(CastToBase(&other->mem_stats_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump>()._has_bits_);
  static void set_has_proc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_user_initiated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
}
ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_proc_name()) {
    proc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_user_initiated_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(is_user_initiated_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  proc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_user_initiated_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(is_user_initiated_));
}

ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::~ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::SharedDtor() {
  proc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      proc_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      uri_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_user_initiated_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(is_user_initiated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string proc_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_proc_name(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_user_initiated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_user_initiated(&has_bits);
          is_user_initiated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uri = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_uri(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string proc_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proc_name().data(), static_cast<int>(this->proc_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_user_initiated = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_user_initiated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_user_initiated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uri = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_name().data(), static_cast<int>(this->proc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proc_name(), output);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  // optional int32 uid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }

  // optional bool is_user_initiated = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_user_initiated(), output);
  }

  // optional string uri = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_name().data(), static_cast<int>(this->proc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->proc_name(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }

  // optional int32 uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->uid(), target);
  }

  // optional bool is_user_initiated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_user_initiated(), target);
  }

  // optional string uri = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string proc_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->proc_name());
    }

    // optional string uri = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 uid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool is_user_initiated = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      proc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_user_initiated_ = from.is_user_initiated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proc_name_.Swap(&other->proc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(uid_, other->uid_);
  swap(is_user_initiated_, other->is_user_initiated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_default_instance_._instance.get_mutable()->dump_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::internal_default_instance());
}
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_MemWatchProcess>()._has_bits_);
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& dump(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess* msg);
  static void set_has_dump(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump&
ActivityManagerServiceDumpProcessesProto_MemWatchProcess::_Internal::dump(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess* msg) {
  return *msg->dump_;
}
ActivityManagerServiceDumpProcessesProto_MemWatchProcess::ActivityManagerServiceDumpProcessesProto_MemWatchProcess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
}
ActivityManagerServiceDumpProcessesProto_MemWatchProcess::ActivityManagerServiceDumpProcessesProto_MemWatchProcess(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      procs_(from.procs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dump()) {
    dump_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump(*from.dump_);
  } else {
    dump_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  dump_ = nullptr;
}

ActivityManagerServiceDumpProcessesProto_MemWatchProcess::~ActivityManagerServiceDumpProcessesProto_MemWatchProcess() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::SharedDtor() {
  if (this != internal_default_instance()) delete dump_;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& ActivityManagerServiceDumpProcessesProto_MemWatchProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dump_ != nullptr);
    dump_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_MemWatchProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process procs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump dump = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process procs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump dump = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process procs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->procs(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump dump = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::dump(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_MemWatchProcess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process procs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->procs(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump dump = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dump(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_MemWatchProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process procs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->procs(static_cast<int>(i)));
    }
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump dump = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dump_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_MemWatchProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_MemWatchProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  procs_.MergeFrom(from.procs_);
  if (from.has_dump()) {
    mutable_dump()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::MergeFrom(from.dump());
  }
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&procs_)->InternalSwap(CastToBase(&other->procs_));
  swap(dump_, other->dump_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_MemWatchProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_Profile::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Profile_default_instance_._instance.get_mutable()->proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Profile_default_instance_._instance.get_mutable()->info_ = const_cast< ::android::app::ProfilerInfoProto*>(
      ::android::app::ProfilerInfoProto::internal_default_instance());
}
class ActivityManagerServiceDumpProcessesProto_Profile::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_Profile>()._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::am::ProcessRecordProto& proc(const ActivityManagerServiceDumpProcessesProto_Profile* msg);
  static void set_has_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::app::ProfilerInfoProto& info(const ActivityManagerServiceDumpProcessesProto_Profile* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::am::ProcessRecordProto&
ActivityManagerServiceDumpProcessesProto_Profile::_Internal::proc(const ActivityManagerServiceDumpProcessesProto_Profile* msg) {
  return *msg->proc_;
}
const ::android::app::ProfilerInfoProto&
ActivityManagerServiceDumpProcessesProto_Profile::_Internal::info(const ActivityManagerServiceDumpProcessesProto_Profile* msg) {
  return *msg->info_;
}
void ActivityManagerServiceDumpProcessesProto_Profile::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ActivityManagerServiceDumpProcessesProto_Profile::ActivityManagerServiceDumpProcessesProto_Profile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
}
ActivityManagerServiceDumpProcessesProto_Profile::ActivityManagerServiceDumpProcessesProto_Profile(const ActivityManagerServiceDumpProcessesProto_Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_name()) {
    app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  if (from.has_proc()) {
    proc_ = new ::com::android::server::am::ProcessRecordProto(*from.proc_);
  } else {
    proc_ = nullptr;
  }
  if (from.has_info()) {
    info_ = new ::android::app::ProfilerInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
}

void ActivityManagerServiceDumpProcessesProto_Profile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&proc_)) + sizeof(type_));
}

ActivityManagerServiceDumpProcessesProto_Profile::~ActivityManagerServiceDumpProcessesProto_Profile() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_Profile::SharedDtor() {
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proc_;
  if (this != internal_default_instance()) delete info_;
}

void ActivityManagerServiceDumpProcessesProto_Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_Profile& ActivityManagerServiceDumpProcessesProto_Profile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_Profile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(proc_ != nullptr);
      proc_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_Profile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_app_name(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto proc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.ProfilerInfoProto info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_Profile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), static_cast<int>(this->app_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto proc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.ProfilerInfoProto info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_Profile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_name(), output);
  }

  // optional .com.android.server.am.ProcessRecordProto proc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::proc(this), output);
  }

  // optional .android.app.ProfilerInfoProto info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::info(this), output);
  }

  // optional int32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_Profile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->app_name(), target);
  }

  // optional .com.android.server.am.ProcessRecordProto proc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::proc(this), target);
  }

  // optional .android.app.ProfilerInfoProto info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::info(this), target);
  }

  // optional int32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string app_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional .com.android.server.am.ProcessRecordProto proc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proc_);
    }

    // optional .android.app.ProfilerInfoProto info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_Profile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_Profile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_Profile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_Profile::MergeFrom(const ActivityManagerServiceDumpProcessesProto_Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.proc());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_info()->::android::app::ProfilerInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_Profile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_Profile::CopyFrom(const ActivityManagerServiceDumpProcessesProto_Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_Profile::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_Profile::InternalSwap(ActivityManagerServiceDumpProcessesProto_Profile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_name_.Swap(&other->app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proc_, other->proc_);
  swap(info_, other->info_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_Profile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto_Controller::InitAsDefaultInstance() {
}
class ActivityManagerServiceDumpProcessesProto_Controller::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto_Controller>()._has_bits_);
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_a_monkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityManagerServiceDumpProcessesProto_Controller::ActivityManagerServiceDumpProcessesProto_Controller()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
}
ActivityManagerServiceDumpProcessesProto_Controller::ActivityManagerServiceDumpProcessesProto_Controller(const ActivityManagerServiceDumpProcessesProto_Controller& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller()) {
    controller_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_);
  }
  is_a_monkey_ = from.is_a_monkey_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
}

void ActivityManagerServiceDumpProcessesProto_Controller::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_a_monkey_ = false;
}

ActivityManagerServiceDumpProcessesProto_Controller::~ActivityManagerServiceDumpProcessesProto_Controller() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto_Controller::SharedDtor() {
  controller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityManagerServiceDumpProcessesProto_Controller::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto_Controller& ActivityManagerServiceDumpProcessesProto_Controller::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_Controller_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto_Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    controller_.ClearNonDefaultToEmptyNoArena();
  }
  is_a_monkey_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto_Controller::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_controller(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_a_monkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_a_monkey(&has_bits);
          is_a_monkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto_Controller::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string controller = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_controller()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller().data(), static_cast<int>(this->controller().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_a_monkey = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_a_monkey(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_a_monkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto_Controller::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string controller = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller().data(), static_cast<int>(this->controller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->controller(), output);
  }

  // optional bool is_a_monkey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_a_monkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto_Controller::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string controller = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller().data(), static_cast<int>(this->controller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->controller(), target);
  }

  // optional bool is_a_monkey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_a_monkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto_Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string controller = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->controller());
    }

    // optional bool is_a_monkey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto_Controller::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto_Controller* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto_Controller>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto_Controller::MergeFrom(const ActivityManagerServiceDumpProcessesProto_Controller& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      controller_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_a_monkey_ = from.is_a_monkey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto_Controller::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto_Controller::CopyFrom(const ActivityManagerServiceDumpProcessesProto_Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto_Controller::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto_Controller::InternalSwap(ActivityManagerServiceDumpProcessesProto_Controller* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  controller_.Swap(&other->controller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_a_monkey_, other->is_a_monkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto_Controller::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityManagerServiceDumpProcessesProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->lru_procs_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->app_errors_ = const_cast< ::com::android::server::am::AppErrorsProto*>(
      ::com::android::server::am::AppErrorsProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->user_controller_ = const_cast< ::com::android::server::am::UserControllerProto*>(
      ::com::android::server::am::UserControllerProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->home_proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->previous_proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->heavy_weight_proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->global_configuration_ = const_cast< ::android::content::ConfigurationProto*>(
      ::android::content::ConfigurationProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->sleep_status_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->running_voice_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->vr_controller_ = const_cast< ::com::android::server::am::VrControllerProto*>(
      ::com::android::server::am::VrControllerProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->debug_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->current_tracker_ = const_cast< ::com::android::server::am::AppTimeTrackerProto*>(
      ::com::android::server::am::AppTimeTrackerProto::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->mem_watch_processes_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->profile_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->controller_ = const_cast< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller*>(
      ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->going_to_sleep_ = const_cast< ::android::os::PowerManagerProto_WakeLock*>(
      ::android::os::PowerManagerProto_WakeLock::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->launching_activity_ = const_cast< ::android::os::PowerManagerProto_WakeLock*>(
      ::android::os::PowerManagerProto_WakeLock::internal_default_instance());
  ::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_._instance.get_mutable()->last_idle_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
}
class ActivityManagerServiceDumpProcessesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityManagerServiceDumpProcessesProto>()._has_bits_);
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses& lru_procs(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_lru_procs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::am::AppErrorsProto& app_errors(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_app_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::am::UserControllerProto& user_controller(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_user_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::com::android::server::am::ProcessRecordProto& home_proc(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_home_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::android::server::am::ProcessRecordProto& previous_proc(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_previous_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_previous_proc_visible_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::com::android::server::am::ProcessRecordProto& heavy_weight_proc(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_heavy_weight_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::content::ConfigurationProto& global_configuration(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_global_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_config_will_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus& sleep_status(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_sleep_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice& running_voice(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_running_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::com::android::server::am::VrControllerProto& vr_controller(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_vr_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp& debug(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::com::android::server::am::AppTimeTrackerProto& current_tracker(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_current_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess& mem_watch_processes(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_mem_watch_processes(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_track_allocation_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile& profile(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_native_debugging_app(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_always_finish_activities(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller& controller(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_total_persistent_procs(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_processes_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_system_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_booted(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_factory_test(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_booting(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_call_finish_booting(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_boot_animation_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_last_power_check_uptime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::android::os::PowerManagerProto_WakeLock& going_to_sleep(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_going_to_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::os::PowerManagerProto_WakeLock& launching_activity(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_launching_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_adj_seq(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_lru_seq(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_num_non_cached_procs(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_num_cached_hidden_procs(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_num_service_procs(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_new_num_service_procs(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_allow_lower_mem_level(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_last_memory_level(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_last_num_processes(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::android::util::Duration& last_idle_time(const ActivityManagerServiceDumpProcessesProto* msg);
  static void set_has_last_idle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_low_ram_since_last_idle_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
};

const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses&
ActivityManagerServiceDumpProcessesProto::_Internal::lru_procs(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->lru_procs_;
}
const ::com::android::server::am::AppErrorsProto&
ActivityManagerServiceDumpProcessesProto::_Internal::app_errors(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->app_errors_;
}
const ::com::android::server::am::UserControllerProto&
ActivityManagerServiceDumpProcessesProto::_Internal::user_controller(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->user_controller_;
}
const ::com::android::server::am::ProcessRecordProto&
ActivityManagerServiceDumpProcessesProto::_Internal::home_proc(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->home_proc_;
}
const ::com::android::server::am::ProcessRecordProto&
ActivityManagerServiceDumpProcessesProto::_Internal::previous_proc(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->previous_proc_;
}
const ::com::android::server::am::ProcessRecordProto&
ActivityManagerServiceDumpProcessesProto::_Internal::heavy_weight_proc(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->heavy_weight_proc_;
}
const ::android::content::ConfigurationProto&
ActivityManagerServiceDumpProcessesProto::_Internal::global_configuration(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->global_configuration_;
}
const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus&
ActivityManagerServiceDumpProcessesProto::_Internal::sleep_status(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->sleep_status_;
}
const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice&
ActivityManagerServiceDumpProcessesProto::_Internal::running_voice(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->running_voice_;
}
const ::com::android::server::am::VrControllerProto&
ActivityManagerServiceDumpProcessesProto::_Internal::vr_controller(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->vr_controller_;
}
const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp&
ActivityManagerServiceDumpProcessesProto::_Internal::debug(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->debug_;
}
const ::com::android::server::am::AppTimeTrackerProto&
ActivityManagerServiceDumpProcessesProto::_Internal::current_tracker(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->current_tracker_;
}
const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess&
ActivityManagerServiceDumpProcessesProto::_Internal::mem_watch_processes(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->mem_watch_processes_;
}
const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile&
ActivityManagerServiceDumpProcessesProto::_Internal::profile(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->profile_;
}
const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller&
ActivityManagerServiceDumpProcessesProto::_Internal::controller(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->controller_;
}
const ::android::os::PowerManagerProto_WakeLock&
ActivityManagerServiceDumpProcessesProto::_Internal::going_to_sleep(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->going_to_sleep_;
}
const ::android::os::PowerManagerProto_WakeLock&
ActivityManagerServiceDumpProcessesProto::_Internal::launching_activity(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->launching_activity_;
}
const ::android::util::Duration&
ActivityManagerServiceDumpProcessesProto::_Internal::last_idle_time(const ActivityManagerServiceDumpProcessesProto* msg) {
  return *msg->last_idle_time_;
}
void ActivityManagerServiceDumpProcessesProto::clear_global_configuration() {
  if (global_configuration_ != nullptr) global_configuration_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ActivityManagerServiceDumpProcessesProto::clear_going_to_sleep() {
  if (going_to_sleep_ != nullptr) going_to_sleep_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ActivityManagerServiceDumpProcessesProto::clear_launching_activity() {
  if (launching_activity_ != nullptr) launching_activity_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ActivityManagerServiceDumpProcessesProto::clear_last_idle_time() {
  if (last_idle_time_ != nullptr) last_idle_time_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
ActivityManagerServiceDumpProcessesProto::ActivityManagerServiceDumpProcessesProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
}
ActivityManagerServiceDumpProcessesProto::ActivityManagerServiceDumpProcessesProto(const ActivityManagerServiceDumpProcessesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      procs_(from.procs_),
      isolated_procs_(from.isolated_procs_),
      active_instrumentations_(from.active_instrumentations_),
      active_uids_(from.active_uids_),
      validate_uids_(from.validate_uids_),
      pids_self_locked_(from.pids_self_locked_),
      important_procs_(from.important_procs_),
      persistent_starting_procs_(from.persistent_starting_procs_),
      removed_procs_(from.removed_procs_),
      on_hold_procs_(from.on_hold_procs_),
      gc_procs_(from.gc_procs_),
      screen_compat_packages_(from.screen_compat_packages_),
      uid_observers_(from.uid_observers_),
      device_idle_whitelist_(from.device_idle_whitelist_),
      device_idle_temp_whitelist_(from.device_idle_temp_whitelist_),
      pending_temp_whitelist_(from.pending_temp_whitelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_allocation_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_allocation_app()) {
    track_allocation_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_allocation_app_);
  }
  native_debugging_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_native_debugging_app()) {
    native_debugging_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.native_debugging_app_);
  }
  if (from.has_lru_procs()) {
    lru_procs_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses(*from.lru_procs_);
  } else {
    lru_procs_ = nullptr;
  }
  if (from.has_app_errors()) {
    app_errors_ = new ::com::android::server::am::AppErrorsProto(*from.app_errors_);
  } else {
    app_errors_ = nullptr;
  }
  if (from.has_user_controller()) {
    user_controller_ = new ::com::android::server::am::UserControllerProto(*from.user_controller_);
  } else {
    user_controller_ = nullptr;
  }
  if (from.has_home_proc()) {
    home_proc_ = new ::com::android::server::am::ProcessRecordProto(*from.home_proc_);
  } else {
    home_proc_ = nullptr;
  }
  if (from.has_previous_proc()) {
    previous_proc_ = new ::com::android::server::am::ProcessRecordProto(*from.previous_proc_);
  } else {
    previous_proc_ = nullptr;
  }
  if (from.has_heavy_weight_proc()) {
    heavy_weight_proc_ = new ::com::android::server::am::ProcessRecordProto(*from.heavy_weight_proc_);
  } else {
    heavy_weight_proc_ = nullptr;
  }
  if (from.has_global_configuration()) {
    global_configuration_ = new ::android::content::ConfigurationProto(*from.global_configuration_);
  } else {
    global_configuration_ = nullptr;
  }
  if (from.has_sleep_status()) {
    sleep_status_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus(*from.sleep_status_);
  } else {
    sleep_status_ = nullptr;
  }
  if (from.has_running_voice()) {
    running_voice_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice(*from.running_voice_);
  } else {
    running_voice_ = nullptr;
  }
  if (from.has_vr_controller()) {
    vr_controller_ = new ::com::android::server::am::VrControllerProto(*from.vr_controller_);
  } else {
    vr_controller_ = nullptr;
  }
  if (from.has_debug()) {
    debug_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from.has_current_tracker()) {
    current_tracker_ = new ::com::android::server::am::AppTimeTrackerProto(*from.current_tracker_);
  } else {
    current_tracker_ = nullptr;
  }
  if (from.has_mem_watch_processes()) {
    mem_watch_processes_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess(*from.mem_watch_processes_);
  } else {
    mem_watch_processes_ = nullptr;
  }
  if (from.has_profile()) {
    profile_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile(*from.profile_);
  } else {
    profile_ = nullptr;
  }
  if (from.has_controller()) {
    controller_ = new ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  if (from.has_going_to_sleep()) {
    going_to_sleep_ = new ::android::os::PowerManagerProto_WakeLock(*from.going_to_sleep_);
  } else {
    going_to_sleep_ = nullptr;
  }
  if (from.has_launching_activity()) {
    launching_activity_ = new ::android::os::PowerManagerProto_WakeLock(*from.launching_activity_);
  } else {
    launching_activity_ = nullptr;
  }
  if (from.has_last_idle_time()) {
    last_idle_time_ = new ::android::util::Duration(*from.last_idle_time_);
  } else {
    last_idle_time_ = nullptr;
  }
  ::memcpy(&previous_proc_visible_time_ms_, &from.previous_proc_visible_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_num_processes_) -
    reinterpret_cast<char*>(&previous_proc_visible_time_ms_)) + sizeof(last_num_processes_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
}

void ActivityManagerServiceDumpProcessesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  track_allocation_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  native_debugging_app_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lru_procs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_num_processes_) -
      reinterpret_cast<char*>(&lru_procs_)) + sizeof(last_num_processes_));
}

ActivityManagerServiceDumpProcessesProto::~ActivityManagerServiceDumpProcessesProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  SharedDtor();
}

void ActivityManagerServiceDumpProcessesProto::SharedDtor() {
  track_allocation_app_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  native_debugging_app_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lru_procs_;
  if (this != internal_default_instance()) delete app_errors_;
  if (this != internal_default_instance()) delete user_controller_;
  if (this != internal_default_instance()) delete home_proc_;
  if (this != internal_default_instance()) delete previous_proc_;
  if (this != internal_default_instance()) delete heavy_weight_proc_;
  if (this != internal_default_instance()) delete global_configuration_;
  if (this != internal_default_instance()) delete sleep_status_;
  if (this != internal_default_instance()) delete running_voice_;
  if (this != internal_default_instance()) delete vr_controller_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete current_tracker_;
  if (this != internal_default_instance()) delete mem_watch_processes_;
  if (this != internal_default_instance()) delete profile_;
  if (this != internal_default_instance()) delete controller_;
  if (this != internal_default_instance()) delete going_to_sleep_;
  if (this != internal_default_instance()) delete launching_activity_;
  if (this != internal_default_instance()) delete last_idle_time_;
}

void ActivityManagerServiceDumpProcessesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityManagerServiceDumpProcessesProto& ActivityManagerServiceDumpProcessesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityManagerServiceDumpProcessesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActivityManagerServiceDumpProcessesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procs_.Clear();
  isolated_procs_.Clear();
  active_instrumentations_.Clear();
  active_uids_.Clear();
  validate_uids_.Clear();
  pids_self_locked_.Clear();
  important_procs_.Clear();
  persistent_starting_procs_.Clear();
  removed_procs_.Clear();
  on_hold_procs_.Clear();
  gc_procs_.Clear();
  screen_compat_packages_.Clear();
  uid_observers_.Clear();
  device_idle_whitelist_.Clear();
  device_idle_temp_whitelist_.Clear();
  pending_temp_whitelist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      track_allocation_app_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      native_debugging_app_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lru_procs_ != nullptr);
      lru_procs_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(app_errors_ != nullptr);
      app_errors_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(user_controller_ != nullptr);
      user_controller_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(home_proc_ != nullptr);
      home_proc_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(previous_proc_ != nullptr);
      previous_proc_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(heavy_weight_proc_ != nullptr);
      heavy_weight_proc_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(global_configuration_ != nullptr);
      global_configuration_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sleep_status_ != nullptr);
      sleep_status_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(running_voice_ != nullptr);
      running_voice_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(vr_controller_ != nullptr);
      vr_controller_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(debug_ != nullptr);
      debug_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(current_tracker_ != nullptr);
      current_tracker_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(mem_watch_processes_ != nullptr);
      mem_watch_processes_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(profile_ != nullptr);
      profile_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(controller_ != nullptr);
      controller_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(going_to_sleep_ != nullptr);
      going_to_sleep_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(launching_activity_ != nullptr);
      launching_activity_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(last_idle_time_ != nullptr);
      last_idle_time_->Clear();
    }
  }
  if (cached_has_bits & 0x00f00000u) {
    ::memset(&previous_proc_visible_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&processes_ready_) -
        reinterpret_cast<char*>(&previous_proc_visible_time_ms_)) + sizeof(processes_ready_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&system_ready_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_power_check_uptime_ms_) -
        reinterpret_cast<char*>(&system_ready_)) + sizeof(last_power_check_uptime_ms_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&adj_seq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_memory_level_) -
        reinterpret_cast<char*>(&adj_seq_)) + sizeof(last_memory_level_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&low_ram_since_last_idle_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_num_processes_) -
        reinterpret_cast<char*>(&low_ram_since_last_idle_ms_)) + sizeof(last_num_processes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityManagerServiceDumpProcessesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.am.ProcessRecordProto procs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessRecordProto isolated_procs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_isolated_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ActiveInstrumentationProto active_instrumentations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_instrumentations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.UidRecordProto active_uids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.UidRecordProto validate_uids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_validate_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses lru_procs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_lru_procs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessRecordProto pids_self_locked = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pids_self_locked(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ImportanceTokenProto important_procs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_important_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessRecordProto persistent_starting_procs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_persistent_starting_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessRecordProto removed_procs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_removed_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessRecordProto on_hold_procs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_on_hold_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessToGcProto gc_procs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_gc_procs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.AppErrorsProto app_errors = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_app_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.UserControllerProto user_controller = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_user_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto home_proc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_home_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto previous_proc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_previous_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 previous_proc_visible_time_ms = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_previous_proc_visible_time_ms(&_has_bits_);
          previous_proc_visible_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto heavy_weight_proc = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_heavy_weight_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ConfigurationProto global_configuration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_global_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool config_will_change = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_config_will_change(&_has_bits_);
          config_will_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage screen_compat_packages = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_screen_compat_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto uid_observers = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_uid_observers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // repeated int32 device_idle_whitelist = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_device_idle_whitelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 448);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_device_idle_whitelist(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 device_idle_temp_whitelist = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_device_idle_temp_whitelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 456);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_device_idle_temp_whitelist(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist pending_temp_whitelist = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pending_temp_whitelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 466);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus sleep_status = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_sleep_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice running_voice = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_running_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.VrControllerProto vr_controller = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_vr_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp debug = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.AppTimeTrackerProto current_tracker = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_current_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess mem_watch_processes = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_mem_watch_processes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string track_allocation_app = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_track_allocation_app(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile profile = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string native_debugging_app = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_native_debugging_app(), ptr, ctx, "com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_finish_activities = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_always_finish_activities(&_has_bits_);
          always_finish_activities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller controller = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_persistent_procs = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_total_persistent_procs(&_has_bits_);
          total_persistent_procs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool processes_ready = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_processes_ready(&_has_bits_);
          processes_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool system_ready = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_system_ready(&_has_bits_);
          system_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool booted = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_booted(&_has_bits_);
          booted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 factory_test = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_factory_test(&_has_bits_);
          factory_test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool booting = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_booting(&_has_bits_);
          booting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool call_finish_booting = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_call_finish_booting(&_has_bits_);
          call_finish_booting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boot_animation_complete = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_boot_animation_complete(&_has_bits_);
          boot_animation_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_power_check_uptime_ms = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_last_power_check_uptime_ms(&_has_bits_);
          last_power_check_uptime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.PowerManagerProto.WakeLock going_to_sleep = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_going_to_sleep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.PowerManagerProto.WakeLock launching_activity = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_launching_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 adj_seq = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_adj_seq(&_has_bits_);
          adj_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lru_seq = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lru_seq(&_has_bits_);
          lru_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_non_cached_procs = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_num_non_cached_procs(&_has_bits_);
          num_non_cached_procs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_cached_hidden_procs = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_num_cached_hidden_procs(&_has_bits_);
          num_cached_hidden_procs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_service_procs = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_num_service_procs(&_has_bits_);
          num_service_procs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_num_service_procs = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_new_num_service_procs(&_has_bits_);
          new_num_service_procs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_lower_mem_level = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_allow_lower_mem_level(&_has_bits_);
          allow_lower_mem_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_memory_level = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_last_memory_level(&_has_bits_);
          last_memory_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_num_processes = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_last_num_processes(&_has_bits_);
          last_num_processes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration last_idle_time = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_last_idle_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 low_ram_since_last_idle_ms = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_low_ram_since_last_idle_ms(&_has_bits_);
          low_ram_since_last_idle_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityManagerServiceDumpProcessesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.am.ProcessRecordProto procs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessRecordProto isolated_procs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_isolated_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ActiveInstrumentationProto active_instrumentations = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_instrumentations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.UidRecordProto active_uids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_uids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.UidRecordProto validate_uids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_validate_uids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses lru_procs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lru_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessRecordProto pids_self_locked = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pids_self_locked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ImportanceTokenProto important_procs = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_important_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessRecordProto persistent_starting_procs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_persistent_starting_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessRecordProto removed_procs = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_removed_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessRecordProto on_hold_procs = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_on_hold_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessToGcProto gc_procs = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_gc_procs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.AppErrorsProto app_errors = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.UserControllerProto user_controller = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto home_proc = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_home_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto previous_proc = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 previous_proc_visible_time_ms = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_previous_proc_visible_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_proc_visible_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto heavy_weight_proc = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heavy_weight_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ConfigurationProto global_configuration = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool config_will_change = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_config_will_change(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &config_will_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage screen_compat_packages = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_screen_compat_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto uid_observers = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_uid_observers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 device_idle_whitelist = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 192u, input, this->mutable_device_idle_whitelist())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_device_idle_whitelist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 device_idle_temp_whitelist = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 200u, input, this->mutable_device_idle_temp_whitelist())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_device_idle_temp_whitelist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist pending_temp_whitelist = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_temp_whitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus sleep_status = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sleep_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice running_voice = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_running_voice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.VrControllerProto vr_controller = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vr_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp debug = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.AppTimeTrackerProto current_tracker = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess mem_watch_processes = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mem_watch_processes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track_allocation_app = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_track_allocation_app()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_allocation_app().data(), static_cast<int>(this->track_allocation_app().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile profile = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string native_debugging_app = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_native_debugging_app()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->native_debugging_app().data(), static_cast<int>(this->native_debugging_app().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool always_finish_activities = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          _Internal::set_has_always_finish_activities(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_finish_activities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller controller = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_persistent_procs = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          _Internal::set_has_total_persistent_procs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_persistent_procs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool processes_ready = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {
          _Internal::set_has_processes_ready(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processes_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool system_ready = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          _Internal::set_has_system_ready(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool booted = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {
          _Internal::set_has_booted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &booted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 factory_test = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          _Internal::set_has_factory_test(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &factory_test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool booting = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {
          _Internal::set_has_booting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &booting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool call_finish_booting = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (352 & 0xFF)) {
          _Internal::set_has_call_finish_booting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_finish_booting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boot_animation_complete = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {
          _Internal::set_has_boot_animation_complete(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boot_animation_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_power_check_uptime_ms = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (368 & 0xFF)) {
          _Internal::set_has_last_power_check_uptime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_power_check_uptime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.PowerManagerProto.WakeLock going_to_sleep = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_going_to_sleep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.PowerManagerProto.WakeLock launching_activity = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_launching_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 adj_seq = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (392 & 0xFF)) {
          _Internal::set_has_adj_seq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &adj_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lru_seq = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (400 & 0xFF)) {
          _Internal::set_has_lru_seq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lru_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_non_cached_procs = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (408 & 0xFF)) {
          _Internal::set_has_num_non_cached_procs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_non_cached_procs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_cached_hidden_procs = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (416 & 0xFF)) {
          _Internal::set_has_num_cached_hidden_procs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cached_hidden_procs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_service_procs = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (424 & 0xFF)) {
          _Internal::set_has_num_service_procs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_service_procs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_num_service_procs = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (432 & 0xFF)) {
          _Internal::set_has_new_num_service_procs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_num_service_procs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_lower_mem_level = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (440 & 0xFF)) {
          _Internal::set_has_allow_lower_mem_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_lower_mem_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_memory_level = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (448 & 0xFF)) {
          _Internal::set_has_last_memory_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_memory_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_num_processes = 57;
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (456 & 0xFF)) {
          _Internal::set_has_last_num_processes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_num_processes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration last_idle_time = 58;
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_idle_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 low_ram_since_last_idle_ms = 59;
      case 59: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (472 & 0xFF)) {
          _Internal::set_has_low_ram_since_last_idle_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_ram_since_last_idle_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityManagerServiceDumpProcessesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ProcessRecordProto procs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->procs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ProcessRecordProto isolated_procs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->isolated_procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->isolated_procs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ActiveInstrumentationProto active_instrumentations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_instrumentations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->active_instrumentations(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.UidRecordProto active_uids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_uids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->active_uids(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.UidRecordProto validate_uids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validate_uids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->validate_uids(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses lru_procs = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::lru_procs(this), output);
  }

  // repeated .com.android.server.am.ProcessRecordProto pids_self_locked = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pids_self_locked_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->pids_self_locked(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ImportanceTokenProto important_procs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->important_procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->important_procs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ProcessRecordProto persistent_starting_procs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persistent_starting_procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->persistent_starting_procs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ProcessRecordProto removed_procs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->removed_procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->removed_procs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ProcessRecordProto on_hold_procs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->on_hold_procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->on_hold_procs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ProcessToGcProto gc_procs = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gc_procs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->gc_procs(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.am.AppErrorsProto app_errors = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::app_errors(this), output);
  }

  // optional .com.android.server.am.UserControllerProto user_controller = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::user_controller(this), output);
  }

  // optional .com.android.server.am.ProcessRecordProto home_proc = 15;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::home_proc(this), output);
  }

  // optional .com.android.server.am.ProcessRecordProto previous_proc = 16;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::previous_proc(this), output);
  }

  // optional int64 previous_proc_visible_time_ms = 17;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->previous_proc_visible_time_ms(), output);
  }

  // optional .com.android.server.am.ProcessRecordProto heavy_weight_proc = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, _Internal::heavy_weight_proc(this), output);
  }

  // optional .android.content.ConfigurationProto global_configuration = 19;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, _Internal::global_configuration(this), output);
  }

  // optional bool config_will_change = 21;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->config_will_change(), output);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage screen_compat_packages = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->screen_compat_packages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->screen_compat_packages(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto uid_observers = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_observers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->uid_observers(static_cast<int>(i)),
      output);
  }

  // repeated int32 device_idle_whitelist = 24;
  for (int i = 0, n = this->device_idle_whitelist_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      24, this->device_idle_whitelist(i), output);
  }

  // repeated int32 device_idle_temp_whitelist = 25;
  for (int i = 0, n = this->device_idle_temp_whitelist_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      25, this->device_idle_temp_whitelist(i), output);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist pending_temp_whitelist = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_temp_whitelist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26,
      this->pending_temp_whitelist(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus sleep_status = 27;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, _Internal::sleep_status(this), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice running_voice = 28;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, _Internal::running_voice(this), output);
  }

  // optional .com.android.server.am.VrControllerProto vr_controller = 29;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, _Internal::vr_controller(this), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp debug = 30;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, _Internal::debug(this), output);
  }

  // optional .com.android.server.am.AppTimeTrackerProto current_tracker = 31;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, _Internal::current_tracker(this), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess mem_watch_processes = 32;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, _Internal::mem_watch_processes(this), output);
  }

  // optional string track_allocation_app = 33;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_allocation_app().data(), static_cast<int>(this->track_allocation_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->track_allocation_app(), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile profile = 34;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, _Internal::profile(this), output);
  }

  // optional string native_debugging_app = 35;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_debugging_app().data(), static_cast<int>(this->native_debugging_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->native_debugging_app(), output);
  }

  // optional bool always_finish_activities = 36;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->always_finish_activities(), output);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller controller = 37;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, _Internal::controller(this), output);
  }

  // optional int32 total_persistent_procs = 38;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(38, this->total_persistent_procs(), output);
  }

  // optional bool processes_ready = 39;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(39, this->processes_ready(), output);
  }

  // optional bool system_ready = 40;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(40, this->system_ready(), output);
  }

  // optional bool booted = 41;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(41, this->booted(), output);
  }

  // optional int32 factory_test = 42;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(42, this->factory_test(), output);
  }

  // optional bool booting = 43;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(43, this->booting(), output);
  }

  // optional bool call_finish_booting = 44;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(44, this->call_finish_booting(), output);
  }

  // optional bool boot_animation_complete = 45;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(45, this->boot_animation_complete(), output);
  }

  // optional int64 last_power_check_uptime_ms = 46;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(46, this->last_power_check_uptime_ms(), output);
  }

  // optional .android.os.PowerManagerProto.WakeLock going_to_sleep = 47;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, _Internal::going_to_sleep(this), output);
  }

  // optional .android.os.PowerManagerProto.WakeLock launching_activity = 48;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, _Internal::launching_activity(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 adj_seq = 49;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(49, this->adj_seq(), output);
  }

  // optional int32 lru_seq = 50;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(50, this->lru_seq(), output);
  }

  // optional int32 num_non_cached_procs = 51;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(51, this->num_non_cached_procs(), output);
  }

  // optional int32 num_cached_hidden_procs = 52;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(52, this->num_cached_hidden_procs(), output);
  }

  // optional int32 num_service_procs = 53;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(53, this->num_service_procs(), output);
  }

  // optional int32 new_num_service_procs = 54;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(54, this->new_num_service_procs(), output);
  }

  // optional bool allow_lower_mem_level = 55;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(55, this->allow_lower_mem_level(), output);
  }

  // optional int32 last_memory_level = 56;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(56, this->last_memory_level(), output);
  }

  // optional int32 last_num_processes = 57;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(57, this->last_num_processes(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.util.Duration last_idle_time = 58;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, _Internal::last_idle_time(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 low_ram_since_last_idle_ms = 59;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(59, this->low_ram_since_last_idle_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityManagerServiceDumpProcessesProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.ProcessRecordProto procs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->procs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ProcessRecordProto isolated_procs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->isolated_procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->isolated_procs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ActiveInstrumentationProto active_instrumentations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_instrumentations_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->active_instrumentations(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.UidRecordProto active_uids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_uids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->active_uids(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.UidRecordProto validate_uids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validate_uids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->validate_uids(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses lru_procs = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::lru_procs(this), target);
  }

  // repeated .com.android.server.am.ProcessRecordProto pids_self_locked = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pids_self_locked_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->pids_self_locked(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ImportanceTokenProto important_procs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->important_procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->important_procs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ProcessRecordProto persistent_starting_procs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persistent_starting_procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->persistent_starting_procs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ProcessRecordProto removed_procs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->removed_procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->removed_procs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ProcessRecordProto on_hold_procs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->on_hold_procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->on_hold_procs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ProcessToGcProto gc_procs = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gc_procs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->gc_procs(static_cast<int>(i)), target);
  }

  // optional .com.android.server.am.AppErrorsProto app_errors = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::app_errors(this), target);
  }

  // optional .com.android.server.am.UserControllerProto user_controller = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::user_controller(this), target);
  }

  // optional .com.android.server.am.ProcessRecordProto home_proc = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::home_proc(this), target);
  }

  // optional .com.android.server.am.ProcessRecordProto previous_proc = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::previous_proc(this), target);
  }

  // optional int64 previous_proc_visible_time_ms = 17;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->previous_proc_visible_time_ms(), target);
  }

  // optional .com.android.server.am.ProcessRecordProto heavy_weight_proc = 18;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::heavy_weight_proc(this), target);
  }

  // optional .android.content.ConfigurationProto global_configuration = 19;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::global_configuration(this), target);
  }

  // optional bool config_will_change = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->config_will_change(), target);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage screen_compat_packages = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->screen_compat_packages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->screen_compat_packages(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto uid_observers = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_observers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->uid_observers(static_cast<int>(i)), target);
  }

  // repeated int32 device_idle_whitelist = 24;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(24, this->device_idle_whitelist_, target);

  // repeated int32 device_idle_temp_whitelist = 25;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(25, this->device_idle_temp_whitelist_, target);

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist pending_temp_whitelist = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_temp_whitelist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->pending_temp_whitelist(static_cast<int>(i)), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus sleep_status = 27;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, _Internal::sleep_status(this), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice running_voice = 28;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, _Internal::running_voice(this), target);
  }

  // optional .com.android.server.am.VrControllerProto vr_controller = 29;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::vr_controller(this), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp debug = 30;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, _Internal::debug(this), target);
  }

  // optional .com.android.server.am.AppTimeTrackerProto current_tracker = 31;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, _Internal::current_tracker(this), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess mem_watch_processes = 32;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, _Internal::mem_watch_processes(this), target);
  }

  // optional string track_allocation_app = 33;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_allocation_app().data(), static_cast<int>(this->track_allocation_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        33, this->track_allocation_app(), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile profile = 34;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, _Internal::profile(this), target);
  }

  // optional string native_debugging_app = 35;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_debugging_app().data(), static_cast<int>(this->native_debugging_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        35, this->native_debugging_app(), target);
  }

  // optional bool always_finish_activities = 36;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->always_finish_activities(), target);
  }

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller controller = 37;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, _Internal::controller(this), target);
  }

  // optional int32 total_persistent_procs = 38;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->total_persistent_procs(), target);
  }

  // optional bool processes_ready = 39;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->processes_ready(), target);
  }

  // optional bool system_ready = 40;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->system_ready(), target);
  }

  // optional bool booted = 41;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->booted(), target);
  }

  // optional int32 factory_test = 42;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->factory_test(), target);
  }

  // optional bool booting = 43;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->booting(), target);
  }

  // optional bool call_finish_booting = 44;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->call_finish_booting(), target);
  }

  // optional bool boot_animation_complete = 45;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->boot_animation_complete(), target);
  }

  // optional int64 last_power_check_uptime_ms = 46;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(46, this->last_power_check_uptime_ms(), target);
  }

  // optional .android.os.PowerManagerProto.WakeLock going_to_sleep = 47;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        47, _Internal::going_to_sleep(this), target);
  }

  // optional .android.os.PowerManagerProto.WakeLock launching_activity = 48;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, _Internal::launching_activity(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 adj_seq = 49;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->adj_seq(), target);
  }

  // optional int32 lru_seq = 50;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->lru_seq(), target);
  }

  // optional int32 num_non_cached_procs = 51;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->num_non_cached_procs(), target);
  }

  // optional int32 num_cached_hidden_procs = 52;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->num_cached_hidden_procs(), target);
  }

  // optional int32 num_service_procs = 53;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->num_service_procs(), target);
  }

  // optional int32 new_num_service_procs = 54;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->new_num_service_procs(), target);
  }

  // optional bool allow_lower_mem_level = 55;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->allow_lower_mem_level(), target);
  }

  // optional int32 last_memory_level = 56;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(56, this->last_memory_level(), target);
  }

  // optional int32 last_num_processes = 57;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(57, this->last_num_processes(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.util.Duration last_idle_time = 58;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        58, _Internal::last_idle_time(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 low_ram_since_last_idle_ms = 59;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(59, this->low_ram_since_last_idle_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  return target;
}

size_t ActivityManagerServiceDumpProcessesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ProcessRecordProto procs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->procs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ProcessRecordProto isolated_procs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->isolated_procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->isolated_procs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ActiveInstrumentationProto active_instrumentations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->active_instrumentations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_instrumentations(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.UidRecordProto active_uids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->active_uids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_uids(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.UidRecordProto validate_uids = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->validate_uids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->validate_uids(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ProcessRecordProto pids_self_locked = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->pids_self_locked_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pids_self_locked(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ImportanceTokenProto important_procs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->important_procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->important_procs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ProcessRecordProto persistent_starting_procs = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->persistent_starting_procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->persistent_starting_procs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ProcessRecordProto removed_procs = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->removed_procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->removed_procs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ProcessRecordProto on_hold_procs = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->on_hold_procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->on_hold_procs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ProcessToGcProto gc_procs = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->gc_procs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->gc_procs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage screen_compat_packages = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->screen_compat_packages_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->screen_compat_packages(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto uid_observers = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->uid_observers_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->uid_observers(static_cast<int>(i)));
    }
  }

  // repeated int32 device_idle_whitelist = 24;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->device_idle_whitelist_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_idle_whitelist_size());
    total_size += data_size;
  }

  // repeated int32 device_idle_temp_whitelist = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->device_idle_temp_whitelist_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_idle_temp_whitelist_size());
    total_size += data_size;
  }

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist pending_temp_whitelist = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_temp_whitelist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_temp_whitelist(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string track_allocation_app = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->track_allocation_app());
    }

    // optional string native_debugging_app = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->native_debugging_app());
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses lru_procs = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lru_procs_);
    }

    // optional .com.android.server.am.AppErrorsProto app_errors = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_errors_);
    }

    // optional .com.android.server.am.UserControllerProto user_controller = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_controller_);
    }

    // optional .com.android.server.am.ProcessRecordProto home_proc = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *home_proc_);
    }

    // optional .com.android.server.am.ProcessRecordProto previous_proc = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *previous_proc_);
    }

    // optional .com.android.server.am.ProcessRecordProto heavy_weight_proc = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heavy_weight_proc_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.content.ConfigurationProto global_configuration = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_configuration_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus sleep_status = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sleep_status_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice running_voice = 28;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *running_voice_);
    }

    // optional .com.android.server.am.VrControllerProto vr_controller = 29;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vr_controller_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp debug = 30;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_);
    }

    // optional .com.android.server.am.AppTimeTrackerProto current_tracker = 31;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_tracker_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess mem_watch_processes = 32;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mem_watch_processes_);
    }

    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile profile = 34;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller controller = 37;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_);
    }

    // optional .android.os.PowerManagerProto.WakeLock going_to_sleep = 47;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *going_to_sleep_);
    }

    // optional .android.os.PowerManagerProto.WakeLock launching_activity = 48;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *launching_activity_);
    }

    // optional .android.util.Duration last_idle_time = 58;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_idle_time_);
    }

    // optional int64 previous_proc_visible_time_ms = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->previous_proc_visible_time_ms());
    }

    // optional bool config_will_change = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool always_finish_activities = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool processes_ready = 39;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool system_ready = 40;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 total_persistent_procs = 38;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_persistent_procs());
    }

    // optional int32 factory_test = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->factory_test());
    }

    // optional bool booted = 41;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool booting = 43;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool call_finish_booting = 44;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool boot_animation_complete = 45;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional int64 last_power_check_uptime_ms = 46;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_power_check_uptime_ms());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 adj_seq = 49;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->adj_seq());
    }

    // optional int32 lru_seq = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lru_seq());
    }

    // optional int32 num_non_cached_procs = 51;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_non_cached_procs());
    }

    // optional int32 num_cached_hidden_procs = 52;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_cached_hidden_procs());
    }

    // optional int32 num_service_procs = 53;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_service_procs());
    }

    // optional int32 new_num_service_procs = 54;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->new_num_service_procs());
    }

    // optional bool allow_lower_mem_level = 55;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional int32 last_memory_level = 56;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_memory_level());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 low_ram_since_last_idle_ms = 59;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->low_ram_since_last_idle_ms());
    }

    // optional int32 last_num_processes = 57;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_num_processes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityManagerServiceDumpProcessesProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityManagerServiceDumpProcessesProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityManagerServiceDumpProcessesProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
    MergeFrom(*source);
  }
}

void ActivityManagerServiceDumpProcessesProto::MergeFrom(const ActivityManagerServiceDumpProcessesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  procs_.MergeFrom(from.procs_);
  isolated_procs_.MergeFrom(from.isolated_procs_);
  active_instrumentations_.MergeFrom(from.active_instrumentations_);
  active_uids_.MergeFrom(from.active_uids_);
  validate_uids_.MergeFrom(from.validate_uids_);
  pids_self_locked_.MergeFrom(from.pids_self_locked_);
  important_procs_.MergeFrom(from.important_procs_);
  persistent_starting_procs_.MergeFrom(from.persistent_starting_procs_);
  removed_procs_.MergeFrom(from.removed_procs_);
  on_hold_procs_.MergeFrom(from.on_hold_procs_);
  gc_procs_.MergeFrom(from.gc_procs_);
  screen_compat_packages_.MergeFrom(from.screen_compat_packages_);
  uid_observers_.MergeFrom(from.uid_observers_);
  device_idle_whitelist_.MergeFrom(from.device_idle_whitelist_);
  device_idle_temp_whitelist_.MergeFrom(from.device_idle_temp_whitelist_);
  pending_temp_whitelist_.MergeFrom(from.pending_temp_whitelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      track_allocation_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_allocation_app_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      native_debugging_app_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.native_debugging_app_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lru_procs()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses::MergeFrom(from.lru_procs());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_app_errors()->::com::android::server::am::AppErrorsProto::MergeFrom(from.app_errors());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_user_controller()->::com::android::server::am::UserControllerProto::MergeFrom(from.user_controller());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_home_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.home_proc());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_previous_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.previous_proc());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_heavy_weight_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.heavy_weight_proc());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_global_configuration()->::android::content::ConfigurationProto::MergeFrom(from.global_configuration());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_sleep_status()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus::MergeFrom(from.sleep_status());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_running_voice()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice::MergeFrom(from.running_voice());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_vr_controller()->::com::android::server::am::VrControllerProto::MergeFrom(from.vr_controller());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_debug()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp::MergeFrom(from.debug());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_current_tracker()->::com::android::server::am::AppTimeTrackerProto::MergeFrom(from.current_tracker());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_mem_watch_processes()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess::MergeFrom(from.mem_watch_processes());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_profile()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile::MergeFrom(from.profile());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_controller()->::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller::MergeFrom(from.controller());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_going_to_sleep()->::android::os::PowerManagerProto_WakeLock::MergeFrom(from.going_to_sleep());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_launching_activity()->::android::os::PowerManagerProto_WakeLock::MergeFrom(from.launching_activity());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_last_idle_time()->::android::util::Duration::MergeFrom(from.last_idle_time());
    }
    if (cached_has_bits & 0x00100000u) {
      previous_proc_visible_time_ms_ = from.previous_proc_visible_time_ms_;
    }
    if (cached_has_bits & 0x00200000u) {
      config_will_change_ = from.config_will_change_;
    }
    if (cached_has_bits & 0x00400000u) {
      always_finish_activities_ = from.always_finish_activities_;
    }
    if (cached_has_bits & 0x00800000u) {
      processes_ready_ = from.processes_ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      system_ready_ = from.system_ready_;
    }
    if (cached_has_bits & 0x02000000u) {
      total_persistent_procs_ = from.total_persistent_procs_;
    }
    if (cached_has_bits & 0x04000000u) {
      factory_test_ = from.factory_test_;
    }
    if (cached_has_bits & 0x08000000u) {
      booted_ = from.booted_;
    }
    if (cached_has_bits & 0x10000000u) {
      booting_ = from.booting_;
    }
    if (cached_has_bits & 0x20000000u) {
      call_finish_booting_ = from.call_finish_booting_;
    }
    if (cached_has_bits & 0x40000000u) {
      boot_animation_complete_ = from.boot_animation_complete_;
    }
    if (cached_has_bits & 0x80000000u) {
      last_power_check_uptime_ms_ = from.last_power_check_uptime_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      adj_seq_ = from.adj_seq_;
    }
    if (cached_has_bits & 0x00000002u) {
      lru_seq_ = from.lru_seq_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_non_cached_procs_ = from.num_non_cached_procs_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_cached_hidden_procs_ = from.num_cached_hidden_procs_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_service_procs_ = from.num_service_procs_;
    }
    if (cached_has_bits & 0x00000020u) {
      new_num_service_procs_ = from.new_num_service_procs_;
    }
    if (cached_has_bits & 0x00000040u) {
      allow_lower_mem_level_ = from.allow_lower_mem_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_memory_level_ = from.last_memory_level_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      low_ram_since_last_idle_ms_ = from.low_ram_since_last_idle_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_num_processes_ = from.last_num_processes_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ActivityManagerServiceDumpProcessesProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityManagerServiceDumpProcessesProto::CopyFrom(const ActivityManagerServiceDumpProcessesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityManagerServiceDumpProcessesProto::IsInitialized() const {
  return true;
}

void ActivityManagerServiceDumpProcessesProto::InternalSwap(ActivityManagerServiceDumpProcessesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  CastToBase(&procs_)->InternalSwap(CastToBase(&other->procs_));
  CastToBase(&isolated_procs_)->InternalSwap(CastToBase(&other->isolated_procs_));
  CastToBase(&active_instrumentations_)->InternalSwap(CastToBase(&other->active_instrumentations_));
  CastToBase(&active_uids_)->InternalSwap(CastToBase(&other->active_uids_));
  CastToBase(&validate_uids_)->InternalSwap(CastToBase(&other->validate_uids_));
  CastToBase(&pids_self_locked_)->InternalSwap(CastToBase(&other->pids_self_locked_));
  CastToBase(&important_procs_)->InternalSwap(CastToBase(&other->important_procs_));
  CastToBase(&persistent_starting_procs_)->InternalSwap(CastToBase(&other->persistent_starting_procs_));
  CastToBase(&removed_procs_)->InternalSwap(CastToBase(&other->removed_procs_));
  CastToBase(&on_hold_procs_)->InternalSwap(CastToBase(&other->on_hold_procs_));
  CastToBase(&gc_procs_)->InternalSwap(CastToBase(&other->gc_procs_));
  CastToBase(&screen_compat_packages_)->InternalSwap(CastToBase(&other->screen_compat_packages_));
  CastToBase(&uid_observers_)->InternalSwap(CastToBase(&other->uid_observers_));
  device_idle_whitelist_.InternalSwap(&other->device_idle_whitelist_);
  device_idle_temp_whitelist_.InternalSwap(&other->device_idle_temp_whitelist_);
  CastToBase(&pending_temp_whitelist_)->InternalSwap(CastToBase(&other->pending_temp_whitelist_));
  track_allocation_app_.Swap(&other->track_allocation_app_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  native_debugging_app_.Swap(&other->native_debugging_app_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lru_procs_, other->lru_procs_);
  swap(app_errors_, other->app_errors_);
  swap(user_controller_, other->user_controller_);
  swap(home_proc_, other->home_proc_);
  swap(previous_proc_, other->previous_proc_);
  swap(heavy_weight_proc_, other->heavy_weight_proc_);
  swap(global_configuration_, other->global_configuration_);
  swap(sleep_status_, other->sleep_status_);
  swap(running_voice_, other->running_voice_);
  swap(vr_controller_, other->vr_controller_);
  swap(debug_, other->debug_);
  swap(current_tracker_, other->current_tracker_);
  swap(mem_watch_processes_, other->mem_watch_processes_);
  swap(profile_, other->profile_);
  swap(controller_, other->controller_);
  swap(going_to_sleep_, other->going_to_sleep_);
  swap(launching_activity_, other->launching_activity_);
  swap(last_idle_time_, other->last_idle_time_);
  swap(previous_proc_visible_time_ms_, other->previous_proc_visible_time_ms_);
  swap(config_will_change_, other->config_will_change_);
  swap(always_finish_activities_, other->always_finish_activities_);
  swap(processes_ready_, other->processes_ready_);
  swap(system_ready_, other->system_ready_);
  swap(total_persistent_procs_, other->total_persistent_procs_);
  swap(factory_test_, other->factory_test_);
  swap(booted_, other->booted_);
  swap(booting_, other->booting_);
  swap(call_finish_booting_, other->call_finish_booting_);
  swap(boot_animation_complete_, other->boot_animation_complete_);
  swap(last_power_check_uptime_ms_, other->last_power_check_uptime_ms_);
  swap(adj_seq_, other->adj_seq_);
  swap(lru_seq_, other->lru_seq_);
  swap(num_non_cached_procs_, other->num_non_cached_procs_);
  swap(num_cached_hidden_procs_, other->num_cached_hidden_procs_);
  swap(num_service_procs_, other->num_service_procs_);
  swap(new_num_service_procs_, other->new_num_service_procs_);
  swap(allow_lower_mem_level_, other->allow_lower_mem_level_);
  swap(last_memory_level_, other->last_memory_level_);
  swap(low_ram_since_last_idle_ms_, other->low_ram_since_last_idle_ms_);
  swap(last_num_processes_, other->last_num_processes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityManagerServiceDumpProcessesProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActiveInstrumentationProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ActiveInstrumentationProto_default_instance_._instance.get_mutable()->class__ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::server::am::_ActiveInstrumentationProto_default_instance_._instance.get_mutable()->target_info_ = const_cast< ::android::content::pm::ApplicationInfoProto*>(
      ::android::content::pm::ApplicationInfoProto::internal_default_instance());
  ::com::android::server::am::_ActiveInstrumentationProto_default_instance_._instance.get_mutable()->arguments_ = const_cast< ::android::os::BundleProto*>(
      ::android::os::BundleProto::internal_default_instance());
}
class ActiveInstrumentationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveInstrumentationProto>()._has_bits_);
  static const ::android::content::ComponentNameProto& class_(const ActiveInstrumentationProto* msg);
  static void set_has_class_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_finished(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::content::pm::ApplicationInfoProto& target_info(const ActiveInstrumentationProto* msg);
  static void set_has_target_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_profile_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_watcher(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ui_automation_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::BundleProto& arguments(const ActiveInstrumentationProto* msg);
  static void set_has_arguments(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::content::ComponentNameProto&
ActiveInstrumentationProto::_Internal::class_(const ActiveInstrumentationProto* msg) {
  return *msg->class__;
}
const ::android::content::pm::ApplicationInfoProto&
ActiveInstrumentationProto::_Internal::target_info(const ActiveInstrumentationProto* msg) {
  return *msg->target_info_;
}
const ::android::os::BundleProto&
ActiveInstrumentationProto::_Internal::arguments(const ActiveInstrumentationProto* msg) {
  return *msg->arguments_;
}
void ActiveInstrumentationProto::clear_class_() {
  if (class__ != nullptr) class__->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ActiveInstrumentationProto::clear_target_info() {
  if (target_info_ != nullptr) target_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ActiveInstrumentationProto::clear_arguments() {
  if (arguments_ != nullptr) arguments_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ActiveInstrumentationProto::ActiveInstrumentationProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ActiveInstrumentationProto)
}
ActiveInstrumentationProto::ActiveInstrumentationProto(const ActiveInstrumentationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      running_processes_(from.running_processes_),
      target_processes_(from.target_processes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  profile_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_profile_file()) {
    profile_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profile_file_);
  }
  watcher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_watcher()) {
    watcher_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.watcher_);
  }
  ui_automation_connection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ui_automation_connection()) {
    ui_automation_connection_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ui_automation_connection_);
  }
  if (from.has_class_()) {
    class__ = new ::android::content::ComponentNameProto(*from.class__);
  } else {
    class__ = nullptr;
  }
  if (from.has_target_info()) {
    target_info_ = new ::android::content::pm::ApplicationInfoProto(*from.target_info_);
  } else {
    target_info_ = nullptr;
  }
  if (from.has_arguments()) {
    arguments_ = new ::android::os::BundleProto(*from.arguments_);
  } else {
    arguments_ = nullptr;
  }
  finished_ = from.finished_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ActiveInstrumentationProto)
}

void ActiveInstrumentationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  profile_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  watcher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ui_automation_connection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&class__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&class__)) + sizeof(finished_));
}

ActiveInstrumentationProto::~ActiveInstrumentationProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ActiveInstrumentationProto)
  SharedDtor();
}

void ActiveInstrumentationProto::SharedDtor() {
  profile_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  watcher_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ui_automation_connection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete class__;
  if (this != internal_default_instance()) delete target_info_;
  if (this != internal_default_instance()) delete arguments_;
}

void ActiveInstrumentationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveInstrumentationProto& ActiveInstrumentationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveInstrumentationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ActiveInstrumentationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ActiveInstrumentationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  running_processes_.Clear();
  target_processes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      profile_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      watcher_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ui_automation_connection_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(class__ != nullptr);
      class__->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(target_info_ != nullptr);
      target_info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(arguments_ != nullptr);
      arguments_->Clear();
    }
  }
  finished_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveInstrumentationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ComponentNameProto class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_class_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool finished = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_finished(&has_bits);
          finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.ProcessRecordProto running_processes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_running_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string target_processes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_target_processes(), ptr, ctx, "com.android.server.am.ActiveInstrumentationProto.target_processes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .android.content.pm.ApplicationInfoProto target_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_target_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string profile_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_profile_file(), ptr, ctx, "com.android.server.am.ActiveInstrumentationProto.profile_file");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string watcher = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_watcher(), ptr, ctx, "com.android.server.am.ActiveInstrumentationProto.watcher");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ui_automation_connection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_ui_automation_connection(), ptr, ctx, "com.android.server.am.ActiveInstrumentationProto.ui_automation_connection");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.BundleProto arguments = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_arguments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveInstrumentationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ActiveInstrumentationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ComponentNameProto class = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_class_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool finished = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_finished(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.ProcessRecordProto running_processes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_running_processes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target_processes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_target_processes()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_processes(this->target_processes_size() - 1).data(),
            static_cast<int>(this->target_processes(this->target_processes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActiveInstrumentationProto.target_processes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.pm.ApplicationInfoProto target_info = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string profile_file = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_profile_file()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->profile_file().data(), static_cast<int>(this->profile_file().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActiveInstrumentationProto.profile_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string watcher = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_watcher()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->watcher().data(), static_cast<int>(this->watcher().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActiveInstrumentationProto.watcher");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ui_automation_connection = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_automation_connection()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ui_automation_connection().data(), static_cast<int>(this->ui_automation_connection().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ActiveInstrumentationProto.ui_automation_connection");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.BundleProto arguments = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ActiveInstrumentationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ActiveInstrumentationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveInstrumentationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ActiveInstrumentationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto class = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::class_(this), output);
  }

  // optional bool finished = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->finished(), output);
  }

  // repeated .com.android.server.am.ProcessRecordProto running_processes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->running_processes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->running_processes(static_cast<int>(i)),
      output);
  }

  // repeated string target_processes = 4;
  for (int i = 0, n = this->target_processes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_processes(i).data(), static_cast<int>(this->target_processes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.target_processes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->target_processes(i), output);
  }

  // optional .android.content.pm.ApplicationInfoProto target_info = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::target_info(this), output);
  }

  // optional string profile_file = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_file().data(), static_cast<int>(this->profile_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.profile_file");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->profile_file(), output);
  }

  // optional string watcher = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->watcher().data(), static_cast<int>(this->watcher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.watcher");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->watcher(), output);
  }

  // optional string ui_automation_connection = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_automation_connection().data(), static_cast<int>(this->ui_automation_connection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.ui_automation_connection");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ui_automation_connection(), output);
  }

  // optional .android.os.BundleProto arguments = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::arguments(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ActiveInstrumentationProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveInstrumentationProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ActiveInstrumentationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto class = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::class_(this), target);
  }

  // optional bool finished = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->finished(), target);
  }

  // repeated .com.android.server.am.ProcessRecordProto running_processes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->running_processes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->running_processes(static_cast<int>(i)), target);
  }

  // repeated string target_processes = 4;
  for (int i = 0, n = this->target_processes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_processes(i).data(), static_cast<int>(this->target_processes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.target_processes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->target_processes(i), target);
  }

  // optional .android.content.pm.ApplicationInfoProto target_info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::target_info(this), target);
  }

  // optional string profile_file = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_file().data(), static_cast<int>(this->profile_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.profile_file");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->profile_file(), target);
  }

  // optional string watcher = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->watcher().data(), static_cast<int>(this->watcher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.watcher");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->watcher(), target);
  }

  // optional string ui_automation_connection = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_automation_connection().data(), static_cast<int>(this->ui_automation_connection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ActiveInstrumentationProto.ui_automation_connection");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->ui_automation_connection(), target);
  }

  // optional .android.os.BundleProto arguments = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::arguments(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ActiveInstrumentationProto)
  return target;
}

size_t ActiveInstrumentationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ActiveInstrumentationProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.ProcessRecordProto running_processes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->running_processes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->running_processes(static_cast<int>(i)));
    }
  }

  // repeated string target_processes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_processes_size());
  for (int i = 0, n = this->target_processes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->target_processes(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string profile_file = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->profile_file());
    }

    // optional string watcher = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->watcher());
    }

    // optional string ui_automation_connection = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->ui_automation_connection());
    }

    // optional .android.content.ComponentNameProto class = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *class__);
    }

    // optional .android.content.pm.ApplicationInfoProto target_info = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_info_);
    }

    // optional .android.os.BundleProto arguments = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arguments_);
    }

    // optional bool finished = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveInstrumentationProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ActiveInstrumentationProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveInstrumentationProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveInstrumentationProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ActiveInstrumentationProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ActiveInstrumentationProto)
    MergeFrom(*source);
  }
}

void ActiveInstrumentationProto::MergeFrom(const ActiveInstrumentationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ActiveInstrumentationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  running_processes_.MergeFrom(from.running_processes_);
  target_processes_.MergeFrom(from.target_processes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      profile_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profile_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      watcher_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.watcher_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ui_automation_connection_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ui_automation_connection_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_class_()->::android::content::ComponentNameProto::MergeFrom(from.class_());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_target_info()->::android::content::pm::ApplicationInfoProto::MergeFrom(from.target_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_arguments()->::android::os::BundleProto::MergeFrom(from.arguments());
    }
    if (cached_has_bits & 0x00000040u) {
      finished_ = from.finished_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActiveInstrumentationProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ActiveInstrumentationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveInstrumentationProto::CopyFrom(const ActiveInstrumentationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ActiveInstrumentationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveInstrumentationProto::IsInitialized() const {
  return true;
}

void ActiveInstrumentationProto::InternalSwap(ActiveInstrumentationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&running_processes_)->InternalSwap(CastToBase(&other->running_processes_));
  target_processes_.InternalSwap(CastToBase(&other->target_processes_));
  profile_file_.Swap(&other->profile_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  watcher_.Swap(&other->watcher_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ui_automation_connection_.Swap(&other->ui_automation_connection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(class__, other->class__);
  swap(target_info_, other->target_info_);
  swap(arguments_, other->arguments_);
  swap(finished_, other->finished_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveInstrumentationProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UidRecordProto_ProcStateSequence::InitAsDefaultInstance() {
}
class UidRecordProto_ProcStateSequence::_Internal {
 public:
  using HasBits = decltype(std::declval<UidRecordProto_ProcStateSequence>()._has_bits_);
  static void set_has_cururent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_network_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_dispatched(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UidRecordProto_ProcStateSequence::UidRecordProto_ProcStateSequence()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.UidRecordProto.ProcStateSequence)
}
UidRecordProto_ProcStateSequence::UidRecordProto_ProcStateSequence(const UidRecordProto_ProcStateSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cururent_, &from.cururent_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_dispatched_) -
    reinterpret_cast<char*>(&cururent_)) + sizeof(last_dispatched_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.UidRecordProto.ProcStateSequence)
}

void UidRecordProto_ProcStateSequence::SharedCtor() {
  ::memset(&cururent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_dispatched_) -
      reinterpret_cast<char*>(&cururent_)) + sizeof(last_dispatched_));
}

UidRecordProto_ProcStateSequence::~UidRecordProto_ProcStateSequence() {
  // @@protoc_insertion_point(destructor:com.android.server.am.UidRecordProto.ProcStateSequence)
  SharedDtor();
}

void UidRecordProto_ProcStateSequence::SharedDtor() {
}

void UidRecordProto_ProcStateSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidRecordProto_ProcStateSequence& UidRecordProto_ProcStateSequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidRecordProto_ProcStateSequence_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void UidRecordProto_ProcStateSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cururent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_dispatched_) -
        reinterpret_cast<char*>(&cururent_)) + sizeof(last_dispatched_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidRecordProto_ProcStateSequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 cururent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cururent(&has_bits);
          cururent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_network_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_network_updated(&has_bits);
          last_network_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_dispatched = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_dispatched(&has_bits);
          last_dispatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidRecordProto_ProcStateSequence::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cururent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cururent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cururent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_network_updated = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_network_updated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_network_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_dispatched = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_dispatched(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_dispatched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.UidRecordProto.ProcStateSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.UidRecordProto.ProcStateSequence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidRecordProto_ProcStateSequence::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cururent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->cururent(), output);
  }

  // optional int64 last_network_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->last_network_updated(), output);
  }

  // optional int64 last_dispatched = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->last_dispatched(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.UidRecordProto.ProcStateSequence)
}

::PROTOBUF_NAMESPACE_ID::uint8* UidRecordProto_ProcStateSequence::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cururent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->cururent(), target);
  }

  // optional int64 last_network_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->last_network_updated(), target);
  }

  // optional int64 last_dispatched = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->last_dispatched(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.UidRecordProto.ProcStateSequence)
  return target;
}

size_t UidRecordProto_ProcStateSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 cururent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cururent());
    }

    // optional int64 last_network_updated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_network_updated());
    }

    // optional int64 last_dispatched = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_dispatched());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidRecordProto_ProcStateSequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const UidRecordProto_ProcStateSequence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UidRecordProto_ProcStateSequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.UidRecordProto.ProcStateSequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.UidRecordProto.ProcStateSequence)
    MergeFrom(*source);
  }
}

void UidRecordProto_ProcStateSequence::MergeFrom(const UidRecordProto_ProcStateSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cururent_ = from.cururent_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_network_updated_ = from.last_network_updated_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_dispatched_ = from.last_dispatched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidRecordProto_ProcStateSequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidRecordProto_ProcStateSequence::CopyFrom(const UidRecordProto_ProcStateSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.UidRecordProto.ProcStateSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidRecordProto_ProcStateSequence::IsInitialized() const {
  return true;
}

void UidRecordProto_ProcStateSequence::InternalSwap(UidRecordProto_ProcStateSequence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cururent_, other->cururent_);
  swap(last_network_updated_, other->last_network_updated_);
  swap(last_dispatched_, other->last_dispatched_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidRecordProto_ProcStateSequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UidRecordProto::InitAsDefaultInstance() {
  ::com::android::server::am::_UidRecordProto_default_instance_._instance.get_mutable()->last_background_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
  ::com::android::server::am::_UidRecordProto_default_instance_._instance.get_mutable()->network_state_update_ = const_cast< ::com::android::server::am::UidRecordProto_ProcStateSequence*>(
      ::com::android::server::am::UidRecordProto_ProcStateSequence::internal_default_instance());
}
class UidRecordProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UidRecordProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ephemeral(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fg_services(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_whilelist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::util::Duration& last_background_time(const UidRecordProto* msg);
  static void set_has_last_background_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_procs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::com::android::server::am::UidRecordProto_ProcStateSequence& network_state_update(const UidRecordProto* msg);
  static void set_has_network_state_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::util::Duration&
UidRecordProto::_Internal::last_background_time(const UidRecordProto* msg) {
  return *msg->last_background_time_;
}
const ::com::android::server::am::UidRecordProto_ProcStateSequence&
UidRecordProto::_Internal::network_state_update(const UidRecordProto* msg) {
  return *msg->network_state_update_;
}
void UidRecordProto::clear_last_background_time() {
  if (last_background_time_ != nullptr) last_background_time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UidRecordProto::UidRecordProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.UidRecordProto)
}
UidRecordProto::UidRecordProto(const UidRecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      last_reported_changes_(from.last_reported_changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_background_time()) {
    last_background_time_ = new ::android::util::Duration(*from.last_background_time_);
  } else {
    last_background_time_ = nullptr;
  }
  if (from.has_network_state_update()) {
    network_state_update_ = new ::com::android::server::am::UidRecordProto_ProcStateSequence(*from.network_state_update_);
  } else {
    network_state_update_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.UidRecordProto)
}

void UidRecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&last_background_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_procs_) -
      reinterpret_cast<char*>(&last_background_time_)) + sizeof(num_procs_));
  current_ = 998;
}

UidRecordProto::~UidRecordProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.UidRecordProto)
  SharedDtor();
}

void UidRecordProto::SharedDtor() {
  if (this != internal_default_instance()) delete last_background_time_;
  if (this != internal_default_instance()) delete network_state_update_;
}

void UidRecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidRecordProto& UidRecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidRecordProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void UidRecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.UidRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_reported_changes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(last_background_time_ != nullptr);
      last_background_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(network_state_update_ != nullptr);
      network_state_update_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_procs_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(num_procs_));
  }
  current_ = 998;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidRecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.ProcessStateEnum current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::ProcessStateEnum_IsValid(val))) {
            set_current(static_cast<::android::app::ProcessStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool ephemeral = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ephemeral(&has_bits);
          ephemeral_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fg_services = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fg_services(&has_bits);
          fg_services_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool whilelist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_whilelist(&has_bits);
          whilelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration last_background_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_last_background_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool idle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_idle(&has_bits);
          idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.UidRecordProto.Change last_reported_changes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::am::UidRecordProto_Change_IsValid(val))) {
              add_last_reported_changes(static_cast<::com::android::server::am::UidRecordProto_Change>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_last_reported_changes(), ptr, ctx, ::com::android::server::am::UidRecordProto_Change_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_procs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_procs(&has_bits);
          num_procs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.UidRecordProto.ProcStateSequence network_state_update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_network_state_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidRecordProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.UidRecordProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.ProcessStateEnum current = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::ProcessStateEnum_IsValid(value)) {
            set_current(static_cast< ::android::app::ProcessStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ephemeral = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ephemeral(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ephemeral_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fg_services = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_fg_services(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fg_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool whilelist = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_whilelist(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whilelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration last_background_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_background_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool idle = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.UidRecordProto.Change last_reported_changes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::am::UidRecordProto_Change_IsValid(value)) {
            add_last_reported_changes(static_cast< ::com::android::server::am::UidRecordProto_Change >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::com::android::server::am::UidRecordProto_Change_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_last_reported_changes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_procs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_num_procs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_procs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.UidRecordProto.ProcStateSequence network_state_update = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_state_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.UidRecordProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.UidRecordProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidRecordProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.UidRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional .android.app.ProcessStateEnum current = 2;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->current(), output);
  }

  // optional bool ephemeral = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->ephemeral(), output);
  }

  // optional bool fg_services = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->fg_services(), output);
  }

  // optional bool whilelist = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->whilelist(), output);
  }

  // optional .android.util.Duration last_background_time = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::last_background_time(this), output);
  }

  // optional bool idle = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->idle(), output);
  }

  // repeated .com.android.server.am.UidRecordProto.Change last_reported_changes = 8;
  for (int i = 0, n = this->last_reported_changes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->last_reported_changes(i), output);
  }

  // optional int32 num_procs = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->num_procs(), output);
  }

  // optional .com.android.server.am.UidRecordProto.ProcStateSequence network_state_update = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::network_state_update(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.UidRecordProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* UidRecordProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.UidRecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional .android.app.ProcessStateEnum current = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->current(), target);
  }

  // optional bool ephemeral = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->ephemeral(), target);
  }

  // optional bool fg_services = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->fg_services(), target);
  }

  // optional bool whilelist = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->whilelist(), target);
  }

  // optional .android.util.Duration last_background_time = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::last_background_time(this), target);
  }

  // optional bool idle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->idle(), target);
  }

  // repeated .com.android.server.am.UidRecordProto.Change last_reported_changes = 8;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    8, this->last_reported_changes_, target);

  // optional int32 num_procs = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->num_procs(), target);
  }

  // optional .com.android.server.am.UidRecordProto.ProcStateSequence network_state_update = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::network_state_update(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.UidRecordProto)
  return target;
}

size_t UidRecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.UidRecordProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.UidRecordProto.Change last_reported_changes = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->last_reported_changes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->last_reported_changes(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.util.Duration last_background_time = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_background_time_);
    }

    // optional .com.android.server.am.UidRecordProto.ProcStateSequence network_state_update = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_state_update_);
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool ephemeral = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool fg_services = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool whilelist = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool idle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 num_procs = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_procs());
    }

  }
  // optional .android.app.ProcessStateEnum current = 2;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->current());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidRecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.UidRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UidRecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UidRecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.UidRecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.UidRecordProto)
    MergeFrom(*source);
  }
}

void UidRecordProto::MergeFrom(const UidRecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.UidRecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_reported_changes_.MergeFrom(from.last_reported_changes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_last_background_time()->::android::util::Duration::MergeFrom(from.last_background_time());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_network_state_update()->::com::android::server::am::UidRecordProto_ProcStateSequence::MergeFrom(from.network_state_update());
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      ephemeral_ = from.ephemeral_;
    }
    if (cached_has_bits & 0x00000010u) {
      fg_services_ = from.fg_services_;
    }
    if (cached_has_bits & 0x00000020u) {
      whilelist_ = from.whilelist_;
    }
    if (cached_has_bits & 0x00000040u) {
      idle_ = from.idle_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_procs_ = from.num_procs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_current(from.current());
  }
}

void UidRecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.UidRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidRecordProto::CopyFrom(const UidRecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.UidRecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidRecordProto::IsInitialized() const {
  return true;
}

void UidRecordProto::InternalSwap(UidRecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  last_reported_changes_.InternalSwap(&other->last_reported_changes_);
  swap(last_background_time_, other->last_background_time_);
  swap(network_state_update_, other->network_state_update_);
  swap(uid_, other->uid_);
  swap(ephemeral_, other->ephemeral_);
  swap(fg_services_, other->fg_services_);
  swap(whilelist_, other->whilelist_);
  swap(idle_, other->idle_);
  swap(num_procs_, other->num_procs_);
  swap(current_, other->current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidRecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImportanceTokenProto::InitAsDefaultInstance() {
}
class ImportanceTokenProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ImportanceTokenProto>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ImportanceTokenProto::ImportanceTokenProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ImportanceTokenProto)
}
ImportanceTokenProto::ImportanceTokenProto(const ImportanceTokenProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ImportanceTokenProto)
}

void ImportanceTokenProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
}

ImportanceTokenProto::~ImportanceTokenProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ImportanceTokenProto)
  SharedDtor();
}

void ImportanceTokenProto::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImportanceTokenProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportanceTokenProto& ImportanceTokenProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportanceTokenProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ImportanceTokenProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ImportanceTokenProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
  }
  pid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImportanceTokenProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_token(), ptr, ctx, "com.android.server.am.ImportanceTokenProto.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_reason(), ptr, ctx, "com.android.server.am.ImportanceTokenProto.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImportanceTokenProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ImportanceTokenProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ImportanceTokenProto.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ImportanceTokenProto.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ImportanceTokenProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ImportanceTokenProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImportanceTokenProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ImportanceTokenProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ImportanceTokenProto.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ImportanceTokenProto.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ImportanceTokenProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportanceTokenProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ImportanceTokenProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ImportanceTokenProto.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ImportanceTokenProto.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ImportanceTokenProto)
  return target;
}

size_t ImportanceTokenProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ImportanceTokenProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string reason = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportanceTokenProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ImportanceTokenProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportanceTokenProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportanceTokenProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ImportanceTokenProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ImportanceTokenProto)
    MergeFrom(*source);
  }
}

void ImportanceTokenProto::MergeFrom(const ImportanceTokenProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ImportanceTokenProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImportanceTokenProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ImportanceTokenProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportanceTokenProto::CopyFrom(const ImportanceTokenProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ImportanceTokenProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportanceTokenProto::IsInitialized() const {
  return true;
}

void ImportanceTokenProto::InternalSwap(ImportanceTokenProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportanceTokenProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VrControllerProto::InitAsDefaultInstance() {
}
class VrControllerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VrControllerProto>()._has_bits_);
  static void set_has_render_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VrControllerProto::VrControllerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.VrControllerProto)
}
VrControllerProto::VrControllerProto(const VrControllerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vr_mode_(from.vr_mode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  render_thread_id_ = from.render_thread_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.VrControllerProto)
}

void VrControllerProto::SharedCtor() {
  render_thread_id_ = 0;
}

VrControllerProto::~VrControllerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.VrControllerProto)
  SharedDtor();
}

void VrControllerProto::SharedDtor() {
}

void VrControllerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VrControllerProto& VrControllerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VrControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void VrControllerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.VrControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vr_mode_.Clear();
  render_thread_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VrControllerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.am.VrControllerProto.VrMode vr_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::am::VrControllerProto_VrMode_IsValid(val))) {
              add_vr_mode(static_cast<::com::android::server::am::VrControllerProto_VrMode>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_vr_mode(), ptr, ctx, ::com::android::server::am::VrControllerProto_VrMode_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 render_thread_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_render_thread_id(&has_bits);
          render_thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VrControllerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.VrControllerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.am.VrControllerProto.VrMode vr_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::am::VrControllerProto_VrMode_IsValid(value)) {
            add_vr_mode(static_cast< ::com::android::server::am::VrControllerProto_VrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::com::android::server::am::VrControllerProto_VrMode_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_vr_mode())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 render_thread_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_render_thread_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &render_thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.VrControllerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.VrControllerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VrControllerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.VrControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.VrControllerProto.VrMode vr_mode = 1;
  for (int i = 0, n = this->vr_mode_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->vr_mode(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 render_thread_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->render_thread_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.VrControllerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* VrControllerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.VrControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.VrControllerProto.VrMode vr_mode = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    1, this->vr_mode_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 render_thread_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->render_thread_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.VrControllerProto)
  return target;
}

size_t VrControllerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.VrControllerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.VrControllerProto.VrMode vr_mode = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->vr_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->vr_mode(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional int32 render_thread_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->render_thread_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VrControllerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.VrControllerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const VrControllerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VrControllerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.VrControllerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.VrControllerProto)
    MergeFrom(*source);
  }
}

void VrControllerProto::MergeFrom(const VrControllerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.VrControllerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vr_mode_.MergeFrom(from.vr_mode_);
  if (from.has_render_thread_id()) {
    set_render_thread_id(from.render_thread_id());
  }
}

void VrControllerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.VrControllerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VrControllerProto::CopyFrom(const VrControllerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.VrControllerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VrControllerProto::IsInitialized() const {
  return true;
}

void VrControllerProto::InternalSwap(VrControllerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vr_mode_.InternalSwap(&other->vr_mode_);
  swap(render_thread_id_, other->render_thread_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VrControllerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessOomProto_Detail_CpuRunTime::InitAsDefaultInstance() {
}
class ProcessOomProto_Detail_CpuRunTime::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessOomProto_Detail_CpuRunTime>()._has_bits_);
  static void set_has_over_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_used_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ultilization(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ProcessOomProto_Detail_CpuRunTime::ProcessOomProto_Detail_CpuRunTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
}
ProcessOomProto_Detail_CpuRunTime::ProcessOomProto_Detail_CpuRunTime(const ProcessOomProto_Detail_CpuRunTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&over_ms_, &from.over_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&ultilization_) -
    reinterpret_cast<char*>(&over_ms_)) + sizeof(ultilization_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
}

void ProcessOomProto_Detail_CpuRunTime::SharedCtor() {
  ::memset(&over_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ultilization_) -
      reinterpret_cast<char*>(&over_ms_)) + sizeof(ultilization_));
}

ProcessOomProto_Detail_CpuRunTime::~ProcessOomProto_Detail_CpuRunTime() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  SharedDtor();
}

void ProcessOomProto_Detail_CpuRunTime::SharedDtor() {
}

void ProcessOomProto_Detail_CpuRunTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessOomProto_Detail_CpuRunTime& ProcessOomProto_Detail_CpuRunTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessOomProto_Detail_CpuRunTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ProcessOomProto_Detail_CpuRunTime::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&over_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ultilization_) -
        reinterpret_cast<char*>(&over_ms_)) + sizeof(ultilization_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessOomProto_Detail_CpuRunTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 over_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_over_ms(&has_bits);
          over_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 used_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_used_ms(&has_bits);
          used_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ultilization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ultilization(&has_bits);
          ultilization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessOomProto_Detail_CpuRunTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 over_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_over_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &over_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 used_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_used_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ultilization = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_ultilization(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultilization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessOomProto_Detail_CpuRunTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 over_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->over_ms(), output);
  }

  // optional int64 used_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->used_ms(), output);
  }

  // optional float ultilization = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->ultilization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessOomProto_Detail_CpuRunTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 over_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->over_ms(), target);
  }

  // optional int64 used_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->used_ms(), target);
  }

  // optional float ultilization = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->ultilization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  return target;
}

size_t ProcessOomProto_Detail_CpuRunTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 over_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->over_ms());
    }

    // optional int64 used_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->used_ms());
    }

    // optional float ultilization = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessOomProto_Detail_CpuRunTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessOomProto_Detail_CpuRunTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessOomProto_Detail_CpuRunTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
    MergeFrom(*source);
  }
}

void ProcessOomProto_Detail_CpuRunTime::MergeFrom(const ProcessOomProto_Detail_CpuRunTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      over_ms_ = from.over_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      used_ms_ = from.used_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      ultilization_ = from.ultilization_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessOomProto_Detail_CpuRunTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessOomProto_Detail_CpuRunTime::CopyFrom(const ProcessOomProto_Detail_CpuRunTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessOomProto_Detail_CpuRunTime::IsInitialized() const {
  return true;
}

void ProcessOomProto_Detail_CpuRunTime::InternalSwap(ProcessOomProto_Detail_CpuRunTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(over_ms_, other->over_ms_);
  swap(used_ms_, other->used_ms_);
  swap(ultilization_, other->ultilization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessOomProto_Detail_CpuRunTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessOomProto_Detail::InitAsDefaultInstance() {
  ::com::android::server::am::_ProcessOomProto_Detail_default_instance_._instance.get_mutable()->service_run_time_ = const_cast< ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime*>(
      ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime::internal_default_instance());
}
class ProcessOomProto_Detail::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessOomProto_Detail>()._has_bits_);
  static void set_has_max_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cur_raw_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_set_raw_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cur_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_set_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_current_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_set_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_last_pss(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_swap_pss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_cached_pss(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_has_above_client(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime& service_run_time(const ProcessOomProto_Detail* msg);
  static void set_has_service_run_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime&
ProcessOomProto_Detail::_Internal::service_run_time(const ProcessOomProto_Detail* msg) {
  return *msg->service_run_time_;
}
ProcessOomProto_Detail::ProcessOomProto_Detail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ProcessOomProto.Detail)
}
ProcessOomProto_Detail::ProcessOomProto_Detail(const ProcessOomProto_Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_pss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pss()) {
    last_pss_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_pss_);
  }
  last_swap_pss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_swap_pss()) {
    last_swap_pss_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_swap_pss_);
  }
  last_cached_pss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_cached_pss()) {
    last_cached_pss_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_cached_pss_);
  }
  if (from.has_service_run_time()) {
    service_run_time_ = new ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime(*from.service_run_time_);
  } else {
    service_run_time_ = nullptr;
  }
  ::memcpy(&max_adj_, &from.max_adj_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_state_) -
    reinterpret_cast<char*>(&max_adj_)) + sizeof(set_state_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ProcessOomProto.Detail)
}

void ProcessOomProto_Detail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  last_pss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_swap_pss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_cached_pss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_run_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_above_client_) -
      reinterpret_cast<char*>(&service_run_time_)) + sizeof(has_above_client_));
  current_state_ = 998;
  set_state_ = 998;
}

ProcessOomProto_Detail::~ProcessOomProto_Detail() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ProcessOomProto.Detail)
  SharedDtor();
}

void ProcessOomProto_Detail::SharedDtor() {
  last_pss_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_swap_pss_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_cached_pss_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete service_run_time_;
}

void ProcessOomProto_Detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessOomProto_Detail& ProcessOomProto_Detail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessOomProto_Detail_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ProcessOomProto_Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ProcessOomProto.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      last_pss_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      last_swap_pss_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      last_cached_pss_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(service_run_time_ != nullptr);
      service_run_time_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&max_adj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cur_adj_) -
        reinterpret_cast<char*>(&max_adj_)) + sizeof(cur_adj_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&set_adj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_above_client_) -
        reinterpret_cast<char*>(&set_adj_)) + sizeof(has_above_client_));
    current_state_ = 998;
    set_state_ = 998;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessOomProto_Detail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 max_adj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_adj(&has_bits);
          max_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cur_raw_adj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cur_raw_adj(&has_bits);
          cur_raw_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 set_raw_adj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_set_raw_adj(&has_bits);
          set_raw_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cur_adj = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cur_adj(&has_bits);
          cur_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 set_adj = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_set_adj(&has_bits);
          set_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.ProcessStateEnum current_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::ProcessStateEnum_IsValid(val))) {
            set_current_state(static_cast<::android::app::ProcessStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.app.ProcessStateEnum set_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::ProcessStateEnum_IsValid(val))) {
            set_set_state(static_cast<::android::app::ProcessStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string last_pss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_last_pss(), ptr, ctx, "com.android.server.am.ProcessOomProto.Detail.last_pss");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_swap_pss = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_last_swap_pss(), ptr, ctx, "com.android.server.am.ProcessOomProto.Detail.last_swap_pss");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_cached_pss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_last_cached_pss(), ptr, ctx, "com.android.server.am.ProcessOomProto.Detail.last_cached_pss");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cached = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cached(&has_bits);
          cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool empty = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_empty(&has_bits);
          empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_above_client = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_has_above_client(&has_bits);
          has_above_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessOomProto.Detail.CpuRunTime service_run_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_service_run_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessOomProto_Detail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ProcessOomProto.Detail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_adj = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_max_adj(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_adj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_raw_adj = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cur_raw_adj(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_raw_adj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 set_raw_adj = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_set_raw_adj(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_raw_adj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_adj = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_cur_adj(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_adj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 set_adj = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_set_adj(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_adj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.ProcessStateEnum current_state = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::ProcessStateEnum_IsValid(value)) {
            set_current_state(static_cast< ::android::app::ProcessStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.ProcessStateEnum set_state = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::ProcessStateEnum_IsValid(value)) {
            set_set_state(static_cast< ::android::app::ProcessStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pss = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pss()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pss().data(), static_cast<int>(this->last_pss().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessOomProto.Detail.last_pss");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_swap_pss = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_swap_pss()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_swap_pss().data(), static_cast<int>(this->last_swap_pss().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessOomProto.Detail.last_swap_pss");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_cached_pss = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_cached_pss()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_cached_pss().data(), static_cast<int>(this->last_cached_pss().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessOomProto.Detail.last_cached_pss");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cached = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_cached(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool empty = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_empty(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_above_client = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_has_above_client(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_above_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessOomProto.Detail.CpuRunTime service_run_time = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_run_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ProcessOomProto.Detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ProcessOomProto.Detail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessOomProto_Detail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ProcessOomProto.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_adj = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->max_adj(), output);
  }

  // optional int32 cur_raw_adj = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cur_raw_adj(), output);
  }

  // optional int32 set_raw_adj = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->set_raw_adj(), output);
  }

  // optional int32 cur_adj = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->cur_adj(), output);
  }

  // optional int32 set_adj = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->set_adj(), output);
  }

  // optional .android.app.ProcessStateEnum current_state = 7;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->current_state(), output);
  }

  // optional .android.app.ProcessStateEnum set_state = 8;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->set_state(), output);
  }

  // optional string last_pss = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pss().data(), static_cast<int>(this->last_pss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.Detail.last_pss");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->last_pss(), output);
  }

  // optional string last_swap_pss = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_swap_pss().data(), static_cast<int>(this->last_swap_pss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.Detail.last_swap_pss");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->last_swap_pss(), output);
  }

  // optional string last_cached_pss = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_cached_pss().data(), static_cast<int>(this->last_cached_pss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.Detail.last_cached_pss");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->last_cached_pss(), output);
  }

  // optional bool cached = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->cached(), output);
  }

  // optional bool empty = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->empty(), output);
  }

  // optional bool has_above_client = 14;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->has_above_client(), output);
  }

  // optional .com.android.server.am.ProcessOomProto.Detail.CpuRunTime service_run_time = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::service_run_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ProcessOomProto.Detail)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessOomProto_Detail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ProcessOomProto.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_adj = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->max_adj(), target);
  }

  // optional int32 cur_raw_adj = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_raw_adj(), target);
  }

  // optional int32 set_raw_adj = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->set_raw_adj(), target);
  }

  // optional int32 cur_adj = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_adj(), target);
  }

  // optional int32 set_adj = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->set_adj(), target);
  }

  // optional .android.app.ProcessStateEnum current_state = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->current_state(), target);
  }

  // optional .android.app.ProcessStateEnum set_state = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->set_state(), target);
  }

  // optional string last_pss = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pss().data(), static_cast<int>(this->last_pss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.Detail.last_pss");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->last_pss(), target);
  }

  // optional string last_swap_pss = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_swap_pss().data(), static_cast<int>(this->last_swap_pss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.Detail.last_swap_pss");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->last_swap_pss(), target);
  }

  // optional string last_cached_pss = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_cached_pss().data(), static_cast<int>(this->last_cached_pss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.Detail.last_cached_pss");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->last_cached_pss(), target);
  }

  // optional bool cached = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->cached(), target);
  }

  // optional bool empty = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->empty(), target);
  }

  // optional bool has_above_client = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->has_above_client(), target);
  }

  // optional .com.android.server.am.ProcessOomProto.Detail.CpuRunTime service_run_time = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::service_run_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ProcessOomProto.Detail)
  return target;
}

size_t ProcessOomProto_Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ProcessOomProto.Detail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string last_pss = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_pss());
    }

    // optional string last_swap_pss = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_swap_pss());
    }

    // optional string last_cached_pss = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_cached_pss());
    }

    // optional .com.android.server.am.ProcessOomProto.Detail.CpuRunTime service_run_time = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_run_time_);
    }

    // optional int32 max_adj = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_adj());
    }

    // optional int32 cur_raw_adj = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cur_raw_adj());
    }

    // optional int32 set_raw_adj = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->set_raw_adj());
    }

    // optional int32 cur_adj = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cur_adj());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 set_adj = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->set_adj());
    }

    // optional bool cached = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool empty = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool has_above_client = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .android.app.ProcessStateEnum current_state = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->current_state());
    }

    // optional .android.app.ProcessStateEnum set_state = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->set_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessOomProto_Detail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ProcessOomProto.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessOomProto_Detail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessOomProto_Detail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ProcessOomProto.Detail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ProcessOomProto.Detail)
    MergeFrom(*source);
  }
}

void ProcessOomProto_Detail::MergeFrom(const ProcessOomProto_Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ProcessOomProto.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      last_pss_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_pss_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      last_swap_pss_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_swap_pss_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      last_cached_pss_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_cached_pss_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_service_run_time()->::com::android::server::am::ProcessOomProto_Detail_CpuRunTime::MergeFrom(from.service_run_time());
    }
    if (cached_has_bits & 0x00000010u) {
      max_adj_ = from.max_adj_;
    }
    if (cached_has_bits & 0x00000020u) {
      cur_raw_adj_ = from.cur_raw_adj_;
    }
    if (cached_has_bits & 0x00000040u) {
      set_raw_adj_ = from.set_raw_adj_;
    }
    if (cached_has_bits & 0x00000080u) {
      cur_adj_ = from.cur_adj_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      set_adj_ = from.set_adj_;
    }
    if (cached_has_bits & 0x00000200u) {
      cached_ = from.cached_;
    }
    if (cached_has_bits & 0x00000400u) {
      empty_ = from.empty_;
    }
    if (cached_has_bits & 0x00000800u) {
      has_above_client_ = from.has_above_client_;
    }
    if (cached_has_bits & 0x00001000u) {
      current_state_ = from.current_state_;
    }
    if (cached_has_bits & 0x00002000u) {
      set_state_ = from.set_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessOomProto_Detail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ProcessOomProto.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessOomProto_Detail::CopyFrom(const ProcessOomProto_Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ProcessOomProto.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessOomProto_Detail::IsInitialized() const {
  return true;
}

void ProcessOomProto_Detail::InternalSwap(ProcessOomProto_Detail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  last_pss_.Swap(&other->last_pss_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_swap_pss_.Swap(&other->last_swap_pss_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_cached_pss_.Swap(&other->last_cached_pss_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(service_run_time_, other->service_run_time_);
  swap(max_adj_, other->max_adj_);
  swap(cur_raw_adj_, other->cur_raw_adj_);
  swap(set_raw_adj_, other->set_raw_adj_);
  swap(cur_adj_, other->cur_adj_);
  swap(set_adj_, other->set_adj_);
  swap(cached_, other->cached_);
  swap(empty_, other->empty_);
  swap(has_above_client_, other->has_above_client_);
  swap(current_state_, other->current_state_);
  swap(set_state_, other->set_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessOomProto_Detail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessOomProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ProcessOomProto_default_instance_.activities_ = false;
  ::com::android::server::am::_ProcessOomProto_default_instance_.services_ = false;
  ::com::android::server::am::_ProcessOomProto_default_instance_._instance.get_mutable()->proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ProcessOomProto_default_instance_.adj_target_component_name_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::server::am::_ProcessOomProto_default_instance_.adj_target_object_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::com::android::server::am::_ProcessOomProto_default_instance_.adj_source_proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
  ::com::android::server::am::_ProcessOomProto_default_instance_.adj_source_object_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::com::android::server::am::_ProcessOomProto_default_instance_._instance.get_mutable()->detail_ = const_cast< ::com::android::server::am::ProcessOomProto_Detail*>(
      ::com::android::server::am::ProcessOomProto_Detail::internal_default_instance());
}
class ProcessOomProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessOomProto>()._has_bits_);
  static void set_has_persistent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_oom_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sched_group(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trim_memory_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::android::server::am::ProcessRecordProto& proc(const ProcessOomProto* msg);
  static void set_has_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adj_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::content::ComponentNameProto& adj_target_component_name(const ProcessOomProto* msg);
  static const ::com::android::server::am::ProcessRecordProto& adj_source_proc(const ProcessOomProto* msg);
  static const ::com::android::server::am::ProcessOomProto_Detail& detail(const ProcessOomProto* msg);
  static void set_has_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::am::ProcessRecordProto&
ProcessOomProto::_Internal::proc(const ProcessOomProto* msg) {
  return *msg->proc_;
}
const ::android::content::ComponentNameProto&
ProcessOomProto::_Internal::adj_target_component_name(const ProcessOomProto* msg) {
  return *msg->AdjTarget_.adj_target_component_name_;
}
const ::com::android::server::am::ProcessRecordProto&
ProcessOomProto::_Internal::adj_source_proc(const ProcessOomProto* msg) {
  return *msg->AdjSource_.adj_source_proc_;
}
const ::com::android::server::am::ProcessOomProto_Detail&
ProcessOomProto::_Internal::detail(const ProcessOomProto* msg) {
  return *msg->detail_;
}
void ProcessOomProto::set_allocated_adj_target_component_name(::android::content::ComponentNameProto* adj_target_component_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_AdjTarget();
  if (adj_target_component_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adj_target_component_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adj_target_component_name, submessage_arena);
    }
    set_has_adj_target_component_name();
    AdjTarget_.adj_target_component_name_ = adj_target_component_name;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.adj_target_component_name)
}
void ProcessOomProto::clear_adj_target_component_name() {
  if (has_adj_target_component_name()) {
    delete AdjTarget_.adj_target_component_name_;
    clear_has_AdjTarget();
  }
}
void ProcessOomProto::set_allocated_adj_source_proc(::com::android::server::am::ProcessRecordProto* adj_source_proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_AdjSource();
  if (adj_source_proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adj_source_proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adj_source_proc, submessage_arena);
    }
    set_has_adj_source_proc();
    AdjSource_.adj_source_proc_ = adj_source_proc;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.adj_source_proc)
}
ProcessOomProto::ProcessOomProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ProcessOomProto)
}
ProcessOomProto::ProcessOomProto(const ProcessOomProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oom_adj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_oom_adj()) {
    oom_adj_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oom_adj_);
  }
  adj_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_adj_type()) {
    adj_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.adj_type_);
  }
  if (from.has_proc()) {
    proc_ = new ::com::android::server::am::ProcessRecordProto(*from.proc_);
  } else {
    proc_ = nullptr;
  }
  if (from.has_detail()) {
    detail_ = new ::com::android::server::am::ProcessOomProto_Detail(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  ::memcpy(&persistent_, &from.persistent_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&persistent_)) + sizeof(state_));
  clear_has_Foreground();
  switch (from.Foreground_case()) {
    case kActivities: {
      set_activities(from.activities());
      break;
    }
    case kServices: {
      set_services(from.services());
      break;
    }
    case FOREGROUND_NOT_SET: {
      break;
    }
  }
  clear_has_AdjTarget();
  switch (from.AdjTarget_case()) {
    case kAdjTargetComponentName: {
      mutable_adj_target_component_name()->::android::content::ComponentNameProto::MergeFrom(from.adj_target_component_name());
      break;
    }
    case kAdjTargetObject: {
      set_adj_target_object(from.adj_target_object());
      break;
    }
    case ADJTARGET_NOT_SET: {
      break;
    }
  }
  clear_has_AdjSource();
  switch (from.AdjSource_case()) {
    case kAdjSourceProc: {
      mutable_adj_source_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.adj_source_proc());
      break;
    }
    case kAdjSourceObject: {
      set_adj_source_object(from.adj_source_object());
      break;
    }
    case ADJSOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ProcessOomProto)
}

void ProcessOomProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  oom_adj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adj_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trim_memory_level_) -
      reinterpret_cast<char*>(&proc_)) + sizeof(trim_memory_level_));
  sched_group_ = -1;
  state_ = 998;
  clear_has_Foreground();
  clear_has_AdjTarget();
  clear_has_AdjSource();
}

ProcessOomProto::~ProcessOomProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ProcessOomProto)
  SharedDtor();
}

void ProcessOomProto::SharedDtor() {
  oom_adj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adj_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proc_;
  if (this != internal_default_instance()) delete detail_;
  if (has_Foreground()) {
    clear_Foreground();
  }
  if (has_AdjTarget()) {
    clear_AdjTarget();
  }
  if (has_AdjSource()) {
    clear_AdjSource();
  }
}

void ProcessOomProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessOomProto& ProcessOomProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessOomProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ProcessOomProto::clear_Foreground() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.am.ProcessOomProto)
  switch (Foreground_case()) {
    case kActivities: {
      // No need to clear
      break;
    }
    case kServices: {
      // No need to clear
      break;
    }
    case FOREGROUND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOREGROUND_NOT_SET;
}

void ProcessOomProto::clear_AdjTarget() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.am.ProcessOomProto)
  switch (AdjTarget_case()) {
    case kAdjTargetComponentName: {
      delete AdjTarget_.adj_target_component_name_;
      break;
    }
    case kAdjTargetObject: {
      AdjTarget_.adj_target_object_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ADJTARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ADJTARGET_NOT_SET;
}

void ProcessOomProto::clear_AdjSource() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.am.ProcessOomProto)
  switch (AdjSource_case()) {
    case kAdjSourceProc: {
      delete AdjSource_.adj_source_proc_;
      break;
    }
    case kAdjSourceObject: {
      AdjSource_.adj_source_object_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ADJSOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = ADJSOURCE_NOT_SET;
}


void ProcessOomProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ProcessOomProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      oom_adj_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      adj_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(proc_ != nullptr);
      proc_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(detail_ != nullptr);
      detail_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&persistent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trim_memory_level_) -
        reinterpret_cast<char*>(&persistent_)) + sizeof(trim_memory_level_));
    sched_group_ = -1;
  }
  state_ = 998;
  clear_Foreground();
  clear_AdjTarget();
  clear_AdjSource();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessOomProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool persistent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_persistent(&has_bits);
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oom_adj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_oom_adj(), ptr, ctx, "com.android.server.am.ProcessOomProto.oom_adj");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessOomProto.SchedGroup sched_group = 4 [default = SCHED_GROUP_UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::am::ProcessOomProto_SchedGroup_IsValid(val))) {
            set_sched_group(static_cast<::com::android::server::am::ProcessOomProto_SchedGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool activities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          set_activities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool services = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_services(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.ProcessStateEnum state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::ProcessStateEnum_IsValid(val))) {
            set_state(static_cast<::android::app::ProcessStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 trim_memory_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_trim_memory_level(&has_bits);
          trim_memory_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto proc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string adj_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_adj_type(), ptr, ctx, "com.android.server.am.ProcessOomProto.adj_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto adj_target_component_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_adj_target_component_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string adj_target_object = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_adj_target_object(), ptr, ctx, "com.android.server.am.ProcessOomProto.adj_target_object");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessRecordProto adj_source_proc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_adj_source_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string adj_source_object = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_adj_source_object(), ptr, ctx, "com.android.server.am.ProcessOomProto.adj_source_object");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.ProcessOomProto.Detail detail = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessOomProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ProcessOomProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool persistent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_persistent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persistent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string oom_adj = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_oom_adj()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oom_adj().data(), static_cast<int>(this->oom_adj().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessOomProto.oom_adj");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessOomProto.SchedGroup sched_group = 4 [default = SCHED_GROUP_UNKNOWN];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::am::ProcessOomProto_SchedGroup_IsValid(value)) {
            set_sched_group(static_cast< ::com::android::server::am::ProcessOomProto_SchedGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool activities = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          clear_Foreground();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Foreground_.activities_)));
          set_has_activities();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool services = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          clear_Foreground();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Foreground_.services_)));
          set_has_services();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.ProcessStateEnum state = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::ProcessStateEnum_IsValid(value)) {
            set_state(static_cast< ::android::app::ProcessStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trim_memory_level = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_trim_memory_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trim_memory_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto proc = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string adj_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_adj_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adj_type().data(), static_cast<int>(this->adj_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessOomProto.adj_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto adj_target_component_name = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adj_target_component_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string adj_target_object = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_adj_target_object()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adj_target_object().data(), static_cast<int>(this->adj_target_object().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessOomProto.adj_target_object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessRecordProto adj_source_proc = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adj_source_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string adj_source_object = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_adj_source_object()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adj_source_object().data(), static_cast<int>(this->adj_source_object().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.ProcessOomProto.adj_source_object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.ProcessOomProto.Detail detail = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ProcessOomProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ProcessOomProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessOomProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ProcessOomProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool persistent = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->persistent(), output);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional string oom_adj = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oom_adj().data(), static_cast<int>(this->oom_adj().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.oom_adj");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->oom_adj(), output);
  }

  // optional .com.android.server.am.ProcessOomProto.SchedGroup sched_group = 4 [default = SCHED_GROUP_UNKNOWN];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->sched_group(), output);
  }

  switch (Foreground_case()) {
    case kActivities:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->activities(), output);
      break;
    case kServices:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->services(), output);
      break;
    default: ;
  }
  // optional .android.app.ProcessStateEnum state = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  // optional int32 trim_memory_level = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->trim_memory_level(), output);
  }

  // optional .com.android.server.am.ProcessRecordProto proc = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::proc(this), output);
  }

  // optional string adj_type = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adj_type().data(), static_cast<int>(this->adj_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.adj_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->adj_type(), output);
  }

  switch (AdjTarget_case()) {
    case kAdjTargetComponentName:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, _Internal::adj_target_component_name(this), output);
      break;
    case kAdjTargetObject:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->adj_target_object().data(), static_cast<int>(this->adj_target_object().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.android.server.am.ProcessOomProto.adj_target_object");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        12, this->adj_target_object(), output);
      break;
    default: ;
  }
  switch (AdjSource_case()) {
    case kAdjSourceProc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, _Internal::adj_source_proc(this), output);
      break;
    case kAdjSourceObject:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->adj_source_object().data(), static_cast<int>(this->adj_source_object().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.android.server.am.ProcessOomProto.adj_source_object");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        14, this->adj_source_object(), output);
      break;
    default: ;
  }
  // optional .com.android.server.am.ProcessOomProto.Detail detail = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::detail(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ProcessOomProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessOomProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ProcessOomProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool persistent = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->persistent(), target);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional string oom_adj = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oom_adj().data(), static_cast<int>(this->oom_adj().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.oom_adj");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->oom_adj(), target);
  }

  // optional .com.android.server.am.ProcessOomProto.SchedGroup sched_group = 4 [default = SCHED_GROUP_UNKNOWN];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->sched_group(), target);
  }

  switch (Foreground_case()) {
    case kActivities:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->activities(), target);
      break;
    case kServices:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->services(), target);
      break;
    default: ;
  }
  // optional .android.app.ProcessStateEnum state = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  // optional int32 trim_memory_level = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->trim_memory_level(), target);
  }

  // optional .com.android.server.am.ProcessRecordProto proc = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::proc(this), target);
  }

  // optional string adj_type = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adj_type().data(), static_cast<int>(this->adj_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.ProcessOomProto.adj_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->adj_type(), target);
  }

  switch (AdjTarget_case()) {
    case kAdjTargetComponentName:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, _Internal::adj_target_component_name(this), target);
      break;
    case kAdjTargetObject:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->adj_target_object().data(), static_cast<int>(this->adj_target_object().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.android.server.am.ProcessOomProto.adj_target_object");
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
          12, this->adj_target_object(), target);
      break;
    default: ;
  }
  switch (AdjSource_case()) {
    case kAdjSourceProc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, _Internal::adj_source_proc(this), target);
      break;
    case kAdjSourceObject:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->adj_source_object().data(), static_cast<int>(this->adj_source_object().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.android.server.am.ProcessOomProto.adj_source_object");
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
          14, this->adj_source_object(), target);
      break;
    default: ;
  }
  // optional .com.android.server.am.ProcessOomProto.Detail detail = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::detail(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ProcessOomProto)
  return target;
}

size_t ProcessOomProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ProcessOomProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string oom_adj = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->oom_adj());
    }

    // optional string adj_type = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->adj_type());
    }

    // optional .com.android.server.am.ProcessRecordProto proc = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proc_);
    }

    // optional .com.android.server.am.ProcessOomProto.Detail detail = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detail_);
    }

    // optional bool persistent = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 num = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 trim_memory_level = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->trim_memory_level());
    }

    // optional .com.android.server.am.ProcessOomProto.SchedGroup sched_group = 4 [default = SCHED_GROUP_UNKNOWN];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sched_group());
    }

  }
  // optional .android.app.ProcessStateEnum state = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  switch (Foreground_case()) {
    // optional bool activities = 5;
    case kActivities: {
      total_size += 1 + 1;
      break;
    }
    // optional bool services = 6;
    case kServices: {
      total_size += 1 + 1;
      break;
    }
    case FOREGROUND_NOT_SET: {
      break;
    }
  }
  switch (AdjTarget_case()) {
    // optional .android.content.ComponentNameProto adj_target_component_name = 11;
    case kAdjTargetComponentName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AdjTarget_.adj_target_component_name_);
      break;
    }
    // optional string adj_target_object = 12;
    case kAdjTargetObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->adj_target_object());
      break;
    }
    case ADJTARGET_NOT_SET: {
      break;
    }
  }
  switch (AdjSource_case()) {
    // optional .com.android.server.am.ProcessRecordProto adj_source_proc = 13;
    case kAdjSourceProc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AdjSource_.adj_source_proc_);
      break;
    }
    // optional string adj_source_object = 14;
    case kAdjSourceObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->adj_source_object());
      break;
    }
    case ADJSOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessOomProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ProcessOomProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessOomProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessOomProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ProcessOomProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ProcessOomProto)
    MergeFrom(*source);
  }
}

void ProcessOomProto::MergeFrom(const ProcessOomProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ProcessOomProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      oom_adj_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oom_adj_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      adj_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.adj_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.proc());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_detail()->::com::android::server::am::ProcessOomProto_Detail::MergeFrom(from.detail());
    }
    if (cached_has_bits & 0x00000010u) {
      persistent_ = from.persistent_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000040u) {
      trim_memory_level_ = from.trim_memory_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      sched_group_ = from.sched_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_state(from.state());
  }
  switch (from.Foreground_case()) {
    case kActivities: {
      set_activities(from.activities());
      break;
    }
    case kServices: {
      set_services(from.services());
      break;
    }
    case FOREGROUND_NOT_SET: {
      break;
    }
  }
  switch (from.AdjTarget_case()) {
    case kAdjTargetComponentName: {
      mutable_adj_target_component_name()->::android::content::ComponentNameProto::MergeFrom(from.adj_target_component_name());
      break;
    }
    case kAdjTargetObject: {
      set_adj_target_object(from.adj_target_object());
      break;
    }
    case ADJTARGET_NOT_SET: {
      break;
    }
  }
  switch (from.AdjSource_case()) {
    case kAdjSourceProc: {
      mutable_adj_source_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.adj_source_proc());
      break;
    }
    case kAdjSourceObject: {
      set_adj_source_object(from.adj_source_object());
      break;
    }
    case ADJSOURCE_NOT_SET: {
      break;
    }
  }
}

void ProcessOomProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ProcessOomProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessOomProto::CopyFrom(const ProcessOomProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ProcessOomProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessOomProto::IsInitialized() const {
  return true;
}

void ProcessOomProto::InternalSwap(ProcessOomProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oom_adj_.Swap(&other->oom_adj_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  adj_type_.Swap(&other->adj_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proc_, other->proc_);
  swap(detail_, other->detail_);
  swap(persistent_, other->persistent_);
  swap(num_, other->num_);
  swap(trim_memory_level_, other->trim_memory_level_);
  swap(sched_group_, other->sched_group_);
  swap(state_, other->state_);
  swap(Foreground_, other->Foreground_);
  swap(AdjTarget_, other->AdjTarget_);
  swap(AdjSource_, other->AdjSource_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessOomProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessToGcProto::InitAsDefaultInstance() {
  ::com::android::server::am::_ProcessToGcProto_default_instance_._instance.get_mutable()->proc_ = const_cast< ::com::android::server::am::ProcessRecordProto*>(
      ::com::android::server::am::ProcessRecordProto::internal_default_instance());
}
class ProcessToGcProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessToGcProto>()._has_bits_);
  static const ::com::android::server::am::ProcessRecordProto& proc(const ProcessToGcProto* msg);
  static void set_has_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report_low_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_now_uptime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_gced_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_low_memory_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::am::ProcessRecordProto&
ProcessToGcProto::_Internal::proc(const ProcessToGcProto* msg) {
  return *msg->proc_;
}
ProcessToGcProto::ProcessToGcProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.ProcessToGcProto)
}
ProcessToGcProto::ProcessToGcProto(const ProcessToGcProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proc()) {
    proc_ = new ::com::android::server::am::ProcessRecordProto(*from.proc_);
  } else {
    proc_ = nullptr;
  }
  ::memcpy(&now_uptime_ms_, &from.now_uptime_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_low_memory_) -
    reinterpret_cast<char*>(&now_uptime_ms_)) + sizeof(report_low_memory_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.ProcessToGcProto)
}

void ProcessToGcProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&proc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_low_memory_) -
      reinterpret_cast<char*>(&proc_)) + sizeof(report_low_memory_));
}

ProcessToGcProto::~ProcessToGcProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.ProcessToGcProto)
  SharedDtor();
}

void ProcessToGcProto::SharedDtor() {
  if (this != internal_default_instance()) delete proc_;
}

void ProcessToGcProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessToGcProto& ProcessToGcProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessToGcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ProcessToGcProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.ProcessToGcProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(proc_ != nullptr);
    proc_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&now_uptime_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_low_memory_) -
        reinterpret_cast<char*>(&now_uptime_ms_)) + sizeof(report_low_memory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessToGcProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.am.ProcessRecordProto proc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_proc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_low_memory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_report_low_memory(&has_bits);
          report_low_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 now_uptime_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_now_uptime_ms(&has_bits);
          now_uptime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_gced_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_gced_ms(&has_bits);
          last_gced_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_low_memory_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_low_memory_ms(&has_bits);
          last_low_memory_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessToGcProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.ProcessToGcProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.am.ProcessRecordProto proc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool report_low_memory = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_report_low_memory(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_low_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 now_uptime_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_now_uptime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_uptime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_gced_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_gced_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_gced_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_low_memory_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_low_memory_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_low_memory_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.ProcessToGcProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.ProcessToGcProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessToGcProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.ProcessToGcProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ProcessRecordProto proc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::proc(this), output);
  }

  // optional bool report_low_memory = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->report_low_memory(), output);
  }

  // optional int64 now_uptime_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->now_uptime_ms(), output);
  }

  // optional int64 last_gced_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_gced_ms(), output);
  }

  // optional int64 last_low_memory_ms = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->last_low_memory_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.ProcessToGcProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessToGcProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.ProcessToGcProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.ProcessRecordProto proc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::proc(this), target);
  }

  // optional bool report_low_memory = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->report_low_memory(), target);
  }

  // optional int64 now_uptime_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->now_uptime_ms(), target);
  }

  // optional int64 last_gced_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->last_gced_ms(), target);
  }

  // optional int64 last_low_memory_ms = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->last_low_memory_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.ProcessToGcProto)
  return target;
}

size_t ProcessToGcProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.ProcessToGcProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .com.android.server.am.ProcessRecordProto proc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proc_);
    }

    // optional int64 now_uptime_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->now_uptime_ms());
    }

    // optional int64 last_gced_ms = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_gced_ms());
    }

    // optional int64 last_low_memory_ms = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_low_memory_ms());
    }

    // optional bool report_low_memory = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessToGcProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.ProcessToGcProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessToGcProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessToGcProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.ProcessToGcProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.ProcessToGcProto)
    MergeFrom(*source);
  }
}

void ProcessToGcProto::MergeFrom(const ProcessToGcProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.ProcessToGcProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_proc()->::com::android::server::am::ProcessRecordProto::MergeFrom(from.proc());
    }
    if (cached_has_bits & 0x00000002u) {
      now_uptime_ms_ = from.now_uptime_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_gced_ms_ = from.last_gced_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_low_memory_ms_ = from.last_low_memory_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_low_memory_ = from.report_low_memory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessToGcProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.ProcessToGcProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessToGcProto::CopyFrom(const ProcessToGcProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.ProcessToGcProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessToGcProto::IsInitialized() const {
  return true;
}

void ProcessToGcProto::InternalSwap(ProcessToGcProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(proc_, other->proc_);
  swap(now_uptime_ms_, other->now_uptime_ms_);
  swap(last_gced_ms_, other->last_gced_ms_);
  swap(last_low_memory_ms_, other->last_low_memory_ms_);
  swap(report_low_memory_, other->report_low_memory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessToGcProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppErrorsProto_ProcessCrashTime_Entry::InitAsDefaultInstance() {
}
class AppErrorsProto_ProcessCrashTime_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<AppErrorsProto_ProcessCrashTime_Entry>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_crashed_at_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppErrorsProto_ProcessCrashTime_Entry::AppErrorsProto_ProcessCrashTime_Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
}
AppErrorsProto_ProcessCrashTime_Entry::AppErrorsProto_ProcessCrashTime_Entry(const AppErrorsProto_ProcessCrashTime_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_crashed_at_ms_, &from.last_crashed_at_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&last_crashed_at_ms_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
}

void AppErrorsProto_ProcessCrashTime_Entry::SharedCtor() {
  ::memset(&last_crashed_at_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&last_crashed_at_ms_)) + sizeof(uid_));
}

AppErrorsProto_ProcessCrashTime_Entry::~AppErrorsProto_ProcessCrashTime_Entry() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  SharedDtor();
}

void AppErrorsProto_ProcessCrashTime_Entry::SharedDtor() {
}

void AppErrorsProto_ProcessCrashTime_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppErrorsProto_ProcessCrashTime_Entry& AppErrorsProto_ProcessCrashTime_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppErrorsProto_ProcessCrashTime_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppErrorsProto_ProcessCrashTime_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_crashed_at_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&last_crashed_at_ms_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppErrorsProto_ProcessCrashTime_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_crashed_at_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_crashed_at_ms(&has_bits);
          last_crashed_at_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppErrorsProto_ProcessCrashTime_Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_crashed_at_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_crashed_at_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_crashed_at_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppErrorsProto_ProcessCrashTime_Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int64 last_crashed_at_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->last_crashed_at_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppErrorsProto_ProcessCrashTime_Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int64 last_crashed_at_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->last_crashed_at_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  return target;
}

size_t AppErrorsProto_ProcessCrashTime_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 last_crashed_at_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_crashed_at_ms());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppErrorsProto_ProcessCrashTime_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const AppErrorsProto_ProcessCrashTime_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppErrorsProto_ProcessCrashTime_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
    MergeFrom(*source);
  }
}

void AppErrorsProto_ProcessCrashTime_Entry::MergeFrom(const AppErrorsProto_ProcessCrashTime_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_crashed_at_ms_ = from.last_crashed_at_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppErrorsProto_ProcessCrashTime_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppErrorsProto_ProcessCrashTime_Entry::CopyFrom(const AppErrorsProto_ProcessCrashTime_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppErrorsProto_ProcessCrashTime_Entry::IsInitialized() const {
  return true;
}

void AppErrorsProto_ProcessCrashTime_Entry::InternalSwap(AppErrorsProto_ProcessCrashTime_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_crashed_at_ms_, other->last_crashed_at_ms_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppErrorsProto_ProcessCrashTime_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppErrorsProto_ProcessCrashTime::InitAsDefaultInstance() {
}
class AppErrorsProto_ProcessCrashTime::_Internal {
 public:
  using HasBits = decltype(std::declval<AppErrorsProto_ProcessCrashTime>()._has_bits_);
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppErrorsProto_ProcessCrashTime::AppErrorsProto_ProcessCrashTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppErrorsProto.ProcessCrashTime)
}
AppErrorsProto_ProcessCrashTime::AppErrorsProto_ProcessCrashTime(const AppErrorsProto_ProcessCrashTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppErrorsProto.ProcessCrashTime)
}

void AppErrorsProto_ProcessCrashTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppErrorsProto_ProcessCrashTime::~AppErrorsProto_ProcessCrashTime() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  SharedDtor();
}

void AppErrorsProto_ProcessCrashTime::SharedDtor() {
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppErrorsProto_ProcessCrashTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppErrorsProto_ProcessCrashTime& AppErrorsProto_ProcessCrashTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppErrorsProto_ProcessCrashTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppErrorsProto_ProcessCrashTime::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    process_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppErrorsProto_ProcessCrashTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string process_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_process_name(), ptr, ctx, "com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppErrorsProto_ProcessCrashTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry entries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppErrorsProto_ProcessCrashTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string process_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_name(), output);
  }

  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppErrorsProto.ProcessCrashTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppErrorsProto_ProcessCrashTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string process_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }

  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  return target;
}

size_t AppErrorsProto_ProcessCrashTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry entries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // optional string process_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppErrorsProto_ProcessCrashTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  GOOGLE_DCHECK_NE(&from, this);
  const AppErrorsProto_ProcessCrashTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppErrorsProto_ProcessCrashTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppErrorsProto.ProcessCrashTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppErrorsProto.ProcessCrashTime)
    MergeFrom(*source);
  }
}

void AppErrorsProto_ProcessCrashTime::MergeFrom(const AppErrorsProto_ProcessCrashTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_process_name()) {
    _has_bits_[0] |= 0x00000001u;
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
}

void AppErrorsProto_ProcessCrashTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppErrorsProto_ProcessCrashTime::CopyFrom(const AppErrorsProto_ProcessCrashTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppErrorsProto.ProcessCrashTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppErrorsProto_ProcessCrashTime::IsInitialized() const {
  return true;
}

void AppErrorsProto_ProcessCrashTime::InternalSwap(AppErrorsProto_ProcessCrashTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppErrorsProto_ProcessCrashTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppErrorsProto_BadProcess_Entry::InitAsDefaultInstance() {
}
class AppErrorsProto_BadProcess_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<AppErrorsProto_BadProcess_Entry>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crashed_at_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_short_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_long_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AppErrorsProto_BadProcess_Entry::AppErrorsProto_BadProcess_Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppErrorsProto.BadProcess.Entry)
}
AppErrorsProto_BadProcess_Entry::AppErrorsProto_BadProcess_Entry(const AppErrorsProto_BadProcess_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_msg()) {
    short_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_msg_);
  }
  long_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_long_msg()) {
    long_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.long_msg_);
  }
  stack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stack()) {
    stack_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stack_);
  }
  ::memcpy(&crashed_at_ms_, &from.crashed_at_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&crashed_at_ms_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppErrorsProto.BadProcess.Entry)
}

void AppErrorsProto_BadProcess_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  short_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&crashed_at_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&crashed_at_ms_)) + sizeof(uid_));
}

AppErrorsProto_BadProcess_Entry::~AppErrorsProto_BadProcess_Entry() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  SharedDtor();
}

void AppErrorsProto_BadProcess_Entry::SharedDtor() {
  short_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stack_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppErrorsProto_BadProcess_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppErrorsProto_BadProcess_Entry& AppErrorsProto_BadProcess_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppErrorsProto_BadProcess_Entry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppErrorsProto_BadProcess_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      short_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      long_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      stack_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&crashed_at_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&crashed_at_ms_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppErrorsProto_BadProcess_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 crashed_at_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crashed_at_ms(&has_bits);
          crashed_at_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string short_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_short_msg(), ptr, ctx, "com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string long_msg = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_long_msg(), ptr, ctx, "com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stack = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_stack(), ptr, ctx, "com.android.server.am.AppErrorsProto.BadProcess.Entry.stack");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppErrorsProto_BadProcess_Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crashed_at_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_crashed_at_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &crashed_at_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string short_msg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_short_msg()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_msg().data(), static_cast<int>(this->short_msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string long_msg = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_long_msg()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->long_msg().data(), static_cast<int>(this->long_msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stack = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stack()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stack().data(), static_cast<int>(this->stack().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppErrorsProto.BadProcess.Entry.stack");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppErrorsProto_BadProcess_Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int64 crashed_at_ms = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->crashed_at_ms(), output);
  }

  // optional string short_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_msg().data(), static_cast<int>(this->short_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->short_msg(), output);
  }

  // optional string long_msg = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_msg().data(), static_cast<int>(this->long_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->long_msg(), output);
  }

  // optional string stack = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stack().data(), static_cast<int>(this->stack().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.Entry.stack");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppErrorsProto.BadProcess.Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppErrorsProto_BadProcess_Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int64 crashed_at_ms = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->crashed_at_ms(), target);
  }

  // optional string short_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_msg().data(), static_cast<int>(this->short_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->short_msg(), target);
  }

  // optional string long_msg = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_msg().data(), static_cast<int>(this->long_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->long_msg(), target);
  }

  // optional string stack = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stack().data(), static_cast<int>(this->stack().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.Entry.stack");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->stack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  return target;
}

size_t AppErrorsProto_BadProcess_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string short_msg = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->short_msg());
    }

    // optional string long_msg = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->long_msg());
    }

    // optional string stack = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->stack());
    }

    // optional int64 crashed_at_ms = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->crashed_at_ms());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppErrorsProto_BadProcess_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const AppErrorsProto_BadProcess_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppErrorsProto_BadProcess_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppErrorsProto.BadProcess.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppErrorsProto.BadProcess.Entry)
    MergeFrom(*source);
  }
}

void AppErrorsProto_BadProcess_Entry::MergeFrom(const AppErrorsProto_BadProcess_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      short_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      long_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.long_msg_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      stack_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stack_);
    }
    if (cached_has_bits & 0x00000008u) {
      crashed_at_ms_ = from.crashed_at_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppErrorsProto_BadProcess_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppErrorsProto_BadProcess_Entry::CopyFrom(const AppErrorsProto_BadProcess_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppErrorsProto.BadProcess.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppErrorsProto_BadProcess_Entry::IsInitialized() const {
  return true;
}

void AppErrorsProto_BadProcess_Entry::InternalSwap(AppErrorsProto_BadProcess_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  short_msg_.Swap(&other->short_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  long_msg_.Swap(&other->long_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stack_.Swap(&other->stack_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(crashed_at_ms_, other->crashed_at_ms_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppErrorsProto_BadProcess_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppErrorsProto_BadProcess::InitAsDefaultInstance() {
}
class AppErrorsProto_BadProcess::_Internal {
 public:
  using HasBits = decltype(std::declval<AppErrorsProto_BadProcess>()._has_bits_);
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppErrorsProto_BadProcess::AppErrorsProto_BadProcess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppErrorsProto.BadProcess)
}
AppErrorsProto_BadProcess::AppErrorsProto_BadProcess(const AppErrorsProto_BadProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppErrorsProto.BadProcess)
}

void AppErrorsProto_BadProcess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppErrorsProto_BadProcess::~AppErrorsProto_BadProcess() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppErrorsProto.BadProcess)
  SharedDtor();
}

void AppErrorsProto_BadProcess::SharedDtor() {
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppErrorsProto_BadProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppErrorsProto_BadProcess& AppErrorsProto_BadProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppErrorsProto_BadProcess_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppErrorsProto_BadProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppErrorsProto.BadProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    process_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppErrorsProto_BadProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string process_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_process_name(), ptr, ctx, "com.android.server.am.AppErrorsProto.BadProcess.process_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppErrorsProto.BadProcess.Entry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppErrorsProto_BadProcess::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppErrorsProto.BadProcess)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppErrorsProto.BadProcess.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppErrorsProto.BadProcess.Entry entries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppErrorsProto.BadProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppErrorsProto.BadProcess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppErrorsProto_BadProcess::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppErrorsProto.BadProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string process_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.process_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_name(), output);
  }

  // repeated .com.android.server.am.AppErrorsProto.BadProcess.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppErrorsProto.BadProcess)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppErrorsProto_BadProcess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppErrorsProto.BadProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string process_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppErrorsProto.BadProcess.process_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }

  // repeated .com.android.server.am.AppErrorsProto.BadProcess.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppErrorsProto.BadProcess)
  return target;
}

size_t AppErrorsProto_BadProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppErrorsProto.BadProcess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.AppErrorsProto.BadProcess.Entry entries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // optional string process_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppErrorsProto_BadProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppErrorsProto.BadProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const AppErrorsProto_BadProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppErrorsProto_BadProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppErrorsProto.BadProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppErrorsProto.BadProcess)
    MergeFrom(*source);
  }
}

void AppErrorsProto_BadProcess::MergeFrom(const AppErrorsProto_BadProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppErrorsProto.BadProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_process_name()) {
    _has_bits_[0] |= 0x00000001u;
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
}

void AppErrorsProto_BadProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppErrorsProto.BadProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppErrorsProto_BadProcess::CopyFrom(const AppErrorsProto_BadProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppErrorsProto.BadProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppErrorsProto_BadProcess::IsInitialized() const {
  return true;
}

void AppErrorsProto_BadProcess::InternalSwap(AppErrorsProto_BadProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppErrorsProto_BadProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppErrorsProto::InitAsDefaultInstance() {
}
class AppErrorsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppErrorsProto>()._has_bits_);
  static void set_has_now_uptime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppErrorsProto::AppErrorsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppErrorsProto)
}
AppErrorsProto::AppErrorsProto(const AppErrorsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      process_crash_times_(from.process_crash_times_),
      bad_processes_(from.bad_processes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  now_uptime_ms_ = from.now_uptime_ms_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppErrorsProto)
}

void AppErrorsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  now_uptime_ms_ = PROTOBUF_LONGLONG(0);
}

AppErrorsProto::~AppErrorsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppErrorsProto)
  SharedDtor();
}

void AppErrorsProto::SharedDtor() {
}

void AppErrorsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppErrorsProto& AppErrorsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppErrorsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppErrorsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppErrorsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_crash_times_.Clear();
  bad_processes_.Clear();
  now_uptime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppErrorsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 now_uptime_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_now_uptime_ms(&has_bits);
          now_uptime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime process_crash_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_process_crash_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppErrorsProto.BadProcess bad_processes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bad_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppErrorsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppErrorsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 now_uptime_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_now_uptime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_uptime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime process_crash_times = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_process_crash_times()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppErrorsProto.BadProcess bad_processes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bad_processes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppErrorsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppErrorsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppErrorsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppErrorsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 now_uptime_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->now_uptime_ms(), output);
  }

  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime process_crash_times = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->process_crash_times_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->process_crash_times(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.am.AppErrorsProto.BadProcess bad_processes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bad_processes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->bad_processes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppErrorsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppErrorsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppErrorsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 now_uptime_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->now_uptime_ms(), target);
  }

  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime process_crash_times = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->process_crash_times_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->process_crash_times(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.am.AppErrorsProto.BadProcess bad_processes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bad_processes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->bad_processes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppErrorsProto)
  return target;
}

size_t AppErrorsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppErrorsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime process_crash_times = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->process_crash_times_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->process_crash_times(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.am.AppErrorsProto.BadProcess bad_processes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->bad_processes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bad_processes(static_cast<int>(i)));
    }
  }

  // optional int64 now_uptime_ms = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->now_uptime_ms());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppErrorsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppErrorsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AppErrorsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppErrorsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppErrorsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppErrorsProto)
    MergeFrom(*source);
  }
}

void AppErrorsProto::MergeFrom(const AppErrorsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppErrorsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_crash_times_.MergeFrom(from.process_crash_times_);
  bad_processes_.MergeFrom(from.bad_processes_);
  if (from.has_now_uptime_ms()) {
    set_now_uptime_ms(from.now_uptime_ms());
  }
}

void AppErrorsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppErrorsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppErrorsProto::CopyFrom(const AppErrorsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppErrorsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppErrorsProto::IsInitialized() const {
  return true;
}

void AppErrorsProto::InternalSwap(AppErrorsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&process_crash_times_)->InternalSwap(CastToBase(&other->process_crash_times_));
  CastToBase(&bad_processes_)->InternalSwap(CastToBase(&other->bad_processes_));
  swap(now_uptime_ms_, other->now_uptime_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppErrorsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserStateProto::InitAsDefaultInstance() {
}
class UserStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UserStateProto>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_switching(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserStateProto::UserStateProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.UserStateProto)
}
UserStateProto::UserStateProto(const UserStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&switching_) -
    reinterpret_cast<char*>(&state_)) + sizeof(switching_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.UserStateProto)
}

void UserStateProto::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&switching_) -
      reinterpret_cast<char*>(&state_)) + sizeof(switching_));
}

UserStateProto::~UserStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.UserStateProto)
  SharedDtor();
}

void UserStateProto::SharedDtor() {
}

void UserStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserStateProto& UserStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void UserStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&switching_) -
        reinterpret_cast<char*>(&state_)) + sizeof(switching_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.am.UserStateProto.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::am::UserStateProto_State_IsValid(val))) {
            set_state(static_cast<::com::android::server::am::UserStateProto_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool switching = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_switching(&has_bits);
          switching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.UserStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.am.UserStateProto.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::am::UserStateProto_State_IsValid(value)) {
            set_state(static_cast< ::com::android::server::am::UserStateProto_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool switching = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_switching(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &switching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.UserStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.UserStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.UserStateProto.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional bool switching = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->switching(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.UserStateProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserStateProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.am.UserStateProto.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional bool switching = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->switching(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.UserStateProto)
  return target;
}

size_t UserStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.UserStateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.am.UserStateProto.State state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bool switching = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStateProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.UserStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStateProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserStateProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.UserStateProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.UserStateProto)
    MergeFrom(*source);
  }
}

void UserStateProto::MergeFrom(const UserStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.UserStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000002u) {
      switching_ = from.switching_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserStateProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.UserStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStateProto::CopyFrom(const UserStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.UserStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStateProto::IsInitialized() const {
  return true;
}

void UserStateProto::InternalSwap(UserStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
  swap(switching_, other->switching_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserStateProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserControllerProto_User::InitAsDefaultInstance() {
  ::com::android::server::am::_UserControllerProto_User_default_instance_._instance.get_mutable()->state_ = const_cast< ::com::android::server::am::UserStateProto*>(
      ::com::android::server::am::UserStateProto::internal_default_instance());
}
class UserControllerProto_User::_Internal {
 public:
  using HasBits = decltype(std::declval<UserControllerProto_User>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::am::UserStateProto& state(const UserControllerProto_User* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::am::UserStateProto&
UserControllerProto_User::_Internal::state(const UserControllerProto_User* msg) {
  return *msg->state_;
}
UserControllerProto_User::UserControllerProto_User()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.UserControllerProto.User)
}
UserControllerProto_User::UserControllerProto_User(const UserControllerProto_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::com::android::server::am::UserStateProto(*from.state_);
  } else {
    state_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.UserControllerProto.User)
}

void UserControllerProto_User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&state_)) + sizeof(id_));
}

UserControllerProto_User::~UserControllerProto_User() {
  // @@protoc_insertion_point(destructor:com.android.server.am.UserControllerProto.User)
  SharedDtor();
}

void UserControllerProto_User::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void UserControllerProto_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserControllerProto_User& UserControllerProto_User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserControllerProto_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void UserControllerProto_User::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.UserControllerProto.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserControllerProto_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.am.UserStateProto state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserControllerProto_User::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.UserControllerProto.User)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.am.UserStateProto state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.UserControllerProto.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.UserControllerProto.User)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserControllerProto_User::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.UserControllerProto.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .com.android.server.am.UserStateProto state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::state(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.UserControllerProto.User)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserControllerProto_User::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.UserControllerProto.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .com.android.server.am.UserStateProto state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::state(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.UserControllerProto.User)
  return target;
}

size_t UserControllerProto_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.UserControllerProto.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.am.UserStateProto state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserControllerProto_User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.UserControllerProto.User)
  GOOGLE_DCHECK_NE(&from, this);
  const UserControllerProto_User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserControllerProto_User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.UserControllerProto.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.UserControllerProto.User)
    MergeFrom(*source);
  }
}

void UserControllerProto_User::MergeFrom(const UserControllerProto_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.UserControllerProto.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::com::android::server::am::UserStateProto::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserControllerProto_User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.UserControllerProto.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserControllerProto_User::CopyFrom(const UserControllerProto_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.UserControllerProto.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserControllerProto_User::IsInitialized() const {
  return true;
}

void UserControllerProto_User::InternalSwap(UserControllerProto_User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserControllerProto_User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserControllerProto_UserProfile::InitAsDefaultInstance() {
}
class UserControllerProto_UserProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<UserControllerProto_UserProfile>()._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserControllerProto_UserProfile::UserControllerProto_UserProfile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.UserControllerProto.UserProfile)
}
UserControllerProto_UserProfile::UserControllerProto_UserProfile(const UserControllerProto_UserProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_, &from.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_) -
    reinterpret_cast<char*>(&user_)) + sizeof(profile_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.UserControllerProto.UserProfile)
}

void UserControllerProto_UserProfile::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profile_) -
      reinterpret_cast<char*>(&user_)) + sizeof(profile_));
}

UserControllerProto_UserProfile::~UserControllerProto_UserProfile() {
  // @@protoc_insertion_point(destructor:com.android.server.am.UserControllerProto.UserProfile)
  SharedDtor();
}

void UserControllerProto_UserProfile::SharedDtor() {
}

void UserControllerProto_UserProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserControllerProto_UserProfile& UserControllerProto_UserProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserControllerProto_UserProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void UserControllerProto_UserProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.UserControllerProto.UserProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&profile_) -
        reinterpret_cast<char*>(&user_)) + sizeof(profile_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserControllerProto_UserProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user(&has_bits);
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_profile(&has_bits);
          profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserControllerProto_UserProfile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.UserControllerProto.UserProfile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 profile = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_profile(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &profile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.UserControllerProto.UserProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.UserControllerProto.UserProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserControllerProto_UserProfile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.UserControllerProto.UserProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user(), output);
  }

  // optional int32 profile = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->profile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.UserControllerProto.UserProfile)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserControllerProto_UserProfile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.UserControllerProto.UserProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user(), target);
  }

  // optional int32 profile = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->profile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.UserControllerProto.UserProfile)
  return target;
}

size_t UserControllerProto_UserProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.UserControllerProto.UserProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 user = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user());
    }

    // optional int32 profile = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->profile());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserControllerProto_UserProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.UserControllerProto.UserProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const UserControllerProto_UserProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserControllerProto_UserProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.UserControllerProto.UserProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.UserControllerProto.UserProfile)
    MergeFrom(*source);
  }
}

void UserControllerProto_UserProfile::MergeFrom(const UserControllerProto_UserProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.UserControllerProto.UserProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_ = from.user_;
    }
    if (cached_has_bits & 0x00000002u) {
      profile_ = from.profile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserControllerProto_UserProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.UserControllerProto.UserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserControllerProto_UserProfile::CopyFrom(const UserControllerProto_UserProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.UserControllerProto.UserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserControllerProto_UserProfile::IsInitialized() const {
  return true;
}

void UserControllerProto_UserProfile::InternalSwap(UserControllerProto_UserProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_, other->user_);
  swap(profile_, other->profile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserControllerProto_UserProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserControllerProto::InitAsDefaultInstance() {
}
class UserControllerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UserControllerProto>()._has_bits_);
};

UserControllerProto::UserControllerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.UserControllerProto)
}
UserControllerProto::UserControllerProto(const UserControllerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      started_users_(from.started_users_),
      started_user_array_(from.started_user_array_),
      user_lru_(from.user_lru_),
      user_profile_group_ids_(from.user_profile_group_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.UserControllerProto)
}

void UserControllerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
}

UserControllerProto::~UserControllerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.UserControllerProto)
  SharedDtor();
}

void UserControllerProto::SharedDtor() {
}

void UserControllerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserControllerProto& UserControllerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void UserControllerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.UserControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  started_users_.Clear();
  started_user_array_.Clear();
  user_lru_.Clear();
  user_profile_group_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserControllerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.am.UserControllerProto.User started_users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_started_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated int32 started_user_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_started_user_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_started_user_array(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 user_lru = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_user_lru(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_user_lru(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.UserControllerProto.UserProfile user_profile_group_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_profile_group_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserControllerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.UserControllerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.am.UserControllerProto.User started_users = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_started_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 started_user_array = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_started_user_array())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_started_user_array())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 user_lru = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_user_lru())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_lru())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.UserControllerProto.UserProfile user_profile_group_ids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_profile_group_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.UserControllerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.UserControllerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserControllerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.UserControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.UserControllerProto.User started_users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->started_users_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->started_users(static_cast<int>(i)),
      output);
  }

  // repeated int32 started_user_array = 2;
  for (int i = 0, n = this->started_user_array_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->started_user_array(i), output);
  }

  // repeated int32 user_lru = 3;
  for (int i = 0, n = this->user_lru_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->user_lru(i), output);
  }

  // repeated .com.android.server.am.UserControllerProto.UserProfile user_profile_group_ids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_profile_group_ids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->user_profile_group_ids(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.UserControllerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserControllerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.UserControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.am.UserControllerProto.User started_users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->started_users_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->started_users(static_cast<int>(i)), target);
  }

  // repeated int32 started_user_array = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(2, this->started_user_array_, target);

  // repeated int32 user_lru = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(3, this->user_lru_, target);

  // repeated .com.android.server.am.UserControllerProto.UserProfile user_profile_group_ids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_profile_group_ids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->user_profile_group_ids(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.UserControllerProto)
  return target;
}

size_t UserControllerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.UserControllerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.UserControllerProto.User started_users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->started_users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->started_users(static_cast<int>(i)));
    }
  }

  // repeated int32 started_user_array = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->started_user_array_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->started_user_array_size());
    total_size += data_size;
  }

  // repeated int32 user_lru = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->user_lru_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->user_lru_size());
    total_size += data_size;
  }

  // repeated .com.android.server.am.UserControllerProto.UserProfile user_profile_group_ids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->user_profile_group_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_profile_group_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserControllerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.UserControllerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UserControllerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserControllerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.UserControllerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.UserControllerProto)
    MergeFrom(*source);
  }
}

void UserControllerProto::MergeFrom(const UserControllerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.UserControllerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  started_users_.MergeFrom(from.started_users_);
  started_user_array_.MergeFrom(from.started_user_array_);
  user_lru_.MergeFrom(from.user_lru_);
  user_profile_group_ids_.MergeFrom(from.user_profile_group_ids_);
}

void UserControllerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.UserControllerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserControllerProto::CopyFrom(const UserControllerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.UserControllerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserControllerProto::IsInitialized() const {
  return true;
}

void UserControllerProto::InternalSwap(UserControllerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&started_users_)->InternalSwap(CastToBase(&other->started_users_));
  started_user_array_.InternalSwap(&other->started_user_array_);
  user_lru_.InternalSwap(&other->user_lru_);
  CastToBase(&user_profile_group_ids_)->InternalSwap(CastToBase(&other->user_profile_group_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserControllerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppTimeTrackerProto_PackageTime::InitAsDefaultInstance() {
}
class AppTimeTrackerProto_PackageTime::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTimeTrackerProto_PackageTime>()._has_bits_);
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppTimeTrackerProto_PackageTime::AppTimeTrackerProto_PackageTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppTimeTrackerProto.PackageTime)
}
AppTimeTrackerProto_PackageTime::AppTimeTrackerProto_PackageTime(const AppTimeTrackerProto_PackageTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  duration_ms_ = from.duration_ms_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppTimeTrackerProto.PackageTime)
}

void AppTimeTrackerProto_PackageTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ms_ = PROTOBUF_LONGLONG(0);
}

AppTimeTrackerProto_PackageTime::~AppTimeTrackerProto_PackageTime() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppTimeTrackerProto.PackageTime)
  SharedDtor();
}

void AppTimeTrackerProto_PackageTime::SharedDtor() {
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppTimeTrackerProto_PackageTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppTimeTrackerProto_PackageTime& AppTimeTrackerProto_PackageTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppTimeTrackerProto_PackageTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppTimeTrackerProto_PackageTime::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_.ClearNonDefaultToEmptyNoArena();
  }
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppTimeTrackerProto_PackageTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package(), ptr, ctx, "com.android.server.am.AppTimeTrackerProto.PackageTime.package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppTimeTrackerProto_PackageTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package().data(), static_cast<int>(this->package().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppTimeTrackerProto.PackageTime.package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppTimeTrackerProto.PackageTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppTimeTrackerProto.PackageTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppTimeTrackerProto_PackageTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppTimeTrackerProto.PackageTime.package");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package(), output);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->duration_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppTimeTrackerProto.PackageTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTimeTrackerProto_PackageTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppTimeTrackerProto.PackageTime.package");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->package(), target);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->duration_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppTimeTrackerProto.PackageTime)
  return target;
}

size_t AppTimeTrackerProto_PackageTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional int64 duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppTimeTrackerProto_PackageTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  GOOGLE_DCHECK_NE(&from, this);
  const AppTimeTrackerProto_PackageTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppTimeTrackerProto_PackageTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppTimeTrackerProto.PackageTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppTimeTrackerProto.PackageTime)
    MergeFrom(*source);
  }
}

void AppTimeTrackerProto_PackageTime::MergeFrom(const AppTimeTrackerProto_PackageTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppTimeTrackerProto_PackageTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppTimeTrackerProto_PackageTime::CopyFrom(const AppTimeTrackerProto_PackageTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppTimeTrackerProto.PackageTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTimeTrackerProto_PackageTime::IsInitialized() const {
  return true;
}

void AppTimeTrackerProto_PackageTime::InternalSwap(AppTimeTrackerProto_PackageTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_ms_, other->duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTimeTrackerProto_PackageTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppTimeTrackerProto::InitAsDefaultInstance() {
  ::com::android::server::am::_AppTimeTrackerProto_default_instance_._instance.get_mutable()->started_time_ = const_cast< ::android::util::Duration*>(
      ::android::util::Duration::internal_default_instance());
}
class AppTimeTrackerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTimeTrackerProto>()._has_bits_);
  static void set_has_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::util::Duration& started_time(const AppTimeTrackerProto* msg);
  static void set_has_started_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_started_package(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::util::Duration&
AppTimeTrackerProto::_Internal::started_time(const AppTimeTrackerProto* msg) {
  return *msg->started_time_;
}
void AppTimeTrackerProto::clear_started_time() {
  if (started_time_ != nullptr) started_time_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AppTimeTrackerProto::AppTimeTrackerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppTimeTrackerProto)
}
AppTimeTrackerProto::AppTimeTrackerProto(const AppTimeTrackerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      package_times_(from.package_times_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_receiver()) {
    receiver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
  started_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_started_package()) {
    started_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.started_package_);
  }
  if (from.has_started_time()) {
    started_time_ = new ::android::util::Duration(*from.started_time_);
  } else {
    started_time_ = nullptr;
  }
  total_duration_ms_ = from.total_duration_ms_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppTimeTrackerProto)
}

void AppTimeTrackerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&started_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_duration_ms_) -
      reinterpret_cast<char*>(&started_time_)) + sizeof(total_duration_ms_));
}

AppTimeTrackerProto::~AppTimeTrackerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppTimeTrackerProto)
  SharedDtor();
}

void AppTimeTrackerProto::SharedDtor() {
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete started_time_;
}

void AppTimeTrackerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppTimeTrackerProto& AppTimeTrackerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppTimeTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppTimeTrackerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppTimeTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      receiver_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      started_package_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(started_time_ != nullptr);
      started_time_->Clear();
    }
  }
  total_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppTimeTrackerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_receiver(), ptr, ctx, "com.android.server.am.AppTimeTrackerProto.receiver");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_duration_ms(&has_bits);
          total_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppTimeTrackerProto.PackageTime package_times = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_package_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional .android.util.Duration started_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_started_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string started_package = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_started_package(), ptr, ctx, "com.android.server.am.AppTimeTrackerProto.started_package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppTimeTrackerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppTimeTrackerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string receiver = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiver().data(), static_cast<int>(this->receiver().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppTimeTrackerProto.receiver");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppTimeTrackerProto.PackageTime package_times = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_package_times()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.Duration started_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_started_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string started_package = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_started_package()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->started_package().data(), static_cast<int>(this->started_package().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppTimeTrackerProto.started_package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppTimeTrackerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppTimeTrackerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppTimeTrackerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppTimeTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string receiver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver().data(), static_cast<int>(this->receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppTimeTrackerProto.receiver");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->receiver(), output);
  }

  // optional int64 total_duration_ms = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->total_duration_ms(), output);
  }

  // repeated .com.android.server.am.AppTimeTrackerProto.PackageTime package_times = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_times_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->package_times(static_cast<int>(i)),
      output);
  }

  // optional .android.util.Duration started_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::started_time(this), output);
  }

  // optional string started_package = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->started_package().data(), static_cast<int>(this->started_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppTimeTrackerProto.started_package");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->started_package(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppTimeTrackerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTimeTrackerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppTimeTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string receiver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver().data(), static_cast<int>(this->receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppTimeTrackerProto.receiver");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->receiver(), target);
  }

  // optional int64 total_duration_ms = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->total_duration_ms(), target);
  }

  // repeated .com.android.server.am.AppTimeTrackerProto.PackageTime package_times = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_times_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->package_times(static_cast<int>(i)), target);
  }

  // optional .android.util.Duration started_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::started_time(this), target);
  }

  // optional string started_package = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->started_package().data(), static_cast<int>(this->started_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppTimeTrackerProto.started_package");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->started_package(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppTimeTrackerProto)
  return target;
}

size_t AppTimeTrackerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppTimeTrackerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.AppTimeTrackerProto.PackageTime package_times = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->package_times_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->package_times(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string receiver = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->receiver());
    }

    // optional string started_package = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->started_package());
    }

    // optional .android.util.Duration started_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *started_time_);
    }

    // optional int64 total_duration_ms = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppTimeTrackerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppTimeTrackerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AppTimeTrackerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppTimeTrackerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppTimeTrackerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppTimeTrackerProto)
    MergeFrom(*source);
  }
}

void AppTimeTrackerProto::MergeFrom(const AppTimeTrackerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppTimeTrackerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_times_.MergeFrom(from.package_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      receiver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      started_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.started_package_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_started_time()->::android::util::Duration::MergeFrom(from.started_time());
    }
    if (cached_has_bits & 0x00000008u) {
      total_duration_ms_ = from.total_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppTimeTrackerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppTimeTrackerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppTimeTrackerProto::CopyFrom(const AppTimeTrackerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppTimeTrackerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTimeTrackerProto::IsInitialized() const {
  return true;
}

void AppTimeTrackerProto::InternalSwap(AppTimeTrackerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&package_times_)->InternalSwap(CastToBase(&other->package_times_));
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  started_package_.Swap(&other->started_package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(started_time_, other->started_time_);
  swap(total_duration_ms_, other->total_duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTimeTrackerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppsExitInfoProto_Package_User::InitAsDefaultInstance() {
}
class AppsExitInfoProto_Package_User::_Internal {
 public:
  using HasBits = decltype(std::declval<AppsExitInfoProto_Package_User>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void AppsExitInfoProto_Package_User::clear_app_exit_info() {
  app_exit_info_.Clear();
}
AppsExitInfoProto_Package_User::AppsExitInfoProto_Package_User()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppsExitInfoProto.Package.User)
}
AppsExitInfoProto_Package_User::AppsExitInfoProto_Package_User(const AppsExitInfoProto_Package_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      app_exit_info_(from.app_exit_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppsExitInfoProto.Package.User)
}

void AppsExitInfoProto_Package_User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  uid_ = 0;
}

AppsExitInfoProto_Package_User::~AppsExitInfoProto_Package_User() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppsExitInfoProto.Package.User)
  SharedDtor();
}

void AppsExitInfoProto_Package_User::SharedDtor() {
}

void AppsExitInfoProto_Package_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppsExitInfoProto_Package_User& AppsExitInfoProto_Package_User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppsExitInfoProto_Package_User_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppsExitInfoProto_Package_User::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppsExitInfoProto.Package.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_exit_info_.Clear();
  uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppsExitInfoProto_Package_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.app.ApplicationExitInfoProto app_exit_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_app_exit_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppsExitInfoProto_Package_User::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppsExitInfoProto.Package.User)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.app.ApplicationExitInfoProto app_exit_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_app_exit_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppsExitInfoProto.Package.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppsExitInfoProto.Package.User)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppsExitInfoProto_Package_User::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppsExitInfoProto.Package.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // repeated .android.app.ApplicationExitInfoProto app_exit_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_exit_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->app_exit_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppsExitInfoProto.Package.User)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppsExitInfoProto_Package_User::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppsExitInfoProto.Package.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // repeated .android.app.ApplicationExitInfoProto app_exit_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_exit_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->app_exit_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppsExitInfoProto.Package.User)
  return target;
}

size_t AppsExitInfoProto_Package_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppsExitInfoProto.Package.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.app.ApplicationExitInfoProto app_exit_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->app_exit_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->app_exit_info(static_cast<int>(i)));
    }
  }

  // optional int32 uid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppsExitInfoProto_Package_User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppsExitInfoProto.Package.User)
  GOOGLE_DCHECK_NE(&from, this);
  const AppsExitInfoProto_Package_User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppsExitInfoProto_Package_User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppsExitInfoProto.Package.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppsExitInfoProto.Package.User)
    MergeFrom(*source);
  }
}

void AppsExitInfoProto_Package_User::MergeFrom(const AppsExitInfoProto_Package_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppsExitInfoProto.Package.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_exit_info_.MergeFrom(from.app_exit_info_);
  if (from.has_uid()) {
    set_uid(from.uid());
  }
}

void AppsExitInfoProto_Package_User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppsExitInfoProto.Package.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppsExitInfoProto_Package_User::CopyFrom(const AppsExitInfoProto_Package_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppsExitInfoProto.Package.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppsExitInfoProto_Package_User::IsInitialized() const {
  return true;
}

void AppsExitInfoProto_Package_User::InternalSwap(AppsExitInfoProto_Package_User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&app_exit_info_)->InternalSwap(CastToBase(&other->app_exit_info_));
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppsExitInfoProto_Package_User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppsExitInfoProto_Package::InitAsDefaultInstance() {
}
class AppsExitInfoProto_Package::_Internal {
 public:
  using HasBits = decltype(std::declval<AppsExitInfoProto_Package>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppsExitInfoProto_Package::AppsExitInfoProto_Package()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppsExitInfoProto.Package)
}
AppsExitInfoProto_Package::AppsExitInfoProto_Package(const AppsExitInfoProto_Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppsExitInfoProto.Package)
}

void AppsExitInfoProto_Package::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppsExitInfoProto_Package::~AppsExitInfoProto_Package() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppsExitInfoProto.Package)
  SharedDtor();
}

void AppsExitInfoProto_Package::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppsExitInfoProto_Package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppsExitInfoProto_Package& AppsExitInfoProto_Package::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppsExitInfoProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppsExitInfoProto_Package::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppsExitInfoProto.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppsExitInfoProto_Package::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package_name(), ptr, ctx, "com.android.server.am.AppsExitInfoProto.Package.package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppsExitInfoProto.Package.User users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppsExitInfoProto_Package::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppsExitInfoProto.Package)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), static_cast<int>(this->package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.am.AppsExitInfoProto.Package.package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppsExitInfoProto.Package.User users = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppsExitInfoProto.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppsExitInfoProto.Package)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppsExitInfoProto_Package::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppsExitInfoProto.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppsExitInfoProto.Package.package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package_name(), output);
  }

  // repeated .com.android.server.am.AppsExitInfoProto.Package.User users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppsExitInfoProto.Package)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppsExitInfoProto_Package::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppsExitInfoProto.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.am.AppsExitInfoProto.Package.package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->package_name(), target);
  }

  // repeated .com.android.server.am.AppsExitInfoProto.Package.User users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->users(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppsExitInfoProto.Package)
  return target;
}

size_t AppsExitInfoProto_Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppsExitInfoProto.Package)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.AppsExitInfoProto.Package.User users = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  // optional string package_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->package_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppsExitInfoProto_Package::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppsExitInfoProto.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const AppsExitInfoProto_Package* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppsExitInfoProto_Package>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppsExitInfoProto.Package)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppsExitInfoProto.Package)
    MergeFrom(*source);
  }
}

void AppsExitInfoProto_Package::MergeFrom(const AppsExitInfoProto_Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppsExitInfoProto.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_package_name()) {
    _has_bits_[0] |= 0x00000001u;
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
}

void AppsExitInfoProto_Package::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppsExitInfoProto.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppsExitInfoProto_Package::CopyFrom(const AppsExitInfoProto_Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppsExitInfoProto.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppsExitInfoProto_Package::IsInitialized() const {
  return true;
}

void AppsExitInfoProto_Package::InternalSwap(AppsExitInfoProto_Package* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppsExitInfoProto_Package::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppsExitInfoProto::InitAsDefaultInstance() {
}
class AppsExitInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppsExitInfoProto>()._has_bits_);
  static void set_has_last_update_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppsExitInfoProto::AppsExitInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.am.AppsExitInfoProto)
}
AppsExitInfoProto::AppsExitInfoProto(const AppsExitInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packages_(from.packages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_update_timestamp_ = from.last_update_timestamp_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.am.AppsExitInfoProto)
}

void AppsExitInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppsExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  last_update_timestamp_ = PROTOBUF_LONGLONG(0);
}

AppsExitInfoProto::~AppsExitInfoProto() {
  // @@protoc_insertion_point(destructor:com.android.server.am.AppsExitInfoProto)
  SharedDtor();
}

void AppsExitInfoProto::SharedDtor() {
}

void AppsExitInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppsExitInfoProto& AppsExitInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppsExitInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AppsExitInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.am.AppsExitInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  last_update_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppsExitInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 last_update_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_update_timestamp(&has_bits);
          last_update_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.am.AppsExitInfoProto.Package packages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppsExitInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.am.AppsExitInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_update_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_update_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.am.AppsExitInfoProto.Package packages = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.am.AppsExitInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.am.AppsExitInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppsExitInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.am.AppsExitInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_update_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_update_timestamp(), output);
  }

  // repeated .com.android.server.am.AppsExitInfoProto.Package packages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->packages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.am.AppsExitInfoProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppsExitInfoProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.am.AppsExitInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_update_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->last_update_timestamp(), target);
  }

  // repeated .com.android.server.am.AppsExitInfoProto.Package packages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->packages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.am.AppsExitInfoProto)
  return target;
}

size_t AppsExitInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.am.AppsExitInfoProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.am.AppsExitInfoProto.Package packages = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->packages(static_cast<int>(i)));
    }
  }

  // optional int64 last_update_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_update_timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppsExitInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.am.AppsExitInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AppsExitInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppsExitInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.am.AppsExitInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.am.AppsExitInfoProto)
    MergeFrom(*source);
  }
}

void AppsExitInfoProto::MergeFrom(const AppsExitInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.am.AppsExitInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  if (from.has_last_update_timestamp()) {
    set_last_update_timestamp(from.last_update_timestamp());
  }
}

void AppsExitInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.am.AppsExitInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppsExitInfoProto::CopyFrom(const AppsExitInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.am.AppsExitInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppsExitInfoProto::IsInitialized() const {
  return true;
}

void AppsExitInfoProto::InternalSwap(AppsExitInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&packages_)->InternalSwap(CastToBase(&other->packages_));
  swap(last_update_timestamp_, other->last_update_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppsExitInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace am
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ReceiverListProto* Arena::CreateMaybeMessage< ::com::android::server::am::ReceiverListProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ReceiverListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ProcessRecordProto* Arena::CreateMaybeMessage< ::com::android::server::am::ProcessRecordProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ProcessRecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::BroadcastRecordProto* Arena::CreateMaybeMessage< ::com::android::server::am::BroadcastRecordProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::BroadcastRecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::BroadcastFilterProto* Arena::CreateMaybeMessage< ::com::android::server::am::BroadcastFilterProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::BroadcastFilterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::BroadcastQueueProto_BroadcastSummary* Arena::CreateMaybeMessage< ::com::android::server::am::BroadcastQueueProto_BroadcastSummary >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::BroadcastQueueProto_BroadcastSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::BroadcastQueueProto* Arena::CreateMaybeMessage< ::com::android::server::am::BroadcastQueueProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::BroadcastQueueProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_ProcessMemory* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_ProcessMemory >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_ProcessMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_AppData* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_AppData >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_AppData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto_MemItem* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto_MemItem >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto_MemItem >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::MemInfoDumpProto* Arena::CreateMaybeMessage< ::com::android::server::am::MemInfoDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::MemInfoDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::StickyBroadcastProto_StickyAction* Arena::CreateMaybeMessage< ::com::android::server::am::StickyBroadcastProto_StickyAction >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::StickyBroadcastProto_StickyAction >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::StickyBroadcastProto* Arena::CreateMaybeMessage< ::com::android::server::am::StickyBroadcastProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::StickyBroadcastProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpServicesProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpServicesProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpServicesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActiveServicesProto_ServicesByUser* Arena::CreateMaybeMessage< ::com::android::server::am::ActiveServicesProto_ServicesByUser >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActiveServicesProto_ServicesByUser >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActiveServicesProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActiveServicesProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActiveServicesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::GrantUriProto* Arena::CreateMaybeMessage< ::com::android::server::am::GrantUriProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::GrantUriProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::NeededUriGrantsProto* Arena::CreateMaybeMessage< ::com::android::server::am::NeededUriGrantsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::NeededUriGrantsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::UriPermissionOwnerProto* Arena::CreateMaybeMessage< ::com::android::server::am::UriPermissionOwnerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::UriPermissionOwnerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ServiceRecordProto_AppInfo* Arena::CreateMaybeMessage< ::com::android::server::am::ServiceRecordProto_AppInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ServiceRecordProto_AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ServiceRecordProto_Foreground* Arena::CreateMaybeMessage< ::com::android::server::am::ServiceRecordProto_Foreground >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ServiceRecordProto_Foreground >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ServiceRecordProto_Start* Arena::CreateMaybeMessage< ::com::android::server::am::ServiceRecordProto_Start >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ServiceRecordProto_Start >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ServiceRecordProto_ExecuteNesting* Arena::CreateMaybeMessage< ::com::android::server::am::ServiceRecordProto_ExecuteNesting >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ServiceRecordProto_ExecuteNesting >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ServiceRecordProto_Crash* Arena::CreateMaybeMessage< ::com::android::server::am::ServiceRecordProto_Crash >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ServiceRecordProto_Crash >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ServiceRecordProto_StartItem* Arena::CreateMaybeMessage< ::com::android::server::am::ServiceRecordProto_StartItem >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ServiceRecordProto_StartItem >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ServiceRecordProto* Arena::CreateMaybeMessage< ::com::android::server::am::ServiceRecordProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ServiceRecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ConnectionRecordProto* Arena::CreateMaybeMessage< ::com::android::server::am::ConnectionRecordProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ConnectionRecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppBindRecordProto* Arena::CreateMaybeMessage< ::com::android::server::am::AppBindRecordProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppBindRecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::IntentBindRecordProto* Arena::CreateMaybeMessage< ::com::android::server::am::IntentBindRecordProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::IntentBindRecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ActiveInstrumentationProto* Arena::CreateMaybeMessage< ::com::android::server::am::ActiveInstrumentationProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ActiveInstrumentationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::UidRecordProto_ProcStateSequence* Arena::CreateMaybeMessage< ::com::android::server::am::UidRecordProto_ProcStateSequence >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::UidRecordProto_ProcStateSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::UidRecordProto* Arena::CreateMaybeMessage< ::com::android::server::am::UidRecordProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::UidRecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ImportanceTokenProto* Arena::CreateMaybeMessage< ::com::android::server::am::ImportanceTokenProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ImportanceTokenProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::VrControllerProto* Arena::CreateMaybeMessage< ::com::android::server::am::VrControllerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::VrControllerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* Arena::CreateMaybeMessage< ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ProcessOomProto_Detail* Arena::CreateMaybeMessage< ::com::android::server::am::ProcessOomProto_Detail >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ProcessOomProto_Detail >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ProcessOomProto* Arena::CreateMaybeMessage< ::com::android::server::am::ProcessOomProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ProcessOomProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::ProcessToGcProto* Arena::CreateMaybeMessage< ::com::android::server::am::ProcessToGcProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::ProcessToGcProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry* Arena::CreateMaybeMessage< ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppErrorsProto_ProcessCrashTime* Arena::CreateMaybeMessage< ::com::android::server::am::AppErrorsProto_ProcessCrashTime >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppErrorsProto_ProcessCrashTime >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppErrorsProto_BadProcess_Entry* Arena::CreateMaybeMessage< ::com::android::server::am::AppErrorsProto_BadProcess_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppErrorsProto_BadProcess_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppErrorsProto_BadProcess* Arena::CreateMaybeMessage< ::com::android::server::am::AppErrorsProto_BadProcess >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppErrorsProto_BadProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppErrorsProto* Arena::CreateMaybeMessage< ::com::android::server::am::AppErrorsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppErrorsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::UserStateProto* Arena::CreateMaybeMessage< ::com::android::server::am::UserStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::UserStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::UserControllerProto_User* Arena::CreateMaybeMessage< ::com::android::server::am::UserControllerProto_User >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::UserControllerProto_User >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::UserControllerProto_UserProfile* Arena::CreateMaybeMessage< ::com::android::server::am::UserControllerProto_UserProfile >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::UserControllerProto_UserProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::UserControllerProto* Arena::CreateMaybeMessage< ::com::android::server::am::UserControllerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::UserControllerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppTimeTrackerProto_PackageTime* Arena::CreateMaybeMessage< ::com::android::server::am::AppTimeTrackerProto_PackageTime >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppTimeTrackerProto_PackageTime >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppTimeTrackerProto* Arena::CreateMaybeMessage< ::com::android::server::am::AppTimeTrackerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppTimeTrackerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppsExitInfoProto_Package_User* Arena::CreateMaybeMessage< ::com::android::server::am::AppsExitInfoProto_Package_User >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppsExitInfoProto_Package_User >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppsExitInfoProto_Package* Arena::CreateMaybeMessage< ::com::android::server::am::AppsExitInfoProto_Package >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppsExitInfoProto_Package >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::am::AppsExitInfoProto* Arena::CreateMaybeMessage< ::com::android::server::am::AppsExitInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::am::AppsExitInfoProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
