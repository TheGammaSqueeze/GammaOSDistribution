// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/tls/enums.proto

#include "frameworks/proto_logging/stats/enums/stats/tls/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace tls {
}  // namespace tls
}  // namespace stats
}  // namespace android
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:frameworks/proto_logging/stats/enums/s"
  "tats/tls/enums.proto\022\021android.stats.tls*"
  "_\n\010Protocol\022\021\n\rUNKNOWN_PROTO\020\000\022\n\n\006SSL_V3"
  "\020\001\022\n\n\006TLS_V1\020\002\022\014\n\010TLS_V1_1\020\003\022\014\n\010TLS_V1_2"
  "\020\004\022\014\n\010TLS_V1_3\020\005*\320\007\n\013CipherSuite\022\030\n\024UNKN"
  "OWN_CIPHER_SUITE\020\000\022*\n$TLS_ECDHE_ECDSA_WI"
  "TH_AES_256_CBC_SHA\020\212\200\003\022(\n\"TLS_ECDHE_RSA_"
  "WITH_AES_256_CBC_SHA\020\224\200\003\022 \n\034TLS_RSA_WITH"
  "_AES_256_CBC_SHA\0205\022*\n$TLS_ECDHE_ECDSA_WI"
  "TH_AES_128_CBC_SHA\020\211\200\003\022(\n\"TLS_ECDHE_RSA_"
  "WITH_AES_128_CBC_SHA\020\223\200\003\022 \n\034TLS_RSA_WITH"
  "_AES_128_CBC_SHA\020/\022!\n\035TLS_RSA_WITH_3DES_"
  "EDE_CBC_SHA\020\n\022$\n\037TLS_RSA_WITH_AES_128_GC"
  "M_SHA256\020\234\001\022$\n\037TLS_RSA_WITH_AES_256_GCM_"
  "SHA384\020\235\001\022+\n%TLS_ECDHE_RSA_WITH_AES_128_"
  "GCM_SHA256\020\257\200\003\022+\n%TLS_ECDHE_RSA_WITH_AES"
  "_256_GCM_SHA384\020\260\200\003\022-\n\'TLS_ECDHE_ECDSA_W"
  "ITH_AES_128_GCM_SHA256\020\253\200\003\022-\n\'TLS_ECDHE_"
  "ECDSA_WITH_AES_256_GCM_SHA384\020\254\200\003\0223\n-TLS"
  "_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA2"
  "56\020\251\231\003\0221\n+TLS_ECDHE_RSA_WITH_CHACHA20_PO"
  "LY1305_SHA256\020\250\231\003\022!\n\034TLS_PSK_WITH_AES_12"
  "8_CBC_SHA\020\214\001\022!\n\034TLS_PSK_WITH_AES_256_CBC"
  "_SHA\020\215\001\022(\n\"TLS_ECDHE_PSK_WITH_AES_128_CB"
  "C_SHA\020\265\200\003\022(\n\"TLS_ECDHE_PSK_WITH_AES_256_"
  "CBC_SHA\020\266\200\003\0221\n+TLS_ECDHE_PSK_WITH_CHACHA"
  "20_POLY1305_SHA256\020\254\231\003\022\033\n\026TLS_AES_128_GC"
  "M_SHA256\020\201&\022\033\n\026TLS_AES_256_GCM_SHA384\020\202&"
  "\022!\n\034TLS_CHACHA20_POLY1305_SHA256\020\203&"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto, "frameworks/proto_logging/stats/enums/stats/tls/enums.proto", 1155,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto, 0, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto), true);
namespace android {
namespace stats {
namespace tls {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto[0];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CipherSuite_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto[1];
}
bool CipherSuite_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 47:
    case 53:
    case 140:
    case 141:
    case 156:
    case 157:
    case 4865:
    case 4866:
    case 4867:
    case 49161:
    case 49162:
    case 49171:
    case 49172:
    case 49195:
    case 49196:
    case 49199:
    case 49200:
    case 49205:
    case 49206:
    case 52392:
    case 52393:
    case 52396:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tls
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
