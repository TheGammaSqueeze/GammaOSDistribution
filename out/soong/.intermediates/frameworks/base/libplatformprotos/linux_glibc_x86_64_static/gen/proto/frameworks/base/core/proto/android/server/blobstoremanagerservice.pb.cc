// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/blobstoremanagerservice.proto

#include "frameworks/base/core/proto/android/server/blobstoremanagerservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlobStatsEventProto_BlobCommitterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlobStatsEventProto_BlobLeaseeProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace blob {
class BlobStatsEventProto_BlobCommitterProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobStatsEventProto_BlobCommitterProto> _instance;
} _BlobStatsEventProto_BlobCommitterProto_default_instance_;
class BlobStatsEventProto_BlobLeaseeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobStatsEventProto_BlobLeaseeProto> _instance;
} _BlobStatsEventProto_BlobLeaseeProto_default_instance_;
class BlobStatsEventProto_BlobCommitterListProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobStatsEventProto_BlobCommitterListProto> _instance;
} _BlobStatsEventProto_BlobCommitterListProto_default_instance_;
class BlobStatsEventProto_BlobLeaseeListProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobStatsEventProto_BlobLeaseeListProto> _instance;
} _BlobStatsEventProto_BlobLeaseeListProto_default_instance_;
class BlobStatsEventProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobStatsEventProto> _instance;
} _BlobStatsEventProto_default_instance_;
}  // namespace blob
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_BlobStatsEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::blob::_BlobStatsEventProto_default_instance_;
    new (ptr) ::com::android::server::blob::BlobStatsEventProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::blob::BlobStatsEventProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlobStatsEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlobStatsEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_BlobStatsEventProto_BlobCommitterListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::blob::_BlobStatsEventProto_BlobCommitterListProto_default_instance_;
    new (ptr) ::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlobStatsEventProto_BlobCommitterListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BlobStatsEventProto_BlobCommitterListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto}, {
      &scc_info_BlobStatsEventProto_BlobCommitterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_BlobStatsEventProto_BlobCommitterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::blob::_BlobStatsEventProto_BlobCommitterProto_default_instance_;
    new (ptr) ::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlobStatsEventProto_BlobCommitterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlobStatsEventProto_BlobCommitterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_BlobStatsEventProto_BlobLeaseeListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::blob::_BlobStatsEventProto_BlobLeaseeListProto_default_instance_;
    new (ptr) ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlobStatsEventProto_BlobLeaseeListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BlobStatsEventProto_BlobLeaseeListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto}, {
      &scc_info_BlobStatsEventProto_BlobLeaseeProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_BlobStatsEventProto_BlobLeaseeProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::blob::_BlobStatsEventProto_BlobLeaseeProto_default_instance_;
    new (ptr) ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlobStatsEventProto_BlobLeaseeProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlobStatsEventProto_BlobLeaseeProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto, commit_timestamp_millis_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto, access_mode_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto, num_whitelisted_package_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto, lease_expiry_timestamp_millis_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto, committer_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto, leasee_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::blob::BlobStatsEventProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto)},
  { 13, 20, sizeof(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto)},
  { 22, 28, sizeof(::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto)},
  { 29, 35, sizeof(::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto)},
  { 36, 41, sizeof(::com::android::server::blob::BlobStatsEventProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::blob::_BlobStatsEventProto_BlobCommitterProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::blob::_BlobStatsEventProto_BlobLeaseeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::blob::_BlobStatsEventProto_BlobCommitterListProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::blob::_BlobStatsEventProto_BlobLeaseeListProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::blob::_BlobStatsEventProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nGframeworks/base/core/proto/android/ser"
  "ver/blobstoremanagerservice.proto\022\027com.a"
  "ndroid.server.blob\"\251\003\n\023BlobStatsEventPro"
  "to\032x\n\022BlobCommitterProto\022\013\n\003uid\030\001 \001(\005\022\037\n"
  "\027commit_timestamp_millis\030\002 \001(\003\022\023\n\013access"
  "_mode\030\003 \001(\005\022\037\n\027num_whitelisted_package\030\004"
  " \001(\005\032E\n\017BlobLeaseeProto\022\013\n\003uid\030\001 \001(\005\022%\n\035"
  "lease_expiry_timestamp_millis\030\002 \001(\003\032l\n\026B"
  "lobCommitterListProto\022R\n\tcommitter\030\001 \003(\013"
  "2\?.com.android.server.blob.BlobStatsEven"
  "tProto.BlobCommitterProto\032c\n\023BlobLeaseeL"
  "istProto\022L\n\006leasee\030\001 \003(\0132<.com.android.s"
  "erver.blob.BlobStatsEventProto.BlobLease"
  "eProtoB\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_sccs[5] = {
  &scc_info_BlobStatsEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base,
  &scc_info_BlobStatsEventProto_BlobCommitterListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base,
  &scc_info_BlobStatsEventProto_BlobCommitterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base,
  &scc_info_BlobStatsEventProto_BlobLeaseeListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base,
  &scc_info_BlobStatsEventProto_BlobLeaseeProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto, "frameworks/base/core/proto/android/server/blobstoremanagerservice.proto", 530,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto, 5, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace blob {

// ===================================================================

void BlobStatsEventProto_BlobCommitterProto::InitAsDefaultInstance() {
}
class BlobStatsEventProto_BlobCommitterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobStatsEventProto_BlobCommitterProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commit_timestamp_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_access_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_whitelisted_package(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BlobStatsEventProto_BlobCommitterProto::BlobStatsEventProto_BlobCommitterProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
}
BlobStatsEventProto_BlobCommitterProto::BlobStatsEventProto_BlobCommitterProto(const BlobStatsEventProto_BlobCommitterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&commit_timestamp_millis_, &from.commit_timestamp_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_whitelisted_package_) -
    reinterpret_cast<char*>(&commit_timestamp_millis_)) + sizeof(num_whitelisted_package_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
}

void BlobStatsEventProto_BlobCommitterProto::SharedCtor() {
  ::memset(&commit_timestamp_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_whitelisted_package_) -
      reinterpret_cast<char*>(&commit_timestamp_millis_)) + sizeof(num_whitelisted_package_));
}

BlobStatsEventProto_BlobCommitterProto::~BlobStatsEventProto_BlobCommitterProto() {
  // @@protoc_insertion_point(destructor:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  SharedDtor();
}

void BlobStatsEventProto_BlobCommitterProto::SharedDtor() {
}

void BlobStatsEventProto_BlobCommitterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobStatsEventProto_BlobCommitterProto& BlobStatsEventProto_BlobCommitterProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobStatsEventProto_BlobCommitterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BlobStatsEventProto_BlobCommitterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&commit_timestamp_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_whitelisted_package_) -
        reinterpret_cast<char*>(&commit_timestamp_millis_)) + sizeof(num_whitelisted_package_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlobStatsEventProto_BlobCommitterProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 commit_timestamp_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_commit_timestamp_millis(&has_bits);
          commit_timestamp_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 access_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_access_mode(&has_bits);
          access_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_whitelisted_package = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_whitelisted_package(&has_bits);
          num_whitelisted_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlobStatsEventProto_BlobCommitterProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commit_timestamp_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_commit_timestamp_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_timestamp_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 access_mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_access_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_whitelisted_package = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_whitelisted_package(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_whitelisted_package_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlobStatsEventProto_BlobCommitterProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int64 commit_timestamp_millis = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->commit_timestamp_millis(), output);
  }

  // optional int32 access_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->access_mode(), output);
  }

  // optional int32 num_whitelisted_package = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_whitelisted_package(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobStatsEventProto_BlobCommitterProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int64 commit_timestamp_millis = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->commit_timestamp_millis(), target);
  }

  // optional int32 access_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->access_mode(), target);
  }

  // optional int32 num_whitelisted_package = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_whitelisted_package(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  return target;
}

size_t BlobStatsEventProto_BlobCommitterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 commit_timestamp_millis = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commit_timestamp_millis());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 access_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->access_mode());
    }

    // optional int32 num_whitelisted_package = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_whitelisted_package());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobStatsEventProto_BlobCommitterProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobStatsEventProto_BlobCommitterProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobStatsEventProto_BlobCommitterProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
    MergeFrom(*source);
  }
}

void BlobStatsEventProto_BlobCommitterProto::MergeFrom(const BlobStatsEventProto_BlobCommitterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      commit_timestamp_millis_ = from.commit_timestamp_millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      access_mode_ = from.access_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_whitelisted_package_ = from.num_whitelisted_package_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobStatsEventProto_BlobCommitterProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobStatsEventProto_BlobCommitterProto::CopyFrom(const BlobStatsEventProto_BlobCommitterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobStatsEventProto_BlobCommitterProto::IsInitialized() const {
  return true;
}

void BlobStatsEventProto_BlobCommitterProto::InternalSwap(BlobStatsEventProto_BlobCommitterProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commit_timestamp_millis_, other->commit_timestamp_millis_);
  swap(uid_, other->uid_);
  swap(access_mode_, other->access_mode_);
  swap(num_whitelisted_package_, other->num_whitelisted_package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobStatsEventProto_BlobCommitterProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlobStatsEventProto_BlobLeaseeProto::InitAsDefaultInstance() {
}
class BlobStatsEventProto_BlobLeaseeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobStatsEventProto_BlobLeaseeProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lease_expiry_timestamp_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlobStatsEventProto_BlobLeaseeProto::BlobStatsEventProto_BlobLeaseeProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
}
BlobStatsEventProto_BlobLeaseeProto::BlobStatsEventProto_BlobLeaseeProto(const BlobStatsEventProto_BlobLeaseeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lease_expiry_timestamp_millis_, &from.lease_expiry_timestamp_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&lease_expiry_timestamp_millis_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
}

void BlobStatsEventProto_BlobLeaseeProto::SharedCtor() {
  ::memset(&lease_expiry_timestamp_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&lease_expiry_timestamp_millis_)) + sizeof(uid_));
}

BlobStatsEventProto_BlobLeaseeProto::~BlobStatsEventProto_BlobLeaseeProto() {
  // @@protoc_insertion_point(destructor:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  SharedDtor();
}

void BlobStatsEventProto_BlobLeaseeProto::SharedDtor() {
}

void BlobStatsEventProto_BlobLeaseeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobStatsEventProto_BlobLeaseeProto& BlobStatsEventProto_BlobLeaseeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobStatsEventProto_BlobLeaseeProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BlobStatsEventProto_BlobLeaseeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lease_expiry_timestamp_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&lease_expiry_timestamp_millis_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlobStatsEventProto_BlobLeaseeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lease_expiry_timestamp_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lease_expiry_timestamp_millis(&has_bits);
          lease_expiry_timestamp_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlobStatsEventProto_BlobLeaseeProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lease_expiry_timestamp_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_lease_expiry_timestamp_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_expiry_timestamp_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlobStatsEventProto_BlobLeaseeProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int64 lease_expiry_timestamp_millis = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->lease_expiry_timestamp_millis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobStatsEventProto_BlobLeaseeProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int64 lease_expiry_timestamp_millis = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->lease_expiry_timestamp_millis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  return target;
}

size_t BlobStatsEventProto_BlobLeaseeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 lease_expiry_timestamp_millis = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lease_expiry_timestamp_millis());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobStatsEventProto_BlobLeaseeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobStatsEventProto_BlobLeaseeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobStatsEventProto_BlobLeaseeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
    MergeFrom(*source);
  }
}

void BlobStatsEventProto_BlobLeaseeProto::MergeFrom(const BlobStatsEventProto_BlobLeaseeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lease_expiry_timestamp_millis_ = from.lease_expiry_timestamp_millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobStatsEventProto_BlobLeaseeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobStatsEventProto_BlobLeaseeProto::CopyFrom(const BlobStatsEventProto_BlobLeaseeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobStatsEventProto_BlobLeaseeProto::IsInitialized() const {
  return true;
}

void BlobStatsEventProto_BlobLeaseeProto::InternalSwap(BlobStatsEventProto_BlobLeaseeProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lease_expiry_timestamp_millis_, other->lease_expiry_timestamp_millis_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobStatsEventProto_BlobLeaseeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlobStatsEventProto_BlobCommitterListProto::InitAsDefaultInstance() {
}
class BlobStatsEventProto_BlobCommitterListProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobStatsEventProto_BlobCommitterListProto>()._has_bits_);
};

BlobStatsEventProto_BlobCommitterListProto::BlobStatsEventProto_BlobCommitterListProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
}
BlobStatsEventProto_BlobCommitterListProto::BlobStatsEventProto_BlobCommitterListProto(const BlobStatsEventProto_BlobCommitterListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      committer_(from.committer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
}

void BlobStatsEventProto_BlobCommitterListProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlobStatsEventProto_BlobCommitterListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base);
}

BlobStatsEventProto_BlobCommitterListProto::~BlobStatsEventProto_BlobCommitterListProto() {
  // @@protoc_insertion_point(destructor:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  SharedDtor();
}

void BlobStatsEventProto_BlobCommitterListProto::SharedDtor() {
}

void BlobStatsEventProto_BlobCommitterListProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobStatsEventProto_BlobCommitterListProto& BlobStatsEventProto_BlobCommitterListProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobStatsEventProto_BlobCommitterListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BlobStatsEventProto_BlobCommitterListProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  committer_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlobStatsEventProto_BlobCommitterListProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.blob.BlobStatsEventProto.BlobCommitterProto committer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_committer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlobStatsEventProto_BlobCommitterListProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.blob.BlobStatsEventProto.BlobCommitterProto committer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_committer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlobStatsEventProto_BlobCommitterListProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.blob.BlobStatsEventProto.BlobCommitterProto committer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->committer_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->committer(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobStatsEventProto_BlobCommitterListProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.blob.BlobStatsEventProto.BlobCommitterProto committer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->committer_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->committer(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  return target;
}

size_t BlobStatsEventProto_BlobCommitterListProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.blob.BlobStatsEventProto.BlobCommitterProto committer = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->committer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->committer(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobStatsEventProto_BlobCommitterListProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobStatsEventProto_BlobCommitterListProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobStatsEventProto_BlobCommitterListProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
    MergeFrom(*source);
  }
}

void BlobStatsEventProto_BlobCommitterListProto::MergeFrom(const BlobStatsEventProto_BlobCommitterListProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  committer_.MergeFrom(from.committer_);
}

void BlobStatsEventProto_BlobCommitterListProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobStatsEventProto_BlobCommitterListProto::CopyFrom(const BlobStatsEventProto_BlobCommitterListProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobCommitterListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobStatsEventProto_BlobCommitterListProto::IsInitialized() const {
  return true;
}

void BlobStatsEventProto_BlobCommitterListProto::InternalSwap(BlobStatsEventProto_BlobCommitterListProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&committer_)->InternalSwap(CastToBase(&other->committer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobStatsEventProto_BlobCommitterListProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlobStatsEventProto_BlobLeaseeListProto::InitAsDefaultInstance() {
}
class BlobStatsEventProto_BlobLeaseeListProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobStatsEventProto_BlobLeaseeListProto>()._has_bits_);
};

BlobStatsEventProto_BlobLeaseeListProto::BlobStatsEventProto_BlobLeaseeListProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
}
BlobStatsEventProto_BlobLeaseeListProto::BlobStatsEventProto_BlobLeaseeListProto(const BlobStatsEventProto_BlobLeaseeListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      leasee_(from.leasee_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
}

void BlobStatsEventProto_BlobLeaseeListProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlobStatsEventProto_BlobLeaseeListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base);
}

BlobStatsEventProto_BlobLeaseeListProto::~BlobStatsEventProto_BlobLeaseeListProto() {
  // @@protoc_insertion_point(destructor:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  SharedDtor();
}

void BlobStatsEventProto_BlobLeaseeListProto::SharedDtor() {
}

void BlobStatsEventProto_BlobLeaseeListProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobStatsEventProto_BlobLeaseeListProto& BlobStatsEventProto_BlobLeaseeListProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobStatsEventProto_BlobLeaseeListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BlobStatsEventProto_BlobLeaseeListProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leasee_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlobStatsEventProto_BlobLeaseeListProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto leasee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_leasee(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlobStatsEventProto_BlobLeaseeListProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto leasee = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_leasee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlobStatsEventProto_BlobLeaseeListProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto leasee = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leasee_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->leasee(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobStatsEventProto_BlobLeaseeListProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto leasee = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leasee_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->leasee(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  return target;
}

size_t BlobStatsEventProto_BlobLeaseeListProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.blob.BlobStatsEventProto.BlobLeaseeProto leasee = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->leasee_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->leasee(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobStatsEventProto_BlobLeaseeListProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobStatsEventProto_BlobLeaseeListProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobStatsEventProto_BlobLeaseeListProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
    MergeFrom(*source);
  }
}

void BlobStatsEventProto_BlobLeaseeListProto::MergeFrom(const BlobStatsEventProto_BlobLeaseeListProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leasee_.MergeFrom(from.leasee_);
}

void BlobStatsEventProto_BlobLeaseeListProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobStatsEventProto_BlobLeaseeListProto::CopyFrom(const BlobStatsEventProto_BlobLeaseeListProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.blob.BlobStatsEventProto.BlobLeaseeListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobStatsEventProto_BlobLeaseeListProto::IsInitialized() const {
  return true;
}

void BlobStatsEventProto_BlobLeaseeListProto::InternalSwap(BlobStatsEventProto_BlobLeaseeListProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&leasee_)->InternalSwap(CastToBase(&other->leasee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobStatsEventProto_BlobLeaseeListProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlobStatsEventProto::InitAsDefaultInstance() {
}
class BlobStatsEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobStatsEventProto>()._has_bits_);
};

BlobStatsEventProto::BlobStatsEventProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.blob.BlobStatsEventProto)
}
BlobStatsEventProto::BlobStatsEventProto(const BlobStatsEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.blob.BlobStatsEventProto)
}

void BlobStatsEventProto::SharedCtor() {
}

BlobStatsEventProto::~BlobStatsEventProto() {
  // @@protoc_insertion_point(destructor:com.android.server.blob.BlobStatsEventProto)
  SharedDtor();
}

void BlobStatsEventProto::SharedDtor() {
}

void BlobStatsEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobStatsEventProto& BlobStatsEventProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobStatsEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fblobstoremanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BlobStatsEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.blob.BlobStatsEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlobStatsEventProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlobStatsEventProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.blob.BlobStatsEventProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.blob.BlobStatsEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.blob.BlobStatsEventProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlobStatsEventProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.blob.BlobStatsEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.blob.BlobStatsEventProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobStatsEventProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.blob.BlobStatsEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.blob.BlobStatsEventProto)
  return target;
}

size_t BlobStatsEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.blob.BlobStatsEventProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobStatsEventProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.blob.BlobStatsEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobStatsEventProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobStatsEventProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.blob.BlobStatsEventProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.blob.BlobStatsEventProto)
    MergeFrom(*source);
  }
}

void BlobStatsEventProto::MergeFrom(const BlobStatsEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.blob.BlobStatsEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BlobStatsEventProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.blob.BlobStatsEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobStatsEventProto::CopyFrom(const BlobStatsEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.blob.BlobStatsEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobStatsEventProto::IsInitialized() const {
  return true;
}

void BlobStatsEventProto::InternalSwap(BlobStatsEventProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobStatsEventProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace blob
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto* Arena::CreateMaybeMessage< ::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::blob::BlobStatsEventProto_BlobCommitterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto* Arena::CreateMaybeMessage< ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto* Arena::CreateMaybeMessage< ::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::blob::BlobStatsEventProto_BlobCommitterListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto* Arena::CreateMaybeMessage< ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::blob::BlobStatsEventProto_BlobLeaseeListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::blob::BlobStatsEventProto* Arena::CreateMaybeMessage< ::com::android::server::blob::BlobStatsEventProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::blob::BlobStatsEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
