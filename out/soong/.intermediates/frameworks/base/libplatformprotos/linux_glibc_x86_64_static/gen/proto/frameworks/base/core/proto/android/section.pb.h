// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/section.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto;
namespace android {
class SectionFlags;
class SectionFlagsDefaultTypeInternal;
extern SectionFlagsDefaultTypeInternal _SectionFlags_default_instance_;
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::SectionFlags* Arena::CreateMaybeMessage<::android::SectionFlags>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {

enum SectionType : int {
  SECTION_NONE = 0,
  SECTION_FILE = 1,
  SECTION_COMMAND = 2,
  SECTION_DUMPSYS = 3,
  SECTION_LOG = 4,
  SECTION_GZIP = 5,
  SECTION_TOMBSTONE = 6,
  SECTION_TEXT_DUMPSYS = 7
};
bool SectionType_IsValid(int value);
constexpr SectionType SectionType_MIN = SECTION_NONE;
constexpr SectionType SectionType_MAX = SECTION_TEXT_DUMPSYS;
constexpr int SectionType_ARRAYSIZE = SectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SectionType_descriptor();
template<typename T>
inline const std::string& SectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SectionType_descriptor(), enum_t_value);
}
inline bool SectionType_Parse(
    const std::string& name, SectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SectionType>(
    SectionType_descriptor(), name, value);
}
// ===================================================================

class SectionFlags :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.SectionFlags) */ {
 public:
  SectionFlags();
  virtual ~SectionFlags();

  SectionFlags(const SectionFlags& from);
  SectionFlags(SectionFlags&& from) noexcept
    : SectionFlags() {
    *this = ::std::move(from);
  }

  inline SectionFlags& operator=(const SectionFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionFlags& operator=(SectionFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SectionFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SectionFlags* internal_default_instance() {
    return reinterpret_cast<const SectionFlags*>(
               &_SectionFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SectionFlags& a, SectionFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionFlags* New() const final {
    return CreateMaybeMessage<SectionFlags>(nullptr);
  }

  SectionFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionFlags& from);
  void MergeFrom(const SectionFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.SectionFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kTypeFieldNumber = 1,
    kUserdebugAndEngOnlyFieldNumber = 3,
  };
  // optional string args = 2;
  bool has_args() const;
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);

  // optional .android.SectionType type = 1 [default = SECTION_NONE];
  bool has_type() const;
  void clear_type();
  ::android::SectionType type() const;
  void set_type(::android::SectionType value);

  // optional bool userdebug_and_eng_only = 3 [default = false];
  bool has_userdebug_and_eng_only() const;
  void clear_userdebug_and_eng_only();
  bool userdebug_and_eng_only() const;
  void set_userdebug_and_eng_only(bool value);

  // @@protoc_insertion_point(class_scope:android.SectionFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  int type_;
  bool userdebug_and_eng_only_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto;
};
// ===================================================================

static const int kSectionFieldNumber = 155792027;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::android::SectionFlags >, 11, false >
  section;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SectionFlags

// optional .android.SectionType type = 1 [default = SECTION_NONE];
inline bool SectionFlags::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionFlags::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::SectionType SectionFlags::type() const {
  // @@protoc_insertion_point(field_get:android.SectionFlags.type)
  return static_cast< ::android::SectionType >(type_);
}
inline void SectionFlags::set_type(::android::SectionType value) {
  assert(::android::SectionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:android.SectionFlags.type)
}

// optional string args = 2;
inline bool SectionFlags::has_args() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionFlags::clear_args() {
  args_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SectionFlags::args() const {
  // @@protoc_insertion_point(field_get:android.SectionFlags.args)
  return args_.GetNoArena();
}
inline void SectionFlags::set_args(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.SectionFlags.args)
}
inline void SectionFlags::set_args(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  args_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.SectionFlags.args)
}
inline void SectionFlags::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.SectionFlags.args)
}
inline void SectionFlags::set_args(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.SectionFlags.args)
}
inline std::string* SectionFlags::mutable_args() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.SectionFlags.args)
  return args_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SectionFlags::release_args() {
  // @@protoc_insertion_point(field_release:android.SectionFlags.args)
  if (!has_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return args_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SectionFlags::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  args_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:android.SectionFlags.args)
}

// optional bool userdebug_and_eng_only = 3 [default = false];
inline bool SectionFlags::has_userdebug_and_eng_only() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionFlags::clear_userdebug_and_eng_only() {
  userdebug_and_eng_only_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SectionFlags::userdebug_and_eng_only() const {
  // @@protoc_insertion_point(field_get:android.SectionFlags.userdebug_and_eng_only)
  return userdebug_and_eng_only_;
}
inline void SectionFlags::set_userdebug_and_eng_only(bool value) {
  _has_bits_[0] |= 0x00000004u;
  userdebug_and_eng_only_ = value;
  // @@protoc_insertion_point(field_set:android.SectionFlags.userdebug_and_eng_only)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::SectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::SectionType>() {
  return ::android::SectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto
