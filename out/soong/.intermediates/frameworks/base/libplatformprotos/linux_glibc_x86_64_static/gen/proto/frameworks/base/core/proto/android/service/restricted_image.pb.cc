// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/restricted_image.proto

#include "frameworks/base/core/proto/android/service/restricted_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto;
namespace android {
namespace service {
namespace restricted_image {
class RestrictedImagesDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestrictedImagesDumpProto> _instance;
} _RestrictedImagesDumpProto_default_instance_;
class RestrictedImageSetProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestrictedImageSetProto> _instance;
} _RestrictedImageSetProto_default_instance_;
class RestrictedImageProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestrictedImageProto> _instance;
} _RestrictedImageProto_default_instance_;
}  // namespace restricted_image
}  // namespace service
}  // namespace android
static void InitDefaultsscc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::restricted_image::_RestrictedImageProto_default_instance_;
    new (ptr) ::android::service::restricted_image::RestrictedImageProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::restricted_image::RestrictedImageProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto}, {}};

static void InitDefaultsscc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::restricted_image::_RestrictedImageSetProto_default_instance_;
    new (ptr) ::android::service::restricted_image::RestrictedImageSetProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::restricted_image::RestrictedImageSetProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto}, {
      &scc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base,}};

static void InitDefaultsscc_info_RestrictedImagesDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::restricted_image::_RestrictedImagesDumpProto_default_instance_;
    new (ptr) ::android::service::restricted_image::RestrictedImagesDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::restricted_image::RestrictedImagesDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictedImagesDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RestrictedImagesDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto}, {
      &scc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImagesDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImagesDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImagesDumpProto, sets_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageSetProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageSetProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageSetProto, category_),
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageSetProto, images_),
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageSetProto, metadata_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageProto, mime_type_),
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageProto, image_data_),
  PROTOBUF_FIELD_OFFSET(::android::service::restricted_image::RestrictedImageProto, metadata_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::android::service::restricted_image::RestrictedImagesDumpProto)},
  { 7, 15, sizeof(::android::service::restricted_image::RestrictedImageSetProto)},
  { 18, 26, sizeof(::android::service::restricted_image::RestrictedImageProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::service::restricted_image::_RestrictedImagesDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::service::restricted_image::_RestrictedImageSetProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::service::restricted_image::_RestrictedImageProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nAframeworks/base/core/proto/android/ser"
  "vice/restricted_image.proto\022 android.ser"
  "vice.restricted_image\0320frameworks/base/c"
  "ore/proto/android/privacy.proto\"n\n\031Restr"
  "ictedImagesDumpProto\022G\n\004sets\030\001 \003(\01329.and"
  "roid.service.restricted_image.Restricted"
  "ImageSetProto:\010\232\237\325\207\003\002\010d\"\217\001\n\027RestrictedIm"
  "ageSetProto\022\020\n\010category\030\001 \001(\t\022F\n\006images\030"
  "\002 \003(\01326.android.service.restricted_image"
  ".RestrictedImageProto\022\020\n\010metadata\030\003 \001(\014:"
  "\010\232\237\325\207\003\002\010d\"Y\n\024RestrictedImageProto\022\021\n\tmim"
  "e_type\030\001 \001(\t\022\022\n\nimage_data\030\002 \001(\014\022\020\n\010meta"
  "data\030\003 \001(\014:\010\232\237\325\207\003\002\010dB\023B\017RestrictedImageP"
  "\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_deps[1] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_sccs[3] = {
  &scc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base,
  &scc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base,
  &scc_info_RestrictedImagesDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto, "frameworks/base/core/proto/android/service/restricted_image.proto", 521,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto, 3, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto), true);
namespace android {
namespace service {
namespace restricted_image {

// ===================================================================

void RestrictedImagesDumpProto::InitAsDefaultInstance() {
}
class RestrictedImagesDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RestrictedImagesDumpProto>()._has_bits_);
};

RestrictedImagesDumpProto::RestrictedImagesDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.restricted_image.RestrictedImagesDumpProto)
}
RestrictedImagesDumpProto::RestrictedImagesDumpProto(const RestrictedImagesDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sets_(from.sets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.service.restricted_image.RestrictedImagesDumpProto)
}

void RestrictedImagesDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestrictedImagesDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base);
}

RestrictedImagesDumpProto::~RestrictedImagesDumpProto() {
  // @@protoc_insertion_point(destructor:android.service.restricted_image.RestrictedImagesDumpProto)
  SharedDtor();
}

void RestrictedImagesDumpProto::SharedDtor() {
}

void RestrictedImagesDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestrictedImagesDumpProto& RestrictedImagesDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestrictedImagesDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base);
  return *internal_default_instance();
}


void RestrictedImagesDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.restricted_image.RestrictedImagesDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RestrictedImagesDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.service.restricted_image.RestrictedImageSetProto sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RestrictedImagesDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.service.restricted_image.RestrictedImagesDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.service.restricted_image.RestrictedImageSetProto sets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.restricted_image.RestrictedImagesDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.restricted_image.RestrictedImagesDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RestrictedImagesDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.restricted_image.RestrictedImagesDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.service.restricted_image.RestrictedImageSetProto sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.service.restricted_image.RestrictedImagesDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* RestrictedImagesDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.service.restricted_image.RestrictedImagesDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.service.restricted_image.RestrictedImageSetProto sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.service.restricted_image.RestrictedImagesDumpProto)
  return target;
}

size_t RestrictedImagesDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.restricted_image.RestrictedImagesDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.restricted_image.RestrictedImageSetProto sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sets(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestrictedImagesDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.service.restricted_image.RestrictedImagesDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RestrictedImagesDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestrictedImagesDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.service.restricted_image.RestrictedImagesDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.service.restricted_image.RestrictedImagesDumpProto)
    MergeFrom(*source);
  }
}

void RestrictedImagesDumpProto::MergeFrom(const RestrictedImagesDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.restricted_image.RestrictedImagesDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sets_.MergeFrom(from.sets_);
}

void RestrictedImagesDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.service.restricted_image.RestrictedImagesDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictedImagesDumpProto::CopyFrom(const RestrictedImagesDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.restricted_image.RestrictedImagesDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictedImagesDumpProto::IsInitialized() const {
  return true;
}

void RestrictedImagesDumpProto::InternalSwap(RestrictedImagesDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sets_)->InternalSwap(CastToBase(&other->sets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictedImagesDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestrictedImageSetProto::InitAsDefaultInstance() {
}
class RestrictedImageSetProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RestrictedImageSetProto>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RestrictedImageSetProto::RestrictedImageSetProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.restricted_image.RestrictedImageSetProto)
}
RestrictedImageSetProto::RestrictedImageSetProto(const RestrictedImageSetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:android.service.restricted_image.RestrictedImageSetProto)
}

void RestrictedImageSetProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base);
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestrictedImageSetProto::~RestrictedImageSetProto() {
  // @@protoc_insertion_point(destructor:android.service.restricted_image.RestrictedImageSetProto)
  SharedDtor();
}

void RestrictedImageSetProto::SharedDtor() {
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestrictedImageSetProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestrictedImageSetProto& RestrictedImageSetProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestrictedImageSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base);
  return *internal_default_instance();
}


void RestrictedImageSetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.restricted_image.RestrictedImageSetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RestrictedImageSetProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_category(), ptr, ctx, "android.service.restricted_image.RestrictedImageSetProto.category");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.restricted_image.RestrictedImageProto images = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RestrictedImageSetProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.service.restricted_image.RestrictedImageSetProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string category = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), static_cast<int>(this->category().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.service.restricted_image.RestrictedImageSetProto.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.restricted_image.RestrictedImageProto images = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.restricted_image.RestrictedImageSetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.restricted_image.RestrictedImageSetProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RestrictedImageSetProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.restricted_image.RestrictedImageSetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.service.restricted_image.RestrictedImageSetProto.category");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // repeated .android.service.restricted_image.RestrictedImageProto images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->images(static_cast<int>(i)),
      output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.service.restricted_image.RestrictedImageSetProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* RestrictedImageSetProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.service.restricted_image.RestrictedImageSetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.service.restricted_image.RestrictedImageSetProto.category");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // repeated .android.service.restricted_image.RestrictedImageProto images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->images(static_cast<int>(i)), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.service.restricted_image.RestrictedImageSetProto)
  return target;
}

size_t RestrictedImageSetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.restricted_image.RestrictedImageSetProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.restricted_image.RestrictedImageProto images = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->images(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string category = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestrictedImageSetProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.service.restricted_image.RestrictedImageSetProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RestrictedImageSetProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestrictedImageSetProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.service.restricted_image.RestrictedImageSetProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.service.restricted_image.RestrictedImageSetProto)
    MergeFrom(*source);
  }
}

void RestrictedImageSetProto::MergeFrom(const RestrictedImageSetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.restricted_image.RestrictedImageSetProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
  }
}

void RestrictedImageSetProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.service.restricted_image.RestrictedImageSetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictedImageSetProto::CopyFrom(const RestrictedImageSetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.restricted_image.RestrictedImageSetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictedImageSetProto::IsInitialized() const {
  return true;
}

void RestrictedImageSetProto::InternalSwap(RestrictedImageSetProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&images_)->InternalSwap(CastToBase(&other->images_));
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictedImageSetProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestrictedImageProto::InitAsDefaultInstance() {
}
class RestrictedImageProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RestrictedImageProto>()._has_bits_);
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RestrictedImageProto::RestrictedImageProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.restricted_image.RestrictedImageProto)
}
RestrictedImageProto::RestrictedImageProto(const RestrictedImageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mime_type()) {
    mime_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_image_data()) {
    image_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:android.service.restricted_image.RestrictedImageProto)
}

void RestrictedImageProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base);
  mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestrictedImageProto::~RestrictedImageProto() {
  // @@protoc_insertion_point(destructor:android.service.restricted_image.RestrictedImageProto)
  SharedDtor();
}

void RestrictedImageProto::SharedDtor() {
  mime_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestrictedImageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestrictedImageProto& RestrictedImageProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestrictedImageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2frestricted_5fimage_2eproto.base);
  return *internal_default_instance();
}


void RestrictedImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.restricted_image.RestrictedImageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mime_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      image_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RestrictedImageProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mime_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_mime_type(), ptr, ctx, "android.service.restricted_image.RestrictedImageProto.mime_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes image_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_image_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RestrictedImageProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.service.restricted_image.RestrictedImageProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mime_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mime_type().data(), static_cast<int>(this->mime_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.service.restricted_image.RestrictedImageProto.mime_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes image_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.restricted_image.RestrictedImageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.restricted_image.RestrictedImageProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RestrictedImageProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.restricted_image.RestrictedImageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mime_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mime_type().data(), static_cast<int>(this->mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.service.restricted_image.RestrictedImageProto.mime_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mime_type(), output);
  }

  // optional bytes image_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image_data(), output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.service.restricted_image.RestrictedImageProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* RestrictedImageProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.service.restricted_image.RestrictedImageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mime_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mime_type().data(), static_cast<int>(this->mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.service.restricted_image.RestrictedImageProto.mime_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->mime_type(), target);
  }

  // optional bytes image_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_data(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.service.restricted_image.RestrictedImageProto)
  return target;
}

size_t RestrictedImageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.restricted_image.RestrictedImageProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string mime_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->mime_type());
    }

    // optional bytes image_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->image_data());
    }

    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestrictedImageProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.service.restricted_image.RestrictedImageProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RestrictedImageProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestrictedImageProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.service.restricted_image.RestrictedImageProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.service.restricted_image.RestrictedImageProto)
    MergeFrom(*source);
  }
}

void RestrictedImageProto::MergeFrom(const RestrictedImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.restricted_image.RestrictedImageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mime_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      image_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
  }
}

void RestrictedImageProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.service.restricted_image.RestrictedImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictedImageProto::CopyFrom(const RestrictedImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.restricted_image.RestrictedImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictedImageProto::IsInitialized() const {
  return true;
}

void RestrictedImageProto::InternalSwap(RestrictedImageProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mime_type_.Swap(&other->mime_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_data_.Swap(&other->image_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictedImageProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace restricted_image
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::service::restricted_image::RestrictedImagesDumpProto* Arena::CreateMaybeMessage< ::android::service::restricted_image::RestrictedImagesDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::restricted_image::RestrictedImagesDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::restricted_image::RestrictedImageSetProto* Arena::CreateMaybeMessage< ::android::service::restricted_image::RestrictedImageSetProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::restricted_image::RestrictedImageSetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::restricted_image::RestrictedImageProto* Arena::CreateMaybeMessage< ::android::service::restricted_image::RestrictedImageProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::restricted_image::RestrictedImageProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
