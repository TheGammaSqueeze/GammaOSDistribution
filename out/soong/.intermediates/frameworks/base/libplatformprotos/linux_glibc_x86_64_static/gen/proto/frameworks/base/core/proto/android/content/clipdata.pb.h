// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/content/clipdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/content/clipdescription.pb.h"
#include "frameworks/base/core/proto/android/content/intent.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto;
namespace android {
namespace content {
class ClipDataProto;
class ClipDataProtoDefaultTypeInternal;
extern ClipDataProtoDefaultTypeInternal _ClipDataProto_default_instance_;
class ClipDataProto_Icon;
class ClipDataProto_IconDefaultTypeInternal;
extern ClipDataProto_IconDefaultTypeInternal _ClipDataProto_Icon_default_instance_;
class ClipDataProto_Item;
class ClipDataProto_ItemDefaultTypeInternal;
extern ClipDataProto_ItemDefaultTypeInternal _ClipDataProto_Item_default_instance_;
}  // namespace content
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::content::ClipDataProto* Arena::CreateMaybeMessage<::android::content::ClipDataProto>(Arena*);
template<> ::android::content::ClipDataProto_Icon* Arena::CreateMaybeMessage<::android::content::ClipDataProto_Icon>(Arena*);
template<> ::android::content::ClipDataProto_Item* Arena::CreateMaybeMessage<::android::content::ClipDataProto_Item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace content {

// ===================================================================

class ClipDataProto_Icon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.content.ClipDataProto.Icon) */ {
 public:
  ClipDataProto_Icon();
  virtual ~ClipDataProto_Icon();

  ClipDataProto_Icon(const ClipDataProto_Icon& from);
  ClipDataProto_Icon(ClipDataProto_Icon&& from) noexcept
    : ClipDataProto_Icon() {
    *this = ::std::move(from);
  }

  inline ClipDataProto_Icon& operator=(const ClipDataProto_Icon& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipDataProto_Icon& operator=(ClipDataProto_Icon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClipDataProto_Icon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipDataProto_Icon* internal_default_instance() {
    return reinterpret_cast<const ClipDataProto_Icon*>(
               &_ClipDataProto_Icon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClipDataProto_Icon& a, ClipDataProto_Icon& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipDataProto_Icon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipDataProto_Icon* New() const final {
    return CreateMaybeMessage<ClipDataProto_Icon>(nullptr);
  }

  ClipDataProto_Icon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipDataProto_Icon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipDataProto_Icon& from);
  void MergeFrom(const ClipDataProto_Icon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipDataProto_Icon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.ClipDataProto.Icon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional int32 width = 1;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.content.ClipDataProto.Icon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto;
};
// -------------------------------------------------------------------

class ClipDataProto_Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.content.ClipDataProto.Item) */ {
 public:
  ClipDataProto_Item();
  virtual ~ClipDataProto_Item();

  ClipDataProto_Item(const ClipDataProto_Item& from);
  ClipDataProto_Item(ClipDataProto_Item&& from) noexcept
    : ClipDataProto_Item() {
    *this = ::std::move(from);
  }

  inline ClipDataProto_Item& operator=(const ClipDataProto_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipDataProto_Item& operator=(ClipDataProto_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClipDataProto_Item& default_instance();

  enum DataCase {
    kHtmlText = 1,
    kText = 2,
    kUri = 3,
    kIntent = 4,
    kNothing = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipDataProto_Item* internal_default_instance() {
    return reinterpret_cast<const ClipDataProto_Item*>(
               &_ClipDataProto_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClipDataProto_Item& a, ClipDataProto_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipDataProto_Item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipDataProto_Item* New() const final {
    return CreateMaybeMessage<ClipDataProto_Item>(nullptr);
  }

  ClipDataProto_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipDataProto_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipDataProto_Item& from);
  void MergeFrom(const ClipDataProto_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipDataProto_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.ClipDataProto.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHtmlTextFieldNumber = 1,
    kTextFieldNumber = 2,
    kUriFieldNumber = 3,
    kIntentFieldNumber = 4,
    kNothingFieldNumber = 5,
  };
  // optional string html_text = 1;
  bool has_html_text() const;
  void clear_html_text();
  const std::string& html_text() const;
  void set_html_text(const std::string& value);
  void set_html_text(std::string&& value);
  void set_html_text(const char* value);
  void set_html_text(const char* value, size_t size);
  std::string* mutable_html_text();
  std::string* release_html_text();
  void set_allocated_html_text(std::string* html_text);

  // optional string text = 2;
  bool has_text() const;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);

  // optional .android.content.IntentProto intent = 4;
  bool has_intent() const;
  void clear_intent();
  const ::android::content::IntentProto& intent() const;
  ::android::content::IntentProto* release_intent();
  ::android::content::IntentProto* mutable_intent();
  void set_allocated_intent(::android::content::IntentProto* intent);

  // optional bool nothing = 5 [(.android.privacy) = {
  bool has_nothing() const;
  void clear_nothing();
  bool nothing() const;
  void set_nothing(bool value);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:android.content.ClipDataProto.Item)
 private:
  class _Internal;
  void set_has_html_text();
  void set_has_text();
  void set_has_uri();
  void set_has_intent();
  void set_has_nothing();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr html_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::android::content::IntentProto* intent_;
    bool nothing_;
  } data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto;
};
// -------------------------------------------------------------------

class ClipDataProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.content.ClipDataProto) */ {
 public:
  ClipDataProto();
  virtual ~ClipDataProto();

  ClipDataProto(const ClipDataProto& from);
  ClipDataProto(ClipDataProto&& from) noexcept
    : ClipDataProto() {
    *this = ::std::move(from);
  }

  inline ClipDataProto& operator=(const ClipDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipDataProto& operator=(ClipDataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClipDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipDataProto* internal_default_instance() {
    return reinterpret_cast<const ClipDataProto*>(
               &_ClipDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClipDataProto& a, ClipDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipDataProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipDataProto* New() const final {
    return CreateMaybeMessage<ClipDataProto>(nullptr);
  }

  ClipDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipDataProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipDataProto& from);
  void MergeFrom(const ClipDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.ClipDataProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClipDataProto_Icon Icon;
  typedef ClipDataProto_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kDescriptionFieldNumber = 1,
    kIconFieldNumber = 2,
  };
  // repeated .android.content.ClipDataProto.Item items = 3;
  int items_size() const;
  void clear_items();
  ::android::content::ClipDataProto_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ClipDataProto_Item >*
      mutable_items();
  const ::android::content::ClipDataProto_Item& items(int index) const;
  ::android::content::ClipDataProto_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ClipDataProto_Item >&
      items() const;

  // optional .android.content.ClipDescriptionProto description = 1;
  bool has_description() const;
  void clear_description();
  const ::android::content::ClipDescriptionProto& description() const;
  ::android::content::ClipDescriptionProto* release_description();
  ::android::content::ClipDescriptionProto* mutable_description();
  void set_allocated_description(::android::content::ClipDescriptionProto* description);

  // optional .android.content.ClipDataProto.Icon icon = 2;
  bool has_icon() const;
  void clear_icon();
  const ::android::content::ClipDataProto_Icon& icon() const;
  ::android::content::ClipDataProto_Icon* release_icon();
  ::android::content::ClipDataProto_Icon* mutable_icon();
  void set_allocated_icon(::android::content::ClipDataProto_Icon* icon);

  // @@protoc_insertion_point(class_scope:android.content.ClipDataProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ClipDataProto_Item > items_;
  ::android::content::ClipDescriptionProto* description_;
  ::android::content::ClipDataProto_Icon* icon_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClipDataProto_Icon

// optional int32 width = 1;
inline bool ClipDataProto_Icon::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClipDataProto_Icon::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClipDataProto_Icon::width() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.Icon.width)
  return width_;
}
inline void ClipDataProto_Icon::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Icon.width)
}

// optional int32 height = 2;
inline bool ClipDataProto_Icon::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClipDataProto_Icon::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClipDataProto_Icon::height() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.Icon.height)
  return height_;
}
inline void ClipDataProto_Icon::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Icon.height)
}

// -------------------------------------------------------------------

// ClipDataProto_Item

// optional string html_text = 1;
inline bool ClipDataProto_Item::has_html_text() const {
  return data_case() == kHtmlText;
}
inline void ClipDataProto_Item::set_has_html_text() {
  _oneof_case_[0] = kHtmlText;
}
inline void ClipDataProto_Item::clear_html_text() {
  if (has_html_text()) {
    data_.html_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& ClipDataProto_Item::html_text() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.Item.html_text)
  if (has_html_text()) {
    return data_.html_text_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ClipDataProto_Item::set_html_text(const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.html_text)
  if (!has_html_text()) {
    clear_data();
    set_has_html_text();
    data_.html_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.html_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.html_text)
}
inline void ClipDataProto_Item::set_html_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.html_text)
  if (!has_html_text()) {
    clear_data();
    set_has_html_text();
    data_.html_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.html_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.ClipDataProto.Item.html_text)
}
inline void ClipDataProto_Item::set_html_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_html_text()) {
    clear_data();
    set_has_html_text();
    data_.html_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.html_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.ClipDataProto.Item.html_text)
}
inline void ClipDataProto_Item::set_html_text(const char* value, size_t size) {
  if (!has_html_text()) {
    clear_data();
    set_has_html_text();
    data_.html_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.html_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.ClipDataProto.Item.html_text)
}
inline std::string* ClipDataProto_Item::mutable_html_text() {
  if (!has_html_text()) {
    clear_data();
    set_has_html_text();
    data_.html_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:android.content.ClipDataProto.Item.html_text)
  return data_.html_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClipDataProto_Item::release_html_text() {
  // @@protoc_insertion_point(field_release:android.content.ClipDataProto.Item.html_text)
  if (has_html_text()) {
    clear_has_data();
    return data_.html_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ClipDataProto_Item::set_allocated_html_text(std::string* html_text) {
  if (has_data()) {
    clear_data();
  }
  if (html_text != nullptr) {
    set_has_html_text();
    data_.html_text_.UnsafeSetDefault(html_text);
  }
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDataProto.Item.html_text)
}

// optional string text = 2;
inline bool ClipDataProto_Item::has_text() const {
  return data_case() == kText;
}
inline void ClipDataProto_Item::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void ClipDataProto_Item::clear_text() {
  if (has_text()) {
    data_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& ClipDataProto_Item::text() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.Item.text)
  if (has_text()) {
    return data_.text_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ClipDataProto_Item::set_text(const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.text)
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.text)
}
inline void ClipDataProto_Item::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.text)
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.ClipDataProto.Item.text)
}
inline void ClipDataProto_Item::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.ClipDataProto.Item.text)
}
inline void ClipDataProto_Item::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.ClipDataProto.Item.text)
}
inline std::string* ClipDataProto_Item::mutable_text() {
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:android.content.ClipDataProto.Item.text)
  return data_.text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClipDataProto_Item::release_text() {
  // @@protoc_insertion_point(field_release:android.content.ClipDataProto.Item.text)
  if (has_text()) {
    clear_has_data();
    return data_.text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ClipDataProto_Item::set_allocated_text(std::string* text) {
  if (has_data()) {
    clear_data();
  }
  if (text != nullptr) {
    set_has_text();
    data_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDataProto.Item.text)
}

// optional string uri = 3;
inline bool ClipDataProto_Item::has_uri() const {
  return data_case() == kUri;
}
inline void ClipDataProto_Item::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void ClipDataProto_Item::clear_uri() {
  if (has_uri()) {
    data_.uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& ClipDataProto_Item::uri() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.Item.uri)
  if (has_uri()) {
    return data_.uri_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ClipDataProto_Item::set_uri(const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.uri)
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.uri)
}
inline void ClipDataProto_Item::set_uri(std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.uri)
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.ClipDataProto.Item.uri)
}
inline void ClipDataProto_Item::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.ClipDataProto.Item.uri)
}
inline void ClipDataProto_Item::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.ClipDataProto.Item.uri)
}
inline std::string* ClipDataProto_Item::mutable_uri() {
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:android.content.ClipDataProto.Item.uri)
  return data_.uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClipDataProto_Item::release_uri() {
  // @@protoc_insertion_point(field_release:android.content.ClipDataProto.Item.uri)
  if (has_uri()) {
    clear_has_data();
    return data_.uri_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ClipDataProto_Item::set_allocated_uri(std::string* uri) {
  if (has_data()) {
    clear_data();
  }
  if (uri != nullptr) {
    set_has_uri();
    data_.uri_.UnsafeSetDefault(uri);
  }
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDataProto.Item.uri)
}

// optional .android.content.IntentProto intent = 4;
inline bool ClipDataProto_Item::has_intent() const {
  return data_case() == kIntent;
}
inline void ClipDataProto_Item::set_has_intent() {
  _oneof_case_[0] = kIntent;
}
inline ::android::content::IntentProto* ClipDataProto_Item::release_intent() {
  // @@protoc_insertion_point(field_release:android.content.ClipDataProto.Item.intent)
  if (has_intent()) {
    clear_has_data();
      ::android::content::IntentProto* temp = data_.intent_;
    data_.intent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::content::IntentProto& ClipDataProto_Item::intent() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.Item.intent)
  return has_intent()
      ? *data_.intent_
      : *reinterpret_cast< ::android::content::IntentProto*>(&::android::content::_IntentProto_default_instance_);
}
inline ::android::content::IntentProto* ClipDataProto_Item::mutable_intent() {
  if (!has_intent()) {
    clear_data();
    set_has_intent();
    data_.intent_ = CreateMaybeMessage< ::android::content::IntentProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.content.ClipDataProto.Item.intent)
  return data_.intent_;
}

// optional bool nothing = 5 [(.android.privacy) = {
inline bool ClipDataProto_Item::has_nothing() const {
  return data_case() == kNothing;
}
inline void ClipDataProto_Item::set_has_nothing() {
  _oneof_case_[0] = kNothing;
}
inline void ClipDataProto_Item::clear_nothing() {
  if (has_nothing()) {
    data_.nothing_ = false;
    clear_has_data();
  }
}
inline bool ClipDataProto_Item::nothing() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.Item.nothing)
  if (has_nothing()) {
    return data_.nothing_;
  }
  return false;
}
inline void ClipDataProto_Item::set_nothing(bool value) {
  if (!has_nothing()) {
    clear_data();
    set_has_nothing();
  }
  data_.nothing_ = value;
  // @@protoc_insertion_point(field_set:android.content.ClipDataProto.Item.nothing)
}

inline bool ClipDataProto_Item::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ClipDataProto_Item::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ClipDataProto_Item::DataCase ClipDataProto_Item::data_case() const {
  return ClipDataProto_Item::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClipDataProto

// optional .android.content.ClipDescriptionProto description = 1;
inline bool ClipDataProto::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ClipDescriptionProto& ClipDataProto::description() const {
  const ::android::content::ClipDescriptionProto* p = description_;
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.description)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ClipDescriptionProto*>(
      &::android::content::_ClipDescriptionProto_default_instance_);
}
inline ::android::content::ClipDescriptionProto* ClipDataProto::release_description() {
  // @@protoc_insertion_point(field_release:android.content.ClipDataProto.description)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ClipDescriptionProto* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::android::content::ClipDescriptionProto* ClipDataProto::mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ClipDescriptionProto>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.content.ClipDataProto.description)
  return description_;
}
inline void ClipDataProto::set_allocated_description(::android::content::ClipDescriptionProto* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDataProto.description)
}

// optional .android.content.ClipDataProto.Icon icon = 2;
inline bool ClipDataProto::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClipDataProto::clear_icon() {
  if (icon_ != nullptr) icon_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::content::ClipDataProto_Icon& ClipDataProto::icon() const {
  const ::android::content::ClipDataProto_Icon* p = icon_;
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.icon)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ClipDataProto_Icon*>(
      &::android::content::_ClipDataProto_Icon_default_instance_);
}
inline ::android::content::ClipDataProto_Icon* ClipDataProto::release_icon() {
  // @@protoc_insertion_point(field_release:android.content.ClipDataProto.icon)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ClipDataProto_Icon* temp = icon_;
  icon_ = nullptr;
  return temp;
}
inline ::android::content::ClipDataProto_Icon* ClipDataProto::mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  if (icon_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ClipDataProto_Icon>(GetArenaNoVirtual());
    icon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.content.ClipDataProto.icon)
  return icon_;
}
inline void ClipDataProto::set_allocated_icon(::android::content::ClipDataProto_Icon* icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete icon_;
  }
  if (icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_ = icon;
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDataProto.icon)
}

// repeated .android.content.ClipDataProto.Item items = 3;
inline int ClipDataProto::items_size() const {
  return items_.size();
}
inline void ClipDataProto::clear_items() {
  items_.Clear();
}
inline ::android::content::ClipDataProto_Item* ClipDataProto::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.ClipDataProto.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ClipDataProto_Item >*
ClipDataProto::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:android.content.ClipDataProto.items)
  return &items_;
}
inline const ::android::content::ClipDataProto_Item& ClipDataProto::items(int index) const {
  // @@protoc_insertion_point(field_get:android.content.ClipDataProto.items)
  return items_.Get(index);
}
inline ::android::content::ClipDataProto_Item* ClipDataProto::add_items() {
  // @@protoc_insertion_point(field_add:android.content.ClipDataProto.items)
  return items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ClipDataProto_Item >&
ClipDataProto::items() const {
  // @@protoc_insertion_point(field_list:android.content.ClipDataProto.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto
