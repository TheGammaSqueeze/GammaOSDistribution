// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/net/networkrequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/net/networkcapabilities.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto;
namespace android {
namespace net {
class NetworkRequestProto;
class NetworkRequestProtoDefaultTypeInternal;
extern NetworkRequestProtoDefaultTypeInternal _NetworkRequestProto_default_instance_;
}  // namespace net
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::net::NetworkRequestProto* Arena::CreateMaybeMessage<::android::net::NetworkRequestProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace net {

enum NetworkRequestProto_Type : int {
  NetworkRequestProto_Type_TYPE_UNKNOWN = 0,
  NetworkRequestProto_Type_TYPE_NONE = 1,
  NetworkRequestProto_Type_TYPE_LISTEN = 2,
  NetworkRequestProto_Type_TYPE_TRACK_DEFAULT = 3,
  NetworkRequestProto_Type_TYPE_REQUEST = 4,
  NetworkRequestProto_Type_TYPE_BACKGROUND_REQUEST = 5,
  NetworkRequestProto_Type_TYPE_TRACK_SYSTEM_DEFAULT = 6
};
bool NetworkRequestProto_Type_IsValid(int value);
constexpr NetworkRequestProto_Type NetworkRequestProto_Type_Type_MIN = NetworkRequestProto_Type_TYPE_UNKNOWN;
constexpr NetworkRequestProto_Type NetworkRequestProto_Type_Type_MAX = NetworkRequestProto_Type_TYPE_TRACK_SYSTEM_DEFAULT;
constexpr int NetworkRequestProto_Type_Type_ARRAYSIZE = NetworkRequestProto_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkRequestProto_Type_descriptor();
template<typename T>
inline const std::string& NetworkRequestProto_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkRequestProto_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkRequestProto_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkRequestProto_Type_descriptor(), enum_t_value);
}
inline bool NetworkRequestProto_Type_Parse(
    const std::string& name, NetworkRequestProto_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkRequestProto_Type>(
    NetworkRequestProto_Type_descriptor(), name, value);
}
// ===================================================================

class NetworkRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.net.NetworkRequestProto) */ {
 public:
  NetworkRequestProto();
  virtual ~NetworkRequestProto();

  NetworkRequestProto(const NetworkRequestProto& from);
  NetworkRequestProto(NetworkRequestProto&& from) noexcept
    : NetworkRequestProto() {
    *this = ::std::move(from);
  }

  inline NetworkRequestProto& operator=(const NetworkRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkRequestProto& operator=(NetworkRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkRequestProto* internal_default_instance() {
    return reinterpret_cast<const NetworkRequestProto*>(
               &_NetworkRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkRequestProto& a, NetworkRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkRequestProto* New() const final {
    return CreateMaybeMessage<NetworkRequestProto>(nullptr);
  }

  NetworkRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkRequestProto& from);
  void MergeFrom(const NetworkRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.net.NetworkRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NetworkRequestProto_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    NetworkRequestProto_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_NONE =
    NetworkRequestProto_Type_TYPE_NONE;
  static constexpr Type TYPE_LISTEN =
    NetworkRequestProto_Type_TYPE_LISTEN;
  static constexpr Type TYPE_TRACK_DEFAULT =
    NetworkRequestProto_Type_TYPE_TRACK_DEFAULT;
  static constexpr Type TYPE_REQUEST =
    NetworkRequestProto_Type_TYPE_REQUEST;
  static constexpr Type TYPE_BACKGROUND_REQUEST =
    NetworkRequestProto_Type_TYPE_BACKGROUND_REQUEST;
  static constexpr Type TYPE_TRACK_SYSTEM_DEFAULT =
    NetworkRequestProto_Type_TYPE_TRACK_SYSTEM_DEFAULT;
  static inline bool Type_IsValid(int value) {
    return NetworkRequestProto_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    NetworkRequestProto_Type_Type_MIN;
  static constexpr Type Type_MAX =
    NetworkRequestProto_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    NetworkRequestProto_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return NetworkRequestProto_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return NetworkRequestProto_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return NetworkRequestProto_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkCapabilitiesFieldNumber = 4,
    kTypeFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kLegacyTypeFieldNumber = 3,
  };
  // optional .android.net.NetworkCapabilitiesProto network_capabilities = 4;
  bool has_network_capabilities() const;
  void clear_network_capabilities();
  const ::android::net::NetworkCapabilitiesProto& network_capabilities() const;
  ::android::net::NetworkCapabilitiesProto* release_network_capabilities();
  ::android::net::NetworkCapabilitiesProto* mutable_network_capabilities();
  void set_allocated_network_capabilities(::android::net::NetworkCapabilitiesProto* network_capabilities);

  // optional .android.net.NetworkRequestProto.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::android::net::NetworkRequestProto_Type type() const;
  void set_type(::android::net::NetworkRequestProto_Type value);

  // optional int32 request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 legacy_type = 3;
  bool has_legacy_type() const;
  void clear_legacy_type();
  ::PROTOBUF_NAMESPACE_ID::int32 legacy_type() const;
  void set_legacy_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.net.NetworkRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::net::NetworkCapabilitiesProto* network_capabilities_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 legacy_type_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkRequestProto

// optional .android.net.NetworkRequestProto.Type type = 1;
inline bool NetworkRequestProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkRequestProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::net::NetworkRequestProto_Type NetworkRequestProto::type() const {
  // @@protoc_insertion_point(field_get:android.net.NetworkRequestProto.type)
  return static_cast< ::android::net::NetworkRequestProto_Type >(type_);
}
inline void NetworkRequestProto::set_type(::android::net::NetworkRequestProto_Type value) {
  assert(::android::net::NetworkRequestProto_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:android.net.NetworkRequestProto.type)
}

// optional int32 request_id = 2;
inline bool NetworkRequestProto::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkRequestProto::clear_request_id() {
  request_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkRequestProto::request_id() const {
  // @@protoc_insertion_point(field_get:android.net.NetworkRequestProto.request_id)
  return request_id_;
}
inline void NetworkRequestProto::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  request_id_ = value;
  // @@protoc_insertion_point(field_set:android.net.NetworkRequestProto.request_id)
}

// optional int32 legacy_type = 3;
inline bool NetworkRequestProto::has_legacy_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkRequestProto::clear_legacy_type() {
  legacy_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkRequestProto::legacy_type() const {
  // @@protoc_insertion_point(field_get:android.net.NetworkRequestProto.legacy_type)
  return legacy_type_;
}
inline void NetworkRequestProto::set_legacy_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  legacy_type_ = value;
  // @@protoc_insertion_point(field_set:android.net.NetworkRequestProto.legacy_type)
}

// optional .android.net.NetworkCapabilitiesProto network_capabilities = 4;
inline bool NetworkRequestProto::has_network_capabilities() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::net::NetworkCapabilitiesProto& NetworkRequestProto::network_capabilities() const {
  const ::android::net::NetworkCapabilitiesProto* p = network_capabilities_;
  // @@protoc_insertion_point(field_get:android.net.NetworkRequestProto.network_capabilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::net::NetworkCapabilitiesProto*>(
      &::android::net::_NetworkCapabilitiesProto_default_instance_);
}
inline ::android::net::NetworkCapabilitiesProto* NetworkRequestProto::release_network_capabilities() {
  // @@protoc_insertion_point(field_release:android.net.NetworkRequestProto.network_capabilities)
  _has_bits_[0] &= ~0x00000001u;
  ::android::net::NetworkCapabilitiesProto* temp = network_capabilities_;
  network_capabilities_ = nullptr;
  return temp;
}
inline ::android::net::NetworkCapabilitiesProto* NetworkRequestProto::mutable_network_capabilities() {
  _has_bits_[0] |= 0x00000001u;
  if (network_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::net::NetworkCapabilitiesProto>(GetArenaNoVirtual());
    network_capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.net.NetworkRequestProto.network_capabilities)
  return network_capabilities_;
}
inline void NetworkRequestProto::set_allocated_network_capabilities(::android::net::NetworkCapabilitiesProto* network_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_capabilities_);
  }
  if (network_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_capabilities, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  network_capabilities_ = network_capabilities;
  // @@protoc_insertion_point(field_set_allocated:android.net.NetworkRequestProto.network_capabilities)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::net::NetworkRequestProto_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::net::NetworkRequestProto_Type>() {
  return ::android::net::NetworkRequestProto_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto
