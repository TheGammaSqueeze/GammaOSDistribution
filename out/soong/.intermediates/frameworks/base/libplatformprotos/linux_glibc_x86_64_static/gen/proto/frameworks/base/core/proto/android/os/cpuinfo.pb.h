// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/cpuinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
namespace android {
namespace os {
class CpuInfoProto;
class CpuInfoProtoDefaultTypeInternal;
extern CpuInfoProtoDefaultTypeInternal _CpuInfoProto_default_instance_;
class CpuInfoProto_CpuUsage;
class CpuInfoProto_CpuUsageDefaultTypeInternal;
extern CpuInfoProto_CpuUsageDefaultTypeInternal _CpuInfoProto_CpuUsage_default_instance_;
class CpuInfoProto_MemStats;
class CpuInfoProto_MemStatsDefaultTypeInternal;
extern CpuInfoProto_MemStatsDefaultTypeInternal _CpuInfoProto_MemStats_default_instance_;
class CpuInfoProto_Task;
class CpuInfoProto_TaskDefaultTypeInternal;
extern CpuInfoProto_TaskDefaultTypeInternal _CpuInfoProto_Task_default_instance_;
class CpuInfoProto_TaskStats;
class CpuInfoProto_TaskStatsDefaultTypeInternal;
extern CpuInfoProto_TaskStatsDefaultTypeInternal _CpuInfoProto_TaskStats_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::CpuInfoProto* Arena::CreateMaybeMessage<::android::os::CpuInfoProto>(Arena*);
template<> ::android::os::CpuInfoProto_CpuUsage* Arena::CreateMaybeMessage<::android::os::CpuInfoProto_CpuUsage>(Arena*);
template<> ::android::os::CpuInfoProto_MemStats* Arena::CreateMaybeMessage<::android::os::CpuInfoProto_MemStats>(Arena*);
template<> ::android::os::CpuInfoProto_Task* Arena::CreateMaybeMessage<::android::os::CpuInfoProto_Task>(Arena*);
template<> ::android::os::CpuInfoProto_TaskStats* Arena::CreateMaybeMessage<::android::os::CpuInfoProto_TaskStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

enum CpuInfoProto_Task_Status : int {
  CpuInfoProto_Task_Status_STATUS_UNKNOWN = 0,
  CpuInfoProto_Task_Status_STATUS_D = 1,
  CpuInfoProto_Task_Status_STATUS_R = 2,
  CpuInfoProto_Task_Status_STATUS_S = 3,
  CpuInfoProto_Task_Status_STATUS_T = 4,
  CpuInfoProto_Task_Status_STATUS_Z = 5
};
bool CpuInfoProto_Task_Status_IsValid(int value);
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task_Status_Status_MIN = CpuInfoProto_Task_Status_STATUS_UNKNOWN;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task_Status_Status_MAX = CpuInfoProto_Task_Status_STATUS_Z;
constexpr int CpuInfoProto_Task_Status_Status_ARRAYSIZE = CpuInfoProto_Task_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CpuInfoProto_Task_Status_descriptor();
template<typename T>
inline const std::string& CpuInfoProto_Task_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CpuInfoProto_Task_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CpuInfoProto_Task_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CpuInfoProto_Task_Status_descriptor(), enum_t_value);
}
inline bool CpuInfoProto_Task_Status_Parse(
    const std::string& name, CpuInfoProto_Task_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CpuInfoProto_Task_Status>(
    CpuInfoProto_Task_Status_descriptor(), name, value);
}
enum CpuInfoProto_Task_Policy : int {
  CpuInfoProto_Task_Policy_POLICY_UNKNOWN = 0,
  CpuInfoProto_Task_Policy_POLICY_fg = 1,
  CpuInfoProto_Task_Policy_POLICY_bg = 2,
  CpuInfoProto_Task_Policy_POLICY_ta = 3
};
bool CpuInfoProto_Task_Policy_IsValid(int value);
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task_Policy_Policy_MIN = CpuInfoProto_Task_Policy_POLICY_UNKNOWN;
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task_Policy_Policy_MAX = CpuInfoProto_Task_Policy_POLICY_ta;
constexpr int CpuInfoProto_Task_Policy_Policy_ARRAYSIZE = CpuInfoProto_Task_Policy_Policy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CpuInfoProto_Task_Policy_descriptor();
template<typename T>
inline const std::string& CpuInfoProto_Task_Policy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CpuInfoProto_Task_Policy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CpuInfoProto_Task_Policy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CpuInfoProto_Task_Policy_descriptor(), enum_t_value);
}
inline bool CpuInfoProto_Task_Policy_Parse(
    const std::string& name, CpuInfoProto_Task_Policy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CpuInfoProto_Task_Policy>(
    CpuInfoProto_Task_Policy_descriptor(), name, value);
}
// ===================================================================

class CpuInfoProto_TaskStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.CpuInfoProto.TaskStats) */ {
 public:
  CpuInfoProto_TaskStats();
  virtual ~CpuInfoProto_TaskStats();

  CpuInfoProto_TaskStats(const CpuInfoProto_TaskStats& from);
  CpuInfoProto_TaskStats(CpuInfoProto_TaskStats&& from) noexcept
    : CpuInfoProto_TaskStats() {
    *this = ::std::move(from);
  }

  inline CpuInfoProto_TaskStats& operator=(const CpuInfoProto_TaskStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfoProto_TaskStats& operator=(CpuInfoProto_TaskStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuInfoProto_TaskStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfoProto_TaskStats* internal_default_instance() {
    return reinterpret_cast<const CpuInfoProto_TaskStats*>(
               &_CpuInfoProto_TaskStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuInfoProto_TaskStats& a, CpuInfoProto_TaskStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfoProto_TaskStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuInfoProto_TaskStats* New() const final {
    return CreateMaybeMessage<CpuInfoProto_TaskStats>(nullptr);
  }

  CpuInfoProto_TaskStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfoProto_TaskStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuInfoProto_TaskStats& from);
  void MergeFrom(const CpuInfoProto_TaskStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfoProto_TaskStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuInfoProto.TaskStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kRunningFieldNumber = 2,
    kSleepingFieldNumber = 3,
    kStoppedFieldNumber = 4,
    kZombieFieldNumber = 5,
  };
  // optional int32 total = 1;
  bool has_total() const;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 running = 2;
  bool has_running() const;
  void clear_running();
  ::PROTOBUF_NAMESPACE_ID::int32 running() const;
  void set_running(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 sleeping = 3;
  bool has_sleeping() const;
  void clear_sleeping();
  ::PROTOBUF_NAMESPACE_ID::int32 sleeping() const;
  void set_sleeping(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 stopped = 4;
  bool has_stopped() const;
  void clear_stopped();
  ::PROTOBUF_NAMESPACE_ID::int32 stopped() const;
  void set_stopped(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 zombie = 5;
  bool has_zombie() const;
  void clear_zombie();
  ::PROTOBUF_NAMESPACE_ID::int32 zombie() const;
  void set_zombie(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.CpuInfoProto.TaskStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 running_;
  ::PROTOBUF_NAMESPACE_ID::int32 sleeping_;
  ::PROTOBUF_NAMESPACE_ID::int32 stopped_;
  ::PROTOBUF_NAMESPACE_ID::int32 zombie_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
};
// -------------------------------------------------------------------

class CpuInfoProto_MemStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.CpuInfoProto.MemStats) */ {
 public:
  CpuInfoProto_MemStats();
  virtual ~CpuInfoProto_MemStats();

  CpuInfoProto_MemStats(const CpuInfoProto_MemStats& from);
  CpuInfoProto_MemStats(CpuInfoProto_MemStats&& from) noexcept
    : CpuInfoProto_MemStats() {
    *this = ::std::move(from);
  }

  inline CpuInfoProto_MemStats& operator=(const CpuInfoProto_MemStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfoProto_MemStats& operator=(CpuInfoProto_MemStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuInfoProto_MemStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfoProto_MemStats* internal_default_instance() {
    return reinterpret_cast<const CpuInfoProto_MemStats*>(
               &_CpuInfoProto_MemStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuInfoProto_MemStats& a, CpuInfoProto_MemStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfoProto_MemStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuInfoProto_MemStats* New() const final {
    return CreateMaybeMessage<CpuInfoProto_MemStats>(nullptr);
  }

  CpuInfoProto_MemStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfoProto_MemStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuInfoProto_MemStats& from);
  void MergeFrom(const CpuInfoProto_MemStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfoProto_MemStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuInfoProto.MemStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kUsedFieldNumber = 2,
    kFreeFieldNumber = 3,
    kBuffersFieldNumber = 4,
    kCachedFieldNumber = 5,
  };
  // optional int32 total = 1;
  bool has_total() const;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 used = 2;
  bool has_used() const;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::int32 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 free = 3;
  bool has_free() const;
  void clear_free();
  ::PROTOBUF_NAMESPACE_ID::int32 free() const;
  void set_free(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 buffers = 4;
  bool has_buffers() const;
  void clear_buffers();
  ::PROTOBUF_NAMESPACE_ID::int32 buffers() const;
  void set_buffers(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cached = 5;
  bool has_cached() const;
  void clear_cached();
  ::PROTOBUF_NAMESPACE_ID::int32 cached() const;
  void set_cached(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.CpuInfoProto.MemStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 used_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffers_;
  ::PROTOBUF_NAMESPACE_ID::int32 cached_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
};
// -------------------------------------------------------------------

class CpuInfoProto_CpuUsage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.CpuInfoProto.CpuUsage) */ {
 public:
  CpuInfoProto_CpuUsage();
  virtual ~CpuInfoProto_CpuUsage();

  CpuInfoProto_CpuUsage(const CpuInfoProto_CpuUsage& from);
  CpuInfoProto_CpuUsage(CpuInfoProto_CpuUsage&& from) noexcept
    : CpuInfoProto_CpuUsage() {
    *this = ::std::move(from);
  }

  inline CpuInfoProto_CpuUsage& operator=(const CpuInfoProto_CpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfoProto_CpuUsage& operator=(CpuInfoProto_CpuUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuInfoProto_CpuUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfoProto_CpuUsage* internal_default_instance() {
    return reinterpret_cast<const CpuInfoProto_CpuUsage*>(
               &_CpuInfoProto_CpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuInfoProto_CpuUsage& a, CpuInfoProto_CpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfoProto_CpuUsage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuInfoProto_CpuUsage* New() const final {
    return CreateMaybeMessage<CpuInfoProto_CpuUsage>(nullptr);
  }

  CpuInfoProto_CpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfoProto_CpuUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuInfoProto_CpuUsage& from);
  void MergeFrom(const CpuInfoProto_CpuUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfoProto_CpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuInfoProto.CpuUsage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kUserFieldNumber = 2,
    kNiceFieldNumber = 3,
    kSysFieldNumber = 4,
    kIdleFieldNumber = 5,
    kIowFieldNumber = 6,
    kIrqFieldNumber = 7,
    kSirqFieldNumber = 8,
    kHostFieldNumber = 9,
  };
  // optional int32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 user = 2;
  bool has_user() const;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::int32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 nice = 3;
  bool has_nice() const;
  void clear_nice();
  ::PROTOBUF_NAMESPACE_ID::int32 nice() const;
  void set_nice(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 sys = 4;
  bool has_sys() const;
  void clear_sys();
  ::PROTOBUF_NAMESPACE_ID::int32 sys() const;
  void set_sys(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 idle = 5;
  bool has_idle() const;
  void clear_idle();
  ::PROTOBUF_NAMESPACE_ID::int32 idle() const;
  void set_idle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 iow = 6;
  bool has_iow() const;
  void clear_iow();
  ::PROTOBUF_NAMESPACE_ID::int32 iow() const;
  void set_iow(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 irq = 7;
  bool has_irq() const;
  void clear_irq();
  ::PROTOBUF_NAMESPACE_ID::int32 irq() const;
  void set_irq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 sirq = 8;
  bool has_sirq() const;
  void clear_sirq();
  ::PROTOBUF_NAMESPACE_ID::int32 sirq() const;
  void set_sirq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 host = 9;
  bool has_host() const;
  void clear_host();
  ::PROTOBUF_NAMESPACE_ID::int32 host() const;
  void set_host(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.CpuInfoProto.CpuUsage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_;
  ::PROTOBUF_NAMESPACE_ID::int32 nice_;
  ::PROTOBUF_NAMESPACE_ID::int32 sys_;
  ::PROTOBUF_NAMESPACE_ID::int32 idle_;
  ::PROTOBUF_NAMESPACE_ID::int32 iow_;
  ::PROTOBUF_NAMESPACE_ID::int32 irq_;
  ::PROTOBUF_NAMESPACE_ID::int32 sirq_;
  ::PROTOBUF_NAMESPACE_ID::int32 host_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
};
// -------------------------------------------------------------------

class CpuInfoProto_Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.CpuInfoProto.Task) */ {
 public:
  CpuInfoProto_Task();
  virtual ~CpuInfoProto_Task();

  CpuInfoProto_Task(const CpuInfoProto_Task& from);
  CpuInfoProto_Task(CpuInfoProto_Task&& from) noexcept
    : CpuInfoProto_Task() {
    *this = ::std::move(from);
  }

  inline CpuInfoProto_Task& operator=(const CpuInfoProto_Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfoProto_Task& operator=(CpuInfoProto_Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuInfoProto_Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfoProto_Task* internal_default_instance() {
    return reinterpret_cast<const CpuInfoProto_Task*>(
               &_CpuInfoProto_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CpuInfoProto_Task& a, CpuInfoProto_Task& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfoProto_Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuInfoProto_Task* New() const final {
    return CreateMaybeMessage<CpuInfoProto_Task>(nullptr);
  }

  CpuInfoProto_Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfoProto_Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuInfoProto_Task& from);
  void MergeFrom(const CpuInfoProto_Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfoProto_Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuInfoProto.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CpuInfoProto_Task_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    CpuInfoProto_Task_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_D =
    CpuInfoProto_Task_Status_STATUS_D;
  static constexpr Status STATUS_R =
    CpuInfoProto_Task_Status_STATUS_R;
  static constexpr Status STATUS_S =
    CpuInfoProto_Task_Status_STATUS_S;
  static constexpr Status STATUS_T =
    CpuInfoProto_Task_Status_STATUS_T;
  static constexpr Status STATUS_Z =
    CpuInfoProto_Task_Status_STATUS_Z;
  static inline bool Status_IsValid(int value) {
    return CpuInfoProto_Task_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    CpuInfoProto_Task_Status_Status_MIN;
  static constexpr Status Status_MAX =
    CpuInfoProto_Task_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    CpuInfoProto_Task_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return CpuInfoProto_Task_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return CpuInfoProto_Task_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return CpuInfoProto_Task_Status_Parse(name, value);
  }

  typedef CpuInfoProto_Task_Policy Policy;
  static constexpr Policy POLICY_UNKNOWN =
    CpuInfoProto_Task_Policy_POLICY_UNKNOWN;
  static constexpr Policy POLICY_fg =
    CpuInfoProto_Task_Policy_POLICY_fg;
  static constexpr Policy POLICY_bg =
    CpuInfoProto_Task_Policy_POLICY_bg;
  static constexpr Policy POLICY_ta =
    CpuInfoProto_Task_Policy_POLICY_ta;
  static inline bool Policy_IsValid(int value) {
    return CpuInfoProto_Task_Policy_IsValid(value);
  }
  static constexpr Policy Policy_MIN =
    CpuInfoProto_Task_Policy_Policy_MIN;
  static constexpr Policy Policy_MAX =
    CpuInfoProto_Task_Policy_Policy_MAX;
  static constexpr int Policy_ARRAYSIZE =
    CpuInfoProto_Task_Policy_Policy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Policy_descriptor() {
    return CpuInfoProto_Task_Policy_descriptor();
  }
  template<typename T>
  static inline const std::string& Policy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Policy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Policy_Name.");
    return CpuInfoProto_Task_Policy_Name(enum_t_value);
  }
  static inline bool Policy_Parse(const std::string& name,
      Policy* value) {
    return CpuInfoProto_Task_Policy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 3,
    kPrFieldNumber = 4,
    kVirtFieldNumber = 8,
    kResFieldNumber = 9,
    kCmdFieldNumber = 11,
    kNameFieldNumber = 12,
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kNiFieldNumber = 5,
    kCpuFieldNumber = 6,
    kSFieldNumber = 7,
    kPcyFieldNumber = 10,
  };
  // optional string user = 3;
  bool has_user() const;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // optional string pr = 4;
  bool has_pr() const;
  void clear_pr();
  const std::string& pr() const;
  void set_pr(const std::string& value);
  void set_pr(std::string&& value);
  void set_pr(const char* value);
  void set_pr(const char* value, size_t size);
  std::string* mutable_pr();
  std::string* release_pr();
  void set_allocated_pr(std::string* pr);

  // optional string virt = 8;
  bool has_virt() const;
  void clear_virt();
  const std::string& virt() const;
  void set_virt(const std::string& value);
  void set_virt(std::string&& value);
  void set_virt(const char* value);
  void set_virt(const char* value, size_t size);
  std::string* mutable_virt();
  std::string* release_virt();
  void set_allocated_virt(std::string* virt);

  // optional string res = 9;
  bool has_res() const;
  void clear_res();
  const std::string& res() const;
  void set_res(const std::string& value);
  void set_res(std::string&& value);
  void set_res(const char* value);
  void set_res(const char* value, size_t size);
  std::string* mutable_res();
  std::string* release_res();
  void set_allocated_res(std::string* res);

  // optional string cmd = 11;
  bool has_cmd() const;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // optional string name = 12;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tid = 2;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 ni = 5;
  bool has_ni() const;
  void clear_ni();
  ::PROTOBUF_NAMESPACE_ID::int32 ni() const;
  void set_ni(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float cpu = 6;
  bool has_cpu() const;
  void clear_cpu();
  float cpu() const;
  void set_cpu(float value);

  // optional .android.os.CpuInfoProto.Task.Status s = 7;
  bool has_s() const;
  void clear_s();
  ::android::os::CpuInfoProto_Task_Status s() const;
  void set_s(::android::os::CpuInfoProto_Task_Status value);

  // optional .android.os.CpuInfoProto.Task.Policy pcy = 10;
  bool has_pcy() const;
  void clear_pcy();
  ::android::os::CpuInfoProto_Task_Policy pcy() const;
  void set_pcy(::android::os::CpuInfoProto_Task_Policy value);

  // @@protoc_insertion_point(class_scope:android.os.CpuInfoProto.Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ni_;
  float cpu_;
  int s_;
  int pcy_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
};
// -------------------------------------------------------------------

class CpuInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.CpuInfoProto) */ {
 public:
  CpuInfoProto();
  virtual ~CpuInfoProto();

  CpuInfoProto(const CpuInfoProto& from);
  CpuInfoProto(CpuInfoProto&& from) noexcept
    : CpuInfoProto() {
    *this = ::std::move(from);
  }

  inline CpuInfoProto& operator=(const CpuInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfoProto& operator=(CpuInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfoProto* internal_default_instance() {
    return reinterpret_cast<const CpuInfoProto*>(
               &_CpuInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CpuInfoProto& a, CpuInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuInfoProto* New() const final {
    return CreateMaybeMessage<CpuInfoProto>(nullptr);
  }

  CpuInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuInfoProto& from);
  void MergeFrom(const CpuInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CpuInfoProto_TaskStats TaskStats;
  typedef CpuInfoProto_MemStats MemStats;
  typedef CpuInfoProto_CpuUsage CpuUsage;
  typedef CpuInfoProto_Task Task;

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 5,
    kTaskStatsFieldNumber = 1,
    kMemFieldNumber = 2,
    kSwapFieldNumber = 3,
    kCpuUsageFieldNumber = 4,
  };
  // repeated .android.os.CpuInfoProto.Task tasks = 5;
  int tasks_size() const;
  void clear_tasks();
  ::android::os::CpuInfoProto_Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuInfoProto_Task >*
      mutable_tasks();
  const ::android::os::CpuInfoProto_Task& tasks(int index) const;
  ::android::os::CpuInfoProto_Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuInfoProto_Task >&
      tasks() const;

  // optional .android.os.CpuInfoProto.TaskStats task_stats = 1;
  bool has_task_stats() const;
  void clear_task_stats();
  const ::android::os::CpuInfoProto_TaskStats& task_stats() const;
  ::android::os::CpuInfoProto_TaskStats* release_task_stats();
  ::android::os::CpuInfoProto_TaskStats* mutable_task_stats();
  void set_allocated_task_stats(::android::os::CpuInfoProto_TaskStats* task_stats);

  // optional .android.os.CpuInfoProto.MemStats mem = 2;
  bool has_mem() const;
  void clear_mem();
  const ::android::os::CpuInfoProto_MemStats& mem() const;
  ::android::os::CpuInfoProto_MemStats* release_mem();
  ::android::os::CpuInfoProto_MemStats* mutable_mem();
  void set_allocated_mem(::android::os::CpuInfoProto_MemStats* mem);

  // optional .android.os.CpuInfoProto.MemStats swap = 3;
  bool has_swap() const;
  void clear_swap();
  const ::android::os::CpuInfoProto_MemStats& swap() const;
  ::android::os::CpuInfoProto_MemStats* release_swap();
  ::android::os::CpuInfoProto_MemStats* mutable_swap();
  void set_allocated_swap(::android::os::CpuInfoProto_MemStats* swap);

  // optional .android.os.CpuInfoProto.CpuUsage cpu_usage = 4;
  bool has_cpu_usage() const;
  void clear_cpu_usage();
  const ::android::os::CpuInfoProto_CpuUsage& cpu_usage() const;
  ::android::os::CpuInfoProto_CpuUsage* release_cpu_usage();
  ::android::os::CpuInfoProto_CpuUsage* mutable_cpu_usage();
  void set_allocated_cpu_usage(::android::os::CpuInfoProto_CpuUsage* cpu_usage);

  // @@protoc_insertion_point(class_scope:android.os.CpuInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuInfoProto_Task > tasks_;
  ::android::os::CpuInfoProto_TaskStats* task_stats_;
  ::android::os::CpuInfoProto_MemStats* mem_;
  ::android::os::CpuInfoProto_MemStats* swap_;
  ::android::os::CpuInfoProto_CpuUsage* cpu_usage_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuInfoProto_TaskStats

// optional int32 total = 1;
inline bool CpuInfoProto_TaskStats::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuInfoProto_TaskStats::clear_total() {
  total_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_TaskStats::total() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.TaskStats.total)
  return total_;
}
inline void CpuInfoProto_TaskStats::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.TaskStats.total)
}

// optional int32 running = 2;
inline bool CpuInfoProto_TaskStats::has_running() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuInfoProto_TaskStats::clear_running() {
  running_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_TaskStats::running() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.TaskStats.running)
  return running_;
}
inline void CpuInfoProto_TaskStats::set_running(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  running_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.TaskStats.running)
}

// optional int32 sleeping = 3;
inline bool CpuInfoProto_TaskStats::has_sleeping() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuInfoProto_TaskStats::clear_sleeping() {
  sleeping_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_TaskStats::sleeping() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.TaskStats.sleeping)
  return sleeping_;
}
inline void CpuInfoProto_TaskStats::set_sleeping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sleeping_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.TaskStats.sleeping)
}

// optional int32 stopped = 4;
inline bool CpuInfoProto_TaskStats::has_stopped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuInfoProto_TaskStats::clear_stopped() {
  stopped_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_TaskStats::stopped() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.TaskStats.stopped)
  return stopped_;
}
inline void CpuInfoProto_TaskStats::set_stopped(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  stopped_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.TaskStats.stopped)
}

// optional int32 zombie = 5;
inline bool CpuInfoProto_TaskStats::has_zombie() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CpuInfoProto_TaskStats::clear_zombie() {
  zombie_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_TaskStats::zombie() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.TaskStats.zombie)
  return zombie_;
}
inline void CpuInfoProto_TaskStats::set_zombie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  zombie_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.TaskStats.zombie)
}

// -------------------------------------------------------------------

// CpuInfoProto_MemStats

// optional int32 total = 1;
inline bool CpuInfoProto_MemStats::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuInfoProto_MemStats::clear_total() {
  total_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_MemStats::total() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.MemStats.total)
  return total_;
}
inline void CpuInfoProto_MemStats::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.MemStats.total)
}

// optional int32 used = 2;
inline bool CpuInfoProto_MemStats::has_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuInfoProto_MemStats::clear_used() {
  used_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_MemStats::used() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.MemStats.used)
  return used_;
}
inline void CpuInfoProto_MemStats::set_used(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  used_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.MemStats.used)
}

// optional int32 free = 3;
inline bool CpuInfoProto_MemStats::has_free() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuInfoProto_MemStats::clear_free() {
  free_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_MemStats::free() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.MemStats.free)
  return free_;
}
inline void CpuInfoProto_MemStats::set_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  free_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.MemStats.free)
}

// optional int32 buffers = 4;
inline bool CpuInfoProto_MemStats::has_buffers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuInfoProto_MemStats::clear_buffers() {
  buffers_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_MemStats::buffers() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.MemStats.buffers)
  return buffers_;
}
inline void CpuInfoProto_MemStats::set_buffers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  buffers_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.MemStats.buffers)
}

// optional int32 cached = 5;
inline bool CpuInfoProto_MemStats::has_cached() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CpuInfoProto_MemStats::clear_cached() {
  cached_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_MemStats::cached() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.MemStats.cached)
  return cached_;
}
inline void CpuInfoProto_MemStats::set_cached(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  cached_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.MemStats.cached)
}

// -------------------------------------------------------------------

// CpuInfoProto_CpuUsage

// optional int32 cpu = 1;
inline bool CpuInfoProto_CpuUsage::has_cpu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_cpu() {
  cpu_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::cpu() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.cpu)
  return cpu_;
}
inline void CpuInfoProto_CpuUsage::set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.cpu)
}

// optional int32 user = 2;
inline bool CpuInfoProto_CpuUsage::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_user() {
  user_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::user() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.user)
  return user_;
}
inline void CpuInfoProto_CpuUsage::set_user(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.user)
}

// optional int32 nice = 3;
inline bool CpuInfoProto_CpuUsage::has_nice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_nice() {
  nice_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::nice() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.nice)
  return nice_;
}
inline void CpuInfoProto_CpuUsage::set_nice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  nice_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.nice)
}

// optional int32 sys = 4;
inline bool CpuInfoProto_CpuUsage::has_sys() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_sys() {
  sys_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::sys() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.sys)
  return sys_;
}
inline void CpuInfoProto_CpuUsage::set_sys(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  sys_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.sys)
}

// optional int32 idle = 5;
inline bool CpuInfoProto_CpuUsage::has_idle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_idle() {
  idle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::idle() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.idle)
  return idle_;
}
inline void CpuInfoProto_CpuUsage::set_idle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  idle_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.idle)
}

// optional int32 iow = 6;
inline bool CpuInfoProto_CpuUsage::has_iow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_iow() {
  iow_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::iow() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.iow)
  return iow_;
}
inline void CpuInfoProto_CpuUsage::set_iow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  iow_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.iow)
}

// optional int32 irq = 7;
inline bool CpuInfoProto_CpuUsage::has_irq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_irq() {
  irq_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::irq() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.irq)
  return irq_;
}
inline void CpuInfoProto_CpuUsage::set_irq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  irq_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.irq)
}

// optional int32 sirq = 8;
inline bool CpuInfoProto_CpuUsage::has_sirq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_sirq() {
  sirq_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::sirq() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.sirq)
  return sirq_;
}
inline void CpuInfoProto_CpuUsage::set_sirq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  sirq_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.sirq)
}

// optional int32 host = 9;
inline bool CpuInfoProto_CpuUsage::has_host() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CpuInfoProto_CpuUsage::clear_host() {
  host_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_CpuUsage::host() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.CpuUsage.host)
  return host_;
}
inline void CpuInfoProto_CpuUsage::set_host(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  host_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.CpuUsage.host)
}

// -------------------------------------------------------------------

// CpuInfoProto_Task

// optional int32 pid = 1;
inline bool CpuInfoProto_Task::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CpuInfoProto_Task::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_Task::pid() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.pid)
  return pid_;
}
inline void CpuInfoProto_Task::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.pid)
}

// optional int32 tid = 2;
inline bool CpuInfoProto_Task::has_tid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CpuInfoProto_Task::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_Task::tid() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.tid)
  return tid_;
}
inline void CpuInfoProto_Task::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.tid)
}

// optional string user = 3;
inline bool CpuInfoProto_Task::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuInfoProto_Task::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CpuInfoProto_Task::user() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.user)
  return user_.GetNoArena();
}
inline void CpuInfoProto_Task::set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.user)
}
inline void CpuInfoProto_Task::set_user(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.CpuInfoProto.Task.user)
}
inline void CpuInfoProto_Task::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.CpuInfoProto.Task.user)
}
inline void CpuInfoProto_Task::set_user(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.CpuInfoProto.Task.user)
}
inline std::string* CpuInfoProto_Task::mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.Task.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuInfoProto_Task::release_user() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.Task.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuInfoProto_Task::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.Task.user)
}

// optional string pr = 4;
inline bool CpuInfoProto_Task::has_pr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuInfoProto_Task::clear_pr() {
  pr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CpuInfoProto_Task::pr() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.pr)
  return pr_.GetNoArena();
}
inline void CpuInfoProto_Task::set_pr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.pr)
}
inline void CpuInfoProto_Task::set_pr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.CpuInfoProto.Task.pr)
}
inline void CpuInfoProto_Task::set_pr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.CpuInfoProto.Task.pr)
}
inline void CpuInfoProto_Task::set_pr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.CpuInfoProto.Task.pr)
}
inline std::string* CpuInfoProto_Task::mutable_pr() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.Task.pr)
  return pr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuInfoProto_Task::release_pr() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.Task.pr)
  if (!has_pr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pr_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuInfoProto_Task::set_allocated_pr(std::string* pr) {
  if (pr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pr);
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.Task.pr)
}

// optional sint32 ni = 5;
inline bool CpuInfoProto_Task::has_ni() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CpuInfoProto_Task::clear_ni() {
  ni_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuInfoProto_Task::ni() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.ni)
  return ni_;
}
inline void CpuInfoProto_Task::set_ni(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  ni_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.ni)
}

// optional float cpu = 6;
inline bool CpuInfoProto_Task::has_cpu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CpuInfoProto_Task::clear_cpu() {
  cpu_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CpuInfoProto_Task::cpu() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.cpu)
  return cpu_;
}
inline void CpuInfoProto_Task::set_cpu(float value) {
  _has_bits_[0] |= 0x00000200u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.cpu)
}

// optional .android.os.CpuInfoProto.Task.Status s = 7;
inline bool CpuInfoProto_Task::has_s() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CpuInfoProto_Task::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::android::os::CpuInfoProto_Task_Status CpuInfoProto_Task::s() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.s)
  return static_cast< ::android::os::CpuInfoProto_Task_Status >(s_);
}
inline void CpuInfoProto_Task::set_s(::android::os::CpuInfoProto_Task_Status value) {
  assert(::android::os::CpuInfoProto_Task_Status_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  s_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.s)
}

// optional string virt = 8;
inline bool CpuInfoProto_Task::has_virt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuInfoProto_Task::clear_virt() {
  virt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CpuInfoProto_Task::virt() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.virt)
  return virt_.GetNoArena();
}
inline void CpuInfoProto_Task::set_virt(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  virt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.virt)
}
inline void CpuInfoProto_Task::set_virt(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  virt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.CpuInfoProto.Task.virt)
}
inline void CpuInfoProto_Task::set_virt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  virt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.CpuInfoProto.Task.virt)
}
inline void CpuInfoProto_Task::set_virt(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  virt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.CpuInfoProto.Task.virt)
}
inline std::string* CpuInfoProto_Task::mutable_virt() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.Task.virt)
  return virt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuInfoProto_Task::release_virt() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.Task.virt)
  if (!has_virt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return virt_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuInfoProto_Task::set_allocated_virt(std::string* virt) {
  if (virt != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  virt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virt);
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.Task.virt)
}

// optional string res = 9;
inline bool CpuInfoProto_Task::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuInfoProto_Task::clear_res() {
  res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CpuInfoProto_Task::res() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.res)
  return res_.GetNoArena();
}
inline void CpuInfoProto_Task::set_res(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.res)
}
inline void CpuInfoProto_Task::set_res(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  res_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.CpuInfoProto.Task.res)
}
inline void CpuInfoProto_Task::set_res(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.CpuInfoProto.Task.res)
}
inline void CpuInfoProto_Task::set_res(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.CpuInfoProto.Task.res)
}
inline std::string* CpuInfoProto_Task::mutable_res() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.Task.res)
  return res_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuInfoProto_Task::release_res() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.Task.res)
  if (!has_res()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return res_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuInfoProto_Task::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  res_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res);
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.Task.res)
}

// optional .android.os.CpuInfoProto.Task.Policy pcy = 10;
inline bool CpuInfoProto_Task::has_pcy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CpuInfoProto_Task::clear_pcy() {
  pcy_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::android::os::CpuInfoProto_Task_Policy CpuInfoProto_Task::pcy() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.pcy)
  return static_cast< ::android::os::CpuInfoProto_Task_Policy >(pcy_);
}
inline void CpuInfoProto_Task::set_pcy(::android::os::CpuInfoProto_Task_Policy value) {
  assert(::android::os::CpuInfoProto_Task_Policy_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  pcy_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.pcy)
}

// optional string cmd = 11;
inline bool CpuInfoProto_Task::has_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CpuInfoProto_Task::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CpuInfoProto_Task::cmd() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.cmd)
  return cmd_.GetNoArena();
}
inline void CpuInfoProto_Task::set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.cmd)
}
inline void CpuInfoProto_Task::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.CpuInfoProto.Task.cmd)
}
inline void CpuInfoProto_Task::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.CpuInfoProto.Task.cmd)
}
inline void CpuInfoProto_Task::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.CpuInfoProto.Task.cmd)
}
inline std::string* CpuInfoProto_Task::mutable_cmd() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.Task.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuInfoProto_Task::release_cmd() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.Task.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuInfoProto_Task::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.Task.cmd)
}

// optional string name = 12;
inline bool CpuInfoProto_Task::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CpuInfoProto_Task::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CpuInfoProto_Task::name() const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.Task.name)
  return name_.GetNoArena();
}
inline void CpuInfoProto_Task::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.CpuInfoProto.Task.name)
}
inline void CpuInfoProto_Task::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.CpuInfoProto.Task.name)
}
inline void CpuInfoProto_Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.CpuInfoProto.Task.name)
}
inline void CpuInfoProto_Task::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.CpuInfoProto.Task.name)
}
inline std::string* CpuInfoProto_Task::mutable_name() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.Task.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuInfoProto_Task::release_name() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.Task.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuInfoProto_Task::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.Task.name)
}

// -------------------------------------------------------------------

// CpuInfoProto

// optional .android.os.CpuInfoProto.TaskStats task_stats = 1;
inline bool CpuInfoProto::has_task_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuInfoProto::clear_task_stats() {
  if (task_stats_ != nullptr) task_stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::CpuInfoProto_TaskStats& CpuInfoProto::task_stats() const {
  const ::android::os::CpuInfoProto_TaskStats* p = task_stats_;
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.task_stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::CpuInfoProto_TaskStats*>(
      &::android::os::_CpuInfoProto_TaskStats_default_instance_);
}
inline ::android::os::CpuInfoProto_TaskStats* CpuInfoProto::release_task_stats() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.task_stats)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::CpuInfoProto_TaskStats* temp = task_stats_;
  task_stats_ = nullptr;
  return temp;
}
inline ::android::os::CpuInfoProto_TaskStats* CpuInfoProto::mutable_task_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (task_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::CpuInfoProto_TaskStats>(GetArenaNoVirtual());
    task_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.task_stats)
  return task_stats_;
}
inline void CpuInfoProto::set_allocated_task_stats(::android::os::CpuInfoProto_TaskStats* task_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_stats_;
  }
  if (task_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_stats_ = task_stats;
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.task_stats)
}

// optional .android.os.CpuInfoProto.MemStats mem = 2;
inline bool CpuInfoProto::has_mem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuInfoProto::clear_mem() {
  if (mem_ != nullptr) mem_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::CpuInfoProto_MemStats& CpuInfoProto::mem() const {
  const ::android::os::CpuInfoProto_MemStats* p = mem_;
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.mem)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::CpuInfoProto_MemStats*>(
      &::android::os::_CpuInfoProto_MemStats_default_instance_);
}
inline ::android::os::CpuInfoProto_MemStats* CpuInfoProto::release_mem() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.mem)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::CpuInfoProto_MemStats* temp = mem_;
  mem_ = nullptr;
  return temp;
}
inline ::android::os::CpuInfoProto_MemStats* CpuInfoProto::mutable_mem() {
  _has_bits_[0] |= 0x00000002u;
  if (mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::CpuInfoProto_MemStats>(GetArenaNoVirtual());
    mem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.mem)
  return mem_;
}
inline void CpuInfoProto::set_allocated_mem(::android::os::CpuInfoProto_MemStats* mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mem_;
  }
  if (mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mem_ = mem;
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.mem)
}

// optional .android.os.CpuInfoProto.MemStats swap = 3;
inline bool CpuInfoProto::has_swap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuInfoProto::clear_swap() {
  if (swap_ != nullptr) swap_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::CpuInfoProto_MemStats& CpuInfoProto::swap() const {
  const ::android::os::CpuInfoProto_MemStats* p = swap_;
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.swap)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::CpuInfoProto_MemStats*>(
      &::android::os::_CpuInfoProto_MemStats_default_instance_);
}
inline ::android::os::CpuInfoProto_MemStats* CpuInfoProto::release_swap() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.swap)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::CpuInfoProto_MemStats* temp = swap_;
  swap_ = nullptr;
  return temp;
}
inline ::android::os::CpuInfoProto_MemStats* CpuInfoProto::mutable_swap() {
  _has_bits_[0] |= 0x00000004u;
  if (swap_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::CpuInfoProto_MemStats>(GetArenaNoVirtual());
    swap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.swap)
  return swap_;
}
inline void CpuInfoProto::set_allocated_swap(::android::os::CpuInfoProto_MemStats* swap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete swap_;
  }
  if (swap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  swap_ = swap;
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.swap)
}

// optional .android.os.CpuInfoProto.CpuUsage cpu_usage = 4;
inline bool CpuInfoProto::has_cpu_usage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuInfoProto::clear_cpu_usage() {
  if (cpu_usage_ != nullptr) cpu_usage_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::os::CpuInfoProto_CpuUsage& CpuInfoProto::cpu_usage() const {
  const ::android::os::CpuInfoProto_CpuUsage* p = cpu_usage_;
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.cpu_usage)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::CpuInfoProto_CpuUsage*>(
      &::android::os::_CpuInfoProto_CpuUsage_default_instance_);
}
inline ::android::os::CpuInfoProto_CpuUsage* CpuInfoProto::release_cpu_usage() {
  // @@protoc_insertion_point(field_release:android.os.CpuInfoProto.cpu_usage)
  _has_bits_[0] &= ~0x00000008u;
  ::android::os::CpuInfoProto_CpuUsage* temp = cpu_usage_;
  cpu_usage_ = nullptr;
  return temp;
}
inline ::android::os::CpuInfoProto_CpuUsage* CpuInfoProto::mutable_cpu_usage() {
  _has_bits_[0] |= 0x00000008u;
  if (cpu_usage_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::CpuInfoProto_CpuUsage>(GetArenaNoVirtual());
    cpu_usage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.cpu_usage)
  return cpu_usage_;
}
inline void CpuInfoProto::set_allocated_cpu_usage(::android::os::CpuInfoProto_CpuUsage* cpu_usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cpu_usage_;
  }
  if (cpu_usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu_usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_usage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cpu_usage_ = cpu_usage;
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuInfoProto.cpu_usage)
}

// repeated .android.os.CpuInfoProto.Task tasks = 5;
inline int CpuInfoProto::tasks_size() const {
  return tasks_.size();
}
inline void CpuInfoProto::clear_tasks() {
  tasks_.Clear();
}
inline ::android::os::CpuInfoProto_Task* CpuInfoProto::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.CpuInfoProto.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuInfoProto_Task >*
CpuInfoProto::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:android.os.CpuInfoProto.tasks)
  return &tasks_;
}
inline const ::android::os::CpuInfoProto_Task& CpuInfoProto::tasks(int index) const {
  // @@protoc_insertion_point(field_get:android.os.CpuInfoProto.tasks)
  return tasks_.Get(index);
}
inline ::android::os::CpuInfoProto_Task* CpuInfoProto::add_tasks() {
  // @@protoc_insertion_point(field_add:android.os.CpuInfoProto.tasks)
  return tasks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuInfoProto_Task >&
CpuInfoProto::tasks() const {
  // @@protoc_insertion_point(field_list:android.os.CpuInfoProto.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::os::CpuInfoProto_Task_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::os::CpuInfoProto_Task_Status>() {
  return ::android::os::CpuInfoProto_Task_Status_descriptor();
}
template <> struct is_proto_enum< ::android::os::CpuInfoProto_Task_Policy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::os::CpuInfoProto_Task_Policy>() {
  return ::android::os::CpuInfoProto_Task_Policy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto
