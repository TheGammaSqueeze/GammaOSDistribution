// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/net/networkcapabilities.proto

#include "frameworks/base/core/proto/android/net/networkcapabilities.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace net {
class NetworkCapabilitiesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkCapabilitiesProto> _instance;
} _NetworkCapabilitiesProto_default_instance_;
}  // namespace net
}  // namespace android
static void InitDefaultsscc_info_NetworkCapabilitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::net::_NetworkCapabilitiesProto_default_instance_;
    new (ptr) ::android::net::NetworkCapabilitiesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::net::NetworkCapabilitiesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkCapabilitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkCapabilitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, transports_),
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, capabilities_),
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, link_up_bandwidth_kbps_),
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, link_down_bandwidth_kbps_),
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, network_specifier_),
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, can_report_signal_strength_),
  PROTOBUF_FIELD_OFFSET(::android::net::NetworkCapabilitiesProto, signal_strength_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::android::net::NetworkCapabilitiesProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::net::_NetworkCapabilitiesProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@frameworks/base/core/proto/android/net"
  "/networkcapabilities.proto\022\013android.net\032"
  "0frameworks/base/core/proto/android/priv"
  "acy.proto\0324frameworks/proto_logging/stat"
  "s/enums/net/enums.proto\"\372\006\n\030NetworkCapab"
  "ilitiesProto\022*\n\ntransports\030\001 \003(\0162\026.andro"
  "id.net.Transport\022I\n\014capabilities\030\002 \003(\01623"
  ".android.net.NetworkCapabilitiesProto.Ne"
  "tCapability\022\036\n\026link_up_bandwidth_kbps\030\003 "
  "\001(\005\022 \n\030link_down_bandwidth_kbps\030\004 \001(\005\022#\n"
  "\021network_specifier\030\005 \001(\tB\010\232\237\325\207\003\002\010d\022\"\n\032ca"
  "n_report_signal_strength\030\006 \001(\010\022\027\n\017signal"
  "_strength\030\007 \001(\021\"\267\004\n\rNetCapability\022\026\n\022NET"
  "_CAPABILITY_MMS\020\000\022\027\n\023NET_CAPABILITY_SUPL"
  "\020\001\022\026\n\022NET_CAPABILITY_DUN\020\002\022\027\n\023NET_CAPABI"
  "LITY_FOTA\020\003\022\026\n\022NET_CAPABILITY_IMS\020\004\022\026\n\022N"
  "ET_CAPABILITY_CBS\020\005\022\033\n\027NET_CAPABILITY_WI"
  "FI_P2P\020\006\022\025\n\021NET_CAPABILITY_IA\020\007\022\026\n\022NET_C"
  "APABILITY_RCS\020\010\022\027\n\023NET_CAPABILITY_XCAP\020\t"
  "\022\027\n\023NET_CAPABILITY_EIMS\020\n\022\036\n\032NET_CAPABIL"
  "ITY_NOT_METERED\020\013\022\033\n\027NET_CAPABILITY_INTE"
  "RNET\020\014\022!\n\035NET_CAPABILITY_NOT_RESTRICTED\020"
  "\r\022\032\n\026NET_CAPABILITY_TRUSTED\020\016\022\032\n\026NET_CAP"
  "ABILITY_NOT_VPN\020\017\022\034\n\030NET_CAPABILITY_VALI"
  "DATED\020\020\022!\n\035NET_CAPABILITY_CAPTIVE_PORTAL"
  "\020\021\022\036\n\032NET_CAPABILITY_NOT_ROAMING\020\022\022\035\n\031NE"
  "T_CAPABILITY_FOREGROUND\020\023:\t\232\237\325\207\003\003\010\310\001B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_deps[2] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fnet_2fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_sccs[1] = {
  &scc_info_NetworkCapabilitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto, "frameworks/base/core/proto/android/net/networkcapabilities.proto", 1080,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto, 1, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto), true);
namespace android {
namespace net {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkCapabilitiesProto_NetCapability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto[0];
}
bool NetworkCapabilitiesProto_NetCapability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_MMS;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_SUPL;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_DUN;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_FOTA;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_IMS;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_CBS;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_WIFI_P2P;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_IA;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_RCS;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_XCAP;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_EIMS;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_NOT_METERED;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_INTERNET;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_NOT_RESTRICTED;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_TRUSTED;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_NOT_VPN;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_VALIDATED;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_CAPTIVE_PORTAL;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_NOT_ROAMING;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NET_CAPABILITY_FOREGROUND;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NetCapability_MIN;
constexpr NetworkCapabilitiesProto_NetCapability NetworkCapabilitiesProto::NetCapability_MAX;
constexpr int NetworkCapabilitiesProto::NetCapability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NetworkCapabilitiesProto::InitAsDefaultInstance() {
}
class NetworkCapabilitiesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkCapabilitiesProto>()._has_bits_);
  static void set_has_link_up_bandwidth_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_link_down_bandwidth_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_network_specifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_report_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

NetworkCapabilitiesProto::NetworkCapabilitiesProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.net.NetworkCapabilitiesProto)
}
NetworkCapabilitiesProto::NetworkCapabilitiesProto(const NetworkCapabilitiesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      transports_(from.transports_),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_specifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_specifier()) {
    network_specifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_specifier_);
  }
  ::memcpy(&link_up_bandwidth_kbps_, &from.link_up_bandwidth_kbps_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&link_up_bandwidth_kbps_)) + sizeof(signal_strength_));
  // @@protoc_insertion_point(copy_constructor:android.net.NetworkCapabilitiesProto)
}

void NetworkCapabilitiesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkCapabilitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto.base);
  network_specifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_up_bandwidth_kbps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_) -
      reinterpret_cast<char*>(&link_up_bandwidth_kbps_)) + sizeof(signal_strength_));
}

NetworkCapabilitiesProto::~NetworkCapabilitiesProto() {
  // @@protoc_insertion_point(destructor:android.net.NetworkCapabilitiesProto)
  SharedDtor();
}

void NetworkCapabilitiesProto::SharedDtor() {
  network_specifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkCapabilitiesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkCapabilitiesProto& NetworkCapabilitiesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkCapabilitiesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkcapabilities_2eproto.base);
  return *internal_default_instance();
}


void NetworkCapabilitiesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.net.NetworkCapabilitiesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transports_.Clear();
  capabilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    network_specifier_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&link_up_bandwidth_kbps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_strength_) -
        reinterpret_cast<char*>(&link_up_bandwidth_kbps_)) + sizeof(signal_strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkCapabilitiesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.net.Transport transports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::android::net::Transport_IsValid(val))) {
              add_transports(static_cast<::android::net::Transport>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_transports(), ptr, ctx, ::android::net::Transport_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.net.NetworkCapabilitiesProto.NetCapability capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::android::net::NetworkCapabilitiesProto_NetCapability_IsValid(val))) {
              add_capabilities(static_cast<::android::net::NetworkCapabilitiesProto_NetCapability>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_capabilities(), ptr, ctx, ::android::net::NetworkCapabilitiesProto_NetCapability_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 link_up_bandwidth_kbps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_link_up_bandwidth_kbps(&has_bits);
          link_up_bandwidth_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 link_down_bandwidth_kbps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_link_down_bandwidth_kbps(&has_bits);
          link_down_bandwidth_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string network_specifier = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_network_specifier(), ptr, ctx, "android.net.NetworkCapabilitiesProto.network_specifier");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_report_signal_strength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_report_signal_strength(&has_bits);
          can_report_signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 signal_strength = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_signal_strength(&has_bits);
          signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkCapabilitiesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.net.NetworkCapabilitiesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.net.Transport transports = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::net::Transport_IsValid(value)) {
            add_transports(static_cast< ::android::net::Transport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::android::net::Transport_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_transports())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.net.NetworkCapabilitiesProto.NetCapability capabilities = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::net::NetworkCapabilitiesProto_NetCapability_IsValid(value)) {
            add_capabilities(static_cast< ::android::net::NetworkCapabilitiesProto_NetCapability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::android::net::NetworkCapabilitiesProto_NetCapability_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_capabilities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 link_up_bandwidth_kbps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_link_up_bandwidth_kbps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_up_bandwidth_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 link_down_bandwidth_kbps = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_link_down_bandwidth_kbps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_down_bandwidth_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string network_specifier = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_network_specifier()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_specifier().data(), static_cast<int>(this->network_specifier().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.net.NetworkCapabilitiesProto.network_specifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_report_signal_strength = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_can_report_signal_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_report_signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 signal_strength = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_signal_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.net.NetworkCapabilitiesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.net.NetworkCapabilitiesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkCapabilitiesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.net.NetworkCapabilitiesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.net.Transport transports = 1;
  for (int i = 0, n = this->transports_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->transports(i), output);
  }

  // repeated .android.net.NetworkCapabilitiesProto.NetCapability capabilities = 2;
  for (int i = 0, n = this->capabilities_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->capabilities(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 link_up_bandwidth_kbps = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->link_up_bandwidth_kbps(), output);
  }

  // optional int32 link_down_bandwidth_kbps = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->link_down_bandwidth_kbps(), output);
  }

  // optional string network_specifier = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_specifier().data(), static_cast<int>(this->network_specifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.net.NetworkCapabilitiesProto.network_specifier");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->network_specifier(), output);
  }

  // optional bool can_report_signal_strength = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->can_report_signal_strength(), output);
  }

  // optional sint32 signal_strength = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(7, this->signal_strength(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.net.NetworkCapabilitiesProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkCapabilitiesProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.net.NetworkCapabilitiesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.net.Transport transports = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    1, this->transports_, target);

  // repeated .android.net.NetworkCapabilitiesProto.NetCapability capabilities = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    2, this->capabilities_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 link_up_bandwidth_kbps = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->link_up_bandwidth_kbps(), target);
  }

  // optional int32 link_down_bandwidth_kbps = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->link_down_bandwidth_kbps(), target);
  }

  // optional string network_specifier = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_specifier().data(), static_cast<int>(this->network_specifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.net.NetworkCapabilitiesProto.network_specifier");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->network_specifier(), target);
  }

  // optional bool can_report_signal_strength = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->can_report_signal_strength(), target);
  }

  // optional sint32 signal_strength = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->signal_strength(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.net.NetworkCapabilitiesProto)
  return target;
}

size_t NetworkCapabilitiesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.net.NetworkCapabilitiesProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.net.Transport transports = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->transports_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->transports(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .android.net.NetworkCapabilitiesProto.NetCapability capabilities = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->capabilities(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string network_specifier = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->network_specifier());
    }

    // optional int32 link_up_bandwidth_kbps = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->link_up_bandwidth_kbps());
    }

    // optional int32 link_down_bandwidth_kbps = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->link_down_bandwidth_kbps());
    }

    // optional bool can_report_signal_strength = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional sint32 signal_strength = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->signal_strength());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkCapabilitiesProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.net.NetworkCapabilitiesProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkCapabilitiesProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkCapabilitiesProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.net.NetworkCapabilitiesProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.net.NetworkCapabilitiesProto)
    MergeFrom(*source);
  }
}

void NetworkCapabilitiesProto::MergeFrom(const NetworkCapabilitiesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.net.NetworkCapabilitiesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transports_.MergeFrom(from.transports_);
  capabilities_.MergeFrom(from.capabilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      network_specifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_specifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      link_up_bandwidth_kbps_ = from.link_up_bandwidth_kbps_;
    }
    if (cached_has_bits & 0x00000004u) {
      link_down_bandwidth_kbps_ = from.link_down_bandwidth_kbps_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_report_signal_strength_ = from.can_report_signal_strength_;
    }
    if (cached_has_bits & 0x00000010u) {
      signal_strength_ = from.signal_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkCapabilitiesProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.net.NetworkCapabilitiesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCapabilitiesProto::CopyFrom(const NetworkCapabilitiesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.net.NetworkCapabilitiesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCapabilitiesProto::IsInitialized() const {
  return true;
}

void NetworkCapabilitiesProto::InternalSwap(NetworkCapabilitiesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transports_.InternalSwap(&other->transports_);
  capabilities_.InternalSwap(&other->capabilities_);
  network_specifier_.Swap(&other->network_specifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(link_up_bandwidth_kbps_, other->link_up_bandwidth_kbps_);
  swap(link_down_bandwidth_kbps_, other->link_down_bandwidth_kbps_);
  swap(can_report_signal_strength_, other->can_report_signal_strength_);
  swap(signal_strength_, other->signal_strength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkCapabilitiesProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::net::NetworkCapabilitiesProto* Arena::CreateMaybeMessage< ::android::net::NetworkCapabilitiesProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::net::NetworkCapabilitiesProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
