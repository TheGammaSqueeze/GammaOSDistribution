// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/mediametrics/mediametrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace stats {
namespace mediametrics {

enum StreamType : int {
  STREAM_TYPE_UNKNOWN = 0,
  STREAM_TYPE_OTHER = 1,
  STREAM_TYPE_PROGRESSIVE = 2,
  STREAM_TYPE_DASH = 3,
  STREAM_TYPE_HLS = 4,
  STREAM_TYPE_SS = 5
};
bool StreamType_IsValid(int value);
constexpr StreamType StreamType_MIN = STREAM_TYPE_UNKNOWN;
constexpr StreamType StreamType_MAX = STREAM_TYPE_SS;
constexpr int StreamType_ARRAYSIZE = StreamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamType_descriptor();
template<typename T>
inline const std::string& StreamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamType_descriptor(), enum_t_value);
}
inline bool StreamType_Parse(
    const std::string& name, StreamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamType>(
    StreamType_descriptor(), name, value);
}
enum DrmType : int {
  DRM_TYPE_NONE = 0,
  DRM_TYPE_OTHER = 1,
  DRM_TYPE_PLAY_READY = 2,
  DRM_TYPE_WV_L1 = 3,
  DRM_TYPE_WV_L3 = 4
};
bool DrmType_IsValid(int value);
constexpr DrmType DrmType_MIN = DRM_TYPE_NONE;
constexpr DrmType DrmType_MAX = DRM_TYPE_WV_L3;
constexpr int DrmType_ARRAYSIZE = DrmType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrmType_descriptor();
template<typename T>
inline const std::string& DrmType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrmType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrmType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrmType_descriptor(), enum_t_value);
}
inline bool DrmType_Parse(
    const std::string& name, DrmType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrmType>(
    DrmType_descriptor(), name, value);
}
enum PlaybackType : int {
  PLAYBACK_TYPE_UNKNOWN = 0,
  PLAYBACK_TYPE_VOD = 1,
  PLAYBACK_TYPE_LIVE = 2,
  PLAYBACK_TYPE_OTHER = 3
};
bool PlaybackType_IsValid(int value);
constexpr PlaybackType PlaybackType_MIN = PLAYBACK_TYPE_UNKNOWN;
constexpr PlaybackType PlaybackType_MAX = PLAYBACK_TYPE_OTHER;
constexpr int PlaybackType_ARRAYSIZE = PlaybackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaybackType_descriptor();
template<typename T>
inline const std::string& PlaybackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlaybackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlaybackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlaybackType_descriptor(), enum_t_value);
}
inline bool PlaybackType_Parse(
    const std::string& name, PlaybackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaybackType>(
    PlaybackType_descriptor(), name, value);
}
enum ContentType : int {
  CONTENT_TYPE_UNKNOWN = 0,
  CONTENT_TYPE_MAIN = 1,
  CONTENT_TYPE_AD = 2,
  CONTENT_TYPE_OTHER = 3
};
bool ContentType_IsValid(int value);
constexpr ContentType ContentType_MIN = CONTENT_TYPE_UNKNOWN;
constexpr ContentType ContentType_MAX = CONTENT_TYPE_OTHER;
constexpr int ContentType_ARRAYSIZE = ContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentType_descriptor();
template<typename T>
inline const std::string& ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContentType_descriptor(), enum_t_value);
}
inline bool ContentType_Parse(
    const std::string& name, ContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContentType>(
    ContentType_descriptor(), name, value);
}
enum StreamSourceType : int {
  STREAM_SOURCE_UNKNOWN = 0,
  STREAM_SOURCE_NETWORK = 1,
  STREAM_SOURCE_DEVICE = 2,
  STREAM_SOURCE_MIXED = 3
};
bool StreamSourceType_IsValid(int value);
constexpr StreamSourceType StreamSourceType_MIN = STREAM_SOURCE_UNKNOWN;
constexpr StreamSourceType StreamSourceType_MAX = STREAM_SOURCE_MIXED;
constexpr int StreamSourceType_ARRAYSIZE = StreamSourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamSourceType_descriptor();
template<typename T>
inline const std::string& StreamSourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamSourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamSourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamSourceType_descriptor(), enum_t_value);
}
inline bool StreamSourceType_Parse(
    const std::string& name, StreamSourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamSourceType>(
    StreamSourceType_descriptor(), name, value);
}
enum NetworkType : int {
  NETWORK_TYPE_UNKNOWN = 0,
  NETWORK_TYPE_OTHER = 1,
  NETWORK_TYPE_WIFI = 2,
  NETWORK_TYPE_ETHERNET = 3,
  NETWORK_TYPE_2G = 4,
  NETWORK_TYPE_3G = 5,
  NETWORK_TYPE_4G = 6,
  NETWORK_TYPE_5G_NSA = 7,
  NETWORK_TYPE_5G_SA = 8,
  NETWORK_TYPE_OFFLINE = 9
};
bool NetworkType_IsValid(int value);
constexpr NetworkType NetworkType_MIN = NETWORK_TYPE_UNKNOWN;
constexpr NetworkType NetworkType_MAX = NETWORK_TYPE_OFFLINE;
constexpr int NetworkType_ARRAYSIZE = NetworkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkType_descriptor();
template<typename T>
inline const std::string& NetworkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkType_descriptor(), enum_t_value);
}
inline bool NetworkType_Parse(
    const std::string& name, NetworkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkType>(
    NetworkType_descriptor(), name, value);
}
enum PlaybackState : int {
  NOT_STARTED = 0,
  JOINING_BACKGROUND = 1,
  JOINING_FOREGROUND = 2,
  PLAYING = 3,
  PAUSED = 4,
  SEEKING = 5,
  BUFFERING = 6,
  PAUSED_BUFFERING = 7,
  SUPPRESSED = 8,
  SUPPRESSED_BUFFERING = 9,
  ENDED = 10,
  STOPPED = 11,
  FAILED = 12,
  INTERRUPTED_BY_AD = 13,
  ABANDONED = 14
};
bool PlaybackState_IsValid(int value);
constexpr PlaybackState PlaybackState_MIN = NOT_STARTED;
constexpr PlaybackState PlaybackState_MAX = ABANDONED;
constexpr int PlaybackState_ARRAYSIZE = PlaybackState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaybackState_descriptor();
template<typename T>
inline const std::string& PlaybackState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlaybackState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlaybackState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlaybackState_descriptor(), enum_t_value);
}
inline bool PlaybackState_Parse(
    const std::string& name, PlaybackState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaybackState>(
    PlaybackState_descriptor(), name, value);
}
enum PlaybackErrorCode : int {
  ERROR_CODE_UNKNOWN = 0,
  ERROR_CODE_OTHER = 1,
  ERROR_CODE_RUNTIME = 2,
  ERROR_CODE_NETWORK_OFFLINE = 3,
  ERROR_CODE_NETWORK_CONNECT = 4,
  ERROR_CODE_NETWORK_BAD_STATUS = 5,
  ERROR_CODE_NETWORK_DNS = 6,
  ERROR_CODE_NETWORK_TIMEOUT = 7,
  ERROR_CODE_NETWORK_CLOSED = 8,
  ERROR_CODE_NETWORK_OTHER = 9,
  ERROR_CODE_MEDIA_MANIFET = 10,
  ERROR_CODE_MEDIA_PARSER = 11,
  ERROR_CODE_MEDIA_OTHER = 12,
  ERROR_CODE_DECODER_INIT = 13,
  ERROR_CODE_DECODER_DECODE = 14,
  ERROR_CODE_DECODER_OOM = 15,
  ERROR_CODE_DECODER_OTHER = 16,
  ERROR_CODE_AUDIOTRACK_INIT = 17,
  ERROR_CODE_AUDIOTRACK_WRITE = 18,
  ERROR_CODE_AUDIOTRACK_OTHER = 19,
  ERROR_CODE_PLAYER_REMOTE = 20,
  ERROR_CODE_PLAYER_BEHIND_LIVE_WINDOW = 21,
  ERROR_CODE_PLAYER_OTHER = 22,
  ERROR_CODE_DRM_UNAVAILABLE = 23,
  ERROR_CODE_DRM_PROVISIONING_FAILED = 24,
  ERROR_CODE_DRM_LICENSE_ERROR = 25,
  ERROR_CODE_DRM_DISALLOWED = 26,
  ERROR_CODE_DRM_SYSTEM_ERROR = 27,
  ERROR_CODE_DRM_CONTENT_ERROR = 28,
  ERROR_CODE_DRM_REVOKED = 39,
  ERROR_CODE_DRM_OTHER = 30
};
bool PlaybackErrorCode_IsValid(int value);
constexpr PlaybackErrorCode PlaybackErrorCode_MIN = ERROR_CODE_UNKNOWN;
constexpr PlaybackErrorCode PlaybackErrorCode_MAX = ERROR_CODE_DRM_REVOKED;
constexpr int PlaybackErrorCode_ARRAYSIZE = PlaybackErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaybackErrorCode_descriptor();
template<typename T>
inline const std::string& PlaybackErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlaybackErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlaybackErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlaybackErrorCode_descriptor(), enum_t_value);
}
inline bool PlaybackErrorCode_Parse(
    const std::string& name, PlaybackErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaybackErrorCode>(
    PlaybackErrorCode_descriptor(), name, value);
}
enum TrackType : int {
  AUDIO = 0,
  VIDEO = 1,
  TEXT = 2
};
bool TrackType_IsValid(int value);
constexpr TrackType TrackType_MIN = AUDIO;
constexpr TrackType TrackType_MAX = TEXT;
constexpr int TrackType_ARRAYSIZE = TrackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackType_descriptor();
template<typename T>
inline const std::string& TrackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackType_descriptor(), enum_t_value);
}
inline bool TrackType_Parse(
    const std::string& name, TrackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackType>(
    TrackType_descriptor(), name, value);
}
enum TrackState : int {
  OFF = 0,
  ON = 1
};
bool TrackState_IsValid(int value);
constexpr TrackState TrackState_MIN = OFF;
constexpr TrackState TrackState_MAX = ON;
constexpr int TrackState_ARRAYSIZE = TrackState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackState_descriptor();
template<typename T>
inline const std::string& TrackState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackState_descriptor(), enum_t_value);
}
inline bool TrackState_Parse(
    const std::string& name, TrackState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackState>(
    TrackState_descriptor(), name, value);
}
enum TrackChangeReason : int {
  REASON_UNKNOWN = 0,
  REASON_OTHER = 1,
  REASON_INITIAL = 2,
  REASON_MANUAL = 3,
  REASON_ADAPTIVE = 4
};
bool TrackChangeReason_IsValid(int value);
constexpr TrackChangeReason TrackChangeReason_MIN = REASON_UNKNOWN;
constexpr TrackChangeReason TrackChangeReason_MAX = REASON_ADAPTIVE;
constexpr int TrackChangeReason_ARRAYSIZE = TrackChangeReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackChangeReason_descriptor();
template<typename T>
inline const std::string& TrackChangeReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackChangeReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackChangeReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackChangeReason_descriptor(), enum_t_value);
}
inline bool TrackChangeReason_Parse(
    const std::string& name, TrackChangeReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackChangeReason>(
    TrackChangeReason_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediametrics
}  // namespace stats
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::stats::mediametrics::StreamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::StreamType>() {
  return ::android::stats::mediametrics::StreamType_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::DrmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::DrmType>() {
  return ::android::stats::mediametrics::DrmType_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::PlaybackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::PlaybackType>() {
  return ::android::stats::mediametrics::PlaybackType_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::ContentType>() {
  return ::android::stats::mediametrics::ContentType_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::StreamSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::StreamSourceType>() {
  return ::android::stats::mediametrics::StreamSourceType_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::NetworkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::NetworkType>() {
  return ::android::stats::mediametrics::NetworkType_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::PlaybackState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::PlaybackState>() {
  return ::android::stats::mediametrics::PlaybackState_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::PlaybackErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::PlaybackErrorCode>() {
  return ::android::stats::mediametrics::PlaybackErrorCode_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::TrackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::TrackType>() {
  return ::android::stats::mediametrics::TrackType_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::TrackState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::TrackState>() {
  return ::android::stats::mediametrics::TrackState_descriptor();
}
template <> struct is_proto_enum< ::android::stats::mediametrics::TrackChangeReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::mediametrics::TrackChangeReason>() {
  return ::android::stats::mediametrics::TrackChangeReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto
