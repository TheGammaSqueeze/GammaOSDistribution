// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/jobscheduler.proto

#include "frameworks/base/core/proto/android/server/jobscheduler.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkRequestProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BundleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpersistablebundle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistableBundleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpersistablebundle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CountQuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatLoggerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantsProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantsProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSetProto_PackageEntryProto_State_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSetProto_PackageEntryProto_StopReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobCountTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedulerServiceDumpProto_JobRestriction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedulerServiceDumpProto_PriorityOverride_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusDumpProto_ImplicitConstraints_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusDumpProto_JobInfo_Backoff_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStorePersistStatsProto_Stats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxJobCountsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_TimingSession_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto;
namespace com {
namespace android {
namespace server {
namespace job {
class JobSchedulerServiceDumpProto_JobRestrictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto_JobRestriction> _instance;
} _JobSchedulerServiceDumpProto_JobRestriction_default_instance_;
class JobSchedulerServiceDumpProto_RegisteredJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto_RegisteredJob> _instance;
} _JobSchedulerServiceDumpProto_RegisteredJob_default_instance_;
class JobSchedulerServiceDumpProto_PriorityOverrideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto_PriorityOverride> _instance;
} _JobSchedulerServiceDumpProto_PriorityOverride_default_instance_;
class JobSchedulerServiceDumpProto_PendingJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto_PendingJob> _instance;
} _JobSchedulerServiceDumpProto_PendingJob_default_instance_;
class JobSchedulerServiceDumpProto_ActiveJob_InactiveJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto_ActiveJob_InactiveJob> _instance;
} _JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_default_instance_;
class JobSchedulerServiceDumpProto_ActiveJob_RunningJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto_ActiveJob_RunningJob> _instance;
} _JobSchedulerServiceDumpProto_ActiveJob_RunningJob_default_instance_;
class JobSchedulerServiceDumpProto_ActiveJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto_ActiveJob> _instance;
  const ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob* inactive_;
  const ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob* running_;
} _JobSchedulerServiceDumpProto_ActiveJob_default_instance_;
class JobSchedulerServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedulerServiceDumpProto> _instance;
} _JobSchedulerServiceDumpProto_default_instance_;
class ConstantsProto_QuotaControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantsProto_QuotaController> _instance;
} _ConstantsProto_QuotaController_default_instance_;
class ConstantsProto_TimeControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantsProto_TimeController> _instance;
} _ConstantsProto_TimeController_default_instance_;
class ConstantsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantsProto> _instance;
} _ConstantsProto_default_instance_;
class MaxJobCountsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaxJobCountsProto> _instance;
} _MaxJobCountsProto_default_instance_;
class MaxJobCountsPerMemoryTrimLevelProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaxJobCountsPerMemoryTrimLevelProto> _instance;
} _MaxJobCountsPerMemoryTrimLevelProto_default_instance_;
class StateControllerProto_BackgroundJobsController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_BackgroundJobsController_TrackedJob> _instance;
} _StateControllerProto_BackgroundJobsController_TrackedJob_default_instance_;
class StateControllerProto_BackgroundJobsControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_BackgroundJobsController> _instance;
} _StateControllerProto_BackgroundJobsController_default_instance_;
class StateControllerProto_BatteryController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_BatteryController_TrackedJob> _instance;
} _StateControllerProto_BatteryController_TrackedJob_default_instance_;
class StateControllerProto_BatteryControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_BatteryController> _instance;
} _StateControllerProto_BatteryController_default_instance_;
class StateControllerProto_ConnectivityController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_ConnectivityController_TrackedJob> _instance;
} _StateControllerProto_ConnectivityController_TrackedJob_default_instance_;
class StateControllerProto_ConnectivityControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_ConnectivityController> _instance;
} _StateControllerProto_ConnectivityController_default_instance_;
class StateControllerProto_ContentObserverController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_ContentObserverController_TrackedJob> _instance;
} _StateControllerProto_ContentObserverController_TrackedJob_default_instance_;
class StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance> _instance;
} _StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_default_instance_;
class StateControllerProto_ContentObserverController_Observer_TriggerContentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_ContentObserverController_Observer_TriggerContentData> _instance;
} _StateControllerProto_ContentObserverController_Observer_TriggerContentData_default_instance_;
class StateControllerProto_ContentObserverController_ObserverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_ContentObserverController_Observer> _instance;
} _StateControllerProto_ContentObserverController_Observer_default_instance_;
class StateControllerProto_ContentObserverControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_ContentObserverController> _instance;
} _StateControllerProto_ContentObserverController_default_instance_;
class StateControllerProto_DeviceIdleJobsController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_DeviceIdleJobsController_TrackedJob> _instance;
} _StateControllerProto_DeviceIdleJobsController_TrackedJob_default_instance_;
class StateControllerProto_DeviceIdleJobsControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_DeviceIdleJobsController> _instance;
} _StateControllerProto_DeviceIdleJobsController_default_instance_;
class StateControllerProto_IdleController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_IdleController_TrackedJob> _instance;
} _StateControllerProto_IdleController_TrackedJob_default_instance_;
class StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTrackerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker> _instance;
} _StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_default_instance_;
class StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTrackerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker> _instance;
} _StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_default_instance_;
class StateControllerProto_IdleController_IdlenessTrackerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_IdleController_IdlenessTracker> _instance;
  const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker* device_idleness_tracker_;
  const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker* car_idleness_tracker_;
} _StateControllerProto_IdleController_IdlenessTracker_default_instance_;
class StateControllerProto_IdleControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_IdleController> _instance;
} _StateControllerProto_IdleController_default_instance_;
class StateControllerProto_QuotaController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_TrackedJob> _instance;
} _StateControllerProto_QuotaController_TrackedJob_default_instance_;
class StateControllerProto_QuotaController_AlarmListenerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_AlarmListener> _instance;
} _StateControllerProto_QuotaController_AlarmListener_default_instance_;
class StateControllerProto_QuotaController_ExecutionStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_ExecutionStats> _instance;
} _StateControllerProto_QuotaController_ExecutionStats_default_instance_;
class StateControllerProto_QuotaController_PackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_Package> _instance;
} _StateControllerProto_QuotaController_Package_default_instance_;
class StateControllerProto_QuotaController_TimingSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_TimingSession> _instance;
} _StateControllerProto_QuotaController_TimingSession_default_instance_;
class StateControllerProto_QuotaController_TimerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_Timer> _instance;
} _StateControllerProto_QuotaController_Timer_default_instance_;
class StateControllerProto_QuotaController_TopAppTimerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_TopAppTimer> _instance;
} _StateControllerProto_QuotaController_TopAppTimer_default_instance_;
class StateControllerProto_QuotaController_PackageStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_PackageStats> _instance;
} _StateControllerProto_QuotaController_PackageStats_default_instance_;
class StateControllerProto_QuotaController_UidPackageMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_UidPackageMapping> _instance;
} _StateControllerProto_QuotaController_UidPackageMapping_default_instance_;
class StateControllerProto_QuotaController_InQuotaAlarmListener_AlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm> _instance;
} _StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_default_instance_;
class StateControllerProto_QuotaController_InQuotaAlarmListenerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController_InQuotaAlarmListener> _instance;
} _StateControllerProto_QuotaController_InQuotaAlarmListener_default_instance_;
class StateControllerProto_QuotaControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_QuotaController> _instance;
} _StateControllerProto_QuotaController_default_instance_;
class StateControllerProto_StorageController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_StorageController_TrackedJob> _instance;
} _StateControllerProto_StorageController_TrackedJob_default_instance_;
class StateControllerProto_StorageControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_StorageController> _instance;
} _StateControllerProto_StorageController_default_instance_;
class StateControllerProto_TimeController_TrackedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_TimeController_TrackedJob> _instance;
} _StateControllerProto_TimeController_TrackedJob_default_instance_;
class StateControllerProto_TimeControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto_TimeController> _instance;
} _StateControllerProto_TimeController_default_instance_;
class StateControllerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateControllerProto> _instance;
  const ::com::android::server::job::StateControllerProto_BackgroundJobsController* background_;
  const ::com::android::server::job::StateControllerProto_BatteryController* battery_;
  const ::com::android::server::job::StateControllerProto_ConnectivityController* connectivity_;
  const ::com::android::server::job::StateControllerProto_ContentObserverController* content_observer_;
  const ::com::android::server::job::StateControllerProto_DeviceIdleJobsController* device_idle_;
  const ::com::android::server::job::StateControllerProto_IdleController* idle_;
  const ::com::android::server::job::StateControllerProto_QuotaController* quota_;
  const ::com::android::server::job::StateControllerProto_StorageController* storage_;
  const ::com::android::server::job::StateControllerProto_TimeController* time_;
} _StateControllerProto_default_instance_;
class DataSetProto_PackageEntryProto_StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSetProto_PackageEntryProto_State> _instance;
} _DataSetProto_PackageEntryProto_State_default_instance_;
class DataSetProto_PackageEntryProto_StopReasonCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSetProto_PackageEntryProto_StopReasonCount> _instance;
} _DataSetProto_PackageEntryProto_StopReasonCount_default_instance_;
class DataSetProto_PackageEntryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSetProto_PackageEntryProto> _instance;
} _DataSetProto_PackageEntryProto_default_instance_;
class DataSetProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSetProto> _instance;
} _DataSetProto_default_instance_;
class GrantedUriPermissionsDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrantedUriPermissionsDumpProto> _instance;
} _GrantedUriPermissionsDumpProto_default_instance_;
class JobPackageTrackerDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobPackageTrackerDumpProto> _instance;
} _JobPackageTrackerDumpProto_default_instance_;
class JobPackageHistoryProto_HistoryEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobPackageHistoryProto_HistoryEvent> _instance;
} _JobPackageHistoryProto_HistoryEvent_default_instance_;
class JobPackageHistoryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobPackageHistoryProto> _instance;
} _JobPackageHistoryProto_default_instance_;
class JobStatusShortInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusShortInfoProto> _instance;
} _JobStatusShortInfoProto_default_instance_;
class JobStatusDumpProto_JobInfo_TriggerContentUriDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusDumpProto_JobInfo_TriggerContentUri> _instance;
} _JobStatusDumpProto_JobInfo_TriggerContentUri_default_instance_;
class JobStatusDumpProto_JobInfo_BackoffDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusDumpProto_JobInfo_Backoff> _instance;
} _JobStatusDumpProto_JobInfo_Backoff_default_instance_;
class JobStatusDumpProto_JobInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusDumpProto_JobInfo> _instance;
} _JobStatusDumpProto_JobInfo_default_instance_;
class JobStatusDumpProto_ImplicitConstraintsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusDumpProto_ImplicitConstraints> _instance;
} _JobStatusDumpProto_ImplicitConstraints_default_instance_;
class JobStatusDumpProto_JobWorkItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusDumpProto_JobWorkItem> _instance;
} _JobStatusDumpProto_JobWorkItem_default_instance_;
class JobStatusDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusDumpProto> _instance;
} _JobStatusDumpProto_default_instance_;
class JobConcurrencyManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobConcurrencyManagerProto> _instance;
} _JobConcurrencyManagerProto_default_instance_;
class JobCountTrackerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobCountTrackerProto> _instance;
} _JobCountTrackerProto_default_instance_;
class JobStorePersistStatsProto_StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStorePersistStatsProto_Stats> _instance;
} _JobStorePersistStatsProto_Stats_default_instance_;
class JobStorePersistStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStorePersistStatsProto> _instance;
} _JobStorePersistStatsProto_default_instance_;
}  // namespace job
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_ConstantsProto_default_instance_;
    new (ptr) ::com::android::server::job::ConstantsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::ConstantsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_ConstantsProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_ConstantsProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_ConstantsProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_ConstantsProto_QuotaController_default_instance_;
    new (ptr) ::com::android::server::job::ConstantsProto_QuotaController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::ConstantsProto_QuotaController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantsProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConstantsProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_ConstantsProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_ConstantsProto_TimeController_default_instance_;
    new (ptr) ::com::android::server::job::ConstantsProto_TimeController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::ConstantsProto_TimeController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantsProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConstantsProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_DataSetProto_default_instance_;
    new (ptr) ::com::android::server::job::DataSetProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::DataSetProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_DataSetProto_PackageEntryProto_default_instance_;
    new (ptr) ::com::android::server::job::DataSetProto_PackageEntryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::DataSetProto_PackageEntryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_DataSetProto_PackageEntryProto_State_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_DataSetProto_PackageEntryProto_StopReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_DataSetProto_PackageEntryProto_State_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_DataSetProto_PackageEntryProto_State_default_instance_;
    new (ptr) ::com::android::server::job::DataSetProto_PackageEntryProto_State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::DataSetProto_PackageEntryProto_State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSetProto_PackageEntryProto_State_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DataSetProto_PackageEntryProto_State_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_DataSetProto_PackageEntryProto_StopReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_DataSetProto_PackageEntryProto_StopReasonCount_default_instance_;
    new (ptr) ::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSetProto_PackageEntryProto_StopReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DataSetProto_PackageEntryProto_StopReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_GrantedUriPermissionsDumpProto_default_instance_;
    new (ptr) ::com::android::server::job::GrantedUriPermissionsDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::GrantedUriPermissionsDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobConcurrencyManagerProto_default_instance_;
    new (ptr) ::com::android::server::job::JobConcurrencyManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobConcurrencyManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobCountTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StatLoggerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto.base,}};

static void InitDefaultsscc_info_JobCountTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobCountTrackerProto_default_instance_;
    new (ptr) ::com::android::server::job::JobCountTrackerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobCountTrackerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobCountTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobCountTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobPackageHistoryProto_default_instance_;
    new (ptr) ::com::android::server::job::JobPackageHistoryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobPackageHistoryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobPackageHistoryProto_HistoryEvent_default_instance_;
    new (ptr) ::com::android::server::job::JobPackageHistoryProto_HistoryEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobPackageHistoryProto_HistoryEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobPackageTrackerDumpProto_default_instance_;
    new (ptr) ::com::android::server::job::JobPackageTrackerDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobPackageTrackerDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_JobSchedulerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsscc_info_JobSchedulerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobSchedulerServiceDumpProto_PriorityOverride_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_CountQuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_JobRestriction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_JobRestriction_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedulerServiceDumpProto_JobRestriction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobSchedulerServiceDumpProto_JobRestriction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_PendingJob_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_PriorityOverride_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_PriorityOverride_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedulerServiceDumpProto_PriorityOverride_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobSchedulerServiceDumpProto_PriorityOverride_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobSchedulerServiceDumpProto_RegisteredJob_default_instance_;
    new (ptr) ::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobSchedulerServiceDumpProto_JobRestriction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStatusDumpProto_default_instance_;
    new (ptr) ::com::android::server::job::JobStatusDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStatusDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobStatusDumpProto_ImplicitConstraints_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_NetworkProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetwork_2eproto.base,
      &scc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobStatusDumpProto_ImplicitConstraints_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStatusDumpProto_ImplicitConstraints_default_instance_;
    new (ptr) ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusDumpProto_ImplicitConstraints_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobStatusDumpProto_ImplicitConstraints_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_;
    new (ptr) ::com::android::server::job::JobStatusDumpProto_JobInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStatusDumpProto_JobInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,
      &scc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_PersistableBundleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpersistablebundle_2eproto.base,
      &scc_info_BundleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto.base,
      &scc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base,
      &scc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_NetworkRequestProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto.base,
      &scc_info_JobStatusDumpProto_JobInfo_Backoff_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobStatusDumpProto_JobInfo_Backoff_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStatusDumpProto_JobInfo_Backoff_default_instance_;
    new (ptr) ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusDumpProto_JobInfo_Backoff_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobStatusDumpProto_JobInfo_Backoff_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStatusDumpProto_JobInfo_TriggerContentUri_default_instance_;
    new (ptr) ::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStatusDumpProto_JobWorkItem_default_instance_;
    new (ptr) ::com::android::server::job::JobStatusDumpProto_JobWorkItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStatusDumpProto_JobWorkItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,
      &scc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStatusShortInfoProto_default_instance_;
    new (ptr) ::com::android::server::job::JobStatusShortInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStatusShortInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStorePersistStatsProto_default_instance_;
    new (ptr) ::com::android::server::job::JobStorePersistStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStorePersistStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStorePersistStatsProto_Stats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_JobStorePersistStatsProto_Stats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_JobStorePersistStatsProto_Stats_default_instance_;
    new (ptr) ::com::android::server::job::JobStorePersistStatsProto_Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::JobStorePersistStatsProto_Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStorePersistStatsProto_Stats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JobStorePersistStatsProto_Stats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_MaxJobCountsPerMemoryTrimLevelProto_default_instance_;
    new (ptr) ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_MaxJobCountsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_MaxJobCountsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_MaxJobCountsProto_default_instance_;
    new (ptr) ::com::android::server::job::MaxJobCountsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::MaxJobCountsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxJobCountsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MaxJobCountsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsscc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_BackgroundJobsController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_BackgroundJobsController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_BackgroundJobsController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base,
      &scc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_BackgroundJobsController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_BatteryController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_BatteryController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_BatteryController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_BatteryController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_BatteryController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_BatteryController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_ConnectivityController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_ConnectivityController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_ConnectivityController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_NetworkProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetwork_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_ConnectivityController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_NetworkRequestProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_ContentObserverController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_ContentObserverController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_ContentObserverController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_ContentObserverController_Observer_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_ContentObserverController_Observer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_ContentObserverController_Observer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_ContentObserverController_Observer_TriggerContentData_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_ContentObserverController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_DeviceIdleJobsController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_DeviceIdleJobsController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_DeviceIdleJobsController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_DeviceIdleJobsController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_IdleController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_IdleController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_IdleController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_IdleController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_IdleController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_IdleController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_AlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_AlarmListener_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_AlarmListener();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_AlarmListener::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_AlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateControllerProto_QuotaController_AlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_ExecutionStats_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateControllerProto_QuotaController_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_InQuotaAlarmListener_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_Package_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_Package();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_Package::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_PackageStats_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_PackageStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_PackageStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_QuotaController_TimingSession_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_StateControllerProto_QuotaController_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_Timer_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_Timer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_Timer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_TimingSession_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_TimingSession_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_TimingSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_TimingSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_TimingSession_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateControllerProto_QuotaController_TimingSession_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_TopAppTimer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_TopAppTimer_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_QuotaController_TopAppTimer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_QuotaController_TopAppTimer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_QuotaController_UidPackageMapping_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {}};

static void InitDefaultsscc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_StorageController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_StorageController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_StorageController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_StorageController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_StorageController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_StorageController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_TimeController_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_TimeController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_TimeController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static void InitDefaultsscc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::job::_StateControllerProto_TimeController_TrackedJob_default_instance_;
    new (ptr) ::com::android::server::job::StateControllerProto_TimeController_TrackedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::job::StateControllerProto_TimeController_TrackedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto}, {
      &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto[67];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction, reason_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction, is_restricting_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, dump_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, is_job_ready_to_be_executed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, is_job_ready_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, are_users_started_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, is_job_restricted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, is_job_pending_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, is_job_currently_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, is_uid_backing_up_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, is_component_usable_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob, restrictions_),
  0,
  1,
  6,
  7,
  8,
  9,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride, override_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob, dump_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob, evaluated_priority_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob, pending_duration_ms_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob, time_since_stopped_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob, stopped_reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, running_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, time_until_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, dump_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, evaluated_priority_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, time_since_made_active_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob, pending_duration_ms_),
  0,
  2,
  3,
  1,
  6,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJobDefaultTypeInternal, inactive_),
  offsetof(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJobDefaultTypeInternal, running_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob, job_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, settings_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, in_thermal_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, started_users_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, registered_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, controllers_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, priority_overrides_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, backing_up_uids_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, history_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, package_tracker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, pending_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, active_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, is_ready_to_rock_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, reported_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, max_active_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, concurrency_manager_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, persist_stats_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobSchedulerServiceDumpProto, quota_tracker_),
  0,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  8,
  9,
  6,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, allowed_time_per_period_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, in_quota_buffer_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, active_window_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, working_window_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, frequent_window_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, rare_window_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, restricted_window_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_execution_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_job_count_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_job_count_working_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_job_count_frequent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_job_count_rare_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_job_count_restricted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, rate_limiting_window_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_job_count_per_rate_limiting_window_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_session_count_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_session_count_working_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_session_count_frequent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_session_count_rare_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_session_count_restricted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, max_session_count_per_rate_limiting_window_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, timing_session_coalescing_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, min_quota_check_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_limit_active_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_limit_working_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_limit_frequent_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_limit_rare_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_limit_restricted_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_window_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_top_app_time_chunk_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_reward_top_app_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_reward_interaction_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_QuotaController, expedited_job_reward_notification_seen_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  18,
  6,
  7,
  8,
  9,
  10,
  20,
  19,
  11,
  12,
  13,
  14,
  15,
  32,
  16,
  17,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_TimeController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto_TimeController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, min_ready_non_active_jobs_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, max_non_active_job_batch_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, heavy_use_factor_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, moderate_use_factor_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, fg_job_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, bg_normal_job_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, bg_moderate_job_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, bg_low_job_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, bg_critical_job_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, min_linear_backoff_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, min_exp_backoff_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, conn_congestion_delay_frac_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, conn_prefetch_relax_frac_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, enable_api_quotas_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, api_quota_schedule_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, api_quota_schedule_window_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, api_quota_schedule_throw_exception_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, api_quota_schedule_return_failure_result_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, quota_controller_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, time_controller_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, max_job_counts_screen_on_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, max_job_counts_screen_off_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::ConstantsProto, screen_off_job_concurrency_increase_delay_ms_),
  20,
  19,
  4,
  5,
  6,
  7,
  8,
  9,
  13,
  10,
  11,
  12,
  15,
  16,
  21,
  22,
  17,
  18,
  0,
  1,
  2,
  3,
  14,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsProto, total_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsProto, max_bg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsProto, min_bg_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto, normal_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto, moderate_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto, low_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto, critical_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, source_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, source_package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, is_in_foreground_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, is_whitelisted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, can_run_any_in_background_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob, are_constraints_satisfied_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController, app_state_tracker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BackgroundJobsController, tracked_jobs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController_TrackedJob, source_uid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController, is_on_stable_power_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController, is_battery_not_low_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController, is_monitoring_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController, last_broadcast_sequence_number_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_BatteryController, tracked_jobs_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob, source_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob, required_network_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController, tracked_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController, requested_standby_exception_uids_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ConnectivityController, available_networks_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob, source_uid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, source_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, trigger_content_update_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, trigger_content_max_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, changed_authorities_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance, changed_uris_),
  0,
  3,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData, uri_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData, jobs_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController_Observer, triggers_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController, tracked_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_ContentObserverController, observers_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, source_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, source_package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, are_constraints_satisfied_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, is_doze_whitelisted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob, is_allowed_in_doze_),
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController, is_device_idle_mode_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_DeviceIdleJobsController, tracked_jobs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_TrackedJob, source_uid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker, is_idle_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker, is_garage_mode_on_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker, is_idle_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker, is_screen_on_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker, is_dock_idle_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker, projection_active_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::android::server::job::StateControllerProto_IdleController_IdlenessTrackerDefaultTypeInternal, device_idleness_tracker_),
  offsetof(::com::android::server::job::StateControllerProto_IdleController_IdlenessTrackerDefaultTypeInternal, car_idleness_tracker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker, active_tracker_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController, is_idle_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController, tracked_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_IdleController, idleness_tracker_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, source_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, effective_standby_bucket_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, is_top_started_job_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, has_quota_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, remaining_quota_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, is_requested_foreground_job_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob, is_within_fg_job_quota_),
  0,
  1,
  2,
  4,
  5,
  3,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_AlarmListener, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_AlarmListener, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_AlarmListener, is_waiting_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_AlarmListener, trigger_time_elapsed_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, standby_bucket_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, expiration_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, window_size_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, job_count_limit_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, session_count_limit_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, execution_time_in_window_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, bg_job_count_in_window_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, execution_time_in_max_period_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, bg_job_count_in_max_period_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, session_count_in_window_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, in_quota_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, job_count_expiration_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, job_count_in_rate_limiting_window_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, session_count_expiration_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats, session_count_in_rate_limiting_window_),
  2,
  0,
  1,
  13,
  14,
  4,
  3,
  5,
  7,
  11,
  6,
  9,
  8,
  10,
  12,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Package, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Package, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Package, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TimingSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TimingSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TimingSession, start_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TimingSession, end_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TimingSession, bg_job_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Timer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Timer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Timer, pkg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Timer, is_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Timer, start_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Timer, bg_job_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_Timer, running_jobs_),
  0,
  2,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer, pkg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer, is_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer, start_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer, activity_count_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_PackageStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_PackageStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_PackageStats, pkg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_PackageStats, timer_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_PackageStats, saved_sessions_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_PackageStats, execution_stats_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_PackageStats, fg_job_timer_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping, package_names_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm, pkg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm, in_quota_time_elapsed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener, trigger_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener, alarms_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, is_charging_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, elapsed_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, foreground_uids_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, tracked_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, package_stats_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, uid_to_package_cache_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_QuotaController, in_quota_alarm_listener_),
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController_TrackedJob, source_uid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController, is_storage_not_low_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController, last_broadcast_sequence_number_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_StorageController, tracked_jobs_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, source_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, has_timing_delay_constraint_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, delay_time_remaining_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, has_deadline_constraint_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController_TrackedJob, time_remaining_until_deadline_ms_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController, now_elapsed_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController, time_until_next_delay_alarm_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController, time_until_next_deadline_alarm_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto_TimeController, tracked_jobs_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, background_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, battery_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, connectivity_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, content_observer_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, device_idle_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, idle_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, quota_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, storage_),
  offsetof(::com::android::server::job::StateControllerProtoDefaultTypeInternal, time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::StateControllerProto, controller_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_State, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_State, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_State, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount, reason_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount, count_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, pending_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, active_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, active_top_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, pending_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, active_top_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto_PackageEntryProto, stop_reasons_),
  4,
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, start_clock_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, elapsed_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, period_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, package_entries_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, max_concurrency_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::DataSetProto, max_foreground_concurrency_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::GrantedUriPermissionsDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::GrantedUriPermissionsDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::GrantedUriPermissionsDumpProto, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::GrantedUriPermissionsDumpProto, source_user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::GrantedUriPermissionsDumpProto, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::GrantedUriPermissionsDumpProto, permission_owner_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::GrantedUriPermissionsDumpProto, uris_),
  2,
  3,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageTrackerDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageTrackerDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageTrackerDumpProto, historical_stats_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageTrackerDumpProto, current_stats_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, event_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, time_since_event_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, job_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto_HistoryEvent, stop_reason_),
  2,
  1,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobPackageHistoryProto, history_event_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusShortInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusShortInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusShortInfoProto, calling_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusShortInfoProto, job_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusShortInfoProto, battery_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri, uri_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff, policy_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff, initial_backoff_ms_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, service_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, is_periodic_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, period_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, period_flex_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, is_persisted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, priority_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, requires_charging_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, requires_battery_not_low_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, requires_device_idle_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, trigger_content_uris_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, trigger_content_update_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, trigger_content_max_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, extras_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, transient_extras_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, clip_data_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, granted_uri_permissions_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, required_network_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, total_network_download_bytes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, total_network_upload_bytes_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, min_latency_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, max_execution_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, backoff_policy_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, has_early_constraint_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobInfo, has_late_constraint_),
  0,
  10,
  7,
  8,
  11,
  9,
  16,
  12,
  13,
  17,
  ~0u,
  14,
  15,
  1,
  2,
  3,
  4,
  5,
  22,
  23,
  20,
  21,
  6,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_ImplicitConstraints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_ImplicitConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_ImplicitConstraints, is_not_dozing_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_ImplicitConstraints, is_not_restricted_in_bg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_ImplicitConstraints, is_dynamic_satisfied_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobWorkItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobWorkItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobWorkItem, work_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobWorkItem, delivery_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobWorkItem, intent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto_JobWorkItem, uri_grants_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, calling_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, source_uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, source_user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, source_package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, job_info_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, required_constraints_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, dynamic_constraints_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, satisfied_constraints_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, unsatisfied_constraints_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, is_doze_whitelisted_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, is_uid_active_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, implicit_constraints_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, tracking_controllers_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, changed_authorities_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, changed_uris_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, network_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, pending_work_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, executing_work_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, standby_bucket_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, is_exempted_from_app_standby_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, enqueue_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, time_until_earliest_runtime_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, time_until_latest_runtime_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, original_latest_runtime_elapsed_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, num_failures_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, last_successful_run_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, last_failed_run_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, internal_flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, time_since_first_deferral_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStatusDumpProto, time_since_first_force_batch_attempt_ms_),
  5,
  0,
  6,
  7,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  13,
  14,
  4,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  8,
  15,
  9,
  10,
  11,
  21,
  12,
  16,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, current_interactive_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, effective_interactive_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, time_since_last_screen_on_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, time_since_last_screen_off_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, job_count_tracker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, memory_trim_level_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobConcurrencyManagerProto, stats_),
  3,
  4,
  2,
  6,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, config_num_max_total_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, config_num_max_bg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, config_num_min_bg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_running_fg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_running_bg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_pending_fg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_pending_bg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_actual_max_fg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_actual_max_bg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_reserved_for_bg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_starting_fg_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobCountTrackerProto, num_starting_bg_jobs_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto_Stats, num_total_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto_Stats, num_system_server_jobs_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto_Stats, num_system_sync_manager_jobs_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto, first_load_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::job::JobStorePersistStatsProto, last_save_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction)},
  { 9, 25, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob)},
  { 36, 43, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride)},
  { 45, 54, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob)},
  { 58, 65, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob)},
  { 67, 79, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob)},
  { 86, 94, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob)},
  { 96, 118, sizeof(::com::android::server::job::JobSchedulerServiceDumpProto)},
  { 135, 173, sizeof(::com::android::server::job::ConstantsProto_QuotaController)},
  { 206, 211, sizeof(::com::android::server::job::ConstantsProto_TimeController)},
  { 211, 239, sizeof(::com::android::server::job::ConstantsProto)},
  { 262, 270, sizeof(::com::android::server::job::MaxJobCountsProto)},
  { 273, 282, sizeof(::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto)},
  { 286, 298, sizeof(::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob)},
  { 305, 312, sizeof(::com::android::server::job::StateControllerProto_BackgroundJobsController)},
  { 314, 321, sizeof(::com::android::server::job::StateControllerProto_BatteryController_TrackedJob)},
  { 323, 333, sizeof(::com::android::server::job::StateControllerProto_BatteryController)},
  { 338, 346, sizeof(::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob)},
  { 349, 357, sizeof(::com::android::server::job::StateControllerProto_ConnectivityController)},
  { 360, 367, sizeof(::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob)},
  { 369, 380, sizeof(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance)},
  { 386, 394, sizeof(::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData)},
  { 397, 404, sizeof(::com::android::server::job::StateControllerProto_ContentObserverController_Observer)},
  { 406, 413, sizeof(::com::android::server::job::StateControllerProto_ContentObserverController)},
  { 415, 426, sizeof(::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob)},
  { 432, 439, sizeof(::com::android::server::job::StateControllerProto_DeviceIdleJobsController)},
  { 441, 448, sizeof(::com::android::server::job::StateControllerProto_IdleController_TrackedJob)},
  { 450, 457, sizeof(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker)},
  { 459, 468, sizeof(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker)},
  { 472, 480, sizeof(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker)},
  { 482, 490, sizeof(::com::android::server::job::StateControllerProto_IdleController)},
  { 493, 506, sizeof(::com::android::server::job::StateControllerProto_QuotaController_TrackedJob)},
  { 514, 521, sizeof(::com::android::server::job::StateControllerProto_QuotaController_AlarmListener)},
  { 523, 543, sizeof(::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats)},
  { 558, 565, sizeof(::com::android::server::job::StateControllerProto_QuotaController_Package)},
  { 567, 575, sizeof(::com::android::server::job::StateControllerProto_QuotaController_TimingSession)},
  { 578, 588, sizeof(::com::android::server::job::StateControllerProto_QuotaController_Timer)},
  { 593, 602, sizeof(::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer)},
  { 606, 616, sizeof(::com::android::server::job::StateControllerProto_QuotaController_PackageStats)},
  { 621, 628, sizeof(::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping)},
  { 630, 637, sizeof(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm)},
  { 639, 646, sizeof(::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener)},
  { 648, 660, sizeof(::com::android::server::job::StateControllerProto_QuotaController)},
  { 667, 674, sizeof(::com::android::server::job::StateControllerProto_StorageController_TrackedJob)},
  { 676, 684, sizeof(::com::android::server::job::StateControllerProto_StorageController)},
  { 687, 698, sizeof(::com::android::server::job::StateControllerProto_TimeController_TrackedJob)},
  { 704, 713, sizeof(::com::android::server::job::StateControllerProto_TimeController)},
  { 717, 732, sizeof(::com::android::server::job::StateControllerProto)},
  { 741, 748, sizeof(::com::android::server::job::DataSetProto_PackageEntryProto_State)},
  { 750, 757, sizeof(::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount)},
  { 759, 773, sizeof(::com::android::server::job::DataSetProto_PackageEntryProto)},
  { 782, 793, sizeof(::com::android::server::job::DataSetProto)},
  { 799, 809, sizeof(::com::android::server::job::GrantedUriPermissionsDumpProto)},
  { 814, 821, sizeof(::com::android::server::job::JobPackageTrackerDumpProto)},
  { 823, 834, sizeof(::com::android::server::job::JobPackageHistoryProto_HistoryEvent)},
  { 840, 846, sizeof(::com::android::server::job::JobPackageHistoryProto)},
  { 847, 855, sizeof(::com::android::server::job::JobStatusShortInfoProto)},
  { 858, 865, sizeof(::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri)},
  { 867, 874, sizeof(::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff)},
  { 876, 906, sizeof(::com::android::server::job::JobStatusDumpProto_JobInfo)},
  { 931, 939, sizeof(::com::android::server::job::JobStatusDumpProto_ImplicitConstraints)},
  { 942, 951, sizeof(::com::android::server::job::JobStatusDumpProto_JobWorkItem)},
  { 955, 991, sizeof(::com::android::server::job::JobStatusDumpProto)},
  { 1022, 1034, sizeof(::com::android::server::job::JobConcurrencyManagerProto)},
  { 1041, 1058, sizeof(::com::android::server::job::JobCountTrackerProto)},
  { 1070, 1078, sizeof(::com::android::server::job::JobStorePersistStatsProto_Stats)},
  { 1081, 1088, sizeof(::com::android::server::job::JobStorePersistStatsProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_JobRestriction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_RegisteredJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_PriorityOverride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_PendingJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_ConstantsProto_QuotaController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_ConstantsProto_TimeController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_ConstantsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_MaxJobCountsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_MaxJobCountsPerMemoryTrimLevelProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_BackgroundJobsController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_BackgroundJobsController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_BatteryController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_BatteryController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_ConnectivityController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_ConnectivityController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_ContentObserverController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_ContentObserverController_Observer_TriggerContentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_ContentObserverController_Observer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_ContentObserverController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_DeviceIdleJobsController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_DeviceIdleJobsController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_IdleController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_IdleController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_AlarmListener_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_ExecutionStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_Package_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_TimingSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_Timer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_TopAppTimer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_PackageStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_UidPackageMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_InQuotaAlarmListener_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_QuotaController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_StorageController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_StorageController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_TimeController_TrackedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_TimeController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_StateControllerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_DataSetProto_PackageEntryProto_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_DataSetProto_PackageEntryProto_StopReasonCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_DataSetProto_PackageEntryProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_DataSetProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_GrantedUriPermissionsDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobPackageTrackerDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobPackageHistoryProto_HistoryEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobPackageHistoryProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStatusShortInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStatusDumpProto_JobInfo_TriggerContentUri_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStatusDumpProto_JobInfo_Backoff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStatusDumpProto_ImplicitConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStatusDumpProto_JobWorkItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStatusDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobConcurrencyManagerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobCountTrackerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStorePersistStatsProto_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::job::_JobStorePersistStatsProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n<frameworks/base/core/proto/android/ser"
  "ver/jobscheduler.proto\022\026com.android.serv"
  "er.job\0329frameworks/base/core/proto/andro"
  "id/content/clipdata.proto\032\?frameworks/ba"
  "se/core/proto/android/content/component_"
  "name.proto\0327frameworks/base/core/proto/a"
  "ndroid/content/intent.proto\0324frameworks/"
  "base/core/proto/android/net/network.prot"
  "o\032;frameworks/base/core/proto/android/ne"
  "t/networkrequest.proto\0322frameworks/base/"
  "core/proto/android/os/bundle.proto\032=fram"
  "eworks/base/core/proto/android/os/persis"
  "tablebundle.proto\032\?frameworks/base/core/"
  "proto/android/server/appstatetracker.pro"
  "to\032:frameworks/base/core/proto/android/s"
  "erver/statlogger.proto\0320frameworks/base/"
  "core/proto/android/privacy.proto\032:framew"
  "orks/base/core/proto/android/util/quotat"
  "racker.proto\0328frameworks/proto_logging/s"
  "tats/enums/app/job/enums.proto\032;framewor"
  "ks/proto_logging/stats/enums/server/job/"
  "enums.proto\"\335\023\n\034JobSchedulerServiceDumpP"
  "roto\0228\n\010settings\030\001 \001(\0132&.com.android.ser"
  "ver.job.ConstantsProto\022\022\n\nin_thermal\030\023 \001"
  "(\010\022\025\n\rstarted_users\030\002 \003(\005\022[\n\017registered_"
  "jobs\030\003 \003(\0132B.com.android.server.job.JobS"
  "chedulerServiceDumpProto.RegisteredJob\022A"
  "\n\013controllers\030\004 \003(\0132,.com.android.server"
  ".job.StateControllerProto\022a\n\022priority_ov"
  "errides\030\005 \003(\0132E.com.android.server.job.J"
  "obSchedulerServiceDumpProto.PriorityOver"
  "ride\022\027\n\017backing_up_uids\030\006 \003(\005\022\?\n\007history"
  "\030\007 \001(\0132..com.android.server.job.JobPacka"
  "geHistoryProto\022K\n\017package_tracker\030\010 \001(\0132"
  "2.com.android.server.job.JobPackageTrack"
  "erDumpProto\022U\n\014pending_jobs\030\t \003(\0132\?.com."
  "android.server.job.JobSchedulerServiceDu"
  "mpProto.PendingJob\022S\n\013active_jobs\030\n \003(\0132"
  ">.com.android.server.job.JobSchedulerSer"
  "viceDumpProto.ActiveJob\022\030\n\020is_ready_to_r"
  "ock\030\013 \001(\010\022\027\n\017reported_active\030\014 \001(\010\022\027\n\017ma"
  "x_active_jobs\030\r \001(\005\022O\n\023concurrency_manag"
  "er\030\024 \001(\01322.com.android.server.job.JobCon"
  "currencyManagerProto\022H\n\rpersist_stats\030\025 "
  "\001(\01321.com.android.server.job.JobStorePer"
  "sistStatsProto\022A\n\rquota_tracker\030\026 \001(\0132*."
  "android.util.quota.CountQuotaTrackerProt"
  "o\032l\n\016JobRestriction\0227\n\006reason\030\001 \001(\0162\'.an"
  "droid.app.job.InternalStopReasonEnum\022\026\n\016"
  "is_restricting\030\002 \001(\010:\t\232\237\325\207\003\003\010\310\001\032\326\003\n\rRegi"
  "steredJob\022=\n\004info\030\001 \001(\0132/.com.android.se"
  "rver.job.JobStatusShortInfoProto\0228\n\004dump"
  "\030\002 \001(\0132*.com.android.server.job.JobStatu"
  "sDumpProto\022#\n\033is_job_ready_to_be_execute"
  "d\030\n \001(\010\022\024\n\014is_job_ready\030\003 \001(\010\022\031\n\021are_use"
  "rs_started\030\004 \001(\010\022\031\n\021is_job_restricted\030\013 "
  "\001(\010\022\026\n\016is_job_pending\030\005 \001(\010\022\037\n\027is_job_cu"
  "rrently_active\030\006 \001(\010\022\031\n\021is_uid_backing_u"
  "p\030\007 \001(\010\022\033\n\023is_component_usable\030\010 \001(\010\022Y\n\014"
  "restrictions\030\014 \003(\0132C.com.android.server."
  "job.JobSchedulerServiceDumpProto.JobRest"
  "riction:\t\232\237\325\207\003\003\010\310\001J\004\010\t\020\n\032B\n\020PriorityOver"
  "ride\022\013\n\003uid\030\001 \001(\005\022\026\n\016override_value\030\002 \001("
  "\021:\t\232\237\325\207\003\003\010\310\001\032\311\001\n\nPendingJob\022=\n\004info\030\001 \001("
  "\0132/.com.android.server.job.JobStatusShor"
  "tInfoProto\0228\n\004dump\030\002 \001(\0132*.com.android.s"
  "erver.job.JobStatusDumpProto\022\032\n\022evaluate"
  "d_priority\030\003 \001(\021\022\033\n\023pending_duration_ms\030"
  "\004 \001(\003:\t\232\237\325\207\003\003\010\310\001\032\327\004\n\tActiveJob\022^\n\010inacti"
  "ve\030\001 \001(\0132J.com.android.server.job.JobSch"
  "edulerServiceDumpProto.ActiveJob.Inactiv"
  "eJobH\000\022\\\n\007running\030\002 \001(\0132I.com.android.se"
  "rver.job.JobSchedulerServiceDumpProto.Ac"
  "tiveJob.RunningJobH\000\032O\n\013InactiveJob\022\035\n\025t"
  "ime_since_stopped_ms\030\001 \001(\003\022\026\n\016stopped_re"
  "ason\030\002 \001(\t:\t\232\237\325\207\003\003\010\310\001\032\250\002\n\nRunningJob\022=\n\004"
  "info\030\001 \001(\0132/.com.android.server.job.JobS"
  "tatusShortInfoProto\022\033\n\023running_duration_"
  "ms\030\002 \001(\003\022\035\n\025time_until_timeout_ms\030\003 \001(\003\022"
  "8\n\004dump\030\004 \001(\0132*.com.android.server.job.J"
  "obStatusDumpProto\022\032\n\022evaluated_priority\030"
  "\005 \001(\021\022!\n\031time_since_made_active_ms\030\006 \001(\003"
  "\022\033\n\023pending_duration_ms\030\007 \001(\003:\t\232\237\325\207\003\003\010\310\001"
  ":\t\232\237\325\207\003\003\010\310\001B\005\n\003job:\t\232\237\325\207\003\003\010\310\001J\004\010\016\020\017J\004\010\017\020"
  "\020J\004\010\020\020\021J\004\010\021\020\022J\004\010\022\020\023\"\354\022\n\016ConstantsProto\022\'"
  "\n\037min_ready_non_active_jobs_count\030\035 \001(\005\022"
  ")\n!max_non_active_job_batch_delay_ms\030\036 \001"
  "(\003\022\030\n\020heavy_use_factor\030\010 \001(\001\022\033\n\023moderate"
  "_use_factor\030\t \001(\001\022\024\n\014fg_job_count\030\n \001(\005\022"
  "\033\n\023bg_normal_job_count\030\013 \001(\005\022\035\n\025bg_moder"
  "ate_job_count\030\014 \001(\005\022\030\n\020bg_low_job_count\030"
  "\r \001(\005\022\035\n\025bg_critical_job_count\030\016 \001(\005\022\"\n\032"
  "min_linear_backoff_time_ms\030\021 \001(\003\022\037\n\027min_"
  "exp_backoff_time_ms\030\022 \001(\003\022\"\n\032conn_conges"
  "tion_delay_frac\030\025 \001(\001\022 \n\030conn_prefetch_r"
  "elax_frac\030\026 \001(\001\022\031\n\021enable_api_quotas\030\037 \001"
  "(\010\022 \n\030api_quota_schedule_count\030  \001(\005\022$\n\034"
  "api_quota_schedule_window_ms\030! \001(\003\022*\n\"ap"
  "i_quota_schedule_throw_exception\030\" \001(\010\0220"
  "\n(api_quota_schedule_return_failure_resu"
  "lt\030# \001(\010\022P\n\020quota_controller\030\030 \001(\01326.com"
  ".android.server.job.ConstantsProto.Quota"
  "Controller\022N\n\017time_controller\030\031 \001(\01325.co"
  "m.android.server.job.ConstantsProto.Time"
  "Controller\022]\n\030max_job_counts_screen_on\030\032"
  " \001(\0132;.com.android.server.job.MaxJobCoun"
  "tsPerMemoryTrimLevelProto\022^\n\031max_job_cou"
  "nts_screen_off\030\033 \001(\0132;.com.android.serve"
  "r.job.MaxJobCountsPerMemoryTrimLevelProt"
  "o\0224\n,screen_off_job_concurrency_increase"
  "_delay_ms\030\034 \001(\005\032\344\t\n\017QuotaController\022\"\n\032a"
  "llowed_time_per_period_ms\030\001 \001(\003\022\032\n\022in_qu"
  "ota_buffer_ms\030\002 \001(\003\022\035\n\025active_window_siz"
  "e_ms\030\003 \001(\003\022\036\n\026working_window_size_ms\030\004 \001"
  "(\003\022\037\n\027frequent_window_size_ms\030\005 \001(\003\022\033\n\023r"
  "are_window_size_ms\030\006 \001(\003\022!\n\031restricted_w"
  "indow_size_ms\030\024 \001(\003\022\035\n\025max_execution_tim"
  "e_ms\030\007 \001(\003\022\034\n\024max_job_count_active\030\010 \001(\005"
  "\022\035\n\025max_job_count_working\030\t \001(\005\022\036\n\026max_j"
  "ob_count_frequent\030\n \001(\005\022\032\n\022max_job_count"
  "_rare\030\013 \001(\005\022 \n\030max_job_count_restricted\030"
  "\025 \001(\005\022\037\n\027rate_limiting_window_ms\030\023 \001(\005\022."
  "\n&max_job_count_per_rate_limiting_window"
  "\030\014 \001(\005\022 \n\030max_session_count_active\030\r \001(\005"
  "\022!\n\031max_session_count_working\030\016 \001(\005\022\"\n\032m"
  "ax_session_count_frequent\030\017 \001(\005\022\036\n\026max_s"
  "ession_count_rare\030\020 \001(\005\022$\n\034max_session_c"
  "ount_restricted\030\026 \001(\005\0222\n*max_session_cou"
  "nt_per_rate_limiting_window\030\021 \001(\005\022-\n%tim"
  "ing_session_coalescing_duration_ms\030\022 \001(\003"
  "\022 \n\030min_quota_check_delay_ms\030\027 \001(\003\022%\n\035ex"
  "pedited_job_limit_active_ms\030\030 \001(\003\022&\n\036exp"
  "edited_job_limit_working_ms\030\031 \001(\003\022\'\n\037exp"
  "edited_job_limit_frequent_ms\030\032 \001(\003\022#\n\033ex"
  "pedited_job_limit_rare_ms\030\033 \001(\003\022)\n!exped"
  "ited_job_limit_restricted_ms\030\034 \001(\003\022$\n\034ex"
  "pedited_job_window_size_ms\030\035 \001(\003\0220\n(expe"
  "dited_job_top_app_time_chunk_size_ms\030\036 \001"
  "(\003\022\'\n\037expedited_job_reward_top_app_ms\030\037 "
  "\001(\003\022+\n#expedited_job_reward_interaction_"
  "ms\030  \001(\003\0221\n)expedited_job_reward_notific"
  "ation_seen_ms\030! \001(\003:\t\232\237\325\207\003\003\010\310\001\032\'\n\016TimeCo"
  "ntroller:\t\232\237\325\207\003\003\010\310\001J\004\010\001\020\002J\004\010\002\020\003:\t\232\237\325\207\003\003\010"
  "\310\001J\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004"
  "\010\007\020\010J\004\010\017\020\020J\004\010\020\020\021J\004\010\023\020\024J\004\010\024\020\025J\004\010\027\020\030\"R\n\021Ma"
  "xJobCountsProto\022\022\n\ntotal_jobs\030\001 \001(\005\022\016\n\006m"
  "ax_bg\030\002 \001(\005\022\016\n\006min_bg\030\003 \001(\005:\t\232\237\325\207\003\003\010\310\001\"\235"
  "\002\n#MaxJobCountsPerMemoryTrimLevelProto\0229"
  "\n\006normal\030\001 \001(\0132).com.android.server.job."
  "MaxJobCountsProto\022;\n\010moderate\030\002 \001(\0132).co"
  "m.android.server.job.MaxJobCountsProto\0226"
  "\n\003low\030\003 \001(\0132).com.android.server.job.Max"
  "JobCountsProto\022;\n\010critical\030\004 \001(\0132).com.a"
  "ndroid.server.job.MaxJobCountsProto:\t\232\237\325"
  "\207\003\003\010\310\001\"\253\?\n\024StateControllerProto\022[\n\nbackg"
  "round\030\001 \001(\0132E.com.android.server.job.Sta"
  "teControllerProto.BackgroundJobsControll"
  "erH\000\022Q\n\007battery\030\002 \001(\0132>.com.android.serv"
  "er.job.StateControllerProto.BatteryContr"
  "ollerH\000\022[\n\014connectivity\030\003 \001(\0132C.com.andr"
  "oid.server.job.StateControllerProto.Conn"
  "ectivityControllerH\000\022b\n\020content_observer"
  "\030\004 \001(\0132F.com.android.server.job.StateCon"
  "trollerProto.ContentObserverControllerH\000"
  "\022\\\n\013device_idle\030\005 \001(\0132E.com.android.serv"
  "er.job.StateControllerProto.DeviceIdleJo"
  "bsControllerH\000\022K\n\004idle\030\006 \001(\0132;.com.andro"
  "id.server.job.StateControllerProto.IdleC"
  "ontrollerH\000\022M\n\005quota\030\t \001(\0132<.com.android"
  ".server.job.StateControllerProto.QuotaCo"
  "ntrollerH\000\022Q\n\007storage\030\007 \001(\0132>.com.androi"
  "d.server.job.StateControllerProto.Storag"
  "eControllerH\000\022K\n\004time\030\010 \001(\0132;.com.androi"
  "d.server.job.StateControllerProto.TimeCo"
  "ntrollerH\000\032\324\003\n\030BackgroundJobsController\022"
  "C\n\021app_state_tracker\030\001 \001(\0132(.com.android"
  ".server.AppStateTrackerProto\022f\n\014tracked_"
  "jobs\030\002 \003(\0132P.com.android.server.job.Stat"
  "eControllerProto.BackgroundJobsControlle"
  "r.TrackedJob\032\377\001\n\nTrackedJob\022=\n\004info\030\001 \001("
  "\0132/.com.android.server.job.JobStatusShor"
  "tInfoProto\022\022\n\nsource_uid\030\002 \001(\005\022\033\n\023source"
  "_package_name\030\003 \001(\t\022\030\n\020is_in_foreground\030"
  "\004 \001(\010\022\026\n\016is_whitelisted\030\005 \001(\010\022!\n\031can_run"
  "_any_in_background\030\006 \001(\010\022!\n\031are_constrai"
  "nts_satisfied\030\007 \001(\010:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310"
  "\001\032\342\002\n\021BatteryController\022\032\n\022is_on_stable_"
  "power\030\001 \001(\010\022\032\n\022is_battery_not_low\030\002 \001(\010\022"
  "\025\n\ris_monitoring\030\003 \001(\010\022&\n\036last_broadcast"
  "_sequence_number\030\004 \001(\005\022_\n\014tracked_jobs\030\005"
  " \003(\0132I.com.android.server.job.StateContr"
  "ollerProto.BatteryController.TrackedJob\032"
  "j\n\nTrackedJob\022=\n\004info\030\001 \001(\0132/.com.androi"
  "d.server.job.JobStatusShortInfoProto\022\022\n\n"
  "source_uid\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\032\231"
  "\003\n\026ConnectivityController\022d\n\014tracked_job"
  "s\030\002 \003(\0132N.com.android.server.job.StateCo"
  "ntrollerProto.ConnectivityController.Tra"
  "ckedJob\022(\n requested_standby_exception_u"
  "ids\030\003 \003(\005\0225\n\022available_networks\030\004 \003(\0132\031."
  "android.net.NetworkProto\032\246\001\n\nTrackedJob\022"
  "=\n\004info\030\001 \001(\0132/.com.android.server.job.J"
  "obStatusShortInfoProto\022\022\n\nsource_uid\030\002 \001"
  "(\005\022:\n\020required_network\030\003 \001(\0132 .android.n"
  "et.NetworkRequestProto:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003"
  "\003\010\310\001J\004\010\001\020\002\032\310\007\n\031ContentObserverController"
  "\022g\n\014tracked_jobs\030\001 \003(\0132Q.com.android.ser"
  "ver.job.StateControllerProto.ContentObse"
  "rverController.TrackedJob\022b\n\tobservers\030\002"
  " \003(\0132O.com.android.server.job.StateContr"
  "ollerProto.ContentObserverController.Obs"
  "erver\032j\n\nTrackedJob\022=\n\004info\030\001 \001(\0132/.com."
  "android.server.job.JobStatusShortInfoPro"
  "to\022\022\n\nsource_uid\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001\032\346\004\n\010Ob"
  "server\022\017\n\007user_id\030\001 \001(\005\022t\n\010triggers\030\002 \003("
  "\0132b.com.android.server.job.StateControll"
  "erProto.ContentObserverController.Observ"
  "er.TriggerContentData\032\307\003\n\022TriggerContent"
  "Data\022\025\n\003uri\030\001 \001(\tB\010\232\237\325\207\003\002\010d\022\r\n\005flags\030\002 \001"
  "(\005\022|\n\004jobs\030\003 \003(\0132n.com.android.server.jo"
  "b.StateControllerProto.ContentObserverCo"
  "ntroller.Observer.TriggerContentData.Job"
  "Instance\032\201\002\n\013JobInstance\022=\n\004info\030\001 \001(\0132/"
  ".com.android.server.job.JobStatusShortIn"
  "foProto\022\022\n\nsource_uid\030\002 \001(\005\022\'\n\037trigger_c"
  "ontent_update_delay_ms\030\003 \001(\003\022$\n\034trigger_"
  "content_max_delay_ms\030\004 \001(\003\022%\n\023changed_au"
  "thorities\030\005 \003(\tB\010\232\237\325\207\003\002\010d\022\036\n\014changed_uri"
  "s\030\006 \003(\tB\010\232\237\325\207\003\002\010d:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001:"
  "\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\032\220\003\n\030DeviceIdleJobs"
  "Controller\022\033\n\023is_device_idle_mode\030\001 \001(\010\022"
  "f\n\014tracked_jobs\030\002 \003(\0132P.com.android.serv"
  "er.job.StateControllerProto.DeviceIdleJo"
  "bsController.TrackedJob\032\343\001\n\nTrackedJob\022="
  "\n\004info\030\001 \001(\0132/.com.android.server.job.Jo"
  "bStatusShortInfoProto\022\022\n\nsource_uid\030\002 \001("
  "\005\022\033\n\023source_package_name\030\003 \001(\t\022!\n\031are_co"
  "nstraints_satisfied\030\004 \001(\010\022\033\n\023is_doze_whi"
  "telisted\030\005 \001(\010\022\032\n\022is_allowed_in_doze\030\006 \001"
  "(\010:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\032\345\006\n\016IdleControl"
  "ler\022\017\n\007is_idle\030\001 \001(\010\022\\\n\014tracked_jobs\030\002 \003"
  "(\0132F.com.android.server.job.StateControl"
  "lerProto.IdleController.TrackedJob\022e\n\020id"
  "leness_tracker\030\003 \001(\0132K.com.android.serve"
  "r.job.StateControllerProto.IdleControlle"
  "r.IdlenessTracker\032j\n\nTrackedJob\022=\n\004info\030"
  "\001 \001(\0132/.com.android.server.job.JobStatus"
  "ShortInfoProto\022\022\n\nsource_uid\030\002 \001(\005:\t\232\237\325\207"
  "\003\003\010\310\001\032\205\004\n\017IdlenessTracker\022\204\001\n\027device_idl"
  "eness_tracker\030\001 \001(\0132a.com.android.server"
  ".job.StateControllerProto.IdleController"
  ".IdlenessTracker.DeviceIdlenessTrackerH\000"
  "\022~\n\024car_idleness_tracker\030\002 \001(\0132^.com.and"
  "roid.server.job.StateControllerProto.Idl"
  "eController.IdlenessTracker.CarIdlenessT"
  "rackerH\000\032K\n\022CarIdlenessTracker\022\017\n\007is_idl"
  "e\030\001 \001(\010\022\031\n\021is_garage_mode_on\030\002 \001(\010:\t\232\237\325\207"
  "\003\003\010\310\001\032\200\001\n\025DeviceIdlenessTracker\022\017\n\007is_id"
  "le\030\001 \001(\010\022\024\n\014is_screen_on\030\002 \001(\010\022\024\n\014is_doc"
  "k_idle\030\003 \001(\010\022\031\n\021projection_active\030\005 \001(\010:"
  "\t\232\237\325\207\003\003\010\310\001J\004\010\004\020\005:\t\232\237\325\207\003\003\010\310\001B\020\n\016active_tr"
  "acker:\t\232\237\325\207\003\003\010\310\001\032\263\027\n\017QuotaController\022\023\n\013"
  "is_charging\030\001 \001(\010\022\030\n\020elapsed_realtime\030\006 "
  "\001(\003\022\027\n\017foreground_uids\030\003 \003(\005\022]\n\014tracked_"
  "jobs\030\004 \003(\0132G.com.android.server.job.Stat"
  "eControllerProto.QuotaController.Tracked"
  "Job\022`\n\rpackage_stats\030\005 \003(\0132I.com.android"
  ".server.job.StateControllerProto.QuotaCo"
  "ntroller.PackageStats\022l\n\024uid_to_package_"
  "cache\030\007 \003(\0132N.com.android.server.job.Sta"
  "teControllerProto.QuotaController.UidPac"
  "kageMapping\022r\n\027in_quota_alarm_listener\030\010"
  " \001(\0132Q.com.android.server.job.StateContr"
  "ollerProto.QuotaController.InQuotaAlarmL"
  "istener\032\317\002\n\nTrackedJob\022=\n\004info\030\001 \001(\0132/.c"
  "om.android.server.job.JobStatusShortInfo"
  "Proto\022\022\n\nsource_uid\030\002 \001(\005\022S\n\030effective_s"
  "tandby_bucket\030\003 \001(\01621.com.android.server"
  ".job.JobStatusDumpProto.Bucket\022\032\n\022is_top"
  "_started_job\030\004 \001(\010\022\021\n\thas_quota\030\005 \001(\010\022\032\n"
  "\022remaining_quota_ms\030\006 \001(\003\022#\n\033is_requeste"
  "d_foreground_job\030\007 \001(\010\022\036\n\026is_within_fg_j"
  "ob_quota\030\010 \001(\010:\t\232\237\325\207\003\003\010\310\001\032L\n\rAlarmListen"
  "er\022\022\n\nis_waiting\030\001 \001(\010\022\034\n\024trigger_time_e"
  "lapsed\030\002 \001(\003:\t\232\237\325\207\003\003\010\310\001\032\333\004\n\016ExecutionSta"
  "ts\022I\n\016standby_bucket\030\001 \001(\01621.com.android"
  ".server.job.JobStatusDumpProto.Bucket\022\037\n"
  "\027expiration_time_elapsed\030\002 \001(\003\022\026\n\016window"
  "_size_ms\030\003 \001(\003\022\027\n\017job_count_limit\030\016 \001(\005\022"
  "\033\n\023session_count_limit\030\017 \001(\005\022#\n\033executio"
  "n_time_in_window_ms\030\004 \001(\003\022\036\n\026bg_job_coun"
  "t_in_window\030\005 \001(\005\022\'\n\037execution_time_in_m"
  "ax_period_ms\030\006 \001(\003\022\"\n\032bg_job_count_in_ma"
  "x_period\030\007 \001(\005\022\037\n\027session_count_in_windo"
  "w\030\013 \001(\005\022\035\n\025in_quota_time_elapsed\030\010 \001(\003\022)"
  "\n!job_count_expiration_time_elapsed\030\t \001("
  "\003\022)\n!job_count_in_rate_limiting_window\030\n"
  " \001(\005\022-\n%session_count_expiration_time_el"
  "apsed\030\014 \001(\003\022-\n%session_count_in_rate_lim"
  "iting_window\030\r \001(\005:\t\232\237\325\207\003\003\010\310\001\0323\n\007Package"
  "\022\017\n\007user_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t:\t\232\237\325\207\003\003\010"
  "\310\001\032f\n\rTimingSession\022\032\n\022start_time_elapse"
  "d\030\001 \001(\003\022\030\n\020end_time_elapsed\030\002 \001(\003\022\024\n\014bg_"
  "job_count\030\003 \001(\005:\t\232\237\325\207\003\003\010\310\001\032\361\001\n\005Timer\022Q\n\003"
  "pkg\030\001 \001(\0132D.com.android.server.job.State"
  "ControllerProto.QuotaController.Package\022"
  "\021\n\tis_active\030\002 \001(\010\022\032\n\022start_time_elapsed"
  "\030\003 \001(\003\022\024\n\014bg_job_count\030\004 \001(\005\022E\n\014running_"
  "jobs\030\005 \003(\0132/.com.android.server.job.JobS"
  "tatusShortInfoProto:\t\232\237\325\207\003\003\010\310\001\032\262\001\n\013TopAp"
  "pTimer\022Q\n\003pkg\030\001 \001(\0132D.com.android.server"
  ".job.StateControllerProto.QuotaControlle"
  "r.Package\022\021\n\tis_active\030\002 \001(\010\022\032\n\022start_ti"
  "me_elapsed\030\003 \001(\003\022\026\n\016activity_count\030\004 \001(\005"
  ":\t\232\237\325\207\003\003\010\310\001\032\351\003\n\014PackageStats\022Q\n\003pkg\030\001 \001("
  "\0132D.com.android.server.job.StateControll"
  "erProto.QuotaController.Package\022Q\n\005timer"
  "\030\002 \001(\0132B.com.android.server.job.StateCon"
  "trollerProto.QuotaController.Timer\022b\n\016sa"
  "ved_sessions\030\003 \003(\0132J.com.android.server."
  "job.StateControllerProto.QuotaController"
  ".TimingSession\022d\n\017execution_stats\030\004 \003(\0132"
  "K.com.android.server.job.StateController"
  "Proto.QuotaController.ExecutionStats\022X\n\014"
  "fg_job_timer\030\006 \001(\0132B.com.android.server."
  "job.StateControllerProto.QuotaController"
  ".Timer:\t\232\237\325\207\003\003\010\310\001J\004\010\005\020\006\032B\n\021UidPackageMap"
  "ping\022\013\n\003uid\030\001 \001(\005\022\025\n\rpackage_names\030\002 \003(\t"
  ":\t\232\237\325\207\003\003\010\310\001\032\257\002\n\024InQuotaAlarmListener\022\034\n\024"
  "trigger_time_elapsed\030\001 \001(\003\022g\n\006alarms\030\002 \003"
  "(\0132W.com.android.server.job.StateControl"
  "lerProto.QuotaController.InQuotaAlarmLis"
  "tener.Alarm\032\204\001\n\005Alarm\022Q\n\003pkg\030\001 \001(\0132D.com"
  ".android.server.job.StateControllerProto"
  ".QuotaController.Package\022\035\n\025in_quota_tim"
  "e_elapsed\030\002 \001(\003:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001:\t\232"
  "\237\325\207\003\003\010\310\001J\004\010\002\020\003\032\257\002\n\021StorageController\022\032\n\022"
  "is_storage_not_low\030\001 \001(\010\022&\n\036last_broadca"
  "st_sequence_number\030\002 \001(\005\022_\n\014tracked_jobs"
  "\030\003 \003(\0132I.com.android.server.job.StateCon"
  "trollerProto.StorageController.TrackedJo"
  "b\032j\n\nTrackedJob\022=\n\004info\030\001 \001(\0132/.com.andr"
  "oid.server.job.JobStatusShortInfoProto\022\022"
  "\n\nsource_uid\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001"
  "\032\350\003\n\016TimeController\022\034\n\024now_elapsed_realt"
  "ime\030\001 \001(\003\022&\n\036time_until_next_delay_alarm"
  "_ms\030\002 \001(\003\022)\n!time_until_next_deadline_al"
  "arm_ms\030\003 \001(\003\022\\\n\014tracked_jobs\030\004 \003(\0132F.com"
  ".android.server.job.StateControllerProto"
  ".TimeController.TrackedJob\032\373\001\n\nTrackedJo"
  "b\022=\n\004info\030\001 \001(\0132/.com.android.server.job"
  ".JobStatusShortInfoProto\022\022\n\nsource_uid\030\002"
  " \001(\005\022#\n\033has_timing_delay_constraint\030\003 \001("
  "\010\022\037\n\027delay_time_remaining_ms\030\004 \001(\003\022\037\n\027ha"
  "s_deadline_constraint\030\005 \001(\010\022(\n time_rema"
  "ining_until_deadline_ms\030\006 \001(\003:\t\232\237\325\207\003\003\010\310\001"
  ":\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001B\014\n\ncontroller\"\346\006\n"
  "\014DataSetProto\022\033\n\023start_clock_time_ms\030\001 \001"
  "(\003\022\027\n\017elapsed_time_ms\030\002 \001(\003\022\021\n\tperiod_ms"
  "\030\003 \001(\003\022O\n\017package_entries\030\004 \003(\01326.com.an"
  "droid.server.job.DataSetProto.PackageEnt"
  "ryProto\022\027\n\017max_concurrency\030\005 \001(\005\022\"\n\032max_"
  "foreground_concurrency\030\006 \001(\005\032\363\004\n\021Package"
  "EntryProto\022\013\n\003uid\030\001 \001(\005\022\024\n\014package_name\030"
  "\002 \001(\t\022S\n\rpending_state\030\003 \001(\0132<.com.andro"
  "id.server.job.DataSetProto.PackageEntryP"
  "roto.State\022R\n\014active_state\030\004 \001(\0132<.com.a"
  "ndroid.server.job.DataSetProto.PackageEn"
  "tryProto.State\022V\n\020active_top_state\030\005 \001(\013"
  "2<.com.android.server.job.DataSetProto.P"
  "ackageEntryProto.State\022\017\n\007pending\030\006 \001(\010\022"
  "\016\n\006active\030\007 \001(\010\022\022\n\nactive_top\030\010 \001(\010\022\\\n\014s"
  "top_reasons\030\t \003(\0132F.com.android.server.j"
  "ob.DataSetProto.PackageEntryProto.StopRe"
  "asonCount\0326\n\005State\022\023\n\013duration_ms\030\001 \001(\003\022"
  "\r\n\005count\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001\032d\n\017StopReasonC"
  "ount\0227\n\006reason\030\001 \001(\0162\'.android.app.job.I"
  "nternalStopReasonEnum\022\r\n\005count\030\002 \001(\005:\t\232\237"
  "\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"\234\001\n\036Grante"
  "dUriPermissionsDumpProto\022\030\n\005flags\030\001 \001(\005B"
  "\t\232\237\325\207\003\003\010\310\001\022!\n\016source_user_id\030\002 \001(\005B\t\232\237\325\207"
  "\003\003\010\310\001\022\013\n\003tag\030\003 \001(\t\022\030\n\020permission_owner\030\004"
  " \001(\t\022\014\n\004uris\030\005 \003(\t:\010\232\237\325\207\003\002\010d\"\244\001\n\032JobPack"
  "ageTrackerDumpProto\022>\n\020historical_stats\030"
  "\001 \003(\0132$.com.android.server.job.DataSetPr"
  "oto\022;\n\rcurrent_stats\030\002 \001(\0132$.com.android"
  ".server.job.DataSetProto:\t\232\237\325\207\003\003\010\310\001\"\277\003\n\026"
  "JobPackageHistoryProto\022R\n\rhistory_event\030"
  "\001 \003(\0132;.com.android.server.job.JobPackag"
  "eHistoryProto.HistoryEvent\032\343\001\n\014HistoryEv"
  "ent\022C\n\005event\030\001 \001(\01624.com.android.server."
  "job.JobPackageHistoryProto.Event\022\033\n\023time"
  "_since_event_ms\030\002 \001(\003\022\013\n\003uid\030\003 \001(\005\022\016\n\006jo"
  "b_id\030\004 \001(\005\022\013\n\003tag\030\005 \001(\t\022<\n\013stop_reason\030\006"
  " \001(\0162\'.android.app.job.InternalStopReaso"
  "nEnum:\t\232\237\325\207\003\003\010\310\001\"`\n\005Event\022\013\n\007UNKNOWN\020\000\022\r"
  "\n\tSTART_JOB\020\001\022\014\n\010STOP_JOB\020\002\022\026\n\022START_PER"
  "IODIC_JOB\020\003\022\025\n\021STOP_PERIODIC_JOB\020\004:\t\232\237\325\207"
  "\003\003\010\310\001\"_\n\027JobStatusShortInfoProto\022\023\n\013call"
  "ing_uid\030\001 \001(\005\022\016\n\006job_id\030\002 \001(\005\022\024\n\014battery"
  "_name\030\003 \001(\t:\t\232\237\325\207\003\003\010\310\001\"\232\032\n\022JobStatusDump"
  "Proto\022\023\n\013calling_uid\030\001 \001(\005\022\013\n\003tag\030\002 \001(\t\022"
  "\022\n\nsource_uid\030\003 \001(\005\022\026\n\016source_user_id\030\004 "
  "\001(\005\022\033\n\023source_package_name\030\005 \001(\t\022D\n\010job_"
  "info\030\006 \001(\01322.com.android.server.job.JobS"
  "tatusDumpProto.JobInfo\022D\n\024required_const"
  "raints\030\007 \003(\0162&.com.android.server.job.Co"
  "nstraintEnum\022C\n\023dynamic_constraints\030\037 \003("
  "\0162&.com.android.server.job.ConstraintEnu"
  "m\022E\n\025satisfied_constraints\030\010 \003(\0162&.com.a"
  "ndroid.server.job.ConstraintEnum\022G\n\027unsa"
  "tisfied_constraints\030\t \003(\0162&.com.android."
  "server.job.ConstraintEnum\022\033\n\023is_doze_whi"
  "telisted\030\n \001(\010\022\025\n\ris_uid_active\030\032 \001(\010\022\\\n"
  "\024implicit_constraints\030\031 \001(\0132>.com.androi"
  "d.server.job.JobStatusDumpProto.Implicit"
  "Constraints\022[\n\024tracking_controllers\030\013 \003("
  "\0162=.com.android.server.job.JobStatusDump"
  "Proto.TrackingController\022%\n\023changed_auth"
  "orities\030\014 \003(\tB\010\232\237\325\207\003\002\010d\022\036\n\014changed_uris\030"
  "\r \003(\tB\010\232\237\325\207\003\002\010d\022*\n\007network\030\016 \001(\0132\031.andro"
  "id.net.NetworkProto\022L\n\014pending_work\030\017 \003("
  "\01326.com.android.server.job.JobStatusDump"
  "Proto.JobWorkItem\022N\n\016executing_work\030\020 \003("
  "\01326.com.android.server.job.JobStatusDump"
  "Proto.JobWorkItem\022I\n\016standby_bucket\030\021 \001("
  "\01621.com.android.server.job.JobStatusDump"
  "Proto.Bucket\022$\n\034is_exempted_from_app_sta"
  "ndby\030\033 \001(\010\022\033\n\023enqueue_duration_ms\030\022 \001(\003\022"
  "&\n\036time_until_earliest_runtime_ms\030\023 \001(\022\022"
  "$\n\034time_until_latest_runtime_ms\030\024 \001(\022\022\'\n"
  "\037original_latest_runtime_elapsed\030\036 \001(\004\022\024"
  "\n\014num_failures\030\025 \001(\005\022 \n\030last_successful_"
  "run_time\030\026 \001(\003\022\034\n\024last_failed_run_time\030\027"
  " \001(\003\022\026\n\016internal_flags\030\030 \001(\003\022$\n\034time_sin"
  "ce_first_deferral_ms\030\034 \001(\003\022/\n\'time_since"
  "_first_force_batch_attempt_ms\030\035 \001(\003\032\257\n\n\007"
  "JobInfo\0224\n\007service\030\001 \001(\0132#.android.conte"
  "nt.ComponentNameProto\022\023\n\013is_periodic\030\002 \001"
  "(\010\022\032\n\022period_interval_ms\030\003 \001(\003\022\026\n\016period"
  "_flex_ms\030\004 \001(\003\022\024\n\014is_persisted\030\005 \001(\010\022\020\n\010"
  "priority\030\006 \001(\021\022\r\n\005flags\030\007 \001(\005\022\031\n\021require"
  "s_charging\030\010 \001(\010\022 \n\030requires_battery_not"
  "_low\030\t \001(\010\022\034\n\024requires_device_idle\030\n \001(\010"
  "\022b\n\024trigger_content_uris\030\013 \003(\0132D.com.and"
  "roid.server.job.JobStatusDumpProto.JobIn"
  "fo.TriggerContentUri\022\'\n\037trigger_content_"
  "update_delay_ms\030\014 \001(\003\022$\n\034trigger_content"
  "_max_delay_ms\030\r \001(\003\0222\n\006extras\030\016 \001(\0132\".an"
  "droid.os.PersistableBundleProto\0221\n\020trans"
  "ient_extras\030\017 \001(\0132\027.android.os.BundlePro"
  "to\0221\n\tclip_data\030\020 \001(\0132\036.android.content."
  "ClipDataProto\022W\n\027granted_uri_permissions"
  "\030\021 \001(\01326.com.android.server.job.GrantedU"
  "riPermissionsDumpProto\022:\n\020required_netwo"
  "rk\030\022 \001(\0132 .android.net.NetworkRequestPro"
  "to\022$\n\034total_network_download_bytes\030\031 \001(\003"
  "\022\"\n\032total_network_upload_bytes\030\032 \001(\003\022\026\n\016"
  "min_latency_ms\030\024 \001(\003\022\036\n\026max_execution_de"
  "lay_ms\030\025 \001(\003\022R\n\016backoff_policy\030\026 \001(\0132:.c"
  "om.android.server.job.JobStatusDumpProto"
  ".JobInfo.Backoff\022\034\n\024has_early_constraint"
  "\030\027 \001(\010\022\033\n\023has_late_constraint\030\030 \001(\010\032D\n\021T"
  "riggerContentUri\022\030\n\005flags\030\001 \001(\005B\t\232\237\325\207\003\003\010"
  "\310\001\022\025\n\003uri\030\002 \001(\tB\010\232\237\325\207\003\002\010d\032\310\001\n\007Backoff\022Q\n"
  "\006policy\030\001 \001(\0162A.com.android.server.job.J"
  "obStatusDumpProto.JobInfo.Backoff.Policy"
  "\022\032\n\022initial_backoff_ms\030\002 \001(\003\"C\n\006Policy\022\031"
  "\n\025BACKOFF_POLICY_LINEAR\020\000\022\036\n\032BACKOFF_POL"
  "ICY_EXPONENTIAL\020\001:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001J"
  "\004\010\023\020\024\032k\n\023ImplicitConstraints\022\025\n\ris_not_d"
  "ozing\030\001 \001(\010\022\037\n\027is_not_restricted_in_bg\030\002"
  " \001(\010\022\034\n\024is_dynamic_satisfied\030\003 \001(\010\032\273\001\n\013J"
  "obWorkItem\022\017\n\007work_id\030\001 \001(\005\022\026\n\016delivery_"
  "count\030\002 \001(\005\022,\n\006intent\030\003 \001(\0132\034.android.co"
  "ntent.IntentProto\022J\n\nuri_grants\030\004 \001(\01326."
  "com.android.server.job.GrantedUriPermiss"
  "ionsDumpProto:\t\232\237\325\207\003\003\010\310\001\"\253\001\n\022TrackingCon"
  "troller\022\024\n\020TRACKING_BATTERY\020\000\022\031\n\025TRACKIN"
  "G_CONNECTIVITY\020\001\022\024\n\020TRACKING_CONTENT\020\002\022\021"
  "\n\rTRACKING_IDLE\020\003\022\024\n\020TRACKING_STORAGE\020\004\022"
  "\021\n\rTRACKING_TIME\020\005\022\022\n\016TRACKING_QUOTA\020\006\"X"
  "\n\006Bucket\022\n\n\006ACTIVE\020\000\022\017\n\013WORKING_SET\020\001\022\014\n"
  "\010FREQUENT\020\002\022\010\n\004RARE\020\003\022\t\n\005NEVER\020\004\022\016\n\nREST"
  "RICTED\020\005:\t\232\237\325\207\003\003\010\310\001\"\324\002\n\032JobConcurrencyMa"
  "nagerProto\022!\n\031current_interactive_state\030"
  "\001 \001(\010\022#\n\033effective_interactive_state\030\002 \001"
  "(\010\022$\n\034time_since_last_screen_on_ms\030\003 \001(\003"
  "\022%\n\035time_since_last_screen_off_ms\030\004 \001(\003\022"
  "G\n\021job_count_tracker\030\005 \001(\0132,.com.android"
  ".server.job.JobCountTrackerProto\022\031\n\021memo"
  "ry_trim_level\030\006 \001(\005\0222\n\005stats\030\007 \001(\0132#.com"
  ".android.server.StatLoggerProto:\t\232\237\325\207\003\003\010"
  "\310\001\"\221\003\n\024JobCountTrackerProto\022!\n\031config_nu"
  "m_max_total_jobs\030\001 \001(\005\022\036\n\026config_num_max"
  "_bg_jobs\030\002 \001(\005\022\036\n\026config_num_min_bg_jobs"
  "\030\003 \001(\005\022\033\n\023num_running_fg_jobs\030\004 \001(\005\022\033\n\023n"
  "um_running_bg_jobs\030\005 \001(\005\022\033\n\023num_pending_"
  "fg_jobs\030\006 \001(\005\022\033\n\023num_pending_bg_jobs\030\007 \001"
  "(\005\022\036\n\026num_actual_max_fg_jobs\030\010 \001(\005\022\036\n\026nu"
  "m_actual_max_bg_jobs\030\t \001(\005\022\033\n\023num_reserv"
  "ed_for_bg\030\n \001(\005\022\034\n\024num_starting_fg_jobs\030"
  "\013 \001(\005\022\034\n\024num_starting_bg_jobs\030\014 \001(\005:\t\232\237\325"
  "\207\003\003\010\310\001\"\233\002\n\031JobStorePersistStatsProto\022K\n\n"
  "first_load\030\001 \001(\01327.com.android.server.jo"
  "b.JobStorePersistStatsProto.Stats\022J\n\tlas"
  "t_save\030\002 \001(\01327.com.android.server.job.Jo"
  "bStorePersistStatsProto.Stats\032e\n\005Stats\022\026"
  "\n\016num_total_jobs\030\001 \001(\005\022\036\n\026num_system_ser"
  "ver_jobs\030\002 \001(\005\022$\n\034num_system_sync_manage"
  "r_jobs\030\003 \001(\005B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_deps[13] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetwork_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnet_2fnetworkrequest_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbundle_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpersistablebundle_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fjob_2fenums_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fjob_2fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_sccs[67] = {
  &scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_ConstantsProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_ConstantsProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_DataSetProto_PackageEntryProto_State_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_DataSetProto_PackageEntryProto_StopReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobCountTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_JobRestriction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_PriorityOverride_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStatusDumpProto_ImplicitConstraints_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStatusDumpProto_JobInfo_Backoff_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_JobStorePersistStatsProto_Stats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_MaxJobCountsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_AlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_TimingSession_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_TopAppTimer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
  &scc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto, "frameworks/base/core/proto/android/server/jobscheduler.proto", 20416,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto_deps, 67, 13,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto, 67, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace job {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobPackageHistoryProto_Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto[0];
}
bool JobPackageHistoryProto_Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobPackageHistoryProto_Event JobPackageHistoryProto::UNKNOWN;
constexpr JobPackageHistoryProto_Event JobPackageHistoryProto::START_JOB;
constexpr JobPackageHistoryProto_Event JobPackageHistoryProto::STOP_JOB;
constexpr JobPackageHistoryProto_Event JobPackageHistoryProto::START_PERIODIC_JOB;
constexpr JobPackageHistoryProto_Event JobPackageHistoryProto::STOP_PERIODIC_JOB;
constexpr JobPackageHistoryProto_Event JobPackageHistoryProto::Event_MIN;
constexpr JobPackageHistoryProto_Event JobPackageHistoryProto::Event_MAX;
constexpr int JobPackageHistoryProto::Event_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatusDumpProto_JobInfo_Backoff_Policy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto[1];
}
bool JobStatusDumpProto_JobInfo_Backoff_Policy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobStatusDumpProto_JobInfo_Backoff_Policy JobStatusDumpProto_JobInfo_Backoff::BACKOFF_POLICY_LINEAR;
constexpr JobStatusDumpProto_JobInfo_Backoff_Policy JobStatusDumpProto_JobInfo_Backoff::BACKOFF_POLICY_EXPONENTIAL;
constexpr JobStatusDumpProto_JobInfo_Backoff_Policy JobStatusDumpProto_JobInfo_Backoff::Policy_MIN;
constexpr JobStatusDumpProto_JobInfo_Backoff_Policy JobStatusDumpProto_JobInfo_Backoff::Policy_MAX;
constexpr int JobStatusDumpProto_JobInfo_Backoff::Policy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatusDumpProto_TrackingController_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto[2];
}
bool JobStatusDumpProto_TrackingController_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TRACKING_BATTERY;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TRACKING_CONNECTIVITY;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TRACKING_CONTENT;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TRACKING_IDLE;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TRACKING_STORAGE;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TRACKING_TIME;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TRACKING_QUOTA;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TrackingController_MIN;
constexpr JobStatusDumpProto_TrackingController JobStatusDumpProto::TrackingController_MAX;
constexpr int JobStatusDumpProto::TrackingController_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatusDumpProto_Bucket_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto[3];
}
bool JobStatusDumpProto_Bucket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::ACTIVE;
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::WORKING_SET;
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::FREQUENT;
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::RARE;
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::NEVER;
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::RESTRICTED;
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::Bucket_MIN;
constexpr JobStatusDumpProto_Bucket JobStatusDumpProto::Bucket_MAX;
constexpr int JobStatusDumpProto::Bucket_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void JobSchedulerServiceDumpProto_JobRestriction::InitAsDefaultInstance() {
}
class JobSchedulerServiceDumpProto_JobRestriction::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto_JobRestriction>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_restricting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

JobSchedulerServiceDumpProto_JobRestriction::JobSchedulerServiceDumpProto_JobRestriction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
}
JobSchedulerServiceDumpProto_JobRestriction::JobSchedulerServiceDumpProto_JobRestriction(const JobSchedulerServiceDumpProto_JobRestriction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_restricting_, &from.is_restricting_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&is_restricting_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
}

void JobSchedulerServiceDumpProto_JobRestriction::SharedCtor() {
  is_restricting_ = false;
  reason_ = -1;
}

JobSchedulerServiceDumpProto_JobRestriction::~JobSchedulerServiceDumpProto_JobRestriction() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  SharedDtor();
}

void JobSchedulerServiceDumpProto_JobRestriction::SharedDtor() {
}

void JobSchedulerServiceDumpProto_JobRestriction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto_JobRestriction& JobSchedulerServiceDumpProto_JobRestriction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_JobRestriction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto_JobRestriction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    is_restricting_ = false;
    reason_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto_JobRestriction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.app.job.InternalStopReasonEnum reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::job::InternalStopReasonEnum_IsValid(val))) {
            set_reason(static_cast<::android::app::job::InternalStopReasonEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_restricting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_restricting(&has_bits);
          is_restricting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto_JobRestriction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.app.job.InternalStopReasonEnum reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::job::InternalStopReasonEnum_IsValid(value)) {
            set_reason(static_cast< ::android::app::job::InternalStopReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_restricting = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_restricting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_restricting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto_JobRestriction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.job.InternalStopReasonEnum reason = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // optional bool is_restricting = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_restricting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto_JobRestriction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.job.InternalStopReasonEnum reason = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  // optional bool is_restricting = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_restricting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  return target;
}

size_t JobSchedulerServiceDumpProto_JobRestriction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_restricting = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .android.app.job.InternalStopReasonEnum reason = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto_JobRestriction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto_JobRestriction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto_JobRestriction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto_JobRestriction::MergeFrom(const JobSchedulerServiceDumpProto_JobRestriction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_restricting_ = from.is_restricting_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobSchedulerServiceDumpProto_JobRestriction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto_JobRestriction::CopyFrom(const JobSchedulerServiceDumpProto_JobRestriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto_JobRestriction::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto_JobRestriction::InternalSwap(JobSchedulerServiceDumpProto_JobRestriction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_restricting_, other->is_restricting_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto_JobRestriction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedulerServiceDumpProto_RegisteredJob::InitAsDefaultInstance() {
  ::com::android::server::job::_JobSchedulerServiceDumpProto_RegisteredJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_RegisteredJob_default_instance_._instance.get_mutable()->dump_ = const_cast< ::com::android::server::job::JobStatusDumpProto*>(
      ::com::android::server::job::JobStatusDumpProto::internal_default_instance());
}
class JobSchedulerServiceDumpProto_RegisteredJob::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto_RegisteredJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const JobSchedulerServiceDumpProto_RegisteredJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::JobStatusDumpProto& dump(const JobSchedulerServiceDumpProto_RegisteredJob* msg);
  static void set_has_dump(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_job_ready_to_be_executed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_job_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_are_users_started(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_job_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_job_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_job_currently_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_uid_backing_up(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_component_usable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
JobSchedulerServiceDumpProto_RegisteredJob::_Internal::info(const JobSchedulerServiceDumpProto_RegisteredJob* msg) {
  return *msg->info_;
}
const ::com::android::server::job::JobStatusDumpProto&
JobSchedulerServiceDumpProto_RegisteredJob::_Internal::dump(const JobSchedulerServiceDumpProto_RegisteredJob* msg) {
  return *msg->dump_;
}
JobSchedulerServiceDumpProto_RegisteredJob::JobSchedulerServiceDumpProto_RegisteredJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
}
JobSchedulerServiceDumpProto_RegisteredJob::JobSchedulerServiceDumpProto_RegisteredJob(const JobSchedulerServiceDumpProto_RegisteredJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      restrictions_(from.restrictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from.has_dump()) {
    dump_ = new ::com::android::server::job::JobStatusDumpProto(*from.dump_);
  } else {
    dump_ = nullptr;
  }
  ::memcpy(&is_job_pending_, &from.is_job_pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_job_restricted_) -
    reinterpret_cast<char*>(&is_job_pending_)) + sizeof(is_job_restricted_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
}

void JobSchedulerServiceDumpProto_RegisteredJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_job_restricted_) -
      reinterpret_cast<char*>(&info_)) + sizeof(is_job_restricted_));
}

JobSchedulerServiceDumpProto_RegisteredJob::~JobSchedulerServiceDumpProto_RegisteredJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  SharedDtor();
}

void JobSchedulerServiceDumpProto_RegisteredJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete dump_;
}

void JobSchedulerServiceDumpProto_RegisteredJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto_RegisteredJob& JobSchedulerServiceDumpProto_RegisteredJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_RegisteredJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto_RegisteredJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restrictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dump_ != nullptr);
      dump_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&is_job_pending_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_job_ready_) -
        reinterpret_cast<char*>(&is_job_pending_)) + sizeof(is_job_ready_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&are_users_started_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_job_restricted_) -
        reinterpret_cast<char*>(&are_users_started_)) + sizeof(is_job_restricted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto_RegisteredJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto dump = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_job_ready = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_job_ready(&has_bits);
          is_job_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_users_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_are_users_started(&has_bits);
          are_users_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_job_pending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_job_pending(&has_bits);
          is_job_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_job_currently_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_job_currently_active(&has_bits);
          is_job_currently_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_uid_backing_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_uid_backing_up(&has_bits);
          is_uid_backing_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_component_usable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_component_usable(&has_bits);
          is_component_usable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_job_ready_to_be_executed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_job_ready_to_be_executed(&has_bits);
          is_job_ready_to_be_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_job_restricted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_job_restricted(&has_bits);
          is_job_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction restrictions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_restrictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto_RegisteredJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto dump = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_job_ready = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_job_ready(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_job_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_users_started = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_are_users_started(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_users_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_job_pending = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_job_pending(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_job_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_job_currently_active = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_job_currently_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_job_currently_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_uid_backing_up = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_is_uid_backing_up(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_uid_backing_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_component_usable = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_component_usable(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_component_usable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_job_ready_to_be_executed = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_is_job_ready_to_be_executed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_job_ready_to_be_executed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_job_restricted = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_is_job_restricted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_job_restricted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction restrictions = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_restrictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto_RegisteredJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional .com.android.server.job.JobStatusDumpProto dump = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::dump(this), output);
  }

  // optional bool is_job_ready = 3;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_job_ready(), output);
  }

  // optional bool are_users_started = 4;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->are_users_started(), output);
  }

  // optional bool is_job_pending = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_job_pending(), output);
  }

  // optional bool is_job_currently_active = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_job_currently_active(), output);
  }

  // optional bool is_uid_backing_up = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_uid_backing_up(), output);
  }

  // optional bool is_component_usable = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_component_usable(), output);
  }

  // optional bool is_job_ready_to_be_executed = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->is_job_ready_to_be_executed(), output);
  }

  // optional bool is_job_restricted = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->is_job_restricted(), output);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction restrictions = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->restrictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->restrictions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto_RegisteredJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto dump = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dump(this), target);
  }

  // optional bool is_job_ready = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_job_ready(), target);
  }

  // optional bool are_users_started = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->are_users_started(), target);
  }

  // optional bool is_job_pending = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_job_pending(), target);
  }

  // optional bool is_job_currently_active = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_job_currently_active(), target);
  }

  // optional bool is_uid_backing_up = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_uid_backing_up(), target);
  }

  // optional bool is_component_usable = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->is_component_usable(), target);
  }

  // optional bool is_job_ready_to_be_executed = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->is_job_ready_to_be_executed(), target);
  }

  // optional bool is_job_restricted = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->is_job_restricted(), target);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction restrictions = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->restrictions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->restrictions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  return target;
}

size_t JobSchedulerServiceDumpProto_RegisteredJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.JobRestriction restrictions = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->restrictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->restrictions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .com.android.server.job.JobStatusDumpProto dump = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dump_);
    }

    // optional bool is_job_pending = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_job_currently_active = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_uid_backing_up = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_component_usable = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_job_ready_to_be_executed = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_job_ready = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool are_users_started = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_job_restricted = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto_RegisteredJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto_RegisteredJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto_RegisteredJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto_RegisteredJob::MergeFrom(const JobSchedulerServiceDumpProto_RegisteredJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restrictions_.MergeFrom(from.restrictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dump()->::com::android::server::job::JobStatusDumpProto::MergeFrom(from.dump());
    }
    if (cached_has_bits & 0x00000004u) {
      is_job_pending_ = from.is_job_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_job_currently_active_ = from.is_job_currently_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_uid_backing_up_ = from.is_uid_backing_up_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_component_usable_ = from.is_component_usable_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_job_ready_to_be_executed_ = from.is_job_ready_to_be_executed_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_job_ready_ = from.is_job_ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      are_users_started_ = from.are_users_started_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_job_restricted_ = from.is_job_restricted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobSchedulerServiceDumpProto_RegisteredJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto_RegisteredJob::CopyFrom(const JobSchedulerServiceDumpProto_RegisteredJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto_RegisteredJob::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto_RegisteredJob::InternalSwap(JobSchedulerServiceDumpProto_RegisteredJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&restrictions_)->InternalSwap(CastToBase(&other->restrictions_));
  swap(info_, other->info_);
  swap(dump_, other->dump_);
  swap(is_job_pending_, other->is_job_pending_);
  swap(is_job_currently_active_, other->is_job_currently_active_);
  swap(is_uid_backing_up_, other->is_uid_backing_up_);
  swap(is_component_usable_, other->is_component_usable_);
  swap(is_job_ready_to_be_executed_, other->is_job_ready_to_be_executed_);
  swap(is_job_ready_, other->is_job_ready_);
  swap(are_users_started_, other->are_users_started_);
  swap(is_job_restricted_, other->is_job_restricted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto_RegisteredJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedulerServiceDumpProto_PriorityOverride::InitAsDefaultInstance() {
}
class JobSchedulerServiceDumpProto_PriorityOverride::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto_PriorityOverride>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

JobSchedulerServiceDumpProto_PriorityOverride::JobSchedulerServiceDumpProto_PriorityOverride()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
}
JobSchedulerServiceDumpProto_PriorityOverride::JobSchedulerServiceDumpProto_PriorityOverride(const JobSchedulerServiceDumpProto_PriorityOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&override_value_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(override_value_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
}

void JobSchedulerServiceDumpProto_PriorityOverride::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&override_value_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(override_value_));
}

JobSchedulerServiceDumpProto_PriorityOverride::~JobSchedulerServiceDumpProto_PriorityOverride() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  SharedDtor();
}

void JobSchedulerServiceDumpProto_PriorityOverride::SharedDtor() {
}

void JobSchedulerServiceDumpProto_PriorityOverride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto_PriorityOverride& JobSchedulerServiceDumpProto_PriorityOverride::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_PriorityOverride_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto_PriorityOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&override_value_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(override_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto_PriorityOverride::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 override_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_override_value(&has_bits);
          override_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto_PriorityOverride::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 override_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_override_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &override_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto_PriorityOverride::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional sint32 override_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->override_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto_PriorityOverride::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional sint32 override_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->override_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  return target;
}

size_t JobSchedulerServiceDumpProto_PriorityOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional sint32 override_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->override_value());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto_PriorityOverride::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto_PriorityOverride* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto_PriorityOverride>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto_PriorityOverride::MergeFrom(const JobSchedulerServiceDumpProto_PriorityOverride& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_value_ = from.override_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobSchedulerServiceDumpProto_PriorityOverride::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto_PriorityOverride::CopyFrom(const JobSchedulerServiceDumpProto_PriorityOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto_PriorityOverride::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto_PriorityOverride::InternalSwap(JobSchedulerServiceDumpProto_PriorityOverride* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uid_, other->uid_);
  swap(override_value_, other->override_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto_PriorityOverride::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedulerServiceDumpProto_PendingJob::InitAsDefaultInstance() {
  ::com::android::server::job::_JobSchedulerServiceDumpProto_PendingJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_PendingJob_default_instance_._instance.get_mutable()->dump_ = const_cast< ::com::android::server::job::JobStatusDumpProto*>(
      ::com::android::server::job::JobStatusDumpProto::internal_default_instance());
}
class JobSchedulerServiceDumpProto_PendingJob::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto_PendingJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const JobSchedulerServiceDumpProto_PendingJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::JobStatusDumpProto& dump(const JobSchedulerServiceDumpProto_PendingJob* msg);
  static void set_has_dump(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_evaluated_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pending_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
JobSchedulerServiceDumpProto_PendingJob::_Internal::info(const JobSchedulerServiceDumpProto_PendingJob* msg) {
  return *msg->info_;
}
const ::com::android::server::job::JobStatusDumpProto&
JobSchedulerServiceDumpProto_PendingJob::_Internal::dump(const JobSchedulerServiceDumpProto_PendingJob* msg) {
  return *msg->dump_;
}
JobSchedulerServiceDumpProto_PendingJob::JobSchedulerServiceDumpProto_PendingJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
}
JobSchedulerServiceDumpProto_PendingJob::JobSchedulerServiceDumpProto_PendingJob(const JobSchedulerServiceDumpProto_PendingJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from.has_dump()) {
    dump_ = new ::com::android::server::job::JobStatusDumpProto(*from.dump_);
  } else {
    dump_ = nullptr;
  }
  ::memcpy(&pending_duration_ms_, &from.pending_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&evaluated_priority_) -
    reinterpret_cast<char*>(&pending_duration_ms_)) + sizeof(evaluated_priority_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
}

void JobSchedulerServiceDumpProto_PendingJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluated_priority_) -
      reinterpret_cast<char*>(&info_)) + sizeof(evaluated_priority_));
}

JobSchedulerServiceDumpProto_PendingJob::~JobSchedulerServiceDumpProto_PendingJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  SharedDtor();
}

void JobSchedulerServiceDumpProto_PendingJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete dump_;
}

void JobSchedulerServiceDumpProto_PendingJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto_PendingJob& JobSchedulerServiceDumpProto_PendingJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_PendingJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto_PendingJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dump_ != nullptr);
      dump_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&pending_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&evaluated_priority_) -
        reinterpret_cast<char*>(&pending_duration_ms_)) + sizeof(evaluated_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto_PendingJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto dump = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 evaluated_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_evaluated_priority(&has_bits);
          evaluated_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pending_duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pending_duration_ms(&has_bits);
          pending_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto_PendingJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto dump = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 evaluated_priority = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_evaluated_priority(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &evaluated_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pending_duration_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pending_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto_PendingJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional .com.android.server.job.JobStatusDumpProto dump = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::dump(this), output);
  }

  // optional sint32 evaluated_priority = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->evaluated_priority(), output);
  }

  // optional int64 pending_duration_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->pending_duration_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto_PendingJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto dump = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dump(this), target);
  }

  // optional sint32 evaluated_priority = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->evaluated_priority(), target);
  }

  // optional int64 pending_duration_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->pending_duration_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  return target;
}

size_t JobSchedulerServiceDumpProto_PendingJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .com.android.server.job.JobStatusDumpProto dump = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dump_);
    }

    // optional int64 pending_duration_ms = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->pending_duration_ms());
    }

    // optional sint32 evaluated_priority = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->evaluated_priority());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto_PendingJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto_PendingJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto_PendingJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto_PendingJob::MergeFrom(const JobSchedulerServiceDumpProto_PendingJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dump()->::com::android::server::job::JobStatusDumpProto::MergeFrom(from.dump());
    }
    if (cached_has_bits & 0x00000004u) {
      pending_duration_ms_ = from.pending_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      evaluated_priority_ = from.evaluated_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobSchedulerServiceDumpProto_PendingJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto_PendingJob::CopyFrom(const JobSchedulerServiceDumpProto_PendingJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.PendingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto_PendingJob::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto_PendingJob::InternalSwap(JobSchedulerServiceDumpProto_PendingJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(dump_, other->dump_);
  swap(pending_duration_ms_, other->pending_duration_ms_);
  swap(evaluated_priority_, other->evaluated_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto_PendingJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::InitAsDefaultInstance() {
}
class JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto_ActiveJob_InactiveJob>()._has_bits_);
  static void set_has_time_since_stopped_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stopped_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
}
JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob(const JobSchedulerServiceDumpProto_ActiveJob_InactiveJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stopped_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stopped_reason()) {
    stopped_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stopped_reason_);
  }
  time_since_stopped_ms_ = from.time_since_stopped_ms_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  stopped_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_since_stopped_ms_ = PROTOBUF_LONGLONG(0);
}

JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::~JobSchedulerServiceDumpProto_ActiveJob_InactiveJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  SharedDtor();
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::SharedDtor() {
  stopped_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto_ActiveJob_InactiveJob& JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_ActiveJob_InactiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stopped_reason_.ClearNonDefaultToEmptyNoArena();
  }
  time_since_stopped_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 time_since_stopped_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_since_stopped_ms(&has_bits);
          time_since_stopped_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stopped_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_stopped_reason(), ptr, ctx, "com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob.stopped_reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_since_stopped_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_since_stopped_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_stopped_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stopped_reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stopped_reason()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stopped_reason().data(), static_cast<int>(this->stopped_reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob.stopped_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_since_stopped_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time_since_stopped_ms(), output);
  }

  // optional string stopped_reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stopped_reason().data(), static_cast<int>(this->stopped_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob.stopped_reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stopped_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_since_stopped_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->time_since_stopped_ms(), target);
  }

  // optional string stopped_reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stopped_reason().data(), static_cast<int>(this->stopped_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob.stopped_reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->stopped_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  return target;
}

size_t JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string stopped_reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->stopped_reason());
    }

    // optional int64 time_since_stopped_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_stopped_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto_ActiveJob_InactiveJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto_ActiveJob_InactiveJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::MergeFrom(const JobSchedulerServiceDumpProto_ActiveJob_InactiveJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stopped_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stopped_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_since_stopped_ms_ = from.time_since_stopped_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::CopyFrom(const JobSchedulerServiceDumpProto_ActiveJob_InactiveJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::InternalSwap(JobSchedulerServiceDumpProto_ActiveJob_InactiveJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stopped_reason_.Swap(&other->stopped_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_since_stopped_ms_, other->time_since_stopped_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::InitAsDefaultInstance() {
  ::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_default_instance_._instance.get_mutable()->dump_ = const_cast< ::com::android::server::job::JobStatusDumpProto*>(
      ::com::android::server::job::JobStatusDumpProto::internal_default_instance());
}
class JobSchedulerServiceDumpProto_ActiveJob_RunningJob::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto_ActiveJob_RunningJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const JobSchedulerServiceDumpProto_ActiveJob_RunningJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_running_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_until_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::job::JobStatusDumpProto& dump(const JobSchedulerServiceDumpProto_ActiveJob_RunningJob* msg);
  static void set_has_dump(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_evaluated_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_since_made_active_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pending_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
JobSchedulerServiceDumpProto_ActiveJob_RunningJob::_Internal::info(const JobSchedulerServiceDumpProto_ActiveJob_RunningJob* msg) {
  return *msg->info_;
}
const ::com::android::server::job::JobStatusDumpProto&
JobSchedulerServiceDumpProto_ActiveJob_RunningJob::_Internal::dump(const JobSchedulerServiceDumpProto_ActiveJob_RunningJob* msg) {
  return *msg->dump_;
}
JobSchedulerServiceDumpProto_ActiveJob_RunningJob::JobSchedulerServiceDumpProto_ActiveJob_RunningJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
}
JobSchedulerServiceDumpProto_ActiveJob_RunningJob::JobSchedulerServiceDumpProto_ActiveJob_RunningJob(const JobSchedulerServiceDumpProto_ActiveJob_RunningJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from.has_dump()) {
    dump_ = new ::com::android::server::job::JobStatusDumpProto(*from.dump_);
  } else {
    dump_ = nullptr;
  }
  ::memcpy(&running_duration_ms_, &from.running_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&evaluated_priority_) -
    reinterpret_cast<char*>(&running_duration_ms_)) + sizeof(evaluated_priority_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluated_priority_) -
      reinterpret_cast<char*>(&info_)) + sizeof(evaluated_priority_));
}

JobSchedulerServiceDumpProto_ActiveJob_RunningJob::~JobSchedulerServiceDumpProto_ActiveJob_RunningJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  SharedDtor();
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete dump_;
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto_ActiveJob_RunningJob& JobSchedulerServiceDumpProto_ActiveJob_RunningJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_ActiveJob_RunningJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dump_ != nullptr);
      dump_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&running_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&evaluated_priority_) -
        reinterpret_cast<char*>(&running_duration_ms_)) + sizeof(evaluated_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto_ActiveJob_RunningJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 running_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_running_duration_ms(&has_bits);
          running_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_until_timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_until_timeout_ms(&has_bits);
          time_until_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto dump = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_dump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 evaluated_priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_evaluated_priority(&has_bits);
          evaluated_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_made_active_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_since_made_active_ms(&has_bits);
          time_since_made_active_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pending_duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pending_duration_ms(&has_bits);
          pending_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto_ActiveJob_RunningJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 running_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_running_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &running_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_until_timeout_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_time_until_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_until_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto dump = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 evaluated_priority = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_evaluated_priority(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &evaluated_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_made_active_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_time_since_made_active_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_made_active_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pending_duration_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_pending_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int64 running_duration_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->running_duration_ms(), output);
  }

  // optional int64 time_until_timeout_ms = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->time_until_timeout_ms(), output);
  }

  // optional .com.android.server.job.JobStatusDumpProto dump = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::dump(this), output);
  }

  // optional sint32 evaluated_priority = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(5, this->evaluated_priority(), output);
  }

  // optional int64 time_since_made_active_ms = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->time_since_made_active_ms(), output);
  }

  // optional int64 pending_duration_ms = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->pending_duration_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto_ActiveJob_RunningJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int64 running_duration_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->running_duration_ms(), target);
  }

  // optional int64 time_until_timeout_ms = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->time_until_timeout_ms(), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto dump = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::dump(this), target);
  }

  // optional sint32 evaluated_priority = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->evaluated_priority(), target);
  }

  // optional int64 time_since_made_active_ms = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->time_since_made_active_ms(), target);
  }

  // optional int64 pending_duration_ms = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->pending_duration_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  return target;
}

size_t JobSchedulerServiceDumpProto_ActiveJob_RunningJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .com.android.server.job.JobStatusDumpProto dump = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dump_);
    }

    // optional int64 running_duration_ms = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->running_duration_ms());
    }

    // optional int64 time_until_timeout_ms = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_until_timeout_ms());
    }

    // optional int64 time_since_made_active_ms = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_made_active_ms());
    }

    // optional int64 pending_duration_ms = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->pending_duration_ms());
    }

    // optional sint32 evaluated_priority = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->evaluated_priority());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto_ActiveJob_RunningJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto_ActiveJob_RunningJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::MergeFrom(const JobSchedulerServiceDumpProto_ActiveJob_RunningJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dump()->::com::android::server::job::JobStatusDumpProto::MergeFrom(from.dump());
    }
    if (cached_has_bits & 0x00000004u) {
      running_duration_ms_ = from.running_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_until_timeout_ms_ = from.time_until_timeout_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_since_made_active_ms_ = from.time_since_made_active_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      pending_duration_ms_ = from.pending_duration_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      evaluated_priority_ = from.evaluated_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::CopyFrom(const JobSchedulerServiceDumpProto_ActiveJob_RunningJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto_ActiveJob_RunningJob::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto_ActiveJob_RunningJob::InternalSwap(JobSchedulerServiceDumpProto_ActiveJob_RunningJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(dump_, other->dump_);
  swap(running_duration_ms_, other->running_duration_ms_);
  swap(time_until_timeout_ms_, other->time_until_timeout_ms_);
  swap(time_since_made_active_ms_, other->time_since_made_active_ms_);
  swap(pending_duration_ms_, other->pending_duration_ms_);
  swap(evaluated_priority_, other->evaluated_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto_ActiveJob_RunningJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedulerServiceDumpProto_ActiveJob::InitAsDefaultInstance() {
  ::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_default_instance_.inactive_ = const_cast< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob*>(
      ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_ActiveJob_default_instance_.running_ = const_cast< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob*>(
      ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob::internal_default_instance());
}
class JobSchedulerServiceDumpProto_ActiveJob::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto_ActiveJob>()._has_bits_);
  static const ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob& inactive(const JobSchedulerServiceDumpProto_ActiveJob* msg);
  static const ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob& running(const JobSchedulerServiceDumpProto_ActiveJob* msg);
};

const ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob&
JobSchedulerServiceDumpProto_ActiveJob::_Internal::inactive(const JobSchedulerServiceDumpProto_ActiveJob* msg) {
  return *msg->job_.inactive_;
}
const ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob&
JobSchedulerServiceDumpProto_ActiveJob::_Internal::running(const JobSchedulerServiceDumpProto_ActiveJob* msg) {
  return *msg->job_.running_;
}
void JobSchedulerServiceDumpProto_ActiveJob::set_allocated_inactive(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob* inactive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_job();
  if (inactive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inactive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inactive, submessage_arena);
    }
    set_has_inactive();
    job_.inactive_ = inactive;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.inactive)
}
void JobSchedulerServiceDumpProto_ActiveJob::set_allocated_running(::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob* running) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_job();
  if (running) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      running = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, running, submessage_arena);
    }
    set_has_running();
    job_.running_ = running;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.running)
}
JobSchedulerServiceDumpProto_ActiveJob::JobSchedulerServiceDumpProto_ActiveJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
}
JobSchedulerServiceDumpProto_ActiveJob::JobSchedulerServiceDumpProto_ActiveJob(const JobSchedulerServiceDumpProto_ActiveJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_job();
  switch (from.job_case()) {
    case kInactive: {
      mutable_inactive()->::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::MergeFrom(from.inactive());
      break;
    }
    case kRunning: {
      mutable_running()->::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob::MergeFrom(from.running());
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
}

void JobSchedulerServiceDumpProto_ActiveJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  clear_has_job();
}

JobSchedulerServiceDumpProto_ActiveJob::~JobSchedulerServiceDumpProto_ActiveJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  SharedDtor();
}

void JobSchedulerServiceDumpProto_ActiveJob::SharedDtor() {
  if (has_job()) {
    clear_job();
  }
}

void JobSchedulerServiceDumpProto_ActiveJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto_ActiveJob& JobSchedulerServiceDumpProto_ActiveJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_ActiveJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto_ActiveJob::clear_job() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  switch (job_case()) {
    case kInactive: {
      delete job_.inactive_;
      break;
    }
    case kRunning: {
      delete job_.running_;
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = JOB_NOT_SET;
}


void JobSchedulerServiceDumpProto_ActiveJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_job();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto_ActiveJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob inactive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_inactive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob running = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_running(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto_ActiveJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob inactive = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inactive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob running = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_running()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto_ActiveJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (job_case()) {
    case kInactive:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::inactive(this), output);
      break;
    case kRunning:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::running(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto_ActiveJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (job_case()) {
    case kInactive:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::inactive(this), target);
      break;
    case kRunning:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::running(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  return target;
}

size_t JobSchedulerServiceDumpProto_ActiveJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (job_case()) {
    // optional .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.InactiveJob inactive = 1;
    case kInactive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *job_.inactive_);
      break;
    }
    // optional .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob.RunningJob running = 2;
    case kRunning: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *job_.running_);
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto_ActiveJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto_ActiveJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto_ActiveJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto_ActiveJob::MergeFrom(const JobSchedulerServiceDumpProto_ActiveJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.job_case()) {
    case kInactive: {
      mutable_inactive()->::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob::MergeFrom(from.inactive());
      break;
    }
    case kRunning: {
      mutable_running()->::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob::MergeFrom(from.running());
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
}

void JobSchedulerServiceDumpProto_ActiveJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto_ActiveJob::CopyFrom(const JobSchedulerServiceDumpProto_ActiveJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto_ActiveJob::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto_ActiveJob::InternalSwap(JobSchedulerServiceDumpProto_ActiveJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(job_, other->job_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto_ActiveJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedulerServiceDumpProto::InitAsDefaultInstance() {
  ::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_._instance.get_mutable()->settings_ = const_cast< ::com::android::server::job::ConstantsProto*>(
      ::com::android::server::job::ConstantsProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_._instance.get_mutable()->history_ = const_cast< ::com::android::server::job::JobPackageHistoryProto*>(
      ::com::android::server::job::JobPackageHistoryProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_._instance.get_mutable()->package_tracker_ = const_cast< ::com::android::server::job::JobPackageTrackerDumpProto*>(
      ::com::android::server::job::JobPackageTrackerDumpProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_._instance.get_mutable()->concurrency_manager_ = const_cast< ::com::android::server::job::JobConcurrencyManagerProto*>(
      ::com::android::server::job::JobConcurrencyManagerProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_._instance.get_mutable()->persist_stats_ = const_cast< ::com::android::server::job::JobStorePersistStatsProto*>(
      ::com::android::server::job::JobStorePersistStatsProto::internal_default_instance());
  ::com::android::server::job::_JobSchedulerServiceDumpProto_default_instance_._instance.get_mutable()->quota_tracker_ = const_cast< ::android::util::quota::CountQuotaTrackerProto*>(
      ::android::util::quota::CountQuotaTrackerProto::internal_default_instance());
}
class JobSchedulerServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobSchedulerServiceDumpProto>()._has_bits_);
  static const ::com::android::server::job::ConstantsProto& settings(const JobSchedulerServiceDumpProto* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_thermal(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::com::android::server::job::JobPackageHistoryProto& history(const JobSchedulerServiceDumpProto* msg);
  static void set_has_history(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::JobPackageTrackerDumpProto& package_tracker(const JobSchedulerServiceDumpProto* msg);
  static void set_has_package_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_ready_to_rock(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_reported_active(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_active_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::android::server::job::JobConcurrencyManagerProto& concurrency_manager(const JobSchedulerServiceDumpProto* msg);
  static void set_has_concurrency_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::job::JobStorePersistStatsProto& persist_stats(const JobSchedulerServiceDumpProto* msg);
  static void set_has_persist_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::util::quota::CountQuotaTrackerProto& quota_tracker(const JobSchedulerServiceDumpProto* msg);
  static void set_has_quota_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::job::ConstantsProto&
JobSchedulerServiceDumpProto::_Internal::settings(const JobSchedulerServiceDumpProto* msg) {
  return *msg->settings_;
}
const ::com::android::server::job::JobPackageHistoryProto&
JobSchedulerServiceDumpProto::_Internal::history(const JobSchedulerServiceDumpProto* msg) {
  return *msg->history_;
}
const ::com::android::server::job::JobPackageTrackerDumpProto&
JobSchedulerServiceDumpProto::_Internal::package_tracker(const JobSchedulerServiceDumpProto* msg) {
  return *msg->package_tracker_;
}
const ::com::android::server::job::JobConcurrencyManagerProto&
JobSchedulerServiceDumpProto::_Internal::concurrency_manager(const JobSchedulerServiceDumpProto* msg) {
  return *msg->concurrency_manager_;
}
const ::com::android::server::job::JobStorePersistStatsProto&
JobSchedulerServiceDumpProto::_Internal::persist_stats(const JobSchedulerServiceDumpProto* msg) {
  return *msg->persist_stats_;
}
const ::android::util::quota::CountQuotaTrackerProto&
JobSchedulerServiceDumpProto::_Internal::quota_tracker(const JobSchedulerServiceDumpProto* msg) {
  return *msg->quota_tracker_;
}
void JobSchedulerServiceDumpProto::clear_quota_tracker() {
  if (quota_tracker_ != nullptr) quota_tracker_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
JobSchedulerServiceDumpProto::JobSchedulerServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobSchedulerServiceDumpProto)
}
JobSchedulerServiceDumpProto::JobSchedulerServiceDumpProto(const JobSchedulerServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      started_users_(from.started_users_),
      registered_jobs_(from.registered_jobs_),
      controllers_(from.controllers_),
      priority_overrides_(from.priority_overrides_),
      backing_up_uids_(from.backing_up_uids_),
      pending_jobs_(from.pending_jobs_),
      active_jobs_(from.active_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::com::android::server::job::ConstantsProto(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_history()) {
    history_ = new ::com::android::server::job::JobPackageHistoryProto(*from.history_);
  } else {
    history_ = nullptr;
  }
  if (from.has_package_tracker()) {
    package_tracker_ = new ::com::android::server::job::JobPackageTrackerDumpProto(*from.package_tracker_);
  } else {
    package_tracker_ = nullptr;
  }
  if (from.has_concurrency_manager()) {
    concurrency_manager_ = new ::com::android::server::job::JobConcurrencyManagerProto(*from.concurrency_manager_);
  } else {
    concurrency_manager_ = nullptr;
  }
  if (from.has_persist_stats()) {
    persist_stats_ = new ::com::android::server::job::JobStorePersistStatsProto(*from.persist_stats_);
  } else {
    persist_stats_ = nullptr;
  }
  if (from.has_quota_tracker()) {
    quota_tracker_ = new ::android::util::quota::CountQuotaTrackerProto(*from.quota_tracker_);
  } else {
    quota_tracker_ = nullptr;
  }
  ::memcpy(&max_active_jobs_, &from.max_active_jobs_,
    static_cast<size_t>(reinterpret_cast<char*>(&reported_active_) -
    reinterpret_cast<char*>(&max_active_jobs_)) + sizeof(reported_active_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobSchedulerServiceDumpProto)
}

void JobSchedulerServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobSchedulerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reported_active_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(reported_active_));
}

JobSchedulerServiceDumpProto::~JobSchedulerServiceDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobSchedulerServiceDumpProto)
  SharedDtor();
}

void JobSchedulerServiceDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete history_;
  if (this != internal_default_instance()) delete package_tracker_;
  if (this != internal_default_instance()) delete concurrency_manager_;
  if (this != internal_default_instance()) delete persist_stats_;
  if (this != internal_default_instance()) delete quota_tracker_;
}

void JobSchedulerServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedulerServiceDumpProto& JobSchedulerServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedulerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobSchedulerServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobSchedulerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  started_users_.Clear();
  registered_jobs_.Clear();
  controllers_.Clear();
  priority_overrides_.Clear();
  backing_up_uids_.Clear();
  pending_jobs_.Clear();
  active_jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(history_ != nullptr);
      history_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(package_tracker_ != nullptr);
      package_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(concurrency_manager_ != nullptr);
      concurrency_manager_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(persist_stats_ != nullptr);
      persist_stats_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(quota_tracker_ != nullptr);
      quota_tracker_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&max_active_jobs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_thermal_) -
        reinterpret_cast<char*>(&max_active_jobs_)) + sizeof(in_thermal_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&is_ready_to_rock_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reported_active_) -
        reinterpret_cast<char*>(&is_ready_to_rock_)) + sizeof(reported_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobSchedulerServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.ConstantsProto settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 started_users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_started_users(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_started_users(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob registered_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_registered_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto controllers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_controllers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride priority_overrides = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_priority_overrides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated int32 backing_up_uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_backing_up_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_backing_up_uids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobPackageHistoryProto history = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobPackageTrackerDumpProto package_tracker = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_package_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PendingJob pending_jobs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pending_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob active_jobs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // optional bool is_ready_to_rock = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_ready_to_rock(&has_bits);
          is_ready_to_rock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reported_active = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_reported_active(&has_bits);
          reported_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_active_jobs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_active_jobs(&has_bits);
          max_active_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_thermal = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_in_thermal(&has_bits);
          in_thermal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobConcurrencyManagerProto concurrency_manager = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_concurrency_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStorePersistStatsProto persist_stats = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_persist_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.quota.CountQuotaTrackerProto quota_tracker = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_quota_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobSchedulerServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobSchedulerServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.ConstantsProto settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 started_users = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_started_users())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_started_users())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob registered_jobs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_registered_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto controllers = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_controllers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride priority_overrides = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_priority_overrides()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 backing_up_uids = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_backing_up_uids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_backing_up_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobPackageHistoryProto history = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobPackageTrackerDumpProto package_tracker = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_package_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PendingJob pending_jobs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob active_jobs = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ready_to_rock = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_is_ready_to_rock(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_to_rock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reported_active = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_reported_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reported_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_active_jobs = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_max_active_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_active_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_thermal = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_in_thermal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_thermal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobConcurrencyManagerProto concurrency_manager = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_concurrency_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStorePersistStatsProto persist_stats = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_persist_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.quota.CountQuotaTrackerProto quota_tracker = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quota_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobSchedulerServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobSchedulerServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobSchedulerServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobSchedulerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.ConstantsProto settings = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::settings(this), output);
  }

  // repeated int32 started_users = 2;
  for (int i = 0, n = this->started_users_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->started_users(i), output);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob registered_jobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registered_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->registered_jobs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.job.StateControllerProto controllers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controllers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->controllers(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride priority_overrides = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->priority_overrides_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->priority_overrides(static_cast<int>(i)),
      output);
  }

  // repeated int32 backing_up_uids = 6;
  for (int i = 0, n = this->backing_up_uids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      6, this->backing_up_uids(i), output);
  }

  // optional .com.android.server.job.JobPackageHistoryProto history = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::history(this), output);
  }

  // optional .com.android.server.job.JobPackageTrackerDumpProto package_tracker = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::package_tracker(this), output);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PendingJob pending_jobs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->pending_jobs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob active_jobs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->active_jobs(static_cast<int>(i)),
      output);
  }

  // optional bool is_ready_to_rock = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->is_ready_to_rock(), output);
  }

  // optional bool reported_active = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->reported_active(), output);
  }

  // optional int32 max_active_jobs = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->max_active_jobs(), output);
  }

  // optional bool in_thermal = 19;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->in_thermal(), output);
  }

  // optional .com.android.server.job.JobConcurrencyManagerProto concurrency_manager = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::concurrency_manager(this), output);
  }

  // optional .com.android.server.job.JobStorePersistStatsProto persist_stats = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::persist_stats(this), output);
  }

  // optional .android.util.quota.CountQuotaTrackerProto quota_tracker = 22;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, _Internal::quota_tracker(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobSchedulerServiceDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedulerServiceDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobSchedulerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.ConstantsProto settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::settings(this), target);
  }

  // repeated int32 started_users = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(2, this->started_users_, target);

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob registered_jobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registered_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->registered_jobs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.job.StateControllerProto controllers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controllers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->controllers(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride priority_overrides = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->priority_overrides_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->priority_overrides(static_cast<int>(i)), target);
  }

  // repeated int32 backing_up_uids = 6;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(6, this->backing_up_uids_, target);

  // optional .com.android.server.job.JobPackageHistoryProto history = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::history(this), target);
  }

  // optional .com.android.server.job.JobPackageTrackerDumpProto package_tracker = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::package_tracker(this), target);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PendingJob pending_jobs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->pending_jobs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob active_jobs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->active_jobs(static_cast<int>(i)), target);
  }

  // optional bool is_ready_to_rock = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->is_ready_to_rock(), target);
  }

  // optional bool reported_active = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->reported_active(), target);
  }

  // optional int32 max_active_jobs = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->max_active_jobs(), target);
  }

  // optional bool in_thermal = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->in_thermal(), target);
  }

  // optional .com.android.server.job.JobConcurrencyManagerProto concurrency_manager = 20;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::concurrency_manager(this), target);
  }

  // optional .com.android.server.job.JobStorePersistStatsProto persist_stats = 21;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::persist_stats(this), target);
  }

  // optional .android.util.quota.CountQuotaTrackerProto quota_tracker = 22;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::quota_tracker(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobSchedulerServiceDumpProto)
  return target;
}

size_t JobSchedulerServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobSchedulerServiceDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 started_users = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->started_users_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->started_users_size());
    total_size += data_size;
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.RegisteredJob registered_jobs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->registered_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->registered_jobs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.StateControllerProto controllers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->controllers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->controllers(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PriorityOverride priority_overrides = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->priority_overrides_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->priority_overrides(static_cast<int>(i)));
    }
  }

  // repeated int32 backing_up_uids = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->backing_up_uids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->backing_up_uids_size());
    total_size += data_size;
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.PendingJob pending_jobs = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_jobs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.JobSchedulerServiceDumpProto.ActiveJob active_jobs = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->active_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_jobs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.job.ConstantsProto settings = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .com.android.server.job.JobPackageHistoryProto history = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *history_);
    }

    // optional .com.android.server.job.JobPackageTrackerDumpProto package_tracker = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *package_tracker_);
    }

    // optional .com.android.server.job.JobConcurrencyManagerProto concurrency_manager = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *concurrency_manager_);
    }

    // optional .com.android.server.job.JobStorePersistStatsProto persist_stats = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *persist_stats_);
    }

    // optional .android.util.quota.CountQuotaTrackerProto quota_tracker = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quota_tracker_);
    }

    // optional int32 max_active_jobs = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_active_jobs());
    }

    // optional bool in_thermal = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool is_ready_to_rock = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool reported_active = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedulerServiceDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedulerServiceDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedulerServiceDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobSchedulerServiceDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobSchedulerServiceDumpProto)
    MergeFrom(*source);
  }
}

void JobSchedulerServiceDumpProto::MergeFrom(const JobSchedulerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobSchedulerServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  started_users_.MergeFrom(from.started_users_);
  registered_jobs_.MergeFrom(from.registered_jobs_);
  controllers_.MergeFrom(from.controllers_);
  priority_overrides_.MergeFrom(from.priority_overrides_);
  backing_up_uids_.MergeFrom(from.backing_up_uids_);
  pending_jobs_.MergeFrom(from.pending_jobs_);
  active_jobs_.MergeFrom(from.active_jobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_settings()->::com::android::server::job::ConstantsProto::MergeFrom(from.settings());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_history()->::com::android::server::job::JobPackageHistoryProto::MergeFrom(from.history());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_package_tracker()->::com::android::server::job::JobPackageTrackerDumpProto::MergeFrom(from.package_tracker());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_concurrency_manager()->::com::android::server::job::JobConcurrencyManagerProto::MergeFrom(from.concurrency_manager());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_persist_stats()->::com::android::server::job::JobStorePersistStatsProto::MergeFrom(from.persist_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_quota_tracker()->::android::util::quota::CountQuotaTrackerProto::MergeFrom(from.quota_tracker());
    }
    if (cached_has_bits & 0x00000040u) {
      max_active_jobs_ = from.max_active_jobs_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_thermal_ = from.in_thermal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      is_ready_to_rock_ = from.is_ready_to_rock_;
    }
    if (cached_has_bits & 0x00000200u) {
      reported_active_ = from.reported_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobSchedulerServiceDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedulerServiceDumpProto::CopyFrom(const JobSchedulerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobSchedulerServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedulerServiceDumpProto::IsInitialized() const {
  return true;
}

void JobSchedulerServiceDumpProto::InternalSwap(JobSchedulerServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  started_users_.InternalSwap(&other->started_users_);
  CastToBase(&registered_jobs_)->InternalSwap(CastToBase(&other->registered_jobs_));
  CastToBase(&controllers_)->InternalSwap(CastToBase(&other->controllers_));
  CastToBase(&priority_overrides_)->InternalSwap(CastToBase(&other->priority_overrides_));
  backing_up_uids_.InternalSwap(&other->backing_up_uids_);
  CastToBase(&pending_jobs_)->InternalSwap(CastToBase(&other->pending_jobs_));
  CastToBase(&active_jobs_)->InternalSwap(CastToBase(&other->active_jobs_));
  swap(settings_, other->settings_);
  swap(history_, other->history_);
  swap(package_tracker_, other->package_tracker_);
  swap(concurrency_manager_, other->concurrency_manager_);
  swap(persist_stats_, other->persist_stats_);
  swap(quota_tracker_, other->quota_tracker_);
  swap(max_active_jobs_, other->max_active_jobs_);
  swap(in_thermal_, other->in_thermal_);
  swap(is_ready_to_rock_, other->is_ready_to_rock_);
  swap(reported_active_, other->reported_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedulerServiceDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstantsProto_QuotaController::InitAsDefaultInstance() {
}
class ConstantsProto_QuotaController::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstantsProto_QuotaController>()._has_bits_);
  static void set_has_allowed_time_per_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_quota_buffer_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_working_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frequent_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rare_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_restricted_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_execution_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_job_count_active(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_job_count_working(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_job_count_frequent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_job_count_rare(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_job_count_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rate_limiting_window_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_max_job_count_per_rate_limiting_window(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_session_count_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_session_count_working(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_session_count_frequent(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_session_count_rare(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_session_count_restricted(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_max_session_count_per_rate_limiting_window(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_timing_session_coalescing_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_min_quota_check_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_expedited_job_limit_active_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_expedited_job_limit_working_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_expedited_job_limit_frequent_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_expedited_job_limit_rare_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_expedited_job_limit_restricted_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_expedited_job_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_expedited_job_top_app_time_chunk_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_expedited_job_reward_top_app_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_expedited_job_reward_interaction_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_expedited_job_reward_notification_seen_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
};

ConstantsProto_QuotaController::ConstantsProto_QuotaController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.ConstantsProto.QuotaController)
}
ConstantsProto_QuotaController::ConstantsProto_QuotaController(const ConstantsProto_QuotaController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allowed_time_per_period_ms_, &from.allowed_time_per_period_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_session_count_restricted_) -
    reinterpret_cast<char*>(&allowed_time_per_period_ms_)) + sizeof(max_session_count_restricted_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.ConstantsProto.QuotaController)
}

void ConstantsProto_QuotaController::SharedCtor() {
  ::memset(&allowed_time_per_period_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_session_count_restricted_) -
      reinterpret_cast<char*>(&allowed_time_per_period_ms_)) + sizeof(max_session_count_restricted_));
}

ConstantsProto_QuotaController::~ConstantsProto_QuotaController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.ConstantsProto.QuotaController)
  SharedDtor();
}

void ConstantsProto_QuotaController::SharedDtor() {
}

void ConstantsProto_QuotaController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantsProto_QuotaController& ConstantsProto_QuotaController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantsProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void ConstantsProto_QuotaController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.ConstantsProto.QuotaController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&allowed_time_per_period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_job_count_active_) -
        reinterpret_cast<char*>(&allowed_time_per_period_ms_)) + sizeof(max_job_count_active_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&max_job_count_working_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_session_count_rare_) -
        reinterpret_cast<char*>(&max_job_count_working_)) + sizeof(max_session_count_rare_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&max_session_count_per_rate_limiting_window_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expedited_job_limit_working_ms_) -
        reinterpret_cast<char*>(&max_session_count_per_rate_limiting_window_)) + sizeof(expedited_job_limit_working_ms_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&expedited_job_limit_frequent_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expedited_job_reward_notification_seen_ms_) -
        reinterpret_cast<char*>(&expedited_job_limit_frequent_ms_)) + sizeof(expedited_job_reward_notification_seen_ms_));
  }
  max_session_count_restricted_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConstantsProto_QuotaController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 allowed_time_per_period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allowed_time_per_period_ms(&_has_bits_);
          allowed_time_per_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 in_quota_buffer_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_in_quota_buffer_ms(&_has_bits_);
          in_quota_buffer_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 active_window_size_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_active_window_size_ms(&_has_bits_);
          active_window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 working_window_size_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_working_window_size_ms(&_has_bits_);
          working_window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frequent_window_size_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_frequent_window_size_ms(&_has_bits_);
          frequent_window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rare_window_size_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rare_window_size_ms(&_has_bits_);
          rare_window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_execution_time_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_execution_time_ms(&_has_bits_);
          max_execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_job_count_active = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_job_count_active(&_has_bits_);
          max_job_count_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_job_count_working = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_job_count_working(&_has_bits_);
          max_job_count_working_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_job_count_frequent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_job_count_frequent(&_has_bits_);
          max_job_count_frequent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_job_count_rare = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_job_count_rare(&_has_bits_);
          max_job_count_rare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_job_count_per_rate_limiting_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_job_count_per_rate_limiting_window(&_has_bits_);
          max_job_count_per_rate_limiting_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_session_count_active = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_session_count_active(&_has_bits_);
          max_session_count_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_session_count_working = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_session_count_working(&_has_bits_);
          max_session_count_working_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_session_count_frequent = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_max_session_count_frequent(&_has_bits_);
          max_session_count_frequent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_session_count_rare = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_max_session_count_rare(&_has_bits_);
          max_session_count_rare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_session_count_per_rate_limiting_window = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_session_count_per_rate_limiting_window(&_has_bits_);
          max_session_count_per_rate_limiting_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timing_session_coalescing_duration_ms = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_timing_session_coalescing_duration_ms(&_has_bits_);
          timing_session_coalescing_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rate_limiting_window_ms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_rate_limiting_window_ms(&_has_bits_);
          rate_limiting_window_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 restricted_window_size_ms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_restricted_window_size_ms(&_has_bits_);
          restricted_window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_job_count_restricted = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_max_job_count_restricted(&_has_bits_);
          max_job_count_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_session_count_restricted = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_max_session_count_restricted(&_has_bits_);
          max_session_count_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_quota_check_delay_ms = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_min_quota_check_delay_ms(&_has_bits_);
          min_quota_check_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_limit_active_ms = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_expedited_job_limit_active_ms(&_has_bits_);
          expedited_job_limit_active_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_limit_working_ms = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_expedited_job_limit_working_ms(&_has_bits_);
          expedited_job_limit_working_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_limit_frequent_ms = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_expedited_job_limit_frequent_ms(&_has_bits_);
          expedited_job_limit_frequent_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_limit_rare_ms = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_expedited_job_limit_rare_ms(&_has_bits_);
          expedited_job_limit_rare_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_limit_restricted_ms = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_expedited_job_limit_restricted_ms(&_has_bits_);
          expedited_job_limit_restricted_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_window_size_ms = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_expedited_job_window_size_ms(&_has_bits_);
          expedited_job_window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_top_app_time_chunk_size_ms = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_expedited_job_top_app_time_chunk_size_ms(&_has_bits_);
          expedited_job_top_app_time_chunk_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_reward_top_app_ms = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_expedited_job_reward_top_app_ms(&_has_bits_);
          expedited_job_reward_top_app_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_reward_interaction_ms = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_expedited_job_reward_interaction_ms(&_has_bits_);
          expedited_job_reward_interaction_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 expedited_job_reward_notification_seen_ms = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_expedited_job_reward_notification_seen_ms(&_has_bits_);
          expedited_job_reward_notification_seen_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConstantsProto_QuotaController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.ConstantsProto.QuotaController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 allowed_time_per_period_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_allowed_time_per_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allowed_time_per_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 in_quota_buffer_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_in_quota_buffer_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &in_quota_buffer_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_window_size_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_active_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 working_window_size_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_working_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &working_window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frequent_window_size_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_frequent_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frequent_window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rare_window_size_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_rare_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rare_window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_execution_time_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_max_execution_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_execution_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_job_count_active = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_max_job_count_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_job_count_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_job_count_working = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_max_job_count_working(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_job_count_working_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_job_count_frequent = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_job_count_frequent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_job_count_frequent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_job_count_rare = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_max_job_count_rare(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_job_count_rare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_job_count_per_rate_limiting_window = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_max_job_count_per_rate_limiting_window(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_job_count_per_rate_limiting_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_session_count_active = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_max_session_count_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_session_count_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_session_count_working = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_max_session_count_working(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_session_count_working_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_session_count_frequent = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_max_session_count_frequent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_session_count_frequent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_session_count_rare = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_max_session_count_rare(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_session_count_rare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_session_count_per_rate_limiting_window = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_max_session_count_per_rate_limiting_window(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_session_count_per_rate_limiting_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timing_session_coalescing_duration_ms = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_timing_session_coalescing_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timing_session_coalescing_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rate_limiting_window_ms = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_rate_limiting_window_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_limiting_window_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 restricted_window_size_ms = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_restricted_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &restricted_window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_job_count_restricted = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_max_job_count_restricted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_job_count_restricted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_session_count_restricted = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_max_session_count_restricted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_session_count_restricted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_quota_check_delay_ms = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_min_quota_check_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_quota_check_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_limit_active_ms = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_expedited_job_limit_active_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_limit_active_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_limit_working_ms = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_expedited_job_limit_working_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_limit_working_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_limit_frequent_ms = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_expedited_job_limit_frequent_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_limit_frequent_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_limit_rare_ms = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_expedited_job_limit_rare_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_limit_rare_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_limit_restricted_ms = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_expedited_job_limit_restricted_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_limit_restricted_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_window_size_ms = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_expedited_job_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_top_app_time_chunk_size_ms = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_expedited_job_top_app_time_chunk_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_top_app_time_chunk_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_reward_top_app_ms = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          _Internal::set_has_expedited_job_reward_top_app_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_reward_top_app_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_reward_interaction_ms = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_expedited_job_reward_interaction_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_reward_interaction_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expedited_job_reward_notification_seen_ms = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_expedited_job_reward_notification_seen_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expedited_job_reward_notification_seen_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.ConstantsProto.QuotaController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.ConstantsProto.QuotaController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConstantsProto_QuotaController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.ConstantsProto.QuotaController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 allowed_time_per_period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->allowed_time_per_period_ms(), output);
  }

  // optional int64 in_quota_buffer_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->in_quota_buffer_ms(), output);
  }

  // optional int64 active_window_size_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->active_window_size_ms(), output);
  }

  // optional int64 working_window_size_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->working_window_size_ms(), output);
  }

  // optional int64 frequent_window_size_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->frequent_window_size_ms(), output);
  }

  // optional int64 rare_window_size_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->rare_window_size_ms(), output);
  }

  // optional int64 max_execution_time_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->max_execution_time_ms(), output);
  }

  // optional int32 max_job_count_active = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->max_job_count_active(), output);
  }

  // optional int32 max_job_count_working = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->max_job_count_working(), output);
  }

  // optional int32 max_job_count_frequent = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->max_job_count_frequent(), output);
  }

  // optional int32 max_job_count_rare = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->max_job_count_rare(), output);
  }

  // optional int32 max_job_count_per_rate_limiting_window = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->max_job_count_per_rate_limiting_window(), output);
  }

  // optional int32 max_session_count_active = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->max_session_count_active(), output);
  }

  // optional int32 max_session_count_working = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->max_session_count_working(), output);
  }

  // optional int32 max_session_count_frequent = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->max_session_count_frequent(), output);
  }

  // optional int32 max_session_count_rare = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->max_session_count_rare(), output);
  }

  // optional int32 max_session_count_per_rate_limiting_window = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->max_session_count_per_rate_limiting_window(), output);
  }

  // optional int64 timing_session_coalescing_duration_ms = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->timing_session_coalescing_duration_ms(), output);
  }

  // optional int32 rate_limiting_window_ms = 19;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->rate_limiting_window_ms(), output);
  }

  // optional int64 restricted_window_size_ms = 20;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->restricted_window_size_ms(), output);
  }

  // optional int32 max_job_count_restricted = 21;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->max_job_count_restricted(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 max_session_count_restricted = 22;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->max_session_count_restricted(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 min_quota_check_delay_ms = 23;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(23, this->min_quota_check_delay_ms(), output);
  }

  // optional int64 expedited_job_limit_active_ms = 24;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(24, this->expedited_job_limit_active_ms(), output);
  }

  // optional int64 expedited_job_limit_working_ms = 25;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(25, this->expedited_job_limit_working_ms(), output);
  }

  // optional int64 expedited_job_limit_frequent_ms = 26;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(26, this->expedited_job_limit_frequent_ms(), output);
  }

  // optional int64 expedited_job_limit_rare_ms = 27;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(27, this->expedited_job_limit_rare_ms(), output);
  }

  // optional int64 expedited_job_limit_restricted_ms = 28;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(28, this->expedited_job_limit_restricted_ms(), output);
  }

  // optional int64 expedited_job_window_size_ms = 29;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(29, this->expedited_job_window_size_ms(), output);
  }

  // optional int64 expedited_job_top_app_time_chunk_size_ms = 30;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(30, this->expedited_job_top_app_time_chunk_size_ms(), output);
  }

  // optional int64 expedited_job_reward_top_app_ms = 31;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(31, this->expedited_job_reward_top_app_ms(), output);
  }

  // optional int64 expedited_job_reward_interaction_ms = 32;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(32, this->expedited_job_reward_interaction_ms(), output);
  }

  // optional int64 expedited_job_reward_notification_seen_ms = 33;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(33, this->expedited_job_reward_notification_seen_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.ConstantsProto.QuotaController)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantsProto_QuotaController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.ConstantsProto.QuotaController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 allowed_time_per_period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->allowed_time_per_period_ms(), target);
  }

  // optional int64 in_quota_buffer_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->in_quota_buffer_ms(), target);
  }

  // optional int64 active_window_size_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->active_window_size_ms(), target);
  }

  // optional int64 working_window_size_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->working_window_size_ms(), target);
  }

  // optional int64 frequent_window_size_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->frequent_window_size_ms(), target);
  }

  // optional int64 rare_window_size_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->rare_window_size_ms(), target);
  }

  // optional int64 max_execution_time_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->max_execution_time_ms(), target);
  }

  // optional int32 max_job_count_active = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->max_job_count_active(), target);
  }

  // optional int32 max_job_count_working = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->max_job_count_working(), target);
  }

  // optional int32 max_job_count_frequent = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->max_job_count_frequent(), target);
  }

  // optional int32 max_job_count_rare = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->max_job_count_rare(), target);
  }

  // optional int32 max_job_count_per_rate_limiting_window = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->max_job_count_per_rate_limiting_window(), target);
  }

  // optional int32 max_session_count_active = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->max_session_count_active(), target);
  }

  // optional int32 max_session_count_working = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->max_session_count_working(), target);
  }

  // optional int32 max_session_count_frequent = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->max_session_count_frequent(), target);
  }

  // optional int32 max_session_count_rare = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->max_session_count_rare(), target);
  }

  // optional int32 max_session_count_per_rate_limiting_window = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->max_session_count_per_rate_limiting_window(), target);
  }

  // optional int64 timing_session_coalescing_duration_ms = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->timing_session_coalescing_duration_ms(), target);
  }

  // optional int32 rate_limiting_window_ms = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->rate_limiting_window_ms(), target);
  }

  // optional int64 restricted_window_size_ms = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->restricted_window_size_ms(), target);
  }

  // optional int32 max_job_count_restricted = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->max_job_count_restricted(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 max_session_count_restricted = 22;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->max_session_count_restricted(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 min_quota_check_delay_ms = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->min_quota_check_delay_ms(), target);
  }

  // optional int64 expedited_job_limit_active_ms = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->expedited_job_limit_active_ms(), target);
  }

  // optional int64 expedited_job_limit_working_ms = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->expedited_job_limit_working_ms(), target);
  }

  // optional int64 expedited_job_limit_frequent_ms = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->expedited_job_limit_frequent_ms(), target);
  }

  // optional int64 expedited_job_limit_rare_ms = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->expedited_job_limit_rare_ms(), target);
  }

  // optional int64 expedited_job_limit_restricted_ms = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->expedited_job_limit_restricted_ms(), target);
  }

  // optional int64 expedited_job_window_size_ms = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->expedited_job_window_size_ms(), target);
  }

  // optional int64 expedited_job_top_app_time_chunk_size_ms = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->expedited_job_top_app_time_chunk_size_ms(), target);
  }

  // optional int64 expedited_job_reward_top_app_ms = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->expedited_job_reward_top_app_ms(), target);
  }

  // optional int64 expedited_job_reward_interaction_ms = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->expedited_job_reward_interaction_ms(), target);
  }

  // optional int64 expedited_job_reward_notification_seen_ms = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(33, this->expedited_job_reward_notification_seen_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.ConstantsProto.QuotaController)
  return target;
}

size_t ConstantsProto_QuotaController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.ConstantsProto.QuotaController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 allowed_time_per_period_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->allowed_time_per_period_ms());
    }

    // optional int64 in_quota_buffer_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->in_quota_buffer_ms());
    }

    // optional int64 active_window_size_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->active_window_size_ms());
    }

    // optional int64 working_window_size_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->working_window_size_ms());
    }

    // optional int64 frequent_window_size_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frequent_window_size_ms());
    }

    // optional int64 rare_window_size_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rare_window_size_ms());
    }

    // optional int64 max_execution_time_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_execution_time_ms());
    }

    // optional int32 max_job_count_active = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_job_count_active());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 max_job_count_working = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_job_count_working());
    }

    // optional int32 max_job_count_frequent = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_job_count_frequent());
    }

    // optional int32 max_job_count_rare = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_job_count_rare());
    }

    // optional int32 max_job_count_per_rate_limiting_window = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_job_count_per_rate_limiting_window());
    }

    // optional int32 max_session_count_active = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_session_count_active());
    }

    // optional int32 max_session_count_working = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_session_count_working());
    }

    // optional int32 max_session_count_frequent = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_session_count_frequent());
    }

    // optional int32 max_session_count_rare = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_session_count_rare());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 max_session_count_per_rate_limiting_window = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_session_count_per_rate_limiting_window());
    }

    // optional int64 timing_session_coalescing_duration_ms = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timing_session_coalescing_duration_ms());
    }

    // optional int64 restricted_window_size_ms = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->restricted_window_size_ms());
    }

    // optional int32 rate_limiting_window_ms = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->rate_limiting_window_ms());
    }

    // optional int32 max_job_count_restricted = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_job_count_restricted());
    }

    // optional int64 min_quota_check_delay_ms = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_quota_check_delay_ms());
    }

    // optional int64 expedited_job_limit_active_ms = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_limit_active_ms());
    }

    // optional int64 expedited_job_limit_working_ms = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_limit_working_ms());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int64 expedited_job_limit_frequent_ms = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_limit_frequent_ms());
    }

    // optional int64 expedited_job_limit_rare_ms = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_limit_rare_ms());
    }

    // optional int64 expedited_job_limit_restricted_ms = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_limit_restricted_ms());
    }

    // optional int64 expedited_job_window_size_ms = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_window_size_ms());
    }

    // optional int64 expedited_job_top_app_time_chunk_size_ms = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_top_app_time_chunk_size_ms());
    }

    // optional int64 expedited_job_reward_top_app_ms = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_reward_top_app_ms());
    }

    // optional int64 expedited_job_reward_interaction_ms = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_reward_interaction_ms());
    }

    // optional int64 expedited_job_reward_notification_seen_ms = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expedited_job_reward_notification_seen_ms());
    }

  }
  // optional int32 max_session_count_restricted = 22;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_session_count_restricted());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantsProto_QuotaController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.ConstantsProto.QuotaController)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantsProto_QuotaController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantsProto_QuotaController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.ConstantsProto.QuotaController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.ConstantsProto.QuotaController)
    MergeFrom(*source);
  }
}

void ConstantsProto_QuotaController::MergeFrom(const ConstantsProto_QuotaController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.ConstantsProto.QuotaController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      allowed_time_per_period_ms_ = from.allowed_time_per_period_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_quota_buffer_ms_ = from.in_quota_buffer_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_window_size_ms_ = from.active_window_size_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      working_window_size_ms_ = from.working_window_size_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      frequent_window_size_ms_ = from.frequent_window_size_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      rare_window_size_ms_ = from.rare_window_size_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_execution_time_ms_ = from.max_execution_time_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_job_count_active_ = from.max_job_count_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      max_job_count_working_ = from.max_job_count_working_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_job_count_frequent_ = from.max_job_count_frequent_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_job_count_rare_ = from.max_job_count_rare_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_job_count_per_rate_limiting_window_ = from.max_job_count_per_rate_limiting_window_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_session_count_active_ = from.max_session_count_active_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_session_count_working_ = from.max_session_count_working_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_session_count_frequent_ = from.max_session_count_frequent_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_session_count_rare_ = from.max_session_count_rare_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_session_count_per_rate_limiting_window_ = from.max_session_count_per_rate_limiting_window_;
    }
    if (cached_has_bits & 0x00020000u) {
      timing_session_coalescing_duration_ms_ = from.timing_session_coalescing_duration_ms_;
    }
    if (cached_has_bits & 0x00040000u) {
      restricted_window_size_ms_ = from.restricted_window_size_ms_;
    }
    if (cached_has_bits & 0x00080000u) {
      rate_limiting_window_ms_ = from.rate_limiting_window_ms_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_job_count_restricted_ = from.max_job_count_restricted_;
    }
    if (cached_has_bits & 0x00200000u) {
      min_quota_check_delay_ms_ = from.min_quota_check_delay_ms_;
    }
    if (cached_has_bits & 0x00400000u) {
      expedited_job_limit_active_ms_ = from.expedited_job_limit_active_ms_;
    }
    if (cached_has_bits & 0x00800000u) {
      expedited_job_limit_working_ms_ = from.expedited_job_limit_working_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      expedited_job_limit_frequent_ms_ = from.expedited_job_limit_frequent_ms_;
    }
    if (cached_has_bits & 0x02000000u) {
      expedited_job_limit_rare_ms_ = from.expedited_job_limit_rare_ms_;
    }
    if (cached_has_bits & 0x04000000u) {
      expedited_job_limit_restricted_ms_ = from.expedited_job_limit_restricted_ms_;
    }
    if (cached_has_bits & 0x08000000u) {
      expedited_job_window_size_ms_ = from.expedited_job_window_size_ms_;
    }
    if (cached_has_bits & 0x10000000u) {
      expedited_job_top_app_time_chunk_size_ms_ = from.expedited_job_top_app_time_chunk_size_ms_;
    }
    if (cached_has_bits & 0x20000000u) {
      expedited_job_reward_top_app_ms_ = from.expedited_job_reward_top_app_ms_;
    }
    if (cached_has_bits & 0x40000000u) {
      expedited_job_reward_interaction_ms_ = from.expedited_job_reward_interaction_ms_;
    }
    if (cached_has_bits & 0x80000000u) {
      expedited_job_reward_notification_seen_ms_ = from.expedited_job_reward_notification_seen_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.has_max_session_count_restricted()) {
    set_max_session_count_restricted(from.max_session_count_restricted());
  }
}

void ConstantsProto_QuotaController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.ConstantsProto.QuotaController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantsProto_QuotaController::CopyFrom(const ConstantsProto_QuotaController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.ConstantsProto.QuotaController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantsProto_QuotaController::IsInitialized() const {
  return true;
}

void ConstantsProto_QuotaController::InternalSwap(ConstantsProto_QuotaController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(allowed_time_per_period_ms_, other->allowed_time_per_period_ms_);
  swap(in_quota_buffer_ms_, other->in_quota_buffer_ms_);
  swap(active_window_size_ms_, other->active_window_size_ms_);
  swap(working_window_size_ms_, other->working_window_size_ms_);
  swap(frequent_window_size_ms_, other->frequent_window_size_ms_);
  swap(rare_window_size_ms_, other->rare_window_size_ms_);
  swap(max_execution_time_ms_, other->max_execution_time_ms_);
  swap(max_job_count_active_, other->max_job_count_active_);
  swap(max_job_count_working_, other->max_job_count_working_);
  swap(max_job_count_frequent_, other->max_job_count_frequent_);
  swap(max_job_count_rare_, other->max_job_count_rare_);
  swap(max_job_count_per_rate_limiting_window_, other->max_job_count_per_rate_limiting_window_);
  swap(max_session_count_active_, other->max_session_count_active_);
  swap(max_session_count_working_, other->max_session_count_working_);
  swap(max_session_count_frequent_, other->max_session_count_frequent_);
  swap(max_session_count_rare_, other->max_session_count_rare_);
  swap(max_session_count_per_rate_limiting_window_, other->max_session_count_per_rate_limiting_window_);
  swap(timing_session_coalescing_duration_ms_, other->timing_session_coalescing_duration_ms_);
  swap(restricted_window_size_ms_, other->restricted_window_size_ms_);
  swap(rate_limiting_window_ms_, other->rate_limiting_window_ms_);
  swap(max_job_count_restricted_, other->max_job_count_restricted_);
  swap(min_quota_check_delay_ms_, other->min_quota_check_delay_ms_);
  swap(expedited_job_limit_active_ms_, other->expedited_job_limit_active_ms_);
  swap(expedited_job_limit_working_ms_, other->expedited_job_limit_working_ms_);
  swap(expedited_job_limit_frequent_ms_, other->expedited_job_limit_frequent_ms_);
  swap(expedited_job_limit_rare_ms_, other->expedited_job_limit_rare_ms_);
  swap(expedited_job_limit_restricted_ms_, other->expedited_job_limit_restricted_ms_);
  swap(expedited_job_window_size_ms_, other->expedited_job_window_size_ms_);
  swap(expedited_job_top_app_time_chunk_size_ms_, other->expedited_job_top_app_time_chunk_size_ms_);
  swap(expedited_job_reward_top_app_ms_, other->expedited_job_reward_top_app_ms_);
  swap(expedited_job_reward_interaction_ms_, other->expedited_job_reward_interaction_ms_);
  swap(expedited_job_reward_notification_seen_ms_, other->expedited_job_reward_notification_seen_ms_);
  swap(max_session_count_restricted_, other->max_session_count_restricted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantsProto_QuotaController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstantsProto_TimeController::InitAsDefaultInstance() {
}
class ConstantsProto_TimeController::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstantsProto_TimeController>()._has_bits_);
};

ConstantsProto_TimeController::ConstantsProto_TimeController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.ConstantsProto.TimeController)
}
ConstantsProto_TimeController::ConstantsProto_TimeController(const ConstantsProto_TimeController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.ConstantsProto.TimeController)
}

void ConstantsProto_TimeController::SharedCtor() {
}

ConstantsProto_TimeController::~ConstantsProto_TimeController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.ConstantsProto.TimeController)
  SharedDtor();
}

void ConstantsProto_TimeController::SharedDtor() {
}

void ConstantsProto_TimeController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantsProto_TimeController& ConstantsProto_TimeController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantsProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void ConstantsProto_TimeController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.ConstantsProto.TimeController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConstantsProto_TimeController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConstantsProto_TimeController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.ConstantsProto.TimeController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.ConstantsProto.TimeController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.ConstantsProto.TimeController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConstantsProto_TimeController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.ConstantsProto.TimeController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.ConstantsProto.TimeController)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantsProto_TimeController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.ConstantsProto.TimeController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.ConstantsProto.TimeController)
  return target;
}

size_t ConstantsProto_TimeController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.ConstantsProto.TimeController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantsProto_TimeController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.ConstantsProto.TimeController)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantsProto_TimeController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantsProto_TimeController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.ConstantsProto.TimeController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.ConstantsProto.TimeController)
    MergeFrom(*source);
  }
}

void ConstantsProto_TimeController::MergeFrom(const ConstantsProto_TimeController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.ConstantsProto.TimeController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConstantsProto_TimeController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.ConstantsProto.TimeController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantsProto_TimeController::CopyFrom(const ConstantsProto_TimeController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.ConstantsProto.TimeController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantsProto_TimeController::IsInitialized() const {
  return true;
}

void ConstantsProto_TimeController::InternalSwap(ConstantsProto_TimeController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantsProto_TimeController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstantsProto::InitAsDefaultInstance() {
  ::com::android::server::job::_ConstantsProto_default_instance_._instance.get_mutable()->quota_controller_ = const_cast< ::com::android::server::job::ConstantsProto_QuotaController*>(
      ::com::android::server::job::ConstantsProto_QuotaController::internal_default_instance());
  ::com::android::server::job::_ConstantsProto_default_instance_._instance.get_mutable()->time_controller_ = const_cast< ::com::android::server::job::ConstantsProto_TimeController*>(
      ::com::android::server::job::ConstantsProto_TimeController::internal_default_instance());
  ::com::android::server::job::_ConstantsProto_default_instance_._instance.get_mutable()->max_job_counts_screen_on_ = const_cast< ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto*>(
      ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto::internal_default_instance());
  ::com::android::server::job::_ConstantsProto_default_instance_._instance.get_mutable()->max_job_counts_screen_off_ = const_cast< ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto*>(
      ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto::internal_default_instance());
}
class ConstantsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstantsProto>()._has_bits_);
  static void set_has_min_ready_non_active_jobs_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_non_active_job_batch_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_heavy_use_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_moderate_use_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fg_job_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bg_normal_job_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bg_moderate_job_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bg_low_job_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bg_critical_job_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_linear_backoff_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_exp_backoff_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_conn_congestion_delay_frac(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_conn_prefetch_relax_frac(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enable_api_quotas(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_api_quota_schedule_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_api_quota_schedule_window_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_api_quota_schedule_throw_exception(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_api_quota_schedule_return_failure_result(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::com::android::server::job::ConstantsProto_QuotaController& quota_controller(const ConstantsProto* msg);
  static void set_has_quota_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::ConstantsProto_TimeController& time_controller(const ConstantsProto* msg);
  static void set_has_time_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto& max_job_counts_screen_on(const ConstantsProto* msg);
  static void set_has_max_job_counts_screen_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto& max_job_counts_screen_off(const ConstantsProto* msg);
  static void set_has_max_job_counts_screen_off(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_screen_off_job_concurrency_increase_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::com::android::server::job::ConstantsProto_QuotaController&
ConstantsProto::_Internal::quota_controller(const ConstantsProto* msg) {
  return *msg->quota_controller_;
}
const ::com::android::server::job::ConstantsProto_TimeController&
ConstantsProto::_Internal::time_controller(const ConstantsProto* msg) {
  return *msg->time_controller_;
}
const ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto&
ConstantsProto::_Internal::max_job_counts_screen_on(const ConstantsProto* msg) {
  return *msg->max_job_counts_screen_on_;
}
const ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto&
ConstantsProto::_Internal::max_job_counts_screen_off(const ConstantsProto* msg) {
  return *msg->max_job_counts_screen_off_;
}
ConstantsProto::ConstantsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.ConstantsProto)
}
ConstantsProto::ConstantsProto(const ConstantsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quota_controller()) {
    quota_controller_ = new ::com::android::server::job::ConstantsProto_QuotaController(*from.quota_controller_);
  } else {
    quota_controller_ = nullptr;
  }
  if (from.has_time_controller()) {
    time_controller_ = new ::com::android::server::job::ConstantsProto_TimeController(*from.time_controller_);
  } else {
    time_controller_ = nullptr;
  }
  if (from.has_max_job_counts_screen_on()) {
    max_job_counts_screen_on_ = new ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto(*from.max_job_counts_screen_on_);
  } else {
    max_job_counts_screen_on_ = nullptr;
  }
  if (from.has_max_job_counts_screen_off()) {
    max_job_counts_screen_off_ = new ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto(*from.max_job_counts_screen_off_);
  } else {
    max_job_counts_screen_off_ = nullptr;
  }
  ::memcpy(&heavy_use_factor_, &from.heavy_use_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&api_quota_schedule_window_ms_) -
    reinterpret_cast<char*>(&heavy_use_factor_)) + sizeof(api_quota_schedule_window_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.ConstantsProto)
}

void ConstantsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&quota_controller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&api_quota_schedule_window_ms_) -
      reinterpret_cast<char*>(&quota_controller_)) + sizeof(api_quota_schedule_window_ms_));
}

ConstantsProto::~ConstantsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.ConstantsProto)
  SharedDtor();
}

void ConstantsProto::SharedDtor() {
  if (this != internal_default_instance()) delete quota_controller_;
  if (this != internal_default_instance()) delete time_controller_;
  if (this != internal_default_instance()) delete max_job_counts_screen_on_;
  if (this != internal_default_instance()) delete max_job_counts_screen_off_;
}

void ConstantsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantsProto& ConstantsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void ConstantsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quota_controller_ != nullptr);
      quota_controller_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_controller_ != nullptr);
      time_controller_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(max_job_counts_screen_on_ != nullptr);
      max_job_counts_screen_on_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(max_job_counts_screen_off_ != nullptr);
      max_job_counts_screen_off_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&heavy_use_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bg_normal_job_count_) -
        reinterpret_cast<char*>(&heavy_use_factor_)) + sizeof(bg_normal_job_count_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bg_moderate_job_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conn_prefetch_relax_frac_) -
        reinterpret_cast<char*>(&bg_moderate_job_count_)) + sizeof(conn_prefetch_relax_frac_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&enable_api_quotas_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&api_quota_schedule_window_ms_) -
        reinterpret_cast<char*>(&enable_api_quotas_)) + sizeof(api_quota_schedule_window_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConstantsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double heavy_use_factor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_heavy_use_factor(&has_bits);
          heavy_use_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double moderate_use_factor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_moderate_use_factor(&has_bits);
          moderate_use_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 fg_job_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_fg_job_count(&has_bits);
          fg_job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_normal_job_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_bg_normal_job_count(&has_bits);
          bg_normal_job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_moderate_job_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bg_moderate_job_count(&has_bits);
          bg_moderate_job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_low_job_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bg_low_job_count(&has_bits);
          bg_low_job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_critical_job_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_bg_critical_job_count(&has_bits);
          bg_critical_job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_linear_backoff_time_ms = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_min_linear_backoff_time_ms(&has_bits);
          min_linear_backoff_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_exp_backoff_time_ms = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_min_exp_backoff_time_ms(&has_bits);
          min_exp_backoff_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double conn_congestion_delay_frac = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_conn_congestion_delay_frac(&has_bits);
          conn_congestion_delay_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double conn_prefetch_relax_frac = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_conn_prefetch_relax_frac(&has_bits);
          conn_prefetch_relax_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.ConstantsProto.QuotaController quota_controller = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_quota_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.ConstantsProto.TimeController time_controller = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_time_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_on = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_max_job_counts_screen_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_off = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_max_job_counts_screen_off(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_off_job_concurrency_increase_delay_ms = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_screen_off_job_concurrency_increase_delay_ms(&has_bits);
          screen_off_job_concurrency_increase_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_ready_non_active_jobs_count = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_min_ready_non_active_jobs_count(&has_bits);
          min_ready_non_active_jobs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_non_active_job_batch_delay_ms = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_max_non_active_job_batch_delay_ms(&has_bits);
          max_non_active_job_batch_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_api_quotas = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_enable_api_quotas(&has_bits);
          enable_api_quotas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 api_quota_schedule_count = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_api_quota_schedule_count(&has_bits);
          api_quota_schedule_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 api_quota_schedule_window_ms = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_api_quota_schedule_window_ms(&has_bits);
          api_quota_schedule_window_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool api_quota_schedule_throw_exception = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_api_quota_schedule_throw_exception(&has_bits);
          api_quota_schedule_throw_exception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool api_quota_schedule_return_failure_result = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_api_quota_schedule_return_failure_result(&has_bits);
          api_quota_schedule_return_failure_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConstantsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.ConstantsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double heavy_use_factor = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          _Internal::set_has_heavy_use_factor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heavy_use_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double moderate_use_factor = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {
          _Internal::set_has_moderate_use_factor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &moderate_use_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fg_job_count = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_fg_job_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fg_job_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_normal_job_count = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_bg_normal_job_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_normal_job_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_moderate_job_count = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_bg_moderate_job_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_moderate_job_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_low_job_count = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_bg_low_job_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_low_job_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_critical_job_count = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_bg_critical_job_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_critical_job_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_linear_backoff_time_ms = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_min_linear_backoff_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_linear_backoff_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_exp_backoff_time_ms = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_min_exp_backoff_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_exp_backoff_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double conn_congestion_delay_frac = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (169 & 0xFF)) {
          _Internal::set_has_conn_congestion_delay_frac(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conn_congestion_delay_frac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double conn_prefetch_relax_frac = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (177 & 0xFF)) {
          _Internal::set_has_conn_prefetch_relax_frac(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conn_prefetch_relax_frac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.ConstantsProto.QuotaController quota_controller = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quota_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.ConstantsProto.TimeController time_controller = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_on = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_job_counts_screen_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_off = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_job_counts_screen_off()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_off_job_concurrency_increase_delay_ms = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_screen_off_job_concurrency_increase_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_off_job_concurrency_increase_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_ready_non_active_jobs_count = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_min_ready_non_active_jobs_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_ready_non_active_jobs_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_non_active_job_batch_delay_ms = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_max_non_active_job_batch_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_non_active_job_batch_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_api_quotas = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          _Internal::set_has_enable_api_quotas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_api_quotas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 api_quota_schedule_count = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_api_quota_schedule_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &api_quota_schedule_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 api_quota_schedule_window_ms = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_api_quota_schedule_window_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &api_quota_schedule_window_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool api_quota_schedule_throw_exception = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          _Internal::set_has_api_quota_schedule_throw_exception(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &api_quota_schedule_throw_exception_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool api_quota_schedule_return_failure_result = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          _Internal::set_has_api_quota_schedule_return_failure_result(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &api_quota_schedule_return_failure_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.ConstantsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.ConstantsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConstantsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heavy_use_factor = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->heavy_use_factor(), output);
  }

  // optional double moderate_use_factor = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->moderate_use_factor(), output);
  }

  // optional int32 fg_job_count = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->fg_job_count(), output);
  }

  // optional int32 bg_normal_job_count = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->bg_normal_job_count(), output);
  }

  // optional int32 bg_moderate_job_count = 12;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->bg_moderate_job_count(), output);
  }

  // optional int32 bg_low_job_count = 13;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->bg_low_job_count(), output);
  }

  // optional int32 bg_critical_job_count = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->bg_critical_job_count(), output);
  }

  // optional int64 min_linear_backoff_time_ms = 17;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->min_linear_backoff_time_ms(), output);
  }

  // optional int64 min_exp_backoff_time_ms = 18;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->min_exp_backoff_time_ms(), output);
  }

  // optional double conn_congestion_delay_frac = 21;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(21, this->conn_congestion_delay_frac(), output);
  }

  // optional double conn_prefetch_relax_frac = 22;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(22, this->conn_prefetch_relax_frac(), output);
  }

  // optional .com.android.server.job.ConstantsProto.QuotaController quota_controller = 24;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, _Internal::quota_controller(this), output);
  }

  // optional .com.android.server.job.ConstantsProto.TimeController time_controller = 25;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::time_controller(this), output);
  }

  // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_on = 26;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, _Internal::max_job_counts_screen_on(this), output);
  }

  // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_off = 27;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, _Internal::max_job_counts_screen_off(this), output);
  }

  // optional int32 screen_off_job_concurrency_increase_delay_ms = 28;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->screen_off_job_concurrency_increase_delay_ms(), output);
  }

  // optional int32 min_ready_non_active_jobs_count = 29;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(29, this->min_ready_non_active_jobs_count(), output);
  }

  // optional int64 max_non_active_job_batch_delay_ms = 30;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(30, this->max_non_active_job_batch_delay_ms(), output);
  }

  // optional bool enable_api_quotas = 31;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(31, this->enable_api_quotas(), output);
  }

  // optional int32 api_quota_schedule_count = 32;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(32, this->api_quota_schedule_count(), output);
  }

  // optional int64 api_quota_schedule_window_ms = 33;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(33, this->api_quota_schedule_window_ms(), output);
  }

  // optional bool api_quota_schedule_throw_exception = 34;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->api_quota_schedule_throw_exception(), output);
  }

  // optional bool api_quota_schedule_return_failure_result = 35;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(35, this->api_quota_schedule_return_failure_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.ConstantsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heavy_use_factor = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->heavy_use_factor(), target);
  }

  // optional double moderate_use_factor = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->moderate_use_factor(), target);
  }

  // optional int32 fg_job_count = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->fg_job_count(), target);
  }

  // optional int32 bg_normal_job_count = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->bg_normal_job_count(), target);
  }

  // optional int32 bg_moderate_job_count = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->bg_moderate_job_count(), target);
  }

  // optional int32 bg_low_job_count = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->bg_low_job_count(), target);
  }

  // optional int32 bg_critical_job_count = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->bg_critical_job_count(), target);
  }

  // optional int64 min_linear_backoff_time_ms = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->min_linear_backoff_time_ms(), target);
  }

  // optional int64 min_exp_backoff_time_ms = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->min_exp_backoff_time_ms(), target);
  }

  // optional double conn_congestion_delay_frac = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->conn_congestion_delay_frac(), target);
  }

  // optional double conn_prefetch_relax_frac = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->conn_prefetch_relax_frac(), target);
  }

  // optional .com.android.server.job.ConstantsProto.QuotaController quota_controller = 24;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::quota_controller(this), target);
  }

  // optional .com.android.server.job.ConstantsProto.TimeController time_controller = 25;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::time_controller(this), target);
  }

  // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_on = 26;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::max_job_counts_screen_on(this), target);
  }

  // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_off = 27;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, _Internal::max_job_counts_screen_off(this), target);
  }

  // optional int32 screen_off_job_concurrency_increase_delay_ms = 28;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->screen_off_job_concurrency_increase_delay_ms(), target);
  }

  // optional int32 min_ready_non_active_jobs_count = 29;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->min_ready_non_active_jobs_count(), target);
  }

  // optional int64 max_non_active_job_batch_delay_ms = 30;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->max_non_active_job_batch_delay_ms(), target);
  }

  // optional bool enable_api_quotas = 31;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->enable_api_quotas(), target);
  }

  // optional int32 api_quota_schedule_count = 32;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->api_quota_schedule_count(), target);
  }

  // optional int64 api_quota_schedule_window_ms = 33;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(33, this->api_quota_schedule_window_ms(), target);
  }

  // optional bool api_quota_schedule_throw_exception = 34;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->api_quota_schedule_throw_exception(), target);
  }

  // optional bool api_quota_schedule_return_failure_result = 35;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->api_quota_schedule_return_failure_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.ConstantsProto)
  return target;
}

size_t ConstantsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.ConstantsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.job.ConstantsProto.QuotaController quota_controller = 24;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quota_controller_);
    }

    // optional .com.android.server.job.ConstantsProto.TimeController time_controller = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_controller_);
    }

    // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_on = 26;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_job_counts_screen_on_);
    }

    // optional .com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto max_job_counts_screen_off = 27;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_job_counts_screen_off_);
    }

    // optional double heavy_use_factor = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double moderate_use_factor = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 fg_job_count = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fg_job_count());
    }

    // optional int32 bg_normal_job_count = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_normal_job_count());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 bg_moderate_job_count = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_moderate_job_count());
    }

    // optional int32 bg_low_job_count = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_low_job_count());
    }

    // optional int64 min_linear_backoff_time_ms = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_linear_backoff_time_ms());
    }

    // optional int64 min_exp_backoff_time_ms = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_exp_backoff_time_ms());
    }

    // optional double conn_congestion_delay_frac = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional int32 bg_critical_job_count = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_critical_job_count());
    }

    // optional int32 screen_off_job_concurrency_increase_delay_ms = 28;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_off_job_concurrency_increase_delay_ms());
    }

    // optional double conn_prefetch_relax_frac = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool enable_api_quotas = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool api_quota_schedule_throw_exception = 34;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool api_quota_schedule_return_failure_result = 35;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int64 max_non_active_job_batch_delay_ms = 30;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_non_active_job_batch_delay_ms());
    }

    // optional int32 min_ready_non_active_jobs_count = 29;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->min_ready_non_active_jobs_count());
    }

    // optional int32 api_quota_schedule_count = 32;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->api_quota_schedule_count());
    }

    // optional int64 api_quota_schedule_window_ms = 33;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->api_quota_schedule_window_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.ConstantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.ConstantsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.ConstantsProto)
    MergeFrom(*source);
  }
}

void ConstantsProto::MergeFrom(const ConstantsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.ConstantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quota_controller()->::com::android::server::job::ConstantsProto_QuotaController::MergeFrom(from.quota_controller());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_controller()->::com::android::server::job::ConstantsProto_TimeController::MergeFrom(from.time_controller());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_max_job_counts_screen_on()->::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto::MergeFrom(from.max_job_counts_screen_on());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_max_job_counts_screen_off()->::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto::MergeFrom(from.max_job_counts_screen_off());
    }
    if (cached_has_bits & 0x00000010u) {
      heavy_use_factor_ = from.heavy_use_factor_;
    }
    if (cached_has_bits & 0x00000020u) {
      moderate_use_factor_ = from.moderate_use_factor_;
    }
    if (cached_has_bits & 0x00000040u) {
      fg_job_count_ = from.fg_job_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      bg_normal_job_count_ = from.bg_normal_job_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bg_moderate_job_count_ = from.bg_moderate_job_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      bg_low_job_count_ = from.bg_low_job_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_linear_backoff_time_ms_ = from.min_linear_backoff_time_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_exp_backoff_time_ms_ = from.min_exp_backoff_time_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      conn_congestion_delay_frac_ = from.conn_congestion_delay_frac_;
    }
    if (cached_has_bits & 0x00002000u) {
      bg_critical_job_count_ = from.bg_critical_job_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      screen_off_job_concurrency_increase_delay_ms_ = from.screen_off_job_concurrency_increase_delay_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      conn_prefetch_relax_frac_ = from.conn_prefetch_relax_frac_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      enable_api_quotas_ = from.enable_api_quotas_;
    }
    if (cached_has_bits & 0x00020000u) {
      api_quota_schedule_throw_exception_ = from.api_quota_schedule_throw_exception_;
    }
    if (cached_has_bits & 0x00040000u) {
      api_quota_schedule_return_failure_result_ = from.api_quota_schedule_return_failure_result_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_non_active_job_batch_delay_ms_ = from.max_non_active_job_batch_delay_ms_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_ready_non_active_jobs_count_ = from.min_ready_non_active_jobs_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      api_quota_schedule_count_ = from.api_quota_schedule_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      api_quota_schedule_window_ms_ = from.api_quota_schedule_window_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConstantsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.ConstantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantsProto::CopyFrom(const ConstantsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.ConstantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantsProto::IsInitialized() const {
  return true;
}

void ConstantsProto::InternalSwap(ConstantsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quota_controller_, other->quota_controller_);
  swap(time_controller_, other->time_controller_);
  swap(max_job_counts_screen_on_, other->max_job_counts_screen_on_);
  swap(max_job_counts_screen_off_, other->max_job_counts_screen_off_);
  swap(heavy_use_factor_, other->heavy_use_factor_);
  swap(moderate_use_factor_, other->moderate_use_factor_);
  swap(fg_job_count_, other->fg_job_count_);
  swap(bg_normal_job_count_, other->bg_normal_job_count_);
  swap(bg_moderate_job_count_, other->bg_moderate_job_count_);
  swap(bg_low_job_count_, other->bg_low_job_count_);
  swap(min_linear_backoff_time_ms_, other->min_linear_backoff_time_ms_);
  swap(min_exp_backoff_time_ms_, other->min_exp_backoff_time_ms_);
  swap(conn_congestion_delay_frac_, other->conn_congestion_delay_frac_);
  swap(bg_critical_job_count_, other->bg_critical_job_count_);
  swap(screen_off_job_concurrency_increase_delay_ms_, other->screen_off_job_concurrency_increase_delay_ms_);
  swap(conn_prefetch_relax_frac_, other->conn_prefetch_relax_frac_);
  swap(enable_api_quotas_, other->enable_api_quotas_);
  swap(api_quota_schedule_throw_exception_, other->api_quota_schedule_throw_exception_);
  swap(api_quota_schedule_return_failure_result_, other->api_quota_schedule_return_failure_result_);
  swap(max_non_active_job_batch_delay_ms_, other->max_non_active_job_batch_delay_ms_);
  swap(min_ready_non_active_jobs_count_, other->min_ready_non_active_jobs_count_);
  swap(api_quota_schedule_count_, other->api_quota_schedule_count_);
  swap(api_quota_schedule_window_ms_, other->api_quota_schedule_window_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaxJobCountsProto::InitAsDefaultInstance() {
}
class MaxJobCountsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MaxJobCountsProto>()._has_bits_);
  static void set_has_total_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_bg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_bg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaxJobCountsProto::MaxJobCountsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.MaxJobCountsProto)
}
MaxJobCountsProto::MaxJobCountsProto(const MaxJobCountsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_jobs_, &from.total_jobs_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_bg_) -
    reinterpret_cast<char*>(&total_jobs_)) + sizeof(min_bg_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.MaxJobCountsProto)
}

void MaxJobCountsProto::SharedCtor() {
  ::memset(&total_jobs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bg_) -
      reinterpret_cast<char*>(&total_jobs_)) + sizeof(min_bg_));
}

MaxJobCountsProto::~MaxJobCountsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.MaxJobCountsProto)
  SharedDtor();
}

void MaxJobCountsProto::SharedDtor() {
}

void MaxJobCountsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaxJobCountsProto& MaxJobCountsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaxJobCountsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void MaxJobCountsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.MaxJobCountsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&total_jobs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_bg_) -
        reinterpret_cast<char*>(&total_jobs_)) + sizeof(min_bg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MaxJobCountsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 total_jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total_jobs(&has_bits);
          total_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_bg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_bg(&has_bits);
          max_bg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_bg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_bg(&has_bits);
          min_bg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MaxJobCountsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.MaxJobCountsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_jobs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_total_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_bg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_bg(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_bg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_min_bg(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_bg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.MaxJobCountsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.MaxJobCountsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MaxJobCountsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.MaxJobCountsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total_jobs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->total_jobs(), output);
  }

  // optional int32 max_bg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_bg(), output);
  }

  // optional int32 min_bg = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->min_bg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.MaxJobCountsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxJobCountsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.MaxJobCountsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total_jobs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->total_jobs(), target);
  }

  // optional int32 max_bg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->max_bg(), target);
  }

  // optional int32 min_bg = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->min_bg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.MaxJobCountsProto)
  return target;
}

size_t MaxJobCountsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.MaxJobCountsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 total_jobs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_jobs());
    }

    // optional int32 max_bg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_bg());
    }

    // optional int32 min_bg = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->min_bg());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxJobCountsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.MaxJobCountsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxJobCountsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaxJobCountsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.MaxJobCountsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.MaxJobCountsProto)
    MergeFrom(*source);
  }
}

void MaxJobCountsProto::MergeFrom(const MaxJobCountsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.MaxJobCountsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      total_jobs_ = from.total_jobs_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_bg_ = from.max_bg_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_bg_ = from.min_bg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaxJobCountsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.MaxJobCountsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxJobCountsProto::CopyFrom(const MaxJobCountsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.MaxJobCountsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxJobCountsProto::IsInitialized() const {
  return true;
}

void MaxJobCountsProto::InternalSwap(MaxJobCountsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_jobs_, other->total_jobs_);
  swap(max_bg_, other->max_bg_);
  swap(min_bg_, other->min_bg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxJobCountsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaxJobCountsPerMemoryTrimLevelProto::InitAsDefaultInstance() {
  ::com::android::server::job::_MaxJobCountsPerMemoryTrimLevelProto_default_instance_._instance.get_mutable()->normal_ = const_cast< ::com::android::server::job::MaxJobCountsProto*>(
      ::com::android::server::job::MaxJobCountsProto::internal_default_instance());
  ::com::android::server::job::_MaxJobCountsPerMemoryTrimLevelProto_default_instance_._instance.get_mutable()->moderate_ = const_cast< ::com::android::server::job::MaxJobCountsProto*>(
      ::com::android::server::job::MaxJobCountsProto::internal_default_instance());
  ::com::android::server::job::_MaxJobCountsPerMemoryTrimLevelProto_default_instance_._instance.get_mutable()->low_ = const_cast< ::com::android::server::job::MaxJobCountsProto*>(
      ::com::android::server::job::MaxJobCountsProto::internal_default_instance());
  ::com::android::server::job::_MaxJobCountsPerMemoryTrimLevelProto_default_instance_._instance.get_mutable()->critical_ = const_cast< ::com::android::server::job::MaxJobCountsProto*>(
      ::com::android::server::job::MaxJobCountsProto::internal_default_instance());
}
class MaxJobCountsPerMemoryTrimLevelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MaxJobCountsPerMemoryTrimLevelProto>()._has_bits_);
  static const ::com::android::server::job::MaxJobCountsProto& normal(const MaxJobCountsPerMemoryTrimLevelProto* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::MaxJobCountsProto& moderate(const MaxJobCountsPerMemoryTrimLevelProto* msg);
  static void set_has_moderate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::MaxJobCountsProto& low(const MaxJobCountsPerMemoryTrimLevelProto* msg);
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::job::MaxJobCountsProto& critical(const MaxJobCountsPerMemoryTrimLevelProto* msg);
  static void set_has_critical(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::job::MaxJobCountsProto&
MaxJobCountsPerMemoryTrimLevelProto::_Internal::normal(const MaxJobCountsPerMemoryTrimLevelProto* msg) {
  return *msg->normal_;
}
const ::com::android::server::job::MaxJobCountsProto&
MaxJobCountsPerMemoryTrimLevelProto::_Internal::moderate(const MaxJobCountsPerMemoryTrimLevelProto* msg) {
  return *msg->moderate_;
}
const ::com::android::server::job::MaxJobCountsProto&
MaxJobCountsPerMemoryTrimLevelProto::_Internal::low(const MaxJobCountsPerMemoryTrimLevelProto* msg) {
  return *msg->low_;
}
const ::com::android::server::job::MaxJobCountsProto&
MaxJobCountsPerMemoryTrimLevelProto::_Internal::critical(const MaxJobCountsPerMemoryTrimLevelProto* msg) {
  return *msg->critical_;
}
MaxJobCountsPerMemoryTrimLevelProto::MaxJobCountsPerMemoryTrimLevelProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
}
MaxJobCountsPerMemoryTrimLevelProto::MaxJobCountsPerMemoryTrimLevelProto(const MaxJobCountsPerMemoryTrimLevelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_normal()) {
    normal_ = new ::com::android::server::job::MaxJobCountsProto(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  if (from.has_moderate()) {
    moderate_ = new ::com::android::server::job::MaxJobCountsProto(*from.moderate_);
  } else {
    moderate_ = nullptr;
  }
  if (from.has_low()) {
    low_ = new ::com::android::server::job::MaxJobCountsProto(*from.low_);
  } else {
    low_ = nullptr;
  }
  if (from.has_critical()) {
    critical_ = new ::com::android::server::job::MaxJobCountsProto(*from.critical_);
  } else {
    critical_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
}

void MaxJobCountsPerMemoryTrimLevelProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&normal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&critical_) -
      reinterpret_cast<char*>(&normal_)) + sizeof(critical_));
}

MaxJobCountsPerMemoryTrimLevelProto::~MaxJobCountsPerMemoryTrimLevelProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  SharedDtor();
}

void MaxJobCountsPerMemoryTrimLevelProto::SharedDtor() {
  if (this != internal_default_instance()) delete normal_;
  if (this != internal_default_instance()) delete moderate_;
  if (this != internal_default_instance()) delete low_;
  if (this != internal_default_instance()) delete critical_;
}

void MaxJobCountsPerMemoryTrimLevelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaxJobCountsPerMemoryTrimLevelProto& MaxJobCountsPerMemoryTrimLevelProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaxJobCountsPerMemoryTrimLevelProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void MaxJobCountsPerMemoryTrimLevelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(moderate_ != nullptr);
      moderate_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(low_ != nullptr);
      low_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(critical_ != nullptr);
      critical_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MaxJobCountsPerMemoryTrimLevelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.MaxJobCountsProto normal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.MaxJobCountsProto moderate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_moderate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.MaxJobCountsProto low = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_low(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.MaxJobCountsProto critical = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_critical(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MaxJobCountsPerMemoryTrimLevelProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.MaxJobCountsProto normal = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.MaxJobCountsProto moderate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_moderate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.MaxJobCountsProto low = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.MaxJobCountsProto critical = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_critical()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MaxJobCountsPerMemoryTrimLevelProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.MaxJobCountsProto normal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::normal(this), output);
  }

  // optional .com.android.server.job.MaxJobCountsProto moderate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::moderate(this), output);
  }

  // optional .com.android.server.job.MaxJobCountsProto low = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::low(this), output);
  }

  // optional .com.android.server.job.MaxJobCountsProto critical = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::critical(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxJobCountsPerMemoryTrimLevelProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.MaxJobCountsProto normal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::normal(this), target);
  }

  // optional .com.android.server.job.MaxJobCountsProto moderate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::moderate(this), target);
  }

  // optional .com.android.server.job.MaxJobCountsProto low = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::low(this), target);
  }

  // optional .com.android.server.job.MaxJobCountsProto critical = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::critical(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  return target;
}

size_t MaxJobCountsPerMemoryTrimLevelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.job.MaxJobCountsProto normal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional .com.android.server.job.MaxJobCountsProto moderate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *moderate_);
    }

    // optional .com.android.server.job.MaxJobCountsProto low = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_);
    }

    // optional .com.android.server.job.MaxJobCountsProto critical = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *critical_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxJobCountsPerMemoryTrimLevelProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxJobCountsPerMemoryTrimLevelProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaxJobCountsPerMemoryTrimLevelProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
    MergeFrom(*source);
  }
}

void MaxJobCountsPerMemoryTrimLevelProto::MergeFrom(const MaxJobCountsPerMemoryTrimLevelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_normal()->::com::android::server::job::MaxJobCountsProto::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_moderate()->::com::android::server::job::MaxJobCountsProto::MergeFrom(from.moderate());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_low()->::com::android::server::job::MaxJobCountsProto::MergeFrom(from.low());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_critical()->::com::android::server::job::MaxJobCountsProto::MergeFrom(from.critical());
    }
  }
}

void MaxJobCountsPerMemoryTrimLevelProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxJobCountsPerMemoryTrimLevelProto::CopyFrom(const MaxJobCountsPerMemoryTrimLevelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.MaxJobCountsPerMemoryTrimLevelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxJobCountsPerMemoryTrimLevelProto::IsInitialized() const {
  return true;
}

void MaxJobCountsPerMemoryTrimLevelProto::InternalSwap(MaxJobCountsPerMemoryTrimLevelProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(normal_, other->normal_);
  swap(moderate_, other->moderate_);
  swap(low_, other->low_);
  swap(critical_, other->critical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxJobCountsPerMemoryTrimLevelProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_BackgroundJobsController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_BackgroundJobsController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_BackgroundJobsController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_BackgroundJobsController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_BackgroundJobsController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_in_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_whitelisted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_run_any_in_background(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_are_constraints_satisfied(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_BackgroundJobsController_TrackedJob::_Internal::info(const StateControllerProto_BackgroundJobsController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_BackgroundJobsController_TrackedJob::StateControllerProto_BackgroundJobsController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
}
StateControllerProto_BackgroundJobsController_TrackedJob::StateControllerProto_BackgroundJobsController_TrackedJob(const StateControllerProto_BackgroundJobsController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_package_name()) {
    source_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_package_name_);
  }
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&source_uid_, &from.source_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&are_constraints_satisfied_) -
    reinterpret_cast<char*>(&source_uid_)) + sizeof(are_constraints_satisfied_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
}

void StateControllerProto_BackgroundJobsController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  source_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&are_constraints_satisfied_) -
      reinterpret_cast<char*>(&info_)) + sizeof(are_constraints_satisfied_));
}

StateControllerProto_BackgroundJobsController_TrackedJob::~StateControllerProto_BackgroundJobsController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_BackgroundJobsController_TrackedJob::SharedDtor() {
  source_package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_BackgroundJobsController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_BackgroundJobsController_TrackedJob& StateControllerProto_BackgroundJobsController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_BackgroundJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_BackgroundJobsController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&source_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&are_constraints_satisfied_) -
        reinterpret_cast<char*>(&source_uid_)) + sizeof(are_constraints_satisfied_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_BackgroundJobsController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source_package_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_source_package_name(), ptr, ctx, "com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob.source_package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_foreground = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_in_foreground(&has_bits);
          is_in_foreground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_whitelisted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_whitelisted(&has_bits);
          is_whitelisted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_run_any_in_background = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_run_any_in_background(&has_bits);
          can_run_any_in_background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_constraints_satisfied = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_are_constraints_satisfied(&has_bits);
          are_constraints_satisfied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_BackgroundJobsController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_package_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob.source_package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_in_foreground = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_in_foreground(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_foreground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_whitelisted = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_whitelisted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_whitelisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_run_any_in_background = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_can_run_any_in_background(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_run_any_in_background_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_constraints_satisfied = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_are_constraints_satisfied(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_constraints_satisfied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_BackgroundJobsController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  // optional string source_package_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob.source_package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_package_name(), output);
  }

  // optional bool is_in_foreground = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_in_foreground(), output);
  }

  // optional bool is_whitelisted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_whitelisted(), output);
  }

  // optional bool can_run_any_in_background = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->can_run_any_in_background(), output);
  }

  // optional bool are_constraints_satisfied = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->are_constraints_satisfied(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_BackgroundJobsController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  // optional string source_package_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob.source_package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->source_package_name(), target);
  }

  // optional bool is_in_foreground = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_in_foreground(), target);
  }

  // optional bool is_whitelisted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_whitelisted(), target);
  }

  // optional bool can_run_any_in_background = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->can_run_any_in_background(), target);
  }

  // optional bool are_constraints_satisfied = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->are_constraints_satisfied(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  return target;
}

size_t StateControllerProto_BackgroundJobsController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string source_package_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->source_package_name());
    }

    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

    // optional bool is_in_foreground = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_whitelisted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool can_run_any_in_background = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool are_constraints_satisfied = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_BackgroundJobsController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_BackgroundJobsController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_BackgroundJobsController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_BackgroundJobsController_TrackedJob::MergeFrom(const StateControllerProto_BackgroundJobsController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      source_uid_ = from.source_uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_in_foreground_ = from.is_in_foreground_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_whitelisted_ = from.is_whitelisted_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_run_any_in_background_ = from.can_run_any_in_background_;
    }
    if (cached_has_bits & 0x00000040u) {
      are_constraints_satisfied_ = from.are_constraints_satisfied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_BackgroundJobsController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_BackgroundJobsController_TrackedJob::CopyFrom(const StateControllerProto_BackgroundJobsController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_BackgroundJobsController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_BackgroundJobsController_TrackedJob::InternalSwap(StateControllerProto_BackgroundJobsController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_package_name_.Swap(&other->source_package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
  swap(is_in_foreground_, other->is_in_foreground_);
  swap(is_whitelisted_, other->is_whitelisted_);
  swap(can_run_any_in_background_, other->can_run_any_in_background_);
  swap(are_constraints_satisfied_, other->are_constraints_satisfied_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_BackgroundJobsController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_BackgroundJobsController::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_BackgroundJobsController_default_instance_._instance.get_mutable()->app_state_tracker_ = const_cast< ::com::android::server::AppStateTrackerProto*>(
      ::com::android::server::AppStateTrackerProto::internal_default_instance());
}
class StateControllerProto_BackgroundJobsController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_BackgroundJobsController>()._has_bits_);
  static const ::com::android::server::AppStateTrackerProto& app_state_tracker(const StateControllerProto_BackgroundJobsController* msg);
  static void set_has_app_state_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::AppStateTrackerProto&
StateControllerProto_BackgroundJobsController::_Internal::app_state_tracker(const StateControllerProto_BackgroundJobsController* msg) {
  return *msg->app_state_tracker_;
}
void StateControllerProto_BackgroundJobsController::clear_app_state_tracker() {
  if (app_state_tracker_ != nullptr) app_state_tracker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StateControllerProto_BackgroundJobsController::StateControllerProto_BackgroundJobsController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.BackgroundJobsController)
}
StateControllerProto_BackgroundJobsController::StateControllerProto_BackgroundJobsController(const StateControllerProto_BackgroundJobsController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_app_state_tracker()) {
    app_state_tracker_ = new ::com::android::server::AppStateTrackerProto(*from.app_state_tracker_);
  } else {
    app_state_tracker_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.BackgroundJobsController)
}

void StateControllerProto_BackgroundJobsController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  app_state_tracker_ = nullptr;
}

StateControllerProto_BackgroundJobsController::~StateControllerProto_BackgroundJobsController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.BackgroundJobsController)
  SharedDtor();
}

void StateControllerProto_BackgroundJobsController::SharedDtor() {
  if (this != internal_default_instance()) delete app_state_tracker_;
}

void StateControllerProto_BackgroundJobsController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_BackgroundJobsController& StateControllerProto_BackgroundJobsController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_BackgroundJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_BackgroundJobsController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(app_state_tracker_ != nullptr);
    app_state_tracker_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_BackgroundJobsController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.AppStateTrackerProto app_state_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_app_state_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob tracked_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_BackgroundJobsController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.AppStateTrackerProto app_state_tracker = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_state_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob tracked_jobs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.BackgroundJobsController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.BackgroundJobsController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_BackgroundJobsController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.AppStateTrackerProto app_state_tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::app_state_tracker(this), output);
  }

  // repeated .com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.BackgroundJobsController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_BackgroundJobsController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.AppStateTrackerProto app_state_tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::app_state_tracker(this), target);
  }

  // repeated .com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tracked_jobs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.BackgroundJobsController)
  return target;
}

size_t StateControllerProto_BackgroundJobsController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.BackgroundJobsController.TrackedJob tracked_jobs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  // optional .com.android.server.AppStateTrackerProto app_state_tracker = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_state_tracker_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_BackgroundJobsController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_BackgroundJobsController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_BackgroundJobsController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.BackgroundJobsController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.BackgroundJobsController)
    MergeFrom(*source);
  }
}

void StateControllerProto_BackgroundJobsController::MergeFrom(const StateControllerProto_BackgroundJobsController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  if (from.has_app_state_tracker()) {
    mutable_app_state_tracker()->::com::android::server::AppStateTrackerProto::MergeFrom(from.app_state_tracker());
  }
}

void StateControllerProto_BackgroundJobsController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_BackgroundJobsController::CopyFrom(const StateControllerProto_BackgroundJobsController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.BackgroundJobsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_BackgroundJobsController::IsInitialized() const {
  return true;
}

void StateControllerProto_BackgroundJobsController::InternalSwap(StateControllerProto_BackgroundJobsController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  swap(app_state_tracker_, other->app_state_tracker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_BackgroundJobsController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_BatteryController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_BatteryController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_BatteryController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_BatteryController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_BatteryController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_BatteryController_TrackedJob::_Internal::info(const StateControllerProto_BatteryController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_BatteryController_TrackedJob::StateControllerProto_BatteryController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
}
StateControllerProto_BatteryController_TrackedJob::StateControllerProto_BatteryController_TrackedJob(const StateControllerProto_BatteryController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  source_uid_ = from.source_uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
}

void StateControllerProto_BatteryController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_uid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(source_uid_));
}

StateControllerProto_BatteryController_TrackedJob::~StateControllerProto_BatteryController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_BatteryController_TrackedJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_BatteryController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_BatteryController_TrackedJob& StateControllerProto_BatteryController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_BatteryController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_BatteryController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  source_uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_BatteryController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_BatteryController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_BatteryController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_BatteryController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  return target;
}

size_t StateControllerProto_BatteryController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_BatteryController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_BatteryController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_BatteryController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_BatteryController_TrackedJob::MergeFrom(const StateControllerProto_BatteryController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      source_uid_ = from.source_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_BatteryController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_BatteryController_TrackedJob::CopyFrom(const StateControllerProto_BatteryController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.BatteryController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_BatteryController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_BatteryController_TrackedJob::InternalSwap(StateControllerProto_BatteryController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_BatteryController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_BatteryController::InitAsDefaultInstance() {
}
class StateControllerProto_BatteryController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_BatteryController>()._has_bits_);
  static void set_has_is_on_stable_power(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_battery_not_low(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_monitoring(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_broadcast_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

StateControllerProto_BatteryController::StateControllerProto_BatteryController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.BatteryController)
}
StateControllerProto_BatteryController::StateControllerProto_BatteryController(const StateControllerProto_BatteryController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_on_stable_power_, &from.is_on_stable_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_broadcast_sequence_number_) -
    reinterpret_cast<char*>(&is_on_stable_power_)) + sizeof(last_broadcast_sequence_number_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.BatteryController)
}

void StateControllerProto_BatteryController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&is_on_stable_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_broadcast_sequence_number_) -
      reinterpret_cast<char*>(&is_on_stable_power_)) + sizeof(last_broadcast_sequence_number_));
}

StateControllerProto_BatteryController::~StateControllerProto_BatteryController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.BatteryController)
  SharedDtor();
}

void StateControllerProto_BatteryController::SharedDtor() {
}

void StateControllerProto_BatteryController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_BatteryController& StateControllerProto_BatteryController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_BatteryController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_BatteryController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.BatteryController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&is_on_stable_power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_broadcast_sequence_number_) -
        reinterpret_cast<char*>(&is_on_stable_power_)) + sizeof(last_broadcast_sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_BatteryController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_on_stable_power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_on_stable_power(&has_bits);
          is_on_stable_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_battery_not_low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_battery_not_low(&has_bits);
          is_battery_not_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_monitoring = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_monitoring(&has_bits);
          is_monitoring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_broadcast_sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_broadcast_sequence_number(&has_bits);
          last_broadcast_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.BatteryController.TrackedJob tracked_jobs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_BatteryController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.BatteryController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_on_stable_power = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_on_stable_power(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_stable_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_battery_not_low = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_battery_not_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_battery_not_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_monitoring = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_monitoring(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_monitoring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_broadcast_sequence_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_broadcast_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_broadcast_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.BatteryController.TrackedJob tracked_jobs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.BatteryController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.BatteryController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_BatteryController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.BatteryController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_on_stable_power = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_on_stable_power(), output);
  }

  // optional bool is_battery_not_low = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_battery_not_low(), output);
  }

  // optional bool is_monitoring = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_monitoring(), output);
  }

  // optional int32 last_broadcast_sequence_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->last_broadcast_sequence_number(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.BatteryController.TrackedJob tracked_jobs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.BatteryController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_BatteryController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.BatteryController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_on_stable_power = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_on_stable_power(), target);
  }

  // optional bool is_battery_not_low = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_battery_not_low(), target);
  }

  // optional bool is_monitoring = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_monitoring(), target);
  }

  // optional int32 last_broadcast_sequence_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->last_broadcast_sequence_number(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.BatteryController.TrackedJob tracked_jobs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->tracked_jobs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.BatteryController)
  return target;
}

size_t StateControllerProto_BatteryController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.BatteryController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.BatteryController.TrackedJob tracked_jobs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool is_on_stable_power = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_battery_not_low = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_monitoring = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 last_broadcast_sequence_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_broadcast_sequence_number());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_BatteryController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.BatteryController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_BatteryController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_BatteryController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.BatteryController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.BatteryController)
    MergeFrom(*source);
  }
}

void StateControllerProto_BatteryController::MergeFrom(const StateControllerProto_BatteryController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.BatteryController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      is_on_stable_power_ = from.is_on_stable_power_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_battery_not_low_ = from.is_battery_not_low_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_monitoring_ = from.is_monitoring_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_broadcast_sequence_number_ = from.last_broadcast_sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_BatteryController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.BatteryController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_BatteryController::CopyFrom(const StateControllerProto_BatteryController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.BatteryController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_BatteryController::IsInitialized() const {
  return true;
}

void StateControllerProto_BatteryController::InternalSwap(StateControllerProto_BatteryController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  swap(is_on_stable_power_, other->is_on_stable_power_);
  swap(is_battery_not_low_, other->is_battery_not_low_);
  swap(is_monitoring_, other->is_monitoring_);
  swap(last_broadcast_sequence_number_, other->last_broadcast_sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_BatteryController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_ConnectivityController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_ConnectivityController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_ConnectivityController_TrackedJob_default_instance_._instance.get_mutable()->required_network_ = const_cast< ::android::net::NetworkRequestProto*>(
      ::android::net::NetworkRequestProto::internal_default_instance());
}
class StateControllerProto_ConnectivityController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_ConnectivityController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_ConnectivityController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::net::NetworkRequestProto& required_network(const StateControllerProto_ConnectivityController_TrackedJob* msg);
  static void set_has_required_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_ConnectivityController_TrackedJob::_Internal::info(const StateControllerProto_ConnectivityController_TrackedJob* msg) {
  return *msg->info_;
}
const ::android::net::NetworkRequestProto&
StateControllerProto_ConnectivityController_TrackedJob::_Internal::required_network(const StateControllerProto_ConnectivityController_TrackedJob* msg) {
  return *msg->required_network_;
}
void StateControllerProto_ConnectivityController_TrackedJob::clear_required_network() {
  if (required_network_ != nullptr) required_network_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StateControllerProto_ConnectivityController_TrackedJob::StateControllerProto_ConnectivityController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
}
StateControllerProto_ConnectivityController_TrackedJob::StateControllerProto_ConnectivityController_TrackedJob(const StateControllerProto_ConnectivityController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from.has_required_network()) {
    required_network_ = new ::android::net::NetworkRequestProto(*from.required_network_);
  } else {
    required_network_ = nullptr;
  }
  source_uid_ = from.source_uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
}

void StateControllerProto_ConnectivityController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_uid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(source_uid_));
}

StateControllerProto_ConnectivityController_TrackedJob::~StateControllerProto_ConnectivityController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_ConnectivityController_TrackedJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete required_network_;
}

void StateControllerProto_ConnectivityController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_ConnectivityController_TrackedJob& StateControllerProto_ConnectivityController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_ConnectivityController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_ConnectivityController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(required_network_ != nullptr);
      required_network_->Clear();
    }
  }
  source_uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_ConnectivityController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.net.NetworkRequestProto required_network = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_required_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_ConnectivityController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.net.NetworkRequestProto required_network = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_required_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_ConnectivityController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  // optional .android.net.NetworkRequestProto required_network = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::required_network(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_ConnectivityController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  // optional .android.net.NetworkRequestProto required_network = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::required_network(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  return target;
}

size_t StateControllerProto_ConnectivityController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .android.net.NetworkRequestProto required_network = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *required_network_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_ConnectivityController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_ConnectivityController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_ConnectivityController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_ConnectivityController_TrackedJob::MergeFrom(const StateControllerProto_ConnectivityController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_required_network()->::android::net::NetworkRequestProto::MergeFrom(from.required_network());
    }
    if (cached_has_bits & 0x00000004u) {
      source_uid_ = from.source_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_ConnectivityController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_ConnectivityController_TrackedJob::CopyFrom(const StateControllerProto_ConnectivityController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_ConnectivityController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_ConnectivityController_TrackedJob::InternalSwap(StateControllerProto_ConnectivityController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(required_network_, other->required_network_);
  swap(source_uid_, other->source_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_ConnectivityController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_ConnectivityController::InitAsDefaultInstance() {
}
class StateControllerProto_ConnectivityController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_ConnectivityController>()._has_bits_);
};

void StateControllerProto_ConnectivityController::clear_available_networks() {
  available_networks_.Clear();
}
StateControllerProto_ConnectivityController::StateControllerProto_ConnectivityController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.ConnectivityController)
}
StateControllerProto_ConnectivityController::StateControllerProto_ConnectivityController(const StateControllerProto_ConnectivityController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_),
      requested_standby_exception_uids_(from.requested_standby_exception_uids_),
      available_networks_(from.available_networks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.ConnectivityController)
}

void StateControllerProto_ConnectivityController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
}

StateControllerProto_ConnectivityController::~StateControllerProto_ConnectivityController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.ConnectivityController)
  SharedDtor();
}

void StateControllerProto_ConnectivityController::SharedDtor() {
}

void StateControllerProto_ConnectivityController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_ConnectivityController& StateControllerProto_ConnectivityController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_ConnectivityController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_ConnectivityController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.ConnectivityController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  requested_standby_exception_uids_.Clear();
  available_networks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_ConnectivityController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob tracked_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated int32 requested_standby_exception_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_requested_standby_exception_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_requested_standby_exception_uids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.net.NetworkProto available_networks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_available_networks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_ConnectivityController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.ConnectivityController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob tracked_jobs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 requested_standby_exception_uids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_requested_standby_exception_uids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_requested_standby_exception_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.net.NetworkProto available_networks = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_available_networks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.ConnectivityController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.ConnectivityController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_ConnectivityController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.ConnectivityController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  // repeated int32 requested_standby_exception_uids = 3;
  for (int i = 0, n = this->requested_standby_exception_uids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->requested_standby_exception_uids(i), output);
  }

  // repeated .android.net.NetworkProto available_networks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->available_networks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->available_networks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.ConnectivityController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_ConnectivityController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.ConnectivityController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tracked_jobs(static_cast<int>(i)), target);
  }

  // repeated int32 requested_standby_exception_uids = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(3, this->requested_standby_exception_uids_, target);

  // repeated .android.net.NetworkProto available_networks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->available_networks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->available_networks(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.ConnectivityController)
  return target;
}

size_t StateControllerProto_ConnectivityController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.ConnectivityController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ConnectivityController.TrackedJob tracked_jobs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  // repeated int32 requested_standby_exception_uids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->requested_standby_exception_uids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->requested_standby_exception_uids_size());
    total_size += data_size;
  }

  // repeated .android.net.NetworkProto available_networks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->available_networks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->available_networks(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_ConnectivityController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.ConnectivityController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_ConnectivityController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_ConnectivityController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.ConnectivityController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.ConnectivityController)
    MergeFrom(*source);
  }
}

void StateControllerProto_ConnectivityController::MergeFrom(const StateControllerProto_ConnectivityController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.ConnectivityController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  requested_standby_exception_uids_.MergeFrom(from.requested_standby_exception_uids_);
  available_networks_.MergeFrom(from.available_networks_);
}

void StateControllerProto_ConnectivityController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.ConnectivityController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_ConnectivityController::CopyFrom(const StateControllerProto_ConnectivityController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.ConnectivityController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_ConnectivityController::IsInitialized() const {
  return true;
}

void StateControllerProto_ConnectivityController::InternalSwap(StateControllerProto_ConnectivityController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  requested_standby_exception_uids_.InternalSwap(&other->requested_standby_exception_uids_);
  CastToBase(&available_networks_)->InternalSwap(CastToBase(&other->available_networks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_ConnectivityController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_ContentObserverController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_ContentObserverController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_ContentObserverController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_ContentObserverController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_ContentObserverController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_ContentObserverController_TrackedJob::_Internal::info(const StateControllerProto_ContentObserverController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_ContentObserverController_TrackedJob::StateControllerProto_ContentObserverController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
}
StateControllerProto_ContentObserverController_TrackedJob::StateControllerProto_ContentObserverController_TrackedJob(const StateControllerProto_ContentObserverController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  source_uid_ = from.source_uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
}

void StateControllerProto_ContentObserverController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_uid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(source_uid_));
}

StateControllerProto_ContentObserverController_TrackedJob::~StateControllerProto_ContentObserverController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_ContentObserverController_TrackedJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_ContentObserverController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_ContentObserverController_TrackedJob& StateControllerProto_ContentObserverController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_ContentObserverController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_ContentObserverController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  source_uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_ContentObserverController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_ContentObserverController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_ContentObserverController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_ContentObserverController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  return target;
}

size_t StateControllerProto_ContentObserverController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_ContentObserverController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_ContentObserverController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_ContentObserverController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_ContentObserverController_TrackedJob::MergeFrom(const StateControllerProto_ContentObserverController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      source_uid_ = from.source_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_ContentObserverController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_ContentObserverController_TrackedJob::CopyFrom(const StateControllerProto_ContentObserverController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_ContentObserverController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_ContentObserverController_TrackedJob::InternalSwap(StateControllerProto_ContentObserverController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_ContentObserverController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trigger_content_update_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trigger_content_max_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::_Internal::info(const StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance* msg) {
  return *msg->info_;
}
StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
}
StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance(const StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      changed_authorities_(from.changed_authorities_),
      changed_uris_(from.changed_uris_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&trigger_content_update_delay_ms_, &from.trigger_content_update_delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_uid_) -
    reinterpret_cast<char*>(&trigger_content_update_delay_ms_)) + sizeof(source_uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_uid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(source_uid_));
}

StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::~StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  SharedDtor();
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance& StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_authorities_.Clear();
  changed_uris_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&trigger_content_update_delay_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_uid_) -
        reinterpret_cast<char*>(&trigger_content_update_delay_ms_)) + sizeof(source_uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trigger_content_update_delay_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_trigger_content_update_delay_ms(&has_bits);
          trigger_content_update_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trigger_content_max_delay_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_trigger_content_max_delay_ms(&has_bits);
          trigger_content_max_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string changed_authorities = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_changed_authorities(), ptr, ctx, "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_authorities");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated string changed_uris = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_changed_uris(), ptr, ctx, "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_uris");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_content_update_delay_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_trigger_content_update_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_content_update_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_content_max_delay_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_trigger_content_max_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_content_max_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string changed_authorities = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_changed_authorities()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->changed_authorities(this->changed_authorities_size() - 1).data(),
            static_cast<int>(this->changed_authorities(this->changed_authorities_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_authorities");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string changed_uris = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_changed_uris()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->changed_uris(this->changed_uris_size() - 1).data(),
            static_cast<int>(this->changed_uris(this->changed_uris_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_uris");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  // optional int64 trigger_content_update_delay_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->trigger_content_update_delay_ms(), output);
  }

  // optional int64 trigger_content_max_delay_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->trigger_content_max_delay_ms(), output);
  }

  // repeated string changed_authorities = 5 [(.android.privacy) = {
  for (int i = 0, n = this->changed_authorities_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_authorities(i).data(), static_cast<int>(this->changed_authorities(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_authorities");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->changed_authorities(i), output);
  }

  // repeated string changed_uris = 6 [(.android.privacy) = {
  for (int i = 0, n = this->changed_uris_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_uris(i).data(), static_cast<int>(this->changed_uris(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_uris");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->changed_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  // optional int64 trigger_content_update_delay_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->trigger_content_update_delay_ms(), target);
  }

  // optional int64 trigger_content_max_delay_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->trigger_content_max_delay_ms(), target);
  }

  // repeated string changed_authorities = 5 [(.android.privacy) = {
  for (int i = 0, n = this->changed_authorities_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_authorities(i).data(), static_cast<int>(this->changed_authorities(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_authorities");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->changed_authorities(i), target);
  }

  // repeated string changed_uris = 6 [(.android.privacy) = {
  for (int i = 0, n = this->changed_uris_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_uris(i).data(), static_cast<int>(this->changed_uris(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance.changed_uris");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(6, this->changed_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  return target;
}

size_t StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string changed_authorities = 5 [(.android.privacy) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->changed_authorities_size());
  for (int i = 0, n = this->changed_authorities_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->changed_authorities(i));
  }

  // repeated string changed_uris = 6 [(.android.privacy) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->changed_uris_size());
  for (int i = 0, n = this->changed_uris_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->changed_uris(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int64 trigger_content_update_delay_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_content_update_delay_ms());
    }

    // optional int64 trigger_content_max_delay_ms = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_content_max_delay_ms());
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
    MergeFrom(*source);
  }
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::MergeFrom(const StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changed_authorities_.MergeFrom(from.changed_authorities_);
  changed_uris_.MergeFrom(from.changed_uris_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      trigger_content_update_delay_ms_ = from.trigger_content_update_delay_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      trigger_content_max_delay_ms_ = from.trigger_content_max_delay_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_uid_ = from.source_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::CopyFrom(const StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::IsInitialized() const {
  return true;
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::InternalSwap(StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  changed_authorities_.InternalSwap(CastToBase(&other->changed_authorities_));
  changed_uris_.InternalSwap(CastToBase(&other->changed_uris_));
  swap(info_, other->info_);
  swap(trigger_content_update_delay_ms_, other->trigger_content_update_delay_ms_);
  swap(trigger_content_max_delay_ms_, other->trigger_content_max_delay_ms_);
  swap(source_uid_, other->source_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::InitAsDefaultInstance() {
}
class StateControllerProto_ContentObserverController_Observer_TriggerContentData::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_ContentObserverController_Observer_TriggerContentData>()._has_bits_);
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StateControllerProto_ContentObserverController_Observer_TriggerContentData::StateControllerProto_ContentObserverController_Observer_TriggerContentData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
}
StateControllerProto_ContentObserverController_Observer_TriggerContentData::StateControllerProto_ContentObserverController_Observer_TriggerContentData(const StateControllerProto_ContentObserverController_Observer_TriggerContentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      jobs_(from.jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_ = 0;
}

StateControllerProto_ContentObserverController_Observer_TriggerContentData::~StateControllerProto_ContentObserverController_Observer_TriggerContentData() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  SharedDtor();
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::SharedDtor() {
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_ContentObserverController_Observer_TriggerContentData& StateControllerProto_ContentObserverController_Observer_TriggerContentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_ContentObserverController_Observer_TriggerContentData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_ContentObserverController_Observer_TriggerContentData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uri_.ClearNonDefaultToEmptyNoArena();
  }
  flags_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_ContentObserverController_Observer_TriggerContentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string uri = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_uri(), ptr, ctx, "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_ContentObserverController_Observer_TriggerContentData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance jobs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uri = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional int32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->flags(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance jobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->jobs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_ContentObserverController_Observer_TriggerContentData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uri = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional int32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->flags(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance jobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->jobs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  return target;
}

size_t StateControllerProto_ContentObserverController_Observer_TriggerContentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData.JobInstance jobs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->jobs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uri = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional int32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_ContentObserverController_Observer_TriggerContentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_ContentObserverController_Observer_TriggerContentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
    MergeFrom(*source);
  }
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::MergeFrom(const StateControllerProto_ContentObserverController_Observer_TriggerContentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jobs_.MergeFrom(from.jobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::CopyFrom(const StateControllerProto_ContentObserverController_Observer_TriggerContentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_ContentObserverController_Observer_TriggerContentData::IsInitialized() const {
  return true;
}

void StateControllerProto_ContentObserverController_Observer_TriggerContentData::InternalSwap(StateControllerProto_ContentObserverController_Observer_TriggerContentData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&jobs_)->InternalSwap(CastToBase(&other->jobs_));
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_ContentObserverController_Observer_TriggerContentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_ContentObserverController_Observer::InitAsDefaultInstance() {
}
class StateControllerProto_ContentObserverController_Observer::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_ContentObserverController_Observer>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateControllerProto_ContentObserverController_Observer::StateControllerProto_ContentObserverController_Observer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
}
StateControllerProto_ContentObserverController_Observer::StateControllerProto_ContentObserverController_Observer(const StateControllerProto_ContentObserverController_Observer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      triggers_(from.triggers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
}

void StateControllerProto_ContentObserverController_Observer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  user_id_ = 0;
}

StateControllerProto_ContentObserverController_Observer::~StateControllerProto_ContentObserverController_Observer() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  SharedDtor();
}

void StateControllerProto_ContentObserverController_Observer::SharedDtor() {
}

void StateControllerProto_ContentObserverController_Observer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_ContentObserverController_Observer& StateControllerProto_ContentObserverController_Observer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_ContentObserverController_Observer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_ContentObserverController_Observer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triggers_.Clear();
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_ContentObserverController_Observer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_ContentObserverController_Observer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData triggers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_ContentObserverController_Observer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData triggers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->triggers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_ContentObserverController_Observer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData triggers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->triggers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  return target;
}

size_t StateControllerProto_ContentObserverController_Observer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer.TriggerContentData triggers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->triggers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->triggers(static_cast<int>(i)));
    }
  }

  // optional int32 user_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_ContentObserverController_Observer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_ContentObserverController_Observer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_ContentObserverController_Observer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
    MergeFrom(*source);
  }
}

void StateControllerProto_ContentObserverController_Observer::MergeFrom(const StateControllerProto_ContentObserverController_Observer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triggers_.MergeFrom(from.triggers_);
  if (from.has_user_id()) {
    set_user_id(from.user_id());
  }
}

void StateControllerProto_ContentObserverController_Observer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_ContentObserverController_Observer::CopyFrom(const StateControllerProto_ContentObserverController_Observer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController.Observer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_ContentObserverController_Observer::IsInitialized() const {
  return true;
}

void StateControllerProto_ContentObserverController_Observer::InternalSwap(StateControllerProto_ContentObserverController_Observer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&triggers_)->InternalSwap(CastToBase(&other->triggers_));
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_ContentObserverController_Observer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_ContentObserverController::InitAsDefaultInstance() {
}
class StateControllerProto_ContentObserverController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_ContentObserverController>()._has_bits_);
};

StateControllerProto_ContentObserverController::StateControllerProto_ContentObserverController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.ContentObserverController)
}
StateControllerProto_ContentObserverController::StateControllerProto_ContentObserverController(const StateControllerProto_ContentObserverController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_),
      observers_(from.observers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.ContentObserverController)
}

void StateControllerProto_ContentObserverController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
}

StateControllerProto_ContentObserverController::~StateControllerProto_ContentObserverController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.ContentObserverController)
  SharedDtor();
}

void StateControllerProto_ContentObserverController::SharedDtor() {
}

void StateControllerProto_ContentObserverController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_ContentObserverController& StateControllerProto_ContentObserverController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_ContentObserverController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_ContentObserverController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.ContentObserverController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  observers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_ContentObserverController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob tracked_jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer observers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_observers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_ContentObserverController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.ContentObserverController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob tracked_jobs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer observers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_observers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.ContentObserverController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.ContentObserverController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_ContentObserverController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.ContentObserverController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob tracked_jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer observers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->observers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.ContentObserverController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_ContentObserverController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.ContentObserverController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob tracked_jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tracked_jobs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer observers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->observers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.ContentObserverController)
  return target;
}

size_t StateControllerProto_ContentObserverController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.ContentObserverController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.TrackedJob tracked_jobs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.StateControllerProto.ContentObserverController.Observer observers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->observers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->observers(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_ContentObserverController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_ContentObserverController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_ContentObserverController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.ContentObserverController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.ContentObserverController)
    MergeFrom(*source);
  }
}

void StateControllerProto_ContentObserverController::MergeFrom(const StateControllerProto_ContentObserverController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.ContentObserverController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  observers_.MergeFrom(from.observers_);
}

void StateControllerProto_ContentObserverController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_ContentObserverController::CopyFrom(const StateControllerProto_ContentObserverController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.ContentObserverController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_ContentObserverController::IsInitialized() const {
  return true;
}

void StateControllerProto_ContentObserverController::InternalSwap(StateControllerProto_ContentObserverController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  CastToBase(&observers_)->InternalSwap(CastToBase(&other->observers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_ContentObserverController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_DeviceIdleJobsController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_DeviceIdleJobsController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_DeviceIdleJobsController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_DeviceIdleJobsController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_DeviceIdleJobsController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_are_constraints_satisfied(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_doze_whitelisted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_allowed_in_doze(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_DeviceIdleJobsController_TrackedJob::_Internal::info(const StateControllerProto_DeviceIdleJobsController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_DeviceIdleJobsController_TrackedJob::StateControllerProto_DeviceIdleJobsController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
}
StateControllerProto_DeviceIdleJobsController_TrackedJob::StateControllerProto_DeviceIdleJobsController_TrackedJob(const StateControllerProto_DeviceIdleJobsController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_package_name()) {
    source_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_package_name_);
  }
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&source_uid_, &from.source_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_allowed_in_doze_) -
    reinterpret_cast<char*>(&source_uid_)) + sizeof(is_allowed_in_doze_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  source_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_allowed_in_doze_) -
      reinterpret_cast<char*>(&info_)) + sizeof(is_allowed_in_doze_));
}

StateControllerProto_DeviceIdleJobsController_TrackedJob::~StateControllerProto_DeviceIdleJobsController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::SharedDtor() {
  source_package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_DeviceIdleJobsController_TrackedJob& StateControllerProto_DeviceIdleJobsController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_DeviceIdleJobsController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_DeviceIdleJobsController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&source_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_allowed_in_doze_) -
        reinterpret_cast<char*>(&source_uid_)) + sizeof(is_allowed_in_doze_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_DeviceIdleJobsController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source_package_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_source_package_name(), ptr, ctx, "com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob.source_package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool are_constraints_satisfied = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_are_constraints_satisfied(&has_bits);
          are_constraints_satisfied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_doze_whitelisted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_doze_whitelisted(&has_bits);
          is_doze_whitelisted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_allowed_in_doze = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_allowed_in_doze(&has_bits);
          is_allowed_in_doze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_DeviceIdleJobsController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_package_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob.source_package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool are_constraints_satisfied = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_are_constraints_satisfied(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_constraints_satisfied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_doze_whitelisted = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_doze_whitelisted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_doze_whitelisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_allowed_in_doze = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_allowed_in_doze(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_allowed_in_doze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_DeviceIdleJobsController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  // optional string source_package_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob.source_package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_package_name(), output);
  }

  // optional bool are_constraints_satisfied = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->are_constraints_satisfied(), output);
  }

  // optional bool is_doze_whitelisted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_doze_whitelisted(), output);
  }

  // optional bool is_allowed_in_doze = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_allowed_in_doze(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_DeviceIdleJobsController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  // optional string source_package_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob.source_package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->source_package_name(), target);
  }

  // optional bool are_constraints_satisfied = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->are_constraints_satisfied(), target);
  }

  // optional bool is_doze_whitelisted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_doze_whitelisted(), target);
  }

  // optional bool is_allowed_in_doze = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_allowed_in_doze(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  return target;
}

size_t StateControllerProto_DeviceIdleJobsController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string source_package_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->source_package_name());
    }

    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

    // optional bool are_constraints_satisfied = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_doze_whitelisted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_allowed_in_doze = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_DeviceIdleJobsController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_DeviceIdleJobsController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::MergeFrom(const StateControllerProto_DeviceIdleJobsController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      source_uid_ = from.source_uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      are_constraints_satisfied_ = from.are_constraints_satisfied_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_doze_whitelisted_ = from.is_doze_whitelisted_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_allowed_in_doze_ = from.is_allowed_in_doze_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::CopyFrom(const StateControllerProto_DeviceIdleJobsController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_DeviceIdleJobsController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_DeviceIdleJobsController_TrackedJob::InternalSwap(StateControllerProto_DeviceIdleJobsController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_package_name_.Swap(&other->source_package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
  swap(are_constraints_satisfied_, other->are_constraints_satisfied_);
  swap(is_doze_whitelisted_, other->is_doze_whitelisted_);
  swap(is_allowed_in_doze_, other->is_allowed_in_doze_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_DeviceIdleJobsController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_DeviceIdleJobsController::InitAsDefaultInstance() {
}
class StateControllerProto_DeviceIdleJobsController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_DeviceIdleJobsController>()._has_bits_);
  static void set_has_is_device_idle_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateControllerProto_DeviceIdleJobsController::StateControllerProto_DeviceIdleJobsController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
}
StateControllerProto_DeviceIdleJobsController::StateControllerProto_DeviceIdleJobsController(const StateControllerProto_DeviceIdleJobsController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_device_idle_mode_ = from.is_device_idle_mode_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
}

void StateControllerProto_DeviceIdleJobsController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  is_device_idle_mode_ = false;
}

StateControllerProto_DeviceIdleJobsController::~StateControllerProto_DeviceIdleJobsController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  SharedDtor();
}

void StateControllerProto_DeviceIdleJobsController::SharedDtor() {
}

void StateControllerProto_DeviceIdleJobsController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_DeviceIdleJobsController& StateControllerProto_DeviceIdleJobsController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_DeviceIdleJobsController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_DeviceIdleJobsController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  is_device_idle_mode_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_DeviceIdleJobsController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_device_idle_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_device_idle_mode(&has_bits);
          is_device_idle_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob tracked_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_DeviceIdleJobsController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_device_idle_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_device_idle_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_device_idle_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob tracked_jobs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_DeviceIdleJobsController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_device_idle_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_device_idle_mode(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_DeviceIdleJobsController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_device_idle_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_device_idle_mode(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tracked_jobs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  return target;
}

size_t StateControllerProto_DeviceIdleJobsController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.DeviceIdleJobsController.TrackedJob tracked_jobs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  // optional bool is_device_idle_mode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_DeviceIdleJobsController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_DeviceIdleJobsController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_DeviceIdleJobsController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
    MergeFrom(*source);
  }
}

void StateControllerProto_DeviceIdleJobsController::MergeFrom(const StateControllerProto_DeviceIdleJobsController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  if (from.has_is_device_idle_mode()) {
    set_is_device_idle_mode(from.is_device_idle_mode());
  }
}

void StateControllerProto_DeviceIdleJobsController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_DeviceIdleJobsController::CopyFrom(const StateControllerProto_DeviceIdleJobsController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.DeviceIdleJobsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_DeviceIdleJobsController::IsInitialized() const {
  return true;
}

void StateControllerProto_DeviceIdleJobsController::InternalSwap(StateControllerProto_DeviceIdleJobsController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  swap(is_device_idle_mode_, other->is_device_idle_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_DeviceIdleJobsController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_IdleController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_IdleController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_IdleController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_IdleController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_IdleController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_IdleController_TrackedJob::_Internal::info(const StateControllerProto_IdleController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_IdleController_TrackedJob::StateControllerProto_IdleController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
}
StateControllerProto_IdleController_TrackedJob::StateControllerProto_IdleController_TrackedJob(const StateControllerProto_IdleController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  source_uid_ = from.source_uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
}

void StateControllerProto_IdleController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_uid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(source_uid_));
}

StateControllerProto_IdleController_TrackedJob::~StateControllerProto_IdleController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_IdleController_TrackedJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_IdleController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_IdleController_TrackedJob& StateControllerProto_IdleController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_IdleController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_IdleController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  source_uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_IdleController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_IdleController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_IdleController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_IdleController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  return target;
}

size_t StateControllerProto_IdleController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_IdleController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_IdleController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_IdleController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_IdleController_TrackedJob::MergeFrom(const StateControllerProto_IdleController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      source_uid_ = from.source_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_IdleController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_IdleController_TrackedJob::CopyFrom(const StateControllerProto_IdleController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.IdleController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_IdleController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_IdleController_TrackedJob::InternalSwap(StateControllerProto_IdleController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_IdleController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::InitAsDefaultInstance() {
}
class StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker>()._has_bits_);
  static void set_has_is_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_garage_mode_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
}
StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker(const StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_idle_, &from.is_idle_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_garage_mode_on_) -
    reinterpret_cast<char*>(&is_idle_)) + sizeof(is_garage_mode_on_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::SharedCtor() {
  ::memset(&is_idle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_garage_mode_on_) -
      reinterpret_cast<char*>(&is_idle_)) + sizeof(is_garage_mode_on_));
}

StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::~StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  SharedDtor();
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::SharedDtor() {
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker& StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_idle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_garage_mode_on_) -
      reinterpret_cast<char*>(&is_idle_)) + sizeof(is_garage_mode_on_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_idle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_idle(&has_bits);
          is_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_garage_mode_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_garage_mode_on(&has_bits);
          is_garage_mode_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_idle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_garage_mode_on = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_garage_mode_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_garage_mode_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_idle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_idle(), output);
  }

  // optional bool is_garage_mode_on = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_garage_mode_on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_idle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_idle(), target);
  }

  // optional bool is_garage_mode_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_garage_mode_on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  return target;
}

size_t StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_idle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_garage_mode_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
    MergeFrom(*source);
  }
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::MergeFrom(const StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_idle_ = from.is_idle_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_garage_mode_on_ = from.is_garage_mode_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::CopyFrom(const StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::IsInitialized() const {
  return true;
}

void StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::InternalSwap(StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_idle_, other->is_idle_);
  swap(is_garage_mode_on_, other->is_garage_mode_on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::InitAsDefaultInstance() {
}
class StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker>()._has_bits_);
  static void set_has_is_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_screen_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_dock_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_projection_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
}
StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker(const StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_idle_, &from.is_idle_,
    static_cast<size_t>(reinterpret_cast<char*>(&projection_active_) -
    reinterpret_cast<char*>(&is_idle_)) + sizeof(projection_active_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::SharedCtor() {
  ::memset(&is_idle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&projection_active_) -
      reinterpret_cast<char*>(&is_idle_)) + sizeof(projection_active_));
}

StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::~StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  SharedDtor();
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::SharedDtor() {
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker& StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_idle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&projection_active_) -
      reinterpret_cast<char*>(&is_idle_)) + sizeof(projection_active_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_idle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_idle(&has_bits);
          is_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_screen_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_screen_on(&has_bits);
          is_screen_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dock_idle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_dock_idle(&has_bits);
          is_dock_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool projection_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_projection_active(&has_bits);
          projection_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_idle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_screen_on = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_screen_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_screen_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dock_idle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_dock_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dock_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool projection_active = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_projection_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &projection_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_idle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_idle(), output);
  }

  // optional bool is_screen_on = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_screen_on(), output);
  }

  // optional bool is_dock_idle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_dock_idle(), output);
  }

  // optional bool projection_active = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->projection_active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_idle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_idle(), target);
  }

  // optional bool is_screen_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_screen_on(), target);
  }

  // optional bool is_dock_idle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_dock_idle(), target);
  }

  // optional bool projection_active = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->projection_active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  return target;
}

size_t StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool is_idle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_screen_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_dock_idle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool projection_active = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
    MergeFrom(*source);
  }
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::MergeFrom(const StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      is_idle_ = from.is_idle_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_screen_on_ = from.is_screen_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_dock_idle_ = from.is_dock_idle_;
    }
    if (cached_has_bits & 0x00000008u) {
      projection_active_ = from.projection_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::CopyFrom(const StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::IsInitialized() const {
  return true;
}

void StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::InternalSwap(StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_idle_, other->is_idle_);
  swap(is_screen_on_, other->is_screen_on_);
  swap(is_dock_idle_, other->is_dock_idle_);
  swap(projection_active_, other->projection_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_IdleController_IdlenessTracker::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_default_instance_.device_idleness_tracker_ = const_cast< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker*>(
      ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_IdleController_IdlenessTracker_default_instance_.car_idleness_tracker_ = const_cast< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker*>(
      ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::internal_default_instance());
}
class StateControllerProto_IdleController_IdlenessTracker::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_IdleController_IdlenessTracker>()._has_bits_);
  static const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker& device_idleness_tracker(const StateControllerProto_IdleController_IdlenessTracker* msg);
  static const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker& car_idleness_tracker(const StateControllerProto_IdleController_IdlenessTracker* msg);
};

const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker&
StateControllerProto_IdleController_IdlenessTracker::_Internal::device_idleness_tracker(const StateControllerProto_IdleController_IdlenessTracker* msg) {
  return *msg->active_tracker_.device_idleness_tracker_;
}
const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker&
StateControllerProto_IdleController_IdlenessTracker::_Internal::car_idleness_tracker(const StateControllerProto_IdleController_IdlenessTracker* msg) {
  return *msg->active_tracker_.car_idleness_tracker_;
}
void StateControllerProto_IdleController_IdlenessTracker::set_allocated_device_idleness_tracker(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker* device_idleness_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_active_tracker();
  if (device_idleness_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_idleness_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_idleness_tracker, submessage_arena);
    }
    set_has_device_idleness_tracker();
    active_tracker_.device_idleness_tracker_ = device_idleness_tracker;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.device_idleness_tracker)
}
void StateControllerProto_IdleController_IdlenessTracker::set_allocated_car_idleness_tracker(::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker* car_idleness_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_active_tracker();
  if (car_idleness_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      car_idleness_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car_idleness_tracker, submessage_arena);
    }
    set_has_car_idleness_tracker();
    active_tracker_.car_idleness_tracker_ = car_idleness_tracker;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.car_idleness_tracker)
}
StateControllerProto_IdleController_IdlenessTracker::StateControllerProto_IdleController_IdlenessTracker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
}
StateControllerProto_IdleController_IdlenessTracker::StateControllerProto_IdleController_IdlenessTracker(const StateControllerProto_IdleController_IdlenessTracker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_active_tracker();
  switch (from.active_tracker_case()) {
    case kDeviceIdlenessTracker: {
      mutable_device_idleness_tracker()->::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::MergeFrom(from.device_idleness_tracker());
      break;
    }
    case kCarIdlenessTracker: {
      mutable_car_idleness_tracker()->::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::MergeFrom(from.car_idleness_tracker());
      break;
    }
    case ACTIVE_TRACKER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
}

void StateControllerProto_IdleController_IdlenessTracker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  clear_has_active_tracker();
}

StateControllerProto_IdleController_IdlenessTracker::~StateControllerProto_IdleController_IdlenessTracker() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  SharedDtor();
}

void StateControllerProto_IdleController_IdlenessTracker::SharedDtor() {
  if (has_active_tracker()) {
    clear_active_tracker();
  }
}

void StateControllerProto_IdleController_IdlenessTracker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_IdleController_IdlenessTracker& StateControllerProto_IdleController_IdlenessTracker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_IdleController_IdlenessTracker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_IdleController_IdlenessTracker::clear_active_tracker() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  switch (active_tracker_case()) {
    case kDeviceIdlenessTracker: {
      delete active_tracker_.device_idleness_tracker_;
      break;
    }
    case kCarIdlenessTracker: {
      delete active_tracker_.car_idleness_tracker_;
      break;
    }
    case ACTIVE_TRACKER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTIVE_TRACKER_NOT_SET;
}


void StateControllerProto_IdleController_IdlenessTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_active_tracker();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_IdleController_IdlenessTracker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker device_idleness_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_device_idleness_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker car_idleness_tracker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_car_idleness_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_IdleController_IdlenessTracker::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker device_idleness_tracker = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_idleness_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker car_idleness_tracker = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_car_idleness_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_IdleController_IdlenessTracker::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (active_tracker_case()) {
    case kDeviceIdlenessTracker:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::device_idleness_tracker(this), output);
      break;
    case kCarIdlenessTracker:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::car_idleness_tracker(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_IdleController_IdlenessTracker::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (active_tracker_case()) {
    case kDeviceIdlenessTracker:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::device_idleness_tracker(this), target);
      break;
    case kCarIdlenessTracker:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::car_idleness_tracker(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  return target;
}

size_t StateControllerProto_IdleController_IdlenessTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (active_tracker_case()) {
    // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.DeviceIdlenessTracker device_idleness_tracker = 1;
    case kDeviceIdlenessTracker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_tracker_.device_idleness_tracker_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker.CarIdlenessTracker car_idleness_tracker = 2;
    case kCarIdlenessTracker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_tracker_.car_idleness_tracker_);
      break;
    }
    case ACTIVE_TRACKER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_IdleController_IdlenessTracker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_IdleController_IdlenessTracker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_IdleController_IdlenessTracker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
    MergeFrom(*source);
  }
}

void StateControllerProto_IdleController_IdlenessTracker::MergeFrom(const StateControllerProto_IdleController_IdlenessTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.active_tracker_case()) {
    case kDeviceIdlenessTracker: {
      mutable_device_idleness_tracker()->::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker::MergeFrom(from.device_idleness_tracker());
      break;
    }
    case kCarIdlenessTracker: {
      mutable_car_idleness_tracker()->::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker::MergeFrom(from.car_idleness_tracker());
      break;
    }
    case ACTIVE_TRACKER_NOT_SET: {
      break;
    }
  }
}

void StateControllerProto_IdleController_IdlenessTracker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_IdleController_IdlenessTracker::CopyFrom(const StateControllerProto_IdleController_IdlenessTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.IdleController.IdlenessTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_IdleController_IdlenessTracker::IsInitialized() const {
  return true;
}

void StateControllerProto_IdleController_IdlenessTracker::InternalSwap(StateControllerProto_IdleController_IdlenessTracker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(active_tracker_, other->active_tracker_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_IdleController_IdlenessTracker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_IdleController::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_IdleController_default_instance_._instance.get_mutable()->idleness_tracker_ = const_cast< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker*>(
      ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker::internal_default_instance());
}
class StateControllerProto_IdleController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_IdleController>()._has_bits_);
  static void set_has_is_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker& idleness_tracker(const StateControllerProto_IdleController* msg);
  static void set_has_idleness_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker&
StateControllerProto_IdleController::_Internal::idleness_tracker(const StateControllerProto_IdleController* msg) {
  return *msg->idleness_tracker_;
}
StateControllerProto_IdleController::StateControllerProto_IdleController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.IdleController)
}
StateControllerProto_IdleController::StateControllerProto_IdleController(const StateControllerProto_IdleController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_idleness_tracker()) {
    idleness_tracker_ = new ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker(*from.idleness_tracker_);
  } else {
    idleness_tracker_ = nullptr;
  }
  is_idle_ = from.is_idle_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.IdleController)
}

void StateControllerProto_IdleController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&idleness_tracker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_idle_) -
      reinterpret_cast<char*>(&idleness_tracker_)) + sizeof(is_idle_));
}

StateControllerProto_IdleController::~StateControllerProto_IdleController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.IdleController)
  SharedDtor();
}

void StateControllerProto_IdleController::SharedDtor() {
  if (this != internal_default_instance()) delete idleness_tracker_;
}

void StateControllerProto_IdleController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_IdleController& StateControllerProto_IdleController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_IdleController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_IdleController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.IdleController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(idleness_tracker_ != nullptr);
    idleness_tracker_->Clear();
  }
  is_idle_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_IdleController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_idle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_idle(&has_bits);
          is_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.IdleController.TrackedJob tracked_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker idleness_tracker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_idleness_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_IdleController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.IdleController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_idle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.IdleController.TrackedJob tracked_jobs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker idleness_tracker = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_idleness_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.IdleController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.IdleController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_IdleController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.IdleController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_idle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_idle(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.IdleController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker idleness_tracker = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::idleness_tracker(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.IdleController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_IdleController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.IdleController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_idle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_idle(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.IdleController.TrackedJob tracked_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tracked_jobs(static_cast<int>(i)), target);
  }

  // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker idleness_tracker = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::idleness_tracker(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.IdleController)
  return target;
}

size_t StateControllerProto_IdleController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.IdleController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.IdleController.TrackedJob tracked_jobs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.job.StateControllerProto.IdleController.IdlenessTracker idleness_tracker = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *idleness_tracker_);
    }

    // optional bool is_idle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_IdleController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.IdleController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_IdleController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_IdleController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.IdleController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.IdleController)
    MergeFrom(*source);
  }
}

void StateControllerProto_IdleController::MergeFrom(const StateControllerProto_IdleController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.IdleController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_idleness_tracker()->::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker::MergeFrom(from.idleness_tracker());
    }
    if (cached_has_bits & 0x00000002u) {
      is_idle_ = from.is_idle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_IdleController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.IdleController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_IdleController::CopyFrom(const StateControllerProto_IdleController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.IdleController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_IdleController::IsInitialized() const {
  return true;
}

void StateControllerProto_IdleController::InternalSwap(StateControllerProto_IdleController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  swap(idleness_tracker_, other->idleness_tracker_);
  swap(is_idle_, other->is_idle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_IdleController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_QuotaController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_QuotaController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_QuotaController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_effective_standby_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_top_started_job(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_remaining_quota_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_requested_foreground_job(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_within_fg_job_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_QuotaController_TrackedJob::_Internal::info(const StateControllerProto_QuotaController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_QuotaController_TrackedJob::StateControllerProto_QuotaController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
}
StateControllerProto_QuotaController_TrackedJob::StateControllerProto_QuotaController_TrackedJob(const StateControllerProto_QuotaController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&source_uid_, &from.source_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_within_fg_job_quota_) -
    reinterpret_cast<char*>(&source_uid_)) + sizeof(is_within_fg_job_quota_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
}

void StateControllerProto_QuotaController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_within_fg_job_quota_) -
      reinterpret_cast<char*>(&info_)) + sizeof(is_within_fg_job_quota_));
}

StateControllerProto_QuotaController_TrackedJob::~StateControllerProto_QuotaController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_QuotaController_TrackedJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_QuotaController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_TrackedJob& StateControllerProto_QuotaController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&source_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_within_fg_job_quota_) -
        reinterpret_cast<char*>(&source_uid_)) + sizeof(is_within_fg_job_quota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto.Bucket effective_standby_bucket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::JobStatusDumpProto_Bucket_IsValid(val))) {
            set_effective_standby_bucket(static_cast<::com::android::server::job::JobStatusDumpProto_Bucket>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_top_started_job = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_top_started_job(&has_bits);
          is_top_started_job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_quota = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_quota(&has_bits);
          has_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 remaining_quota_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_remaining_quota_ms(&has_bits);
          remaining_quota_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_requested_foreground_job = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_requested_foreground_job(&has_bits);
          is_requested_foreground_job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_within_fg_job_quota = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_within_fg_job_quota(&has_bits);
          is_within_fg_job_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto.Bucket effective_standby_bucket = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::JobStatusDumpProto_Bucket_IsValid(value)) {
            set_effective_standby_bucket(static_cast< ::com::android::server::job::JobStatusDumpProto_Bucket >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_top_started_job = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_top_started_job(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_top_started_job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_quota = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_has_quota(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 remaining_quota_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_remaining_quota_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaining_quota_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_requested_foreground_job = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_is_requested_foreground_job(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_requested_foreground_job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_within_fg_job_quota = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_within_fg_job_quota(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_within_fg_job_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  // optional .com.android.server.job.JobStatusDumpProto.Bucket effective_standby_bucket = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->effective_standby_bucket(), output);
  }

  // optional bool is_top_started_job = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_top_started_job(), output);
  }

  // optional bool has_quota = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->has_quota(), output);
  }

  // optional int64 remaining_quota_ms = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->remaining_quota_ms(), output);
  }

  // optional bool is_requested_foreground_job = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_requested_foreground_job(), output);
  }

  // optional bool is_within_fg_job_quota = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_within_fg_job_quota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto.Bucket effective_standby_bucket = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->effective_standby_bucket(), target);
  }

  // optional bool is_top_started_job = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_top_started_job(), target);
  }

  // optional bool has_quota = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->has_quota(), target);
  }

  // optional int64 remaining_quota_ms = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->remaining_quota_ms(), target);
  }

  // optional bool is_requested_foreground_job = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_requested_foreground_job(), target);
  }

  // optional bool is_within_fg_job_quota = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->is_within_fg_job_quota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  return target;
}

size_t StateControllerProto_QuotaController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

    // optional .com.android.server.job.JobStatusDumpProto.Bucket effective_standby_bucket = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->effective_standby_bucket());
    }

    // optional int64 remaining_quota_ms = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->remaining_quota_ms());
    }

    // optional bool is_top_started_job = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_quota = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_requested_foreground_job = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_within_fg_job_quota = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_TrackedJob::MergeFrom(const StateControllerProto_QuotaController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      source_uid_ = from.source_uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      effective_standby_bucket_ = from.effective_standby_bucket_;
    }
    if (cached_has_bits & 0x00000008u) {
      remaining_quota_ms_ = from.remaining_quota_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_top_started_job_ = from.is_top_started_job_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_quota_ = from.has_quota_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_requested_foreground_job_ = from.is_requested_foreground_job_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_within_fg_job_quota_ = from.is_within_fg_job_quota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_TrackedJob::CopyFrom(const StateControllerProto_QuotaController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_TrackedJob::InternalSwap(StateControllerProto_QuotaController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
  swap(effective_standby_bucket_, other->effective_standby_bucket_);
  swap(remaining_quota_ms_, other->remaining_quota_ms_);
  swap(is_top_started_job_, other->is_top_started_job_);
  swap(has_quota_, other->has_quota_);
  swap(is_requested_foreground_job_, other->is_requested_foreground_job_);
  swap(is_within_fg_job_quota_, other->is_within_fg_job_quota_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_AlarmListener::InitAsDefaultInstance() {
}
class StateControllerProto_QuotaController_AlarmListener::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_AlarmListener>()._has_bits_);
  static void set_has_is_waiting(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trigger_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateControllerProto_QuotaController_AlarmListener::StateControllerProto_QuotaController_AlarmListener()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
}
StateControllerProto_QuotaController_AlarmListener::StateControllerProto_QuotaController_AlarmListener(const StateControllerProto_QuotaController_AlarmListener& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trigger_time_elapsed_, &from.trigger_time_elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_waiting_) -
    reinterpret_cast<char*>(&trigger_time_elapsed_)) + sizeof(is_waiting_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
}

void StateControllerProto_QuotaController_AlarmListener::SharedCtor() {
  ::memset(&trigger_time_elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_waiting_) -
      reinterpret_cast<char*>(&trigger_time_elapsed_)) + sizeof(is_waiting_));
}

StateControllerProto_QuotaController_AlarmListener::~StateControllerProto_QuotaController_AlarmListener() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  SharedDtor();
}

void StateControllerProto_QuotaController_AlarmListener::SharedDtor() {
}

void StateControllerProto_QuotaController_AlarmListener::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_AlarmListener& StateControllerProto_QuotaController_AlarmListener::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_AlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_AlarmListener::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&trigger_time_elapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_waiting_) -
        reinterpret_cast<char*>(&trigger_time_elapsed_)) + sizeof(is_waiting_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_AlarmListener::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_waiting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_waiting(&has_bits);
          is_waiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trigger_time_elapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trigger_time_elapsed(&has_bits);
          trigger_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_AlarmListener::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_waiting = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_waiting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_waiting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_time_elapsed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_trigger_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_AlarmListener::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_waiting = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_waiting(), output);
  }

  // optional int64 trigger_time_elapsed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->trigger_time_elapsed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_AlarmListener::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_waiting = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_waiting(), target);
  }

  // optional int64 trigger_time_elapsed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->trigger_time_elapsed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  return target;
}

size_t StateControllerProto_QuotaController_AlarmListener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 trigger_time_elapsed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_time_elapsed());
    }

    // optional bool is_waiting = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_AlarmListener::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_AlarmListener* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_AlarmListener>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_AlarmListener::MergeFrom(const StateControllerProto_QuotaController_AlarmListener& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trigger_time_elapsed_ = from.trigger_time_elapsed_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_waiting_ = from.is_waiting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_AlarmListener::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_AlarmListener::CopyFrom(const StateControllerProto_QuotaController_AlarmListener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.AlarmListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_AlarmListener::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_AlarmListener::InternalSwap(StateControllerProto_QuotaController_AlarmListener* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(trigger_time_elapsed_, other->trigger_time_elapsed_);
  swap(is_waiting_, other->is_waiting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_AlarmListener::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_ExecutionStats::InitAsDefaultInstance() {
}
class StateControllerProto_QuotaController_ExecutionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_ExecutionStats>()._has_bits_);
  static void set_has_standby_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expiration_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_job_count_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_session_count_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_execution_time_in_window_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bg_job_count_in_window(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_execution_time_in_max_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bg_job_count_in_max_period(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_session_count_in_window(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_in_quota_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_job_count_expiration_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_job_count_in_rate_limiting_window(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_session_count_expiration_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_session_count_in_rate_limiting_window(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

StateControllerProto_QuotaController_ExecutionStats::StateControllerProto_QuotaController_ExecutionStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
}
StateControllerProto_QuotaController_ExecutionStats::StateControllerProto_QuotaController_ExecutionStats(const StateControllerProto_QuotaController_ExecutionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&expiration_time_elapsed_, &from.expiration_time_elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_count_limit_) -
    reinterpret_cast<char*>(&expiration_time_elapsed_)) + sizeof(session_count_limit_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
}

void StateControllerProto_QuotaController_ExecutionStats::SharedCtor() {
  ::memset(&expiration_time_elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_count_limit_) -
      reinterpret_cast<char*>(&expiration_time_elapsed_)) + sizeof(session_count_limit_));
}

StateControllerProto_QuotaController_ExecutionStats::~StateControllerProto_QuotaController_ExecutionStats() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  SharedDtor();
}

void StateControllerProto_QuotaController_ExecutionStats::SharedDtor() {
}

void StateControllerProto_QuotaController_ExecutionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_ExecutionStats& StateControllerProto_QuotaController_ExecutionStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_ExecutionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&expiration_time_elapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bg_job_count_in_max_period_) -
        reinterpret_cast<char*>(&expiration_time_elapsed_)) + sizeof(bg_job_count_in_max_period_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&job_count_in_rate_limiting_window_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_count_limit_) -
        reinterpret_cast<char*>(&job_count_in_rate_limiting_window_)) + sizeof(session_count_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_ExecutionStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::JobStatusDumpProto_Bucket_IsValid(val))) {
            set_standby_bucket(static_cast<::com::android::server::job::JobStatusDumpProto_Bucket>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 expiration_time_elapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expiration_time_elapsed(&has_bits);
          expiration_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 window_size_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_window_size_ms(&has_bits);
          window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 execution_time_in_window_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_execution_time_in_window_ms(&has_bits);
          execution_time_in_window_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_job_count_in_window = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bg_job_count_in_window(&has_bits);
          bg_job_count_in_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 execution_time_in_max_period_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_execution_time_in_max_period_ms(&has_bits);
          execution_time_in_max_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_job_count_in_max_period = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bg_job_count_in_max_period(&has_bits);
          bg_job_count_in_max_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 in_quota_time_elapsed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_in_quota_time_elapsed(&has_bits);
          in_quota_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 job_count_expiration_time_elapsed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_job_count_expiration_time_elapsed(&has_bits);
          job_count_expiration_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 job_count_in_rate_limiting_window = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_job_count_in_rate_limiting_window(&has_bits);
          job_count_in_rate_limiting_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 session_count_in_window = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_session_count_in_window(&has_bits);
          session_count_in_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 session_count_expiration_time_elapsed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_session_count_expiration_time_elapsed(&has_bits);
          session_count_expiration_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 session_count_in_rate_limiting_window = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_session_count_in_rate_limiting_window(&has_bits);
          session_count_in_rate_limiting_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 job_count_limit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_job_count_limit(&has_bits);
          job_count_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 session_count_limit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_session_count_limit(&has_bits);
          session_count_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_ExecutionStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::JobStatusDumpProto_Bucket_IsValid(value)) {
            set_standby_bucket(static_cast< ::com::android::server::job::JobStatusDumpProto_Bucket >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expiration_time_elapsed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_expiration_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 window_size_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 execution_time_in_window_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_execution_time_in_window_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &execution_time_in_window_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_job_count_in_window = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_bg_job_count_in_window(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_job_count_in_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 execution_time_in_max_period_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_execution_time_in_max_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &execution_time_in_max_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_job_count_in_max_period = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_bg_job_count_in_max_period(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_job_count_in_max_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 in_quota_time_elapsed = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_in_quota_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &in_quota_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 job_count_expiration_time_elapsed = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_job_count_expiration_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_count_expiration_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 job_count_in_rate_limiting_window = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_job_count_in_rate_limiting_window(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_count_in_rate_limiting_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_count_in_window = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_session_count_in_window(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_count_in_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 session_count_expiration_time_elapsed = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_session_count_expiration_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_count_expiration_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_count_in_rate_limiting_window = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_session_count_in_rate_limiting_window(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_count_in_rate_limiting_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 job_count_limit = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_job_count_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_count_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_count_limit = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_session_count_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_count_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_ExecutionStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->standby_bucket(), output);
  }

  // optional int64 expiration_time_elapsed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->expiration_time_elapsed(), output);
  }

  // optional int64 window_size_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->window_size_ms(), output);
  }

  // optional int64 execution_time_in_window_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->execution_time_in_window_ms(), output);
  }

  // optional int32 bg_job_count_in_window = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->bg_job_count_in_window(), output);
  }

  // optional int64 execution_time_in_max_period_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->execution_time_in_max_period_ms(), output);
  }

  // optional int32 bg_job_count_in_max_period = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->bg_job_count_in_max_period(), output);
  }

  // optional int64 in_quota_time_elapsed = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->in_quota_time_elapsed(), output);
  }

  // optional int64 job_count_expiration_time_elapsed = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->job_count_expiration_time_elapsed(), output);
  }

  // optional int32 job_count_in_rate_limiting_window = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->job_count_in_rate_limiting_window(), output);
  }

  // optional int32 session_count_in_window = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->session_count_in_window(), output);
  }

  // optional int64 session_count_expiration_time_elapsed = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->session_count_expiration_time_elapsed(), output);
  }

  // optional int32 session_count_in_rate_limiting_window = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->session_count_in_rate_limiting_window(), output);
  }

  // optional int32 job_count_limit = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->job_count_limit(), output);
  }

  // optional int32 session_count_limit = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->session_count_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_ExecutionStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->standby_bucket(), target);
  }

  // optional int64 expiration_time_elapsed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->expiration_time_elapsed(), target);
  }

  // optional int64 window_size_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->window_size_ms(), target);
  }

  // optional int64 execution_time_in_window_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->execution_time_in_window_ms(), target);
  }

  // optional int32 bg_job_count_in_window = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->bg_job_count_in_window(), target);
  }

  // optional int64 execution_time_in_max_period_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->execution_time_in_max_period_ms(), target);
  }

  // optional int32 bg_job_count_in_max_period = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->bg_job_count_in_max_period(), target);
  }

  // optional int64 in_quota_time_elapsed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->in_quota_time_elapsed(), target);
  }

  // optional int64 job_count_expiration_time_elapsed = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->job_count_expiration_time_elapsed(), target);
  }

  // optional int32 job_count_in_rate_limiting_window = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->job_count_in_rate_limiting_window(), target);
  }

  // optional int32 session_count_in_window = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->session_count_in_window(), target);
  }

  // optional int64 session_count_expiration_time_elapsed = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->session_count_expiration_time_elapsed(), target);
  }

  // optional int32 session_count_in_rate_limiting_window = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->session_count_in_rate_limiting_window(), target);
  }

  // optional int32 job_count_limit = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->job_count_limit(), target);
  }

  // optional int32 session_count_limit = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->session_count_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  return target;
}

size_t StateControllerProto_QuotaController_ExecutionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 expiration_time_elapsed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expiration_time_elapsed());
    }

    // optional int64 window_size_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->window_size_ms());
    }

    // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->standby_bucket());
    }

    // optional int32 bg_job_count_in_window = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_job_count_in_window());
    }

    // optional int64 execution_time_in_window_ms = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->execution_time_in_window_ms());
    }

    // optional int64 execution_time_in_max_period_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->execution_time_in_max_period_ms());
    }

    // optional int64 in_quota_time_elapsed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->in_quota_time_elapsed());
    }

    // optional int32 bg_job_count_in_max_period = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_job_count_in_max_period());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 job_count_in_rate_limiting_window = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->job_count_in_rate_limiting_window());
    }

    // optional int64 job_count_expiration_time_elapsed = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->job_count_expiration_time_elapsed());
    }

    // optional int64 session_count_expiration_time_elapsed = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->session_count_expiration_time_elapsed());
    }

    // optional int32 session_count_in_window = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->session_count_in_window());
    }

    // optional int32 session_count_in_rate_limiting_window = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->session_count_in_rate_limiting_window());
    }

    // optional int32 job_count_limit = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->job_count_limit());
    }

    // optional int32 session_count_limit = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->session_count_limit());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_ExecutionStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_ExecutionStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_ExecutionStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_ExecutionStats::MergeFrom(const StateControllerProto_QuotaController_ExecutionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      expiration_time_elapsed_ = from.expiration_time_elapsed_;
    }
    if (cached_has_bits & 0x00000002u) {
      window_size_ms_ = from.window_size_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      standby_bucket_ = from.standby_bucket_;
    }
    if (cached_has_bits & 0x00000008u) {
      bg_job_count_in_window_ = from.bg_job_count_in_window_;
    }
    if (cached_has_bits & 0x00000010u) {
      execution_time_in_window_ms_ = from.execution_time_in_window_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      execution_time_in_max_period_ms_ = from.execution_time_in_max_period_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      in_quota_time_elapsed_ = from.in_quota_time_elapsed_;
    }
    if (cached_has_bits & 0x00000080u) {
      bg_job_count_in_max_period_ = from.bg_job_count_in_max_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      job_count_in_rate_limiting_window_ = from.job_count_in_rate_limiting_window_;
    }
    if (cached_has_bits & 0x00000200u) {
      job_count_expiration_time_elapsed_ = from.job_count_expiration_time_elapsed_;
    }
    if (cached_has_bits & 0x00000400u) {
      session_count_expiration_time_elapsed_ = from.session_count_expiration_time_elapsed_;
    }
    if (cached_has_bits & 0x00000800u) {
      session_count_in_window_ = from.session_count_in_window_;
    }
    if (cached_has_bits & 0x00001000u) {
      session_count_in_rate_limiting_window_ = from.session_count_in_rate_limiting_window_;
    }
    if (cached_has_bits & 0x00002000u) {
      job_count_limit_ = from.job_count_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      session_count_limit_ = from.session_count_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_ExecutionStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_ExecutionStats::CopyFrom(const StateControllerProto_QuotaController_ExecutionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.ExecutionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_ExecutionStats::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_ExecutionStats::InternalSwap(StateControllerProto_QuotaController_ExecutionStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(expiration_time_elapsed_, other->expiration_time_elapsed_);
  swap(window_size_ms_, other->window_size_ms_);
  swap(standby_bucket_, other->standby_bucket_);
  swap(bg_job_count_in_window_, other->bg_job_count_in_window_);
  swap(execution_time_in_window_ms_, other->execution_time_in_window_ms_);
  swap(execution_time_in_max_period_ms_, other->execution_time_in_max_period_ms_);
  swap(in_quota_time_elapsed_, other->in_quota_time_elapsed_);
  swap(bg_job_count_in_max_period_, other->bg_job_count_in_max_period_);
  swap(job_count_in_rate_limiting_window_, other->job_count_in_rate_limiting_window_);
  swap(job_count_expiration_time_elapsed_, other->job_count_expiration_time_elapsed_);
  swap(session_count_expiration_time_elapsed_, other->session_count_expiration_time_elapsed_);
  swap(session_count_in_window_, other->session_count_in_window_);
  swap(session_count_in_rate_limiting_window_, other->session_count_in_rate_limiting_window_);
  swap(job_count_limit_, other->job_count_limit_);
  swap(session_count_limit_, other->session_count_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_ExecutionStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_Package::InitAsDefaultInstance() {
}
class StateControllerProto_QuotaController_Package::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_Package>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateControllerProto_QuotaController_Package::StateControllerProto_QuotaController_Package()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.Package)
}
StateControllerProto_QuotaController_Package::StateControllerProto_QuotaController_Package(const StateControllerProto_QuotaController_Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.Package)
}

void StateControllerProto_QuotaController_Package::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

StateControllerProto_QuotaController_Package::~StateControllerProto_QuotaController_Package() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.Package)
  SharedDtor();
}

void StateControllerProto_QuotaController_Package::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StateControllerProto_QuotaController_Package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_Package& StateControllerProto_QuotaController_Package::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_Package::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_Package::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.job.StateControllerProto.QuotaController.Package.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_Package::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.StateControllerProto.QuotaController.Package.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.Package)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_Package::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.QuotaController.Package.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.Package)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_Package::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.QuotaController.Package.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.Package)
  return target;
}

size_t StateControllerProto_QuotaController_Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_Package::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_Package* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_Package>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.Package)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.Package)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_Package::MergeFrom(const StateControllerProto_QuotaController_Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_Package::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_Package::CopyFrom(const StateControllerProto_QuotaController_Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_Package::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_Package::InternalSwap(StateControllerProto_QuotaController_Package* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_Package::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_TimingSession::InitAsDefaultInstance() {
}
class StateControllerProto_QuotaController_TimingSession::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_TimingSession>()._has_bits_);
  static void set_has_start_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bg_job_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StateControllerProto_QuotaController_TimingSession::StateControllerProto_QuotaController_TimingSession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
}
StateControllerProto_QuotaController_TimingSession::StateControllerProto_QuotaController_TimingSession(const StateControllerProto_QuotaController_TimingSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_elapsed_, &from.start_time_elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&bg_job_count_) -
    reinterpret_cast<char*>(&start_time_elapsed_)) + sizeof(bg_job_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
}

void StateControllerProto_QuotaController_TimingSession::SharedCtor() {
  ::memset(&start_time_elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bg_job_count_) -
      reinterpret_cast<char*>(&start_time_elapsed_)) + sizeof(bg_job_count_));
}

StateControllerProto_QuotaController_TimingSession::~StateControllerProto_QuotaController_TimingSession() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  SharedDtor();
}

void StateControllerProto_QuotaController_TimingSession::SharedDtor() {
}

void StateControllerProto_QuotaController_TimingSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_TimingSession& StateControllerProto_QuotaController_TimingSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_TimingSession_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_TimingSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_time_elapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bg_job_count_) -
        reinterpret_cast<char*>(&start_time_elapsed_)) + sizeof(bg_job_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_TimingSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start_time_elapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_time_elapsed(&has_bits);
          start_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 end_time_elapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_time_elapsed(&has_bits);
          end_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_job_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bg_job_count(&has_bits);
          bg_job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_TimingSession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time_elapsed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time_elapsed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_job_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_bg_job_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_job_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_TimingSession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_elapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start_time_elapsed(), output);
  }

  // optional int64 end_time_elapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->end_time_elapsed(), output);
  }

  // optional int32 bg_job_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->bg_job_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_TimingSession::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_elapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time_elapsed(), target);
  }

  // optional int64 end_time_elapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->end_time_elapsed(), target);
  }

  // optional int32 bg_job_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->bg_job_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  return target;
}

size_t StateControllerProto_QuotaController_TimingSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 start_time_elapsed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time_elapsed());
    }

    // optional int64 end_time_elapsed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_time_elapsed());
    }

    // optional int32 bg_job_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_job_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_TimingSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_TimingSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_TimingSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_TimingSession::MergeFrom(const StateControllerProto_QuotaController_TimingSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_elapsed_ = from.start_time_elapsed_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_elapsed_ = from.end_time_elapsed_;
    }
    if (cached_has_bits & 0x00000004u) {
      bg_job_count_ = from.bg_job_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_TimingSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_TimingSession::CopyFrom(const StateControllerProto_QuotaController_TimingSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.TimingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_TimingSession::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_TimingSession::InternalSwap(StateControllerProto_QuotaController_TimingSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_time_elapsed_, other->start_time_elapsed_);
  swap(end_time_elapsed_, other->end_time_elapsed_);
  swap(bg_job_count_, other->bg_job_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_TimingSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_Timer::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_QuotaController_Timer_default_instance_._instance.get_mutable()->pkg_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController_Package*>(
      ::com::android::server::job::StateControllerProto_QuotaController_Package::internal_default_instance());
}
class StateControllerProto_QuotaController_Timer::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_Timer>()._has_bits_);
  static const ::com::android::server::job::StateControllerProto_QuotaController_Package& pkg(const StateControllerProto_QuotaController_Timer* msg);
  static void set_has_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bg_job_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::job::StateControllerProto_QuotaController_Package&
StateControllerProto_QuotaController_Timer::_Internal::pkg(const StateControllerProto_QuotaController_Timer* msg) {
  return *msg->pkg_;
}
StateControllerProto_QuotaController_Timer::StateControllerProto_QuotaController_Timer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.Timer)
}
StateControllerProto_QuotaController_Timer::StateControllerProto_QuotaController_Timer(const StateControllerProto_QuotaController_Timer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      running_jobs_(from.running_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pkg()) {
    pkg_ = new ::com::android::server::job::StateControllerProto_QuotaController_Package(*from.pkg_);
  } else {
    pkg_ = nullptr;
  }
  ::memcpy(&start_time_elapsed_, &from.start_time_elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&bg_job_count_) -
    reinterpret_cast<char*>(&start_time_elapsed_)) + sizeof(bg_job_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.Timer)
}

void StateControllerProto_QuotaController_Timer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&pkg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bg_job_count_) -
      reinterpret_cast<char*>(&pkg_)) + sizeof(bg_job_count_));
}

StateControllerProto_QuotaController_Timer::~StateControllerProto_QuotaController_Timer() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.Timer)
  SharedDtor();
}

void StateControllerProto_QuotaController_Timer::SharedDtor() {
  if (this != internal_default_instance()) delete pkg_;
}

void StateControllerProto_QuotaController_Timer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_Timer& StateControllerProto_QuotaController_Timer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_Timer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_Timer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  running_jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pkg_ != nullptr);
    pkg_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&start_time_elapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bg_job_count_) -
        reinterpret_cast<char*>(&start_time_elapsed_)) + sizeof(bg_job_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_Timer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pkg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_active(&has_bits);
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_time_elapsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_time_elapsed(&has_bits);
          start_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bg_job_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bg_job_count(&has_bits);
          bg_job_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobStatusShortInfoProto running_jobs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_running_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_Timer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_active = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_time_elapsed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_start_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bg_job_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_bg_job_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bg_job_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobStatusShortInfoProto running_jobs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_running_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.Timer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.Timer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_Timer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pkg(this), output);
  }

  // optional bool is_active = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  // optional int64 start_time_elapsed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->start_time_elapsed(), output);
  }

  // optional int32 bg_job_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->bg_job_count(), output);
  }

  // repeated .com.android.server.job.JobStatusShortInfoProto running_jobs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->running_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->running_jobs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.Timer)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_Timer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pkg(this), target);
  }

  // optional bool is_active = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  // optional int64 start_time_elapsed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time_elapsed(), target);
  }

  // optional int32 bg_job_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->bg_job_count(), target);
  }

  // repeated .com.android.server.job.JobStatusShortInfoProto running_jobs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->running_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->running_jobs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.Timer)
  return target;
}

size_t StateControllerProto_QuotaController_Timer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.JobStatusShortInfoProto running_jobs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->running_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->running_jobs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pkg_);
    }

    // optional int64 start_time_elapsed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time_elapsed());
    }

    // optional bool is_active = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 bg_job_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bg_job_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_Timer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_Timer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_Timer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.Timer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.Timer)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_Timer::MergeFrom(const StateControllerProto_QuotaController_Timer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  running_jobs_.MergeFrom(from.running_jobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pkg()->::com::android::server::job::StateControllerProto_QuotaController_Package::MergeFrom(from.pkg());
    }
    if (cached_has_bits & 0x00000002u) {
      start_time_elapsed_ = from.start_time_elapsed_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      bg_job_count_ = from.bg_job_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_Timer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_Timer::CopyFrom(const StateControllerProto_QuotaController_Timer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.Timer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_Timer::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_Timer::InternalSwap(StateControllerProto_QuotaController_Timer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&running_jobs_)->InternalSwap(CastToBase(&other->running_jobs_));
  swap(pkg_, other->pkg_);
  swap(start_time_elapsed_, other->start_time_elapsed_);
  swap(is_active_, other->is_active_);
  swap(bg_job_count_, other->bg_job_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_Timer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_TopAppTimer::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_QuotaController_TopAppTimer_default_instance_._instance.get_mutable()->pkg_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController_Package*>(
      ::com::android::server::job::StateControllerProto_QuotaController_Package::internal_default_instance());
}
class StateControllerProto_QuotaController_TopAppTimer::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_TopAppTimer>()._has_bits_);
  static const ::com::android::server::job::StateControllerProto_QuotaController_Package& pkg(const StateControllerProto_QuotaController_TopAppTimer* msg);
  static void set_has_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_activity_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::job::StateControllerProto_QuotaController_Package&
StateControllerProto_QuotaController_TopAppTimer::_Internal::pkg(const StateControllerProto_QuotaController_TopAppTimer* msg) {
  return *msg->pkg_;
}
StateControllerProto_QuotaController_TopAppTimer::StateControllerProto_QuotaController_TopAppTimer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
}
StateControllerProto_QuotaController_TopAppTimer::StateControllerProto_QuotaController_TopAppTimer(const StateControllerProto_QuotaController_TopAppTimer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pkg()) {
    pkg_ = new ::com::android::server::job::StateControllerProto_QuotaController_Package(*from.pkg_);
  } else {
    pkg_ = nullptr;
  }
  ::memcpy(&start_time_elapsed_, &from.start_time_elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&activity_count_) -
    reinterpret_cast<char*>(&start_time_elapsed_)) + sizeof(activity_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
}

void StateControllerProto_QuotaController_TopAppTimer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_TopAppTimer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&pkg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activity_count_) -
      reinterpret_cast<char*>(&pkg_)) + sizeof(activity_count_));
}

StateControllerProto_QuotaController_TopAppTimer::~StateControllerProto_QuotaController_TopAppTimer() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  SharedDtor();
}

void StateControllerProto_QuotaController_TopAppTimer::SharedDtor() {
  if (this != internal_default_instance()) delete pkg_;
}

void StateControllerProto_QuotaController_TopAppTimer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_TopAppTimer& StateControllerProto_QuotaController_TopAppTimer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_TopAppTimer_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_TopAppTimer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pkg_ != nullptr);
    pkg_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&start_time_elapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activity_count_) -
        reinterpret_cast<char*>(&start_time_elapsed_)) + sizeof(activity_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_TopAppTimer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pkg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_active(&has_bits);
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_time_elapsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_time_elapsed(&has_bits);
          start_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 activity_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_activity_count(&has_bits);
          activity_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_TopAppTimer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_active = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_time_elapsed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_start_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activity_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_activity_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_TopAppTimer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pkg(this), output);
  }

  // optional bool is_active = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  // optional int64 start_time_elapsed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->start_time_elapsed(), output);
  }

  // optional int32 activity_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->activity_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_TopAppTimer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pkg(this), target);
  }

  // optional bool is_active = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  // optional int64 start_time_elapsed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time_elapsed(), target);
  }

  // optional int32 activity_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->activity_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  return target;
}

size_t StateControllerProto_QuotaController_TopAppTimer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pkg_);
    }

    // optional int64 start_time_elapsed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time_elapsed());
    }

    // optional bool is_active = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 activity_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->activity_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_TopAppTimer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_TopAppTimer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_TopAppTimer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_TopAppTimer::MergeFrom(const StateControllerProto_QuotaController_TopAppTimer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pkg()->::com::android::server::job::StateControllerProto_QuotaController_Package::MergeFrom(from.pkg());
    }
    if (cached_has_bits & 0x00000002u) {
      start_time_elapsed_ = from.start_time_elapsed_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      activity_count_ = from.activity_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_TopAppTimer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_TopAppTimer::CopyFrom(const StateControllerProto_QuotaController_TopAppTimer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.TopAppTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_TopAppTimer::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_TopAppTimer::InternalSwap(StateControllerProto_QuotaController_TopAppTimer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pkg_, other->pkg_);
  swap(start_time_elapsed_, other->start_time_elapsed_);
  swap(is_active_, other->is_active_);
  swap(activity_count_, other->activity_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_TopAppTimer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_PackageStats::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_QuotaController_PackageStats_default_instance_._instance.get_mutable()->pkg_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController_Package*>(
      ::com::android::server::job::StateControllerProto_QuotaController_Package::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_QuotaController_PackageStats_default_instance_._instance.get_mutable()->timer_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController_Timer*>(
      ::com::android::server::job::StateControllerProto_QuotaController_Timer::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_QuotaController_PackageStats_default_instance_._instance.get_mutable()->fg_job_timer_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController_Timer*>(
      ::com::android::server::job::StateControllerProto_QuotaController_Timer::internal_default_instance());
}
class StateControllerProto_QuotaController_PackageStats::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_PackageStats>()._has_bits_);
  static const ::com::android::server::job::StateControllerProto_QuotaController_Package& pkg(const StateControllerProto_QuotaController_PackageStats* msg);
  static void set_has_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::StateControllerProto_QuotaController_Timer& timer(const StateControllerProto_QuotaController_PackageStats* msg);
  static void set_has_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::StateControllerProto_QuotaController_Timer& fg_job_timer(const StateControllerProto_QuotaController_PackageStats* msg);
  static void set_has_fg_job_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::com::android::server::job::StateControllerProto_QuotaController_Package&
StateControllerProto_QuotaController_PackageStats::_Internal::pkg(const StateControllerProto_QuotaController_PackageStats* msg) {
  return *msg->pkg_;
}
const ::com::android::server::job::StateControllerProto_QuotaController_Timer&
StateControllerProto_QuotaController_PackageStats::_Internal::timer(const StateControllerProto_QuotaController_PackageStats* msg) {
  return *msg->timer_;
}
const ::com::android::server::job::StateControllerProto_QuotaController_Timer&
StateControllerProto_QuotaController_PackageStats::_Internal::fg_job_timer(const StateControllerProto_QuotaController_PackageStats* msg) {
  return *msg->fg_job_timer_;
}
StateControllerProto_QuotaController_PackageStats::StateControllerProto_QuotaController_PackageStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
}
StateControllerProto_QuotaController_PackageStats::StateControllerProto_QuotaController_PackageStats(const StateControllerProto_QuotaController_PackageStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      saved_sessions_(from.saved_sessions_),
      execution_stats_(from.execution_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pkg()) {
    pkg_ = new ::com::android::server::job::StateControllerProto_QuotaController_Package(*from.pkg_);
  } else {
    pkg_ = nullptr;
  }
  if (from.has_timer()) {
    timer_ = new ::com::android::server::job::StateControllerProto_QuotaController_Timer(*from.timer_);
  } else {
    timer_ = nullptr;
  }
  if (from.has_fg_job_timer()) {
    fg_job_timer_ = new ::com::android::server::job::StateControllerProto_QuotaController_Timer(*from.fg_job_timer_);
  } else {
    fg_job_timer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
}

void StateControllerProto_QuotaController_PackageStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&pkg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fg_job_timer_) -
      reinterpret_cast<char*>(&pkg_)) + sizeof(fg_job_timer_));
}

StateControllerProto_QuotaController_PackageStats::~StateControllerProto_QuotaController_PackageStats() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  SharedDtor();
}

void StateControllerProto_QuotaController_PackageStats::SharedDtor() {
  if (this != internal_default_instance()) delete pkg_;
  if (this != internal_default_instance()) delete timer_;
  if (this != internal_default_instance()) delete fg_job_timer_;
}

void StateControllerProto_QuotaController_PackageStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_PackageStats& StateControllerProto_QuotaController_PackageStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_PackageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_PackageStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  saved_sessions_.Clear();
  execution_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pkg_ != nullptr);
      pkg_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timer_ != nullptr);
      timer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fg_job_timer_ != nullptr);
      fg_job_timer_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_PackageStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pkg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.QuotaController.Timer timer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_timer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.QuotaController.TimingSession saved_sessions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_saved_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.QuotaController.ExecutionStats execution_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_execution_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.QuotaController.Timer fg_job_timer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_fg_job_timer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_PackageStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.QuotaController.Timer timer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.QuotaController.TimingSession saved_sessions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_saved_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.QuotaController.ExecutionStats execution_stats = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_execution_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.QuotaController.Timer fg_job_timer = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fg_job_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_PackageStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pkg(this), output);
  }

  // optional .com.android.server.job.StateControllerProto.QuotaController.Timer timer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::timer(this), output);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.TimingSession saved_sessions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->saved_sessions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->saved_sessions(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.ExecutionStats execution_stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->execution_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->execution_stats(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.job.StateControllerProto.QuotaController.Timer fg_job_timer = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::fg_job_timer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_PackageStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pkg(this), target);
  }

  // optional .com.android.server.job.StateControllerProto.QuotaController.Timer timer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::timer(this), target);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.TimingSession saved_sessions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->saved_sessions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->saved_sessions(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.ExecutionStats execution_stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->execution_stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->execution_stats(static_cast<int>(i)), target);
  }

  // optional .com.android.server.job.StateControllerProto.QuotaController.Timer fg_job_timer = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::fg_job_timer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  return target;
}

size_t StateControllerProto_QuotaController_PackageStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.QuotaController.TimingSession saved_sessions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->saved_sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->saved_sessions(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.ExecutionStats execution_stats = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->execution_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->execution_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pkg_);
    }

    // optional .com.android.server.job.StateControllerProto.QuotaController.Timer timer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timer_);
    }

    // optional .com.android.server.job.StateControllerProto.QuotaController.Timer fg_job_timer = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fg_job_timer_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_PackageStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_PackageStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_PackageStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_PackageStats::MergeFrom(const StateControllerProto_QuotaController_PackageStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  saved_sessions_.MergeFrom(from.saved_sessions_);
  execution_stats_.MergeFrom(from.execution_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pkg()->::com::android::server::job::StateControllerProto_QuotaController_Package::MergeFrom(from.pkg());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_timer()->::com::android::server::job::StateControllerProto_QuotaController_Timer::MergeFrom(from.timer());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fg_job_timer()->::com::android::server::job::StateControllerProto_QuotaController_Timer::MergeFrom(from.fg_job_timer());
    }
  }
}

void StateControllerProto_QuotaController_PackageStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_PackageStats::CopyFrom(const StateControllerProto_QuotaController_PackageStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.PackageStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_PackageStats::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_PackageStats::InternalSwap(StateControllerProto_QuotaController_PackageStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&saved_sessions_)->InternalSwap(CastToBase(&other->saved_sessions_));
  CastToBase(&execution_stats_)->InternalSwap(CastToBase(&other->execution_stats_));
  swap(pkg_, other->pkg_);
  swap(timer_, other->timer_);
  swap(fg_job_timer_, other->fg_job_timer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_PackageStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_UidPackageMapping::InitAsDefaultInstance() {
}
class StateControllerProto_QuotaController_UidPackageMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_UidPackageMapping>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateControllerProto_QuotaController_UidPackageMapping::StateControllerProto_QuotaController_UidPackageMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
}
StateControllerProto_QuotaController_UidPackageMapping::StateControllerProto_QuotaController_UidPackageMapping(const StateControllerProto_QuotaController_UidPackageMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      package_names_(from.package_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
}

void StateControllerProto_QuotaController_UidPackageMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  uid_ = 0;
}

StateControllerProto_QuotaController_UidPackageMapping::~StateControllerProto_QuotaController_UidPackageMapping() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  SharedDtor();
}

void StateControllerProto_QuotaController_UidPackageMapping::SharedDtor() {
}

void StateControllerProto_QuotaController_UidPackageMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_UidPackageMapping& StateControllerProto_QuotaController_UidPackageMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_UidPackageMapping_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_UidPackageMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_names_.Clear();
  uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_UidPackageMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string package_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_package_names(), ptr, ctx, "com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping.package_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_UidPackageMapping::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string package_names = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_package_names()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_names(this->package_names_size() - 1).data(),
            static_cast<int>(this->package_names(this->package_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping.package_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_UidPackageMapping::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // repeated string package_names = 2;
  for (int i = 0, n = this->package_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_names(i).data(), static_cast<int>(this->package_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping.package_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->package_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_UidPackageMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // repeated string package_names = 2;
  for (int i = 0, n = this->package_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_names(i).data(), static_cast<int>(this->package_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping.package_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->package_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  return target;
}

size_t StateControllerProto_QuotaController_UidPackageMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string package_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->package_names_size());
  for (int i = 0, n = this->package_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->package_names(i));
  }

  // optional int32 uid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_UidPackageMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_UidPackageMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_UidPackageMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_UidPackageMapping::MergeFrom(const StateControllerProto_QuotaController_UidPackageMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_names_.MergeFrom(from.package_names_);
  if (from.has_uid()) {
    set_uid(from.uid());
  }
}

void StateControllerProto_QuotaController_UidPackageMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_UidPackageMapping::CopyFrom(const StateControllerProto_QuotaController_UidPackageMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_UidPackageMapping::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_UidPackageMapping::InternalSwap(StateControllerProto_QuotaController_UidPackageMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_names_.InternalSwap(CastToBase(&other->package_names_));
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_UidPackageMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_default_instance_._instance.get_mutable()->pkg_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController_Package*>(
      ::com::android::server::job::StateControllerProto_QuotaController_Package::internal_default_instance());
}
class StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm>()._has_bits_);
  static const ::com::android::server::job::StateControllerProto_QuotaController_Package& pkg(const StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm* msg);
  static void set_has_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_quota_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::StateControllerProto_QuotaController_Package&
StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::_Internal::pkg(const StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm* msg) {
  return *msg->pkg_;
}
StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
}
StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm(const StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pkg()) {
    pkg_ = new ::com::android::server::job::StateControllerProto_QuotaController_Package(*from.pkg_);
  } else {
    pkg_ = nullptr;
  }
  in_quota_time_elapsed_ = from.in_quota_time_elapsed_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&pkg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_quota_time_elapsed_) -
      reinterpret_cast<char*>(&pkg_)) + sizeof(in_quota_time_elapsed_));
}

StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::~StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  SharedDtor();
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::SharedDtor() {
  if (this != internal_default_instance()) delete pkg_;
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm& StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pkg_ != nullptr);
    pkg_->Clear();
  }
  in_quota_time_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pkg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 in_quota_time_elapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_in_quota_time_elapsed(&has_bits);
          in_quota_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 in_quota_time_elapsed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_in_quota_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &in_quota_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pkg(this), output);
  }

  // optional int64 in_quota_time_elapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->in_quota_time_elapsed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pkg(this), target);
  }

  // optional int64 in_quota_time_elapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->in_quota_time_elapsed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  return target;
}

size_t StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.job.StateControllerProto.QuotaController.Package pkg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pkg_);
    }

    // optional int64 in_quota_time_elapsed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->in_quota_time_elapsed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::MergeFrom(const StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pkg()->::com::android::server::job::StateControllerProto_QuotaController_Package::MergeFrom(from.pkg());
    }
    if (cached_has_bits & 0x00000002u) {
      in_quota_time_elapsed_ = from.in_quota_time_elapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::CopyFrom(const StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::InternalSwap(StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pkg_, other->pkg_);
  swap(in_quota_time_elapsed_, other->in_quota_time_elapsed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController_InQuotaAlarmListener::InitAsDefaultInstance() {
}
class StateControllerProto_QuotaController_InQuotaAlarmListener::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController_InQuotaAlarmListener>()._has_bits_);
  static void set_has_trigger_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateControllerProto_QuotaController_InQuotaAlarmListener::StateControllerProto_QuotaController_InQuotaAlarmListener()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
}
StateControllerProto_QuotaController_InQuotaAlarmListener::StateControllerProto_QuotaController_InQuotaAlarmListener(const StateControllerProto_QuotaController_InQuotaAlarmListener& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      alarms_(from.alarms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trigger_time_elapsed_ = from.trigger_time_elapsed_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  trigger_time_elapsed_ = PROTOBUF_LONGLONG(0);
}

StateControllerProto_QuotaController_InQuotaAlarmListener::~StateControllerProto_QuotaController_InQuotaAlarmListener() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  SharedDtor();
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::SharedDtor() {
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController_InQuotaAlarmListener& StateControllerProto_QuotaController_InQuotaAlarmListener::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController_InQuotaAlarmListener::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarms_.Clear();
  trigger_time_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController_InQuotaAlarmListener::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 trigger_time_elapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trigger_time_elapsed(&has_bits);
          trigger_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm alarms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController_InQuotaAlarmListener::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 trigger_time_elapsed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_trigger_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm alarms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController_InQuotaAlarmListener::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 trigger_time_elapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->trigger_time_elapsed(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm alarms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->alarms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController_InQuotaAlarmListener::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 trigger_time_elapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->trigger_time_elapsed(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm alarms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->alarms(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  return target;
}

size_t StateControllerProto_QuotaController_InQuotaAlarmListener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener.Alarm alarms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->alarms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alarms(static_cast<int>(i)));
    }
  }

  // optional int64 trigger_time_elapsed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->trigger_time_elapsed());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController_InQuotaAlarmListener* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController_InQuotaAlarmListener>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::MergeFrom(const StateControllerProto_QuotaController_InQuotaAlarmListener& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alarms_.MergeFrom(from.alarms_);
  if (from.has_trigger_time_elapsed()) {
    set_trigger_time_elapsed(from.trigger_time_elapsed());
  }
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::CopyFrom(const StateControllerProto_QuotaController_InQuotaAlarmListener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController_InQuotaAlarmListener::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController_InQuotaAlarmListener::InternalSwap(StateControllerProto_QuotaController_InQuotaAlarmListener* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&alarms_)->InternalSwap(CastToBase(&other->alarms_));
  swap(trigger_time_elapsed_, other->trigger_time_elapsed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController_InQuotaAlarmListener::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_QuotaController::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_QuotaController_default_instance_._instance.get_mutable()->in_quota_alarm_listener_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener*>(
      ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener::internal_default_instance());
}
class StateControllerProto_QuotaController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_QuotaController>()._has_bits_);
  static void set_has_is_charging(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_elapsed_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener& in_quota_alarm_listener(const StateControllerProto_QuotaController* msg);
  static void set_has_in_quota_alarm_listener(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener&
StateControllerProto_QuotaController::_Internal::in_quota_alarm_listener(const StateControllerProto_QuotaController* msg) {
  return *msg->in_quota_alarm_listener_;
}
StateControllerProto_QuotaController::StateControllerProto_QuotaController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.QuotaController)
}
StateControllerProto_QuotaController::StateControllerProto_QuotaController(const StateControllerProto_QuotaController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      foreground_uids_(from.foreground_uids_),
      tracked_jobs_(from.tracked_jobs_),
      package_stats_(from.package_stats_),
      uid_to_package_cache_(from.uid_to_package_cache_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_in_quota_alarm_listener()) {
    in_quota_alarm_listener_ = new ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener(*from.in_quota_alarm_listener_);
  } else {
    in_quota_alarm_listener_ = nullptr;
  }
  ::memcpy(&elapsed_realtime_, &from.elapsed_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_charging_) -
    reinterpret_cast<char*>(&elapsed_realtime_)) + sizeof(is_charging_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.QuotaController)
}

void StateControllerProto_QuotaController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&in_quota_alarm_listener_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_charging_) -
      reinterpret_cast<char*>(&in_quota_alarm_listener_)) + sizeof(is_charging_));
}

StateControllerProto_QuotaController::~StateControllerProto_QuotaController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.QuotaController)
  SharedDtor();
}

void StateControllerProto_QuotaController::SharedDtor() {
  if (this != internal_default_instance()) delete in_quota_alarm_listener_;
}

void StateControllerProto_QuotaController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_QuotaController& StateControllerProto_QuotaController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_QuotaController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_QuotaController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.QuotaController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foreground_uids_.Clear();
  tracked_jobs_.Clear();
  package_stats_.Clear();
  uid_to_package_cache_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(in_quota_alarm_listener_ != nullptr);
    in_quota_alarm_listener_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&elapsed_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_charging_) -
        reinterpret_cast<char*>(&elapsed_realtime_)) + sizeof(is_charging_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_QuotaController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_charging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_charging(&has_bits);
          is_charging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 foreground_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_foreground_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_foreground_uids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.QuotaController.TrackedJob tracked_jobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.QuotaController.PackageStats package_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_package_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional int64 elapsed_realtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_elapsed_realtime(&has_bits);
          elapsed_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping uid_to_package_cache = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_uid_to_package_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener in_quota_alarm_listener = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_in_quota_alarm_listener(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_QuotaController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.QuotaController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_charging = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_charging(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_charging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 foreground_uids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_foreground_uids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_foreground_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.QuotaController.TrackedJob tracked_jobs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.QuotaController.PackageStats package_stats = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_package_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 elapsed_realtime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_elapsed_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping uid_to_package_cache = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_uid_to_package_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener in_quota_alarm_listener = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_in_quota_alarm_listener()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.QuotaController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.QuotaController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_QuotaController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.QuotaController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_charging = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_charging(), output);
  }

  // repeated int32 foreground_uids = 3;
  for (int i = 0, n = this->foreground_uids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->foreground_uids(i), output);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.TrackedJob tracked_jobs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.PackageStats package_stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->package_stats(static_cast<int>(i)),
      output);
  }

  // optional int64 elapsed_realtime = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->elapsed_realtime(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping uid_to_package_cache = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_to_package_cache_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->uid_to_package_cache(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener in_quota_alarm_listener = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::in_quota_alarm_listener(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.QuotaController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_QuotaController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.QuotaController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_charging = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_charging(), target);
  }

  // repeated int32 foreground_uids = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(3, this->foreground_uids_, target);

  // repeated .com.android.server.job.StateControllerProto.QuotaController.TrackedJob tracked_jobs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tracked_jobs(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.PackageStats package_stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->package_stats(static_cast<int>(i)), target);
  }

  // optional int64 elapsed_realtime = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->elapsed_realtime(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping uid_to_package_cache = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_to_package_cache_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->uid_to_package_cache(static_cast<int>(i)), target);
  }

  // optional .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener in_quota_alarm_listener = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::in_quota_alarm_listener(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.QuotaController)
  return target;
}

size_t StateControllerProto_QuotaController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.QuotaController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 foreground_uids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->foreground_uids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->foreground_uids_size());
    total_size += data_size;
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.TrackedJob tracked_jobs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.PackageStats package_stats = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->package_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->package_stats(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.StateControllerProto.QuotaController.UidPackageMapping uid_to_package_cache = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->uid_to_package_cache_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->uid_to_package_cache(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .com.android.server.job.StateControllerProto.QuotaController.InQuotaAlarmListener in_quota_alarm_listener = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_quota_alarm_listener_);
    }

    // optional int64 elapsed_realtime = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->elapsed_realtime());
    }

    // optional bool is_charging = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_QuotaController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.QuotaController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_QuotaController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_QuotaController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.QuotaController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.QuotaController)
    MergeFrom(*source);
  }
}

void StateControllerProto_QuotaController::MergeFrom(const StateControllerProto_QuotaController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.QuotaController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  foreground_uids_.MergeFrom(from.foreground_uids_);
  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  package_stats_.MergeFrom(from.package_stats_);
  uid_to_package_cache_.MergeFrom(from.uid_to_package_cache_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_in_quota_alarm_listener()->::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener::MergeFrom(from.in_quota_alarm_listener());
    }
    if (cached_has_bits & 0x00000002u) {
      elapsed_realtime_ = from.elapsed_realtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_charging_ = from.is_charging_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_QuotaController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.QuotaController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_QuotaController::CopyFrom(const StateControllerProto_QuotaController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.QuotaController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_QuotaController::IsInitialized() const {
  return true;
}

void StateControllerProto_QuotaController::InternalSwap(StateControllerProto_QuotaController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  foreground_uids_.InternalSwap(&other->foreground_uids_);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  CastToBase(&package_stats_)->InternalSwap(CastToBase(&other->package_stats_));
  CastToBase(&uid_to_package_cache_)->InternalSwap(CastToBase(&other->uid_to_package_cache_));
  swap(in_quota_alarm_listener_, other->in_quota_alarm_listener_);
  swap(elapsed_realtime_, other->elapsed_realtime_);
  swap(is_charging_, other->is_charging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_QuotaController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_StorageController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_StorageController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_StorageController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_StorageController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_StorageController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_StorageController_TrackedJob::_Internal::info(const StateControllerProto_StorageController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_StorageController_TrackedJob::StateControllerProto_StorageController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
}
StateControllerProto_StorageController_TrackedJob::StateControllerProto_StorageController_TrackedJob(const StateControllerProto_StorageController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  source_uid_ = from.source_uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
}

void StateControllerProto_StorageController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_uid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(source_uid_));
}

StateControllerProto_StorageController_TrackedJob::~StateControllerProto_StorageController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_StorageController_TrackedJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_StorageController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_StorageController_TrackedJob& StateControllerProto_StorageController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_StorageController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_StorageController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  source_uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_StorageController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_StorageController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_StorageController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_StorageController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  return target;
}

size_t StateControllerProto_StorageController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_StorageController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_StorageController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_StorageController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_StorageController_TrackedJob::MergeFrom(const StateControllerProto_StorageController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      source_uid_ = from.source_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_StorageController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_StorageController_TrackedJob::CopyFrom(const StateControllerProto_StorageController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.StorageController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_StorageController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_StorageController_TrackedJob::InternalSwap(StateControllerProto_StorageController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_StorageController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_StorageController::InitAsDefaultInstance() {
}
class StateControllerProto_StorageController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_StorageController>()._has_bits_);
  static void set_has_is_storage_not_low(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_broadcast_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StateControllerProto_StorageController::StateControllerProto_StorageController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.StorageController)
}
StateControllerProto_StorageController::StateControllerProto_StorageController(const StateControllerProto_StorageController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_storage_not_low_, &from.is_storage_not_low_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_broadcast_sequence_number_) -
    reinterpret_cast<char*>(&is_storage_not_low_)) + sizeof(last_broadcast_sequence_number_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.StorageController)
}

void StateControllerProto_StorageController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&is_storage_not_low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_broadcast_sequence_number_) -
      reinterpret_cast<char*>(&is_storage_not_low_)) + sizeof(last_broadcast_sequence_number_));
}

StateControllerProto_StorageController::~StateControllerProto_StorageController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.StorageController)
  SharedDtor();
}

void StateControllerProto_StorageController::SharedDtor() {
}

void StateControllerProto_StorageController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_StorageController& StateControllerProto_StorageController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_StorageController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_StorageController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.StorageController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&is_storage_not_low_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_broadcast_sequence_number_) -
        reinterpret_cast<char*>(&is_storage_not_low_)) + sizeof(last_broadcast_sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_StorageController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_storage_not_low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_storage_not_low(&has_bits);
          is_storage_not_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_broadcast_sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_broadcast_sequence_number(&has_bits);
          last_broadcast_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.StorageController.TrackedJob tracked_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_StorageController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.StorageController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_storage_not_low = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_storage_not_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_storage_not_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_broadcast_sequence_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_broadcast_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_broadcast_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.StorageController.TrackedJob tracked_jobs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.StorageController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.StorageController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_StorageController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.StorageController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_storage_not_low = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_storage_not_low(), output);
  }

  // optional int32 last_broadcast_sequence_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->last_broadcast_sequence_number(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.StorageController.TrackedJob tracked_jobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.StorageController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_StorageController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.StorageController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_storage_not_low = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_storage_not_low(), target);
  }

  // optional int32 last_broadcast_sequence_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->last_broadcast_sequence_number(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.StorageController.TrackedJob tracked_jobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tracked_jobs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.StorageController)
  return target;
}

size_t StateControllerProto_StorageController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.StorageController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.StorageController.TrackedJob tracked_jobs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_storage_not_low = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 last_broadcast_sequence_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_broadcast_sequence_number());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_StorageController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.StorageController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_StorageController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_StorageController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.StorageController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.StorageController)
    MergeFrom(*source);
  }
}

void StateControllerProto_StorageController::MergeFrom(const StateControllerProto_StorageController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.StorageController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_storage_not_low_ = from.is_storage_not_low_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_broadcast_sequence_number_ = from.last_broadcast_sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_StorageController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.StorageController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_StorageController::CopyFrom(const StateControllerProto_StorageController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.StorageController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_StorageController::IsInitialized() const {
  return true;
}

void StateControllerProto_StorageController::InternalSwap(StateControllerProto_StorageController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  swap(is_storage_not_low_, other->is_storage_not_low_);
  swap(last_broadcast_sequence_number_, other->last_broadcast_sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_StorageController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_TimeController_TrackedJob::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_TimeController_TrackedJob_default_instance_._instance.get_mutable()->info_ = const_cast< ::com::android::server::job::JobStatusShortInfoProto*>(
      ::com::android::server::job::JobStatusShortInfoProto::internal_default_instance());
}
class StateControllerProto_TimeController_TrackedJob::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_TimeController_TrackedJob>()._has_bits_);
  static const ::com::android::server::job::JobStatusShortInfoProto& info(const StateControllerProto_TimeController_TrackedJob* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_timing_delay_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delay_time_remaining_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_deadline_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_remaining_until_deadline_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::job::JobStatusShortInfoProto&
StateControllerProto_TimeController_TrackedJob::_Internal::info(const StateControllerProto_TimeController_TrackedJob* msg) {
  return *msg->info_;
}
StateControllerProto_TimeController_TrackedJob::StateControllerProto_TimeController_TrackedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
}
StateControllerProto_TimeController_TrackedJob::StateControllerProto_TimeController_TrackedJob(const StateControllerProto_TimeController_TrackedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::android::server::job::JobStatusShortInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&source_uid_, &from.source_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_remaining_until_deadline_ms_) -
    reinterpret_cast<char*>(&source_uid_)) + sizeof(time_remaining_until_deadline_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
}

void StateControllerProto_TimeController_TrackedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_remaining_until_deadline_ms_) -
      reinterpret_cast<char*>(&info_)) + sizeof(time_remaining_until_deadline_ms_));
}

StateControllerProto_TimeController_TrackedJob::~StateControllerProto_TimeController_TrackedJob() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  SharedDtor();
}

void StateControllerProto_TimeController_TrackedJob::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void StateControllerProto_TimeController_TrackedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_TimeController_TrackedJob& StateControllerProto_TimeController_TrackedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_TimeController_TrackedJob_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_TimeController_TrackedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&source_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_remaining_until_deadline_ms_) -
        reinterpret_cast<char*>(&source_uid_)) + sizeof(time_remaining_until_deadline_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_TimeController_TrackedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_timing_delay_constraint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_timing_delay_constraint(&has_bits);
          has_timing_delay_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 delay_time_remaining_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_delay_time_remaining_ms(&has_bits);
          delay_time_remaining_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_deadline_constraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_deadline_constraint(&has_bits);
          has_deadline_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_remaining_until_deadline_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_remaining_until_deadline_ms(&has_bits);
          time_remaining_until_deadline_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_TimeController_TrackedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_timing_delay_constraint = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_has_timing_delay_constraint(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_timing_delay_constraint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 delay_time_remaining_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_delay_time_remaining_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_time_remaining_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_deadline_constraint = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_has_deadline_constraint(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_deadline_constraint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_remaining_until_deadline_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_time_remaining_until_deadline_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_remaining_until_deadline_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_TimeController_TrackedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::info(this), output);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_uid(), output);
  }

  // optional bool has_timing_delay_constraint = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->has_timing_delay_constraint(), output);
  }

  // optional int64 delay_time_remaining_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->delay_time_remaining_ms(), output);
  }

  // optional bool has_deadline_constraint = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->has_deadline_constraint(), output);
  }

  // optional int64 time_remaining_until_deadline_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->time_remaining_until_deadline_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_TimeController_TrackedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target);
  }

  // optional int32 source_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_uid(), target);
  }

  // optional bool has_timing_delay_constraint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->has_timing_delay_constraint(), target);
  }

  // optional int64 delay_time_remaining_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->delay_time_remaining_ms(), target);
  }

  // optional bool has_deadline_constraint = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->has_deadline_constraint(), target);
  }

  // optional int64 time_remaining_until_deadline_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->time_remaining_until_deadline_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  return target;
}

size_t StateControllerProto_TimeController_TrackedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .com.android.server.job.JobStatusShortInfoProto info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 source_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

    // optional bool has_timing_delay_constraint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool has_deadline_constraint = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int64 delay_time_remaining_ms = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->delay_time_remaining_ms());
    }

    // optional int64 time_remaining_until_deadline_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_remaining_until_deadline_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_TimeController_TrackedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_TimeController_TrackedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_TimeController_TrackedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
    MergeFrom(*source);
  }
}

void StateControllerProto_TimeController_TrackedJob::MergeFrom(const StateControllerProto_TimeController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::com::android::server::job::JobStatusShortInfoProto::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      source_uid_ = from.source_uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      has_timing_delay_constraint_ = from.has_timing_delay_constraint_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_deadline_constraint_ = from.has_deadline_constraint_;
    }
    if (cached_has_bits & 0x00000010u) {
      delay_time_remaining_ms_ = from.delay_time_remaining_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_remaining_until_deadline_ms_ = from.time_remaining_until_deadline_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_TimeController_TrackedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_TimeController_TrackedJob::CopyFrom(const StateControllerProto_TimeController_TrackedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.TimeController.TrackedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_TimeController_TrackedJob::IsInitialized() const {
  return true;
}

void StateControllerProto_TimeController_TrackedJob::InternalSwap(StateControllerProto_TimeController_TrackedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(source_uid_, other->source_uid_);
  swap(has_timing_delay_constraint_, other->has_timing_delay_constraint_);
  swap(has_deadline_constraint_, other->has_deadline_constraint_);
  swap(delay_time_remaining_ms_, other->delay_time_remaining_ms_);
  swap(time_remaining_until_deadline_ms_, other->time_remaining_until_deadline_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_TimeController_TrackedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto_TimeController::InitAsDefaultInstance() {
}
class StateControllerProto_TimeController::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto_TimeController>()._has_bits_);
  static void set_has_now_elapsed_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_until_next_delay_alarm_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_until_next_deadline_alarm_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StateControllerProto_TimeController::StateControllerProto_TimeController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto.TimeController)
}
StateControllerProto_TimeController::StateControllerProto_TimeController(const StateControllerProto_TimeController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tracked_jobs_(from.tracked_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&now_elapsed_realtime_, &from.now_elapsed_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_until_next_deadline_alarm_ms_) -
    reinterpret_cast<char*>(&now_elapsed_realtime_)) + sizeof(time_until_next_deadline_alarm_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto.TimeController)
}

void StateControllerProto_TimeController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&now_elapsed_realtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_until_next_deadline_alarm_ms_) -
      reinterpret_cast<char*>(&now_elapsed_realtime_)) + sizeof(time_until_next_deadline_alarm_ms_));
}

StateControllerProto_TimeController::~StateControllerProto_TimeController() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto.TimeController)
  SharedDtor();
}

void StateControllerProto_TimeController::SharedDtor() {
}

void StateControllerProto_TimeController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto_TimeController& StateControllerProto_TimeController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_TimeController_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto_TimeController::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto.TimeController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_jobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&now_elapsed_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_until_next_deadline_alarm_ms_) -
        reinterpret_cast<char*>(&now_elapsed_realtime_)) + sizeof(time_until_next_deadline_alarm_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto_TimeController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 now_elapsed_realtime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_now_elapsed_realtime(&has_bits);
          now_elapsed_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_until_next_delay_alarm_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_until_next_delay_alarm_ms(&has_bits);
          time_until_next_delay_alarm_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_until_next_deadline_alarm_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_until_next_deadline_alarm_ms(&has_bits);
          time_until_next_deadline_alarm_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.StateControllerProto.TimeController.TrackedJob tracked_jobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracked_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto_TimeController::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto.TimeController)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 now_elapsed_realtime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_now_elapsed_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_elapsed_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_until_next_delay_alarm_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_time_until_next_delay_alarm_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_until_next_delay_alarm_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_until_next_deadline_alarm_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_time_until_next_deadline_alarm_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_until_next_deadline_alarm_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.StateControllerProto.TimeController.TrackedJob tracked_jobs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto.TimeController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto.TimeController)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto_TimeController::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto.TimeController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 now_elapsed_realtime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->now_elapsed_realtime(), output);
  }

  // optional int64 time_until_next_delay_alarm_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->time_until_next_delay_alarm_ms(), output);
  }

  // optional int64 time_until_next_deadline_alarm_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->time_until_next_deadline_alarm_ms(), output);
  }

  // repeated .com.android.server.job.StateControllerProto.TimeController.TrackedJob tracked_jobs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tracked_jobs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto.TimeController)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto_TimeController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto.TimeController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 now_elapsed_realtime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->now_elapsed_realtime(), target);
  }

  // optional int64 time_until_next_delay_alarm_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->time_until_next_delay_alarm_ms(), target);
  }

  // optional int64 time_until_next_deadline_alarm_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->time_until_next_deadline_alarm_ms(), target);
  }

  // repeated .com.android.server.job.StateControllerProto.TimeController.TrackedJob tracked_jobs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_jobs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tracked_jobs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto.TimeController)
  return target;
}

size_t StateControllerProto_TimeController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto.TimeController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.StateControllerProto.TimeController.TrackedJob tracked_jobs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_jobs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 now_elapsed_realtime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->now_elapsed_realtime());
    }

    // optional int64 time_until_next_delay_alarm_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_until_next_delay_alarm_ms());
    }

    // optional int64 time_until_next_deadline_alarm_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_until_next_deadline_alarm_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto_TimeController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto.TimeController)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto_TimeController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto_TimeController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto.TimeController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto.TimeController)
    MergeFrom(*source);
  }
}

void StateControllerProto_TimeController::MergeFrom(const StateControllerProto_TimeController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto.TimeController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_jobs_.MergeFrom(from.tracked_jobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      now_elapsed_realtime_ = from.now_elapsed_realtime_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_until_next_delay_alarm_ms_ = from.time_until_next_delay_alarm_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_until_next_deadline_alarm_ms_ = from.time_until_next_deadline_alarm_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateControllerProto_TimeController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto.TimeController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto_TimeController::CopyFrom(const StateControllerProto_TimeController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto.TimeController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto_TimeController::IsInitialized() const {
  return true;
}

void StateControllerProto_TimeController::InternalSwap(StateControllerProto_TimeController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tracked_jobs_)->InternalSwap(CastToBase(&other->tracked_jobs_));
  swap(now_elapsed_realtime_, other->now_elapsed_realtime_);
  swap(time_until_next_delay_alarm_ms_, other->time_until_next_delay_alarm_ms_);
  swap(time_until_next_deadline_alarm_ms_, other->time_until_next_deadline_alarm_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto_TimeController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateControllerProto::InitAsDefaultInstance() {
  ::com::android::server::job::_StateControllerProto_default_instance_.background_ = const_cast< ::com::android::server::job::StateControllerProto_BackgroundJobsController*>(
      ::com::android::server::job::StateControllerProto_BackgroundJobsController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.battery_ = const_cast< ::com::android::server::job::StateControllerProto_BatteryController*>(
      ::com::android::server::job::StateControllerProto_BatteryController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.connectivity_ = const_cast< ::com::android::server::job::StateControllerProto_ConnectivityController*>(
      ::com::android::server::job::StateControllerProto_ConnectivityController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.content_observer_ = const_cast< ::com::android::server::job::StateControllerProto_ContentObserverController*>(
      ::com::android::server::job::StateControllerProto_ContentObserverController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.device_idle_ = const_cast< ::com::android::server::job::StateControllerProto_DeviceIdleJobsController*>(
      ::com::android::server::job::StateControllerProto_DeviceIdleJobsController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.idle_ = const_cast< ::com::android::server::job::StateControllerProto_IdleController*>(
      ::com::android::server::job::StateControllerProto_IdleController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.quota_ = const_cast< ::com::android::server::job::StateControllerProto_QuotaController*>(
      ::com::android::server::job::StateControllerProto_QuotaController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.storage_ = const_cast< ::com::android::server::job::StateControllerProto_StorageController*>(
      ::com::android::server::job::StateControllerProto_StorageController::internal_default_instance());
  ::com::android::server::job::_StateControllerProto_default_instance_.time_ = const_cast< ::com::android::server::job::StateControllerProto_TimeController*>(
      ::com::android::server::job::StateControllerProto_TimeController::internal_default_instance());
}
class StateControllerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StateControllerProto>()._has_bits_);
  static const ::com::android::server::job::StateControllerProto_BackgroundJobsController& background(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_BatteryController& battery(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_ConnectivityController& connectivity(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_ContentObserverController& content_observer(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_DeviceIdleJobsController& device_idle(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_IdleController& idle(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_QuotaController& quota(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_StorageController& storage(const StateControllerProto* msg);
  static const ::com::android::server::job::StateControllerProto_TimeController& time(const StateControllerProto* msg);
};

const ::com::android::server::job::StateControllerProto_BackgroundJobsController&
StateControllerProto::_Internal::background(const StateControllerProto* msg) {
  return *msg->controller_.background_;
}
const ::com::android::server::job::StateControllerProto_BatteryController&
StateControllerProto::_Internal::battery(const StateControllerProto* msg) {
  return *msg->controller_.battery_;
}
const ::com::android::server::job::StateControllerProto_ConnectivityController&
StateControllerProto::_Internal::connectivity(const StateControllerProto* msg) {
  return *msg->controller_.connectivity_;
}
const ::com::android::server::job::StateControllerProto_ContentObserverController&
StateControllerProto::_Internal::content_observer(const StateControllerProto* msg) {
  return *msg->controller_.content_observer_;
}
const ::com::android::server::job::StateControllerProto_DeviceIdleJobsController&
StateControllerProto::_Internal::device_idle(const StateControllerProto* msg) {
  return *msg->controller_.device_idle_;
}
const ::com::android::server::job::StateControllerProto_IdleController&
StateControllerProto::_Internal::idle(const StateControllerProto* msg) {
  return *msg->controller_.idle_;
}
const ::com::android::server::job::StateControllerProto_QuotaController&
StateControllerProto::_Internal::quota(const StateControllerProto* msg) {
  return *msg->controller_.quota_;
}
const ::com::android::server::job::StateControllerProto_StorageController&
StateControllerProto::_Internal::storage(const StateControllerProto* msg) {
  return *msg->controller_.storage_;
}
const ::com::android::server::job::StateControllerProto_TimeController&
StateControllerProto::_Internal::time(const StateControllerProto* msg) {
  return *msg->controller_.time_;
}
void StateControllerProto::set_allocated_background(::com::android::server::job::StateControllerProto_BackgroundJobsController* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    set_has_background();
    controller_.background_ = background;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.background)
}
void StateControllerProto::set_allocated_battery(::com::android::server::job::StateControllerProto_BatteryController* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    set_has_battery();
    controller_.battery_ = battery;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.battery)
}
void StateControllerProto::set_allocated_connectivity(::com::android::server::job::StateControllerProto_ConnectivityController* connectivity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (connectivity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connectivity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectivity, submessage_arena);
    }
    set_has_connectivity();
    controller_.connectivity_ = connectivity;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.connectivity)
}
void StateControllerProto::set_allocated_content_observer(::com::android::server::job::StateControllerProto_ContentObserverController* content_observer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (content_observer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_observer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_observer, submessage_arena);
    }
    set_has_content_observer();
    controller_.content_observer_ = content_observer;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.content_observer)
}
void StateControllerProto::set_allocated_device_idle(::com::android::server::job::StateControllerProto_DeviceIdleJobsController* device_idle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (device_idle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_idle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_idle, submessage_arena);
    }
    set_has_device_idle();
    controller_.device_idle_ = device_idle;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.device_idle)
}
void StateControllerProto::set_allocated_idle(::com::android::server::job::StateControllerProto_IdleController* idle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (idle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      idle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idle, submessage_arena);
    }
    set_has_idle();
    controller_.idle_ = idle;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.idle)
}
void StateControllerProto::set_allocated_quota(::com::android::server::job::StateControllerProto_QuotaController* quota) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (quota) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quota = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quota, submessage_arena);
    }
    set_has_quota();
    controller_.quota_ = quota;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.quota)
}
void StateControllerProto::set_allocated_storage(::com::android::server::job::StateControllerProto_StorageController* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    set_has_storage();
    controller_.storage_ = storage;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.storage)
}
void StateControllerProto::set_allocated_time(::com::android::server::job::StateControllerProto_TimeController* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    controller_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.job.StateControllerProto.time)
}
StateControllerProto::StateControllerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.StateControllerProto)
}
StateControllerProto::StateControllerProto(const StateControllerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_controller();
  switch (from.controller_case()) {
    case kBackground: {
      mutable_background()->::com::android::server::job::StateControllerProto_BackgroundJobsController::MergeFrom(from.background());
      break;
    }
    case kBattery: {
      mutable_battery()->::com::android::server::job::StateControllerProto_BatteryController::MergeFrom(from.battery());
      break;
    }
    case kConnectivity: {
      mutable_connectivity()->::com::android::server::job::StateControllerProto_ConnectivityController::MergeFrom(from.connectivity());
      break;
    }
    case kContentObserver: {
      mutable_content_observer()->::com::android::server::job::StateControllerProto_ContentObserverController::MergeFrom(from.content_observer());
      break;
    }
    case kDeviceIdle: {
      mutable_device_idle()->::com::android::server::job::StateControllerProto_DeviceIdleJobsController::MergeFrom(from.device_idle());
      break;
    }
    case kIdle: {
      mutable_idle()->::com::android::server::job::StateControllerProto_IdleController::MergeFrom(from.idle());
      break;
    }
    case kQuota: {
      mutable_quota()->::com::android::server::job::StateControllerProto_QuotaController::MergeFrom(from.quota());
      break;
    }
    case kStorage: {
      mutable_storage()->::com::android::server::job::StateControllerProto_StorageController::MergeFrom(from.storage());
      break;
    }
    case kTime: {
      mutable_time()->::com::android::server::job::StateControllerProto_TimeController::MergeFrom(from.time());
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.StateControllerProto)
}

void StateControllerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  clear_has_controller();
}

StateControllerProto::~StateControllerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.StateControllerProto)
  SharedDtor();
}

void StateControllerProto::SharedDtor() {
  if (has_controller()) {
    clear_controller();
  }
}

void StateControllerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateControllerProto& StateControllerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateControllerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void StateControllerProto::clear_controller() {
// @@protoc_insertion_point(one_of_clear_start:com.android.server.job.StateControllerProto)
  switch (controller_case()) {
    case kBackground: {
      delete controller_.background_;
      break;
    }
    case kBattery: {
      delete controller_.battery_;
      break;
    }
    case kConnectivity: {
      delete controller_.connectivity_;
      break;
    }
    case kContentObserver: {
      delete controller_.content_observer_;
      break;
    }
    case kDeviceIdle: {
      delete controller_.device_idle_;
      break;
    }
    case kIdle: {
      delete controller_.idle_;
      break;
    }
    case kQuota: {
      delete controller_.quota_;
      break;
    }
    case kStorage: {
      delete controller_.storage_;
      break;
    }
    case kTime: {
      delete controller_.time_;
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTROLLER_NOT_SET;
}


void StateControllerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.StateControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_controller();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateControllerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.StateControllerProto.BackgroundJobsController background = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.BatteryController battery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.ConnectivityController connectivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_connectivity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.ContentObserverController content_observer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_content_observer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.DeviceIdleJobsController device_idle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_device_idle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.IdleController idle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_idle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.StorageController storage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.TimeController time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.StateControllerProto.QuotaController quota = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_quota(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateControllerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.StateControllerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.StateControllerProto.BackgroundJobsController background = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.BatteryController battery = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.ConnectivityController connectivity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_connectivity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.ContentObserverController content_observer = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_content_observer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.DeviceIdleJobsController device_idle = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_idle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.IdleController idle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_idle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.StorageController storage = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.TimeController time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.StateControllerProto.QuotaController quota = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.StateControllerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.StateControllerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateControllerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.StateControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (controller_case()) {
    case kBackground:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::background(this), output);
      break;
    case kBattery:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::battery(this), output);
      break;
    case kConnectivity:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::connectivity(this), output);
      break;
    case kContentObserver:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::content_observer(this), output);
      break;
    case kDeviceIdle:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::device_idle(this), output);
      break;
    case kIdle:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::idle(this), output);
      break;
    case kStorage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, _Internal::storage(this), output);
      break;
    case kTime:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, _Internal::time(this), output);
      break;
    case kQuota:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, _Internal::quota(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.StateControllerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* StateControllerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.StateControllerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (controller_case()) {
    case kBackground:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::background(this), target);
      break;
    case kBattery:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::battery(this), target);
      break;
    case kConnectivity:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::connectivity(this), target);
      break;
    case kContentObserver:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::content_observer(this), target);
      break;
    case kDeviceIdle:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::device_idle(this), target);
      break;
    case kIdle:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::idle(this), target);
      break;
    case kStorage:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, _Internal::storage(this), target);
      break;
    case kTime:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, _Internal::time(this), target);
      break;
    case kQuota:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, _Internal::quota(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.StateControllerProto)
  return target;
}

size_t StateControllerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.StateControllerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (controller_case()) {
    // optional .com.android.server.job.StateControllerProto.BackgroundJobsController background = 1;
    case kBackground: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.background_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.BatteryController battery = 2;
    case kBattery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.battery_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.ConnectivityController connectivity = 3;
    case kConnectivity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.connectivity_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.ContentObserverController content_observer = 4;
    case kContentObserver: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.content_observer_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.DeviceIdleJobsController device_idle = 5;
    case kDeviceIdle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.device_idle_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.IdleController idle = 6;
    case kIdle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.idle_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.QuotaController quota = 9;
    case kQuota: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.quota_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.StorageController storage = 7;
    case kStorage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.storage_);
      break;
    }
    // optional .com.android.server.job.StateControllerProto.TimeController time = 8;
    case kTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.time_);
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateControllerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.StateControllerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const StateControllerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateControllerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.StateControllerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.StateControllerProto)
    MergeFrom(*source);
  }
}

void StateControllerProto::MergeFrom(const StateControllerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.StateControllerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.controller_case()) {
    case kBackground: {
      mutable_background()->::com::android::server::job::StateControllerProto_BackgroundJobsController::MergeFrom(from.background());
      break;
    }
    case kBattery: {
      mutable_battery()->::com::android::server::job::StateControllerProto_BatteryController::MergeFrom(from.battery());
      break;
    }
    case kConnectivity: {
      mutable_connectivity()->::com::android::server::job::StateControllerProto_ConnectivityController::MergeFrom(from.connectivity());
      break;
    }
    case kContentObserver: {
      mutable_content_observer()->::com::android::server::job::StateControllerProto_ContentObserverController::MergeFrom(from.content_observer());
      break;
    }
    case kDeviceIdle: {
      mutable_device_idle()->::com::android::server::job::StateControllerProto_DeviceIdleJobsController::MergeFrom(from.device_idle());
      break;
    }
    case kIdle: {
      mutable_idle()->::com::android::server::job::StateControllerProto_IdleController::MergeFrom(from.idle());
      break;
    }
    case kQuota: {
      mutable_quota()->::com::android::server::job::StateControllerProto_QuotaController::MergeFrom(from.quota());
      break;
    }
    case kStorage: {
      mutable_storage()->::com::android::server::job::StateControllerProto_StorageController::MergeFrom(from.storage());
      break;
    }
    case kTime: {
      mutable_time()->::com::android::server::job::StateControllerProto_TimeController::MergeFrom(from.time());
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
}

void StateControllerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.StateControllerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateControllerProto::CopyFrom(const StateControllerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.StateControllerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateControllerProto::IsInitialized() const {
  return true;
}

void StateControllerProto::InternalSwap(StateControllerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(controller_, other->controller_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateControllerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSetProto_PackageEntryProto_State::InitAsDefaultInstance() {
}
class DataSetProto_PackageEntryProto_State::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSetProto_PackageEntryProto_State>()._has_bits_);
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataSetProto_PackageEntryProto_State::DataSetProto_PackageEntryProto_State()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.DataSetProto.PackageEntryProto.State)
}
DataSetProto_PackageEntryProto_State::DataSetProto_PackageEntryProto_State(const DataSetProto_PackageEntryProto_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.DataSetProto.PackageEntryProto.State)
}

void DataSetProto_PackageEntryProto_State::SharedCtor() {
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(count_));
}

DataSetProto_PackageEntryProto_State::~DataSetProto_PackageEntryProto_State() {
  // @@protoc_insertion_point(destructor:com.android.server.job.DataSetProto.PackageEntryProto.State)
  SharedDtor();
}

void DataSetProto_PackageEntryProto_State::SharedDtor() {
}

void DataSetProto_PackageEntryProto_State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSetProto_PackageEntryProto_State& DataSetProto_PackageEntryProto_State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSetProto_PackageEntryProto_State_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void DataSetProto_PackageEntryProto_State::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataSetProto_PackageEntryProto_State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataSetProto_PackageEntryProto_State::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.DataSetProto.PackageEntryProto.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.DataSetProto.PackageEntryProto.State)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataSetProto_PackageEntryProto_State::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->duration_ms(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.DataSetProto.PackageEntryProto.State)
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSetProto_PackageEntryProto_State::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->duration_ms(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.DataSetProto.PackageEntryProto.State)
  return target;
}

size_t DataSetProto_PackageEntryProto_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSetProto_PackageEntryProto_State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSetProto_PackageEntryProto_State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSetProto_PackageEntryProto_State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.DataSetProto.PackageEntryProto.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.DataSetProto.PackageEntryProto.State)
    MergeFrom(*source);
  }
}

void DataSetProto_PackageEntryProto_State::MergeFrom(const DataSetProto_PackageEntryProto_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSetProto_PackageEntryProto_State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSetProto_PackageEntryProto_State::CopyFrom(const DataSetProto_PackageEntryProto_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.DataSetProto.PackageEntryProto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSetProto_PackageEntryProto_State::IsInitialized() const {
  return true;
}

void DataSetProto_PackageEntryProto_State::InternalSwap(DataSetProto_PackageEntryProto_State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_ms_, other->duration_ms_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSetProto_PackageEntryProto_State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSetProto_PackageEntryProto_StopReasonCount::InitAsDefaultInstance() {
}
class DataSetProto_PackageEntryProto_StopReasonCount::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSetProto_PackageEntryProto_StopReasonCount>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DataSetProto_PackageEntryProto_StopReasonCount::DataSetProto_PackageEntryProto_StopReasonCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
}
DataSetProto_PackageEntryProto_StopReasonCount::DataSetProto_PackageEntryProto_StopReasonCount(const DataSetProto_PackageEntryProto_StopReasonCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&count_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
}

void DataSetProto_PackageEntryProto_StopReasonCount::SharedCtor() {
  count_ = 0;
  reason_ = -1;
}

DataSetProto_PackageEntryProto_StopReasonCount::~DataSetProto_PackageEntryProto_StopReasonCount() {
  // @@protoc_insertion_point(destructor:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  SharedDtor();
}

void DataSetProto_PackageEntryProto_StopReasonCount::SharedDtor() {
}

void DataSetProto_PackageEntryProto_StopReasonCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSetProto_PackageEntryProto_StopReasonCount& DataSetProto_PackageEntryProto_StopReasonCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSetProto_PackageEntryProto_StopReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void DataSetProto_PackageEntryProto_StopReasonCount::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    count_ = 0;
    reason_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataSetProto_PackageEntryProto_StopReasonCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.app.job.InternalStopReasonEnum reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::job::InternalStopReasonEnum_IsValid(val))) {
            set_reason(static_cast<::android::app::job::InternalStopReasonEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataSetProto_PackageEntryProto_StopReasonCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.app.job.InternalStopReasonEnum reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::job::InternalStopReasonEnum_IsValid(value)) {
            set_reason(static_cast< ::android::app::job::InternalStopReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataSetProto_PackageEntryProto_StopReasonCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.job.InternalStopReasonEnum reason = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSetProto_PackageEntryProto_StopReasonCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.job.InternalStopReasonEnum reason = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  return target;
}

size_t DataSetProto_PackageEntryProto_StopReasonCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional .android.app.job.InternalStopReasonEnum reason = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSetProto_PackageEntryProto_StopReasonCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSetProto_PackageEntryProto_StopReasonCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSetProto_PackageEntryProto_StopReasonCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
    MergeFrom(*source);
  }
}

void DataSetProto_PackageEntryProto_StopReasonCount::MergeFrom(const DataSetProto_PackageEntryProto_StopReasonCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSetProto_PackageEntryProto_StopReasonCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSetProto_PackageEntryProto_StopReasonCount::CopyFrom(const DataSetProto_PackageEntryProto_StopReasonCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSetProto_PackageEntryProto_StopReasonCount::IsInitialized() const {
  return true;
}

void DataSetProto_PackageEntryProto_StopReasonCount::InternalSwap(DataSetProto_PackageEntryProto_StopReasonCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSetProto_PackageEntryProto_StopReasonCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSetProto_PackageEntryProto::InitAsDefaultInstance() {
  ::com::android::server::job::_DataSetProto_PackageEntryProto_default_instance_._instance.get_mutable()->pending_state_ = const_cast< ::com::android::server::job::DataSetProto_PackageEntryProto_State*>(
      ::com::android::server::job::DataSetProto_PackageEntryProto_State::internal_default_instance());
  ::com::android::server::job::_DataSetProto_PackageEntryProto_default_instance_._instance.get_mutable()->active_state_ = const_cast< ::com::android::server::job::DataSetProto_PackageEntryProto_State*>(
      ::com::android::server::job::DataSetProto_PackageEntryProto_State::internal_default_instance());
  ::com::android::server::job::_DataSetProto_PackageEntryProto_default_instance_._instance.get_mutable()->active_top_state_ = const_cast< ::com::android::server::job::DataSetProto_PackageEntryProto_State*>(
      ::com::android::server::job::DataSetProto_PackageEntryProto_State::internal_default_instance());
}
class DataSetProto_PackageEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSetProto_PackageEntryProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::DataSetProto_PackageEntryProto_State& pending_state(const DataSetProto_PackageEntryProto* msg);
  static void set_has_pending_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::DataSetProto_PackageEntryProto_State& active_state(const DataSetProto_PackageEntryProto* msg);
  static void set_has_active_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::job::DataSetProto_PackageEntryProto_State& active_top_state(const DataSetProto_PackageEntryProto* msg);
  static void set_has_active_top_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_active_top(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::com::android::server::job::DataSetProto_PackageEntryProto_State&
DataSetProto_PackageEntryProto::_Internal::pending_state(const DataSetProto_PackageEntryProto* msg) {
  return *msg->pending_state_;
}
const ::com::android::server::job::DataSetProto_PackageEntryProto_State&
DataSetProto_PackageEntryProto::_Internal::active_state(const DataSetProto_PackageEntryProto* msg) {
  return *msg->active_state_;
}
const ::com::android::server::job::DataSetProto_PackageEntryProto_State&
DataSetProto_PackageEntryProto::_Internal::active_top_state(const DataSetProto_PackageEntryProto* msg) {
  return *msg->active_top_state_;
}
DataSetProto_PackageEntryProto::DataSetProto_PackageEntryProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.DataSetProto.PackageEntryProto)
}
DataSetProto_PackageEntryProto::DataSetProto_PackageEntryProto(const DataSetProto_PackageEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stop_reasons_(from.stop_reasons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  if (from.has_pending_state()) {
    pending_state_ = new ::com::android::server::job::DataSetProto_PackageEntryProto_State(*from.pending_state_);
  } else {
    pending_state_ = nullptr;
  }
  if (from.has_active_state()) {
    active_state_ = new ::com::android::server::job::DataSetProto_PackageEntryProto_State(*from.active_state_);
  } else {
    active_state_ = nullptr;
  }
  if (from.has_active_top_state()) {
    active_top_state_ = new ::com::android::server::job::DataSetProto_PackageEntryProto_State(*from.active_top_state_);
  } else {
    active_top_state_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_top_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(active_top_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.DataSetProto.PackageEntryProto)
}

void DataSetProto_PackageEntryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_top_) -
      reinterpret_cast<char*>(&pending_state_)) + sizeof(active_top_));
}

DataSetProto_PackageEntryProto::~DataSetProto_PackageEntryProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.DataSetProto.PackageEntryProto)
  SharedDtor();
}

void DataSetProto_PackageEntryProto::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pending_state_;
  if (this != internal_default_instance()) delete active_state_;
  if (this != internal_default_instance()) delete active_top_state_;
}

void DataSetProto_PackageEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSetProto_PackageEntryProto& DataSetProto_PackageEntryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSetProto_PackageEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void DataSetProto_PackageEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.DataSetProto.PackageEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_reasons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pending_state_ != nullptr);
      pending_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(active_state_ != nullptr);
      active_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(active_top_state_ != nullptr);
      active_top_state_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_top_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(active_top_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataSetProto_PackageEntryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package_name(), ptr, ctx, "com.android.server.job.DataSetProto.PackageEntryProto.package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.DataSetProto.PackageEntryProto.State pending_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_pending_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_active_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_top_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_active_top_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pending = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pending(&has_bits);
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active_top = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_active_top(&has_bits);
          active_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount stop_reasons = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stop_reasons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataSetProto_PackageEntryProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.DataSetProto.PackageEntryProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), static_cast<int>(this->package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.DataSetProto.PackageEntryProto.package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.DataSetProto.PackageEntryProto.State pending_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_top_state = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_top_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pending = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_pending(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active_top = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_active_top(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount stop_reasons = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stop_reasons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.DataSetProto.PackageEntryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.DataSetProto.PackageEntryProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataSetProto_PackageEntryProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.DataSetProto.PackageEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.DataSetProto.PackageEntryProto.package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // optional .com.android.server.job.DataSetProto.PackageEntryProto.State pending_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::pending_state(this), output);
  }

  // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_state = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::active_state(this), output);
  }

  // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_top_state = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::active_top_state(this), output);
  }

  // optional bool pending = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->pending(), output);
  }

  // optional bool active = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->active(), output);
  }

  // optional bool active_top = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->active_top(), output);
  }

  // repeated .com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount stop_reasons = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_reasons_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->stop_reasons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.DataSetProto.PackageEntryProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSetProto_PackageEntryProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.DataSetProto.PackageEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.DataSetProto.PackageEntryProto.package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->package_name(), target);
  }

  // optional .com.android.server.job.DataSetProto.PackageEntryProto.State pending_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::pending_state(this), target);
  }

  // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::active_state(this), target);
  }

  // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_top_state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::active_top_state(this), target);
  }

  // optional bool pending = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->pending(), target);
  }

  // optional bool active = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->active(), target);
  }

  // optional bool active_top = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->active_top(), target);
  }

  // repeated .com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount stop_reasons = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_reasons_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->stop_reasons(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.DataSetProto.PackageEntryProto)
  return target;
}

size_t DataSetProto_PackageEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.DataSetProto.PackageEntryProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.DataSetProto.PackageEntryProto.StopReasonCount stop_reasons = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_reasons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stop_reasons(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string package_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .com.android.server.job.DataSetProto.PackageEntryProto.State pending_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_state_);
    }

    // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_state_);
    }

    // optional .com.android.server.job.DataSetProto.PackageEntryProto.State active_top_state = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_top_state_);
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool pending = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool active = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool active_top = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSetProto_PackageEntryProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.DataSetProto.PackageEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSetProto_PackageEntryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSetProto_PackageEntryProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.DataSetProto.PackageEntryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.DataSetProto.PackageEntryProto)
    MergeFrom(*source);
  }
}

void DataSetProto_PackageEntryProto::MergeFrom(const DataSetProto_PackageEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.DataSetProto.PackageEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_reasons_.MergeFrom(from.stop_reasons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pending_state()->::com::android::server::job::DataSetProto_PackageEntryProto_State::MergeFrom(from.pending_state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_active_state()->::com::android::server::job::DataSetProto_PackageEntryProto_State::MergeFrom(from.active_state());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_active_top_state()->::com::android::server::job::DataSetProto_PackageEntryProto_State::MergeFrom(from.active_top_state());
    }
    if (cached_has_bits & 0x00000010u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000020u) {
      pending_ = from.pending_;
    }
    if (cached_has_bits & 0x00000040u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000080u) {
      active_top_ = from.active_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSetProto_PackageEntryProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.DataSetProto.PackageEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSetProto_PackageEntryProto::CopyFrom(const DataSetProto_PackageEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.DataSetProto.PackageEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSetProto_PackageEntryProto::IsInitialized() const {
  return true;
}

void DataSetProto_PackageEntryProto::InternalSwap(DataSetProto_PackageEntryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stop_reasons_)->InternalSwap(CastToBase(&other->stop_reasons_));
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pending_state_, other->pending_state_);
  swap(active_state_, other->active_state_);
  swap(active_top_state_, other->active_top_state_);
  swap(uid_, other->uid_);
  swap(pending_, other->pending_);
  swap(active_, other->active_);
  swap(active_top_, other->active_top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSetProto_PackageEntryProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSetProto::InitAsDefaultInstance() {
}
class DataSetProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSetProto>()._has_bits_);
  static void set_has_start_clock_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elapsed_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_concurrency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_foreground_concurrency(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DataSetProto::DataSetProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.DataSetProto)
}
DataSetProto::DataSetProto(const DataSetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      package_entries_(from.package_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_clock_time_ms_, &from.start_clock_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_foreground_concurrency_) -
    reinterpret_cast<char*>(&start_clock_time_ms_)) + sizeof(max_foreground_concurrency_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.DataSetProto)
}

void DataSetProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&start_clock_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_foreground_concurrency_) -
      reinterpret_cast<char*>(&start_clock_time_ms_)) + sizeof(max_foreground_concurrency_));
}

DataSetProto::~DataSetProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.DataSetProto)
  SharedDtor();
}

void DataSetProto::SharedDtor() {
}

void DataSetProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSetProto& DataSetProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void DataSetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.DataSetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&start_clock_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_foreground_concurrency_) -
        reinterpret_cast<char*>(&start_clock_time_ms_)) + sizeof(max_foreground_concurrency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataSetProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start_clock_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_clock_time_ms(&has_bits);
          start_clock_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 elapsed_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_elapsed_time_ms(&has_bits);
          elapsed_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 period_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_period_ms(&has_bits);
          period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.DataSetProto.PackageEntryProto package_entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_package_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional int32 max_concurrency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_concurrency(&has_bits);
          max_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_foreground_concurrency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_foreground_concurrency(&has_bits);
          max_foreground_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataSetProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.DataSetProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_clock_time_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_clock_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_clock_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 elapsed_time_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_elapsed_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.DataSetProto.PackageEntryProto package_entries = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_package_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_concurrency = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_max_concurrency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_concurrency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_foreground_concurrency = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_max_foreground_concurrency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_foreground_concurrency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.DataSetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.DataSetProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataSetProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.DataSetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_clock_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start_clock_time_ms(), output);
  }

  // optional int64 elapsed_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->elapsed_time_ms(), output);
  }

  // optional int64 period_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->period_ms(), output);
  }

  // repeated .com.android.server.job.DataSetProto.PackageEntryProto package_entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->package_entries(static_cast<int>(i)),
      output);
  }

  // optional int32 max_concurrency = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->max_concurrency(), output);
  }

  // optional int32 max_foreground_concurrency = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->max_foreground_concurrency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.DataSetProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSetProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.DataSetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_clock_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->start_clock_time_ms(), target);
  }

  // optional int64 elapsed_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->elapsed_time_ms(), target);
  }

  // optional int64 period_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->period_ms(), target);
  }

  // repeated .com.android.server.job.DataSetProto.PackageEntryProto package_entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->package_entries(static_cast<int>(i)), target);
  }

  // optional int32 max_concurrency = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->max_concurrency(), target);
  }

  // optional int32 max_foreground_concurrency = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->max_foreground_concurrency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.DataSetProto)
  return target;
}

size_t DataSetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.DataSetProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.DataSetProto.PackageEntryProto package_entries = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->package_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->package_entries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 start_clock_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_clock_time_ms());
    }

    // optional int64 elapsed_time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->elapsed_time_ms());
    }

    // optional int64 period_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->period_ms());
    }

    // optional int32 max_concurrency = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_concurrency());
    }

    // optional int32 max_foreground_concurrency = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_foreground_concurrency());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSetProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.DataSetProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSetProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSetProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.DataSetProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.DataSetProto)
    MergeFrom(*source);
  }
}

void DataSetProto::MergeFrom(const DataSetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.DataSetProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_entries_.MergeFrom(from.package_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      start_clock_time_ms_ = from.start_clock_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      elapsed_time_ms_ = from.elapsed_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      period_ms_ = from.period_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_concurrency_ = from.max_concurrency_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_foreground_concurrency_ = from.max_foreground_concurrency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSetProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.DataSetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSetProto::CopyFrom(const DataSetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.DataSetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSetProto::IsInitialized() const {
  return true;
}

void DataSetProto::InternalSwap(DataSetProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&package_entries_)->InternalSwap(CastToBase(&other->package_entries_));
  swap(start_clock_time_ms_, other->start_clock_time_ms_);
  swap(elapsed_time_ms_, other->elapsed_time_ms_);
  swap(period_ms_, other->period_ms_);
  swap(max_concurrency_, other->max_concurrency_);
  swap(max_foreground_concurrency_, other->max_foreground_concurrency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSetProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrantedUriPermissionsDumpProto::InitAsDefaultInstance() {
}
class GrantedUriPermissionsDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GrantedUriPermissionsDumpProto>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_permission_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GrantedUriPermissionsDumpProto::GrantedUriPermissionsDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.GrantedUriPermissionsDumpProto)
}
GrantedUriPermissionsDumpProto::GrantedUriPermissionsDumpProto(const GrantedUriPermissionsDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      uris_(from.uris_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  permission_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_permission_owner()) {
    permission_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_owner_);
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_user_id_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(source_user_id_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.GrantedUriPermissionsDumpProto)
}

void GrantedUriPermissionsDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_user_id_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(source_user_id_));
}

GrantedUriPermissionsDumpProto::~GrantedUriPermissionsDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.GrantedUriPermissionsDumpProto)
  SharedDtor();
}

void GrantedUriPermissionsDumpProto::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GrantedUriPermissionsDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrantedUriPermissionsDumpProto& GrantedUriPermissionsDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrantedUriPermissionsDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void GrantedUriPermissionsDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uris_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      permission_owner_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_user_id_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(source_user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GrantedUriPermissionsDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 flags = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_user_id = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_user_id(&has_bits);
          source_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.job.GrantedUriPermissionsDumpProto.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string permission_owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_permission_owner(), ptr, ctx, "com.android.server.job.GrantedUriPermissionsDumpProto.permission_owner");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string uris = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_uris(), ptr, ctx, "com.android.server.job.GrantedUriPermissionsDumpProto.uris");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GrantedUriPermissionsDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flags = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_user_id = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.GrantedUriPermissionsDumpProto.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string permission_owner = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_permission_owner()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->permission_owner().data(), static_cast<int>(this->permission_owner().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.GrantedUriPermissionsDumpProto.permission_owner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string uris = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_uris()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uris(this->uris_size() - 1).data(),
            static_cast<int>(this->uris(this->uris_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.GrantedUriPermissionsDumpProto.uris");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.GrantedUriPermissionsDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.GrantedUriPermissionsDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GrantedUriPermissionsDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flags = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->flags(), output);
  }

  // optional int32 source_user_id = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_user_id(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.GrantedUriPermissionsDumpProto.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional string permission_owner = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission_owner().data(), static_cast<int>(this->permission_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.GrantedUriPermissionsDumpProto.permission_owner");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->permission_owner(), output);
  }

  // repeated string uris = 5;
  for (int i = 0, n = this->uris_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uris(i).data(), static_cast<int>(this->uris(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.GrantedUriPermissionsDumpProto.uris");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.GrantedUriPermissionsDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantedUriPermissionsDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flags = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->flags(), target);
  }

  // optional int32 source_user_id = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_user_id(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.GrantedUriPermissionsDumpProto.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional string permission_owner = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission_owner().data(), static_cast<int>(this->permission_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.GrantedUriPermissionsDumpProto.permission_owner");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->permission_owner(), target);
  }

  // repeated string uris = 5;
  for (int i = 0, n = this->uris_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uris(i).data(), static_cast<int>(this->uris(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.GrantedUriPermissionsDumpProto.uris");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.GrantedUriPermissionsDumpProto)
  return target;
}

size_t GrantedUriPermissionsDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string uris = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->uris_size());
  for (int i = 0, n = this->uris_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->uris(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string tag = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string permission_owner = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->permission_owner());
    }

    // optional int32 flags = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional int32 source_user_id = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantedUriPermissionsDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantedUriPermissionsDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantedUriPermissionsDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.GrantedUriPermissionsDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.GrantedUriPermissionsDumpProto)
    MergeFrom(*source);
  }
}

void GrantedUriPermissionsDumpProto::MergeFrom(const GrantedUriPermissionsDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uris_.MergeFrom(from.uris_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      permission_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_owner_);
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_user_id_ = from.source_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GrantedUriPermissionsDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantedUriPermissionsDumpProto::CopyFrom(const GrantedUriPermissionsDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.GrantedUriPermissionsDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantedUriPermissionsDumpProto::IsInitialized() const {
  return true;
}

void GrantedUriPermissionsDumpProto::InternalSwap(GrantedUriPermissionsDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uris_.InternalSwap(CastToBase(&other->uris_));
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  permission_owner_.Swap(&other->permission_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
  swap(source_user_id_, other->source_user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantedUriPermissionsDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobPackageTrackerDumpProto::InitAsDefaultInstance() {
  ::com::android::server::job::_JobPackageTrackerDumpProto_default_instance_._instance.get_mutable()->current_stats_ = const_cast< ::com::android::server::job::DataSetProto*>(
      ::com::android::server::job::DataSetProto::internal_default_instance());
}
class JobPackageTrackerDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobPackageTrackerDumpProto>()._has_bits_);
  static const ::com::android::server::job::DataSetProto& current_stats(const JobPackageTrackerDumpProto* msg);
  static void set_has_current_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::job::DataSetProto&
JobPackageTrackerDumpProto::_Internal::current_stats(const JobPackageTrackerDumpProto* msg) {
  return *msg->current_stats_;
}
JobPackageTrackerDumpProto::JobPackageTrackerDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobPackageTrackerDumpProto)
}
JobPackageTrackerDumpProto::JobPackageTrackerDumpProto(const JobPackageTrackerDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      historical_stats_(from.historical_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_stats()) {
    current_stats_ = new ::com::android::server::job::DataSetProto(*from.current_stats_);
  } else {
    current_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobPackageTrackerDumpProto)
}

void JobPackageTrackerDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  current_stats_ = nullptr;
}

JobPackageTrackerDumpProto::~JobPackageTrackerDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobPackageTrackerDumpProto)
  SharedDtor();
}

void JobPackageTrackerDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete current_stats_;
}

void JobPackageTrackerDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobPackageTrackerDumpProto& JobPackageTrackerDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobPackageTrackerDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobPackageTrackerDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobPackageTrackerDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  historical_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(current_stats_ != nullptr);
    current_stats_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobPackageTrackerDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.job.DataSetProto historical_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_historical_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.DataSetProto current_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_current_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobPackageTrackerDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobPackageTrackerDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.job.DataSetProto historical_stats = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_historical_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.DataSetProto current_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobPackageTrackerDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobPackageTrackerDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobPackageTrackerDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobPackageTrackerDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.DataSetProto historical_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->historical_stats(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.DataSetProto current_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::current_stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobPackageTrackerDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobPackageTrackerDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobPackageTrackerDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.DataSetProto historical_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->historical_stats(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.DataSetProto current_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::current_stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobPackageTrackerDumpProto)
  return target;
}

size_t JobPackageTrackerDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobPackageTrackerDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.DataSetProto historical_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->historical_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->historical_stats(static_cast<int>(i)));
    }
  }

  // optional .com.android.server.job.DataSetProto current_stats = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_stats_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobPackageTrackerDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobPackageTrackerDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobPackageTrackerDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobPackageTrackerDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobPackageTrackerDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobPackageTrackerDumpProto)
    MergeFrom(*source);
  }
}

void JobPackageTrackerDumpProto::MergeFrom(const JobPackageTrackerDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobPackageTrackerDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  historical_stats_.MergeFrom(from.historical_stats_);
  if (from.has_current_stats()) {
    mutable_current_stats()->::com::android::server::job::DataSetProto::MergeFrom(from.current_stats());
  }
}

void JobPackageTrackerDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobPackageTrackerDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobPackageTrackerDumpProto::CopyFrom(const JobPackageTrackerDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobPackageTrackerDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobPackageTrackerDumpProto::IsInitialized() const {
  return true;
}

void JobPackageTrackerDumpProto::InternalSwap(JobPackageTrackerDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&historical_stats_)->InternalSwap(CastToBase(&other->historical_stats_));
  swap(current_stats_, other->current_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobPackageTrackerDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobPackageHistoryProto_HistoryEvent::InitAsDefaultInstance() {
}
class JobPackageHistoryProto_HistoryEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<JobPackageHistoryProto_HistoryEvent>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_since_event_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_job_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

JobPackageHistoryProto_HistoryEvent::JobPackageHistoryProto_HistoryEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
}
JobPackageHistoryProto_HistoryEvent::JobPackageHistoryProto_HistoryEvent(const JobPackageHistoryProto_HistoryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&time_since_event_ms_, &from.time_since_event_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_reason_) -
    reinterpret_cast<char*>(&time_since_event_ms_)) + sizeof(stop_reason_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
}

void JobPackageHistoryProto_HistoryEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_since_event_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_id_) -
      reinterpret_cast<char*>(&time_since_event_ms_)) + sizeof(job_id_));
  stop_reason_ = -1;
}

JobPackageHistoryProto_HistoryEvent::~JobPackageHistoryProto_HistoryEvent() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  SharedDtor();
}

void JobPackageHistoryProto_HistoryEvent::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobPackageHistoryProto_HistoryEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobPackageHistoryProto_HistoryEvent& JobPackageHistoryProto_HistoryEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobPackageHistoryProto_HistoryEvent_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobPackageHistoryProto_HistoryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&time_since_event_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&job_id_) -
        reinterpret_cast<char*>(&time_since_event_ms_)) + sizeof(job_id_));
    stop_reason_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobPackageHistoryProto_HistoryEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobPackageHistoryProto.Event event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::JobPackageHistoryProto_Event_IsValid(val))) {
            set_event(static_cast<::com::android::server::job::JobPackageHistoryProto_Event>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_event_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_since_event_ms(&has_bits);
          time_since_event_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 job_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_job_id(&has_bits);
          job_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.job.JobPackageHistoryProto.HistoryEvent.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.job.InternalStopReasonEnum stop_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::job::InternalStopReasonEnum_IsValid(val))) {
            set_stop_reason(static_cast<::android::app::job::InternalStopReasonEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobPackageHistoryProto_HistoryEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobPackageHistoryProto.Event event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::JobPackageHistoryProto_Event_IsValid(value)) {
            set_event(static_cast< ::com::android::server::job::JobPackageHistoryProto_Event >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_event_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_time_since_event_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_event_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 job_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_job_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobPackageHistoryProto.HistoryEvent.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.job.InternalStopReasonEnum stop_reason = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::job::InternalStopReasonEnum_IsValid(value)) {
            set_stop_reason(static_cast< ::android::app::job::InternalStopReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobPackageHistoryProto_HistoryEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobPackageHistoryProto.Event event = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // optional int64 time_since_event_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->time_since_event_ms(), output);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional int32 job_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->job_id(), output);
  }

  // optional string tag = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobPackageHistoryProto.HistoryEvent.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tag(), output);
  }

  // optional .android.app.job.InternalStopReasonEnum stop_reason = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->stop_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobPackageHistoryProto_HistoryEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobPackageHistoryProto.Event event = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // optional int64 time_since_event_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->time_since_event_ms(), target);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // optional int32 job_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->job_id(), target);
  }

  // optional string tag = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobPackageHistoryProto.HistoryEvent.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->tag(), target);
  }

  // optional .android.app.job.InternalStopReasonEnum stop_reason = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->stop_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  return target;
}

size_t JobPackageHistoryProto_HistoryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tag = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional int64 time_since_event_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_event_ms());
    }

    // optional .com.android.server.job.JobPackageHistoryProto.Event event = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 job_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->job_id());
    }

    // optional .android.app.job.InternalStopReasonEnum stop_reason = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stop_reason());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobPackageHistoryProto_HistoryEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const JobPackageHistoryProto_HistoryEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobPackageHistoryProto_HistoryEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
    MergeFrom(*source);
  }
}

void JobPackageHistoryProto_HistoryEvent::MergeFrom(const JobPackageHistoryProto_HistoryEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_since_event_ms_ = from.time_since_event_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      job_id_ = from.job_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_reason_ = from.stop_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobPackageHistoryProto_HistoryEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobPackageHistoryProto_HistoryEvent::CopyFrom(const JobPackageHistoryProto_HistoryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobPackageHistoryProto.HistoryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobPackageHistoryProto_HistoryEvent::IsInitialized() const {
  return true;
}

void JobPackageHistoryProto_HistoryEvent::InternalSwap(JobPackageHistoryProto_HistoryEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_since_event_ms_, other->time_since_event_ms_);
  swap(event_, other->event_);
  swap(uid_, other->uid_);
  swap(job_id_, other->job_id_);
  swap(stop_reason_, other->stop_reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobPackageHistoryProto_HistoryEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobPackageHistoryProto::InitAsDefaultInstance() {
}
class JobPackageHistoryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobPackageHistoryProto>()._has_bits_);
};

JobPackageHistoryProto::JobPackageHistoryProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobPackageHistoryProto)
}
JobPackageHistoryProto::JobPackageHistoryProto(const JobPackageHistoryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      history_event_(from.history_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobPackageHistoryProto)
}

void JobPackageHistoryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
}

JobPackageHistoryProto::~JobPackageHistoryProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobPackageHistoryProto)
  SharedDtor();
}

void JobPackageHistoryProto::SharedDtor() {
}

void JobPackageHistoryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobPackageHistoryProto& JobPackageHistoryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobPackageHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobPackageHistoryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobPackageHistoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_event_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobPackageHistoryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.job.JobPackageHistoryProto.HistoryEvent history_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_history_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobPackageHistoryProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobPackageHistoryProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.job.JobPackageHistoryProto.HistoryEvent history_event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_history_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobPackageHistoryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobPackageHistoryProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobPackageHistoryProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobPackageHistoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.JobPackageHistoryProto.HistoryEvent history_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_event_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->history_event(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobPackageHistoryProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobPackageHistoryProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobPackageHistoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.job.JobPackageHistoryProto.HistoryEvent history_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_event_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->history_event(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobPackageHistoryProto)
  return target;
}

size_t JobPackageHistoryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobPackageHistoryProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.JobPackageHistoryProto.HistoryEvent history_event = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->history_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->history_event(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobPackageHistoryProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobPackageHistoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobPackageHistoryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobPackageHistoryProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobPackageHistoryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobPackageHistoryProto)
    MergeFrom(*source);
  }
}

void JobPackageHistoryProto::MergeFrom(const JobPackageHistoryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobPackageHistoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_event_.MergeFrom(from.history_event_);
}

void JobPackageHistoryProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobPackageHistoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobPackageHistoryProto::CopyFrom(const JobPackageHistoryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobPackageHistoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobPackageHistoryProto::IsInitialized() const {
  return true;
}

void JobPackageHistoryProto::InternalSwap(JobPackageHistoryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&history_event_)->InternalSwap(CastToBase(&other->history_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobPackageHistoryProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusShortInfoProto::InitAsDefaultInstance() {
}
class JobStatusShortInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStatusShortInfoProto>()._has_bits_);
  static void set_has_calling_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_job_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_battery_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

JobStatusShortInfoProto::JobStatusShortInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStatusShortInfoProto)
}
JobStatusShortInfoProto::JobStatusShortInfoProto(const JobStatusShortInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_battery_name()) {
    battery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battery_name_);
  }
  ::memcpy(&calling_uid_, &from.calling_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_id_) -
    reinterpret_cast<char*>(&calling_uid_)) + sizeof(job_id_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStatusShortInfoProto)
}

void JobStatusShortInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  battery_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&calling_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_id_) -
      reinterpret_cast<char*>(&calling_uid_)) + sizeof(job_id_));
}

JobStatusShortInfoProto::~JobStatusShortInfoProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStatusShortInfoProto)
  SharedDtor();
}

void JobStatusShortInfoProto::SharedDtor() {
  battery_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobStatusShortInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusShortInfoProto& JobStatusShortInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusShortInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStatusShortInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStatusShortInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    battery_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&calling_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&job_id_) -
        reinterpret_cast<char*>(&calling_uid_)) + sizeof(job_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStatusShortInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 calling_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_calling_uid(&has_bits);
          calling_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 job_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_job_id(&has_bits);
          job_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battery_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_battery_name(), ptr, ctx, "com.android.server.job.JobStatusShortInfoProto.battery_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStatusShortInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStatusShortInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 calling_uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_calling_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &calling_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 job_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_job_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string battery_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_battery_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battery_name().data(), static_cast<int>(this->battery_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobStatusShortInfoProto.battery_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStatusShortInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStatusShortInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStatusShortInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStatusShortInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 calling_uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->calling_uid(), output);
  }

  // optional int32 job_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->job_id(), output);
  }

  // optional string battery_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battery_name().data(), static_cast<int>(this->battery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusShortInfoProto.battery_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->battery_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStatusShortInfoProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusShortInfoProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStatusShortInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 calling_uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->calling_uid(), target);
  }

  // optional int32 job_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->job_id(), target);
  }

  // optional string battery_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battery_name().data(), static_cast<int>(this->battery_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusShortInfoProto.battery_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->battery_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStatusShortInfoProto)
  return target;
}

size_t JobStatusShortInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStatusShortInfoProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string battery_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->battery_name());
    }

    // optional int32 calling_uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->calling_uid());
    }

    // optional int32 job_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->job_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusShortInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStatusShortInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusShortInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusShortInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStatusShortInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStatusShortInfoProto)
    MergeFrom(*source);
  }
}

void JobStatusShortInfoProto::MergeFrom(const JobStatusShortInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStatusShortInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      battery_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battery_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      calling_uid_ = from.calling_uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      job_id_ = from.job_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStatusShortInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStatusShortInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusShortInfoProto::CopyFrom(const JobStatusShortInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStatusShortInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusShortInfoProto::IsInitialized() const {
  return true;
}

void JobStatusShortInfoProto::InternalSwap(JobStatusShortInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  battery_name_.Swap(&other->battery_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(calling_uid_, other->calling_uid_);
  swap(job_id_, other->job_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusShortInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusDumpProto_JobInfo_TriggerContentUri::InitAsDefaultInstance() {
}
class JobStatusDumpProto_JobInfo_TriggerContentUri::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStatusDumpProto_JobInfo_TriggerContentUri>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

JobStatusDumpProto_JobInfo_TriggerContentUri::JobStatusDumpProto_JobInfo_TriggerContentUri()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
}
JobStatusDumpProto_JobInfo_TriggerContentUri::JobStatusDumpProto_JobInfo_TriggerContentUri(const JobStatusDumpProto_JobInfo_TriggerContentUri& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_ = 0;
}

JobStatusDumpProto_JobInfo_TriggerContentUri::~JobStatusDumpProto_JobInfo_TriggerContentUri() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  SharedDtor();
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::SharedDtor() {
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusDumpProto_JobInfo_TriggerContentUri& JobStatusDumpProto_JobInfo_TriggerContentUri::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusDumpProto_JobInfo_TriggerContentUri_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStatusDumpProto_JobInfo_TriggerContentUri::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uri_.ClearNonDefaultToEmptyNoArena();
  }
  flags_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStatusDumpProto_JobInfo_TriggerContentUri::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 flags = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uri = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_uri(), ptr, ctx, "com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStatusDumpProto_JobInfo_TriggerContentUri::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flags = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uri = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStatusDumpProto_JobInfo_TriggerContentUri::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flags = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->flags(), output);
  }

  // optional string uri = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri.uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusDumpProto_JobInfo_TriggerContentUri::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flags = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->flags(), target);
  }

  // optional string uri = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri.uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  return target;
}

size_t JobStatusDumpProto_JobInfo_TriggerContentUri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uri = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional int32 flags = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusDumpProto_JobInfo_TriggerContentUri* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusDumpProto_JobInfo_TriggerContentUri>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
    MergeFrom(*source);
  }
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::MergeFrom(const JobStatusDumpProto_JobInfo_TriggerContentUri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::CopyFrom(const JobStatusDumpProto_JobInfo_TriggerContentUri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusDumpProto_JobInfo_TriggerContentUri::IsInitialized() const {
  return true;
}

void JobStatusDumpProto_JobInfo_TriggerContentUri::InternalSwap(JobStatusDumpProto_JobInfo_TriggerContentUri* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusDumpProto_JobInfo_TriggerContentUri::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusDumpProto_JobInfo_Backoff::InitAsDefaultInstance() {
}
class JobStatusDumpProto_JobInfo_Backoff::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStatusDumpProto_JobInfo_Backoff>()._has_bits_);
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial_backoff_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

JobStatusDumpProto_JobInfo_Backoff::JobStatusDumpProto_JobInfo_Backoff()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
}
JobStatusDumpProto_JobInfo_Backoff::JobStatusDumpProto_JobInfo_Backoff(const JobStatusDumpProto_JobInfo_Backoff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&initial_backoff_ms_, &from.initial_backoff_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&policy_) -
    reinterpret_cast<char*>(&initial_backoff_ms_)) + sizeof(policy_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
}

void JobStatusDumpProto_JobInfo_Backoff::SharedCtor() {
  ::memset(&initial_backoff_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&policy_) -
      reinterpret_cast<char*>(&initial_backoff_ms_)) + sizeof(policy_));
}

JobStatusDumpProto_JobInfo_Backoff::~JobStatusDumpProto_JobInfo_Backoff() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  SharedDtor();
}

void JobStatusDumpProto_JobInfo_Backoff::SharedDtor() {
}

void JobStatusDumpProto_JobInfo_Backoff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusDumpProto_JobInfo_Backoff& JobStatusDumpProto_JobInfo_Backoff::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusDumpProto_JobInfo_Backoff_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStatusDumpProto_JobInfo_Backoff::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&initial_backoff_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&policy_) -
        reinterpret_cast<char*>(&initial_backoff_ms_)) + sizeof(policy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStatusDumpProto_JobInfo_Backoff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff_Policy_IsValid(val))) {
            set_policy(static_cast<::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff_Policy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 initial_backoff_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_initial_backoff_ms(&has_bits);
          initial_backoff_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStatusDumpProto_JobInfo_Backoff::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff.Policy policy = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff_Policy_IsValid(value)) {
            set_policy(static_cast< ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff_Policy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 initial_backoff_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_initial_backoff_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &initial_backoff_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStatusDumpProto_JobInfo_Backoff::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff.Policy policy = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->policy(), output);
  }

  // optional int64 initial_backoff_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->initial_backoff_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusDumpProto_JobInfo_Backoff::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff.Policy policy = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->policy(), target);
  }

  // optional int64 initial_backoff_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->initial_backoff_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  return target;
}

size_t JobStatusDumpProto_JobInfo_Backoff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 initial_backoff_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->initial_backoff_ms());
    }

    // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff.Policy policy = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->policy());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusDumpProto_JobInfo_Backoff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusDumpProto_JobInfo_Backoff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusDumpProto_JobInfo_Backoff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
    MergeFrom(*source);
  }
}

void JobStatusDumpProto_JobInfo_Backoff::MergeFrom(const JobStatusDumpProto_JobInfo_Backoff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      initial_backoff_ms_ = from.initial_backoff_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      policy_ = from.policy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStatusDumpProto_JobInfo_Backoff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusDumpProto_JobInfo_Backoff::CopyFrom(const JobStatusDumpProto_JobInfo_Backoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStatusDumpProto.JobInfo.Backoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusDumpProto_JobInfo_Backoff::IsInitialized() const {
  return true;
}

void JobStatusDumpProto_JobInfo_Backoff::InternalSwap(JobStatusDumpProto_JobInfo_Backoff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(initial_backoff_ms_, other->initial_backoff_ms_);
  swap(policy_, other->policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusDumpProto_JobInfo_Backoff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusDumpProto_JobInfo::InitAsDefaultInstance() {
  ::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_._instance.get_mutable()->service_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_._instance.get_mutable()->extras_ = const_cast< ::android::os::PersistableBundleProto*>(
      ::android::os::PersistableBundleProto::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_._instance.get_mutable()->transient_extras_ = const_cast< ::android::os::BundleProto*>(
      ::android::os::BundleProto::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_._instance.get_mutable()->clip_data_ = const_cast< ::android::content::ClipDataProto*>(
      ::android::content::ClipDataProto::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_._instance.get_mutable()->granted_uri_permissions_ = const_cast< ::com::android::server::job::GrantedUriPermissionsDumpProto*>(
      ::com::android::server::job::GrantedUriPermissionsDumpProto::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_._instance.get_mutable()->required_network_ = const_cast< ::android::net::NetworkRequestProto*>(
      ::android::net::NetworkRequestProto::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_JobInfo_default_instance_._instance.get_mutable()->backoff_policy_ = const_cast< ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff*>(
      ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff::internal_default_instance());
}
class JobStatusDumpProto_JobInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStatusDumpProto_JobInfo>()._has_bits_);
  static const ::android::content::ComponentNameProto& service(const JobStatusDumpProto_JobInfo* msg);
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_periodic(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_period_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_period_flex_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_persisted(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_requires_charging(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_requires_battery_not_low(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_requires_device_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_trigger_content_update_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_trigger_content_max_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::os::PersistableBundleProto& extras(const JobStatusDumpProto_JobInfo* msg);
  static void set_has_extras(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::BundleProto& transient_extras(const JobStatusDumpProto_JobInfo* msg);
  static void set_has_transient_extras(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::content::ClipDataProto& clip_data(const JobStatusDumpProto_JobInfo* msg);
  static void set_has_clip_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::job::GrantedUriPermissionsDumpProto& granted_uri_permissions(const JobStatusDumpProto_JobInfo* msg);
  static void set_has_granted_uri_permissions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::net::NetworkRequestProto& required_network(const JobStatusDumpProto_JobInfo* msg);
  static void set_has_required_network(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_network_download_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_total_network_upload_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_min_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_execution_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff& backoff_policy(const JobStatusDumpProto_JobInfo* msg);
  static void set_has_backoff_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_early_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_has_late_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::android::content::ComponentNameProto&
JobStatusDumpProto_JobInfo::_Internal::service(const JobStatusDumpProto_JobInfo* msg) {
  return *msg->service_;
}
const ::android::os::PersistableBundleProto&
JobStatusDumpProto_JobInfo::_Internal::extras(const JobStatusDumpProto_JobInfo* msg) {
  return *msg->extras_;
}
const ::android::os::BundleProto&
JobStatusDumpProto_JobInfo::_Internal::transient_extras(const JobStatusDumpProto_JobInfo* msg) {
  return *msg->transient_extras_;
}
const ::android::content::ClipDataProto&
JobStatusDumpProto_JobInfo::_Internal::clip_data(const JobStatusDumpProto_JobInfo* msg) {
  return *msg->clip_data_;
}
const ::com::android::server::job::GrantedUriPermissionsDumpProto&
JobStatusDumpProto_JobInfo::_Internal::granted_uri_permissions(const JobStatusDumpProto_JobInfo* msg) {
  return *msg->granted_uri_permissions_;
}
const ::android::net::NetworkRequestProto&
JobStatusDumpProto_JobInfo::_Internal::required_network(const JobStatusDumpProto_JobInfo* msg) {
  return *msg->required_network_;
}
const ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff&
JobStatusDumpProto_JobInfo::_Internal::backoff_policy(const JobStatusDumpProto_JobInfo* msg) {
  return *msg->backoff_policy_;
}
void JobStatusDumpProto_JobInfo::clear_service() {
  if (service_ != nullptr) service_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void JobStatusDumpProto_JobInfo::clear_extras() {
  if (extras_ != nullptr) extras_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void JobStatusDumpProto_JobInfo::clear_transient_extras() {
  if (transient_extras_ != nullptr) transient_extras_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void JobStatusDumpProto_JobInfo::clear_clip_data() {
  if (clip_data_ != nullptr) clip_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void JobStatusDumpProto_JobInfo::clear_required_network() {
  if (required_network_ != nullptr) required_network_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
JobStatusDumpProto_JobInfo::JobStatusDumpProto_JobInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStatusDumpProto.JobInfo)
}
JobStatusDumpProto_JobInfo::JobStatusDumpProto_JobInfo(const JobStatusDumpProto_JobInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trigger_content_uris_(from.trigger_content_uris_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    service_ = new ::android::content::ComponentNameProto(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from.has_extras()) {
    extras_ = new ::android::os::PersistableBundleProto(*from.extras_);
  } else {
    extras_ = nullptr;
  }
  if (from.has_transient_extras()) {
    transient_extras_ = new ::android::os::BundleProto(*from.transient_extras_);
  } else {
    transient_extras_ = nullptr;
  }
  if (from.has_clip_data()) {
    clip_data_ = new ::android::content::ClipDataProto(*from.clip_data_);
  } else {
    clip_data_ = nullptr;
  }
  if (from.has_granted_uri_permissions()) {
    granted_uri_permissions_ = new ::com::android::server::job::GrantedUriPermissionsDumpProto(*from.granted_uri_permissions_);
  } else {
    granted_uri_permissions_ = nullptr;
  }
  if (from.has_required_network()) {
    required_network_ = new ::android::net::NetworkRequestProto(*from.required_network_);
  } else {
    required_network_ = nullptr;
  }
  if (from.has_backoff_policy()) {
    backoff_policy_ = new ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff(*from.backoff_policy_);
  } else {
    backoff_policy_ = nullptr;
  }
  ::memcpy(&period_interval_ms_, &from.period_interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_network_upload_bytes_) -
    reinterpret_cast<char*>(&period_interval_ms_)) + sizeof(total_network_upload_bytes_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStatusDumpProto.JobInfo)
}

void JobStatusDumpProto_JobInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_network_upload_bytes_) -
      reinterpret_cast<char*>(&service_)) + sizeof(total_network_upload_bytes_));
}

JobStatusDumpProto_JobInfo::~JobStatusDumpProto_JobInfo() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStatusDumpProto.JobInfo)
  SharedDtor();
}

void JobStatusDumpProto_JobInfo::SharedDtor() {
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete extras_;
  if (this != internal_default_instance()) delete transient_extras_;
  if (this != internal_default_instance()) delete clip_data_;
  if (this != internal_default_instance()) delete granted_uri_permissions_;
  if (this != internal_default_instance()) delete required_network_;
  if (this != internal_default_instance()) delete backoff_policy_;
}

void JobStatusDumpProto_JobInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusDumpProto_JobInfo& JobStatusDumpProto_JobInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusDumpProto_JobInfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStatusDumpProto_JobInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trigger_content_uris_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(service_ != nullptr);
      service_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(extras_ != nullptr);
      extras_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transient_extras_ != nullptr);
      transient_extras_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(clip_data_ != nullptr);
      clip_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(granted_uri_permissions_ != nullptr);
      granted_uri_permissions_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(required_network_ != nullptr);
      required_network_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(backoff_policy_ != nullptr);
      backoff_policy_->Clear();
    }
  }
  period_interval_ms_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&period_flex_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_content_max_delay_ms_) -
        reinterpret_cast<char*>(&period_flex_ms_)) + sizeof(trigger_content_max_delay_ms_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_network_upload_bytes_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(total_network_upload_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStatusDumpProto_JobInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ComponentNameProto service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_periodic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_periodic(&has_bits);
          is_periodic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 period_interval_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_period_interval_ms(&has_bits);
          period_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 period_flex_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_period_flex_ms(&has_bits);
          period_flex_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_persisted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_persisted(&has_bits);
          is_persisted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_charging = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_requires_charging(&has_bits);
          requires_charging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_battery_not_low = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_requires_battery_not_low(&has_bits);
          requires_battery_not_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_device_idle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_requires_device_idle(&has_bits);
          requires_device_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri trigger_content_uris = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trigger_content_uris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // optional int64 trigger_content_update_delay_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_trigger_content_update_delay_ms(&has_bits);
          trigger_content_update_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trigger_content_max_delay_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_trigger_content_max_delay_ms(&has_bits);
          trigger_content_max_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.PersistableBundleProto extras = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_extras(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.BundleProto transient_extras = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_transient_extras(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ClipDataProto clip_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_clip_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.GrantedUriPermissionsDumpProto granted_uri_permissions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_granted_uri_permissions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.net.NetworkRequestProto required_network = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_required_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_latency_ms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_min_latency_ms(&has_bits);
          min_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_execution_delay_ms = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_max_execution_delay_ms(&has_bits);
          max_execution_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff backoff_policy = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_backoff_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_early_constraint = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_has_early_constraint(&has_bits);
          has_early_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_late_constraint = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_has_late_constraint(&has_bits);
          has_late_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_network_download_bytes = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_total_network_download_bytes(&has_bits);
          total_network_download_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_network_upload_bytes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_total_network_upload_bytes(&has_bits);
          total_network_upload_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStatusDumpProto_JobInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ComponentNameProto service = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_periodic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_periodic(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_periodic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_interval_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_period_interval_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_flex_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_period_flex_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_flex_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_persisted = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_persisted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_persisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 priority = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_priority(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_charging = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_requires_charging(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_charging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_battery_not_low = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_requires_battery_not_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_battery_not_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_device_idle = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_requires_device_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_device_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri trigger_content_uris = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trigger_content_uris()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_content_update_delay_ms = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_trigger_content_update_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_content_update_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_content_max_delay_ms = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_trigger_content_max_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_content_max_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.PersistableBundleProto extras = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extras()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.BundleProto transient_extras = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transient_extras()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ClipDataProto clip_data = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clip_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.GrantedUriPermissionsDumpProto granted_uri_permissions = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_granted_uri_permissions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.net.NetworkRequestProto required_network = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_required_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_latency_ms = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_min_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_execution_delay_ms = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_max_execution_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_execution_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff backoff_policy = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_backoff_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_early_constraint = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_has_early_constraint(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_early_constraint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_late_constraint = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_has_late_constraint(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_late_constraint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_network_download_bytes = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_total_network_download_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_network_download_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_network_upload_bytes = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_total_network_upload_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_network_upload_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStatusDumpProto.JobInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStatusDumpProto.JobInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStatusDumpProto_JobInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto service = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::service(this), output);
  }

  // optional bool is_periodic = 2;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_periodic(), output);
  }

  // optional int64 period_interval_ms = 3;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->period_interval_ms(), output);
  }

  // optional int64 period_flex_ms = 4;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->period_flex_ms(), output);
  }

  // optional bool is_persisted = 5;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_persisted(), output);
  }

  // optional sint32 priority = 6;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(6, this->priority(), output);
  }

  // optional int32 flags = 7;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->flags(), output);
  }

  // optional bool requires_charging = 8;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->requires_charging(), output);
  }

  // optional bool requires_battery_not_low = 9;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->requires_battery_not_low(), output);
  }

  // optional bool requires_device_idle = 10;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->requires_device_idle(), output);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri trigger_content_uris = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigger_content_uris_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->trigger_content_uris(static_cast<int>(i)),
      output);
  }

  // optional int64 trigger_content_update_delay_ms = 12;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->trigger_content_update_delay_ms(), output);
  }

  // optional int64 trigger_content_max_delay_ms = 13;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->trigger_content_max_delay_ms(), output);
  }

  // optional .android.os.PersistableBundleProto extras = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::extras(this), output);
  }

  // optional .android.os.BundleProto transient_extras = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::transient_extras(this), output);
  }

  // optional .android.content.ClipDataProto clip_data = 16;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::clip_data(this), output);
  }

  // optional .com.android.server.job.GrantedUriPermissionsDumpProto granted_uri_permissions = 17;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, _Internal::granted_uri_permissions(this), output);
  }

  // optional .android.net.NetworkRequestProto required_network = 18;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, _Internal::required_network(this), output);
  }

  // optional int64 min_latency_ms = 20;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->min_latency_ms(), output);
  }

  // optional int64 max_execution_delay_ms = 21;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->max_execution_delay_ms(), output);
  }

  // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff backoff_policy = 22;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, _Internal::backoff_policy(this), output);
  }

  // optional bool has_early_constraint = 23;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->has_early_constraint(), output);
  }

  // optional bool has_late_constraint = 24;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->has_late_constraint(), output);
  }

  // optional int64 total_network_download_bytes = 25;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(25, this->total_network_download_bytes(), output);
  }

  // optional int64 total_network_upload_bytes = 26;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(26, this->total_network_upload_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStatusDumpProto.JobInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusDumpProto_JobInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto service = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::service(this), target);
  }

  // optional bool is_periodic = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_periodic(), target);
  }

  // optional int64 period_interval_ms = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->period_interval_ms(), target);
  }

  // optional int64 period_flex_ms = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->period_flex_ms(), target);
  }

  // optional bool is_persisted = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_persisted(), target);
  }

  // optional sint32 priority = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->priority(), target);
  }

  // optional int32 flags = 7;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->flags(), target);
  }

  // optional bool requires_charging = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->requires_charging(), target);
  }

  // optional bool requires_battery_not_low = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->requires_battery_not_low(), target);
  }

  // optional bool requires_device_idle = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->requires_device_idle(), target);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri trigger_content_uris = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigger_content_uris_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->trigger_content_uris(static_cast<int>(i)), target);
  }

  // optional int64 trigger_content_update_delay_ms = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->trigger_content_update_delay_ms(), target);
  }

  // optional int64 trigger_content_max_delay_ms = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->trigger_content_max_delay_ms(), target);
  }

  // optional .android.os.PersistableBundleProto extras = 14;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::extras(this), target);
  }

  // optional .android.os.BundleProto transient_extras = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::transient_extras(this), target);
  }

  // optional .android.content.ClipDataProto clip_data = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::clip_data(this), target);
  }

  // optional .com.android.server.job.GrantedUriPermissionsDumpProto granted_uri_permissions = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::granted_uri_permissions(this), target);
  }

  // optional .android.net.NetworkRequestProto required_network = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::required_network(this), target);
  }

  // optional int64 min_latency_ms = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->min_latency_ms(), target);
  }

  // optional int64 max_execution_delay_ms = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->max_execution_delay_ms(), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff backoff_policy = 22;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::backoff_policy(this), target);
  }

  // optional bool has_early_constraint = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->has_early_constraint(), target);
  }

  // optional bool has_late_constraint = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->has_late_constraint(), target);
  }

  // optional int64 total_network_download_bytes = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->total_network_download_bytes(), target);
  }

  // optional int64 total_network_upload_bytes = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->total_network_upload_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStatusDumpProto.JobInfo)
  return target;
}

size_t JobStatusDumpProto_JobInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.JobStatusDumpProto.JobInfo.TriggerContentUri trigger_content_uris = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->trigger_content_uris_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trigger_content_uris(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.content.ComponentNameProto service = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_);
    }

    // optional .android.os.PersistableBundleProto extras = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extras_);
    }

    // optional .android.os.BundleProto transient_extras = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transient_extras_);
    }

    // optional .android.content.ClipDataProto clip_data = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clip_data_);
    }

    // optional .com.android.server.job.GrantedUriPermissionsDumpProto granted_uri_permissions = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *granted_uri_permissions_);
    }

    // optional .android.net.NetworkRequestProto required_network = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *required_network_);
    }

    // optional .com.android.server.job.JobStatusDumpProto.JobInfo.Backoff backoff_policy = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *backoff_policy_);
    }

    // optional int64 period_interval_ms = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->period_interval_ms());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 period_flex_ms = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->period_flex_ms());
    }

    // optional sint32 priority = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->priority());
    }

    // optional bool is_periodic = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_persisted = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool requires_charging = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool requires_battery_not_low = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional int64 trigger_content_update_delay_ms = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_content_update_delay_ms());
    }

    // optional int64 trigger_content_max_delay_ms = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_content_max_delay_ms());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 flags = 7;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional bool requires_device_idle = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool has_early_constraint = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool has_late_constraint = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional int64 min_latency_ms = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_latency_ms());
    }

    // optional int64 max_execution_delay_ms = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_execution_delay_ms());
    }

    // optional int64 total_network_download_bytes = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_network_download_bytes());
    }

    // optional int64 total_network_upload_bytes = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_network_upload_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusDumpProto_JobInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusDumpProto_JobInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusDumpProto_JobInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStatusDumpProto.JobInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStatusDumpProto.JobInfo)
    MergeFrom(*source);
  }
}

void JobStatusDumpProto_JobInfo::MergeFrom(const JobStatusDumpProto_JobInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trigger_content_uris_.MergeFrom(from.trigger_content_uris_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_service()->::android::content::ComponentNameProto::MergeFrom(from.service());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_extras()->::android::os::PersistableBundleProto::MergeFrom(from.extras());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_transient_extras()->::android::os::BundleProto::MergeFrom(from.transient_extras());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_clip_data()->::android::content::ClipDataProto::MergeFrom(from.clip_data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_granted_uri_permissions()->::com::android::server::job::GrantedUriPermissionsDumpProto::MergeFrom(from.granted_uri_permissions());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_required_network()->::android::net::NetworkRequestProto::MergeFrom(from.required_network());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_backoff_policy()->::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff::MergeFrom(from.backoff_policy());
    }
    if (cached_has_bits & 0x00000080u) {
      period_interval_ms_ = from.period_interval_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      period_flex_ms_ = from.period_flex_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_periodic_ = from.is_periodic_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_persisted_ = from.is_persisted_;
    }
    if (cached_has_bits & 0x00001000u) {
      requires_charging_ = from.requires_charging_;
    }
    if (cached_has_bits & 0x00002000u) {
      requires_battery_not_low_ = from.requires_battery_not_low_;
    }
    if (cached_has_bits & 0x00004000u) {
      trigger_content_update_delay_ms_ = from.trigger_content_update_delay_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      trigger_content_max_delay_ms_ = from.trigger_content_max_delay_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00020000u) {
      requires_device_idle_ = from.requires_device_idle_;
    }
    if (cached_has_bits & 0x00040000u) {
      has_early_constraint_ = from.has_early_constraint_;
    }
    if (cached_has_bits & 0x00080000u) {
      has_late_constraint_ = from.has_late_constraint_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_latency_ms_ = from.min_latency_ms_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_execution_delay_ms_ = from.max_execution_delay_ms_;
    }
    if (cached_has_bits & 0x00400000u) {
      total_network_download_bytes_ = from.total_network_download_bytes_;
    }
    if (cached_has_bits & 0x00800000u) {
      total_network_upload_bytes_ = from.total_network_upload_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStatusDumpProto_JobInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusDumpProto_JobInfo::CopyFrom(const JobStatusDumpProto_JobInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStatusDumpProto.JobInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusDumpProto_JobInfo::IsInitialized() const {
  return true;
}

void JobStatusDumpProto_JobInfo::InternalSwap(JobStatusDumpProto_JobInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trigger_content_uris_)->InternalSwap(CastToBase(&other->trigger_content_uris_));
  swap(service_, other->service_);
  swap(extras_, other->extras_);
  swap(transient_extras_, other->transient_extras_);
  swap(clip_data_, other->clip_data_);
  swap(granted_uri_permissions_, other->granted_uri_permissions_);
  swap(required_network_, other->required_network_);
  swap(backoff_policy_, other->backoff_policy_);
  swap(period_interval_ms_, other->period_interval_ms_);
  swap(period_flex_ms_, other->period_flex_ms_);
  swap(priority_, other->priority_);
  swap(is_periodic_, other->is_periodic_);
  swap(is_persisted_, other->is_persisted_);
  swap(requires_charging_, other->requires_charging_);
  swap(requires_battery_not_low_, other->requires_battery_not_low_);
  swap(trigger_content_update_delay_ms_, other->trigger_content_update_delay_ms_);
  swap(trigger_content_max_delay_ms_, other->trigger_content_max_delay_ms_);
  swap(flags_, other->flags_);
  swap(requires_device_idle_, other->requires_device_idle_);
  swap(has_early_constraint_, other->has_early_constraint_);
  swap(has_late_constraint_, other->has_late_constraint_);
  swap(min_latency_ms_, other->min_latency_ms_);
  swap(max_execution_delay_ms_, other->max_execution_delay_ms_);
  swap(total_network_download_bytes_, other->total_network_download_bytes_);
  swap(total_network_upload_bytes_, other->total_network_upload_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusDumpProto_JobInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusDumpProto_ImplicitConstraints::InitAsDefaultInstance() {
}
class JobStatusDumpProto_ImplicitConstraints::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStatusDumpProto_ImplicitConstraints>()._has_bits_);
  static void set_has_is_not_dozing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_not_restricted_in_bg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_dynamic_satisfied(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

JobStatusDumpProto_ImplicitConstraints::JobStatusDumpProto_ImplicitConstraints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
}
JobStatusDumpProto_ImplicitConstraints::JobStatusDumpProto_ImplicitConstraints(const JobStatusDumpProto_ImplicitConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_not_dozing_, &from.is_not_dozing_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dynamic_satisfied_) -
    reinterpret_cast<char*>(&is_not_dozing_)) + sizeof(is_dynamic_satisfied_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
}

void JobStatusDumpProto_ImplicitConstraints::SharedCtor() {
  ::memset(&is_not_dozing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dynamic_satisfied_) -
      reinterpret_cast<char*>(&is_not_dozing_)) + sizeof(is_dynamic_satisfied_));
}

JobStatusDumpProto_ImplicitConstraints::~JobStatusDumpProto_ImplicitConstraints() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  SharedDtor();
}

void JobStatusDumpProto_ImplicitConstraints::SharedDtor() {
}

void JobStatusDumpProto_ImplicitConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusDumpProto_ImplicitConstraints& JobStatusDumpProto_ImplicitConstraints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusDumpProto_ImplicitConstraints_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStatusDumpProto_ImplicitConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_not_dozing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dynamic_satisfied_) -
      reinterpret_cast<char*>(&is_not_dozing_)) + sizeof(is_dynamic_satisfied_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStatusDumpProto_ImplicitConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_not_dozing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_not_dozing(&has_bits);
          is_not_dozing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_not_restricted_in_bg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_not_restricted_in_bg(&has_bits);
          is_not_restricted_in_bg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dynamic_satisfied = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_dynamic_satisfied(&has_bits);
          is_dynamic_satisfied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStatusDumpProto_ImplicitConstraints::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_not_dozing = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_not_dozing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_not_dozing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_not_restricted_in_bg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_not_restricted_in_bg(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_not_restricted_in_bg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dynamic_satisfied = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_dynamic_satisfied(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dynamic_satisfied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStatusDumpProto_ImplicitConstraints::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_not_dozing = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_not_dozing(), output);
  }

  // optional bool is_not_restricted_in_bg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_not_restricted_in_bg(), output);
  }

  // optional bool is_dynamic_satisfied = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_dynamic_satisfied(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusDumpProto_ImplicitConstraints::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_not_dozing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_not_dozing(), target);
  }

  // optional bool is_not_restricted_in_bg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_not_restricted_in_bg(), target);
  }

  // optional bool is_dynamic_satisfied = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_dynamic_satisfied(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  return target;
}

size_t JobStatusDumpProto_ImplicitConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool is_not_dozing = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_not_restricted_in_bg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_dynamic_satisfied = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusDumpProto_ImplicitConstraints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusDumpProto_ImplicitConstraints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusDumpProto_ImplicitConstraints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
    MergeFrom(*source);
  }
}

void JobStatusDumpProto_ImplicitConstraints::MergeFrom(const JobStatusDumpProto_ImplicitConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      is_not_dozing_ = from.is_not_dozing_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_not_restricted_in_bg_ = from.is_not_restricted_in_bg_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_dynamic_satisfied_ = from.is_dynamic_satisfied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStatusDumpProto_ImplicitConstraints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusDumpProto_ImplicitConstraints::CopyFrom(const JobStatusDumpProto_ImplicitConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStatusDumpProto.ImplicitConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusDumpProto_ImplicitConstraints::IsInitialized() const {
  return true;
}

void JobStatusDumpProto_ImplicitConstraints::InternalSwap(JobStatusDumpProto_ImplicitConstraints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_not_dozing_, other->is_not_dozing_);
  swap(is_not_restricted_in_bg_, other->is_not_restricted_in_bg_);
  swap(is_dynamic_satisfied_, other->is_dynamic_satisfied_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusDumpProto_ImplicitConstraints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusDumpProto_JobWorkItem::InitAsDefaultInstance() {
  ::com::android::server::job::_JobStatusDumpProto_JobWorkItem_default_instance_._instance.get_mutable()->intent_ = const_cast< ::android::content::IntentProto*>(
      ::android::content::IntentProto::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_JobWorkItem_default_instance_._instance.get_mutable()->uri_grants_ = const_cast< ::com::android::server::job::GrantedUriPermissionsDumpProto*>(
      ::com::android::server::job::GrantedUriPermissionsDumpProto::internal_default_instance());
}
class JobStatusDumpProto_JobWorkItem::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStatusDumpProto_JobWorkItem>()._has_bits_);
  static void set_has_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delivery_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::content::IntentProto& intent(const JobStatusDumpProto_JobWorkItem* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::GrantedUriPermissionsDumpProto& uri_grants(const JobStatusDumpProto_JobWorkItem* msg);
  static void set_has_uri_grants(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::content::IntentProto&
JobStatusDumpProto_JobWorkItem::_Internal::intent(const JobStatusDumpProto_JobWorkItem* msg) {
  return *msg->intent_;
}
const ::com::android::server::job::GrantedUriPermissionsDumpProto&
JobStatusDumpProto_JobWorkItem::_Internal::uri_grants(const JobStatusDumpProto_JobWorkItem* msg) {
  return *msg->uri_grants_;
}
void JobStatusDumpProto_JobWorkItem::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
JobStatusDumpProto_JobWorkItem::JobStatusDumpProto_JobWorkItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStatusDumpProto.JobWorkItem)
}
JobStatusDumpProto_JobWorkItem::JobStatusDumpProto_JobWorkItem(const JobStatusDumpProto_JobWorkItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intent()) {
    intent_ = new ::android::content::IntentProto(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from.has_uri_grants()) {
    uri_grants_ = new ::com::android::server::job::GrantedUriPermissionsDumpProto(*from.uri_grants_);
  } else {
    uri_grants_ = nullptr;
  }
  ::memcpy(&work_id_, &from.work_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delivery_count_) -
    reinterpret_cast<char*>(&work_id_)) + sizeof(delivery_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStatusDumpProto.JobWorkItem)
}

void JobStatusDumpProto_JobWorkItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delivery_count_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(delivery_count_));
}

JobStatusDumpProto_JobWorkItem::~JobStatusDumpProto_JobWorkItem() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  SharedDtor();
}

void JobStatusDumpProto_JobWorkItem::SharedDtor() {
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete uri_grants_;
}

void JobStatusDumpProto_JobWorkItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusDumpProto_JobWorkItem& JobStatusDumpProto_JobWorkItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusDumpProto_JobWorkItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStatusDumpProto_JobWorkItem::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uri_grants_ != nullptr);
      uri_grants_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&work_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delivery_count_) -
        reinterpret_cast<char*>(&work_id_)) + sizeof(delivery_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStatusDumpProto_JobWorkItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 work_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_work_id(&has_bits);
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 delivery_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delivery_count(&has_bits);
          delivery_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.IntentProto intent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.GrantedUriPermissionsDumpProto uri_grants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_uri_grants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStatusDumpProto_JobWorkItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 work_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_work_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &work_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delivery_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_delivery_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delivery_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.IntentProto intent = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.GrantedUriPermissionsDumpProto uri_grants = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uri_grants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStatusDumpProto_JobWorkItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 work_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->work_id(), output);
  }

  // optional int32 delivery_count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->delivery_count(), output);
  }

  // optional .android.content.IntentProto intent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::intent(this), output);
  }

  // optional .com.android.server.job.GrantedUriPermissionsDumpProto uri_grants = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::uri_grants(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStatusDumpProto.JobWorkItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusDumpProto_JobWorkItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 work_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->work_id(), target);
  }

  // optional int32 delivery_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->delivery_count(), target);
  }

  // optional .android.content.IntentProto intent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::intent(this), target);
  }

  // optional .com.android.server.job.GrantedUriPermissionsDumpProto uri_grants = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::uri_grants(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  return target;
}

size_t JobStatusDumpProto_JobWorkItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.content.IntentProto intent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .com.android.server.job.GrantedUriPermissionsDumpProto uri_grants = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uri_grants_);
    }

    // optional int32 work_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->work_id());
    }

    // optional int32 delivery_count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->delivery_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusDumpProto_JobWorkItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusDumpProto_JobWorkItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusDumpProto_JobWorkItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStatusDumpProto.JobWorkItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStatusDumpProto.JobWorkItem)
    MergeFrom(*source);
  }
}

void JobStatusDumpProto_JobWorkItem::MergeFrom(const JobStatusDumpProto_JobWorkItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_intent()->::android::content::IntentProto::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_uri_grants()->::com::android::server::job::GrantedUriPermissionsDumpProto::MergeFrom(from.uri_grants());
    }
    if (cached_has_bits & 0x00000004u) {
      work_id_ = from.work_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      delivery_count_ = from.delivery_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStatusDumpProto_JobWorkItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusDumpProto_JobWorkItem::CopyFrom(const JobStatusDumpProto_JobWorkItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStatusDumpProto.JobWorkItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusDumpProto_JobWorkItem::IsInitialized() const {
  return true;
}

void JobStatusDumpProto_JobWorkItem::InternalSwap(JobStatusDumpProto_JobWorkItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(intent_, other->intent_);
  swap(uri_grants_, other->uri_grants_);
  swap(work_id_, other->work_id_);
  swap(delivery_count_, other->delivery_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusDumpProto_JobWorkItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusDumpProto::InitAsDefaultInstance() {
  ::com::android::server::job::_JobStatusDumpProto_default_instance_._instance.get_mutable()->job_info_ = const_cast< ::com::android::server::job::JobStatusDumpProto_JobInfo*>(
      ::com::android::server::job::JobStatusDumpProto_JobInfo::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_default_instance_._instance.get_mutable()->implicit_constraints_ = const_cast< ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints*>(
      ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints::internal_default_instance());
  ::com::android::server::job::_JobStatusDumpProto_default_instance_._instance.get_mutable()->network_ = const_cast< ::android::net::NetworkProto*>(
      ::android::net::NetworkProto::internal_default_instance());
}
class JobStatusDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStatusDumpProto>()._has_bits_);
  static void set_has_calling_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_source_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_source_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::job::JobStatusDumpProto_JobInfo& job_info(const JobStatusDumpProto* msg);
  static void set_has_job_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_doze_whitelisted(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_uid_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints& implicit_constraints(const JobStatusDumpProto* msg);
  static void set_has_implicit_constraints(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::net::NetworkProto& network(const JobStatusDumpProto* msg);
  static void set_has_network(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_standby_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_exempted_from_app_standby(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enqueue_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_until_earliest_runtime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_time_until_latest_runtime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_original_latest_runtime_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_num_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_last_successful_run_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_last_failed_run_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_internal_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_time_since_first_deferral_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_time_since_first_force_batch_attempt_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::com::android::server::job::JobStatusDumpProto_JobInfo&
JobStatusDumpProto::_Internal::job_info(const JobStatusDumpProto* msg) {
  return *msg->job_info_;
}
const ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints&
JobStatusDumpProto::_Internal::implicit_constraints(const JobStatusDumpProto* msg) {
  return *msg->implicit_constraints_;
}
const ::android::net::NetworkProto&
JobStatusDumpProto::_Internal::network(const JobStatusDumpProto* msg) {
  return *msg->network_;
}
void JobStatusDumpProto::clear_network() {
  if (network_ != nullptr) network_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
JobStatusDumpProto::JobStatusDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStatusDumpProto)
}
JobStatusDumpProto::JobStatusDumpProto(const JobStatusDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      required_constraints_(from.required_constraints_),
      satisfied_constraints_(from.satisfied_constraints_),
      unsatisfied_constraints_(from.unsatisfied_constraints_),
      tracking_controllers_(from.tracking_controllers_),
      changed_authorities_(from.changed_authorities_),
      changed_uris_(from.changed_uris_),
      pending_work_(from.pending_work_),
      executing_work_(from.executing_work_),
      dynamic_constraints_(from.dynamic_constraints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  source_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_package_name()) {
    source_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_package_name_);
  }
  if (from.has_job_info()) {
    job_info_ = new ::com::android::server::job::JobStatusDumpProto_JobInfo(*from.job_info_);
  } else {
    job_info_ = nullptr;
  }
  if (from.has_network()) {
    network_ = new ::android::net::NetworkProto(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from.has_implicit_constraints()) {
    implicit_constraints_ = new ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints(*from.implicit_constraints_);
  } else {
    implicit_constraints_ = nullptr;
  }
  ::memcpy(&calling_uid_, &from.calling_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&original_latest_runtime_elapsed_) -
    reinterpret_cast<char*>(&calling_uid_)) + sizeof(original_latest_runtime_elapsed_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStatusDumpProto)
}

void JobStatusDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_latest_runtime_elapsed_) -
      reinterpret_cast<char*>(&job_info_)) + sizeof(original_latest_runtime_elapsed_));
}

JobStatusDumpProto::~JobStatusDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStatusDumpProto)
  SharedDtor();
}

void JobStatusDumpProto::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_info_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete implicit_constraints_;
}

void JobStatusDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusDumpProto& JobStatusDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStatusDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStatusDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_constraints_.Clear();
  satisfied_constraints_.Clear();
  unsatisfied_constraints_.Clear();
  tracking_controllers_.Clear();
  changed_authorities_.Clear();
  changed_uris_.Clear();
  pending_work_.Clear();
  executing_work_.Clear();
  dynamic_constraints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      source_package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(job_info_ != nullptr);
      job_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(network_ != nullptr);
      network_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(implicit_constraints_ != nullptr);
      implicit_constraints_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&calling_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_user_id_) -
        reinterpret_cast<char*>(&calling_uid_)) + sizeof(source_user_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&standby_bucket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_exempted_from_app_standby_) -
        reinterpret_cast<char*>(&standby_bucket_)) + sizeof(is_exempted_from_app_standby_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&last_successful_run_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&original_latest_runtime_elapsed_) -
        reinterpret_cast<char*>(&last_successful_run_time_)) + sizeof(original_latest_runtime_elapsed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStatusDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 calling_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_calling_uid(&has_bits);
          calling_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.job.JobStatusDumpProto.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_uid(&has_bits);
          source_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_source_user_id(&has_bits);
          source_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source_package_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_source_package_name(), ptr, ctx, "com.android.server.job.JobStatusDumpProto.source_package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto.JobInfo job_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_job_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.ConstraintEnum required_constraints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::ConstraintEnum_IsValid(val))) {
              add_required_constraints(static_cast<::com::android::server::job::ConstraintEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 56);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_required_constraints(), ptr, ctx, ::com::android::server::job::ConstraintEnum_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.ConstraintEnum satisfied_constraints = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::ConstraintEnum_IsValid(val))) {
              add_satisfied_constraints(static_cast<::com::android::server::job::ConstraintEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_satisfied_constraints(), ptr, ctx, ::com::android::server::job::ConstraintEnum_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.ConstraintEnum unsatisfied_constraints = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::ConstraintEnum_IsValid(val))) {
              add_unsatisfied_constraints(static_cast<::com::android::server::job::ConstraintEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 72);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_unsatisfied_constraints(), ptr, ctx, ::com::android::server::job::ConstraintEnum_IsValid, &_internal_metadata_, 9);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_doze_whitelisted = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_doze_whitelisted(&has_bits);
          is_doze_whitelisted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobStatusDumpProto.TrackingController tracking_controllers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::JobStatusDumpProto_TrackingController_IsValid(val))) {
              add_tracking_controllers(static_cast<::com::android::server::job::JobStatusDumpProto_TrackingController>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 88);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_tracking_controllers(), ptr, ctx, ::com::android::server::job::JobStatusDumpProto_TrackingController_IsValid, &_internal_metadata_, 11);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string changed_authorities = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_changed_authorities(), ptr, ctx, "com.android.server.job.JobStatusDumpProto.changed_authorities");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated string changed_uris = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_changed_uris(), ptr, ctx, "com.android.server.job.JobStatusDumpProto.changed_uris");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // optional .android.net.NetworkProto network = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem pending_work = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pending_work(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem executing_work = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_executing_work(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::JobStatusDumpProto_Bucket_IsValid(val))) {
            set_standby_bucket(static_cast<::com::android::server::job::JobStatusDumpProto_Bucket>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 enqueue_duration_ms = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_enqueue_duration_ms(&has_bits);
          enqueue_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 time_until_earliest_runtime_ms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_time_until_earliest_runtime_ms(&has_bits);
          time_until_earliest_runtime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 time_until_latest_runtime_ms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_time_until_latest_runtime_ms(&has_bits);
          time_until_latest_runtime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_failures = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_num_failures(&has_bits);
          num_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_successful_run_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_last_successful_run_time(&has_bits);
          last_successful_run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_failed_run_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_last_failed_run_time(&has_bits);
          last_failed_run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 internal_flags = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_internal_flags(&has_bits);
          internal_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStatusDumpProto.ImplicitConstraints implicit_constraints = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_implicit_constraints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_uid_active = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_is_uid_active(&has_bits);
          is_uid_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_exempted_from_app_standby = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_is_exempted_from_app_standby(&has_bits);
          is_exempted_from_app_standby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_first_deferral_ms = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_time_since_first_deferral_ms(&has_bits);
          time_since_first_deferral_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_first_force_batch_attempt_ms = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_time_since_first_force_batch_attempt_ms(&has_bits);
          time_since_first_force_batch_attempt_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_latest_runtime_elapsed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_original_latest_runtime_elapsed(&has_bits);
          original_latest_runtime_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.job.ConstraintEnum dynamic_constraints = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::job::ConstraintEnum_IsValid(val))) {
              add_dynamic_constraints(static_cast<::com::android::server::job::ConstraintEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 504);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_dynamic_constraints(), ptr, ctx, ::com::android::server::job::ConstraintEnum_IsValid, &_internal_metadata_, 31);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStatusDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStatusDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 calling_uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_calling_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &calling_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobStatusDumpProto.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_source_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_user_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_source_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_package_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobStatusDumpProto.source_package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto.JobInfo job_info = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_job_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.ConstraintEnum required_constraints = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::ConstraintEnum_IsValid(value)) {
            add_required_constraints(static_cast< ::com::android::server::job::ConstraintEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 7,
                 ::com::android::server::job::ConstraintEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_required_constraints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.ConstraintEnum satisfied_constraints = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::ConstraintEnum_IsValid(value)) {
            add_satisfied_constraints(static_cast< ::com::android::server::job::ConstraintEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::com::android::server::job::ConstraintEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_satisfied_constraints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.ConstraintEnum unsatisfied_constraints = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::ConstraintEnum_IsValid(value)) {
            add_unsatisfied_constraints(static_cast< ::com::android::server::job::ConstraintEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 9,
                 ::com::android::server::job::ConstraintEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_unsatisfied_constraints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_doze_whitelisted = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_is_doze_whitelisted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_doze_whitelisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobStatusDumpProto.TrackingController tracking_controllers = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::JobStatusDumpProto_TrackingController_IsValid(value)) {
            add_tracking_controllers(static_cast< ::com::android::server::job::JobStatusDumpProto_TrackingController >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 11,
                 ::com::android::server::job::JobStatusDumpProto_TrackingController_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_tracking_controllers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string changed_authorities = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_changed_authorities()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->changed_authorities(this->changed_authorities_size() - 1).data(),
            static_cast<int>(this->changed_authorities(this->changed_authorities_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobStatusDumpProto.changed_authorities");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string changed_uris = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_changed_uris()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->changed_uris(this->changed_uris_size() - 1).data(),
            static_cast<int>(this->changed_uris(this->changed_uris_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.job.JobStatusDumpProto.changed_uris");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.net.NetworkProto network = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem pending_work = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem executing_work = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_executing_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::JobStatusDumpProto_Bucket_IsValid(value)) {
            set_standby_bucket(static_cast< ::com::android::server::job::JobStatusDumpProto_Bucket >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 enqueue_duration_ms = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_enqueue_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &enqueue_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 time_until_earliest_runtime_ms = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_time_until_earliest_runtime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &time_until_earliest_runtime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 time_until_latest_runtime_ms = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_time_until_latest_runtime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &time_until_latest_runtime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_failures = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_num_failures(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_failures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_successful_run_time = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_last_successful_run_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_successful_run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_failed_run_time = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_last_failed_run_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_failed_run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 internal_flags = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_internal_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &internal_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStatusDumpProto.ImplicitConstraints implicit_constraints = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_implicit_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_uid_active = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_is_uid_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_uid_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_exempted_from_app_standby = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_is_exempted_from_app_standby(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exempted_from_app_standby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_first_deferral_ms = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_time_since_first_deferral_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_first_deferral_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_first_force_batch_attempt_ms = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_time_since_first_force_batch_attempt_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_first_force_batch_attempt_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 original_latest_runtime_elapsed = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_original_latest_runtime_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_latest_runtime_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.job.ConstraintEnum dynamic_constraints = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::job::ConstraintEnum_IsValid(value)) {
            add_dynamic_constraints(static_cast< ::com::android::server::job::ConstraintEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 31,
                 ::com::android::server::job::ConstraintEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_dynamic_constraints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStatusDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStatusDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStatusDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStatusDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 calling_uid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->calling_uid(), output);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional int32 source_uid = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->source_uid(), output);
  }

  // optional int32 source_user_id = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->source_user_id(), output);
  }

  // optional string source_package_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.source_package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_package_name(), output);
  }

  // optional .com.android.server.job.JobStatusDumpProto.JobInfo job_info = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::job_info(this), output);
  }

  // repeated .com.android.server.job.ConstraintEnum required_constraints = 7;
  for (int i = 0, n = this->required_constraints_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->required_constraints(i), output);
  }

  // repeated .com.android.server.job.ConstraintEnum satisfied_constraints = 8;
  for (int i = 0, n = this->satisfied_constraints_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->satisfied_constraints(i), output);
  }

  // repeated .com.android.server.job.ConstraintEnum unsatisfied_constraints = 9;
  for (int i = 0, n = this->unsatisfied_constraints_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->unsatisfied_constraints(i), output);
  }

  // optional bool is_doze_whitelisted = 10;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->is_doze_whitelisted(), output);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.TrackingController tracking_controllers = 11;
  for (int i = 0, n = this->tracking_controllers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->tracking_controllers(i), output);
  }

  // repeated string changed_authorities = 12 [(.android.privacy) = {
  for (int i = 0, n = this->changed_authorities_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_authorities(i).data(), static_cast<int>(this->changed_authorities(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.changed_authorities");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      12, this->changed_authorities(i), output);
  }

  // repeated string changed_uris = 13 [(.android.privacy) = {
  for (int i = 0, n = this->changed_uris_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_uris(i).data(), static_cast<int>(this->changed_uris(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.changed_uris");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      13, this->changed_uris(i), output);
  }

  // optional .android.net.NetworkProto network = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::network(this), output);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem pending_work = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_work_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->pending_work(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem executing_work = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->executing_work_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->executing_work(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 17;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      17, this->standby_bucket(), output);
  }

  // optional int64 enqueue_duration_ms = 18;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->enqueue_duration_ms(), output);
  }

  // optional sint64 time_until_earliest_runtime_ms = 19;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(19, this->time_until_earliest_runtime_ms(), output);
  }

  // optional sint64 time_until_latest_runtime_ms = 20;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(20, this->time_until_latest_runtime_ms(), output);
  }

  // optional int32 num_failures = 21;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->num_failures(), output);
  }

  // optional int64 last_successful_run_time = 22;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->last_successful_run_time(), output);
  }

  // optional int64 last_failed_run_time = 23;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(23, this->last_failed_run_time(), output);
  }

  // optional int64 internal_flags = 24;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(24, this->internal_flags(), output);
  }

  // optional .com.android.server.job.JobStatusDumpProto.ImplicitConstraints implicit_constraints = 25;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::implicit_constraints(this), output);
  }

  // optional bool is_uid_active = 26;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->is_uid_active(), output);
  }

  // optional bool is_exempted_from_app_standby = 27;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->is_exempted_from_app_standby(), output);
  }

  // optional int64 time_since_first_deferral_ms = 28;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(28, this->time_since_first_deferral_ms(), output);
  }

  // optional int64 time_since_first_force_batch_attempt_ms = 29;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(29, this->time_since_first_force_batch_attempt_ms(), output);
  }

  // optional uint64 original_latest_runtime_elapsed = 30;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(30, this->original_latest_runtime_elapsed(), output);
  }

  // repeated .com.android.server.job.ConstraintEnum dynamic_constraints = 31;
  for (int i = 0, n = this->dynamic_constraints_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->dynamic_constraints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStatusDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStatusDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 calling_uid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->calling_uid(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional int32 source_uid = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->source_uid(), target);
  }

  // optional int32 source_user_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->source_user_id(), target);
  }

  // optional string source_package_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_package_name().data(), static_cast<int>(this->source_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.source_package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->source_package_name(), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto.JobInfo job_info = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::job_info(this), target);
  }

  // repeated .com.android.server.job.ConstraintEnum required_constraints = 7;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    7, this->required_constraints_, target);

  // repeated .com.android.server.job.ConstraintEnum satisfied_constraints = 8;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    8, this->satisfied_constraints_, target);

  // repeated .com.android.server.job.ConstraintEnum unsatisfied_constraints = 9;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    9, this->unsatisfied_constraints_, target);

  // optional bool is_doze_whitelisted = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->is_doze_whitelisted(), target);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.TrackingController tracking_controllers = 11;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    11, this->tracking_controllers_, target);

  // repeated string changed_authorities = 12 [(.android.privacy) = {
  for (int i = 0, n = this->changed_authorities_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_authorities(i).data(), static_cast<int>(this->changed_authorities(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.changed_authorities");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(12, this->changed_authorities(i), target);
  }

  // repeated string changed_uris = 13 [(.android.privacy) = {
  for (int i = 0, n = this->changed_uris_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->changed_uris(i).data(), static_cast<int>(this->changed_uris(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.job.JobStatusDumpProto.changed_uris");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(13, this->changed_uris(i), target);
  }

  // optional .android.net.NetworkProto network = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::network(this), target);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem pending_work = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_work_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->pending_work(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem executing_work = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->executing_work_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->executing_work(static_cast<int>(i)), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->standby_bucket(), target);
  }

  // optional int64 enqueue_duration_ms = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->enqueue_duration_ms(), target);
  }

  // optional sint64 time_until_earliest_runtime_ms = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(19, this->time_until_earliest_runtime_ms(), target);
  }

  // optional sint64 time_until_latest_runtime_ms = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(20, this->time_until_latest_runtime_ms(), target);
  }

  // optional int32 num_failures = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->num_failures(), target);
  }

  // optional int64 last_successful_run_time = 22;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->last_successful_run_time(), target);
  }

  // optional int64 last_failed_run_time = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->last_failed_run_time(), target);
  }

  // optional int64 internal_flags = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->internal_flags(), target);
  }

  // optional .com.android.server.job.JobStatusDumpProto.ImplicitConstraints implicit_constraints = 25;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::implicit_constraints(this), target);
  }

  // optional bool is_uid_active = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->is_uid_active(), target);
  }

  // optional bool is_exempted_from_app_standby = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->is_exempted_from_app_standby(), target);
  }

  // optional int64 time_since_first_deferral_ms = 28;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->time_since_first_deferral_ms(), target);
  }

  // optional int64 time_since_first_force_batch_attempt_ms = 29;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->time_since_first_force_batch_attempt_ms(), target);
  }

  // optional uint64 original_latest_runtime_elapsed = 30;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->original_latest_runtime_elapsed(), target);
  }

  // repeated .com.android.server.job.ConstraintEnum dynamic_constraints = 31;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    31, this->dynamic_constraints_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStatusDumpProto)
  return target;
}

size_t JobStatusDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStatusDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.job.ConstraintEnum required_constraints = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->required_constraints_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->required_constraints(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .com.android.server.job.ConstraintEnum satisfied_constraints = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->satisfied_constraints_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->satisfied_constraints(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .com.android.server.job.ConstraintEnum unsatisfied_constraints = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->unsatisfied_constraints_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->unsatisfied_constraints(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .com.android.server.job.JobStatusDumpProto.TrackingController tracking_controllers = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->tracking_controllers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->tracking_controllers(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string changed_authorities = 12 [(.android.privacy) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->changed_authorities_size());
  for (int i = 0, n = this->changed_authorities_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->changed_authorities(i));
  }

  // repeated string changed_uris = 13 [(.android.privacy) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->changed_uris_size());
  for (int i = 0, n = this->changed_uris_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->changed_uris(i));
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem pending_work = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_work_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_work(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.JobStatusDumpProto.JobWorkItem executing_work = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->executing_work_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->executing_work(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.job.ConstraintEnum dynamic_constraints = 31;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->dynamic_constraints_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->dynamic_constraints(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string source_package_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->source_package_name());
    }

    // optional .com.android.server.job.JobStatusDumpProto.JobInfo job_info = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *job_info_);
    }

    // optional .android.net.NetworkProto network = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_);
    }

    // optional .com.android.server.job.JobStatusDumpProto.ImplicitConstraints implicit_constraints = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *implicit_constraints_);
    }

    // optional int32 calling_uid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->calling_uid());
    }

    // optional int32 source_uid = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_uid());
    }

    // optional int32 source_user_id = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->source_user_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .com.android.server.job.JobStatusDumpProto.Bucket standby_bucket = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->standby_bucket());
    }

    // optional int64 enqueue_duration_ms = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->enqueue_duration_ms());
    }

    // optional sint64 time_until_earliest_runtime_ms = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->time_until_earliest_runtime_ms());
    }

    // optional sint64 time_until_latest_runtime_ms = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->time_until_latest_runtime_ms());
    }

    // optional int32 num_failures = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_failures());
    }

    // optional bool is_doze_whitelisted = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_uid_active = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_exempted_from_app_standby = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional int64 last_successful_run_time = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_successful_run_time());
    }

    // optional int64 last_failed_run_time = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_failed_run_time());
    }

    // optional int64 internal_flags = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->internal_flags());
    }

    // optional int64 time_since_first_deferral_ms = 28;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_first_deferral_ms());
    }

    // optional int64 time_since_first_force_batch_attempt_ms = 29;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_first_force_batch_attempt_ms());
    }

    // optional uint64 original_latest_runtime_elapsed = 30;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->original_latest_runtime_elapsed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStatusDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStatusDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStatusDumpProto)
    MergeFrom(*source);
  }
}

void JobStatusDumpProto::MergeFrom(const JobStatusDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStatusDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  required_constraints_.MergeFrom(from.required_constraints_);
  satisfied_constraints_.MergeFrom(from.satisfied_constraints_);
  unsatisfied_constraints_.MergeFrom(from.unsatisfied_constraints_);
  tracking_controllers_.MergeFrom(from.tracking_controllers_);
  changed_authorities_.MergeFrom(from.changed_authorities_);
  changed_uris_.MergeFrom(from.changed_uris_);
  pending_work_.MergeFrom(from.pending_work_);
  executing_work_.MergeFrom(from.executing_work_);
  dynamic_constraints_.MergeFrom(from.dynamic_constraints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      source_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_package_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_job_info()->::com::android::server::job::JobStatusDumpProto_JobInfo::MergeFrom(from.job_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_network()->::android::net::NetworkProto::MergeFrom(from.network());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_implicit_constraints()->::com::android::server::job::JobStatusDumpProto_ImplicitConstraints::MergeFrom(from.implicit_constraints());
    }
    if (cached_has_bits & 0x00000020u) {
      calling_uid_ = from.calling_uid_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_uid_ = from.source_uid_;
    }
    if (cached_has_bits & 0x00000080u) {
      source_user_id_ = from.source_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      standby_bucket_ = from.standby_bucket_;
    }
    if (cached_has_bits & 0x00000200u) {
      enqueue_duration_ms_ = from.enqueue_duration_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_until_earliest_runtime_ms_ = from.time_until_earliest_runtime_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      time_until_latest_runtime_ms_ = from.time_until_latest_runtime_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      num_failures_ = from.num_failures_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_doze_whitelisted_ = from.is_doze_whitelisted_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_uid_active_ = from.is_uid_active_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_exempted_from_app_standby_ = from.is_exempted_from_app_standby_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      last_successful_run_time_ = from.last_successful_run_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      last_failed_run_time_ = from.last_failed_run_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      internal_flags_ = from.internal_flags_;
    }
    if (cached_has_bits & 0x00080000u) {
      time_since_first_deferral_ms_ = from.time_since_first_deferral_ms_;
    }
    if (cached_has_bits & 0x00100000u) {
      time_since_first_force_batch_attempt_ms_ = from.time_since_first_force_batch_attempt_ms_;
    }
    if (cached_has_bits & 0x00200000u) {
      original_latest_runtime_elapsed_ = from.original_latest_runtime_elapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStatusDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStatusDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusDumpProto::CopyFrom(const JobStatusDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStatusDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusDumpProto::IsInitialized() const {
  return true;
}

void JobStatusDumpProto::InternalSwap(JobStatusDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  required_constraints_.InternalSwap(&other->required_constraints_);
  satisfied_constraints_.InternalSwap(&other->satisfied_constraints_);
  unsatisfied_constraints_.InternalSwap(&other->unsatisfied_constraints_);
  tracking_controllers_.InternalSwap(&other->tracking_controllers_);
  changed_authorities_.InternalSwap(CastToBase(&other->changed_authorities_));
  changed_uris_.InternalSwap(CastToBase(&other->changed_uris_));
  CastToBase(&pending_work_)->InternalSwap(CastToBase(&other->pending_work_));
  CastToBase(&executing_work_)->InternalSwap(CastToBase(&other->executing_work_));
  dynamic_constraints_.InternalSwap(&other->dynamic_constraints_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_package_name_.Swap(&other->source_package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_info_, other->job_info_);
  swap(network_, other->network_);
  swap(implicit_constraints_, other->implicit_constraints_);
  swap(calling_uid_, other->calling_uid_);
  swap(source_uid_, other->source_uid_);
  swap(source_user_id_, other->source_user_id_);
  swap(standby_bucket_, other->standby_bucket_);
  swap(enqueue_duration_ms_, other->enqueue_duration_ms_);
  swap(time_until_earliest_runtime_ms_, other->time_until_earliest_runtime_ms_);
  swap(time_until_latest_runtime_ms_, other->time_until_latest_runtime_ms_);
  swap(num_failures_, other->num_failures_);
  swap(is_doze_whitelisted_, other->is_doze_whitelisted_);
  swap(is_uid_active_, other->is_uid_active_);
  swap(is_exempted_from_app_standby_, other->is_exempted_from_app_standby_);
  swap(last_successful_run_time_, other->last_successful_run_time_);
  swap(last_failed_run_time_, other->last_failed_run_time_);
  swap(internal_flags_, other->internal_flags_);
  swap(time_since_first_deferral_ms_, other->time_since_first_deferral_ms_);
  swap(time_since_first_force_batch_attempt_ms_, other->time_since_first_force_batch_attempt_ms_);
  swap(original_latest_runtime_elapsed_, other->original_latest_runtime_elapsed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobConcurrencyManagerProto::InitAsDefaultInstance() {
  ::com::android::server::job::_JobConcurrencyManagerProto_default_instance_._instance.get_mutable()->job_count_tracker_ = const_cast< ::com::android::server::job::JobCountTrackerProto*>(
      ::com::android::server::job::JobCountTrackerProto::internal_default_instance());
  ::com::android::server::job::_JobConcurrencyManagerProto_default_instance_._instance.get_mutable()->stats_ = const_cast< ::com::android::server::StatLoggerProto*>(
      ::com::android::server::StatLoggerProto::internal_default_instance());
}
class JobConcurrencyManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobConcurrencyManagerProto>()._has_bits_);
  static void set_has_current_interactive_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_effective_interactive_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_since_last_screen_on_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_since_last_screen_off_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::android::server::job::JobCountTrackerProto& job_count_tracker(const JobConcurrencyManagerProto* msg);
  static void set_has_job_count_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_memory_trim_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::android::server::StatLoggerProto& stats(const JobConcurrencyManagerProto* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::JobCountTrackerProto&
JobConcurrencyManagerProto::_Internal::job_count_tracker(const JobConcurrencyManagerProto* msg) {
  return *msg->job_count_tracker_;
}
const ::com::android::server::StatLoggerProto&
JobConcurrencyManagerProto::_Internal::stats(const JobConcurrencyManagerProto* msg) {
  return *msg->stats_;
}
void JobConcurrencyManagerProto::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
JobConcurrencyManagerProto::JobConcurrencyManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobConcurrencyManagerProto)
}
JobConcurrencyManagerProto::JobConcurrencyManagerProto(const JobConcurrencyManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job_count_tracker()) {
    job_count_tracker_ = new ::com::android::server::job::JobCountTrackerProto(*from.job_count_tracker_);
  } else {
    job_count_tracker_ = nullptr;
  }
  if (from.has_stats()) {
    stats_ = new ::com::android::server::StatLoggerProto(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  ::memcpy(&time_since_last_screen_on_ms_, &from.time_since_last_screen_on_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_since_last_screen_off_ms_) -
    reinterpret_cast<char*>(&time_since_last_screen_on_ms_)) + sizeof(time_since_last_screen_off_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobConcurrencyManagerProto)
}

void JobConcurrencyManagerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&job_count_tracker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_since_last_screen_off_ms_) -
      reinterpret_cast<char*>(&job_count_tracker_)) + sizeof(time_since_last_screen_off_ms_));
}

JobConcurrencyManagerProto::~JobConcurrencyManagerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobConcurrencyManagerProto)
  SharedDtor();
}

void JobConcurrencyManagerProto::SharedDtor() {
  if (this != internal_default_instance()) delete job_count_tracker_;
  if (this != internal_default_instance()) delete stats_;
}

void JobConcurrencyManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobConcurrencyManagerProto& JobConcurrencyManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobConcurrencyManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobConcurrencyManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobConcurrencyManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(job_count_tracker_ != nullptr);
      job_count_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&time_since_last_screen_on_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_since_last_screen_off_ms_) -
        reinterpret_cast<char*>(&time_since_last_screen_on_ms_)) + sizeof(time_since_last_screen_off_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobConcurrencyManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool current_interactive_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_current_interactive_state(&has_bits);
          current_interactive_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool effective_interactive_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_effective_interactive_state(&has_bits);
          effective_interactive_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_last_screen_on_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_since_last_screen_on_ms(&has_bits);
          time_since_last_screen_on_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_last_screen_off_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_since_last_screen_off_ms(&has_bits);
          time_since_last_screen_off_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobCountTrackerProto job_count_tracker = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_job_count_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 memory_trim_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_memory_trim_level(&has_bits);
          memory_trim_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.StatLoggerProto stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobConcurrencyManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobConcurrencyManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool current_interactive_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_current_interactive_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_interactive_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool effective_interactive_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_effective_interactive_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effective_interactive_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_last_screen_on_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_time_since_last_screen_on_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_last_screen_on_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_last_screen_off_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_time_since_last_screen_off_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_last_screen_off_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobCountTrackerProto job_count_tracker = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_job_count_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 memory_trim_level = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_memory_trim_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_trim_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.StatLoggerProto stats = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobConcurrencyManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobConcurrencyManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobConcurrencyManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobConcurrencyManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool current_interactive_state = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->current_interactive_state(), output);
  }

  // optional bool effective_interactive_state = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->effective_interactive_state(), output);
  }

  // optional int64 time_since_last_screen_on_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->time_since_last_screen_on_ms(), output);
  }

  // optional int64 time_since_last_screen_off_ms = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->time_since_last_screen_off_ms(), output);
  }

  // optional .com.android.server.job.JobCountTrackerProto job_count_tracker = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::job_count_tracker(this), output);
  }

  // optional int32 memory_trim_level = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->memory_trim_level(), output);
  }

  // optional .com.android.server.StatLoggerProto stats = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobConcurrencyManagerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobConcurrencyManagerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobConcurrencyManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool current_interactive_state = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->current_interactive_state(), target);
  }

  // optional bool effective_interactive_state = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->effective_interactive_state(), target);
  }

  // optional int64 time_since_last_screen_on_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->time_since_last_screen_on_ms(), target);
  }

  // optional int64 time_since_last_screen_off_ms = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->time_since_last_screen_off_ms(), target);
  }

  // optional .com.android.server.job.JobCountTrackerProto job_count_tracker = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::job_count_tracker(this), target);
  }

  // optional int32 memory_trim_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->memory_trim_level(), target);
  }

  // optional .com.android.server.StatLoggerProto stats = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobConcurrencyManagerProto)
  return target;
}

size_t JobConcurrencyManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobConcurrencyManagerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .com.android.server.job.JobCountTrackerProto job_count_tracker = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *job_count_tracker_);
    }

    // optional .com.android.server.StatLoggerProto stats = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional int64 time_since_last_screen_on_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_last_screen_on_ms());
    }

    // optional bool current_interactive_state = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool effective_interactive_state = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 memory_trim_level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->memory_trim_level());
    }

    // optional int64 time_since_last_screen_off_ms = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_last_screen_off_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobConcurrencyManagerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobConcurrencyManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobConcurrencyManagerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobConcurrencyManagerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobConcurrencyManagerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobConcurrencyManagerProto)
    MergeFrom(*source);
  }
}

void JobConcurrencyManagerProto::MergeFrom(const JobConcurrencyManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobConcurrencyManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_job_count_tracker()->::com::android::server::job::JobCountTrackerProto::MergeFrom(from.job_count_tracker());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stats()->::com::android::server::StatLoggerProto::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000004u) {
      time_since_last_screen_on_ms_ = from.time_since_last_screen_on_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_interactive_state_ = from.current_interactive_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      effective_interactive_state_ = from.effective_interactive_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      memory_trim_level_ = from.memory_trim_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_since_last_screen_off_ms_ = from.time_since_last_screen_off_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobConcurrencyManagerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobConcurrencyManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobConcurrencyManagerProto::CopyFrom(const JobConcurrencyManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobConcurrencyManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConcurrencyManagerProto::IsInitialized() const {
  return true;
}

void JobConcurrencyManagerProto::InternalSwap(JobConcurrencyManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(job_count_tracker_, other->job_count_tracker_);
  swap(stats_, other->stats_);
  swap(time_since_last_screen_on_ms_, other->time_since_last_screen_on_ms_);
  swap(current_interactive_state_, other->current_interactive_state_);
  swap(effective_interactive_state_, other->effective_interactive_state_);
  swap(memory_trim_level_, other->memory_trim_level_);
  swap(time_since_last_screen_off_ms_, other->time_since_last_screen_off_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobConcurrencyManagerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobCountTrackerProto::InitAsDefaultInstance() {
}
class JobCountTrackerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobCountTrackerProto>()._has_bits_);
  static void set_has_config_num_max_total_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_num_max_bg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config_num_min_bg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_running_fg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_running_bg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_pending_fg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_pending_bg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_actual_max_fg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_actual_max_bg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_reserved_for_bg(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_starting_fg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_num_starting_bg_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

JobCountTrackerProto::JobCountTrackerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobCountTrackerProto)
}
JobCountTrackerProto::JobCountTrackerProto(const JobCountTrackerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&config_num_max_total_jobs_, &from.config_num_max_total_jobs_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_starting_bg_jobs_) -
    reinterpret_cast<char*>(&config_num_max_total_jobs_)) + sizeof(num_starting_bg_jobs_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobCountTrackerProto)
}

void JobCountTrackerProto::SharedCtor() {
  ::memset(&config_num_max_total_jobs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_starting_bg_jobs_) -
      reinterpret_cast<char*>(&config_num_max_total_jobs_)) + sizeof(num_starting_bg_jobs_));
}

JobCountTrackerProto::~JobCountTrackerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobCountTrackerProto)
  SharedDtor();
}

void JobCountTrackerProto::SharedDtor() {
}

void JobCountTrackerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobCountTrackerProto& JobCountTrackerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobCountTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobCountTrackerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobCountTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&config_num_max_total_jobs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_actual_max_fg_jobs_) -
        reinterpret_cast<char*>(&config_num_max_total_jobs_)) + sizeof(num_actual_max_fg_jobs_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&num_actual_max_bg_jobs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_starting_bg_jobs_) -
        reinterpret_cast<char*>(&num_actual_max_bg_jobs_)) + sizeof(num_starting_bg_jobs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobCountTrackerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 config_num_max_total_jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_config_num_max_total_jobs(&has_bits);
          config_num_max_total_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 config_num_max_bg_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_config_num_max_bg_jobs(&has_bits);
          config_num_max_bg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 config_num_min_bg_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_config_num_min_bg_jobs(&has_bits);
          config_num_min_bg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_running_fg_jobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_running_fg_jobs(&has_bits);
          num_running_fg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_running_bg_jobs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_running_bg_jobs(&has_bits);
          num_running_bg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_pending_fg_jobs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_pending_fg_jobs(&has_bits);
          num_pending_fg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_pending_bg_jobs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_pending_bg_jobs(&has_bits);
          num_pending_bg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_actual_max_fg_jobs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_actual_max_fg_jobs(&has_bits);
          num_actual_max_fg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_actual_max_bg_jobs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_actual_max_bg_jobs(&has_bits);
          num_actual_max_bg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_reserved_for_bg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_reserved_for_bg(&has_bits);
          num_reserved_for_bg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_starting_fg_jobs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_num_starting_fg_jobs(&has_bits);
          num_starting_fg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_starting_bg_jobs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_num_starting_bg_jobs(&has_bits);
          num_starting_bg_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobCountTrackerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobCountTrackerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_num_max_total_jobs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_config_num_max_total_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_num_max_total_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 config_num_max_bg_jobs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_config_num_max_bg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_num_max_bg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 config_num_min_bg_jobs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_config_num_min_bg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_num_min_bg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_running_fg_jobs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_running_fg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_running_fg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_running_bg_jobs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_running_bg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_running_bg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_pending_fg_jobs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_num_pending_fg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_pending_fg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_pending_bg_jobs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_pending_bg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_pending_bg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_actual_max_fg_jobs = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_num_actual_max_fg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_actual_max_fg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_actual_max_bg_jobs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_num_actual_max_bg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_actual_max_bg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_reserved_for_bg = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_num_reserved_for_bg(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reserved_for_bg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_starting_fg_jobs = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_num_starting_fg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_starting_fg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_starting_bg_jobs = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_num_starting_bg_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_starting_bg_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobCountTrackerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobCountTrackerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobCountTrackerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobCountTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 config_num_max_total_jobs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->config_num_max_total_jobs(), output);
  }

  // optional int32 config_num_max_bg_jobs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->config_num_max_bg_jobs(), output);
  }

  // optional int32 config_num_min_bg_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->config_num_min_bg_jobs(), output);
  }

  // optional int32 num_running_fg_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_running_fg_jobs(), output);
  }

  // optional int32 num_running_bg_jobs = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_running_bg_jobs(), output);
  }

  // optional int32 num_pending_fg_jobs = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->num_pending_fg_jobs(), output);
  }

  // optional int32 num_pending_bg_jobs = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_pending_bg_jobs(), output);
  }

  // optional int32 num_actual_max_fg_jobs = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->num_actual_max_fg_jobs(), output);
  }

  // optional int32 num_actual_max_bg_jobs = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->num_actual_max_bg_jobs(), output);
  }

  // optional int32 num_reserved_for_bg = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->num_reserved_for_bg(), output);
  }

  // optional int32 num_starting_fg_jobs = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->num_starting_fg_jobs(), output);
  }

  // optional int32 num_starting_bg_jobs = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->num_starting_bg_jobs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobCountTrackerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobCountTrackerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobCountTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 config_num_max_total_jobs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->config_num_max_total_jobs(), target);
  }

  // optional int32 config_num_max_bg_jobs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->config_num_max_bg_jobs(), target);
  }

  // optional int32 config_num_min_bg_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->config_num_min_bg_jobs(), target);
  }

  // optional int32 num_running_fg_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_running_fg_jobs(), target);
  }

  // optional int32 num_running_bg_jobs = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->num_running_bg_jobs(), target);
  }

  // optional int32 num_pending_fg_jobs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->num_pending_fg_jobs(), target);
  }

  // optional int32 num_pending_bg_jobs = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->num_pending_bg_jobs(), target);
  }

  // optional int32 num_actual_max_fg_jobs = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->num_actual_max_fg_jobs(), target);
  }

  // optional int32 num_actual_max_bg_jobs = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->num_actual_max_bg_jobs(), target);
  }

  // optional int32 num_reserved_for_bg = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->num_reserved_for_bg(), target);
  }

  // optional int32 num_starting_fg_jobs = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->num_starting_fg_jobs(), target);
  }

  // optional int32 num_starting_bg_jobs = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->num_starting_bg_jobs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobCountTrackerProto)
  return target;
}

size_t JobCountTrackerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobCountTrackerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 config_num_max_total_jobs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->config_num_max_total_jobs());
    }

    // optional int32 config_num_max_bg_jobs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->config_num_max_bg_jobs());
    }

    // optional int32 config_num_min_bg_jobs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->config_num_min_bg_jobs());
    }

    // optional int32 num_running_fg_jobs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_running_fg_jobs());
    }

    // optional int32 num_running_bg_jobs = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_running_bg_jobs());
    }

    // optional int32 num_pending_fg_jobs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_pending_fg_jobs());
    }

    // optional int32 num_pending_bg_jobs = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_pending_bg_jobs());
    }

    // optional int32 num_actual_max_fg_jobs = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_actual_max_fg_jobs());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 num_actual_max_bg_jobs = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_actual_max_bg_jobs());
    }

    // optional int32 num_reserved_for_bg = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_reserved_for_bg());
    }

    // optional int32 num_starting_fg_jobs = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_starting_fg_jobs());
    }

    // optional int32 num_starting_bg_jobs = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_starting_bg_jobs());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobCountTrackerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobCountTrackerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobCountTrackerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobCountTrackerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobCountTrackerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobCountTrackerProto)
    MergeFrom(*source);
  }
}

void JobCountTrackerProto::MergeFrom(const JobCountTrackerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobCountTrackerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      config_num_max_total_jobs_ = from.config_num_max_total_jobs_;
    }
    if (cached_has_bits & 0x00000002u) {
      config_num_max_bg_jobs_ = from.config_num_max_bg_jobs_;
    }
    if (cached_has_bits & 0x00000004u) {
      config_num_min_bg_jobs_ = from.config_num_min_bg_jobs_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_running_fg_jobs_ = from.num_running_fg_jobs_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_running_bg_jobs_ = from.num_running_bg_jobs_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_pending_fg_jobs_ = from.num_pending_fg_jobs_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_pending_bg_jobs_ = from.num_pending_bg_jobs_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_actual_max_fg_jobs_ = from.num_actual_max_fg_jobs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      num_actual_max_bg_jobs_ = from.num_actual_max_bg_jobs_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_reserved_for_bg_ = from.num_reserved_for_bg_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_starting_fg_jobs_ = from.num_starting_fg_jobs_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_starting_bg_jobs_ = from.num_starting_bg_jobs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobCountTrackerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobCountTrackerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobCountTrackerProto::CopyFrom(const JobCountTrackerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobCountTrackerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobCountTrackerProto::IsInitialized() const {
  return true;
}

void JobCountTrackerProto::InternalSwap(JobCountTrackerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(config_num_max_total_jobs_, other->config_num_max_total_jobs_);
  swap(config_num_max_bg_jobs_, other->config_num_max_bg_jobs_);
  swap(config_num_min_bg_jobs_, other->config_num_min_bg_jobs_);
  swap(num_running_fg_jobs_, other->num_running_fg_jobs_);
  swap(num_running_bg_jobs_, other->num_running_bg_jobs_);
  swap(num_pending_fg_jobs_, other->num_pending_fg_jobs_);
  swap(num_pending_bg_jobs_, other->num_pending_bg_jobs_);
  swap(num_actual_max_fg_jobs_, other->num_actual_max_fg_jobs_);
  swap(num_actual_max_bg_jobs_, other->num_actual_max_bg_jobs_);
  swap(num_reserved_for_bg_, other->num_reserved_for_bg_);
  swap(num_starting_fg_jobs_, other->num_starting_fg_jobs_);
  swap(num_starting_bg_jobs_, other->num_starting_bg_jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobCountTrackerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStorePersistStatsProto_Stats::InitAsDefaultInstance() {
}
class JobStorePersistStatsProto_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStorePersistStatsProto_Stats>()._has_bits_);
  static void set_has_num_total_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_system_server_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_system_sync_manager_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

JobStorePersistStatsProto_Stats::JobStorePersistStatsProto_Stats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStorePersistStatsProto.Stats)
}
JobStorePersistStatsProto_Stats::JobStorePersistStatsProto_Stats(const JobStorePersistStatsProto_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_total_jobs_, &from.num_total_jobs_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_system_sync_manager_jobs_) -
    reinterpret_cast<char*>(&num_total_jobs_)) + sizeof(num_system_sync_manager_jobs_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStorePersistStatsProto.Stats)
}

void JobStorePersistStatsProto_Stats::SharedCtor() {
  ::memset(&num_total_jobs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_system_sync_manager_jobs_) -
      reinterpret_cast<char*>(&num_total_jobs_)) + sizeof(num_system_sync_manager_jobs_));
}

JobStorePersistStatsProto_Stats::~JobStorePersistStatsProto_Stats() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStorePersistStatsProto.Stats)
  SharedDtor();
}

void JobStorePersistStatsProto_Stats::SharedDtor() {
}

void JobStorePersistStatsProto_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStorePersistStatsProto_Stats& JobStorePersistStatsProto_Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStorePersistStatsProto_Stats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStorePersistStatsProto_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&num_total_jobs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_system_sync_manager_jobs_) -
        reinterpret_cast<char*>(&num_total_jobs_)) + sizeof(num_system_sync_manager_jobs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStorePersistStatsProto_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_total_jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_total_jobs(&has_bits);
          num_total_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_system_server_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_system_server_jobs(&has_bits);
          num_system_server_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_system_sync_manager_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_system_sync_manager_jobs(&has_bits);
          num_system_sync_manager_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStorePersistStatsProto_Stats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_total_jobs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_total_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_total_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_system_server_jobs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_system_server_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_system_server_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_system_sync_manager_jobs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_system_sync_manager_jobs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_system_sync_manager_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStorePersistStatsProto.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStorePersistStatsProto.Stats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStorePersistStatsProto_Stats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_total_jobs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_total_jobs(), output);
  }

  // optional int32 num_system_server_jobs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_system_server_jobs(), output);
  }

  // optional int32 num_system_sync_manager_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_system_sync_manager_jobs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStorePersistStatsProto.Stats)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStorePersistStatsProto_Stats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_total_jobs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_total_jobs(), target);
  }

  // optional int32 num_system_server_jobs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_system_server_jobs(), target);
  }

  // optional int32 num_system_sync_manager_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_system_sync_manager_jobs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStorePersistStatsProto.Stats)
  return target;
}

size_t JobStorePersistStatsProto_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 num_total_jobs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_total_jobs());
    }

    // optional int32 num_system_server_jobs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_system_server_jobs());
    }

    // optional int32 num_system_sync_manager_jobs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_system_sync_manager_jobs());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStorePersistStatsProto_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStorePersistStatsProto_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStorePersistStatsProto_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStorePersistStatsProto.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStorePersistStatsProto.Stats)
    MergeFrom(*source);
  }
}

void JobStorePersistStatsProto_Stats::MergeFrom(const JobStorePersistStatsProto_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      num_total_jobs_ = from.num_total_jobs_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_system_server_jobs_ = from.num_system_server_jobs_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_system_sync_manager_jobs_ = from.num_system_sync_manager_jobs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JobStorePersistStatsProto_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStorePersistStatsProto_Stats::CopyFrom(const JobStorePersistStatsProto_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStorePersistStatsProto.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStorePersistStatsProto_Stats::IsInitialized() const {
  return true;
}

void JobStorePersistStatsProto_Stats::InternalSwap(JobStorePersistStatsProto_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_total_jobs_, other->num_total_jobs_);
  swap(num_system_server_jobs_, other->num_system_server_jobs_);
  swap(num_system_sync_manager_jobs_, other->num_system_sync_manager_jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStorePersistStatsProto_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStorePersistStatsProto::InitAsDefaultInstance() {
  ::com::android::server::job::_JobStorePersistStatsProto_default_instance_._instance.get_mutable()->first_load_ = const_cast< ::com::android::server::job::JobStorePersistStatsProto_Stats*>(
      ::com::android::server::job::JobStorePersistStatsProto_Stats::internal_default_instance());
  ::com::android::server::job::_JobStorePersistStatsProto_default_instance_._instance.get_mutable()->last_save_ = const_cast< ::com::android::server::job::JobStorePersistStatsProto_Stats*>(
      ::com::android::server::job::JobStorePersistStatsProto_Stats::internal_default_instance());
}
class JobStorePersistStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JobStorePersistStatsProto>()._has_bits_);
  static const ::com::android::server::job::JobStorePersistStatsProto_Stats& first_load(const JobStorePersistStatsProto* msg);
  static void set_has_first_load(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::job::JobStorePersistStatsProto_Stats& last_save(const JobStorePersistStatsProto* msg);
  static void set_has_last_save(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::job::JobStorePersistStatsProto_Stats&
JobStorePersistStatsProto::_Internal::first_load(const JobStorePersistStatsProto* msg) {
  return *msg->first_load_;
}
const ::com::android::server::job::JobStorePersistStatsProto_Stats&
JobStorePersistStatsProto::_Internal::last_save(const JobStorePersistStatsProto* msg) {
  return *msg->last_save_;
}
JobStorePersistStatsProto::JobStorePersistStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.job.JobStorePersistStatsProto)
}
JobStorePersistStatsProto::JobStorePersistStatsProto(const JobStorePersistStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_load()) {
    first_load_ = new ::com::android::server::job::JobStorePersistStatsProto_Stats(*from.first_load_);
  } else {
    first_load_ = nullptr;
  }
  if (from.has_last_save()) {
    last_save_ = new ::com::android::server::job::JobStorePersistStatsProto_Stats(*from.last_save_);
  } else {
    last_save_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.job.JobStorePersistStatsProto)
}

void JobStorePersistStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  ::memset(&first_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_save_) -
      reinterpret_cast<char*>(&first_load_)) + sizeof(last_save_));
}

JobStorePersistStatsProto::~JobStorePersistStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.job.JobStorePersistStatsProto)
  SharedDtor();
}

void JobStorePersistStatsProto::SharedDtor() {
  if (this != internal_default_instance()) delete first_load_;
  if (this != internal_default_instance()) delete last_save_;
}

void JobStorePersistStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStorePersistStatsProto& JobStorePersistStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStorePersistStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fjobscheduler_2eproto.base);
  return *internal_default_instance();
}


void JobStorePersistStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.job.JobStorePersistStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(first_load_ != nullptr);
      first_load_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(last_save_ != nullptr);
      last_save_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobStorePersistStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.job.JobStorePersistStatsProto.Stats first_load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_first_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.job.JobStorePersistStatsProto.Stats last_save = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_last_save(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobStorePersistStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.job.JobStorePersistStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.job.JobStorePersistStatsProto.Stats first_load = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_first_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.job.JobStorePersistStatsProto.Stats last_save = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_save()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.job.JobStorePersistStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.job.JobStorePersistStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobStorePersistStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.job.JobStorePersistStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStorePersistStatsProto.Stats first_load = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::first_load(this), output);
  }

  // optional .com.android.server.job.JobStorePersistStatsProto.Stats last_save = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::last_save(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.job.JobStorePersistStatsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStorePersistStatsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.job.JobStorePersistStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.job.JobStorePersistStatsProto.Stats first_load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::first_load(this), target);
  }

  // optional .com.android.server.job.JobStorePersistStatsProto.Stats last_save = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::last_save(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.job.JobStorePersistStatsProto)
  return target;
}

size_t JobStorePersistStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.job.JobStorePersistStatsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.job.JobStorePersistStatsProto.Stats first_load = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_load_);
    }

    // optional .com.android.server.job.JobStorePersistStatsProto.Stats last_save = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_save_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStorePersistStatsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.job.JobStorePersistStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStorePersistStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStorePersistStatsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.job.JobStorePersistStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.job.JobStorePersistStatsProto)
    MergeFrom(*source);
  }
}

void JobStorePersistStatsProto::MergeFrom(const JobStorePersistStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.job.JobStorePersistStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_first_load()->::com::android::server::job::JobStorePersistStatsProto_Stats::MergeFrom(from.first_load());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_last_save()->::com::android::server::job::JobStorePersistStatsProto_Stats::MergeFrom(from.last_save());
    }
  }
}

void JobStorePersistStatsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.job.JobStorePersistStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStorePersistStatsProto::CopyFrom(const JobStorePersistStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.job.JobStorePersistStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStorePersistStatsProto::IsInitialized() const {
  return true;
}

void JobStorePersistStatsProto::InternalSwap(JobStorePersistStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(first_load_, other->first_load_);
  swap(last_save_, other->last_save_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStorePersistStatsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace job
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto_JobRestriction >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto_RegisteredJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto_PriorityOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto_PendingJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_InactiveJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob_RunningJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto_ActiveJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobSchedulerServiceDumpProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobSchedulerServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobSchedulerServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::ConstantsProto_QuotaController* Arena::CreateMaybeMessage< ::com::android::server::job::ConstantsProto_QuotaController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::ConstantsProto_QuotaController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::ConstantsProto_TimeController* Arena::CreateMaybeMessage< ::com::android::server::job::ConstantsProto_TimeController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::ConstantsProto_TimeController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::ConstantsProto* Arena::CreateMaybeMessage< ::com::android::server::job::ConstantsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::ConstantsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::MaxJobCountsProto* Arena::CreateMaybeMessage< ::com::android::server::job::MaxJobCountsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::MaxJobCountsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto* Arena::CreateMaybeMessage< ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::MaxJobCountsPerMemoryTrimLevelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_BackgroundJobsController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_BackgroundJobsController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_BackgroundJobsController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_BackgroundJobsController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_BatteryController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_BatteryController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_BatteryController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_BatteryController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_BatteryController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_BatteryController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_ConnectivityController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_ConnectivityController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_ConnectivityController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_ConnectivityController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_ContentObserverController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData_JobInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_ContentObserverController_Observer_TriggerContentData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_ContentObserverController_Observer* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_ContentObserverController_Observer >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_ContentObserverController_Observer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_ContentObserverController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_ContentObserverController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_ContentObserverController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_DeviceIdleJobsController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_DeviceIdleJobsController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_DeviceIdleJobsController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_DeviceIdleJobsController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_IdleController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_IdleController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_IdleController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_CarIdlenessTracker >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker_DeviceIdlenessTracker >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_IdleController_IdlenessTracker >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_IdleController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_IdleController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_IdleController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_AlarmListener* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_AlarmListener >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_AlarmListener >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_ExecutionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_Package* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_Package >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_Package >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_TimingSession* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_TimingSession >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_TimingSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_Timer* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_Timer >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_Timer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_TopAppTimer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_PackageStats* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_PackageStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_PackageStats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_UidPackageMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener_Alarm >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController_InQuotaAlarmListener >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_QuotaController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_QuotaController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_QuotaController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_StorageController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_StorageController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_StorageController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_StorageController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_StorageController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_StorageController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_TimeController_TrackedJob* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_TimeController_TrackedJob >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_TimeController_TrackedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto_TimeController* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto_TimeController >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto_TimeController >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::StateControllerProto* Arena::CreateMaybeMessage< ::com::android::server::job::StateControllerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::StateControllerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::DataSetProto_PackageEntryProto_State* Arena::CreateMaybeMessage< ::com::android::server::job::DataSetProto_PackageEntryProto_State >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::DataSetProto_PackageEntryProto_State >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount* Arena::CreateMaybeMessage< ::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::DataSetProto_PackageEntryProto_StopReasonCount >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::DataSetProto_PackageEntryProto* Arena::CreateMaybeMessage< ::com::android::server::job::DataSetProto_PackageEntryProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::DataSetProto_PackageEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::DataSetProto* Arena::CreateMaybeMessage< ::com::android::server::job::DataSetProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::DataSetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::GrantedUriPermissionsDumpProto* Arena::CreateMaybeMessage< ::com::android::server::job::GrantedUriPermissionsDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::GrantedUriPermissionsDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobPackageTrackerDumpProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobPackageTrackerDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobPackageTrackerDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobPackageHistoryProto_HistoryEvent* Arena::CreateMaybeMessage< ::com::android::server::job::JobPackageHistoryProto_HistoryEvent >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobPackageHistoryProto_HistoryEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobPackageHistoryProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobPackageHistoryProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobPackageHistoryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStatusShortInfoProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobStatusShortInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStatusShortInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri* Arena::CreateMaybeMessage< ::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStatusDumpProto_JobInfo_TriggerContentUri >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff* Arena::CreateMaybeMessage< ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStatusDumpProto_JobInfo_Backoff >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStatusDumpProto_JobInfo* Arena::CreateMaybeMessage< ::com::android::server::job::JobStatusDumpProto_JobInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStatusDumpProto_JobInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints* Arena::CreateMaybeMessage< ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStatusDumpProto_ImplicitConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStatusDumpProto_JobWorkItem* Arena::CreateMaybeMessage< ::com::android::server::job::JobStatusDumpProto_JobWorkItem >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStatusDumpProto_JobWorkItem >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStatusDumpProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobStatusDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStatusDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobConcurrencyManagerProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobConcurrencyManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobConcurrencyManagerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobCountTrackerProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobCountTrackerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobCountTrackerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStorePersistStatsProto_Stats* Arena::CreateMaybeMessage< ::com::android::server::job::JobStorePersistStatsProto_Stats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStorePersistStatsProto_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::job::JobStorePersistStatsProto* Arena::CreateMaybeMessage< ::com::android::server::job::JobStorePersistStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::job::JobStorePersistStatsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
