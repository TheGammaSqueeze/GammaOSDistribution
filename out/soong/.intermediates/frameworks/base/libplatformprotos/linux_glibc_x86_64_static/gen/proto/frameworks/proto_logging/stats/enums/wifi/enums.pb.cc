// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/wifi/enums.proto

#include "frameworks/proto_logging/stats/enums/wifi/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace net {
namespace wifi {
}  // namespace wifi
}  // namespace net
}  // namespace android
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5frameworks/proto_logging/stats/enums/w"
  "ifi/enums.proto\022\020android.net.wifi*\201\001\n\014Wi"
  "fiModeEnum\022\026\n\016WIFI_MODE_FULL\020\001\032\002\010\001\022\033\n\023WI"
  "FI_MODE_SCAN_ONLY\020\002\032\002\010\001\022\034\n\030WIFI_MODE_FUL"
  "L_HIGH_PERF\020\003\022\036\n\032WIFI_MODE_FULL_LOW_LATE"
  "NCY\020\004*\245\003\n\014WifiAuthType\022\022\n\016AUTH_TYPE_NONE"
  "\020\000\022\025\n\021AUTH_TYPE_WPA_PSK\020\001\022\025\n\021AUTH_TYPE_W"
  "PA_EAP\020\002\022\027\n\023AUTH_TYPE_IEEE8021X\020\003\022\026\n\022AUT"
  "H_TYPE_WPA2_PSK\020\004\022\022\n\016AUTH_TYPE_OSEN\020\005\022\024\n"
  "\020AUTH_TYPE_FT_PSK\020\006\022\024\n\020AUTH_TYPE_FT_EAP\020"
  "\007\022\021\n\rAUTH_TYPE_SAE\020\010\022\021\n\rAUTH_TYPE_OWE\020\t\022"
  "\031\n\025AUTH_TYPE_SUITE_B_192\020\n\022\034\n\030AUTH_TYPE_"
  "WPA_PSK_SHA256\020\013\022\034\n\030AUTH_TYPE_WPA_EAP_SH"
  "A256\020\014\022\026\n\022AUTH_TYPE_WAPI_PSK\020\r\022\027\n\023AUTH_T"
  "YPE_WAPI_CERT\020\016\022\031\n\025AUTH_TYPE_FILS_SHA256"
  "\020\017\022\031\n\025AUTH_TYPE_FILS_SHA384\020\020*\235\001\n\016WifiBa"
  "ndBucket\022\020\n\014BAND_UNKNOWN\020\000\022\013\n\007BAND_2G\020\001\022"
  "\017\n\013BAND_5G_LOW\020\002\022\022\n\016BAND_5G_MIDDLE\020\003\022\020\n\014"
  "BAND_5G_HIGH\020\004\022\017\n\013BAND_6G_LOW\020\005\022\022\n\016BAND_"
  "6G_MIDDLE\020\006\022\020\n\014BAND_6G_HIGH\020\007B\022B\016WifiPro"
  "toEnumsP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto, "frameworks/proto_logging/stats/enums/wifi/enums.proto", 809,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto, 0, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto), true);
namespace android {
namespace net {
namespace wifi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiModeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto[0];
}
bool WifiModeEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiAuthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto[1];
}
bool WifiAuthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiBandBucket_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto[2];
}
bool WifiBandBucket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wifi
}  // namespace net
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
