// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/biometrics.proto

#include "frameworks/base/core/proto/android/server/biometrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
namespace com {
namespace android {
namespace server {
namespace biometrics {
class BiometricServiceStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiometricServiceStateProto> _instance;
} _BiometricServiceStateProto_default_instance_;
class SensorServiceStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorServiceStateProto> _instance;
} _SensorServiceStateProto_default_instance_;
class SensorStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorStateProto> _instance;
} _SensorStateProto_default_instance_;
class UserStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserStateProto> _instance;
} _UserStateProto_default_instance_;
class BiometricSchedulerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiometricSchedulerProto> _instance;
} _BiometricSchedulerProto_default_instance_;
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_BiometricSchedulerProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::BiometricSchedulerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::BiometricSchedulerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {}};

static void InitDefaultsscc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_BiometricServiceStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::BiometricServiceStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::BiometricServiceStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {
      &scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,}};

static void InitDefaultsscc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_SensorServiceStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::SensorServiceStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::SensorServiceStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {
      &scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,}};

static void InitDefaultsscc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_SensorStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::SensorStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::SensorStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {
      &scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,
      &scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,}};

static void InitDefaultsscc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_UserStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::UserStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::UserStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricServiceStateProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricServiceStateProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricServiceStateProto, sensor_service_states_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricServiceStateProto, auth_session_state_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricServiceStateProto, auth_session_multi_sensor_state_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorServiceStateProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorServiceStateProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorServiceStateProto, sensor_states_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, modality_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, current_strength_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, scheduler_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, user_states_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, reset_lockout_requires_hardware_auth_token_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, reset_lockout_requires_challenge_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::SensorStateProto, modality_flags_),
  1,
  2,
  3,
  0,
  ~0u,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::UserStateProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::UserStateProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::UserStateProto, user_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::UserStateProto, num_enrolled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricSchedulerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricSchedulerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricSchedulerProto, current_operation_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricSchedulerProto, total_operations_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::biometrics::BiometricSchedulerProto, recent_operations_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::com::android::server::biometrics::BiometricServiceStateProto)},
  { 11, 17, sizeof(::com::android::server::biometrics::SensorServiceStateProto)},
  { 18, 31, sizeof(::com::android::server::biometrics::SensorStateProto)},
  { 39, 46, sizeof(::com::android::server::biometrics::UserStateProto)},
  { 48, 56, sizeof(::com::android::server::biometrics::BiometricSchedulerProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::_BiometricServiceStateProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::_SensorServiceStateProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::_SensorStateProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::_UserStateProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::biometrics::_BiometricSchedulerProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:frameworks/base/core/proto/android/ser"
  "ver/biometrics.proto\022\035com.android.server"
  ".biometrics\0320frameworks/base/core/proto/"
  "android/privacy.proto\"\334\006\n\032BiometricServi"
  "ceStateProto\022U\n\025sensor_service_states\030\001 "
  "\003(\01326.com.android.server.biometrics.Sens"
  "orServiceStateProto\022f\n\022auth_session_stat"
  "e\030\002 \001(\0162J.com.android.server.biometrics."
  "BiometricServiceStateProto.AuthSessionSt"
  "ate\022s\n\037auth_session_multi_sensor_state\030\003"
  " \001(\0162J.com.android.server.biometrics.Bio"
  "metricServiceStateProto.MultiSensorState"
  "\"\335\002\n\020AuthSessionState\022\023\n\017STATE_AUTH_IDLE"
  "\020\000\022\025\n\021STATE_AUTH_CALLED\020\001\022\026\n\022STATE_AUTH_"
  "STARTED\020\002\022!\n\035STATE_AUTH_STARTED_UI_SHOWI"
  "NG\020\003\022\025\n\021STATE_AUTH_PAUSED\020\004\022\036\n\032STATE_AUT"
  "H_PAUSED_RESUMING\020\005\022\036\n\032STATE_AUTH_PENDIN"
  "G_CONFIRM\020\006\022%\n!STATE_AUTHENTICATED_PENDI"
  "NG_SYSUI\020\007\022\035\n\031STATE_ERROR_PENDING_SYSUI\020"
  "\010\022#\n\037STATE_SHOWING_DEVICE_CREDENTIAL\020\t\022 "
  "\n\034STATE_CLIENT_DIED_CANCELLING\020\n\"\236\001\n\020Mul"
  "tiSensorState\022\036\n\032MULTI_SENSOR_STATE_UNKN"
  "OWN\020\000\022 \n\034MULTI_SENSOR_STATE_SWITCHING\020\001\022"
  "$\n MULTI_SENSOR_STATE_FACE_SCANNING\020\002\022\"\n"
  "\036MULTI_SENSOR_STATE_FP_SCANNING\020\003:\t\232\237\325\207\003"
  "\003\010\310\001\"l\n\027SensorServiceStateProto\022F\n\rsenso"
  "r_states\030\001 \003(\0132/.com.android.server.biom"
  "etrics.SensorStateProto:\t\232\237\325\207\003\003\010\310\001\"\276\004\n\020S"
  "ensorStateProto\022\021\n\tsensor_id\030\001 \001(\005\022J\n\010mo"
  "dality\030\002 \001(\01628.com.android.server.biomet"
  "rics.SensorStateProto.Modality\022\030\n\020curren"
  "t_strength\030\003 \001(\005\022I\n\tscheduler\030\004 \001(\01326.co"
  "m.android.server.biometrics.BiometricSch"
  "edulerProto\022B\n\013user_states\030\005 \003(\0132-.com.a"
  "ndroid.server.biometrics.UserStateProto\022"
  "2\n*reset_lockout_requires_hardware_auth_"
  "token\030\006 \001(\010\022(\n reset_lockout_requires_ch"
  "allenge\030\007 \001(\010\022T\n\016modality_flags\030\010 \003(\0162<."
  "com.android.server.biometrics.SensorStat"
  "eProto.ModalityFlag\"<\n\010Modality\022\013\n\007UNKNO"
  "WN\020\000\022\017\n\013FINGERPRINT\020\001\022\010\n\004FACE\020\002\022\010\n\004IRIS\020"
  "\003\"%\n\014ModalityFlag\022\025\n\021FINGERPRINT_UDFPS\020\000"
  ":\t\232\237\325\207\003\003\010\310\001\"B\n\016UserStateProto\022\017\n\007user_id"
  "\030\001 \001(\005\022\024\n\014num_enrolled\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001\""
  "\330\001\n\027BiometricSchedulerProto\022K\n\021current_o"
  "peration\030\001 \001(\01620.com.android.server.biom"
  "etrics.ClientMonitorEnum\022\030\n\020total_operat"
  "ions\030\002 \001(\005\022K\n\021recent_operations\030\003 \003(\01620."
  "com.android.server.biometrics.ClientMoni"
  "torEnum:\t\232\237\325\207\003\003\010\310\001*\232\003\n\021ClientMonitorEnum"
  "\022\013\n\007CM_NONE\020\000\022\031\n\025CM_UPDATE_ACTIVE_USER\020\001"
  "\022\r\n\tCM_ENROLL\020\002\022\023\n\017CM_AUTHENTICATE\020\003\022\r\n\t"
  "CM_REMOVE\020\004\022\033\n\027CM_GET_AUTHENTICATOR_ID\020\005"
  "\022\020\n\014CM_ENUMERATE\020\006\022\027\n\023CM_INTERNAL_CLEANU"
  "P\020\007\022\022\n\016CM_SET_FEATURE\020\010\022\022\n\016CM_GET_FEATUR"
  "E\020\t\022\031\n\025CM_GENERATE_CHALLENGE\020\n\022\027\n\023CM_REV"
  "OKE_CHALLENGE\020\013\022\024\n\020CM_RESET_LOCKOUT\020\014\022\031\n"
  "\025CM_DETECT_INTERACTION\020\r\022\035\n\031CM_INVALIDAT"
  "ION_REQUESTER\020\016\022\021\n\rCM_INVALIDATE\020\017\022\020\n\014CM"
  "_STOP_USER\020\020\022\021\n\rCM_START_USER\020\021B\023B\017Biome"
  "tricsProtoP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_deps[1] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_sccs[5] = {
  &scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,
  &scc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,
  &scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,
  &scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,
  &scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto, "frameworks/base/core/proto/android/server/biometrics.proto", 2412,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto, 5, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace biometrics {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiometricServiceStateProto_AuthSessionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[0];
}
bool BiometricServiceStateProto_AuthSessionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_IDLE;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_CALLED;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_STARTED;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_STARTED_UI_SHOWING;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_PAUSED;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_PAUSED_RESUMING;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_PENDING_CONFIRM;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTHENTICATED_PENDING_SYSUI;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_ERROR_PENDING_SYSUI;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_SHOWING_DEVICE_CREDENTIAL;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_CLIENT_DIED_CANCELLING;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::AuthSessionState_MIN;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::AuthSessionState_MAX;
constexpr int BiometricServiceStateProto::AuthSessionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiometricServiceStateProto_MultiSensorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[1];
}
bool BiometricServiceStateProto_MultiSensorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_UNKNOWN;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_SWITCHING;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_FACE_SCANNING;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_FP_SCANNING;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MultiSensorState_MIN;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MultiSensorState_MAX;
constexpr int BiometricServiceStateProto::MultiSensorState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorStateProto_Modality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[2];
}
bool SensorStateProto_Modality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorStateProto_Modality SensorStateProto::UNKNOWN;
constexpr SensorStateProto_Modality SensorStateProto::FINGERPRINT;
constexpr SensorStateProto_Modality SensorStateProto::FACE;
constexpr SensorStateProto_Modality SensorStateProto::IRIS;
constexpr SensorStateProto_Modality SensorStateProto::Modality_MIN;
constexpr SensorStateProto_Modality SensorStateProto::Modality_MAX;
constexpr int SensorStateProto::Modality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorStateProto_ModalityFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[3];
}
bool SensorStateProto_ModalityFlag_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorStateProto_ModalityFlag SensorStateProto::FINGERPRINT_UDFPS;
constexpr SensorStateProto_ModalityFlag SensorStateProto::ModalityFlag_MIN;
constexpr SensorStateProto_ModalityFlag SensorStateProto::ModalityFlag_MAX;
constexpr int SensorStateProto::ModalityFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMonitorEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto[4];
}
bool ClientMonitorEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BiometricServiceStateProto::InitAsDefaultInstance() {
}
class BiometricServiceStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BiometricServiceStateProto>()._has_bits_);
  static void set_has_auth_session_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_session_multi_sensor_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BiometricServiceStateProto::BiometricServiceStateProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.BiometricServiceStateProto)
}
BiometricServiceStateProto::BiometricServiceStateProto(const BiometricServiceStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensor_service_states_(from.sensor_service_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&auth_session_state_, &from.auth_session_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_session_multi_sensor_state_) -
    reinterpret_cast<char*>(&auth_session_state_)) + sizeof(auth_session_multi_sensor_state_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.BiometricServiceStateProto)
}

void BiometricServiceStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  ::memset(&auth_session_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_session_multi_sensor_state_) -
      reinterpret_cast<char*>(&auth_session_state_)) + sizeof(auth_session_multi_sensor_state_));
}

BiometricServiceStateProto::~BiometricServiceStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.BiometricServiceStateProto)
  SharedDtor();
}

void BiometricServiceStateProto::SharedDtor() {
}

void BiometricServiceStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiometricServiceStateProto& BiometricServiceStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void BiometricServiceStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.BiometricServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_service_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&auth_session_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_session_multi_sensor_state_) -
        reinterpret_cast<char*>(&auth_session_state_)) + sizeof(auth_session_multi_sensor_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BiometricServiceStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_service_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState_IsValid(val))) {
            set_auth_session_state(static_cast<::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState_IsValid(val))) {
            set_auth_session_multi_sensor_state(static_cast<::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BiometricServiceStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.BiometricServiceStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_service_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState_IsValid(value)) {
            set_auth_session_state(static_cast< ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState_IsValid(value)) {
            set_auth_session_multi_sensor_state(static_cast< ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.BiometricServiceStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.BiometricServiceStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BiometricServiceStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.BiometricServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_service_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor_service_states(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->auth_session_state(), output);
  }

  // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->auth_session_multi_sensor_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.BiometricServiceStateProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BiometricServiceStateProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.BiometricServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_service_states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor_service_states(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->auth_session_state(), target);
  }

  // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->auth_session_multi_sensor_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.BiometricServiceStateProto)
  return target;
}

size_t BiometricServiceStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.BiometricServiceStateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_service_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_service_states(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->auth_session_state());
    }

    // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->auth_session_multi_sensor_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiometricServiceStateProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.BiometricServiceStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BiometricServiceStateProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BiometricServiceStateProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.BiometricServiceStateProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.BiometricServiceStateProto)
    MergeFrom(*source);
  }
}

void BiometricServiceStateProto::MergeFrom(const BiometricServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.BiometricServiceStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_service_states_.MergeFrom(from.sensor_service_states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      auth_session_state_ = from.auth_session_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_session_multi_sensor_state_ = from.auth_session_multi_sensor_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BiometricServiceStateProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.BiometricServiceStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometricServiceStateProto::CopyFrom(const BiometricServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.BiometricServiceStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricServiceStateProto::IsInitialized() const {
  return true;
}

void BiometricServiceStateProto::InternalSwap(BiometricServiceStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sensor_service_states_)->InternalSwap(CastToBase(&other->sensor_service_states_));
  swap(auth_session_state_, other->auth_session_state_);
  swap(auth_session_multi_sensor_state_, other->auth_session_multi_sensor_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiometricServiceStateProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorServiceStateProto::InitAsDefaultInstance() {
}
class SensorServiceStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorServiceStateProto>()._has_bits_);
};

SensorServiceStateProto::SensorServiceStateProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.SensorServiceStateProto)
}
SensorServiceStateProto::SensorServiceStateProto(const SensorServiceStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensor_states_(from.sensor_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.SensorServiceStateProto)
}

void SensorServiceStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
}

SensorServiceStateProto::~SensorServiceStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.SensorServiceStateProto)
  SharedDtor();
}

void SensorServiceStateProto::SharedDtor() {
}

void SensorServiceStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorServiceStateProto& SensorServiceStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void SensorServiceStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.SensorServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorServiceStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorServiceStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.SensorServiceStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.SensorServiceStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.SensorServiceStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorServiceStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.SensorServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor_states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.SensorServiceStateProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorServiceStateProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.SensorServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor_states(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.SensorServiceStateProto)
  return target;
}

size_t SensorServiceStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.SensorServiceStateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_states(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorServiceStateProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.SensorServiceStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorServiceStateProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorServiceStateProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.SensorServiceStateProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.SensorServiceStateProto)
    MergeFrom(*source);
  }
}

void SensorServiceStateProto::MergeFrom(const SensorServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.SensorServiceStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_states_.MergeFrom(from.sensor_states_);
}

void SensorServiceStateProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.SensorServiceStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorServiceStateProto::CopyFrom(const SensorServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.SensorServiceStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorServiceStateProto::IsInitialized() const {
  return true;
}

void SensorServiceStateProto::InternalSwap(SensorServiceStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sensor_states_)->InternalSwap(CastToBase(&other->sensor_states_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorServiceStateProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorStateProto::InitAsDefaultInstance() {
  ::com::android::server::biometrics::_SensorStateProto_default_instance_._instance.get_mutable()->scheduler_ = const_cast< ::com::android::server::biometrics::BiometricSchedulerProto*>(
      ::com::android::server::biometrics::BiometricSchedulerProto::internal_default_instance());
}
class SensorStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorStateProto>()._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::biometrics::BiometricSchedulerProto& scheduler(const SensorStateProto* msg);
  static void set_has_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reset_lockout_requires_hardware_auth_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reset_lockout_requires_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::biometrics::BiometricSchedulerProto&
SensorStateProto::_Internal::scheduler(const SensorStateProto* msg) {
  return *msg->scheduler_;
}
SensorStateProto::SensorStateProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.SensorStateProto)
}
SensorStateProto::SensorStateProto(const SensorStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      user_states_(from.user_states_),
      modality_flags_(from.modality_flags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scheduler()) {
    scheduler_ = new ::com::android::server::biometrics::BiometricSchedulerProto(*from.scheduler_);
  } else {
    scheduler_ = nullptr;
  }
  ::memcpy(&sensor_id_, &from.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_lockout_requires_challenge_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(reset_lockout_requires_challenge_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.SensorStateProto)
}

void SensorStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  ::memset(&scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_lockout_requires_challenge_) -
      reinterpret_cast<char*>(&scheduler_)) + sizeof(reset_lockout_requires_challenge_));
}

SensorStateProto::~SensorStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.SensorStateProto)
  SharedDtor();
}

void SensorStateProto::SharedDtor() {
  if (this != internal_default_instance()) delete scheduler_;
}

void SensorStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorStateProto& SensorStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void SensorStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.SensorStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_states_.Clear();
  modality_flags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scheduler_ != nullptr);
    scheduler_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reset_lockout_requires_challenge_) -
        reinterpret_cast<char*>(&sensor_id_)) + sizeof(reset_lockout_requires_challenge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::SensorStateProto_Modality_IsValid(val))) {
            set_modality(static_cast<::com::android::server::biometrics::SensorStateProto_Modality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 current_strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_current_strength(&has_bits);
          current_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional bool reset_lockout_requires_hardware_auth_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reset_lockout_requires_hardware_auth_token(&has_bits);
          reset_lockout_requires_hardware_auth_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reset_lockout_requires_challenge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_reset_lockout_requires_challenge(&has_bits);
          reset_lockout_requires_challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid(val))) {
              add_modality_flags(static_cast<::com::android::server::biometrics::SensorStateProto_ModalityFlag>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_modality_flags(), ptr, ctx, ::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.SensorStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sensor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sensor_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::SensorStateProto_Modality_IsValid(value)) {
            set_modality(static_cast< ::com::android::server::biometrics::SensorStateProto_Modality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_strength = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_current_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset_lockout_requires_hardware_auth_token = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_reset_lockout_requires_hardware_auth_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_lockout_requires_hardware_auth_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset_lockout_requires_challenge = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_reset_lockout_requires_challenge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_lockout_requires_challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid(value)) {
            add_modality_flags(static_cast< ::com::android::server::biometrics::SensorStateProto_ModalityFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_modality_flags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.SensorStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.SensorStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.SensorStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sensor_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->sensor_id(), output);
  }

  // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->modality(), output);
  }

  // optional int32 current_strength = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->current_strength(), output);
  }

  // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::scheduler(this), output);
  }

  // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->user_states(static_cast<int>(i)),
      output);
  }

  // optional bool reset_lockout_requires_hardware_auth_token = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->reset_lockout_requires_hardware_auth_token(), output);
  }

  // optional bool reset_lockout_requires_challenge = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->reset_lockout_requires_challenge(), output);
  }

  // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
  for (int i = 0, n = this->modality_flags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->modality_flags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.SensorStateProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorStateProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.SensorStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sensor_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->sensor_id(), target);
  }

  // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->modality(), target);
  }

  // optional int32 current_strength = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->current_strength(), target);
  }

  // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::scheduler(this), target);
  }

  // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->user_states(static_cast<int>(i)), target);
  }

  // optional bool reset_lockout_requires_hardware_auth_token = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->reset_lockout_requires_hardware_auth_token(), target);
  }

  // optional bool reset_lockout_requires_challenge = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->reset_lockout_requires_challenge(), target);
  }

  // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    8, this->modality_flags_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.SensorStateProto)
  return target;
}

size_t SensorStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.SensorStateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->user_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_states(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->modality_flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->modality_flags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduler_);
    }

    // optional int32 sensor_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sensor_id());
    }

    // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->modality());
    }

    // optional int32 current_strength = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->current_strength());
    }

    // optional bool reset_lockout_requires_hardware_auth_token = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool reset_lockout_requires_challenge = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorStateProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.SensorStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorStateProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorStateProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.SensorStateProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.SensorStateProto)
    MergeFrom(*source);
  }
}

void SensorStateProto::MergeFrom(const SensorStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.SensorStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_states_.MergeFrom(from.user_states_);
  modality_flags_.MergeFrom(from.modality_flags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_scheduler()->::com::android::server::biometrics::BiometricSchedulerProto::MergeFrom(from.scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      modality_ = from.modality_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_strength_ = from.current_strength_;
    }
    if (cached_has_bits & 0x00000010u) {
      reset_lockout_requires_hardware_auth_token_ = from.reset_lockout_requires_hardware_auth_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      reset_lockout_requires_challenge_ = from.reset_lockout_requires_challenge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorStateProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.SensorStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorStateProto::CopyFrom(const SensorStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.SensorStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStateProto::IsInitialized() const {
  return true;
}

void SensorStateProto::InternalSwap(SensorStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&user_states_)->InternalSwap(CastToBase(&other->user_states_));
  modality_flags_.InternalSwap(&other->modality_flags_);
  swap(scheduler_, other->scheduler_);
  swap(sensor_id_, other->sensor_id_);
  swap(modality_, other->modality_);
  swap(current_strength_, other->current_strength_);
  swap(reset_lockout_requires_hardware_auth_token_, other->reset_lockout_requires_hardware_auth_token_);
  swap(reset_lockout_requires_challenge_, other->reset_lockout_requires_challenge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorStateProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserStateProto::InitAsDefaultInstance() {
}
class UserStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UserStateProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_enrolled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserStateProto::UserStateProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.UserStateProto)
}
UserStateProto::UserStateProto(const UserStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_enrolled_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(num_enrolled_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.UserStateProto)
}

void UserStateProto::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_enrolled_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(num_enrolled_));
}

UserStateProto::~UserStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.UserStateProto)
  SharedDtor();
}

void UserStateProto::SharedDtor() {
}

void UserStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserStateProto& UserStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void UserStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_enrolled_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(num_enrolled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_enrolled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_enrolled(&has_bits);
          num_enrolled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.UserStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_enrolled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_enrolled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_enrolled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.UserStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.UserStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional int32 num_enrolled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_enrolled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.UserStateProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserStateProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // optional int32 num_enrolled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_enrolled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.UserStateProto)
  return target;
}

size_t UserStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.UserStateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 num_enrolled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_enrolled());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStateProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.UserStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStateProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserStateProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.UserStateProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.UserStateProto)
    MergeFrom(*source);
  }
}

void UserStateProto::MergeFrom(const UserStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.UserStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_enrolled_ = from.num_enrolled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserStateProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.UserStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStateProto::CopyFrom(const UserStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.UserStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStateProto::IsInitialized() const {
  return true;
}

void UserStateProto::InternalSwap(UserStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_id_, other->user_id_);
  swap(num_enrolled_, other->num_enrolled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserStateProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BiometricSchedulerProto::InitAsDefaultInstance() {
}
class BiometricSchedulerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BiometricSchedulerProto>()._has_bits_);
  static void set_has_current_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_operations(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BiometricSchedulerProto::BiometricSchedulerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.BiometricSchedulerProto)
}
BiometricSchedulerProto::BiometricSchedulerProto(const BiometricSchedulerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      recent_operations_(from.recent_operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_operation_, &from.current_operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_operations_) -
    reinterpret_cast<char*>(&current_operation_)) + sizeof(total_operations_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.BiometricSchedulerProto)
}

void BiometricSchedulerProto::SharedCtor() {
  ::memset(&current_operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_operations_) -
      reinterpret_cast<char*>(&current_operation_)) + sizeof(total_operations_));
}

BiometricSchedulerProto::~BiometricSchedulerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.BiometricSchedulerProto)
  SharedDtor();
}

void BiometricSchedulerProto::SharedDtor() {
}

void BiometricSchedulerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiometricSchedulerProto& BiometricSchedulerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void BiometricSchedulerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.BiometricSchedulerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recent_operations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&current_operation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_operations_) -
        reinterpret_cast<char*>(&current_operation_)) + sizeof(total_operations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BiometricSchedulerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::ClientMonitorEnum_IsValid(val))) {
            set_current_operation(static_cast<::com::android::server::biometrics::ClientMonitorEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 total_operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_operations(&has_bits);
          total_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::ClientMonitorEnum_IsValid(val))) {
              add_recent_operations(static_cast<::com::android::server::biometrics::ClientMonitorEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_recent_operations(), ptr, ctx, ::com::android::server::biometrics::ClientMonitorEnum_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BiometricSchedulerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.BiometricSchedulerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::ClientMonitorEnum_IsValid(value)) {
            set_current_operation(static_cast< ::com::android::server::biometrics::ClientMonitorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_operations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_operations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_operations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::ClientMonitorEnum_IsValid(value)) {
            add_recent_operations(static_cast< ::com::android::server::biometrics::ClientMonitorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::com::android::server::biometrics::ClientMonitorEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_recent_operations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.BiometricSchedulerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.BiometricSchedulerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BiometricSchedulerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.BiometricSchedulerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->current_operation(), output);
  }

  // optional int32 total_operations = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->total_operations(), output);
  }

  // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
  for (int i = 0, n = this->recent_operations_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->recent_operations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.BiometricSchedulerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BiometricSchedulerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.biometrics.BiometricSchedulerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->current_operation(), target);
  }

  // optional int32 total_operations = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->total_operations(), target);
  }

  // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    3, this->recent_operations_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.biometrics.BiometricSchedulerProto)
  return target;
}

size_t BiometricSchedulerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.BiometricSchedulerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->recent_operations_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->recent_operations(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->current_operation());
    }

    // optional int32 total_operations = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_operations());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiometricSchedulerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.biometrics.BiometricSchedulerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BiometricSchedulerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BiometricSchedulerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.biometrics.BiometricSchedulerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.biometrics.BiometricSchedulerProto)
    MergeFrom(*source);
  }
}

void BiometricSchedulerProto::MergeFrom(const BiometricSchedulerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.BiometricSchedulerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recent_operations_.MergeFrom(from.recent_operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      current_operation_ = from.current_operation_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_operations_ = from.total_operations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BiometricSchedulerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.biometrics.BiometricSchedulerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometricSchedulerProto::CopyFrom(const BiometricSchedulerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.BiometricSchedulerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricSchedulerProto::IsInitialized() const {
  return true;
}

void BiometricSchedulerProto::InternalSwap(BiometricSchedulerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recent_operations_.InternalSwap(&other->recent_operations_);
  swap(current_operation_, other->current_operation_);
  swap(total_operations_, other->total_operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiometricSchedulerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::BiometricServiceStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::BiometricServiceStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::BiometricServiceStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::SensorServiceStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::SensorServiceStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::SensorServiceStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::SensorStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::SensorStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::SensorStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::UserStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::UserStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::UserStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::BiometricSchedulerProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::BiometricSchedulerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::BiometricSchedulerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
