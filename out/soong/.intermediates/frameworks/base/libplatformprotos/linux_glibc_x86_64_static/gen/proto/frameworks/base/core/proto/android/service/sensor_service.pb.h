// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/sensor_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
namespace android {
namespace service {
class ActiveSensorProto;
class ActiveSensorProtoDefaultTypeInternal;
extern ActiveSensorProtoDefaultTypeInternal _ActiveSensorProto_default_instance_;
class SensorDeviceProto;
class SensorDeviceProtoDefaultTypeInternal;
extern SensorDeviceProtoDefaultTypeInternal _SensorDeviceProto_default_instance_;
class SensorDeviceProto_SensorProto;
class SensorDeviceProto_SensorProtoDefaultTypeInternal;
extern SensorDeviceProto_SensorProtoDefaultTypeInternal _SensorDeviceProto_SensorProto_default_instance_;
class SensorDirectConnectionProto;
class SensorDirectConnectionProtoDefaultTypeInternal;
extern SensorDirectConnectionProtoDefaultTypeInternal _SensorDirectConnectionProto_default_instance_;
class SensorDirectConnectionProto_SensorProto;
class SensorDirectConnectionProto_SensorProtoDefaultTypeInternal;
extern SensorDirectConnectionProto_SensorProtoDefaultTypeInternal _SensorDirectConnectionProto_SensorProto_default_instance_;
class SensorEventConnectionProto;
class SensorEventConnectionProtoDefaultTypeInternal;
extern SensorEventConnectionProtoDefaultTypeInternal _SensorEventConnectionProto_default_instance_;
class SensorEventConnectionProto_FlushInfoProto;
class SensorEventConnectionProto_FlushInfoProtoDefaultTypeInternal;
extern SensorEventConnectionProto_FlushInfoProtoDefaultTypeInternal _SensorEventConnectionProto_FlushInfoProto_default_instance_;
class SensorEventsProto;
class SensorEventsProtoDefaultTypeInternal;
extern SensorEventsProtoDefaultTypeInternal _SensorEventsProto_default_instance_;
class SensorEventsProto_Event;
class SensorEventsProto_EventDefaultTypeInternal;
extern SensorEventsProto_EventDefaultTypeInternal _SensorEventsProto_Event_default_instance_;
class SensorEventsProto_RecentEventsLog;
class SensorEventsProto_RecentEventsLogDefaultTypeInternal;
extern SensorEventsProto_RecentEventsLogDefaultTypeInternal _SensorEventsProto_RecentEventsLog_default_instance_;
class SensorFusionProto;
class SensorFusionProtoDefaultTypeInternal;
extern SensorFusionProtoDefaultTypeInternal _SensorFusionProto_default_instance_;
class SensorFusionProto_FusionProto;
class SensorFusionProto_FusionProtoDefaultTypeInternal;
extern SensorFusionProto_FusionProtoDefaultTypeInternal _SensorFusionProto_FusionProto_default_instance_;
class SensorListProto;
class SensorListProtoDefaultTypeInternal;
extern SensorListProtoDefaultTypeInternal _SensorListProto_default_instance_;
class SensorListProto_SensorProto;
class SensorListProto_SensorProtoDefaultTypeInternal;
extern SensorListProto_SensorProtoDefaultTypeInternal _SensorListProto_SensorProto_default_instance_;
class SensorRegistrationInfoProto;
class SensorRegistrationInfoProtoDefaultTypeInternal;
extern SensorRegistrationInfoProtoDefaultTypeInternal _SensorRegistrationInfoProto_default_instance_;
class SensorServiceProto;
class SensorServiceProtoDefaultTypeInternal;
extern SensorServiceProtoDefaultTypeInternal _SensorServiceProto_default_instance_;
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::ActiveSensorProto* Arena::CreateMaybeMessage<::android::service::ActiveSensorProto>(Arena*);
template<> ::android::service::SensorDeviceProto* Arena::CreateMaybeMessage<::android::service::SensorDeviceProto>(Arena*);
template<> ::android::service::SensorDeviceProto_SensorProto* Arena::CreateMaybeMessage<::android::service::SensorDeviceProto_SensorProto>(Arena*);
template<> ::android::service::SensorDirectConnectionProto* Arena::CreateMaybeMessage<::android::service::SensorDirectConnectionProto>(Arena*);
template<> ::android::service::SensorDirectConnectionProto_SensorProto* Arena::CreateMaybeMessage<::android::service::SensorDirectConnectionProto_SensorProto>(Arena*);
template<> ::android::service::SensorEventConnectionProto* Arena::CreateMaybeMessage<::android::service::SensorEventConnectionProto>(Arena*);
template<> ::android::service::SensorEventConnectionProto_FlushInfoProto* Arena::CreateMaybeMessage<::android::service::SensorEventConnectionProto_FlushInfoProto>(Arena*);
template<> ::android::service::SensorEventsProto* Arena::CreateMaybeMessage<::android::service::SensorEventsProto>(Arena*);
template<> ::android::service::SensorEventsProto_Event* Arena::CreateMaybeMessage<::android::service::SensorEventsProto_Event>(Arena*);
template<> ::android::service::SensorEventsProto_RecentEventsLog* Arena::CreateMaybeMessage<::android::service::SensorEventsProto_RecentEventsLog>(Arena*);
template<> ::android::service::SensorFusionProto* Arena::CreateMaybeMessage<::android::service::SensorFusionProto>(Arena*);
template<> ::android::service::SensorFusionProto_FusionProto* Arena::CreateMaybeMessage<::android::service::SensorFusionProto_FusionProto>(Arena*);
template<> ::android::service::SensorListProto* Arena::CreateMaybeMessage<::android::service::SensorListProto>(Arena*);
template<> ::android::service::SensorListProto_SensorProto* Arena::CreateMaybeMessage<::android::service::SensorListProto_SensorProto>(Arena*);
template<> ::android::service::SensorRegistrationInfoProto* Arena::CreateMaybeMessage<::android::service::SensorRegistrationInfoProto>(Arena*);
template<> ::android::service::SensorServiceProto* Arena::CreateMaybeMessage<::android::service::SensorServiceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {

enum SensorServiceProto_OperatingModeEnum : int {
  SensorServiceProto_OperatingModeEnum_OP_MODE_UNKNOWN = 0,
  SensorServiceProto_OperatingModeEnum_OP_MODE_NORMAL = 1,
  SensorServiceProto_OperatingModeEnum_OP_MODE_RESTRICTED = 2,
  SensorServiceProto_OperatingModeEnum_OP_MODE_DATA_INJECTION = 3
};
bool SensorServiceProto_OperatingModeEnum_IsValid(int value);
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto_OperatingModeEnum_OperatingModeEnum_MIN = SensorServiceProto_OperatingModeEnum_OP_MODE_UNKNOWN;
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto_OperatingModeEnum_OperatingModeEnum_MAX = SensorServiceProto_OperatingModeEnum_OP_MODE_DATA_INJECTION;
constexpr int SensorServiceProto_OperatingModeEnum_OperatingModeEnum_ARRAYSIZE = SensorServiceProto_OperatingModeEnum_OperatingModeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorServiceProto_OperatingModeEnum_descriptor();
template<typename T>
inline const std::string& SensorServiceProto_OperatingModeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorServiceProto_OperatingModeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorServiceProto_OperatingModeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorServiceProto_OperatingModeEnum_descriptor(), enum_t_value);
}
inline bool SensorServiceProto_OperatingModeEnum_Parse(
    const std::string& name, SensorServiceProto_OperatingModeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorServiceProto_OperatingModeEnum>(
    SensorServiceProto_OperatingModeEnum_descriptor(), name, value);
}
enum SensorListProto_ReportingModeEnum : int {
  SensorListProto_ReportingModeEnum_RM_UNKNOWN = 0,
  SensorListProto_ReportingModeEnum_RM_CONTINUOUS = 1,
  SensorListProto_ReportingModeEnum_RM_ON_CHANGE = 2,
  SensorListProto_ReportingModeEnum_RM_ONE_SHOT = 3,
  SensorListProto_ReportingModeEnum_RM_SPECIAL_TRIGGER = 4
};
bool SensorListProto_ReportingModeEnum_IsValid(int value);
constexpr SensorListProto_ReportingModeEnum SensorListProto_ReportingModeEnum_ReportingModeEnum_MIN = SensorListProto_ReportingModeEnum_RM_UNKNOWN;
constexpr SensorListProto_ReportingModeEnum SensorListProto_ReportingModeEnum_ReportingModeEnum_MAX = SensorListProto_ReportingModeEnum_RM_SPECIAL_TRIGGER;
constexpr int SensorListProto_ReportingModeEnum_ReportingModeEnum_ARRAYSIZE = SensorListProto_ReportingModeEnum_ReportingModeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorListProto_ReportingModeEnum_descriptor();
template<typename T>
inline const std::string& SensorListProto_ReportingModeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorListProto_ReportingModeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorListProto_ReportingModeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorListProto_ReportingModeEnum_descriptor(), enum_t_value);
}
inline bool SensorListProto_ReportingModeEnum_Parse(
    const std::string& name, SensorListProto_ReportingModeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorListProto_ReportingModeEnum>(
    SensorListProto_ReportingModeEnum_descriptor(), name, value);
}
enum SensorEventConnectionProto_OperatingModeEnum : int {
  SensorEventConnectionProto_OperatingModeEnum_OP_MODE_UNKNOWN = 0,
  SensorEventConnectionProto_OperatingModeEnum_OP_MODE_NORMAL = 1,
  SensorEventConnectionProto_OperatingModeEnum_OP_MODE_RESTRICTED = 2,
  SensorEventConnectionProto_OperatingModeEnum_OP_MODE_DATA_INJECTION = 3
};
bool SensorEventConnectionProto_OperatingModeEnum_IsValid(int value);
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto_OperatingModeEnum_OperatingModeEnum_MIN = SensorEventConnectionProto_OperatingModeEnum_OP_MODE_UNKNOWN;
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto_OperatingModeEnum_OperatingModeEnum_MAX = SensorEventConnectionProto_OperatingModeEnum_OP_MODE_DATA_INJECTION;
constexpr int SensorEventConnectionProto_OperatingModeEnum_OperatingModeEnum_ARRAYSIZE = SensorEventConnectionProto_OperatingModeEnum_OperatingModeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorEventConnectionProto_OperatingModeEnum_descriptor();
template<typename T>
inline const std::string& SensorEventConnectionProto_OperatingModeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorEventConnectionProto_OperatingModeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorEventConnectionProto_OperatingModeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorEventConnectionProto_OperatingModeEnum_descriptor(), enum_t_value);
}
inline bool SensorEventConnectionProto_OperatingModeEnum_Parse(
    const std::string& name, SensorEventConnectionProto_OperatingModeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorEventConnectionProto_OperatingModeEnum>(
    SensorEventConnectionProto_OperatingModeEnum_descriptor(), name, value);
}
// ===================================================================

class SensorServiceProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorServiceProto) */ {
 public:
  SensorServiceProto();
  virtual ~SensorServiceProto();

  SensorServiceProto(const SensorServiceProto& from);
  SensorServiceProto(SensorServiceProto&& from) noexcept
    : SensorServiceProto() {
    *this = ::std::move(from);
  }

  inline SensorServiceProto& operator=(const SensorServiceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorServiceProto& operator=(SensorServiceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorServiceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorServiceProto* internal_default_instance() {
    return reinterpret_cast<const SensorServiceProto*>(
               &_SensorServiceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorServiceProto& a, SensorServiceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorServiceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorServiceProto* New() const final {
    return CreateMaybeMessage<SensorServiceProto>(nullptr);
  }

  SensorServiceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorServiceProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorServiceProto& from);
  void MergeFrom(const SensorServiceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorServiceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorServiceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorServiceProto_OperatingModeEnum OperatingModeEnum;
  static constexpr OperatingModeEnum OP_MODE_UNKNOWN =
    SensorServiceProto_OperatingModeEnum_OP_MODE_UNKNOWN;
  static constexpr OperatingModeEnum OP_MODE_NORMAL =
    SensorServiceProto_OperatingModeEnum_OP_MODE_NORMAL;
  static constexpr OperatingModeEnum OP_MODE_RESTRICTED =
    SensorServiceProto_OperatingModeEnum_OP_MODE_RESTRICTED;
  static constexpr OperatingModeEnum OP_MODE_DATA_INJECTION =
    SensorServiceProto_OperatingModeEnum_OP_MODE_DATA_INJECTION;
  static inline bool OperatingModeEnum_IsValid(int value) {
    return SensorServiceProto_OperatingModeEnum_IsValid(value);
  }
  static constexpr OperatingModeEnum OperatingModeEnum_MIN =
    SensorServiceProto_OperatingModeEnum_OperatingModeEnum_MIN;
  static constexpr OperatingModeEnum OperatingModeEnum_MAX =
    SensorServiceProto_OperatingModeEnum_OperatingModeEnum_MAX;
  static constexpr int OperatingModeEnum_ARRAYSIZE =
    SensorServiceProto_OperatingModeEnum_OperatingModeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperatingModeEnum_descriptor() {
    return SensorServiceProto_OperatingModeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& OperatingModeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperatingModeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperatingModeEnum_Name.");
    return SensorServiceProto_OperatingModeEnum_Name(enum_t_value);
  }
  static inline bool OperatingModeEnum_Parse(const std::string& name,
      OperatingModeEnum* value) {
    return SensorServiceProto_OperatingModeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActiveSensorsFieldNumber = 6,
    kActiveConnectionsFieldNumber = 13,
    kDirectConnectionsFieldNumber = 14,
    kPreviousRegistrationsFieldNumber = 15,
    kWhitelistedPackageFieldNumber = 11,
    kSensorDeviceFieldNumber = 2,
    kSensorsFieldNumber = 3,
    kFusionStateFieldNumber = 4,
    kSensorEventsFieldNumber = 5,
    kCurrentTimeMsFieldNumber = 1,
    kSocketBufferSizeFieldNumber = 7,
    kSocketBufferSizeInEventsFieldNumber = 8,
    kOperatingModeFieldNumber = 10,
    kWakeLockAcquiredFieldNumber = 9,
    kSensorPrivacyFieldNumber = 12,
    kInitStatusFieldNumber = 16,
  };
  // repeated .android.service.ActiveSensorProto active_sensors = 6;
  int active_sensors_size() const;
  void clear_active_sensors();
  ::android::service::ActiveSensorProto* mutable_active_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::ActiveSensorProto >*
      mutable_active_sensors();
  const ::android::service::ActiveSensorProto& active_sensors(int index) const;
  ::android::service::ActiveSensorProto* add_active_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::ActiveSensorProto >&
      active_sensors() const;

  // repeated .android.service.SensorEventConnectionProto active_connections = 13;
  int active_connections_size() const;
  void clear_active_connections();
  ::android::service::SensorEventConnectionProto* mutable_active_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto >*
      mutable_active_connections();
  const ::android::service::SensorEventConnectionProto& active_connections(int index) const;
  ::android::service::SensorEventConnectionProto* add_active_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto >&
      active_connections() const;

  // repeated .android.service.SensorDirectConnectionProto direct_connections = 14;
  int direct_connections_size() const;
  void clear_direct_connections();
  ::android::service::SensorDirectConnectionProto* mutable_direct_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto >*
      mutable_direct_connections();
  const ::android::service::SensorDirectConnectionProto& direct_connections(int index) const;
  ::android::service::SensorDirectConnectionProto* add_direct_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto >&
      direct_connections() const;

  // repeated .android.service.SensorRegistrationInfoProto previous_registrations = 15;
  int previous_registrations_size() const;
  void clear_previous_registrations();
  ::android::service::SensorRegistrationInfoProto* mutable_previous_registrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorRegistrationInfoProto >*
      mutable_previous_registrations();
  const ::android::service::SensorRegistrationInfoProto& previous_registrations(int index) const;
  ::android::service::SensorRegistrationInfoProto* add_previous_registrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorRegistrationInfoProto >&
      previous_registrations() const;

  // optional string whitelisted_package = 11;
  bool has_whitelisted_package() const;
  void clear_whitelisted_package();
  const std::string& whitelisted_package() const;
  void set_whitelisted_package(const std::string& value);
  void set_whitelisted_package(std::string&& value);
  void set_whitelisted_package(const char* value);
  void set_whitelisted_package(const char* value, size_t size);
  std::string* mutable_whitelisted_package();
  std::string* release_whitelisted_package();
  void set_allocated_whitelisted_package(std::string* whitelisted_package);

  // optional .android.service.SensorDeviceProto sensor_device = 2;
  bool has_sensor_device() const;
  void clear_sensor_device();
  const ::android::service::SensorDeviceProto& sensor_device() const;
  ::android::service::SensorDeviceProto* release_sensor_device();
  ::android::service::SensorDeviceProto* mutable_sensor_device();
  void set_allocated_sensor_device(::android::service::SensorDeviceProto* sensor_device);

  // optional .android.service.SensorListProto sensors = 3;
  bool has_sensors() const;
  void clear_sensors();
  const ::android::service::SensorListProto& sensors() const;
  ::android::service::SensorListProto* release_sensors();
  ::android::service::SensorListProto* mutable_sensors();
  void set_allocated_sensors(::android::service::SensorListProto* sensors);

  // optional .android.service.SensorFusionProto fusion_state = 4;
  bool has_fusion_state() const;
  void clear_fusion_state();
  const ::android::service::SensorFusionProto& fusion_state() const;
  ::android::service::SensorFusionProto* release_fusion_state();
  ::android::service::SensorFusionProto* mutable_fusion_state();
  void set_allocated_fusion_state(::android::service::SensorFusionProto* fusion_state);

  // optional .android.service.SensorEventsProto sensor_events = 5;
  bool has_sensor_events() const;
  void clear_sensor_events();
  const ::android::service::SensorEventsProto& sensor_events() const;
  ::android::service::SensorEventsProto* release_sensor_events();
  ::android::service::SensorEventsProto* mutable_sensor_events();
  void set_allocated_sensor_events(::android::service::SensorEventsProto* sensor_events);

  // optional int64 current_time_ms = 1;
  bool has_current_time_ms() const;
  void clear_current_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 current_time_ms() const;
  void set_current_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 socket_buffer_size = 7;
  bool has_socket_buffer_size() const;
  void clear_socket_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 socket_buffer_size() const;
  void set_socket_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 socket_buffer_size_in_events = 8;
  bool has_socket_buffer_size_in_events() const;
  void clear_socket_buffer_size_in_events();
  ::PROTOBUF_NAMESPACE_ID::int32 socket_buffer_size_in_events() const;
  void set_socket_buffer_size_in_events(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.service.SensorServiceProto.OperatingModeEnum operating_mode = 10;
  bool has_operating_mode() const;
  void clear_operating_mode();
  ::android::service::SensorServiceProto_OperatingModeEnum operating_mode() const;
  void set_operating_mode(::android::service::SensorServiceProto_OperatingModeEnum value);

  // optional bool wake_lock_acquired = 9;
  bool has_wake_lock_acquired() const;
  void clear_wake_lock_acquired();
  bool wake_lock_acquired() const;
  void set_wake_lock_acquired(bool value);

  // optional bool sensor_privacy = 12;
  bool has_sensor_privacy() const;
  void clear_sensor_privacy();
  bool sensor_privacy() const;
  void set_sensor_privacy(bool value);

  // optional sint32 init_status = 16;
  bool has_init_status() const;
  void clear_init_status();
  ::PROTOBUF_NAMESPACE_ID::int32 init_status() const;
  void set_init_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorServiceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::ActiveSensorProto > active_sensors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto > active_connections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto > direct_connections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorRegistrationInfoProto > previous_registrations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whitelisted_package_;
  ::android::service::SensorDeviceProto* sensor_device_;
  ::android::service::SensorListProto* sensors_;
  ::android::service::SensorFusionProto* fusion_state_;
  ::android::service::SensorEventsProto* sensor_events_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 socket_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 socket_buffer_size_in_events_;
  int operating_mode_;
  bool wake_lock_acquired_;
  bool sensor_privacy_;
  ::PROTOBUF_NAMESPACE_ID::int32 init_status_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorDeviceProto_SensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorDeviceProto.SensorProto) */ {
 public:
  SensorDeviceProto_SensorProto();
  virtual ~SensorDeviceProto_SensorProto();

  SensorDeviceProto_SensorProto(const SensorDeviceProto_SensorProto& from);
  SensorDeviceProto_SensorProto(SensorDeviceProto_SensorProto&& from) noexcept
    : SensorDeviceProto_SensorProto() {
    *this = ::std::move(from);
  }

  inline SensorDeviceProto_SensorProto& operator=(const SensorDeviceProto_SensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDeviceProto_SensorProto& operator=(SensorDeviceProto_SensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorDeviceProto_SensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorDeviceProto_SensorProto* internal_default_instance() {
    return reinterpret_cast<const SensorDeviceProto_SensorProto*>(
               &_SensorDeviceProto_SensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorDeviceProto_SensorProto& a, SensorDeviceProto_SensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDeviceProto_SensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorDeviceProto_SensorProto* New() const final {
    return CreateMaybeMessage<SensorDeviceProto_SensorProto>(nullptr);
  }

  SensorDeviceProto_SensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorDeviceProto_SensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorDeviceProto_SensorProto& from);
  void MergeFrom(const SensorDeviceProto_SensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDeviceProto_SensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorDeviceProto.SensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingPeriodMsFieldNumber = 3,
    kBatchingPeriodMsFieldNumber = 5,
    kHandleFieldNumber = 1,
    kActiveCountFieldNumber = 2,
    kSamplingPeriodSelectedFieldNumber = 4,
    kBatchingPeriodSelectedFieldNumber = 6,
  };
  // repeated float sampling_period_ms = 3;
  int sampling_period_ms_size() const;
  void clear_sampling_period_ms();
  float sampling_period_ms(int index) const;
  void set_sampling_period_ms(int index, float value);
  void add_sampling_period_ms(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sampling_period_ms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sampling_period_ms();

  // repeated float batching_period_ms = 5;
  int batching_period_ms_size() const;
  void clear_batching_period_ms();
  float batching_period_ms(int index) const;
  void set_batching_period_ms(int index, float value);
  void add_batching_period_ms(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      batching_period_ms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_batching_period_ms();

  // optional int32 handle = 1;
  bool has_handle() const;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 active_count = 2;
  bool has_active_count() const;
  void clear_active_count();
  ::PROTOBUF_NAMESPACE_ID::int32 active_count() const;
  void set_active_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float sampling_period_selected = 4;
  bool has_sampling_period_selected() const;
  void clear_sampling_period_selected();
  float sampling_period_selected() const;
  void set_sampling_period_selected(float value);

  // optional float batching_period_selected = 6;
  bool has_batching_period_selected() const;
  void clear_batching_period_selected();
  float batching_period_selected() const;
  void set_batching_period_selected(float value);

  // @@protoc_insertion_point(class_scope:android.service.SensorDeviceProto.SensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sampling_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > batching_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_count_;
  float sampling_period_selected_;
  float batching_period_selected_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorDeviceProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorDeviceProto) */ {
 public:
  SensorDeviceProto();
  virtual ~SensorDeviceProto();

  SensorDeviceProto(const SensorDeviceProto& from);
  SensorDeviceProto(SensorDeviceProto&& from) noexcept
    : SensorDeviceProto() {
    *this = ::std::move(from);
  }

  inline SensorDeviceProto& operator=(const SensorDeviceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDeviceProto& operator=(SensorDeviceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorDeviceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorDeviceProto* internal_default_instance() {
    return reinterpret_cast<const SensorDeviceProto*>(
               &_SensorDeviceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorDeviceProto& a, SensorDeviceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDeviceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorDeviceProto* New() const final {
    return CreateMaybeMessage<SensorDeviceProto>(nullptr);
  }

  SensorDeviceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorDeviceProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorDeviceProto& from);
  void MergeFrom(const SensorDeviceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDeviceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorDeviceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorDeviceProto_SensorProto SensorProto;

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 4,
    kInitializedFieldNumber = 1,
    kTotalSensorsFieldNumber = 2,
    kActiveSensorsFieldNumber = 3,
  };
  // repeated .android.service.SensorDeviceProto.SensorProto sensors = 4;
  int sensors_size() const;
  void clear_sensors();
  ::android::service::SensorDeviceProto_SensorProto* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDeviceProto_SensorProto >*
      mutable_sensors();
  const ::android::service::SensorDeviceProto_SensorProto& sensors(int index) const;
  ::android::service::SensorDeviceProto_SensorProto* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDeviceProto_SensorProto >&
      sensors() const;

  // optional bool initialized = 1;
  bool has_initialized() const;
  void clear_initialized();
  bool initialized() const;
  void set_initialized(bool value);

  // optional int32 total_sensors = 2;
  bool has_total_sensors() const;
  void clear_total_sensors();
  ::PROTOBUF_NAMESPACE_ID::int32 total_sensors() const;
  void set_total_sensors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 active_sensors = 3;
  bool has_active_sensors() const;
  void clear_active_sensors();
  ::PROTOBUF_NAMESPACE_ID::int32 active_sensors() const;
  void set_active_sensors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorDeviceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDeviceProto_SensorProto > sensors_;
  bool initialized_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_sensors_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_sensors_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorListProto_SensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorListProto.SensorProto) */ {
 public:
  SensorListProto_SensorProto();
  virtual ~SensorListProto_SensorProto();

  SensorListProto_SensorProto(const SensorListProto_SensorProto& from);
  SensorListProto_SensorProto(SensorListProto_SensorProto&& from) noexcept
    : SensorListProto_SensorProto() {
    *this = ::std::move(from);
  }

  inline SensorListProto_SensorProto& operator=(const SensorListProto_SensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorListProto_SensorProto& operator=(SensorListProto_SensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorListProto_SensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorListProto_SensorProto* internal_default_instance() {
    return reinterpret_cast<const SensorListProto_SensorProto*>(
               &_SensorListProto_SensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SensorListProto_SensorProto& a, SensorListProto_SensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorListProto_SensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorListProto_SensorProto* New() const final {
    return CreateMaybeMessage<SensorListProto_SensorProto>(nullptr);
  }

  SensorListProto_SensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorListProto_SensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorListProto_SensorProto& from);
  void MergeFrom(const SensorListProto_SensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorListProto_SensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorListProto.SensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kVendorFieldNumber = 3,
    kStringTypeFieldNumber = 5,
    kRequiredPermissionFieldNumber = 7,
    kHandleFieldNumber = 1,
    kVersionFieldNumber = 4,
    kTypeFieldNumber = 6,
    kFlagsFieldNumber = 8,
    kReportingModeFieldNumber = 9,
    kMaxDelayUsFieldNumber = 10,
    kMinDelayUsFieldNumber = 11,
    kFifoMaxEventCountFieldNumber = 12,
    kFifoReservedEventCountFieldNumber = 13,
    kIsWakeupFieldNumber = 14,
    kDataInjectionSupportedFieldNumber = 15,
    kIsDynamicFieldNumber = 16,
    kHasAdditionalInfoFieldNumber = 17,
    kHighestRateLevelFieldNumber = 18,
    kAshmemFieldNumber = 19,
    kGrallocFieldNumber = 20,
    kMinValueFieldNumber = 21,
    kMaxValueFieldNumber = 22,
    kResolutionFieldNumber = 23,
    kPowerUsageFieldNumber = 24,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string vendor = 3;
  bool has_vendor() const;
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);

  // optional string string_type = 5;
  bool has_string_type() const;
  void clear_string_type();
  const std::string& string_type() const;
  void set_string_type(const std::string& value);
  void set_string_type(std::string&& value);
  void set_string_type(const char* value);
  void set_string_type(const char* value, size_t size);
  std::string* mutable_string_type();
  std::string* release_string_type();
  void set_allocated_string_type(std::string* string_type);

  // optional string required_permission = 7;
  bool has_required_permission() const;
  void clear_required_permission();
  const std::string& required_permission() const;
  void set_required_permission(const std::string& value);
  void set_required_permission(std::string&& value);
  void set_required_permission(const char* value);
  void set_required_permission(const char* value, size_t size);
  std::string* mutable_required_permission();
  std::string* release_required_permission();
  void set_allocated_required_permission(std::string* required_permission);

  // optional int32 handle = 1;
  bool has_handle() const;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 version = 4;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 type = 6;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 flags = 8;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.service.SensorListProto.ReportingModeEnum reporting_mode = 9;
  bool has_reporting_mode() const;
  void clear_reporting_mode();
  ::android::service::SensorListProto_ReportingModeEnum reporting_mode() const;
  void set_reporting_mode(::android::service::SensorListProto_ReportingModeEnum value);

  // optional int32 max_delay_us = 10;
  bool has_max_delay_us() const;
  void clear_max_delay_us();
  ::PROTOBUF_NAMESPACE_ID::int32 max_delay_us() const;
  void set_max_delay_us(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 min_delay_us = 11;
  bool has_min_delay_us() const;
  void clear_min_delay_us();
  ::PROTOBUF_NAMESPACE_ID::int32 min_delay_us() const;
  void set_min_delay_us(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 fifo_max_event_count = 12;
  bool has_fifo_max_event_count() const;
  void clear_fifo_max_event_count();
  ::PROTOBUF_NAMESPACE_ID::int32 fifo_max_event_count() const;
  void set_fifo_max_event_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 fifo_reserved_event_count = 13;
  bool has_fifo_reserved_event_count() const;
  void clear_fifo_reserved_event_count();
  ::PROTOBUF_NAMESPACE_ID::int32 fifo_reserved_event_count() const;
  void set_fifo_reserved_event_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_wakeup = 14;
  bool has_is_wakeup() const;
  void clear_is_wakeup();
  bool is_wakeup() const;
  void set_is_wakeup(bool value);

  // optional bool data_injection_supported = 15;
  bool has_data_injection_supported() const;
  void clear_data_injection_supported();
  bool data_injection_supported() const;
  void set_data_injection_supported(bool value);

  // optional bool is_dynamic = 16;
  bool has_is_dynamic() const;
  void clear_is_dynamic();
  bool is_dynamic() const;
  void set_is_dynamic(bool value);

  // optional bool has_additional_info = 17;
  bool has_has_additional_info() const;
  void clear_has_additional_info();
  bool has_additional_info() const;
  void set_has_additional_info(bool value);

  // optional int32 highest_rate_level = 18;
  bool has_highest_rate_level() const;
  void clear_highest_rate_level();
  ::PROTOBUF_NAMESPACE_ID::int32 highest_rate_level() const;
  void set_highest_rate_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool ashmem = 19;
  bool has_ashmem() const;
  void clear_ashmem();
  bool ashmem() const;
  void set_ashmem(bool value);

  // optional bool gralloc = 20;
  bool has_gralloc() const;
  void clear_gralloc();
  bool gralloc() const;
  void set_gralloc(bool value);

  // optional float min_value = 21;
  bool has_min_value() const;
  void clear_min_value();
  float min_value() const;
  void set_min_value(float value);

  // optional float max_value = 22;
  bool has_max_value() const;
  void clear_max_value();
  float max_value() const;
  void set_max_value(float value);

  // optional float resolution = 23;
  bool has_resolution() const;
  void clear_resolution();
  float resolution() const;
  void set_resolution(float value);

  // optional float power_usage = 24;
  bool has_power_usage() const;
  void clear_power_usage();
  float power_usage() const;
  void set_power_usage(float value);

  // @@protoc_insertion_point(class_scope:android.service.SensorListProto.SensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr required_permission_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  int reporting_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_delay_us_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_delay_us_;
  ::PROTOBUF_NAMESPACE_ID::int32 fifo_max_event_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 fifo_reserved_event_count_;
  bool is_wakeup_;
  bool data_injection_supported_;
  bool is_dynamic_;
  bool has_additional_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 highest_rate_level_;
  bool ashmem_;
  bool gralloc_;
  float min_value_;
  float max_value_;
  float resolution_;
  float power_usage_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorListProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorListProto) */ {
 public:
  SensorListProto();
  virtual ~SensorListProto();

  SensorListProto(const SensorListProto& from);
  SensorListProto(SensorListProto&& from) noexcept
    : SensorListProto() {
    *this = ::std::move(from);
  }

  inline SensorListProto& operator=(const SensorListProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorListProto& operator=(SensorListProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorListProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorListProto* internal_default_instance() {
    return reinterpret_cast<const SensorListProto*>(
               &_SensorListProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SensorListProto& a, SensorListProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorListProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorListProto* New() const final {
    return CreateMaybeMessage<SensorListProto>(nullptr);
  }

  SensorListProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorListProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorListProto& from);
  void MergeFrom(const SensorListProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorListProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorListProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorListProto_SensorProto SensorProto;

  typedef SensorListProto_ReportingModeEnum ReportingModeEnum;
  static constexpr ReportingModeEnum RM_UNKNOWN =
    SensorListProto_ReportingModeEnum_RM_UNKNOWN;
  static constexpr ReportingModeEnum RM_CONTINUOUS =
    SensorListProto_ReportingModeEnum_RM_CONTINUOUS;
  static constexpr ReportingModeEnum RM_ON_CHANGE =
    SensorListProto_ReportingModeEnum_RM_ON_CHANGE;
  static constexpr ReportingModeEnum RM_ONE_SHOT =
    SensorListProto_ReportingModeEnum_RM_ONE_SHOT;
  static constexpr ReportingModeEnum RM_SPECIAL_TRIGGER =
    SensorListProto_ReportingModeEnum_RM_SPECIAL_TRIGGER;
  static inline bool ReportingModeEnum_IsValid(int value) {
    return SensorListProto_ReportingModeEnum_IsValid(value);
  }
  static constexpr ReportingModeEnum ReportingModeEnum_MIN =
    SensorListProto_ReportingModeEnum_ReportingModeEnum_MIN;
  static constexpr ReportingModeEnum ReportingModeEnum_MAX =
    SensorListProto_ReportingModeEnum_ReportingModeEnum_MAX;
  static constexpr int ReportingModeEnum_ARRAYSIZE =
    SensorListProto_ReportingModeEnum_ReportingModeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReportingModeEnum_descriptor() {
    return SensorListProto_ReportingModeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& ReportingModeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReportingModeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReportingModeEnum_Name.");
    return SensorListProto_ReportingModeEnum_Name(enum_t_value);
  }
  static inline bool ReportingModeEnum_Parse(const std::string& name,
      ReportingModeEnum* value) {
    return SensorListProto_ReportingModeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 1,
  };
  // repeated .android.service.SensorListProto.SensorProto sensors = 1;
  int sensors_size() const;
  void clear_sensors();
  ::android::service::SensorListProto_SensorProto* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorListProto_SensorProto >*
      mutable_sensors();
  const ::android::service::SensorListProto_SensorProto& sensors(int index) const;
  ::android::service::SensorListProto_SensorProto* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorListProto_SensorProto >&
      sensors() const;

  // @@protoc_insertion_point(class_scope:android.service.SensorListProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorListProto_SensorProto > sensors_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorFusionProto_FusionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorFusionProto.FusionProto) */ {
 public:
  SensorFusionProto_FusionProto();
  virtual ~SensorFusionProto_FusionProto();

  SensorFusionProto_FusionProto(const SensorFusionProto_FusionProto& from);
  SensorFusionProto_FusionProto(SensorFusionProto_FusionProto&& from) noexcept
    : SensorFusionProto_FusionProto() {
    *this = ::std::move(from);
  }

  inline SensorFusionProto_FusionProto& operator=(const SensorFusionProto_FusionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorFusionProto_FusionProto& operator=(SensorFusionProto_FusionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorFusionProto_FusionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorFusionProto_FusionProto* internal_default_instance() {
    return reinterpret_cast<const SensorFusionProto_FusionProto*>(
               &_SensorFusionProto_FusionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SensorFusionProto_FusionProto& a, SensorFusionProto_FusionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorFusionProto_FusionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorFusionProto_FusionProto* New() const final {
    return CreateMaybeMessage<SensorFusionProto_FusionProto>(nullptr);
  }

  SensorFusionProto_FusionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorFusionProto_FusionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorFusionProto_FusionProto& from);
  void MergeFrom(const SensorFusionProto_FusionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorFusionProto_FusionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorFusionProto.FusionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kNumClientsFieldNumber = 2,
    kEstimatedGyroRateFieldNumber = 3,
    kAttitudeXFieldNumber = 4,
    kAttitudeYFieldNumber = 5,
    kAttitudeZFieldNumber = 6,
    kAttitudeWFieldNumber = 7,
    kAttitudeLengthFieldNumber = 8,
    kBiasXFieldNumber = 9,
    kBiasYFieldNumber = 10,
    kBiasZFieldNumber = 11,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional int32 num_clients = 2;
  bool has_num_clients() const;
  void clear_num_clients();
  ::PROTOBUF_NAMESPACE_ID::int32 num_clients() const;
  void set_num_clients(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float estimated_gyro_rate = 3;
  bool has_estimated_gyro_rate() const;
  void clear_estimated_gyro_rate();
  float estimated_gyro_rate() const;
  void set_estimated_gyro_rate(float value);

  // optional float attitude_x = 4;
  bool has_attitude_x() const;
  void clear_attitude_x();
  float attitude_x() const;
  void set_attitude_x(float value);

  // optional float attitude_y = 5;
  bool has_attitude_y() const;
  void clear_attitude_y();
  float attitude_y() const;
  void set_attitude_y(float value);

  // optional float attitude_z = 6;
  bool has_attitude_z() const;
  void clear_attitude_z();
  float attitude_z() const;
  void set_attitude_z(float value);

  // optional float attitude_w = 7;
  bool has_attitude_w() const;
  void clear_attitude_w();
  float attitude_w() const;
  void set_attitude_w(float value);

  // optional float attitude_length = 8;
  bool has_attitude_length() const;
  void clear_attitude_length();
  float attitude_length() const;
  void set_attitude_length(float value);

  // optional float bias_x = 9;
  bool has_bias_x() const;
  void clear_bias_x();
  float bias_x() const;
  void set_bias_x(float value);

  // optional float bias_y = 10;
  bool has_bias_y() const;
  void clear_bias_y();
  float bias_y() const;
  void set_bias_y(float value);

  // optional float bias_z = 11;
  bool has_bias_z() const;
  void clear_bias_z();
  float bias_z() const;
  void set_bias_z(float value);

  // @@protoc_insertion_point(class_scope:android.service.SensorFusionProto.FusionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_clients_;
  float estimated_gyro_rate_;
  float attitude_x_;
  float attitude_y_;
  float attitude_z_;
  float attitude_w_;
  float attitude_length_;
  float bias_x_;
  float bias_y_;
  float bias_z_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorFusionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorFusionProto) */ {
 public:
  SensorFusionProto();
  virtual ~SensorFusionProto();

  SensorFusionProto(const SensorFusionProto& from);
  SensorFusionProto(SensorFusionProto&& from) noexcept
    : SensorFusionProto() {
    *this = ::std::move(from);
  }

  inline SensorFusionProto& operator=(const SensorFusionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorFusionProto& operator=(SensorFusionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorFusionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorFusionProto* internal_default_instance() {
    return reinterpret_cast<const SensorFusionProto*>(
               &_SensorFusionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SensorFusionProto& a, SensorFusionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorFusionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorFusionProto* New() const final {
    return CreateMaybeMessage<SensorFusionProto>(nullptr);
  }

  SensorFusionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorFusionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorFusionProto& from);
  void MergeFrom(const SensorFusionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorFusionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorFusionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorFusionProto_FusionProto FusionProto;

  // accessors -------------------------------------------------------

  enum : int {
    kFusion9AxisFieldNumber = 1,
    kFusionNomagFieldNumber = 2,
    kFusionNogyroFieldNumber = 3,
  };
  // optional .android.service.SensorFusionProto.FusionProto fusion_9axis = 1;
  bool has_fusion_9axis() const;
  void clear_fusion_9axis();
  const ::android::service::SensorFusionProto_FusionProto& fusion_9axis() const;
  ::android::service::SensorFusionProto_FusionProto* release_fusion_9axis();
  ::android::service::SensorFusionProto_FusionProto* mutable_fusion_9axis();
  void set_allocated_fusion_9axis(::android::service::SensorFusionProto_FusionProto* fusion_9axis);

  // optional .android.service.SensorFusionProto.FusionProto fusion_nomag = 2;
  bool has_fusion_nomag() const;
  void clear_fusion_nomag();
  const ::android::service::SensorFusionProto_FusionProto& fusion_nomag() const;
  ::android::service::SensorFusionProto_FusionProto* release_fusion_nomag();
  ::android::service::SensorFusionProto_FusionProto* mutable_fusion_nomag();
  void set_allocated_fusion_nomag(::android::service::SensorFusionProto_FusionProto* fusion_nomag);

  // optional .android.service.SensorFusionProto.FusionProto fusion_nogyro = 3;
  bool has_fusion_nogyro() const;
  void clear_fusion_nogyro();
  const ::android::service::SensorFusionProto_FusionProto& fusion_nogyro() const;
  ::android::service::SensorFusionProto_FusionProto* release_fusion_nogyro();
  ::android::service::SensorFusionProto_FusionProto* mutable_fusion_nogyro();
  void set_allocated_fusion_nogyro(::android::service::SensorFusionProto_FusionProto* fusion_nogyro);

  // @@protoc_insertion_point(class_scope:android.service.SensorFusionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::service::SensorFusionProto_FusionProto* fusion_9axis_;
  ::android::service::SensorFusionProto_FusionProto* fusion_nomag_;
  ::android::service::SensorFusionProto_FusionProto* fusion_nogyro_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorEventsProto_Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorEventsProto.Event) */ {
 public:
  SensorEventsProto_Event();
  virtual ~SensorEventsProto_Event();

  SensorEventsProto_Event(const SensorEventsProto_Event& from);
  SensorEventsProto_Event(SensorEventsProto_Event&& from) noexcept
    : SensorEventsProto_Event() {
    *this = ::std::move(from);
  }

  inline SensorEventsProto_Event& operator=(const SensorEventsProto_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorEventsProto_Event& operator=(SensorEventsProto_Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorEventsProto_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorEventsProto_Event* internal_default_instance() {
    return reinterpret_cast<const SensorEventsProto_Event*>(
               &_SensorEventsProto_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SensorEventsProto_Event& a, SensorEventsProto_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorEventsProto_Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorEventsProto_Event* New() const final {
    return CreateMaybeMessage<SensorEventsProto_Event>(nullptr);
  }

  SensorEventsProto_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorEventsProto_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorEventsProto_Event& from);
  void MergeFrom(const SensorEventsProto_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorEventsProto_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorEventsProto.Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatArrayFieldNumber = 5,
    kWallTimestampMsFieldNumber = 2,
    kTimestampSecFieldNumber = 1,
    kMaskedFieldNumber = 3,
    kInt64DataFieldNumber = 4,
  };
  // repeated float float_array = 5;
  int float_array_size() const;
  void clear_float_array();
  float float_array(int index) const;
  void set_float_array(int index, float value);
  void add_float_array(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_array();

  // optional int64 wall_timestamp_ms = 2;
  bool has_wall_timestamp_ms() const;
  void clear_wall_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 wall_timestamp_ms() const;
  void set_wall_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float timestamp_sec = 1;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec();
  float timestamp_sec() const;
  void set_timestamp_sec(float value);

  // optional bool masked = 3;
  bool has_masked() const;
  void clear_masked();
  bool masked() const;
  void set_masked(bool value);

  // optional int64 int64_data = 4;
  bool has_int64_data() const;
  void clear_int64_data();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_data() const;
  void set_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorEventsProto.Event)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_array_;
  ::PROTOBUF_NAMESPACE_ID::int64 wall_timestamp_ms_;
  float timestamp_sec_;
  bool masked_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_data_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorEventsProto_RecentEventsLog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorEventsProto.RecentEventsLog) */ {
 public:
  SensorEventsProto_RecentEventsLog();
  virtual ~SensorEventsProto_RecentEventsLog();

  SensorEventsProto_RecentEventsLog(const SensorEventsProto_RecentEventsLog& from);
  SensorEventsProto_RecentEventsLog(SensorEventsProto_RecentEventsLog&& from) noexcept
    : SensorEventsProto_RecentEventsLog() {
    *this = ::std::move(from);
  }

  inline SensorEventsProto_RecentEventsLog& operator=(const SensorEventsProto_RecentEventsLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorEventsProto_RecentEventsLog& operator=(SensorEventsProto_RecentEventsLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorEventsProto_RecentEventsLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorEventsProto_RecentEventsLog* internal_default_instance() {
    return reinterpret_cast<const SensorEventsProto_RecentEventsLog*>(
               &_SensorEventsProto_RecentEventsLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SensorEventsProto_RecentEventsLog& a, SensorEventsProto_RecentEventsLog& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorEventsProto_RecentEventsLog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorEventsProto_RecentEventsLog* New() const final {
    return CreateMaybeMessage<SensorEventsProto_RecentEventsLog>(nullptr);
  }

  SensorEventsProto_RecentEventsLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorEventsProto_RecentEventsLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorEventsProto_RecentEventsLog& from);
  void MergeFrom(const SensorEventsProto_RecentEventsLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorEventsProto_RecentEventsLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorEventsProto.RecentEventsLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kNameFieldNumber = 1,
    kRecentEventsCountFieldNumber = 2,
  };
  // repeated .android.service.SensorEventsProto.Event events = 3;
  int events_size() const;
  void clear_events();
  ::android::service::SensorEventsProto_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_Event >*
      mutable_events();
  const ::android::service::SensorEventsProto_Event& events(int index) const;
  ::android::service::SensorEventsProto_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_Event >&
      events() const;

  // optional string name = 1 [(.android.privacy) = {
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 recent_events_count = 2;
  bool has_recent_events_count() const;
  void clear_recent_events_count();
  ::PROTOBUF_NAMESPACE_ID::int32 recent_events_count() const;
  void set_recent_events_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorEventsProto.RecentEventsLog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_Event > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 recent_events_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorEventsProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorEventsProto) */ {
 public:
  SensorEventsProto();
  virtual ~SensorEventsProto();

  SensorEventsProto(const SensorEventsProto& from);
  SensorEventsProto(SensorEventsProto&& from) noexcept
    : SensorEventsProto() {
    *this = ::std::move(from);
  }

  inline SensorEventsProto& operator=(const SensorEventsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorEventsProto& operator=(SensorEventsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorEventsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorEventsProto* internal_default_instance() {
    return reinterpret_cast<const SensorEventsProto*>(
               &_SensorEventsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SensorEventsProto& a, SensorEventsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorEventsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorEventsProto* New() const final {
    return CreateMaybeMessage<SensorEventsProto>(nullptr);
  }

  SensorEventsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorEventsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorEventsProto& from);
  void MergeFrom(const SensorEventsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorEventsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorEventsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorEventsProto_Event Event;
  typedef SensorEventsProto_RecentEventsLog RecentEventsLog;

  // accessors -------------------------------------------------------

  enum : int {
    kRecentEventsLogsFieldNumber = 1,
  };
  // repeated .android.service.SensorEventsProto.RecentEventsLog recent_events_logs = 1;
  int recent_events_logs_size() const;
  void clear_recent_events_logs();
  ::android::service::SensorEventsProto_RecentEventsLog* mutable_recent_events_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_RecentEventsLog >*
      mutable_recent_events_logs();
  const ::android::service::SensorEventsProto_RecentEventsLog& recent_events_logs(int index) const;
  ::android::service::SensorEventsProto_RecentEventsLog* add_recent_events_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_RecentEventsLog >&
      recent_events_logs() const;

  // @@protoc_insertion_point(class_scope:android.service.SensorEventsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_RecentEventsLog > recent_events_logs_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ActiveSensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.ActiveSensorProto) */ {
 public:
  ActiveSensorProto();
  virtual ~ActiveSensorProto();

  ActiveSensorProto(const ActiveSensorProto& from);
  ActiveSensorProto(ActiveSensorProto&& from) noexcept
    : ActiveSensorProto() {
    *this = ::std::move(from);
  }

  inline ActiveSensorProto& operator=(const ActiveSensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveSensorProto& operator=(ActiveSensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveSensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveSensorProto* internal_default_instance() {
    return reinterpret_cast<const ActiveSensorProto*>(
               &_ActiveSensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ActiveSensorProto& a, ActiveSensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveSensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveSensorProto* New() const final {
    return CreateMaybeMessage<ActiveSensorProto>(nullptr);
  }

  ActiveSensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveSensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveSensorProto& from);
  void MergeFrom(const ActiveSensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveSensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.ActiveSensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHandleFieldNumber = 2,
    kNumConnectionsFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 handle = 2;
  bool has_handle() const;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_connections = 3;
  bool has_num_connections() const;
  void clear_num_connections();
  ::PROTOBUF_NAMESPACE_ID::int32 num_connections() const;
  void set_num_connections(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.ActiveSensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_connections_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorDirectConnectionProto_SensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorDirectConnectionProto.SensorProto) */ {
 public:
  SensorDirectConnectionProto_SensorProto();
  virtual ~SensorDirectConnectionProto_SensorProto();

  SensorDirectConnectionProto_SensorProto(const SensorDirectConnectionProto_SensorProto& from);
  SensorDirectConnectionProto_SensorProto(SensorDirectConnectionProto_SensorProto&& from) noexcept
    : SensorDirectConnectionProto_SensorProto() {
    *this = ::std::move(from);
  }

  inline SensorDirectConnectionProto_SensorProto& operator=(const SensorDirectConnectionProto_SensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDirectConnectionProto_SensorProto& operator=(SensorDirectConnectionProto_SensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorDirectConnectionProto_SensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorDirectConnectionProto_SensorProto* internal_default_instance() {
    return reinterpret_cast<const SensorDirectConnectionProto_SensorProto*>(
               &_SensorDirectConnectionProto_SensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SensorDirectConnectionProto_SensorProto& a, SensorDirectConnectionProto_SensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDirectConnectionProto_SensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorDirectConnectionProto_SensorProto* New() const final {
    return CreateMaybeMessage<SensorDirectConnectionProto_SensorProto>(nullptr);
  }

  SensorDirectConnectionProto_SensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorDirectConnectionProto_SensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorDirectConnectionProto_SensorProto& from);
  void MergeFrom(const SensorDirectConnectionProto_SensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDirectConnectionProto_SensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorDirectConnectionProto.SensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorFieldNumber = 1,
    kRateFieldNumber = 2,
  };
  // optional int32 sensor = 1;
  bool has_sensor() const;
  void clear_sensor();
  ::PROTOBUF_NAMESPACE_ID::int32 sensor() const;
  void set_sensor(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 rate = 2;
  bool has_rate() const;
  void clear_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 rate() const;
  void set_rate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorDirectConnectionProto.SensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_;
  ::PROTOBUF_NAMESPACE_ID::int32 rate_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorDirectConnectionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorDirectConnectionProto) */ {
 public:
  SensorDirectConnectionProto();
  virtual ~SensorDirectConnectionProto();

  SensorDirectConnectionProto(const SensorDirectConnectionProto& from);
  SensorDirectConnectionProto(SensorDirectConnectionProto&& from) noexcept
    : SensorDirectConnectionProto() {
    *this = ::std::move(from);
  }

  inline SensorDirectConnectionProto& operator=(const SensorDirectConnectionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDirectConnectionProto& operator=(SensorDirectConnectionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorDirectConnectionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorDirectConnectionProto* internal_default_instance() {
    return reinterpret_cast<const SensorDirectConnectionProto*>(
               &_SensorDirectConnectionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SensorDirectConnectionProto& a, SensorDirectConnectionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDirectConnectionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorDirectConnectionProto* New() const final {
    return CreateMaybeMessage<SensorDirectConnectionProto>(nullptr);
  }

  SensorDirectConnectionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorDirectConnectionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorDirectConnectionProto& from);
  void MergeFrom(const SensorDirectConnectionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDirectConnectionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorDirectConnectionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorDirectConnectionProto_SensorProto SensorProto;

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 4,
    kPackageNameFieldNumber = 1,
    kHalChannelHandleFieldNumber = 2,
    kNumSensorActivatedFieldNumber = 3,
  };
  // repeated .android.service.SensorDirectConnectionProto.SensorProto sensors = 4;
  int sensors_size() const;
  void clear_sensors();
  ::android::service::SensorDirectConnectionProto_SensorProto* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto_SensorProto >*
      mutable_sensors();
  const ::android::service::SensorDirectConnectionProto_SensorProto& sensors(int index) const;
  ::android::service::SensorDirectConnectionProto_SensorProto* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto_SensorProto >&
      sensors() const;

  // optional string package_name = 1;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int32 hal_channel_handle = 2;
  bool has_hal_channel_handle() const;
  void clear_hal_channel_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 hal_channel_handle() const;
  void set_hal_channel_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_sensor_activated = 3;
  bool has_num_sensor_activated() const;
  void clear_num_sensor_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sensor_activated() const;
  void set_num_sensor_activated(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorDirectConnectionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto_SensorProto > sensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 hal_channel_handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sensor_activated_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorEventConnectionProto_FlushInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorEventConnectionProto.FlushInfoProto) */ {
 public:
  SensorEventConnectionProto_FlushInfoProto();
  virtual ~SensorEventConnectionProto_FlushInfoProto();

  SensorEventConnectionProto_FlushInfoProto(const SensorEventConnectionProto_FlushInfoProto& from);
  SensorEventConnectionProto_FlushInfoProto(SensorEventConnectionProto_FlushInfoProto&& from) noexcept
    : SensorEventConnectionProto_FlushInfoProto() {
    *this = ::std::move(from);
  }

  inline SensorEventConnectionProto_FlushInfoProto& operator=(const SensorEventConnectionProto_FlushInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorEventConnectionProto_FlushInfoProto& operator=(SensorEventConnectionProto_FlushInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorEventConnectionProto_FlushInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorEventConnectionProto_FlushInfoProto* internal_default_instance() {
    return reinterpret_cast<const SensorEventConnectionProto_FlushInfoProto*>(
               &_SensorEventConnectionProto_FlushInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SensorEventConnectionProto_FlushInfoProto& a, SensorEventConnectionProto_FlushInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorEventConnectionProto_FlushInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorEventConnectionProto_FlushInfoProto* New() const final {
    return CreateMaybeMessage<SensorEventConnectionProto_FlushInfoProto>(nullptr);
  }

  SensorEventConnectionProto_FlushInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorEventConnectionProto_FlushInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorEventConnectionProto_FlushInfoProto& from);
  void MergeFrom(const SensorEventConnectionProto_FlushInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorEventConnectionProto_FlushInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorEventConnectionProto.FlushInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNameFieldNumber = 1,
    kSensorHandleFieldNumber = 2,
    kFirstFlushPendingFieldNumber = 3,
    kPendingFlushEventsToSendFieldNumber = 4,
  };
  // optional string sensor_name = 1;
  bool has_sensor_name() const;
  void clear_sensor_name();
  const std::string& sensor_name() const;
  void set_sensor_name(const std::string& value);
  void set_sensor_name(std::string&& value);
  void set_sensor_name(const char* value);
  void set_sensor_name(const char* value, size_t size);
  std::string* mutable_sensor_name();
  std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* sensor_name);

  // optional int32 sensor_handle = 2;
  bool has_sensor_handle() const;
  void clear_sensor_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_handle() const;
  void set_sensor_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool first_flush_pending = 3;
  bool has_first_flush_pending() const;
  void clear_first_flush_pending();
  bool first_flush_pending() const;
  void set_first_flush_pending(bool value);

  // optional int32 pending_flush_events_to_send = 4;
  bool has_pending_flush_events_to_send() const;
  void clear_pending_flush_events_to_send();
  ::PROTOBUF_NAMESPACE_ID::int32 pending_flush_events_to_send() const;
  void set_pending_flush_events_to_send(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorEventConnectionProto.FlushInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_handle_;
  bool first_flush_pending_;
  ::PROTOBUF_NAMESPACE_ID::int32 pending_flush_events_to_send_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorEventConnectionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorEventConnectionProto) */ {
 public:
  SensorEventConnectionProto();
  virtual ~SensorEventConnectionProto();

  SensorEventConnectionProto(const SensorEventConnectionProto& from);
  SensorEventConnectionProto(SensorEventConnectionProto&& from) noexcept
    : SensorEventConnectionProto() {
    *this = ::std::move(from);
  }

  inline SensorEventConnectionProto& operator=(const SensorEventConnectionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorEventConnectionProto& operator=(SensorEventConnectionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorEventConnectionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorEventConnectionProto* internal_default_instance() {
    return reinterpret_cast<const SensorEventConnectionProto*>(
               &_SensorEventConnectionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SensorEventConnectionProto& a, SensorEventConnectionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorEventConnectionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorEventConnectionProto* New() const final {
    return CreateMaybeMessage<SensorEventConnectionProto>(nullptr);
  }

  SensorEventConnectionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorEventConnectionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorEventConnectionProto& from);
  void MergeFrom(const SensorEventConnectionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorEventConnectionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorEventConnectionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorEventConnectionProto_FlushInfoProto FlushInfoProto;

  typedef SensorEventConnectionProto_OperatingModeEnum OperatingModeEnum;
  static constexpr OperatingModeEnum OP_MODE_UNKNOWN =
    SensorEventConnectionProto_OperatingModeEnum_OP_MODE_UNKNOWN;
  static constexpr OperatingModeEnum OP_MODE_NORMAL =
    SensorEventConnectionProto_OperatingModeEnum_OP_MODE_NORMAL;
  static constexpr OperatingModeEnum OP_MODE_RESTRICTED =
    SensorEventConnectionProto_OperatingModeEnum_OP_MODE_RESTRICTED;
  static constexpr OperatingModeEnum OP_MODE_DATA_INJECTION =
    SensorEventConnectionProto_OperatingModeEnum_OP_MODE_DATA_INJECTION;
  static inline bool OperatingModeEnum_IsValid(int value) {
    return SensorEventConnectionProto_OperatingModeEnum_IsValid(value);
  }
  static constexpr OperatingModeEnum OperatingModeEnum_MIN =
    SensorEventConnectionProto_OperatingModeEnum_OperatingModeEnum_MIN;
  static constexpr OperatingModeEnum OperatingModeEnum_MAX =
    SensorEventConnectionProto_OperatingModeEnum_OperatingModeEnum_MAX;
  static constexpr int OperatingModeEnum_ARRAYSIZE =
    SensorEventConnectionProto_OperatingModeEnum_OperatingModeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperatingModeEnum_descriptor() {
    return SensorEventConnectionProto_OperatingModeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& OperatingModeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperatingModeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperatingModeEnum_Name.");
    return SensorEventConnectionProto_OperatingModeEnum_Name(enum_t_value);
  }
  static inline bool OperatingModeEnum_Parse(const std::string& name,
      OperatingModeEnum* value) {
    return SensorEventConnectionProto_OperatingModeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFlushInfosFieldNumber = 7,
    kPackageNameFieldNumber = 2,
    kOperatingModeFieldNumber = 1,
    kWakeLockRefCountFieldNumber = 3,
    kUidFieldNumber = 4,
    kCacheSizeFieldNumber = 5,
    kMaxCacheSizeFieldNumber = 6,
    kEventsReceivedFieldNumber = 8,
    kEventsSentFieldNumber = 9,
    kEventsCacheFieldNumber = 10,
    kEventsDroppedFieldNumber = 11,
    kTotalAcksNeededFieldNumber = 12,
    kTotalAcksReceivedFieldNumber = 13,
  };
  // repeated .android.service.SensorEventConnectionProto.FlushInfoProto flush_infos = 7;
  int flush_infos_size() const;
  void clear_flush_infos();
  ::android::service::SensorEventConnectionProto_FlushInfoProto* mutable_flush_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto_FlushInfoProto >*
      mutable_flush_infos();
  const ::android::service::SensorEventConnectionProto_FlushInfoProto& flush_infos(int index) const;
  ::android::service::SensorEventConnectionProto_FlushInfoProto* add_flush_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto_FlushInfoProto >&
      flush_infos() const;

  // optional string package_name = 2;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional .android.service.SensorEventConnectionProto.OperatingModeEnum operating_mode = 1;
  bool has_operating_mode() const;
  void clear_operating_mode();
  ::android::service::SensorEventConnectionProto_OperatingModeEnum operating_mode() const;
  void set_operating_mode(::android::service::SensorEventConnectionProto_OperatingModeEnum value);

  // optional int32 wake_lock_ref_count = 3;
  bool has_wake_lock_ref_count() const;
  void clear_wake_lock_ref_count();
  ::PROTOBUF_NAMESPACE_ID::int32 wake_lock_ref_count() const;
  void set_wake_lock_ref_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 4;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cache_size = 5;
  bool has_cache_size() const;
  void clear_cache_size();
  ::PROTOBUF_NAMESPACE_ID::int32 cache_size() const;
  void set_cache_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_cache_size = 6;
  bool has_max_cache_size() const;
  void clear_max_cache_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_cache_size() const;
  void set_max_cache_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 events_received = 8;
  bool has_events_received() const;
  void clear_events_received();
  ::PROTOBUF_NAMESPACE_ID::int32 events_received() const;
  void set_events_received(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 events_sent = 9;
  bool has_events_sent() const;
  void clear_events_sent();
  ::PROTOBUF_NAMESPACE_ID::int32 events_sent() const;
  void set_events_sent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 events_cache = 10;
  bool has_events_cache() const;
  void clear_events_cache();
  ::PROTOBUF_NAMESPACE_ID::int32 events_cache() const;
  void set_events_cache(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 events_dropped = 11;
  bool has_events_dropped() const;
  void clear_events_dropped();
  ::PROTOBUF_NAMESPACE_ID::int32 events_dropped() const;
  void set_events_dropped(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_acks_needed = 12;
  bool has_total_acks_needed() const;
  void clear_total_acks_needed();
  ::PROTOBUF_NAMESPACE_ID::int32 total_acks_needed() const;
  void set_total_acks_needed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_acks_received = 13;
  bool has_total_acks_received() const;
  void clear_total_acks_received();
  ::PROTOBUF_NAMESPACE_ID::int32 total_acks_received() const;
  void set_total_acks_received(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorEventConnectionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto_FlushInfoProto > flush_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  int operating_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 wake_lock_ref_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cache_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_cache_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 events_received_;
  ::PROTOBUF_NAMESPACE_ID::int32 events_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 events_cache_;
  ::PROTOBUF_NAMESPACE_ID::int32 events_dropped_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_acks_needed_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_acks_received_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SensorRegistrationInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.SensorRegistrationInfoProto) */ {
 public:
  SensorRegistrationInfoProto();
  virtual ~SensorRegistrationInfoProto();

  SensorRegistrationInfoProto(const SensorRegistrationInfoProto& from);
  SensorRegistrationInfoProto(SensorRegistrationInfoProto&& from) noexcept
    : SensorRegistrationInfoProto() {
    *this = ::std::move(from);
  }

  inline SensorRegistrationInfoProto& operator=(const SensorRegistrationInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorRegistrationInfoProto& operator=(SensorRegistrationInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorRegistrationInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorRegistrationInfoProto* internal_default_instance() {
    return reinterpret_cast<const SensorRegistrationInfoProto*>(
               &_SensorRegistrationInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SensorRegistrationInfoProto& a, SensorRegistrationInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorRegistrationInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorRegistrationInfoProto* New() const final {
    return CreateMaybeMessage<SensorRegistrationInfoProto>(nullptr);
  }

  SensorRegistrationInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorRegistrationInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorRegistrationInfoProto& from);
  void MergeFrom(const SensorRegistrationInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorRegistrationInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorRegistrationInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 3,
    kTimestampSecFieldNumber = 1,
    kSensorHandleFieldNumber = 2,
    kPidFieldNumber = 4,
    kSamplingRateUsFieldNumber = 6,
    kUidFieldNumber = 5,
    kActivatedFieldNumber = 8,
    kMaxReportLatencyUsFieldNumber = 7,
  };
  // optional string package_name = 3;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int64 timestamp_sec = 1;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_sec() const;
  void set_timestamp_sec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sensor_handle = 2;
  bool has_sensor_handle() const;
  void clear_sensor_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_handle() const;
  void set_sensor_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pid = 4;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 sampling_rate_us = 6;
  bool has_sampling_rate_us() const;
  void clear_sampling_rate_us();
  ::PROTOBUF_NAMESPACE_ID::int64 sampling_rate_us() const;
  void set_sampling_rate_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 uid = 5;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool activated = 8;
  bool has_activated() const;
  void clear_activated();
  bool activated() const;
  void set_activated(bool value);

  // optional int64 max_report_latency_us = 7;
  bool has_max_report_latency_us() const;
  void clear_max_report_latency_us();
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_latency_us() const;
  void set_max_report_latency_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.service.SensorRegistrationInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int64 sampling_rate_us_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool activated_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_latency_us_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorServiceProto

// optional sint32 init_status = 16;
inline bool SensorServiceProto::has_init_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SensorServiceProto::clear_init_status() {
  init_status_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorServiceProto::init_status() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.init_status)
  return init_status_;
}
inline void SensorServiceProto::set_init_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  init_status_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.init_status)
}

// optional int64 current_time_ms = 1;
inline bool SensorServiceProto::has_current_time_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorServiceProto::clear_current_time_ms() {
  current_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorServiceProto::current_time_ms() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.current_time_ms)
  return current_time_ms_;
}
inline void SensorServiceProto::set_current_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  current_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.current_time_ms)
}

// optional .android.service.SensorDeviceProto sensor_device = 2;
inline bool SensorServiceProto::has_sensor_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorServiceProto::clear_sensor_device() {
  if (sensor_device_ != nullptr) sensor_device_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::service::SensorDeviceProto& SensorServiceProto::sensor_device() const {
  const ::android::service::SensorDeviceProto* p = sensor_device_;
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.sensor_device)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::SensorDeviceProto*>(
      &::android::service::_SensorDeviceProto_default_instance_);
}
inline ::android::service::SensorDeviceProto* SensorServiceProto::release_sensor_device() {
  // @@protoc_insertion_point(field_release:android.service.SensorServiceProto.sensor_device)
  _has_bits_[0] &= ~0x00000002u;
  ::android::service::SensorDeviceProto* temp = sensor_device_;
  sensor_device_ = nullptr;
  return temp;
}
inline ::android::service::SensorDeviceProto* SensorServiceProto::mutable_sensor_device() {
  _has_bits_[0] |= 0x00000002u;
  if (sensor_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::SensorDeviceProto>(GetArenaNoVirtual());
    sensor_device_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.sensor_device)
  return sensor_device_;
}
inline void SensorServiceProto::set_allocated_sensor_device(::android::service::SensorDeviceProto* sensor_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sensor_device_;
  }
  if (sensor_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensor_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sensor_device_ = sensor_device;
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorServiceProto.sensor_device)
}

// optional .android.service.SensorListProto sensors = 3;
inline bool SensorServiceProto::has_sensors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorServiceProto::clear_sensors() {
  if (sensors_ != nullptr) sensors_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::service::SensorListProto& SensorServiceProto::sensors() const {
  const ::android::service::SensorListProto* p = sensors_;
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.sensors)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::SensorListProto*>(
      &::android::service::_SensorListProto_default_instance_);
}
inline ::android::service::SensorListProto* SensorServiceProto::release_sensors() {
  // @@protoc_insertion_point(field_release:android.service.SensorServiceProto.sensors)
  _has_bits_[0] &= ~0x00000004u;
  ::android::service::SensorListProto* temp = sensors_;
  sensors_ = nullptr;
  return temp;
}
inline ::android::service::SensorListProto* SensorServiceProto::mutable_sensors() {
  _has_bits_[0] |= 0x00000004u;
  if (sensors_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::SensorListProto>(GetArenaNoVirtual());
    sensors_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.sensors)
  return sensors_;
}
inline void SensorServiceProto::set_allocated_sensors(::android::service::SensorListProto* sensors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sensors_;
  }
  if (sensors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensors, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sensors_ = sensors;
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorServiceProto.sensors)
}

// optional .android.service.SensorFusionProto fusion_state = 4;
inline bool SensorServiceProto::has_fusion_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorServiceProto::clear_fusion_state() {
  if (fusion_state_ != nullptr) fusion_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::service::SensorFusionProto& SensorServiceProto::fusion_state() const {
  const ::android::service::SensorFusionProto* p = fusion_state_;
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.fusion_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::SensorFusionProto*>(
      &::android::service::_SensorFusionProto_default_instance_);
}
inline ::android::service::SensorFusionProto* SensorServiceProto::release_fusion_state() {
  // @@protoc_insertion_point(field_release:android.service.SensorServiceProto.fusion_state)
  _has_bits_[0] &= ~0x00000008u;
  ::android::service::SensorFusionProto* temp = fusion_state_;
  fusion_state_ = nullptr;
  return temp;
}
inline ::android::service::SensorFusionProto* SensorServiceProto::mutable_fusion_state() {
  _has_bits_[0] |= 0x00000008u;
  if (fusion_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::SensorFusionProto>(GetArenaNoVirtual());
    fusion_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.fusion_state)
  return fusion_state_;
}
inline void SensorServiceProto::set_allocated_fusion_state(::android::service::SensorFusionProto* fusion_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fusion_state_;
  }
  if (fusion_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fusion_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fusion_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  fusion_state_ = fusion_state;
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorServiceProto.fusion_state)
}

// optional .android.service.SensorEventsProto sensor_events = 5;
inline bool SensorServiceProto::has_sensor_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorServiceProto::clear_sensor_events() {
  if (sensor_events_ != nullptr) sensor_events_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::service::SensorEventsProto& SensorServiceProto::sensor_events() const {
  const ::android::service::SensorEventsProto* p = sensor_events_;
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.sensor_events)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::SensorEventsProto*>(
      &::android::service::_SensorEventsProto_default_instance_);
}
inline ::android::service::SensorEventsProto* SensorServiceProto::release_sensor_events() {
  // @@protoc_insertion_point(field_release:android.service.SensorServiceProto.sensor_events)
  _has_bits_[0] &= ~0x00000010u;
  ::android::service::SensorEventsProto* temp = sensor_events_;
  sensor_events_ = nullptr;
  return temp;
}
inline ::android::service::SensorEventsProto* SensorServiceProto::mutable_sensor_events() {
  _has_bits_[0] |= 0x00000010u;
  if (sensor_events_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::SensorEventsProto>(GetArenaNoVirtual());
    sensor_events_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.sensor_events)
  return sensor_events_;
}
inline void SensorServiceProto::set_allocated_sensor_events(::android::service::SensorEventsProto* sensor_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sensor_events_;
  }
  if (sensor_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensor_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_events, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sensor_events_ = sensor_events;
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorServiceProto.sensor_events)
}

// repeated .android.service.ActiveSensorProto active_sensors = 6;
inline int SensorServiceProto::active_sensors_size() const {
  return active_sensors_.size();
}
inline void SensorServiceProto::clear_active_sensors() {
  active_sensors_.Clear();
}
inline ::android::service::ActiveSensorProto* SensorServiceProto::mutable_active_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.active_sensors)
  return active_sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::ActiveSensorProto >*
SensorServiceProto::mutable_active_sensors() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorServiceProto.active_sensors)
  return &active_sensors_;
}
inline const ::android::service::ActiveSensorProto& SensorServiceProto::active_sensors(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.active_sensors)
  return active_sensors_.Get(index);
}
inline ::android::service::ActiveSensorProto* SensorServiceProto::add_active_sensors() {
  // @@protoc_insertion_point(field_add:android.service.SensorServiceProto.active_sensors)
  return active_sensors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::ActiveSensorProto >&
SensorServiceProto::active_sensors() const {
  // @@protoc_insertion_point(field_list:android.service.SensorServiceProto.active_sensors)
  return active_sensors_;
}

// optional int32 socket_buffer_size = 7;
inline bool SensorServiceProto::has_socket_buffer_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorServiceProto::clear_socket_buffer_size() {
  socket_buffer_size_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorServiceProto::socket_buffer_size() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.socket_buffer_size)
  return socket_buffer_size_;
}
inline void SensorServiceProto::set_socket_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  socket_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.socket_buffer_size)
}

// optional int32 socket_buffer_size_in_events = 8;
inline bool SensorServiceProto::has_socket_buffer_size_in_events() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorServiceProto::clear_socket_buffer_size_in_events() {
  socket_buffer_size_in_events_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorServiceProto::socket_buffer_size_in_events() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.socket_buffer_size_in_events)
  return socket_buffer_size_in_events_;
}
inline void SensorServiceProto::set_socket_buffer_size_in_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  socket_buffer_size_in_events_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.socket_buffer_size_in_events)
}

// optional bool wake_lock_acquired = 9;
inline bool SensorServiceProto::has_wake_lock_acquired() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorServiceProto::clear_wake_lock_acquired() {
  wake_lock_acquired_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SensorServiceProto::wake_lock_acquired() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.wake_lock_acquired)
  return wake_lock_acquired_;
}
inline void SensorServiceProto::set_wake_lock_acquired(bool value) {
  _has_bits_[0] |= 0x00000200u;
  wake_lock_acquired_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.wake_lock_acquired)
}

// optional .android.service.SensorServiceProto.OperatingModeEnum operating_mode = 10;
inline bool SensorServiceProto::has_operating_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorServiceProto::clear_operating_mode() {
  operating_mode_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::service::SensorServiceProto_OperatingModeEnum SensorServiceProto::operating_mode() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.operating_mode)
  return static_cast< ::android::service::SensorServiceProto_OperatingModeEnum >(operating_mode_);
}
inline void SensorServiceProto::set_operating_mode(::android::service::SensorServiceProto_OperatingModeEnum value) {
  assert(::android::service::SensorServiceProto_OperatingModeEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  operating_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.operating_mode)
}

// optional string whitelisted_package = 11;
inline bool SensorServiceProto::has_whitelisted_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorServiceProto::clear_whitelisted_package() {
  whitelisted_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorServiceProto::whitelisted_package() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.whitelisted_package)
  return whitelisted_package_.GetNoArena();
}
inline void SensorServiceProto::set_whitelisted_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  whitelisted_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.whitelisted_package)
}
inline void SensorServiceProto::set_whitelisted_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  whitelisted_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorServiceProto.whitelisted_package)
}
inline void SensorServiceProto::set_whitelisted_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  whitelisted_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorServiceProto.whitelisted_package)
}
inline void SensorServiceProto::set_whitelisted_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  whitelisted_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorServiceProto.whitelisted_package)
}
inline std::string* SensorServiceProto::mutable_whitelisted_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.whitelisted_package)
  return whitelisted_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorServiceProto::release_whitelisted_package() {
  // @@protoc_insertion_point(field_release:android.service.SensorServiceProto.whitelisted_package)
  if (!has_whitelisted_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return whitelisted_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorServiceProto::set_allocated_whitelisted_package(std::string* whitelisted_package) {
  if (whitelisted_package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  whitelisted_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whitelisted_package);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorServiceProto.whitelisted_package)
}

// optional bool sensor_privacy = 12;
inline bool SensorServiceProto::has_sensor_privacy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SensorServiceProto::clear_sensor_privacy() {
  sensor_privacy_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SensorServiceProto::sensor_privacy() const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.sensor_privacy)
  return sensor_privacy_;
}
inline void SensorServiceProto::set_sensor_privacy(bool value) {
  _has_bits_[0] |= 0x00000400u;
  sensor_privacy_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorServiceProto.sensor_privacy)
}

// repeated .android.service.SensorEventConnectionProto active_connections = 13;
inline int SensorServiceProto::active_connections_size() const {
  return active_connections_.size();
}
inline void SensorServiceProto::clear_active_connections() {
  active_connections_.Clear();
}
inline ::android::service::SensorEventConnectionProto* SensorServiceProto::mutable_active_connections(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.active_connections)
  return active_connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto >*
SensorServiceProto::mutable_active_connections() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorServiceProto.active_connections)
  return &active_connections_;
}
inline const ::android::service::SensorEventConnectionProto& SensorServiceProto::active_connections(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.active_connections)
  return active_connections_.Get(index);
}
inline ::android::service::SensorEventConnectionProto* SensorServiceProto::add_active_connections() {
  // @@protoc_insertion_point(field_add:android.service.SensorServiceProto.active_connections)
  return active_connections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto >&
SensorServiceProto::active_connections() const {
  // @@protoc_insertion_point(field_list:android.service.SensorServiceProto.active_connections)
  return active_connections_;
}

// repeated .android.service.SensorDirectConnectionProto direct_connections = 14;
inline int SensorServiceProto::direct_connections_size() const {
  return direct_connections_.size();
}
inline void SensorServiceProto::clear_direct_connections() {
  direct_connections_.Clear();
}
inline ::android::service::SensorDirectConnectionProto* SensorServiceProto::mutable_direct_connections(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.direct_connections)
  return direct_connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto >*
SensorServiceProto::mutable_direct_connections() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorServiceProto.direct_connections)
  return &direct_connections_;
}
inline const ::android::service::SensorDirectConnectionProto& SensorServiceProto::direct_connections(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.direct_connections)
  return direct_connections_.Get(index);
}
inline ::android::service::SensorDirectConnectionProto* SensorServiceProto::add_direct_connections() {
  // @@protoc_insertion_point(field_add:android.service.SensorServiceProto.direct_connections)
  return direct_connections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto >&
SensorServiceProto::direct_connections() const {
  // @@protoc_insertion_point(field_list:android.service.SensorServiceProto.direct_connections)
  return direct_connections_;
}

// repeated .android.service.SensorRegistrationInfoProto previous_registrations = 15;
inline int SensorServiceProto::previous_registrations_size() const {
  return previous_registrations_.size();
}
inline void SensorServiceProto::clear_previous_registrations() {
  previous_registrations_.Clear();
}
inline ::android::service::SensorRegistrationInfoProto* SensorServiceProto::mutable_previous_registrations(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorServiceProto.previous_registrations)
  return previous_registrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorRegistrationInfoProto >*
SensorServiceProto::mutable_previous_registrations() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorServiceProto.previous_registrations)
  return &previous_registrations_;
}
inline const ::android::service::SensorRegistrationInfoProto& SensorServiceProto::previous_registrations(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorServiceProto.previous_registrations)
  return previous_registrations_.Get(index);
}
inline ::android::service::SensorRegistrationInfoProto* SensorServiceProto::add_previous_registrations() {
  // @@protoc_insertion_point(field_add:android.service.SensorServiceProto.previous_registrations)
  return previous_registrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorRegistrationInfoProto >&
SensorServiceProto::previous_registrations() const {
  // @@protoc_insertion_point(field_list:android.service.SensorServiceProto.previous_registrations)
  return previous_registrations_;
}

// -------------------------------------------------------------------

// SensorDeviceProto_SensorProto

// optional int32 handle = 1;
inline bool SensorDeviceProto_SensorProto::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorDeviceProto_SensorProto::clear_handle() {
  handle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDeviceProto_SensorProto::handle() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.SensorProto.handle)
  return handle_;
}
inline void SensorDeviceProto_SensorProto::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  handle_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.SensorProto.handle)
}

// optional int32 active_count = 2;
inline bool SensorDeviceProto_SensorProto::has_active_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorDeviceProto_SensorProto::clear_active_count() {
  active_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDeviceProto_SensorProto::active_count() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.SensorProto.active_count)
  return active_count_;
}
inline void SensorDeviceProto_SensorProto::set_active_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  active_count_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.SensorProto.active_count)
}

// repeated float sampling_period_ms = 3;
inline int SensorDeviceProto_SensorProto::sampling_period_ms_size() const {
  return sampling_period_ms_.size();
}
inline void SensorDeviceProto_SensorProto::clear_sampling_period_ms() {
  sampling_period_ms_.Clear();
}
inline float SensorDeviceProto_SensorProto::sampling_period_ms(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.SensorProto.sampling_period_ms)
  return sampling_period_ms_.Get(index);
}
inline void SensorDeviceProto_SensorProto::set_sampling_period_ms(int index, float value) {
  sampling_period_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.SensorProto.sampling_period_ms)
}
inline void SensorDeviceProto_SensorProto::add_sampling_period_ms(float value) {
  sampling_period_ms_.Add(value);
  // @@protoc_insertion_point(field_add:android.service.SensorDeviceProto.SensorProto.sampling_period_ms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SensorDeviceProto_SensorProto::sampling_period_ms() const {
  // @@protoc_insertion_point(field_list:android.service.SensorDeviceProto.SensorProto.sampling_period_ms)
  return sampling_period_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SensorDeviceProto_SensorProto::mutable_sampling_period_ms() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorDeviceProto.SensorProto.sampling_period_ms)
  return &sampling_period_ms_;
}

// optional float sampling_period_selected = 4;
inline bool SensorDeviceProto_SensorProto::has_sampling_period_selected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorDeviceProto_SensorProto::clear_sampling_period_selected() {
  sampling_period_selected_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SensorDeviceProto_SensorProto::sampling_period_selected() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.SensorProto.sampling_period_selected)
  return sampling_period_selected_;
}
inline void SensorDeviceProto_SensorProto::set_sampling_period_selected(float value) {
  _has_bits_[0] |= 0x00000004u;
  sampling_period_selected_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.SensorProto.sampling_period_selected)
}

// repeated float batching_period_ms = 5;
inline int SensorDeviceProto_SensorProto::batching_period_ms_size() const {
  return batching_period_ms_.size();
}
inline void SensorDeviceProto_SensorProto::clear_batching_period_ms() {
  batching_period_ms_.Clear();
}
inline float SensorDeviceProto_SensorProto::batching_period_ms(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.SensorProto.batching_period_ms)
  return batching_period_ms_.Get(index);
}
inline void SensorDeviceProto_SensorProto::set_batching_period_ms(int index, float value) {
  batching_period_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.SensorProto.batching_period_ms)
}
inline void SensorDeviceProto_SensorProto::add_batching_period_ms(float value) {
  batching_period_ms_.Add(value);
  // @@protoc_insertion_point(field_add:android.service.SensorDeviceProto.SensorProto.batching_period_ms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SensorDeviceProto_SensorProto::batching_period_ms() const {
  // @@protoc_insertion_point(field_list:android.service.SensorDeviceProto.SensorProto.batching_period_ms)
  return batching_period_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SensorDeviceProto_SensorProto::mutable_batching_period_ms() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorDeviceProto.SensorProto.batching_period_ms)
  return &batching_period_ms_;
}

// optional float batching_period_selected = 6;
inline bool SensorDeviceProto_SensorProto::has_batching_period_selected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorDeviceProto_SensorProto::clear_batching_period_selected() {
  batching_period_selected_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SensorDeviceProto_SensorProto::batching_period_selected() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.SensorProto.batching_period_selected)
  return batching_period_selected_;
}
inline void SensorDeviceProto_SensorProto::set_batching_period_selected(float value) {
  _has_bits_[0] |= 0x00000008u;
  batching_period_selected_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.SensorProto.batching_period_selected)
}

// -------------------------------------------------------------------

// SensorDeviceProto

// optional bool initialized = 1;
inline bool SensorDeviceProto::has_initialized() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorDeviceProto::clear_initialized() {
  initialized_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SensorDeviceProto::initialized() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.initialized)
  return initialized_;
}
inline void SensorDeviceProto::set_initialized(bool value) {
  _has_bits_[0] |= 0x00000001u;
  initialized_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.initialized)
}

// optional int32 total_sensors = 2;
inline bool SensorDeviceProto::has_total_sensors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorDeviceProto::clear_total_sensors() {
  total_sensors_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDeviceProto::total_sensors() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.total_sensors)
  return total_sensors_;
}
inline void SensorDeviceProto::set_total_sensors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_sensors_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.total_sensors)
}

// optional int32 active_sensors = 3;
inline bool SensorDeviceProto::has_active_sensors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorDeviceProto::clear_active_sensors() {
  active_sensors_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDeviceProto::active_sensors() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.active_sensors)
  return active_sensors_;
}
inline void SensorDeviceProto::set_active_sensors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  active_sensors_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDeviceProto.active_sensors)
}

// repeated .android.service.SensorDeviceProto.SensorProto sensors = 4;
inline int SensorDeviceProto::sensors_size() const {
  return sensors_.size();
}
inline void SensorDeviceProto::clear_sensors() {
  sensors_.Clear();
}
inline ::android::service::SensorDeviceProto_SensorProto* SensorDeviceProto::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorDeviceProto.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDeviceProto_SensorProto >*
SensorDeviceProto::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorDeviceProto.sensors)
  return &sensors_;
}
inline const ::android::service::SensorDeviceProto_SensorProto& SensorDeviceProto::sensors(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorDeviceProto.sensors)
  return sensors_.Get(index);
}
inline ::android::service::SensorDeviceProto_SensorProto* SensorDeviceProto::add_sensors() {
  // @@protoc_insertion_point(field_add:android.service.SensorDeviceProto.sensors)
  return sensors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDeviceProto_SensorProto >&
SensorDeviceProto::sensors() const {
  // @@protoc_insertion_point(field_list:android.service.SensorDeviceProto.sensors)
  return sensors_;
}

// -------------------------------------------------------------------

// SensorListProto_SensorProto

// optional int32 handle = 1;
inline bool SensorListProto_SensorProto::has_handle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorListProto_SensorProto::clear_handle() {
  handle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::handle() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.handle)
  return handle_;
}
inline void SensorListProto_SensorProto::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  handle_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.handle)
}

// optional string name = 2;
inline bool SensorListProto_SensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorListProto_SensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorListProto_SensorProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.name)
  return name_.GetNoArena();
}
inline void SensorListProto_SensorProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.name)
}
inline void SensorListProto_SensorProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorListProto.SensorProto.name)
}
inline void SensorListProto_SensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorListProto.SensorProto.name)
}
inline void SensorListProto_SensorProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorListProto.SensorProto.name)
}
inline std::string* SensorListProto_SensorProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorListProto.SensorProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorListProto_SensorProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.SensorListProto.SensorProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorListProto_SensorProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorListProto.SensorProto.name)
}

// optional string vendor = 3;
inline bool SensorListProto_SensorProto::has_vendor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorListProto_SensorProto::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SensorListProto_SensorProto::vendor() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.vendor)
  return vendor_.GetNoArena();
}
inline void SensorListProto_SensorProto::set_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.vendor)
}
inline void SensorListProto_SensorProto::set_vendor(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorListProto.SensorProto.vendor)
}
inline void SensorListProto_SensorProto::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorListProto.SensorProto.vendor)
}
inline void SensorListProto_SensorProto::set_vendor(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorListProto.SensorProto.vendor)
}
inline std::string* SensorListProto_SensorProto::mutable_vendor() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorListProto.SensorProto.vendor)
  return vendor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorListProto_SensorProto::release_vendor() {
  // @@protoc_insertion_point(field_release:android.service.SensorListProto.SensorProto.vendor)
  if (!has_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vendor_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorListProto_SensorProto::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vendor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorListProto.SensorProto.vendor)
}

// optional int32 version = 4;
inline bool SensorListProto_SensorProto::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorListProto_SensorProto::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::version() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.version)
  return version_;
}
inline void SensorListProto_SensorProto::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  version_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.version)
}

// optional string string_type = 5;
inline bool SensorListProto_SensorProto::has_string_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorListProto_SensorProto::clear_string_type() {
  string_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SensorListProto_SensorProto::string_type() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.string_type)
  return string_type_.GetNoArena();
}
inline void SensorListProto_SensorProto::set_string_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  string_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.string_type)
}
inline void SensorListProto_SensorProto::set_string_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  string_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorListProto.SensorProto.string_type)
}
inline void SensorListProto_SensorProto::set_string_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  string_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorListProto.SensorProto.string_type)
}
inline void SensorListProto_SensorProto::set_string_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  string_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorListProto.SensorProto.string_type)
}
inline std::string* SensorListProto_SensorProto::mutable_string_type() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorListProto.SensorProto.string_type)
  return string_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorListProto_SensorProto::release_string_type() {
  // @@protoc_insertion_point(field_release:android.service.SensorListProto.SensorProto.string_type)
  if (!has_string_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return string_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorListProto_SensorProto::set_allocated_string_type(std::string* string_type) {
  if (string_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  string_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_type);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorListProto.SensorProto.string_type)
}

// optional int32 type = 6;
inline bool SensorListProto_SensorProto::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorListProto_SensorProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::type() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.type)
  return type_;
}
inline void SensorListProto_SensorProto::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.type)
}

// optional string required_permission = 7;
inline bool SensorListProto_SensorProto::has_required_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorListProto_SensorProto::clear_required_permission() {
  required_permission_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SensorListProto_SensorProto::required_permission() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.required_permission)
  return required_permission_.GetNoArena();
}
inline void SensorListProto_SensorProto::set_required_permission(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  required_permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.required_permission)
}
inline void SensorListProto_SensorProto::set_required_permission(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  required_permission_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorListProto.SensorProto.required_permission)
}
inline void SensorListProto_SensorProto::set_required_permission(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  required_permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorListProto.SensorProto.required_permission)
}
inline void SensorListProto_SensorProto::set_required_permission(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  required_permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorListProto.SensorProto.required_permission)
}
inline std::string* SensorListProto_SensorProto::mutable_required_permission() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorListProto.SensorProto.required_permission)
  return required_permission_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorListProto_SensorProto::release_required_permission() {
  // @@protoc_insertion_point(field_release:android.service.SensorListProto.SensorProto.required_permission)
  if (!has_required_permission()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return required_permission_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorListProto_SensorProto::set_allocated_required_permission(std::string* required_permission) {
  if (required_permission != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  required_permission_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), required_permission);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorListProto.SensorProto.required_permission)
}

// optional int32 flags = 8;
inline bool SensorListProto_SensorProto::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorListProto_SensorProto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::flags() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.flags)
  return flags_;
}
inline void SensorListProto_SensorProto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.flags)
}

// optional .android.service.SensorListProto.ReportingModeEnum reporting_mode = 9;
inline bool SensorListProto_SensorProto::has_reporting_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorListProto_SensorProto::clear_reporting_mode() {
  reporting_mode_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::service::SensorListProto_ReportingModeEnum SensorListProto_SensorProto::reporting_mode() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.reporting_mode)
  return static_cast< ::android::service::SensorListProto_ReportingModeEnum >(reporting_mode_);
}
inline void SensorListProto_SensorProto::set_reporting_mode(::android::service::SensorListProto_ReportingModeEnum value) {
  assert(::android::service::SensorListProto_ReportingModeEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  reporting_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.reporting_mode)
}

// optional int32 max_delay_us = 10;
inline bool SensorListProto_SensorProto::has_max_delay_us() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorListProto_SensorProto::clear_max_delay_us() {
  max_delay_us_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::max_delay_us() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.max_delay_us)
  return max_delay_us_;
}
inline void SensorListProto_SensorProto::set_max_delay_us(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  max_delay_us_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.max_delay_us)
}

// optional int32 min_delay_us = 11;
inline bool SensorListProto_SensorProto::has_min_delay_us() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SensorListProto_SensorProto::clear_min_delay_us() {
  min_delay_us_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::min_delay_us() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.min_delay_us)
  return min_delay_us_;
}
inline void SensorListProto_SensorProto::set_min_delay_us(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  min_delay_us_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.min_delay_us)
}

// optional int32 fifo_max_event_count = 12;
inline bool SensorListProto_SensorProto::has_fifo_max_event_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SensorListProto_SensorProto::clear_fifo_max_event_count() {
  fifo_max_event_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::fifo_max_event_count() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.fifo_max_event_count)
  return fifo_max_event_count_;
}
inline void SensorListProto_SensorProto::set_fifo_max_event_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  fifo_max_event_count_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.fifo_max_event_count)
}

// optional int32 fifo_reserved_event_count = 13;
inline bool SensorListProto_SensorProto::has_fifo_reserved_event_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SensorListProto_SensorProto::clear_fifo_reserved_event_count() {
  fifo_reserved_event_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::fifo_reserved_event_count() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.fifo_reserved_event_count)
  return fifo_reserved_event_count_;
}
inline void SensorListProto_SensorProto::set_fifo_reserved_event_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  fifo_reserved_event_count_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.fifo_reserved_event_count)
}

// optional bool is_wakeup = 14;
inline bool SensorListProto_SensorProto::has_is_wakeup() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SensorListProto_SensorProto::clear_is_wakeup() {
  is_wakeup_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool SensorListProto_SensorProto::is_wakeup() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.is_wakeup)
  return is_wakeup_;
}
inline void SensorListProto_SensorProto::set_is_wakeup(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_wakeup_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.is_wakeup)
}

// optional bool data_injection_supported = 15;
inline bool SensorListProto_SensorProto::has_data_injection_supported() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SensorListProto_SensorProto::clear_data_injection_supported() {
  data_injection_supported_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool SensorListProto_SensorProto::data_injection_supported() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.data_injection_supported)
  return data_injection_supported_;
}
inline void SensorListProto_SensorProto::set_data_injection_supported(bool value) {
  _has_bits_[0] |= 0x00004000u;
  data_injection_supported_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.data_injection_supported)
}

// optional bool is_dynamic = 16;
inline bool SensorListProto_SensorProto::has_is_dynamic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SensorListProto_SensorProto::clear_is_dynamic() {
  is_dynamic_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool SensorListProto_SensorProto::is_dynamic() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.is_dynamic)
  return is_dynamic_;
}
inline void SensorListProto_SensorProto::set_is_dynamic(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_dynamic_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.is_dynamic)
}

// optional bool has_additional_info = 17;
inline bool SensorListProto_SensorProto::has_has_additional_info() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SensorListProto_SensorProto::clear_has_additional_info() {
  has_additional_info_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool SensorListProto_SensorProto::has_additional_info() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.has_additional_info)
  return has_additional_info_;
}
inline void SensorListProto_SensorProto::set_has_additional_info(bool value) {
  _has_bits_[0] |= 0x00010000u;
  has_additional_info_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.has_additional_info)
}

// optional int32 highest_rate_level = 18;
inline bool SensorListProto_SensorProto::has_highest_rate_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SensorListProto_SensorProto::clear_highest_rate_level() {
  highest_rate_level_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorListProto_SensorProto::highest_rate_level() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.highest_rate_level)
  return highest_rate_level_;
}
inline void SensorListProto_SensorProto::set_highest_rate_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  highest_rate_level_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.highest_rate_level)
}

// optional bool ashmem = 19;
inline bool SensorListProto_SensorProto::has_ashmem() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SensorListProto_SensorProto::clear_ashmem() {
  ashmem_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool SensorListProto_SensorProto::ashmem() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.ashmem)
  return ashmem_;
}
inline void SensorListProto_SensorProto::set_ashmem(bool value) {
  _has_bits_[0] |= 0x00040000u;
  ashmem_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.ashmem)
}

// optional bool gralloc = 20;
inline bool SensorListProto_SensorProto::has_gralloc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SensorListProto_SensorProto::clear_gralloc() {
  gralloc_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool SensorListProto_SensorProto::gralloc() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.gralloc)
  return gralloc_;
}
inline void SensorListProto_SensorProto::set_gralloc(bool value) {
  _has_bits_[0] |= 0x00080000u;
  gralloc_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.gralloc)
}

// optional float min_value = 21;
inline bool SensorListProto_SensorProto::has_min_value() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SensorListProto_SensorProto::clear_min_value() {
  min_value_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float SensorListProto_SensorProto::min_value() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.min_value)
  return min_value_;
}
inline void SensorListProto_SensorProto::set_min_value(float value) {
  _has_bits_[0] |= 0x00100000u;
  min_value_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.min_value)
}

// optional float max_value = 22;
inline bool SensorListProto_SensorProto::has_max_value() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SensorListProto_SensorProto::clear_max_value() {
  max_value_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float SensorListProto_SensorProto::max_value() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.max_value)
  return max_value_;
}
inline void SensorListProto_SensorProto::set_max_value(float value) {
  _has_bits_[0] |= 0x00200000u;
  max_value_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.max_value)
}

// optional float resolution = 23;
inline bool SensorListProto_SensorProto::has_resolution() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SensorListProto_SensorProto::clear_resolution() {
  resolution_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float SensorListProto_SensorProto::resolution() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.resolution)
  return resolution_;
}
inline void SensorListProto_SensorProto::set_resolution(float value) {
  _has_bits_[0] |= 0x00400000u;
  resolution_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.resolution)
}

// optional float power_usage = 24;
inline bool SensorListProto_SensorProto::has_power_usage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SensorListProto_SensorProto::clear_power_usage() {
  power_usage_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float SensorListProto_SensorProto::power_usage() const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.SensorProto.power_usage)
  return power_usage_;
}
inline void SensorListProto_SensorProto::set_power_usage(float value) {
  _has_bits_[0] |= 0x00800000u;
  power_usage_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorListProto.SensorProto.power_usage)
}

// -------------------------------------------------------------------

// SensorListProto

// repeated .android.service.SensorListProto.SensorProto sensors = 1;
inline int SensorListProto::sensors_size() const {
  return sensors_.size();
}
inline void SensorListProto::clear_sensors() {
  sensors_.Clear();
}
inline ::android::service::SensorListProto_SensorProto* SensorListProto::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorListProto.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorListProto_SensorProto >*
SensorListProto::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorListProto.sensors)
  return &sensors_;
}
inline const ::android::service::SensorListProto_SensorProto& SensorListProto::sensors(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorListProto.sensors)
  return sensors_.Get(index);
}
inline ::android::service::SensorListProto_SensorProto* SensorListProto::add_sensors() {
  // @@protoc_insertion_point(field_add:android.service.SensorListProto.sensors)
  return sensors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorListProto_SensorProto >&
SensorListProto::sensors() const {
  // @@protoc_insertion_point(field_list:android.service.SensorListProto.sensors)
  return sensors_;
}

// -------------------------------------------------------------------

// SensorFusionProto_FusionProto

// optional bool enabled = 1;
inline bool SensorFusionProto_FusionProto::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SensorFusionProto_FusionProto::enabled() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.enabled)
  return enabled_;
}
inline void SensorFusionProto_FusionProto::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.enabled)
}

// optional int32 num_clients = 2;
inline bool SensorFusionProto_FusionProto::has_num_clients() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_num_clients() {
  num_clients_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorFusionProto_FusionProto::num_clients() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.num_clients)
  return num_clients_;
}
inline void SensorFusionProto_FusionProto::set_num_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_clients_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.num_clients)
}

// optional float estimated_gyro_rate = 3;
inline bool SensorFusionProto_FusionProto::has_estimated_gyro_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_estimated_gyro_rate() {
  estimated_gyro_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SensorFusionProto_FusionProto::estimated_gyro_rate() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.estimated_gyro_rate)
  return estimated_gyro_rate_;
}
inline void SensorFusionProto_FusionProto::set_estimated_gyro_rate(float value) {
  _has_bits_[0] |= 0x00000004u;
  estimated_gyro_rate_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.estimated_gyro_rate)
}

// optional float attitude_x = 4;
inline bool SensorFusionProto_FusionProto::has_attitude_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_attitude_x() {
  attitude_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SensorFusionProto_FusionProto::attitude_x() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.attitude_x)
  return attitude_x_;
}
inline void SensorFusionProto_FusionProto::set_attitude_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  attitude_x_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.attitude_x)
}

// optional float attitude_y = 5;
inline bool SensorFusionProto_FusionProto::has_attitude_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_attitude_y() {
  attitude_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SensorFusionProto_FusionProto::attitude_y() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.attitude_y)
  return attitude_y_;
}
inline void SensorFusionProto_FusionProto::set_attitude_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  attitude_y_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.attitude_y)
}

// optional float attitude_z = 6;
inline bool SensorFusionProto_FusionProto::has_attitude_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_attitude_z() {
  attitude_z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SensorFusionProto_FusionProto::attitude_z() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.attitude_z)
  return attitude_z_;
}
inline void SensorFusionProto_FusionProto::set_attitude_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  attitude_z_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.attitude_z)
}

// optional float attitude_w = 7;
inline bool SensorFusionProto_FusionProto::has_attitude_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_attitude_w() {
  attitude_w_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SensorFusionProto_FusionProto::attitude_w() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.attitude_w)
  return attitude_w_;
}
inline void SensorFusionProto_FusionProto::set_attitude_w(float value) {
  _has_bits_[0] |= 0x00000040u;
  attitude_w_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.attitude_w)
}

// optional float attitude_length = 8;
inline bool SensorFusionProto_FusionProto::has_attitude_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_attitude_length() {
  attitude_length_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SensorFusionProto_FusionProto::attitude_length() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.attitude_length)
  return attitude_length_;
}
inline void SensorFusionProto_FusionProto::set_attitude_length(float value) {
  _has_bits_[0] |= 0x00000080u;
  attitude_length_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.attitude_length)
}

// optional float bias_x = 9;
inline bool SensorFusionProto_FusionProto::has_bias_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_bias_x() {
  bias_x_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float SensorFusionProto_FusionProto::bias_x() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.bias_x)
  return bias_x_;
}
inline void SensorFusionProto_FusionProto::set_bias_x(float value) {
  _has_bits_[0] |= 0x00000100u;
  bias_x_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.bias_x)
}

// optional float bias_y = 10;
inline bool SensorFusionProto_FusionProto::has_bias_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_bias_y() {
  bias_y_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float SensorFusionProto_FusionProto::bias_y() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.bias_y)
  return bias_y_;
}
inline void SensorFusionProto_FusionProto::set_bias_y(float value) {
  _has_bits_[0] |= 0x00000200u;
  bias_y_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.bias_y)
}

// optional float bias_z = 11;
inline bool SensorFusionProto_FusionProto::has_bias_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SensorFusionProto_FusionProto::clear_bias_z() {
  bias_z_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float SensorFusionProto_FusionProto::bias_z() const {
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.FusionProto.bias_z)
  return bias_z_;
}
inline void SensorFusionProto_FusionProto::set_bias_z(float value) {
  _has_bits_[0] |= 0x00000400u;
  bias_z_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorFusionProto.FusionProto.bias_z)
}

// -------------------------------------------------------------------

// SensorFusionProto

// optional .android.service.SensorFusionProto.FusionProto fusion_9axis = 1;
inline bool SensorFusionProto::has_fusion_9axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorFusionProto::clear_fusion_9axis() {
  if (fusion_9axis_ != nullptr) fusion_9axis_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::SensorFusionProto_FusionProto& SensorFusionProto::fusion_9axis() const {
  const ::android::service::SensorFusionProto_FusionProto* p = fusion_9axis_;
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.fusion_9axis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::SensorFusionProto_FusionProto*>(
      &::android::service::_SensorFusionProto_FusionProto_default_instance_);
}
inline ::android::service::SensorFusionProto_FusionProto* SensorFusionProto::release_fusion_9axis() {
  // @@protoc_insertion_point(field_release:android.service.SensorFusionProto.fusion_9axis)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::SensorFusionProto_FusionProto* temp = fusion_9axis_;
  fusion_9axis_ = nullptr;
  return temp;
}
inline ::android::service::SensorFusionProto_FusionProto* SensorFusionProto::mutable_fusion_9axis() {
  _has_bits_[0] |= 0x00000001u;
  if (fusion_9axis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::SensorFusionProto_FusionProto>(GetArenaNoVirtual());
    fusion_9axis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.SensorFusionProto.fusion_9axis)
  return fusion_9axis_;
}
inline void SensorFusionProto::set_allocated_fusion_9axis(::android::service::SensorFusionProto_FusionProto* fusion_9axis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fusion_9axis_;
  }
  if (fusion_9axis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fusion_9axis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fusion_9axis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fusion_9axis_ = fusion_9axis;
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorFusionProto.fusion_9axis)
}

// optional .android.service.SensorFusionProto.FusionProto fusion_nomag = 2;
inline bool SensorFusionProto::has_fusion_nomag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorFusionProto::clear_fusion_nomag() {
  if (fusion_nomag_ != nullptr) fusion_nomag_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::service::SensorFusionProto_FusionProto& SensorFusionProto::fusion_nomag() const {
  const ::android::service::SensorFusionProto_FusionProto* p = fusion_nomag_;
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.fusion_nomag)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::SensorFusionProto_FusionProto*>(
      &::android::service::_SensorFusionProto_FusionProto_default_instance_);
}
inline ::android::service::SensorFusionProto_FusionProto* SensorFusionProto::release_fusion_nomag() {
  // @@protoc_insertion_point(field_release:android.service.SensorFusionProto.fusion_nomag)
  _has_bits_[0] &= ~0x00000002u;
  ::android::service::SensorFusionProto_FusionProto* temp = fusion_nomag_;
  fusion_nomag_ = nullptr;
  return temp;
}
inline ::android::service::SensorFusionProto_FusionProto* SensorFusionProto::mutable_fusion_nomag() {
  _has_bits_[0] |= 0x00000002u;
  if (fusion_nomag_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::SensorFusionProto_FusionProto>(GetArenaNoVirtual());
    fusion_nomag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.SensorFusionProto.fusion_nomag)
  return fusion_nomag_;
}
inline void SensorFusionProto::set_allocated_fusion_nomag(::android::service::SensorFusionProto_FusionProto* fusion_nomag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fusion_nomag_;
  }
  if (fusion_nomag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fusion_nomag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fusion_nomag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fusion_nomag_ = fusion_nomag;
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorFusionProto.fusion_nomag)
}

// optional .android.service.SensorFusionProto.FusionProto fusion_nogyro = 3;
inline bool SensorFusionProto::has_fusion_nogyro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorFusionProto::clear_fusion_nogyro() {
  if (fusion_nogyro_ != nullptr) fusion_nogyro_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::service::SensorFusionProto_FusionProto& SensorFusionProto::fusion_nogyro() const {
  const ::android::service::SensorFusionProto_FusionProto* p = fusion_nogyro_;
  // @@protoc_insertion_point(field_get:android.service.SensorFusionProto.fusion_nogyro)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::SensorFusionProto_FusionProto*>(
      &::android::service::_SensorFusionProto_FusionProto_default_instance_);
}
inline ::android::service::SensorFusionProto_FusionProto* SensorFusionProto::release_fusion_nogyro() {
  // @@protoc_insertion_point(field_release:android.service.SensorFusionProto.fusion_nogyro)
  _has_bits_[0] &= ~0x00000004u;
  ::android::service::SensorFusionProto_FusionProto* temp = fusion_nogyro_;
  fusion_nogyro_ = nullptr;
  return temp;
}
inline ::android::service::SensorFusionProto_FusionProto* SensorFusionProto::mutable_fusion_nogyro() {
  _has_bits_[0] |= 0x00000004u;
  if (fusion_nogyro_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::SensorFusionProto_FusionProto>(GetArenaNoVirtual());
    fusion_nogyro_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.SensorFusionProto.fusion_nogyro)
  return fusion_nogyro_;
}
inline void SensorFusionProto::set_allocated_fusion_nogyro(::android::service::SensorFusionProto_FusionProto* fusion_nogyro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fusion_nogyro_;
  }
  if (fusion_nogyro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fusion_nogyro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fusion_nogyro, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fusion_nogyro_ = fusion_nogyro;
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorFusionProto.fusion_nogyro)
}

// -------------------------------------------------------------------

// SensorEventsProto_Event

// optional float timestamp_sec = 1;
inline bool SensorEventsProto_Event::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorEventsProto_Event::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SensorEventsProto_Event::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.Event.timestamp_sec)
  return timestamp_sec_;
}
inline void SensorEventsProto_Event::set_timestamp_sec(float value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventsProto.Event.timestamp_sec)
}

// optional int64 wall_timestamp_ms = 2;
inline bool SensorEventsProto_Event::has_wall_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorEventsProto_Event::clear_wall_timestamp_ms() {
  wall_timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorEventsProto_Event::wall_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.Event.wall_timestamp_ms)
  return wall_timestamp_ms_;
}
inline void SensorEventsProto_Event::set_wall_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  wall_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventsProto.Event.wall_timestamp_ms)
}

// optional bool masked = 3;
inline bool SensorEventsProto_Event::has_masked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorEventsProto_Event::clear_masked() {
  masked_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SensorEventsProto_Event::masked() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.Event.masked)
  return masked_;
}
inline void SensorEventsProto_Event::set_masked(bool value) {
  _has_bits_[0] |= 0x00000004u;
  masked_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventsProto.Event.masked)
}

// optional int64 int64_data = 4;
inline bool SensorEventsProto_Event::has_int64_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorEventsProto_Event::clear_int64_data() {
  int64_data_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorEventsProto_Event::int64_data() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.Event.int64_data)
  return int64_data_;
}
inline void SensorEventsProto_Event::set_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  int64_data_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventsProto.Event.int64_data)
}

// repeated float float_array = 5;
inline int SensorEventsProto_Event::float_array_size() const {
  return float_array_.size();
}
inline void SensorEventsProto_Event::clear_float_array() {
  float_array_.Clear();
}
inline float SensorEventsProto_Event::float_array(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.Event.float_array)
  return float_array_.Get(index);
}
inline void SensorEventsProto_Event::set_float_array(int index, float value) {
  float_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.service.SensorEventsProto.Event.float_array)
}
inline void SensorEventsProto_Event::add_float_array(float value) {
  float_array_.Add(value);
  // @@protoc_insertion_point(field_add:android.service.SensorEventsProto.Event.float_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SensorEventsProto_Event::float_array() const {
  // @@protoc_insertion_point(field_list:android.service.SensorEventsProto.Event.float_array)
  return float_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SensorEventsProto_Event::mutable_float_array() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorEventsProto.Event.float_array)
  return &float_array_;
}

// -------------------------------------------------------------------

// SensorEventsProto_RecentEventsLog

// optional string name = 1 [(.android.privacy) = {
inline bool SensorEventsProto_RecentEventsLog::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorEventsProto_RecentEventsLog::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorEventsProto_RecentEventsLog::name() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.RecentEventsLog.name)
  return name_.GetNoArena();
}
inline void SensorEventsProto_RecentEventsLog::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorEventsProto.RecentEventsLog.name)
}
inline void SensorEventsProto_RecentEventsLog::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorEventsProto.RecentEventsLog.name)
}
inline void SensorEventsProto_RecentEventsLog::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorEventsProto.RecentEventsLog.name)
}
inline void SensorEventsProto_RecentEventsLog::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorEventsProto.RecentEventsLog.name)
}
inline std::string* SensorEventsProto_RecentEventsLog::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorEventsProto.RecentEventsLog.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorEventsProto_RecentEventsLog::release_name() {
  // @@protoc_insertion_point(field_release:android.service.SensorEventsProto.RecentEventsLog.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorEventsProto_RecentEventsLog::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorEventsProto.RecentEventsLog.name)
}

// optional int32 recent_events_count = 2;
inline bool SensorEventsProto_RecentEventsLog::has_recent_events_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorEventsProto_RecentEventsLog::clear_recent_events_count() {
  recent_events_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventsProto_RecentEventsLog::recent_events_count() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.RecentEventsLog.recent_events_count)
  return recent_events_count_;
}
inline void SensorEventsProto_RecentEventsLog::set_recent_events_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  recent_events_count_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventsProto.RecentEventsLog.recent_events_count)
}

// repeated .android.service.SensorEventsProto.Event events = 3;
inline int SensorEventsProto_RecentEventsLog::events_size() const {
  return events_.size();
}
inline void SensorEventsProto_RecentEventsLog::clear_events() {
  events_.Clear();
}
inline ::android::service::SensorEventsProto_Event* SensorEventsProto_RecentEventsLog::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorEventsProto.RecentEventsLog.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_Event >*
SensorEventsProto_RecentEventsLog::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorEventsProto.RecentEventsLog.events)
  return &events_;
}
inline const ::android::service::SensorEventsProto_Event& SensorEventsProto_RecentEventsLog::events(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.RecentEventsLog.events)
  return events_.Get(index);
}
inline ::android::service::SensorEventsProto_Event* SensorEventsProto_RecentEventsLog::add_events() {
  // @@protoc_insertion_point(field_add:android.service.SensorEventsProto.RecentEventsLog.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_Event >&
SensorEventsProto_RecentEventsLog::events() const {
  // @@protoc_insertion_point(field_list:android.service.SensorEventsProto.RecentEventsLog.events)
  return events_;
}

// -------------------------------------------------------------------

// SensorEventsProto

// repeated .android.service.SensorEventsProto.RecentEventsLog recent_events_logs = 1;
inline int SensorEventsProto::recent_events_logs_size() const {
  return recent_events_logs_.size();
}
inline void SensorEventsProto::clear_recent_events_logs() {
  recent_events_logs_.Clear();
}
inline ::android::service::SensorEventsProto_RecentEventsLog* SensorEventsProto::mutable_recent_events_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorEventsProto.recent_events_logs)
  return recent_events_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_RecentEventsLog >*
SensorEventsProto::mutable_recent_events_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorEventsProto.recent_events_logs)
  return &recent_events_logs_;
}
inline const ::android::service::SensorEventsProto_RecentEventsLog& SensorEventsProto::recent_events_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventsProto.recent_events_logs)
  return recent_events_logs_.Get(index);
}
inline ::android::service::SensorEventsProto_RecentEventsLog* SensorEventsProto::add_recent_events_logs() {
  // @@protoc_insertion_point(field_add:android.service.SensorEventsProto.recent_events_logs)
  return recent_events_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventsProto_RecentEventsLog >&
SensorEventsProto::recent_events_logs() const {
  // @@protoc_insertion_point(field_list:android.service.SensorEventsProto.recent_events_logs)
  return recent_events_logs_;
}

// -------------------------------------------------------------------

// ActiveSensorProto

// optional string name = 1;
inline bool ActiveSensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveSensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActiveSensorProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.ActiveSensorProto.name)
  return name_.GetNoArena();
}
inline void ActiveSensorProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.ActiveSensorProto.name)
}
inline void ActiveSensorProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.ActiveSensorProto.name)
}
inline void ActiveSensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.ActiveSensorProto.name)
}
inline void ActiveSensorProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.ActiveSensorProto.name)
}
inline std::string* ActiveSensorProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.ActiveSensorProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActiveSensorProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.ActiveSensorProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveSensorProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.ActiveSensorProto.name)
}

// optional int32 handle = 2;
inline bool ActiveSensorProto::has_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveSensorProto::clear_handle() {
  handle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveSensorProto::handle() const {
  // @@protoc_insertion_point(field_get:android.service.ActiveSensorProto.handle)
  return handle_;
}
inline void ActiveSensorProto::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  handle_ = value;
  // @@protoc_insertion_point(field_set:android.service.ActiveSensorProto.handle)
}

// optional int32 num_connections = 3;
inline bool ActiveSensorProto::has_num_connections() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveSensorProto::clear_num_connections() {
  num_connections_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveSensorProto::num_connections() const {
  // @@protoc_insertion_point(field_get:android.service.ActiveSensorProto.num_connections)
  return num_connections_;
}
inline void ActiveSensorProto::set_num_connections(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_connections_ = value;
  // @@protoc_insertion_point(field_set:android.service.ActiveSensorProto.num_connections)
}

// -------------------------------------------------------------------

// SensorDirectConnectionProto_SensorProto

// optional int32 sensor = 1;
inline bool SensorDirectConnectionProto_SensorProto::has_sensor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorDirectConnectionProto_SensorProto::clear_sensor() {
  sensor_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDirectConnectionProto_SensorProto::sensor() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDirectConnectionProto.SensorProto.sensor)
  return sensor_;
}
inline void SensorDirectConnectionProto_SensorProto::set_sensor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDirectConnectionProto.SensorProto.sensor)
}

// optional int32 rate = 2;
inline bool SensorDirectConnectionProto_SensorProto::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorDirectConnectionProto_SensorProto::clear_rate() {
  rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDirectConnectionProto_SensorProto::rate() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDirectConnectionProto.SensorProto.rate)
  return rate_;
}
inline void SensorDirectConnectionProto_SensorProto::set_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  rate_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDirectConnectionProto.SensorProto.rate)
}

// -------------------------------------------------------------------

// SensorDirectConnectionProto

// optional string package_name = 1;
inline bool SensorDirectConnectionProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorDirectConnectionProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorDirectConnectionProto::package_name() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDirectConnectionProto.package_name)
  return package_name_.GetNoArena();
}
inline void SensorDirectConnectionProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorDirectConnectionProto.package_name)
}
inline void SensorDirectConnectionProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorDirectConnectionProto.package_name)
}
inline void SensorDirectConnectionProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorDirectConnectionProto.package_name)
}
inline void SensorDirectConnectionProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorDirectConnectionProto.package_name)
}
inline std::string* SensorDirectConnectionProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorDirectConnectionProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorDirectConnectionProto::release_package_name() {
  // @@protoc_insertion_point(field_release:android.service.SensorDirectConnectionProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDirectConnectionProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorDirectConnectionProto.package_name)
}

// optional int32 hal_channel_handle = 2;
inline bool SensorDirectConnectionProto::has_hal_channel_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorDirectConnectionProto::clear_hal_channel_handle() {
  hal_channel_handle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDirectConnectionProto::hal_channel_handle() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDirectConnectionProto.hal_channel_handle)
  return hal_channel_handle_;
}
inline void SensorDirectConnectionProto::set_hal_channel_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  hal_channel_handle_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDirectConnectionProto.hal_channel_handle)
}

// optional int32 num_sensor_activated = 3;
inline bool SensorDirectConnectionProto::has_num_sensor_activated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorDirectConnectionProto::clear_num_sensor_activated() {
  num_sensor_activated_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorDirectConnectionProto::num_sensor_activated() const {
  // @@protoc_insertion_point(field_get:android.service.SensorDirectConnectionProto.num_sensor_activated)
  return num_sensor_activated_;
}
inline void SensorDirectConnectionProto::set_num_sensor_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_sensor_activated_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorDirectConnectionProto.num_sensor_activated)
}

// repeated .android.service.SensorDirectConnectionProto.SensorProto sensors = 4;
inline int SensorDirectConnectionProto::sensors_size() const {
  return sensors_.size();
}
inline void SensorDirectConnectionProto::clear_sensors() {
  sensors_.Clear();
}
inline ::android::service::SensorDirectConnectionProto_SensorProto* SensorDirectConnectionProto::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorDirectConnectionProto.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto_SensorProto >*
SensorDirectConnectionProto::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorDirectConnectionProto.sensors)
  return &sensors_;
}
inline const ::android::service::SensorDirectConnectionProto_SensorProto& SensorDirectConnectionProto::sensors(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorDirectConnectionProto.sensors)
  return sensors_.Get(index);
}
inline ::android::service::SensorDirectConnectionProto_SensorProto* SensorDirectConnectionProto::add_sensors() {
  // @@protoc_insertion_point(field_add:android.service.SensorDirectConnectionProto.sensors)
  return sensors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorDirectConnectionProto_SensorProto >&
SensorDirectConnectionProto::sensors() const {
  // @@protoc_insertion_point(field_list:android.service.SensorDirectConnectionProto.sensors)
  return sensors_;
}

// -------------------------------------------------------------------

// SensorEventConnectionProto_FlushInfoProto

// optional string sensor_name = 1;
inline bool SensorEventConnectionProto_FlushInfoProto::has_sensor_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorEventConnectionProto_FlushInfoProto::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorEventConnectionProto_FlushInfoProto::sensor_name() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
  return sensor_name_.GetNoArena();
}
inline void SensorEventConnectionProto_FlushInfoProto::set_sensor_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
}
inline void SensorEventConnectionProto_FlushInfoProto::set_sensor_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
}
inline void SensorEventConnectionProto_FlushInfoProto::set_sensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
}
inline void SensorEventConnectionProto_FlushInfoProto::set_sensor_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
}
inline std::string* SensorEventConnectionProto_FlushInfoProto::mutable_sensor_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
  return sensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorEventConnectionProto_FlushInfoProto::release_sensor_name() {
  // @@protoc_insertion_point(field_release:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
  if (!has_sensor_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sensor_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorEventConnectionProto_FlushInfoProto::set_allocated_sensor_name(std::string* sensor_name) {
  if (sensor_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_name)
}

// optional int32 sensor_handle = 2;
inline bool SensorEventConnectionProto_FlushInfoProto::has_sensor_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorEventConnectionProto_FlushInfoProto::clear_sensor_handle() {
  sensor_handle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto_FlushInfoProto::sensor_handle() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_handle)
  return sensor_handle_;
}
inline void SensorEventConnectionProto_FlushInfoProto::set_sensor_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sensor_handle_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.FlushInfoProto.sensor_handle)
}

// optional bool first_flush_pending = 3;
inline bool SensorEventConnectionProto_FlushInfoProto::has_first_flush_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorEventConnectionProto_FlushInfoProto::clear_first_flush_pending() {
  first_flush_pending_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SensorEventConnectionProto_FlushInfoProto::first_flush_pending() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.FlushInfoProto.first_flush_pending)
  return first_flush_pending_;
}
inline void SensorEventConnectionProto_FlushInfoProto::set_first_flush_pending(bool value) {
  _has_bits_[0] |= 0x00000004u;
  first_flush_pending_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.FlushInfoProto.first_flush_pending)
}

// optional int32 pending_flush_events_to_send = 4;
inline bool SensorEventConnectionProto_FlushInfoProto::has_pending_flush_events_to_send() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorEventConnectionProto_FlushInfoProto::clear_pending_flush_events_to_send() {
  pending_flush_events_to_send_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto_FlushInfoProto::pending_flush_events_to_send() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.FlushInfoProto.pending_flush_events_to_send)
  return pending_flush_events_to_send_;
}
inline void SensorEventConnectionProto_FlushInfoProto::set_pending_flush_events_to_send(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pending_flush_events_to_send_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.FlushInfoProto.pending_flush_events_to_send)
}

// -------------------------------------------------------------------

// SensorEventConnectionProto

// optional .android.service.SensorEventConnectionProto.OperatingModeEnum operating_mode = 1;
inline bool SensorEventConnectionProto::has_operating_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorEventConnectionProto::clear_operating_mode() {
  operating_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::service::SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto::operating_mode() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.operating_mode)
  return static_cast< ::android::service::SensorEventConnectionProto_OperatingModeEnum >(operating_mode_);
}
inline void SensorEventConnectionProto::set_operating_mode(::android::service::SensorEventConnectionProto_OperatingModeEnum value) {
  assert(::android::service::SensorEventConnectionProto_OperatingModeEnum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  operating_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.operating_mode)
}

// optional string package_name = 2;
inline bool SensorEventConnectionProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorEventConnectionProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorEventConnectionProto::package_name() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.package_name)
  return package_name_.GetNoArena();
}
inline void SensorEventConnectionProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.package_name)
}
inline void SensorEventConnectionProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorEventConnectionProto.package_name)
}
inline void SensorEventConnectionProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorEventConnectionProto.package_name)
}
inline void SensorEventConnectionProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorEventConnectionProto.package_name)
}
inline std::string* SensorEventConnectionProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorEventConnectionProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorEventConnectionProto::release_package_name() {
  // @@protoc_insertion_point(field_release:android.service.SensorEventConnectionProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorEventConnectionProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorEventConnectionProto.package_name)
}

// optional int32 wake_lock_ref_count = 3;
inline bool SensorEventConnectionProto::has_wake_lock_ref_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorEventConnectionProto::clear_wake_lock_ref_count() {
  wake_lock_ref_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::wake_lock_ref_count() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.wake_lock_ref_count)
  return wake_lock_ref_count_;
}
inline void SensorEventConnectionProto::set_wake_lock_ref_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  wake_lock_ref_count_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.wake_lock_ref_count)
}

// optional int32 uid = 4;
inline bool SensorEventConnectionProto::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorEventConnectionProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::uid() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.uid)
  return uid_;
}
inline void SensorEventConnectionProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.uid)
}

// optional int32 cache_size = 5;
inline bool SensorEventConnectionProto::has_cache_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorEventConnectionProto::clear_cache_size() {
  cache_size_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::cache_size() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.cache_size)
  return cache_size_;
}
inline void SensorEventConnectionProto::set_cache_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  cache_size_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.cache_size)
}

// optional int32 max_cache_size = 6;
inline bool SensorEventConnectionProto::has_max_cache_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorEventConnectionProto::clear_max_cache_size() {
  max_cache_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::max_cache_size() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.max_cache_size)
  return max_cache_size_;
}
inline void SensorEventConnectionProto::set_max_cache_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_cache_size_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.max_cache_size)
}

// repeated .android.service.SensorEventConnectionProto.FlushInfoProto flush_infos = 7;
inline int SensorEventConnectionProto::flush_infos_size() const {
  return flush_infos_.size();
}
inline void SensorEventConnectionProto::clear_flush_infos() {
  flush_infos_.Clear();
}
inline ::android::service::SensorEventConnectionProto_FlushInfoProto* SensorEventConnectionProto::mutable_flush_infos(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorEventConnectionProto.flush_infos)
  return flush_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto_FlushInfoProto >*
SensorEventConnectionProto::mutable_flush_infos() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorEventConnectionProto.flush_infos)
  return &flush_infos_;
}
inline const ::android::service::SensorEventConnectionProto_FlushInfoProto& SensorEventConnectionProto::flush_infos(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.flush_infos)
  return flush_infos_.Get(index);
}
inline ::android::service::SensorEventConnectionProto_FlushInfoProto* SensorEventConnectionProto::add_flush_infos() {
  // @@protoc_insertion_point(field_add:android.service.SensorEventConnectionProto.flush_infos)
  return flush_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorEventConnectionProto_FlushInfoProto >&
SensorEventConnectionProto::flush_infos() const {
  // @@protoc_insertion_point(field_list:android.service.SensorEventConnectionProto.flush_infos)
  return flush_infos_;
}

// optional int32 events_received = 8;
inline bool SensorEventConnectionProto::has_events_received() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorEventConnectionProto::clear_events_received() {
  events_received_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::events_received() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.events_received)
  return events_received_;
}
inline void SensorEventConnectionProto::set_events_received(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  events_received_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.events_received)
}

// optional int32 events_sent = 9;
inline bool SensorEventConnectionProto::has_events_sent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorEventConnectionProto::clear_events_sent() {
  events_sent_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::events_sent() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.events_sent)
  return events_sent_;
}
inline void SensorEventConnectionProto::set_events_sent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  events_sent_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.events_sent)
}

// optional int32 events_cache = 10;
inline bool SensorEventConnectionProto::has_events_cache() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorEventConnectionProto::clear_events_cache() {
  events_cache_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::events_cache() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.events_cache)
  return events_cache_;
}
inline void SensorEventConnectionProto::set_events_cache(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  events_cache_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.events_cache)
}

// optional int32 events_dropped = 11;
inline bool SensorEventConnectionProto::has_events_dropped() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorEventConnectionProto::clear_events_dropped() {
  events_dropped_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::events_dropped() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.events_dropped)
  return events_dropped_;
}
inline void SensorEventConnectionProto::set_events_dropped(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  events_dropped_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.events_dropped)
}

// optional int32 total_acks_needed = 12;
inline bool SensorEventConnectionProto::has_total_acks_needed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SensorEventConnectionProto::clear_total_acks_needed() {
  total_acks_needed_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::total_acks_needed() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.total_acks_needed)
  return total_acks_needed_;
}
inline void SensorEventConnectionProto::set_total_acks_needed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  total_acks_needed_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.total_acks_needed)
}

// optional int32 total_acks_received = 13;
inline bool SensorEventConnectionProto::has_total_acks_received() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SensorEventConnectionProto::clear_total_acks_received() {
  total_acks_received_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorEventConnectionProto::total_acks_received() const {
  // @@protoc_insertion_point(field_get:android.service.SensorEventConnectionProto.total_acks_received)
  return total_acks_received_;
}
inline void SensorEventConnectionProto::set_total_acks_received(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  total_acks_received_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorEventConnectionProto.total_acks_received)
}

// -------------------------------------------------------------------

// SensorRegistrationInfoProto

// optional int64 timestamp_sec = 1;
inline bool SensorRegistrationInfoProto::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorRegistrationInfoProto::clear_timestamp_sec() {
  timestamp_sec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorRegistrationInfoProto::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.timestamp_sec)
  return timestamp_sec_;
}
inline void SensorRegistrationInfoProto::set_timestamp_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.timestamp_sec)
}

// optional int32 sensor_handle = 2;
inline bool SensorRegistrationInfoProto::has_sensor_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorRegistrationInfoProto::clear_sensor_handle() {
  sensor_handle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorRegistrationInfoProto::sensor_handle() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.sensor_handle)
  return sensor_handle_;
}
inline void SensorRegistrationInfoProto::set_sensor_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sensor_handle_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.sensor_handle)
}

// optional string package_name = 3;
inline bool SensorRegistrationInfoProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorRegistrationInfoProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorRegistrationInfoProto::package_name() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.package_name)
  return package_name_.GetNoArena();
}
inline void SensorRegistrationInfoProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.package_name)
}
inline void SensorRegistrationInfoProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.SensorRegistrationInfoProto.package_name)
}
inline void SensorRegistrationInfoProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.SensorRegistrationInfoProto.package_name)
}
inline void SensorRegistrationInfoProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.SensorRegistrationInfoProto.package_name)
}
inline std::string* SensorRegistrationInfoProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.SensorRegistrationInfoProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorRegistrationInfoProto::release_package_name() {
  // @@protoc_insertion_point(field_release:android.service.SensorRegistrationInfoProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorRegistrationInfoProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.SensorRegistrationInfoProto.package_name)
}

// optional int32 pid = 4;
inline bool SensorRegistrationInfoProto::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorRegistrationInfoProto::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorRegistrationInfoProto::pid() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.pid)
  return pid_;
}
inline void SensorRegistrationInfoProto::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.pid)
}

// optional int32 uid = 5;
inline bool SensorRegistrationInfoProto::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorRegistrationInfoProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorRegistrationInfoProto::uid() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.uid)
  return uid_;
}
inline void SensorRegistrationInfoProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.uid)
}

// optional int64 sampling_rate_us = 6;
inline bool SensorRegistrationInfoProto::has_sampling_rate_us() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorRegistrationInfoProto::clear_sampling_rate_us() {
  sampling_rate_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorRegistrationInfoProto::sampling_rate_us() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.sampling_rate_us)
  return sampling_rate_us_;
}
inline void SensorRegistrationInfoProto::set_sampling_rate_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  sampling_rate_us_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.sampling_rate_us)
}

// optional int64 max_report_latency_us = 7;
inline bool SensorRegistrationInfoProto::has_max_report_latency_us() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorRegistrationInfoProto::clear_max_report_latency_us() {
  max_report_latency_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorRegistrationInfoProto::max_report_latency_us() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.max_report_latency_us)
  return max_report_latency_us_;
}
inline void SensorRegistrationInfoProto::set_max_report_latency_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  max_report_latency_us_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.max_report_latency_us)
}

// optional bool activated = 8;
inline bool SensorRegistrationInfoProto::has_activated() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorRegistrationInfoProto::clear_activated() {
  activated_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SensorRegistrationInfoProto::activated() const {
  // @@protoc_insertion_point(field_get:android.service.SensorRegistrationInfoProto.activated)
  return activated_;
}
inline void SensorRegistrationInfoProto::set_activated(bool value) {
  _has_bits_[0] |= 0x00000040u;
  activated_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorRegistrationInfoProto.activated)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::service::SensorServiceProto_OperatingModeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::SensorServiceProto_OperatingModeEnum>() {
  return ::android::service::SensorServiceProto_OperatingModeEnum_descriptor();
}
template <> struct is_proto_enum< ::android::service::SensorListProto_ReportingModeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::SensorListProto_ReportingModeEnum>() {
  return ::android::service::SensorListProto_ReportingModeEnum_descriptor();
}
template <> struct is_proto_enum< ::android::service::SensorEventConnectionProto_OperatingModeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::SensorEventConnectionProto_OperatingModeEnum>() {
  return ::android::service::SensorEventConnectionProto_OperatingModeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto
