// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/nfc/card_emulation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/content/component_name.pb.h"
#include "frameworks/base/core/proto/android/nfc/apdu_service_info.pb.h"
#include "frameworks/base/core/proto/android/nfc/nfc_fservice_info.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
namespace com {
namespace android {
namespace nfc {
namespace cardemulation {
class AidRoutingManagerProto;
class AidRoutingManagerProtoDefaultTypeInternal;
extern AidRoutingManagerProtoDefaultTypeInternal _AidRoutingManagerProto_default_instance_;
class AidRoutingManagerProto_Route;
class AidRoutingManagerProto_RouteDefaultTypeInternal;
extern AidRoutingManagerProto_RouteDefaultTypeInternal _AidRoutingManagerProto_Route_default_instance_;
class CardEmulationManagerProto;
class CardEmulationManagerProtoDefaultTypeInternal;
extern CardEmulationManagerProtoDefaultTypeInternal _CardEmulationManagerProto_default_instance_;
class EnabledNfcFServicesProto;
class EnabledNfcFServicesProtoDefaultTypeInternal;
extern EnabledNfcFServicesProtoDefaultTypeInternal _EnabledNfcFServicesProto_default_instance_;
class HostEmulationManagerProto;
class HostEmulationManagerProtoDefaultTypeInternal;
extern HostEmulationManagerProtoDefaultTypeInternal _HostEmulationManagerProto_default_instance_;
class HostNfcFEmulationManagerProto;
class HostNfcFEmulationManagerProtoDefaultTypeInternal;
extern HostNfcFEmulationManagerProtoDefaultTypeInternal _HostNfcFEmulationManagerProto_default_instance_;
class PreferredServicesProto;
class PreferredServicesProtoDefaultTypeInternal;
extern PreferredServicesProtoDefaultTypeInternal _PreferredServicesProto_default_instance_;
class RegisteredAidCacheProto;
class RegisteredAidCacheProtoDefaultTypeInternal;
extern RegisteredAidCacheProtoDefaultTypeInternal _RegisteredAidCacheProto_default_instance_;
class RegisteredAidCacheProto_AidCacheEntry;
class RegisteredAidCacheProto_AidCacheEntryDefaultTypeInternal;
extern RegisteredAidCacheProto_AidCacheEntryDefaultTypeInternal _RegisteredAidCacheProto_AidCacheEntry_default_instance_;
class RegisteredNfcFServicesCacheProto;
class RegisteredNfcFServicesCacheProtoDefaultTypeInternal;
extern RegisteredNfcFServicesCacheProtoDefaultTypeInternal _RegisteredNfcFServicesCacheProto_default_instance_;
class RegisteredServicesCacheProto;
class RegisteredServicesCacheProtoDefaultTypeInternal;
extern RegisteredServicesCacheProtoDefaultTypeInternal _RegisteredServicesCacheProto_default_instance_;
class RegisteredT3tIdentifiersCacheProto;
class RegisteredT3tIdentifiersCacheProtoDefaultTypeInternal;
extern RegisteredT3tIdentifiersCacheProtoDefaultTypeInternal _RegisteredT3tIdentifiersCacheProto_default_instance_;
class SystemCodeRoutingManagerProto;
class SystemCodeRoutingManagerProtoDefaultTypeInternal;
extern SystemCodeRoutingManagerProtoDefaultTypeInternal _SystemCodeRoutingManagerProto_default_instance_;
class SystemCodeRoutingManagerProto_T3tIdentifier;
class SystemCodeRoutingManagerProto_T3tIdentifierDefaultTypeInternal;
extern SystemCodeRoutingManagerProto_T3tIdentifierDefaultTypeInternal _SystemCodeRoutingManagerProto_T3tIdentifier_default_instance_;
}  // namespace cardemulation
}  // namespace nfc
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::nfc::cardemulation::AidRoutingManagerProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::AidRoutingManagerProto>(Arena*);
template<> ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::AidRoutingManagerProto_Route>(Arena*);
template<> ::com::android::nfc::cardemulation::CardEmulationManagerProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::CardEmulationManagerProto>(Arena*);
template<> ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::EnabledNfcFServicesProto>(Arena*);
template<> ::com::android::nfc::cardemulation::HostEmulationManagerProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::HostEmulationManagerProto>(Arena*);
template<> ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto>(Arena*);
template<> ::com::android::nfc::cardemulation::PreferredServicesProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::PreferredServicesProto>(Arena*);
template<> ::com::android::nfc::cardemulation::RegisteredAidCacheProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredAidCacheProto>(Arena*);
template<> ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry>(Arena*);
template<> ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto>(Arena*);
template<> ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredServicesCacheProto>(Arena*);
template<> ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto>(Arena*);
template<> ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto>(Arena*);
template<> ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier* Arena::CreateMaybeMessage<::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace nfc {
namespace cardemulation {

// ===================================================================

class CardEmulationManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.CardEmulationManagerProto) */ {
 public:
  CardEmulationManagerProto();
  virtual ~CardEmulationManagerProto();

  CardEmulationManagerProto(const CardEmulationManagerProto& from);
  CardEmulationManagerProto(CardEmulationManagerProto&& from) noexcept
    : CardEmulationManagerProto() {
    *this = ::std::move(from);
  }

  inline CardEmulationManagerProto& operator=(const CardEmulationManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardEmulationManagerProto& operator=(CardEmulationManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardEmulationManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardEmulationManagerProto* internal_default_instance() {
    return reinterpret_cast<const CardEmulationManagerProto*>(
               &_CardEmulationManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardEmulationManagerProto& a, CardEmulationManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CardEmulationManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardEmulationManagerProto* New() const final {
    return CreateMaybeMessage<CardEmulationManagerProto>(nullptr);
  }

  CardEmulationManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardEmulationManagerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardEmulationManagerProto& from);
  void MergeFrom(const CardEmulationManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardEmulationManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.CardEmulationManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisteredServicesCacheFieldNumber = 1,
    kRegisteredNfcFServicesCacheFieldNumber = 2,
    kPreferredServicesFieldNumber = 3,
    kEnabledNfcFServicesFieldNumber = 4,
    kAidCacheFieldNumber = 5,
    kT3TIdentifiersCacheFieldNumber = 6,
    kHostEmulationManagerFieldNumber = 7,
    kHostNfcFEmulationManagerFieldNumber = 8,
  };
  // optional .com.android.nfc.cardemulation.RegisteredServicesCacheProto registered_services_cache = 1;
  bool has_registered_services_cache() const;
  void clear_registered_services_cache();
  const ::com::android::nfc::cardemulation::RegisteredServicesCacheProto& registered_services_cache() const;
  ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* release_registered_services_cache();
  ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* mutable_registered_services_cache();
  void set_allocated_registered_services_cache(::com::android::nfc::cardemulation::RegisteredServicesCacheProto* registered_services_cache);

  // optional .com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto registered_nfc_f_services_cache = 2;
  bool has_registered_nfc_f_services_cache() const;
  void clear_registered_nfc_f_services_cache();
  const ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto& registered_nfc_f_services_cache() const;
  ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* release_registered_nfc_f_services_cache();
  ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* mutable_registered_nfc_f_services_cache();
  void set_allocated_registered_nfc_f_services_cache(::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* registered_nfc_f_services_cache);

  // optional .com.android.nfc.cardemulation.PreferredServicesProto preferred_services = 3;
  bool has_preferred_services() const;
  void clear_preferred_services();
  const ::com::android::nfc::cardemulation::PreferredServicesProto& preferred_services() const;
  ::com::android::nfc::cardemulation::PreferredServicesProto* release_preferred_services();
  ::com::android::nfc::cardemulation::PreferredServicesProto* mutable_preferred_services();
  void set_allocated_preferred_services(::com::android::nfc::cardemulation::PreferredServicesProto* preferred_services);

  // optional .com.android.nfc.cardemulation.EnabledNfcFServicesProto enabled_nfc_f_services = 4;
  bool has_enabled_nfc_f_services() const;
  void clear_enabled_nfc_f_services();
  const ::com::android::nfc::cardemulation::EnabledNfcFServicesProto& enabled_nfc_f_services() const;
  ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* release_enabled_nfc_f_services();
  ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* mutable_enabled_nfc_f_services();
  void set_allocated_enabled_nfc_f_services(::com::android::nfc::cardemulation::EnabledNfcFServicesProto* enabled_nfc_f_services);

  // optional .com.android.nfc.cardemulation.RegisteredAidCacheProto aid_cache = 5;
  bool has_aid_cache() const;
  void clear_aid_cache();
  const ::com::android::nfc::cardemulation::RegisteredAidCacheProto& aid_cache() const;
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto* release_aid_cache();
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto* mutable_aid_cache();
  void set_allocated_aid_cache(::com::android::nfc::cardemulation::RegisteredAidCacheProto* aid_cache);

  // optional .com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto t3t_identifiers_cache = 6;
  bool has_t3t_identifiers_cache() const;
  void clear_t3t_identifiers_cache();
  const ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto& t3t_identifiers_cache() const;
  ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* release_t3t_identifiers_cache();
  ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* mutable_t3t_identifiers_cache();
  void set_allocated_t3t_identifiers_cache(::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* t3t_identifiers_cache);

  // optional .com.android.nfc.cardemulation.HostEmulationManagerProto host_emulation_manager = 7;
  bool has_host_emulation_manager() const;
  void clear_host_emulation_manager();
  const ::com::android::nfc::cardemulation::HostEmulationManagerProto& host_emulation_manager() const;
  ::com::android::nfc::cardemulation::HostEmulationManagerProto* release_host_emulation_manager();
  ::com::android::nfc::cardemulation::HostEmulationManagerProto* mutable_host_emulation_manager();
  void set_allocated_host_emulation_manager(::com::android::nfc::cardemulation::HostEmulationManagerProto* host_emulation_manager);

  // optional .com.android.nfc.cardemulation.HostNfcFEmulationManagerProto host_nfc_f_emulation_manager = 8;
  bool has_host_nfc_f_emulation_manager() const;
  void clear_host_nfc_f_emulation_manager();
  const ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto& host_nfc_f_emulation_manager() const;
  ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* release_host_nfc_f_emulation_manager();
  ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* mutable_host_nfc_f_emulation_manager();
  void set_allocated_host_nfc_f_emulation_manager(::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* host_nfc_f_emulation_manager);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.CardEmulationManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* registered_services_cache_;
  ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* registered_nfc_f_services_cache_;
  ::com::android::nfc::cardemulation::PreferredServicesProto* preferred_services_;
  ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* enabled_nfc_f_services_;
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto* aid_cache_;
  ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* t3t_identifiers_cache_;
  ::com::android::nfc::cardemulation::HostEmulationManagerProto* host_emulation_manager_;
  ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* host_nfc_f_emulation_manager_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class RegisteredServicesCacheProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.RegisteredServicesCacheProto) */ {
 public:
  RegisteredServicesCacheProto();
  virtual ~RegisteredServicesCacheProto();

  RegisteredServicesCacheProto(const RegisteredServicesCacheProto& from);
  RegisteredServicesCacheProto(RegisteredServicesCacheProto&& from) noexcept
    : RegisteredServicesCacheProto() {
    *this = ::std::move(from);
  }

  inline RegisteredServicesCacheProto& operator=(const RegisteredServicesCacheProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredServicesCacheProto& operator=(RegisteredServicesCacheProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredServicesCacheProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredServicesCacheProto* internal_default_instance() {
    return reinterpret_cast<const RegisteredServicesCacheProto*>(
               &_RegisteredServicesCacheProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisteredServicesCacheProto& a, RegisteredServicesCacheProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredServicesCacheProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredServicesCacheProto* New() const final {
    return CreateMaybeMessage<RegisteredServicesCacheProto>(nullptr);
  }

  RegisteredServicesCacheProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredServicesCacheProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredServicesCacheProto& from);
  void MergeFrom(const RegisteredServicesCacheProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredServicesCacheProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.RegisteredServicesCacheProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApduServiceInfosFieldNumber = 1,
  };
  // repeated .android.nfc.cardemulation.ApduServiceInfoProto apdu_service_infos = 1;
  int apdu_service_infos_size() const;
  void clear_apdu_service_infos();
  ::android::nfc::cardemulation::ApduServiceInfoProto* mutable_apdu_service_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >*
      mutable_apdu_service_infos();
  const ::android::nfc::cardemulation::ApduServiceInfoProto& apdu_service_infos(int index) const;
  ::android::nfc::cardemulation::ApduServiceInfoProto* add_apdu_service_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >&
      apdu_service_infos() const;

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto > apdu_service_infos_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class RegisteredNfcFServicesCacheProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto) */ {
 public:
  RegisteredNfcFServicesCacheProto();
  virtual ~RegisteredNfcFServicesCacheProto();

  RegisteredNfcFServicesCacheProto(const RegisteredNfcFServicesCacheProto& from);
  RegisteredNfcFServicesCacheProto(RegisteredNfcFServicesCacheProto&& from) noexcept
    : RegisteredNfcFServicesCacheProto() {
    *this = ::std::move(from);
  }

  inline RegisteredNfcFServicesCacheProto& operator=(const RegisteredNfcFServicesCacheProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredNfcFServicesCacheProto& operator=(RegisteredNfcFServicesCacheProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredNfcFServicesCacheProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredNfcFServicesCacheProto* internal_default_instance() {
    return reinterpret_cast<const RegisteredNfcFServicesCacheProto*>(
               &_RegisteredNfcFServicesCacheProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisteredNfcFServicesCacheProto& a, RegisteredNfcFServicesCacheProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredNfcFServicesCacheProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredNfcFServicesCacheProto* New() const final {
    return CreateMaybeMessage<RegisteredNfcFServicesCacheProto>(nullptr);
  }

  RegisteredNfcFServicesCacheProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredNfcFServicesCacheProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredNfcFServicesCacheProto& from);
  void MergeFrom(const RegisteredNfcFServicesCacheProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredNfcFServicesCacheProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNfcFserviceInfoFieldNumber = 1,
  };
  // repeated .android.nfc.cardemulation.NfcFServiceInfoProto nfc_fservice_info = 1;
  int nfc_fservice_info_size() const;
  void clear_nfc_fservice_info();
  ::android::nfc::cardemulation::NfcFServiceInfoProto* mutable_nfc_fservice_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >*
      mutable_nfc_fservice_info();
  const ::android::nfc::cardemulation::NfcFServiceInfoProto& nfc_fservice_info(int index) const;
  ::android::nfc::cardemulation::NfcFServiceInfoProto* add_nfc_fservice_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >&
      nfc_fservice_info() const;

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto > nfc_fservice_info_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class PreferredServicesProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.PreferredServicesProto) */ {
 public:
  PreferredServicesProto();
  virtual ~PreferredServicesProto();

  PreferredServicesProto(const PreferredServicesProto& from);
  PreferredServicesProto(PreferredServicesProto&& from) noexcept
    : PreferredServicesProto() {
    *this = ::std::move(from);
  }

  inline PreferredServicesProto& operator=(const PreferredServicesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferredServicesProto& operator=(PreferredServicesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreferredServicesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreferredServicesProto* internal_default_instance() {
    return reinterpret_cast<const PreferredServicesProto*>(
               &_PreferredServicesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PreferredServicesProto& a, PreferredServicesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferredServicesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreferredServicesProto* New() const final {
    return CreateMaybeMessage<PreferredServicesProto>(nullptr);
  }

  PreferredServicesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreferredServicesProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreferredServicesProto& from);
  void MergeFrom(const PreferredServicesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferredServicesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.PreferredServicesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForegroundCurrentFieldNumber = 1,
    kCurrentPreferredFieldNumber = 2,
    kNextTapDefaultFieldNumber = 3,
    kForegroundRequestedFieldNumber = 5,
    kSettingsDefaultFieldNumber = 6,
    kForegroundUidFieldNumber = 4,
    kPreferForegroundFieldNumber = 7,
  };
  // optional .android.content.ComponentNameProto foreground_current = 1;
  bool has_foreground_current() const;
  void clear_foreground_current();
  const ::android::content::ComponentNameProto& foreground_current() const;
  ::android::content::ComponentNameProto* release_foreground_current();
  ::android::content::ComponentNameProto* mutable_foreground_current();
  void set_allocated_foreground_current(::android::content::ComponentNameProto* foreground_current);

  // optional .android.content.ComponentNameProto current_preferred = 2;
  bool has_current_preferred() const;
  void clear_current_preferred();
  const ::android::content::ComponentNameProto& current_preferred() const;
  ::android::content::ComponentNameProto* release_current_preferred();
  ::android::content::ComponentNameProto* mutable_current_preferred();
  void set_allocated_current_preferred(::android::content::ComponentNameProto* current_preferred);

  // optional .android.content.ComponentNameProto next_tap_default = 3;
  bool has_next_tap_default() const;
  void clear_next_tap_default();
  const ::android::content::ComponentNameProto& next_tap_default() const;
  ::android::content::ComponentNameProto* release_next_tap_default();
  ::android::content::ComponentNameProto* mutable_next_tap_default();
  void set_allocated_next_tap_default(::android::content::ComponentNameProto* next_tap_default);

  // optional .android.content.ComponentNameProto foreground_requested = 5;
  bool has_foreground_requested() const;
  void clear_foreground_requested();
  const ::android::content::ComponentNameProto& foreground_requested() const;
  ::android::content::ComponentNameProto* release_foreground_requested();
  ::android::content::ComponentNameProto* mutable_foreground_requested();
  void set_allocated_foreground_requested(::android::content::ComponentNameProto* foreground_requested);

  // optional .android.content.ComponentNameProto settings_default = 6;
  bool has_settings_default() const;
  void clear_settings_default();
  const ::android::content::ComponentNameProto& settings_default() const;
  ::android::content::ComponentNameProto* release_settings_default();
  ::android::content::ComponentNameProto* mutable_settings_default();
  void set_allocated_settings_default(::android::content::ComponentNameProto* settings_default);

  // optional int32 foreground_uid = 4;
  bool has_foreground_uid() const;
  void clear_foreground_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 foreground_uid() const;
  void set_foreground_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool prefer_foreground = 7;
  bool has_prefer_foreground() const;
  void clear_prefer_foreground();
  bool prefer_foreground() const;
  void set_prefer_foreground(bool value);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.PreferredServicesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::content::ComponentNameProto* foreground_current_;
  ::android::content::ComponentNameProto* current_preferred_;
  ::android::content::ComponentNameProto* next_tap_default_;
  ::android::content::ComponentNameProto* foreground_requested_;
  ::android::content::ComponentNameProto* settings_default_;
  ::PROTOBUF_NAMESPACE_ID::int32 foreground_uid_;
  bool prefer_foreground_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class EnabledNfcFServicesProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.EnabledNfcFServicesProto) */ {
 public:
  EnabledNfcFServicesProto();
  virtual ~EnabledNfcFServicesProto();

  EnabledNfcFServicesProto(const EnabledNfcFServicesProto& from);
  EnabledNfcFServicesProto(EnabledNfcFServicesProto&& from) noexcept
    : EnabledNfcFServicesProto() {
    *this = ::std::move(from);
  }

  inline EnabledNfcFServicesProto& operator=(const EnabledNfcFServicesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnabledNfcFServicesProto& operator=(EnabledNfcFServicesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnabledNfcFServicesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnabledNfcFServicesProto* internal_default_instance() {
    return reinterpret_cast<const EnabledNfcFServicesProto*>(
               &_EnabledNfcFServicesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EnabledNfcFServicesProto& a, EnabledNfcFServicesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EnabledNfcFServicesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnabledNfcFServicesProto* New() const final {
    return CreateMaybeMessage<EnabledNfcFServicesProto>(nullptr);
  }

  EnabledNfcFServicesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnabledNfcFServicesProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnabledNfcFServicesProto& from);
  void MergeFrom(const EnabledNfcFServicesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnabledNfcFServicesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.EnabledNfcFServicesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForegroundComponentFieldNumber = 1,
    kForegroundRequestedFieldNumber = 2,
    kActivatedFieldNumber = 3,
    kComputeFgRequestedFieldNumber = 4,
    kForegroundUidFieldNumber = 5,
  };
  // optional .android.content.ComponentNameProto foreground_component = 1;
  bool has_foreground_component() const;
  void clear_foreground_component();
  const ::android::content::ComponentNameProto& foreground_component() const;
  ::android::content::ComponentNameProto* release_foreground_component();
  ::android::content::ComponentNameProto* mutable_foreground_component();
  void set_allocated_foreground_component(::android::content::ComponentNameProto* foreground_component);

  // optional .android.content.ComponentNameProto foreground_requested = 2;
  bool has_foreground_requested() const;
  void clear_foreground_requested();
  const ::android::content::ComponentNameProto& foreground_requested() const;
  ::android::content::ComponentNameProto* release_foreground_requested();
  ::android::content::ComponentNameProto* mutable_foreground_requested();
  void set_allocated_foreground_requested(::android::content::ComponentNameProto* foreground_requested);

  // optional bool activated = 3;
  bool has_activated() const;
  void clear_activated();
  bool activated() const;
  void set_activated(bool value);

  // optional bool compute_fg_requested = 4;
  bool has_compute_fg_requested() const;
  void clear_compute_fg_requested();
  bool compute_fg_requested() const;
  void set_compute_fg_requested(bool value);

  // optional int32 foreground_uid = 5;
  bool has_foreground_uid() const;
  void clear_foreground_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 foreground_uid() const;
  void set_foreground_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::content::ComponentNameProto* foreground_component_;
  ::android::content::ComponentNameProto* foreground_requested_;
  bool activated_;
  bool compute_fg_requested_;
  ::PROTOBUF_NAMESPACE_ID::int32 foreground_uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class RegisteredAidCacheProto_AidCacheEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry) */ {
 public:
  RegisteredAidCacheProto_AidCacheEntry();
  virtual ~RegisteredAidCacheProto_AidCacheEntry();

  RegisteredAidCacheProto_AidCacheEntry(const RegisteredAidCacheProto_AidCacheEntry& from);
  RegisteredAidCacheProto_AidCacheEntry(RegisteredAidCacheProto_AidCacheEntry&& from) noexcept
    : RegisteredAidCacheProto_AidCacheEntry() {
    *this = ::std::move(from);
  }

  inline RegisteredAidCacheProto_AidCacheEntry& operator=(const RegisteredAidCacheProto_AidCacheEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredAidCacheProto_AidCacheEntry& operator=(RegisteredAidCacheProto_AidCacheEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredAidCacheProto_AidCacheEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredAidCacheProto_AidCacheEntry* internal_default_instance() {
    return reinterpret_cast<const RegisteredAidCacheProto_AidCacheEntry*>(
               &_RegisteredAidCacheProto_AidCacheEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisteredAidCacheProto_AidCacheEntry& a, RegisteredAidCacheProto_AidCacheEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredAidCacheProto_AidCacheEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredAidCacheProto_AidCacheEntry* New() const final {
    return CreateMaybeMessage<RegisteredAidCacheProto_AidCacheEntry>(nullptr);
  }

  RegisteredAidCacheProto_AidCacheEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredAidCacheProto_AidCacheEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredAidCacheProto_AidCacheEntry& from);
  void MergeFrom(const RegisteredAidCacheProto_AidCacheEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredAidCacheProto_AidCacheEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 4,
    kKeyFieldNumber = 1,
    kCategoryFieldNumber = 2,
    kDefaultComponentFieldNumber = 3,
  };
  // repeated .android.nfc.cardemulation.ApduServiceInfoProto services = 4;
  int services_size() const;
  void clear_services();
  ::android::nfc::cardemulation::ApduServiceInfoProto* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >*
      mutable_services();
  const ::android::nfc::cardemulation::ApduServiceInfoProto& services(int index) const;
  ::android::nfc::cardemulation::ApduServiceInfoProto* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >&
      services() const;

  // optional string key = 1 [(.android.privacy) = {
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string category = 2 [(.android.privacy) = {
  bool has_category() const;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // optional .android.content.ComponentNameProto default_component = 3;
  bool has_default_component() const;
  void clear_default_component();
  const ::android::content::ComponentNameProto& default_component() const;
  ::android::content::ComponentNameProto* release_default_component();
  ::android::content::ComponentNameProto* mutable_default_component();
  void set_allocated_default_component(::android::content::ComponentNameProto* default_component);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto > services_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::android::content::ComponentNameProto* default_component_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class RegisteredAidCacheProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.RegisteredAidCacheProto) */ {
 public:
  RegisteredAidCacheProto();
  virtual ~RegisteredAidCacheProto();

  RegisteredAidCacheProto(const RegisteredAidCacheProto& from);
  RegisteredAidCacheProto(RegisteredAidCacheProto&& from) noexcept
    : RegisteredAidCacheProto() {
    *this = ::std::move(from);
  }

  inline RegisteredAidCacheProto& operator=(const RegisteredAidCacheProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredAidCacheProto& operator=(RegisteredAidCacheProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredAidCacheProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredAidCacheProto* internal_default_instance() {
    return reinterpret_cast<const RegisteredAidCacheProto*>(
               &_RegisteredAidCacheProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegisteredAidCacheProto& a, RegisteredAidCacheProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredAidCacheProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredAidCacheProto* New() const final {
    return CreateMaybeMessage<RegisteredAidCacheProto>(nullptr);
  }

  RegisteredAidCacheProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredAidCacheProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredAidCacheProto& from);
  void MergeFrom(const RegisteredAidCacheProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredAidCacheProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.RegisteredAidCacheProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RegisteredAidCacheProto_AidCacheEntry AidCacheEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kAidCacheEntriesFieldNumber = 1,
    kPreferredForegroundServiceFieldNumber = 2,
    kPreferredPaymentServiceFieldNumber = 3,
    kRoutingManagerFieldNumber = 4,
  };
  // repeated .com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry aid_cache_entries = 1;
  int aid_cache_entries_size() const;
  void clear_aid_cache_entries();
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry* mutable_aid_cache_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry >*
      mutable_aid_cache_entries();
  const ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry& aid_cache_entries(int index) const;
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry* add_aid_cache_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry >&
      aid_cache_entries() const;

  // optional .android.content.ComponentNameProto preferred_foreground_service = 2;
  bool has_preferred_foreground_service() const;
  void clear_preferred_foreground_service();
  const ::android::content::ComponentNameProto& preferred_foreground_service() const;
  ::android::content::ComponentNameProto* release_preferred_foreground_service();
  ::android::content::ComponentNameProto* mutable_preferred_foreground_service();
  void set_allocated_preferred_foreground_service(::android::content::ComponentNameProto* preferred_foreground_service);

  // optional .android.content.ComponentNameProto preferred_payment_service = 3;
  bool has_preferred_payment_service() const;
  void clear_preferred_payment_service();
  const ::android::content::ComponentNameProto& preferred_payment_service() const;
  ::android::content::ComponentNameProto* release_preferred_payment_service();
  ::android::content::ComponentNameProto* mutable_preferred_payment_service();
  void set_allocated_preferred_payment_service(::android::content::ComponentNameProto* preferred_payment_service);

  // optional .com.android.nfc.cardemulation.AidRoutingManagerProto routing_manager = 4;
  bool has_routing_manager() const;
  void clear_routing_manager();
  const ::com::android::nfc::cardemulation::AidRoutingManagerProto& routing_manager() const;
  ::com::android::nfc::cardemulation::AidRoutingManagerProto* release_routing_manager();
  ::com::android::nfc::cardemulation::AidRoutingManagerProto* mutable_routing_manager();
  void set_allocated_routing_manager(::com::android::nfc::cardemulation::AidRoutingManagerProto* routing_manager);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.RegisteredAidCacheProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry > aid_cache_entries_;
  ::android::content::ComponentNameProto* preferred_foreground_service_;
  ::android::content::ComponentNameProto* preferred_payment_service_;
  ::com::android::nfc::cardemulation::AidRoutingManagerProto* routing_manager_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class AidRoutingManagerProto_Route :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.AidRoutingManagerProto.Route) */ {
 public:
  AidRoutingManagerProto_Route();
  virtual ~AidRoutingManagerProto_Route();

  AidRoutingManagerProto_Route(const AidRoutingManagerProto_Route& from);
  AidRoutingManagerProto_Route(AidRoutingManagerProto_Route&& from) noexcept
    : AidRoutingManagerProto_Route() {
    *this = ::std::move(from);
  }

  inline AidRoutingManagerProto_Route& operator=(const AidRoutingManagerProto_Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline AidRoutingManagerProto_Route& operator=(AidRoutingManagerProto_Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AidRoutingManagerProto_Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AidRoutingManagerProto_Route* internal_default_instance() {
    return reinterpret_cast<const AidRoutingManagerProto_Route*>(
               &_AidRoutingManagerProto_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AidRoutingManagerProto_Route& a, AidRoutingManagerProto_Route& b) {
    a.Swap(&b);
  }
  inline void Swap(AidRoutingManagerProto_Route* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AidRoutingManagerProto_Route* New() const final {
    return CreateMaybeMessage<AidRoutingManagerProto_Route>(nullptr);
  }

  AidRoutingManagerProto_Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AidRoutingManagerProto_Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AidRoutingManagerProto_Route& from);
  void MergeFrom(const AidRoutingManagerProto_Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AidRoutingManagerProto_Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.AidRoutingManagerProto.Route";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAidsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string aids = 2 [(.android.privacy) = {
  int aids_size() const;
  void clear_aids();
  const std::string& aids(int index) const;
  std::string* mutable_aids(int index);
  void set_aids(int index, const std::string& value);
  void set_aids(int index, std::string&& value);
  void set_aids(int index, const char* value);
  void set_aids(int index, const char* value, size_t size);
  std::string* add_aids();
  void add_aids(const std::string& value);
  void add_aids(std::string&& value);
  void add_aids(const char* value);
  void add_aids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aids();

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aids_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class AidRoutingManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.AidRoutingManagerProto) */ {
 public:
  AidRoutingManagerProto();
  virtual ~AidRoutingManagerProto();

  AidRoutingManagerProto(const AidRoutingManagerProto& from);
  AidRoutingManagerProto(AidRoutingManagerProto&& from) noexcept
    : AidRoutingManagerProto() {
    *this = ::std::move(from);
  }

  inline AidRoutingManagerProto& operator=(const AidRoutingManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AidRoutingManagerProto& operator=(AidRoutingManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AidRoutingManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AidRoutingManagerProto* internal_default_instance() {
    return reinterpret_cast<const AidRoutingManagerProto*>(
               &_AidRoutingManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AidRoutingManagerProto& a, AidRoutingManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AidRoutingManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AidRoutingManagerProto* New() const final {
    return CreateMaybeMessage<AidRoutingManagerProto>(nullptr);
  }

  AidRoutingManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AidRoutingManagerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AidRoutingManagerProto& from);
  void MergeFrom(const AidRoutingManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AidRoutingManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.AidRoutingManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AidRoutingManagerProto_Route Route;

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 2,
    kDefaultRouteFieldNumber = 1,
  };
  // repeated .com.android.nfc.cardemulation.AidRoutingManagerProto.Route routes = 2;
  int routes_size() const;
  void clear_routes();
  ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route >*
      mutable_routes();
  const ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route& routes(int index) const;
  ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route >&
      routes() const;

  // optional int32 default_route = 1;
  bool has_default_route() const;
  void clear_default_route();
  ::PROTOBUF_NAMESPACE_ID::int32 default_route() const;
  void set_default_route(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.AidRoutingManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route > routes_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_route_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class RegisteredT3tIdentifiersCacheProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto) */ {
 public:
  RegisteredT3tIdentifiersCacheProto();
  virtual ~RegisteredT3tIdentifiersCacheProto();

  RegisteredT3tIdentifiersCacheProto(const RegisteredT3tIdentifiersCacheProto& from);
  RegisteredT3tIdentifiersCacheProto(RegisteredT3tIdentifiersCacheProto&& from) noexcept
    : RegisteredT3tIdentifiersCacheProto() {
    *this = ::std::move(from);
  }

  inline RegisteredT3tIdentifiersCacheProto& operator=(const RegisteredT3tIdentifiersCacheProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredT3tIdentifiersCacheProto& operator=(RegisteredT3tIdentifiersCacheProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredT3tIdentifiersCacheProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredT3tIdentifiersCacheProto* internal_default_instance() {
    return reinterpret_cast<const RegisteredT3tIdentifiersCacheProto*>(
               &_RegisteredT3tIdentifiersCacheProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RegisteredT3tIdentifiersCacheProto& a, RegisteredT3tIdentifiersCacheProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredT3tIdentifiersCacheProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredT3tIdentifiersCacheProto* New() const final {
    return CreateMaybeMessage<RegisteredT3tIdentifiersCacheProto>(nullptr);
  }

  RegisteredT3tIdentifiersCacheProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredT3tIdentifiersCacheProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredT3tIdentifiersCacheProto& from);
  void MergeFrom(const RegisteredT3tIdentifiersCacheProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredT3tIdentifiersCacheProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kT3TIdentifierCacheEntriesFieldNumber = 1,
    kRoutingManagerFieldNumber = 2,
  };
  // repeated .android.nfc.cardemulation.NfcFServiceInfoProto t3t_identifier_cache_entries = 1;
  int t3t_identifier_cache_entries_size() const;
  void clear_t3t_identifier_cache_entries();
  ::android::nfc::cardemulation::NfcFServiceInfoProto* mutable_t3t_identifier_cache_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >*
      mutable_t3t_identifier_cache_entries();
  const ::android::nfc::cardemulation::NfcFServiceInfoProto& t3t_identifier_cache_entries(int index) const;
  ::android::nfc::cardemulation::NfcFServiceInfoProto* add_t3t_identifier_cache_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >&
      t3t_identifier_cache_entries() const;

  // optional .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto routing_manager = 2;
  bool has_routing_manager() const;
  void clear_routing_manager();
  const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto& routing_manager() const;
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* release_routing_manager();
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* mutable_routing_manager();
  void set_allocated_routing_manager(::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* routing_manager);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto > t3t_identifier_cache_entries_;
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* routing_manager_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class SystemCodeRoutingManagerProto_T3tIdentifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier) */ {
 public:
  SystemCodeRoutingManagerProto_T3tIdentifier();
  virtual ~SystemCodeRoutingManagerProto_T3tIdentifier();

  SystemCodeRoutingManagerProto_T3tIdentifier(const SystemCodeRoutingManagerProto_T3tIdentifier& from);
  SystemCodeRoutingManagerProto_T3tIdentifier(SystemCodeRoutingManagerProto_T3tIdentifier&& from) noexcept
    : SystemCodeRoutingManagerProto_T3tIdentifier() {
    *this = ::std::move(from);
  }

  inline SystemCodeRoutingManagerProto_T3tIdentifier& operator=(const SystemCodeRoutingManagerProto_T3tIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemCodeRoutingManagerProto_T3tIdentifier& operator=(SystemCodeRoutingManagerProto_T3tIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemCodeRoutingManagerProto_T3tIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemCodeRoutingManagerProto_T3tIdentifier* internal_default_instance() {
    return reinterpret_cast<const SystemCodeRoutingManagerProto_T3tIdentifier*>(
               &_SystemCodeRoutingManagerProto_T3tIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SystemCodeRoutingManagerProto_T3tIdentifier& a, SystemCodeRoutingManagerProto_T3tIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemCodeRoutingManagerProto_T3tIdentifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemCodeRoutingManagerProto_T3tIdentifier* New() const final {
    return CreateMaybeMessage<SystemCodeRoutingManagerProto_T3tIdentifier>(nullptr);
  }

  SystemCodeRoutingManagerProto_T3tIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemCodeRoutingManagerProto_T3tIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemCodeRoutingManagerProto_T3tIdentifier& from);
  void MergeFrom(const SystemCodeRoutingManagerProto_T3tIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemCodeRoutingManagerProto_T3tIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemCodeFieldNumber = 1,
    kNfcid2FieldNumber = 2,
  };
  // optional string system_code = 1;
  bool has_system_code() const;
  void clear_system_code();
  const std::string& system_code() const;
  void set_system_code(const std::string& value);
  void set_system_code(std::string&& value);
  void set_system_code(const char* value);
  void set_system_code(const char* value, size_t size);
  std::string* mutable_system_code();
  std::string* release_system_code();
  void set_allocated_system_code(std::string* system_code);

  // optional string nfcid2 = 2;
  bool has_nfcid2() const;
  void clear_nfcid2();
  const std::string& nfcid2() const;
  void set_nfcid2(const std::string& value);
  void set_nfcid2(std::string&& value);
  void set_nfcid2(const char* value);
  void set_nfcid2(const char* value, size_t size);
  std::string* mutable_nfcid2();
  std::string* release_nfcid2();
  void set_allocated_nfcid2(std::string* nfcid2);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nfcid2_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class SystemCodeRoutingManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto) */ {
 public:
  SystemCodeRoutingManagerProto();
  virtual ~SystemCodeRoutingManagerProto();

  SystemCodeRoutingManagerProto(const SystemCodeRoutingManagerProto& from);
  SystemCodeRoutingManagerProto(SystemCodeRoutingManagerProto&& from) noexcept
    : SystemCodeRoutingManagerProto() {
    *this = ::std::move(from);
  }

  inline SystemCodeRoutingManagerProto& operator=(const SystemCodeRoutingManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemCodeRoutingManagerProto& operator=(SystemCodeRoutingManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemCodeRoutingManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemCodeRoutingManagerProto* internal_default_instance() {
    return reinterpret_cast<const SystemCodeRoutingManagerProto*>(
               &_SystemCodeRoutingManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SystemCodeRoutingManagerProto& a, SystemCodeRoutingManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemCodeRoutingManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemCodeRoutingManagerProto* New() const final {
    return CreateMaybeMessage<SystemCodeRoutingManagerProto>(nullptr);
  }

  SystemCodeRoutingManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemCodeRoutingManagerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemCodeRoutingManagerProto& from);
  void MergeFrom(const SystemCodeRoutingManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemCodeRoutingManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.SystemCodeRoutingManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemCodeRoutingManagerProto_T3tIdentifier T3tIdentifier;

  // accessors -------------------------------------------------------

  enum : int {
    kT3TIdentifiersFieldNumber = 1,
  };
  // repeated .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier t3t_identifiers = 1;
  int t3t_identifiers_size() const;
  void clear_t3t_identifiers();
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier* mutable_t3t_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier >*
      mutable_t3t_identifiers();
  const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier& t3t_identifiers(int index) const;
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier* add_t3t_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier >&
      t3t_identifiers() const;

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier > t3t_identifiers_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class HostEmulationManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.HostEmulationManagerProto) */ {
 public:
  HostEmulationManagerProto();
  virtual ~HostEmulationManagerProto();

  HostEmulationManagerProto(const HostEmulationManagerProto& from);
  HostEmulationManagerProto(HostEmulationManagerProto&& from) noexcept
    : HostEmulationManagerProto() {
    *this = ::std::move(from);
  }

  inline HostEmulationManagerProto& operator=(const HostEmulationManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostEmulationManagerProto& operator=(HostEmulationManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostEmulationManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostEmulationManagerProto* internal_default_instance() {
    return reinterpret_cast<const HostEmulationManagerProto*>(
               &_HostEmulationManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HostEmulationManagerProto& a, HostEmulationManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(HostEmulationManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostEmulationManagerProto* New() const final {
    return CreateMaybeMessage<HostEmulationManagerProto>(nullptr);
  }

  HostEmulationManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostEmulationManagerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostEmulationManagerProto& from);
  void MergeFrom(const HostEmulationManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostEmulationManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.HostEmulationManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentServiceNameFieldNumber = 1,
    kServiceNameFieldNumber = 2,
  };
  // optional .android.content.ComponentNameProto payment_service_name = 1;
  bool has_payment_service_name() const;
  void clear_payment_service_name();
  const ::android::content::ComponentNameProto& payment_service_name() const;
  ::android::content::ComponentNameProto* release_payment_service_name();
  ::android::content::ComponentNameProto* mutable_payment_service_name();
  void set_allocated_payment_service_name(::android::content::ComponentNameProto* payment_service_name);

  // optional .android.content.ComponentNameProto service_name = 2;
  bool has_service_name() const;
  void clear_service_name();
  const ::android::content::ComponentNameProto& service_name() const;
  ::android::content::ComponentNameProto* release_service_name();
  ::android::content::ComponentNameProto* mutable_service_name();
  void set_allocated_service_name(::android::content::ComponentNameProto* service_name);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.HostEmulationManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::content::ComponentNameProto* payment_service_name_;
  ::android::content::ComponentNameProto* service_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// -------------------------------------------------------------------

class HostNfcFEmulationManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto) */ {
 public:
  HostNfcFEmulationManagerProto();
  virtual ~HostNfcFEmulationManagerProto();

  HostNfcFEmulationManagerProto(const HostNfcFEmulationManagerProto& from);
  HostNfcFEmulationManagerProto(HostNfcFEmulationManagerProto&& from) noexcept
    : HostNfcFEmulationManagerProto() {
    *this = ::std::move(from);
  }

  inline HostNfcFEmulationManagerProto& operator=(const HostNfcFEmulationManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostNfcFEmulationManagerProto& operator=(HostNfcFEmulationManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostNfcFEmulationManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostNfcFEmulationManagerProto* internal_default_instance() {
    return reinterpret_cast<const HostNfcFEmulationManagerProto*>(
               &_HostNfcFEmulationManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HostNfcFEmulationManagerProto& a, HostNfcFEmulationManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(HostNfcFEmulationManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostNfcFEmulationManagerProto* New() const final {
    return CreateMaybeMessage<HostNfcFEmulationManagerProto>(nullptr);
  }

  HostNfcFEmulationManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostNfcFEmulationManagerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostNfcFEmulationManagerProto& from);
  void MergeFrom(const HostNfcFEmulationManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostNfcFEmulationManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.nfc.cardemulation.HostNfcFEmulationManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // optional .android.content.ComponentNameProto service_name = 1;
  bool has_service_name() const;
  void clear_service_name();
  const ::android::content::ComponentNameProto& service_name() const;
  ::android::content::ComponentNameProto* release_service_name();
  ::android::content::ComponentNameProto* mutable_service_name();
  void set_allocated_service_name(::android::content::ComponentNameProto* service_name);

  // @@protoc_insertion_point(class_scope:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::content::ComponentNameProto* service_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardEmulationManagerProto

// optional .com.android.nfc.cardemulation.RegisteredServicesCacheProto registered_services_cache = 1;
inline bool CardEmulationManagerProto::has_registered_services_cache() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardEmulationManagerProto::clear_registered_services_cache() {
  if (registered_services_cache_ != nullptr) registered_services_cache_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::nfc::cardemulation::RegisteredServicesCacheProto& CardEmulationManagerProto::registered_services_cache() const {
  const ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* p = registered_services_cache_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_services_cache)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::RegisteredServicesCacheProto*>(
      &::com::android::nfc::cardemulation::_RegisteredServicesCacheProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* CardEmulationManagerProto::release_registered_services_cache() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_services_cache)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* temp = registered_services_cache_;
  registered_services_cache_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* CardEmulationManagerProto::mutable_registered_services_cache() {
  _has_bits_[0] |= 0x00000001u;
  if (registered_services_cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredServicesCacheProto>(GetArenaNoVirtual());
    registered_services_cache_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_services_cache)
  return registered_services_cache_;
}
inline void CardEmulationManagerProto::set_allocated_registered_services_cache(::com::android::nfc::cardemulation::RegisteredServicesCacheProto* registered_services_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete registered_services_cache_;
  }
  if (registered_services_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registered_services_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registered_services_cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  registered_services_cache_ = registered_services_cache;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_services_cache)
}

// optional .com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto registered_nfc_f_services_cache = 2;
inline bool CardEmulationManagerProto::has_registered_nfc_f_services_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardEmulationManagerProto::clear_registered_nfc_f_services_cache() {
  if (registered_nfc_f_services_cache_ != nullptr) registered_nfc_f_services_cache_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto& CardEmulationManagerProto::registered_nfc_f_services_cache() const {
  const ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* p = registered_nfc_f_services_cache_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_nfc_f_services_cache)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto*>(
      &::com::android::nfc::cardemulation::_RegisteredNfcFServicesCacheProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* CardEmulationManagerProto::release_registered_nfc_f_services_cache() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_nfc_f_services_cache)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* temp = registered_nfc_f_services_cache_;
  registered_nfc_f_services_cache_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* CardEmulationManagerProto::mutable_registered_nfc_f_services_cache() {
  _has_bits_[0] |= 0x00000002u;
  if (registered_nfc_f_services_cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto>(GetArenaNoVirtual());
    registered_nfc_f_services_cache_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_nfc_f_services_cache)
  return registered_nfc_f_services_cache_;
}
inline void CardEmulationManagerProto::set_allocated_registered_nfc_f_services_cache(::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* registered_nfc_f_services_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete registered_nfc_f_services_cache_;
  }
  if (registered_nfc_f_services_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registered_nfc_f_services_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registered_nfc_f_services_cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  registered_nfc_f_services_cache_ = registered_nfc_f_services_cache;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.registered_nfc_f_services_cache)
}

// optional .com.android.nfc.cardemulation.PreferredServicesProto preferred_services = 3;
inline bool CardEmulationManagerProto::has_preferred_services() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardEmulationManagerProto::clear_preferred_services() {
  if (preferred_services_ != nullptr) preferred_services_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::nfc::cardemulation::PreferredServicesProto& CardEmulationManagerProto::preferred_services() const {
  const ::com::android::nfc::cardemulation::PreferredServicesProto* p = preferred_services_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.preferred_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::PreferredServicesProto*>(
      &::com::android::nfc::cardemulation::_PreferredServicesProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::PreferredServicesProto* CardEmulationManagerProto::release_preferred_services() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.preferred_services)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::nfc::cardemulation::PreferredServicesProto* temp = preferred_services_;
  preferred_services_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::PreferredServicesProto* CardEmulationManagerProto::mutable_preferred_services() {
  _has_bits_[0] |= 0x00000004u;
  if (preferred_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::PreferredServicesProto>(GetArenaNoVirtual());
    preferred_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.preferred_services)
  return preferred_services_;
}
inline void CardEmulationManagerProto::set_allocated_preferred_services(::com::android::nfc::cardemulation::PreferredServicesProto* preferred_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete preferred_services_;
  }
  if (preferred_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferred_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferred_services, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preferred_services_ = preferred_services;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.preferred_services)
}

// optional .com.android.nfc.cardemulation.EnabledNfcFServicesProto enabled_nfc_f_services = 4;
inline bool CardEmulationManagerProto::has_enabled_nfc_f_services() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardEmulationManagerProto::clear_enabled_nfc_f_services() {
  if (enabled_nfc_f_services_ != nullptr) enabled_nfc_f_services_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::nfc::cardemulation::EnabledNfcFServicesProto& CardEmulationManagerProto::enabled_nfc_f_services() const {
  const ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* p = enabled_nfc_f_services_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.enabled_nfc_f_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::EnabledNfcFServicesProto*>(
      &::com::android::nfc::cardemulation::_EnabledNfcFServicesProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* CardEmulationManagerProto::release_enabled_nfc_f_services() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.enabled_nfc_f_services)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* temp = enabled_nfc_f_services_;
  enabled_nfc_f_services_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* CardEmulationManagerProto::mutable_enabled_nfc_f_services() {
  _has_bits_[0] |= 0x00000008u;
  if (enabled_nfc_f_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::EnabledNfcFServicesProto>(GetArenaNoVirtual());
    enabled_nfc_f_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.enabled_nfc_f_services)
  return enabled_nfc_f_services_;
}
inline void CardEmulationManagerProto::set_allocated_enabled_nfc_f_services(::com::android::nfc::cardemulation::EnabledNfcFServicesProto* enabled_nfc_f_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete enabled_nfc_f_services_;
  }
  if (enabled_nfc_f_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_nfc_f_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_nfc_f_services, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  enabled_nfc_f_services_ = enabled_nfc_f_services;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.enabled_nfc_f_services)
}

// optional .com.android.nfc.cardemulation.RegisteredAidCacheProto aid_cache = 5;
inline bool CardEmulationManagerProto::has_aid_cache() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardEmulationManagerProto::clear_aid_cache() {
  if (aid_cache_ != nullptr) aid_cache_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::nfc::cardemulation::RegisteredAidCacheProto& CardEmulationManagerProto::aid_cache() const {
  const ::com::android::nfc::cardemulation::RegisteredAidCacheProto* p = aid_cache_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.aid_cache)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::RegisteredAidCacheProto*>(
      &::com::android::nfc::cardemulation::_RegisteredAidCacheProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::RegisteredAidCacheProto* CardEmulationManagerProto::release_aid_cache() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.aid_cache)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto* temp = aid_cache_;
  aid_cache_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::RegisteredAidCacheProto* CardEmulationManagerProto::mutable_aid_cache() {
  _has_bits_[0] |= 0x00000010u;
  if (aid_cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredAidCacheProto>(GetArenaNoVirtual());
    aid_cache_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.aid_cache)
  return aid_cache_;
}
inline void CardEmulationManagerProto::set_allocated_aid_cache(::com::android::nfc::cardemulation::RegisteredAidCacheProto* aid_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete aid_cache_;
  }
  if (aid_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aid_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aid_cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  aid_cache_ = aid_cache;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.aid_cache)
}

// optional .com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto t3t_identifiers_cache = 6;
inline bool CardEmulationManagerProto::has_t3t_identifiers_cache() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CardEmulationManagerProto::clear_t3t_identifiers_cache() {
  if (t3t_identifiers_cache_ != nullptr) t3t_identifiers_cache_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto& CardEmulationManagerProto::t3t_identifiers_cache() const {
  const ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* p = t3t_identifiers_cache_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.t3t_identifiers_cache)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto*>(
      &::com::android::nfc::cardemulation::_RegisteredT3tIdentifiersCacheProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* CardEmulationManagerProto::release_t3t_identifiers_cache() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.t3t_identifiers_cache)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* temp = t3t_identifiers_cache_;
  t3t_identifiers_cache_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* CardEmulationManagerProto::mutable_t3t_identifiers_cache() {
  _has_bits_[0] |= 0x00000020u;
  if (t3t_identifiers_cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto>(GetArenaNoVirtual());
    t3t_identifiers_cache_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.t3t_identifiers_cache)
  return t3t_identifiers_cache_;
}
inline void CardEmulationManagerProto::set_allocated_t3t_identifiers_cache(::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* t3t_identifiers_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete t3t_identifiers_cache_;
  }
  if (t3t_identifiers_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t3t_identifiers_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t3t_identifiers_cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  t3t_identifiers_cache_ = t3t_identifiers_cache;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.t3t_identifiers_cache)
}

// optional .com.android.nfc.cardemulation.HostEmulationManagerProto host_emulation_manager = 7;
inline bool CardEmulationManagerProto::has_host_emulation_manager() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CardEmulationManagerProto::clear_host_emulation_manager() {
  if (host_emulation_manager_ != nullptr) host_emulation_manager_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::nfc::cardemulation::HostEmulationManagerProto& CardEmulationManagerProto::host_emulation_manager() const {
  const ::com::android::nfc::cardemulation::HostEmulationManagerProto* p = host_emulation_manager_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.host_emulation_manager)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::HostEmulationManagerProto*>(
      &::com::android::nfc::cardemulation::_HostEmulationManagerProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::HostEmulationManagerProto* CardEmulationManagerProto::release_host_emulation_manager() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.host_emulation_manager)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::nfc::cardemulation::HostEmulationManagerProto* temp = host_emulation_manager_;
  host_emulation_manager_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::HostEmulationManagerProto* CardEmulationManagerProto::mutable_host_emulation_manager() {
  _has_bits_[0] |= 0x00000040u;
  if (host_emulation_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::HostEmulationManagerProto>(GetArenaNoVirtual());
    host_emulation_manager_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.host_emulation_manager)
  return host_emulation_manager_;
}
inline void CardEmulationManagerProto::set_allocated_host_emulation_manager(::com::android::nfc::cardemulation::HostEmulationManagerProto* host_emulation_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete host_emulation_manager_;
  }
  if (host_emulation_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host_emulation_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_emulation_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  host_emulation_manager_ = host_emulation_manager;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.host_emulation_manager)
}

// optional .com.android.nfc.cardemulation.HostNfcFEmulationManagerProto host_nfc_f_emulation_manager = 8;
inline bool CardEmulationManagerProto::has_host_nfc_f_emulation_manager() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CardEmulationManagerProto::clear_host_nfc_f_emulation_manager() {
  if (host_nfc_f_emulation_manager_ != nullptr) host_nfc_f_emulation_manager_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto& CardEmulationManagerProto::host_nfc_f_emulation_manager() const {
  const ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* p = host_nfc_f_emulation_manager_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.CardEmulationManagerProto.host_nfc_f_emulation_manager)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto*>(
      &::com::android::nfc::cardemulation::_HostNfcFEmulationManagerProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* CardEmulationManagerProto::release_host_nfc_f_emulation_manager() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.CardEmulationManagerProto.host_nfc_f_emulation_manager)
  _has_bits_[0] &= ~0x00000080u;
  ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* temp = host_nfc_f_emulation_manager_;
  host_nfc_f_emulation_manager_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* CardEmulationManagerProto::mutable_host_nfc_f_emulation_manager() {
  _has_bits_[0] |= 0x00000080u;
  if (host_nfc_f_emulation_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto>(GetArenaNoVirtual());
    host_nfc_f_emulation_manager_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.CardEmulationManagerProto.host_nfc_f_emulation_manager)
  return host_nfc_f_emulation_manager_;
}
inline void CardEmulationManagerProto::set_allocated_host_nfc_f_emulation_manager(::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* host_nfc_f_emulation_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete host_nfc_f_emulation_manager_;
  }
  if (host_nfc_f_emulation_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host_nfc_f_emulation_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_nfc_f_emulation_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  host_nfc_f_emulation_manager_ = host_nfc_f_emulation_manager;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.CardEmulationManagerProto.host_nfc_f_emulation_manager)
}

// -------------------------------------------------------------------

// RegisteredServicesCacheProto

// repeated .android.nfc.cardemulation.ApduServiceInfoProto apdu_service_infos = 1;
inline int RegisteredServicesCacheProto::apdu_service_infos_size() const {
  return apdu_service_infos_.size();
}
inline ::android::nfc::cardemulation::ApduServiceInfoProto* RegisteredServicesCacheProto::mutable_apdu_service_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredServicesCacheProto.apdu_service_infos)
  return apdu_service_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >*
RegisteredServicesCacheProto::mutable_apdu_service_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.RegisteredServicesCacheProto.apdu_service_infos)
  return &apdu_service_infos_;
}
inline const ::android::nfc::cardemulation::ApduServiceInfoProto& RegisteredServicesCacheProto::apdu_service_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredServicesCacheProto.apdu_service_infos)
  return apdu_service_infos_.Get(index);
}
inline ::android::nfc::cardemulation::ApduServiceInfoProto* RegisteredServicesCacheProto::add_apdu_service_infos() {
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.RegisteredServicesCacheProto.apdu_service_infos)
  return apdu_service_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >&
RegisteredServicesCacheProto::apdu_service_infos() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.RegisteredServicesCacheProto.apdu_service_infos)
  return apdu_service_infos_;
}

// -------------------------------------------------------------------

// RegisteredNfcFServicesCacheProto

// repeated .android.nfc.cardemulation.NfcFServiceInfoProto nfc_fservice_info = 1;
inline int RegisteredNfcFServicesCacheProto::nfc_fservice_info_size() const {
  return nfc_fservice_info_.size();
}
inline ::android::nfc::cardemulation::NfcFServiceInfoProto* RegisteredNfcFServicesCacheProto::mutable_nfc_fservice_info(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto.nfc_fservice_info)
  return nfc_fservice_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >*
RegisteredNfcFServicesCacheProto::mutable_nfc_fservice_info() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto.nfc_fservice_info)
  return &nfc_fservice_info_;
}
inline const ::android::nfc::cardemulation::NfcFServiceInfoProto& RegisteredNfcFServicesCacheProto::nfc_fservice_info(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto.nfc_fservice_info)
  return nfc_fservice_info_.Get(index);
}
inline ::android::nfc::cardemulation::NfcFServiceInfoProto* RegisteredNfcFServicesCacheProto::add_nfc_fservice_info() {
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto.nfc_fservice_info)
  return nfc_fservice_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >&
RegisteredNfcFServicesCacheProto::nfc_fservice_info() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto.nfc_fservice_info)
  return nfc_fservice_info_;
}

// -------------------------------------------------------------------

// PreferredServicesProto

// optional .android.content.ComponentNameProto foreground_current = 1;
inline bool PreferredServicesProto::has_foreground_current() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ComponentNameProto& PreferredServicesProto::foreground_current() const {
  const ::android::content::ComponentNameProto* p = foreground_current_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.PreferredServicesProto.foreground_current)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::release_foreground_current() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.PreferredServicesProto.foreground_current)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ComponentNameProto* temp = foreground_current_;
  foreground_current_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::mutable_foreground_current() {
  _has_bits_[0] |= 0x00000001u;
  if (foreground_current_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    foreground_current_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.PreferredServicesProto.foreground_current)
  return foreground_current_;
}
inline void PreferredServicesProto::set_allocated_foreground_current(::android::content::ComponentNameProto* foreground_current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_current_);
  }
  if (foreground_current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground_current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground_current, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  foreground_current_ = foreground_current;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.PreferredServicesProto.foreground_current)
}

// optional .android.content.ComponentNameProto current_preferred = 2;
inline bool PreferredServicesProto::has_current_preferred() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::ComponentNameProto& PreferredServicesProto::current_preferred() const {
  const ::android::content::ComponentNameProto* p = current_preferred_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.PreferredServicesProto.current_preferred)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::release_current_preferred() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.PreferredServicesProto.current_preferred)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ComponentNameProto* temp = current_preferred_;
  current_preferred_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::mutable_current_preferred() {
  _has_bits_[0] |= 0x00000002u;
  if (current_preferred_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    current_preferred_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.PreferredServicesProto.current_preferred)
  return current_preferred_;
}
inline void PreferredServicesProto::set_allocated_current_preferred(::android::content::ComponentNameProto* current_preferred) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_preferred_);
  }
  if (current_preferred) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_preferred = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_preferred, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_preferred_ = current_preferred;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.PreferredServicesProto.current_preferred)
}

// optional .android.content.ComponentNameProto next_tap_default = 3;
inline bool PreferredServicesProto::has_next_tap_default() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::content::ComponentNameProto& PreferredServicesProto::next_tap_default() const {
  const ::android::content::ComponentNameProto* p = next_tap_default_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.PreferredServicesProto.next_tap_default)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::release_next_tap_default() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.PreferredServicesProto.next_tap_default)
  _has_bits_[0] &= ~0x00000004u;
  ::android::content::ComponentNameProto* temp = next_tap_default_;
  next_tap_default_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::mutable_next_tap_default() {
  _has_bits_[0] |= 0x00000004u;
  if (next_tap_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    next_tap_default_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.PreferredServicesProto.next_tap_default)
  return next_tap_default_;
}
inline void PreferredServicesProto::set_allocated_next_tap_default(::android::content::ComponentNameProto* next_tap_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_tap_default_);
  }
  if (next_tap_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      next_tap_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_tap_default, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  next_tap_default_ = next_tap_default;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.PreferredServicesProto.next_tap_default)
}

// optional int32 foreground_uid = 4;
inline bool PreferredServicesProto::has_foreground_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PreferredServicesProto::clear_foreground_uid() {
  foreground_uid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PreferredServicesProto::foreground_uid() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.PreferredServicesProto.foreground_uid)
  return foreground_uid_;
}
inline void PreferredServicesProto::set_foreground_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  foreground_uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.PreferredServicesProto.foreground_uid)
}

// optional .android.content.ComponentNameProto foreground_requested = 5;
inline bool PreferredServicesProto::has_foreground_requested() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::content::ComponentNameProto& PreferredServicesProto::foreground_requested() const {
  const ::android::content::ComponentNameProto* p = foreground_requested_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.PreferredServicesProto.foreground_requested)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::release_foreground_requested() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.PreferredServicesProto.foreground_requested)
  _has_bits_[0] &= ~0x00000008u;
  ::android::content::ComponentNameProto* temp = foreground_requested_;
  foreground_requested_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::mutable_foreground_requested() {
  _has_bits_[0] |= 0x00000008u;
  if (foreground_requested_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    foreground_requested_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.PreferredServicesProto.foreground_requested)
  return foreground_requested_;
}
inline void PreferredServicesProto::set_allocated_foreground_requested(::android::content::ComponentNameProto* foreground_requested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_requested_);
  }
  if (foreground_requested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground_requested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground_requested, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  foreground_requested_ = foreground_requested;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.PreferredServicesProto.foreground_requested)
}

// optional .android.content.ComponentNameProto settings_default = 6;
inline bool PreferredServicesProto::has_settings_default() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::content::ComponentNameProto& PreferredServicesProto::settings_default() const {
  const ::android::content::ComponentNameProto* p = settings_default_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.PreferredServicesProto.settings_default)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::release_settings_default() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.PreferredServicesProto.settings_default)
  _has_bits_[0] &= ~0x00000010u;
  ::android::content::ComponentNameProto* temp = settings_default_;
  settings_default_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* PreferredServicesProto::mutable_settings_default() {
  _has_bits_[0] |= 0x00000010u;
  if (settings_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    settings_default_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.PreferredServicesProto.settings_default)
  return settings_default_;
}
inline void PreferredServicesProto::set_allocated_settings_default(::android::content::ComponentNameProto* settings_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_default_);
  }
  if (settings_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_default, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  settings_default_ = settings_default;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.PreferredServicesProto.settings_default)
}

// optional bool prefer_foreground = 7;
inline bool PreferredServicesProto::has_prefer_foreground() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PreferredServicesProto::clear_prefer_foreground() {
  prefer_foreground_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PreferredServicesProto::prefer_foreground() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.PreferredServicesProto.prefer_foreground)
  return prefer_foreground_;
}
inline void PreferredServicesProto::set_prefer_foreground(bool value) {
  _has_bits_[0] |= 0x00000040u;
  prefer_foreground_ = value;
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.PreferredServicesProto.prefer_foreground)
}

// -------------------------------------------------------------------

// EnabledNfcFServicesProto

// optional .android.content.ComponentNameProto foreground_component = 1;
inline bool EnabledNfcFServicesProto::has_foreground_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ComponentNameProto& EnabledNfcFServicesProto::foreground_component() const {
  const ::android::content::ComponentNameProto* p = foreground_component_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* EnabledNfcFServicesProto::release_foreground_component() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_component)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ComponentNameProto* temp = foreground_component_;
  foreground_component_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* EnabledNfcFServicesProto::mutable_foreground_component() {
  _has_bits_[0] |= 0x00000001u;
  if (foreground_component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    foreground_component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_component)
  return foreground_component_;
}
inline void EnabledNfcFServicesProto::set_allocated_foreground_component(::android::content::ComponentNameProto* foreground_component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_component_);
  }
  if (foreground_component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground_component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground_component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  foreground_component_ = foreground_component;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_component)
}

// optional .android.content.ComponentNameProto foreground_requested = 2;
inline bool EnabledNfcFServicesProto::has_foreground_requested() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::ComponentNameProto& EnabledNfcFServicesProto::foreground_requested() const {
  const ::android::content::ComponentNameProto* p = foreground_requested_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_requested)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* EnabledNfcFServicesProto::release_foreground_requested() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_requested)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ComponentNameProto* temp = foreground_requested_;
  foreground_requested_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* EnabledNfcFServicesProto::mutable_foreground_requested() {
  _has_bits_[0] |= 0x00000002u;
  if (foreground_requested_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    foreground_requested_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_requested)
  return foreground_requested_;
}
inline void EnabledNfcFServicesProto::set_allocated_foreground_requested(::android::content::ComponentNameProto* foreground_requested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_requested_);
  }
  if (foreground_requested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground_requested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground_requested, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  foreground_requested_ = foreground_requested;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_requested)
}

// optional bool activated = 3;
inline bool EnabledNfcFServicesProto::has_activated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnabledNfcFServicesProto::clear_activated() {
  activated_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool EnabledNfcFServicesProto::activated() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.EnabledNfcFServicesProto.activated)
  return activated_;
}
inline void EnabledNfcFServicesProto::set_activated(bool value) {
  _has_bits_[0] |= 0x00000004u;
  activated_ = value;
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.EnabledNfcFServicesProto.activated)
}

// optional bool compute_fg_requested = 4;
inline bool EnabledNfcFServicesProto::has_compute_fg_requested() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnabledNfcFServicesProto::clear_compute_fg_requested() {
  compute_fg_requested_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool EnabledNfcFServicesProto::compute_fg_requested() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.EnabledNfcFServicesProto.compute_fg_requested)
  return compute_fg_requested_;
}
inline void EnabledNfcFServicesProto::set_compute_fg_requested(bool value) {
  _has_bits_[0] |= 0x00000008u;
  compute_fg_requested_ = value;
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.EnabledNfcFServicesProto.compute_fg_requested)
}

// optional int32 foreground_uid = 5;
inline bool EnabledNfcFServicesProto::has_foreground_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnabledNfcFServicesProto::clear_foreground_uid() {
  foreground_uid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnabledNfcFServicesProto::foreground_uid() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_uid)
  return foreground_uid_;
}
inline void EnabledNfcFServicesProto::set_foreground_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  foreground_uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.EnabledNfcFServicesProto.foreground_uid)
}

// -------------------------------------------------------------------

// RegisteredAidCacheProto_AidCacheEntry

// optional string key = 1 [(.android.privacy) = {
inline bool RegisteredAidCacheProto_AidCacheEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisteredAidCacheProto_AidCacheEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisteredAidCacheProto_AidCacheEntry::key() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
  return key_.GetNoArena();
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
}
inline std::string* RegisteredAidCacheProto_AidCacheEntry::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisteredAidCacheProto_AidCacheEntry::release_key() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.key)
}

// optional string category = 2 [(.android.privacy) = {
inline bool RegisteredAidCacheProto_AidCacheEntry::has_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisteredAidCacheProto_AidCacheEntry::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegisteredAidCacheProto_AidCacheEntry::category() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
  return category_.GetNoArena();
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_category(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_category(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
}
inline std::string* RegisteredAidCacheProto_AidCacheEntry::mutable_category() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisteredAidCacheProto_AidCacheEntry::release_category() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
  if (!has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return category_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.category)
}

// optional .android.content.ComponentNameProto default_component = 3;
inline bool RegisteredAidCacheProto_AidCacheEntry::has_default_component() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::content::ComponentNameProto& RegisteredAidCacheProto_AidCacheEntry::default_component() const {
  const ::android::content::ComponentNameProto* p = default_component_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.default_component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* RegisteredAidCacheProto_AidCacheEntry::release_default_component() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.default_component)
  _has_bits_[0] &= ~0x00000004u;
  ::android::content::ComponentNameProto* temp = default_component_;
  default_component_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* RegisteredAidCacheProto_AidCacheEntry::mutable_default_component() {
  _has_bits_[0] |= 0x00000004u;
  if (default_component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    default_component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.default_component)
  return default_component_;
}
inline void RegisteredAidCacheProto_AidCacheEntry::set_allocated_default_component(::android::content::ComponentNameProto* default_component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_component_);
  }
  if (default_component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  default_component_ = default_component;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.default_component)
}

// repeated .android.nfc.cardemulation.ApduServiceInfoProto services = 4;
inline int RegisteredAidCacheProto_AidCacheEntry::services_size() const {
  return services_.size();
}
inline ::android::nfc::cardemulation::ApduServiceInfoProto* RegisteredAidCacheProto_AidCacheEntry::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >*
RegisteredAidCacheProto_AidCacheEntry::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.services)
  return &services_;
}
inline const ::android::nfc::cardemulation::ApduServiceInfoProto& RegisteredAidCacheProto_AidCacheEntry::services(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.services)
  return services_.Get(index);
}
inline ::android::nfc::cardemulation::ApduServiceInfoProto* RegisteredAidCacheProto_AidCacheEntry::add_services() {
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.services)
  return services_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::ApduServiceInfoProto >&
RegisteredAidCacheProto_AidCacheEntry::services() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry.services)
  return services_;
}

// -------------------------------------------------------------------

// RegisteredAidCacheProto

// repeated .com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry aid_cache_entries = 1;
inline int RegisteredAidCacheProto::aid_cache_entries_size() const {
  return aid_cache_entries_.size();
}
inline void RegisteredAidCacheProto::clear_aid_cache_entries() {
  aid_cache_entries_.Clear();
}
inline ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry* RegisteredAidCacheProto::mutable_aid_cache_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.aid_cache_entries)
  return aid_cache_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry >*
RegisteredAidCacheProto::mutable_aid_cache_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.RegisteredAidCacheProto.aid_cache_entries)
  return &aid_cache_entries_;
}
inline const ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry& RegisteredAidCacheProto::aid_cache_entries(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.aid_cache_entries)
  return aid_cache_entries_.Get(index);
}
inline ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry* RegisteredAidCacheProto::add_aid_cache_entries() {
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.RegisteredAidCacheProto.aid_cache_entries)
  return aid_cache_entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry >&
RegisteredAidCacheProto::aid_cache_entries() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.RegisteredAidCacheProto.aid_cache_entries)
  return aid_cache_entries_;
}

// optional .android.content.ComponentNameProto preferred_foreground_service = 2;
inline bool RegisteredAidCacheProto::has_preferred_foreground_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ComponentNameProto& RegisteredAidCacheProto::preferred_foreground_service() const {
  const ::android::content::ComponentNameProto* p = preferred_foreground_service_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_foreground_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* RegisteredAidCacheProto::release_preferred_foreground_service() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_foreground_service)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ComponentNameProto* temp = preferred_foreground_service_;
  preferred_foreground_service_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* RegisteredAidCacheProto::mutable_preferred_foreground_service() {
  _has_bits_[0] |= 0x00000001u;
  if (preferred_foreground_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    preferred_foreground_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_foreground_service)
  return preferred_foreground_service_;
}
inline void RegisteredAidCacheProto::set_allocated_preferred_foreground_service(::android::content::ComponentNameProto* preferred_foreground_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferred_foreground_service_);
  }
  if (preferred_foreground_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferred_foreground_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferred_foreground_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferred_foreground_service_ = preferred_foreground_service;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_foreground_service)
}

// optional .android.content.ComponentNameProto preferred_payment_service = 3;
inline bool RegisteredAidCacheProto::has_preferred_payment_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::ComponentNameProto& RegisteredAidCacheProto::preferred_payment_service() const {
  const ::android::content::ComponentNameProto* p = preferred_payment_service_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_payment_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* RegisteredAidCacheProto::release_preferred_payment_service() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_payment_service)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ComponentNameProto* temp = preferred_payment_service_;
  preferred_payment_service_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* RegisteredAidCacheProto::mutable_preferred_payment_service() {
  _has_bits_[0] |= 0x00000002u;
  if (preferred_payment_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    preferred_payment_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_payment_service)
  return preferred_payment_service_;
}
inline void RegisteredAidCacheProto::set_allocated_preferred_payment_service(::android::content::ComponentNameProto* preferred_payment_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferred_payment_service_);
  }
  if (preferred_payment_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferred_payment_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferred_payment_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preferred_payment_service_ = preferred_payment_service;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.RegisteredAidCacheProto.preferred_payment_service)
}

// optional .com.android.nfc.cardemulation.AidRoutingManagerProto routing_manager = 4;
inline bool RegisteredAidCacheProto::has_routing_manager() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisteredAidCacheProto::clear_routing_manager() {
  if (routing_manager_ != nullptr) routing_manager_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::nfc::cardemulation::AidRoutingManagerProto& RegisteredAidCacheProto::routing_manager() const {
  const ::com::android::nfc::cardemulation::AidRoutingManagerProto* p = routing_manager_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredAidCacheProto.routing_manager)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::AidRoutingManagerProto*>(
      &::com::android::nfc::cardemulation::_AidRoutingManagerProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::AidRoutingManagerProto* RegisteredAidCacheProto::release_routing_manager() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.RegisteredAidCacheProto.routing_manager)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::nfc::cardemulation::AidRoutingManagerProto* temp = routing_manager_;
  routing_manager_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::AidRoutingManagerProto* RegisteredAidCacheProto::mutable_routing_manager() {
  _has_bits_[0] |= 0x00000004u;
  if (routing_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::AidRoutingManagerProto>(GetArenaNoVirtual());
    routing_manager_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredAidCacheProto.routing_manager)
  return routing_manager_;
}
inline void RegisteredAidCacheProto::set_allocated_routing_manager(::com::android::nfc::cardemulation::AidRoutingManagerProto* routing_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete routing_manager_;
  }
  if (routing_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  routing_manager_ = routing_manager;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.RegisteredAidCacheProto.routing_manager)
}

// -------------------------------------------------------------------

// AidRoutingManagerProto_Route

// optional int32 id = 1;
inline bool AidRoutingManagerProto_Route::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AidRoutingManagerProto_Route::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidRoutingManagerProto_Route::id() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.id)
  return id_;
}
inline void AidRoutingManagerProto_Route::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.id)
}

// repeated string aids = 2 [(.android.privacy) = {
inline int AidRoutingManagerProto_Route::aids_size() const {
  return aids_.size();
}
inline void AidRoutingManagerProto_Route::clear_aids() {
  aids_.Clear();
}
inline const std::string& AidRoutingManagerProto_Route::aids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
  return aids_.Get(index);
}
inline std::string* AidRoutingManagerProto_Route::mutable_aids(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
  return aids_.Mutable(index);
}
inline void AidRoutingManagerProto_Route::set_aids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
  aids_.Mutable(index)->assign(value);
}
inline void AidRoutingManagerProto_Route::set_aids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
  aids_.Mutable(index)->assign(std::move(value));
}
inline void AidRoutingManagerProto_Route::set_aids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
}
inline void AidRoutingManagerProto_Route::set_aids(int index, const char* value, size_t size) {
  aids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
}
inline std::string* AidRoutingManagerProto_Route::add_aids() {
  // @@protoc_insertion_point(field_add_mutable:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
  return aids_.Add();
}
inline void AidRoutingManagerProto_Route::add_aids(const std::string& value) {
  aids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
}
inline void AidRoutingManagerProto_Route::add_aids(std::string&& value) {
  aids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
}
inline void AidRoutingManagerProto_Route::add_aids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
}
inline void AidRoutingManagerProto_Route::add_aids(const char* value, size_t size) {
  aids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AidRoutingManagerProto_Route::aids() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
  return aids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AidRoutingManagerProto_Route::mutable_aids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.AidRoutingManagerProto.Route.aids)
  return &aids_;
}

// -------------------------------------------------------------------

// AidRoutingManagerProto

// optional int32 default_route = 1;
inline bool AidRoutingManagerProto::has_default_route() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AidRoutingManagerProto::clear_default_route() {
  default_route_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidRoutingManagerProto::default_route() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.AidRoutingManagerProto.default_route)
  return default_route_;
}
inline void AidRoutingManagerProto::set_default_route(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  default_route_ = value;
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.AidRoutingManagerProto.default_route)
}

// repeated .com.android.nfc.cardemulation.AidRoutingManagerProto.Route routes = 2;
inline int AidRoutingManagerProto::routes_size() const {
  return routes_.size();
}
inline void AidRoutingManagerProto::clear_routes() {
  routes_.Clear();
}
inline ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route* AidRoutingManagerProto::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.AidRoutingManagerProto.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route >*
AidRoutingManagerProto::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.AidRoutingManagerProto.routes)
  return &routes_;
}
inline const ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route& AidRoutingManagerProto::routes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.AidRoutingManagerProto.routes)
  return routes_.Get(index);
}
inline ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route* AidRoutingManagerProto::add_routes() {
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.AidRoutingManagerProto.routes)
  return routes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route >&
AidRoutingManagerProto::routes() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.AidRoutingManagerProto.routes)
  return routes_;
}

// -------------------------------------------------------------------

// RegisteredT3tIdentifiersCacheProto

// repeated .android.nfc.cardemulation.NfcFServiceInfoProto t3t_identifier_cache_entries = 1;
inline int RegisteredT3tIdentifiersCacheProto::t3t_identifier_cache_entries_size() const {
  return t3t_identifier_cache_entries_.size();
}
inline ::android::nfc::cardemulation::NfcFServiceInfoProto* RegisteredT3tIdentifiersCacheProto::mutable_t3t_identifier_cache_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.t3t_identifier_cache_entries)
  return t3t_identifier_cache_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >*
RegisteredT3tIdentifiersCacheProto::mutable_t3t_identifier_cache_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.t3t_identifier_cache_entries)
  return &t3t_identifier_cache_entries_;
}
inline const ::android::nfc::cardemulation::NfcFServiceInfoProto& RegisteredT3tIdentifiersCacheProto::t3t_identifier_cache_entries(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.t3t_identifier_cache_entries)
  return t3t_identifier_cache_entries_.Get(index);
}
inline ::android::nfc::cardemulation::NfcFServiceInfoProto* RegisteredT3tIdentifiersCacheProto::add_t3t_identifier_cache_entries() {
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.t3t_identifier_cache_entries)
  return t3t_identifier_cache_entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::nfc::cardemulation::NfcFServiceInfoProto >&
RegisteredT3tIdentifiersCacheProto::t3t_identifier_cache_entries() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.t3t_identifier_cache_entries)
  return t3t_identifier_cache_entries_;
}

// optional .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto routing_manager = 2;
inline bool RegisteredT3tIdentifiersCacheProto::has_routing_manager() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisteredT3tIdentifiersCacheProto::clear_routing_manager() {
  if (routing_manager_ != nullptr) routing_manager_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto& RegisteredT3tIdentifiersCacheProto::routing_manager() const {
  const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* p = routing_manager_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.routing_manager)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto*>(
      &::com::android::nfc::cardemulation::_SystemCodeRoutingManagerProto_default_instance_);
}
inline ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* RegisteredT3tIdentifiersCacheProto::release_routing_manager() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.routing_manager)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* temp = routing_manager_;
  routing_manager_ = nullptr;
  return temp;
}
inline ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* RegisteredT3tIdentifiersCacheProto::mutable_routing_manager() {
  _has_bits_[0] |= 0x00000001u;
  if (routing_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto>(GetArenaNoVirtual());
    routing_manager_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.routing_manager)
  return routing_manager_;
}
inline void RegisteredT3tIdentifiersCacheProto::set_allocated_routing_manager(::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* routing_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete routing_manager_;
  }
  if (routing_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  routing_manager_ = routing_manager;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto.routing_manager)
}

// -------------------------------------------------------------------

// SystemCodeRoutingManagerProto_T3tIdentifier

// optional string system_code = 1;
inline bool SystemCodeRoutingManagerProto_T3tIdentifier::has_system_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::clear_system_code() {
  system_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemCodeRoutingManagerProto_T3tIdentifier::system_code() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
  return system_code_.GetNoArena();
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_system_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  system_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_system_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  system_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_system_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  system_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_system_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  system_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
}
inline std::string* SystemCodeRoutingManagerProto_T3tIdentifier::mutable_system_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
  return system_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemCodeRoutingManagerProto_T3tIdentifier::release_system_code() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
  if (!has_system_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return system_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_allocated_system_code(std::string* system_code) {
  if (system_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  system_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_code);
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.system_code)
}

// optional string nfcid2 = 2;
inline bool SystemCodeRoutingManagerProto_T3tIdentifier::has_nfcid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::clear_nfcid2() {
  nfcid2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemCodeRoutingManagerProto_T3tIdentifier::nfcid2() const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
  return nfcid2_.GetNoArena();
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_nfcid2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nfcid2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_nfcid2(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nfcid2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_nfcid2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nfcid2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_nfcid2(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nfcid2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
}
inline std::string* SystemCodeRoutingManagerProto_T3tIdentifier::mutable_nfcid2() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
  return nfcid2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemCodeRoutingManagerProto_T3tIdentifier::release_nfcid2() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
  if (!has_nfcid2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nfcid2_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemCodeRoutingManagerProto_T3tIdentifier::set_allocated_nfcid2(std::string* nfcid2) {
  if (nfcid2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nfcid2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nfcid2);
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier.nfcid2)
}

// -------------------------------------------------------------------

// SystemCodeRoutingManagerProto

// repeated .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier t3t_identifiers = 1;
inline int SystemCodeRoutingManagerProto::t3t_identifiers_size() const {
  return t3t_identifiers_.size();
}
inline void SystemCodeRoutingManagerProto::clear_t3t_identifiers() {
  t3t_identifiers_.Clear();
}
inline ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier* SystemCodeRoutingManagerProto::mutable_t3t_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.t3t_identifiers)
  return t3t_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier >*
SystemCodeRoutingManagerProto::mutable_t3t_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.t3t_identifiers)
  return &t3t_identifiers_;
}
inline const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier& SystemCodeRoutingManagerProto::t3t_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.t3t_identifiers)
  return t3t_identifiers_.Get(index);
}
inline ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier* SystemCodeRoutingManagerProto::add_t3t_identifiers() {
  // @@protoc_insertion_point(field_add:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.t3t_identifiers)
  return t3t_identifiers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier >&
SystemCodeRoutingManagerProto::t3t_identifiers() const {
  // @@protoc_insertion_point(field_list:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.t3t_identifiers)
  return t3t_identifiers_;
}

// -------------------------------------------------------------------

// HostEmulationManagerProto

// optional .android.content.ComponentNameProto payment_service_name = 1;
inline bool HostEmulationManagerProto::has_payment_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ComponentNameProto& HostEmulationManagerProto::payment_service_name() const {
  const ::android::content::ComponentNameProto* p = payment_service_name_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.HostEmulationManagerProto.payment_service_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* HostEmulationManagerProto::release_payment_service_name() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.HostEmulationManagerProto.payment_service_name)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ComponentNameProto* temp = payment_service_name_;
  payment_service_name_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* HostEmulationManagerProto::mutable_payment_service_name() {
  _has_bits_[0] |= 0x00000001u;
  if (payment_service_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    payment_service_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.HostEmulationManagerProto.payment_service_name)
  return payment_service_name_;
}
inline void HostEmulationManagerProto::set_allocated_payment_service_name(::android::content::ComponentNameProto* payment_service_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment_service_name_);
  }
  if (payment_service_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_service_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_service_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payment_service_name_ = payment_service_name;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.HostEmulationManagerProto.payment_service_name)
}

// optional .android.content.ComponentNameProto service_name = 2;
inline bool HostEmulationManagerProto::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::ComponentNameProto& HostEmulationManagerProto::service_name() const {
  const ::android::content::ComponentNameProto* p = service_name_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.HostEmulationManagerProto.service_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* HostEmulationManagerProto::release_service_name() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.HostEmulationManagerProto.service_name)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ComponentNameProto* temp = service_name_;
  service_name_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* HostEmulationManagerProto::mutable_service_name() {
  _has_bits_[0] |= 0x00000002u;
  if (service_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    service_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.HostEmulationManagerProto.service_name)
  return service_name_;
}
inline void HostEmulationManagerProto::set_allocated_service_name(::android::content::ComponentNameProto* service_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_name_);
  }
  if (service_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  service_name_ = service_name;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.HostEmulationManagerProto.service_name)
}

// -------------------------------------------------------------------

// HostNfcFEmulationManagerProto

// optional .android.content.ComponentNameProto service_name = 1;
inline bool HostNfcFEmulationManagerProto::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ComponentNameProto& HostNfcFEmulationManagerProto::service_name() const {
  const ::android::content::ComponentNameProto* p = service_name_;
  // @@protoc_insertion_point(field_get:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto.service_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* HostNfcFEmulationManagerProto::release_service_name() {
  // @@protoc_insertion_point(field_release:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto.service_name)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ComponentNameProto* temp = service_name_;
  service_name_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* HostNfcFEmulationManagerProto::mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  if (service_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    service_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto.service_name)
  return service_name_;
}
inline void HostNfcFEmulationManagerProto::set_allocated_service_name(::android::content::ComponentNameProto* service_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_name_);
  }
  if (service_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_ = service_name;
  // @@protoc_insertion_point(field_set_allocated:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto.service_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cardemulation
}  // namespace nfc
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto
