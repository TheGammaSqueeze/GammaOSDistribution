// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/cpu_usage.proto

#include "frameworks/base/core/proto/android/os/cpu_usage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUsageProto_Load_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto;
namespace android {
namespace os {
class CpuUsageProto_LoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuUsageProto_Load> _instance;
} _CpuUsageProto_Load_default_instance_;
class CpuUsageProto_StatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuUsageProto_Stat> _instance;
} _CpuUsageProto_Stat_default_instance_;
class CpuUsageProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuUsageProto> _instance;
} _CpuUsageProto_default_instance_;
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_CpuUsageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuUsageProto_default_instance_;
    new (ptr) ::android::os::CpuUsageProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuUsageProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CpuUsageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CpuUsageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto}, {
      &scc_info_CpuUsageProto_Load_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base,
      &scc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base,}};

static void InitDefaultsscc_info_CpuUsageProto_Load_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuUsageProto_Load_default_instance_;
    new (ptr) ::android::os::CpuUsageProto_Load();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuUsageProto_Load::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUsageProto_Load_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuUsageProto_Load_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto}, {}};

static void InitDefaultsscc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuUsageProto_Stat_default_instance_;
    new (ptr) ::android::os::CpuUsageProto_Stat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuUsageProto_Stat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Load, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Load, load1_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Load, load5_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Load, load15_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, uid_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, pid_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, name_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, added_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, removed_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, uptime_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, user_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, system_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, minor_faults_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, major_faults_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto_Stat, parent_pid_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, current_load_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, now_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, last_sample_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, current_sample_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, last_sample_real_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, current_sample_real_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, last_sample_wall_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, current_sample_wall_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, total_user_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, total_system_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, total_iowait_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, total_irq_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, total_soft_irq_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, total_idle_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, total_time_),
  PROTOBUF_FIELD_OFFSET(::android::os::CpuUsageProto, processes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::android::os::CpuUsageProto_Load)},
  { 11, 27, sizeof(::android::os::CpuUsageProto_Stat)},
  { 38, 59, sizeof(::android::os::CpuUsageProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::os::_CpuUsageProto_Load_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::os::_CpuUsageProto_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::os::_CpuUsageProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5frameworks/base/core/proto/android/os/"
  "cpu_usage.proto\022\nandroid.os\0320frameworks/"
  "base/core/proto/android/privacy.proto\"\217\006"
  "\n\rCpuUsageProto\0224\n\014current_load\030\001 \001(\0132\036."
  "android.os.CpuUsageProto.Load\022\013\n\003now\030\002 \001"
  "(\003\022\030\n\020last_sample_time\030\003 \001(\003\022\033\n\023current_"
  "sample_time\030\004 \001(\003\022\035\n\025last_sample_real_ti"
  "me\030\005 \001(\003\022 \n\030current_sample_real_time\030\006 \001"
  "(\003\022\035\n\025last_sample_wall_time\030\007 \001(\003\022 \n\030cur"
  "rent_sample_wall_time\030\010 \001(\003\022\027\n\017total_use"
  "r_time\030\t \001(\005\022\031\n\021total_system_time\030\n \001(\005\022"
  "\031\n\021total_iowait_time\030\013 \001(\005\022\026\n\016total_irq_"
  "time\030\014 \001(\005\022\033\n\023total_soft_irq_time\030\r \001(\005\022"
  "\027\n\017total_idle_time\030\016 \001(\005\022\022\n\ntotal_time\030\017"
  " \001(\005\0221\n\tprocesses\030\020 \003(\0132\036.android.os.Cpu"
  "UsageProto.Stat\032\?\n\004Load\022\r\n\005load1\030\001 \001(\002\022\r"
  "\n\005load5\030\002 \001(\002\022\016\n\006load15\030\003 \001(\002:\t\232\237\325\207\003\003\010\310\001"
  "\032\321\001\n\004Stat\022\013\n\003uid\030\001 \001(\005\022\013\n\003pid\030\002 \001(\005\022\014\n\004n"
  "ame\030\003 \001(\t\022\r\n\005added\030\004 \001(\010\022\017\n\007removed\030\005 \001("
  "\010\022\016\n\006uptime\030\006 \001(\005\022\021\n\tuser_time\030\007 \001(\005\022\023\n\013"
  "system_time\030\010 \001(\005\022\024\n\014minor_faults\030\t \001(\005\022"
  "\024\n\014major_faults\030\n \001(\005\022\022\n\nparent_pid\030\013 \001("
  "\005:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_deps[1] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_sccs[3] = {
  &scc_info_CpuUsageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base,
  &scc_info_CpuUsageProto_Load_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base,
  &scc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto, "frameworks/base/core/proto/android/os/cpu_usage.proto", 907,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto, 3, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto), true);
namespace android {
namespace os {

// ===================================================================

void CpuUsageProto_Load::InitAsDefaultInstance() {
}
class CpuUsageProto_Load::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuUsageProto_Load>()._has_bits_);
  static void set_has_load1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_load5(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_load15(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CpuUsageProto_Load::CpuUsageProto_Load()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuUsageProto.Load)
}
CpuUsageProto_Load::CpuUsageProto_Load(const CpuUsageProto_Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&load1_, &from.load1_,
    static_cast<size_t>(reinterpret_cast<char*>(&load15_) -
    reinterpret_cast<char*>(&load1_)) + sizeof(load15_));
  // @@protoc_insertion_point(copy_constructor:android.os.CpuUsageProto.Load)
}

void CpuUsageProto_Load::SharedCtor() {
  ::memset(&load1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load15_) -
      reinterpret_cast<char*>(&load1_)) + sizeof(load15_));
}

CpuUsageProto_Load::~CpuUsageProto_Load() {
  // @@protoc_insertion_point(destructor:android.os.CpuUsageProto.Load)
  SharedDtor();
}

void CpuUsageProto_Load::SharedDtor() {
}

void CpuUsageProto_Load::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuUsageProto_Load& CpuUsageProto_Load::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuUsageProto_Load_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base);
  return *internal_default_instance();
}


void CpuUsageProto_Load::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuUsageProto.Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&load1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&load15_) -
        reinterpret_cast<char*>(&load1_)) + sizeof(load15_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuUsageProto_Load::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float load1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_load1(&has_bits);
          load1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float load5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_load5(&has_bits);
          load5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float load15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_load15(&has_bits);
          load15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuUsageProto_Load::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.os.CpuUsageProto.Load)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float load1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_load1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float load5 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_load5(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float load15 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_load15(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load15_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuUsageProto.Load)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuUsageProto.Load)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuUsageProto_Load::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuUsageProto.Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float load1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->load1(), output);
  }

  // optional float load5 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->load5(), output);
  }

  // optional float load15 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->load15(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.os.CpuUsageProto.Load)
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuUsageProto_Load::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.os.CpuUsageProto.Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float load1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->load1(), target);
  }

  // optional float load5 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->load5(), target);
  }

  // optional float load15 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->load15(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.os.CpuUsageProto.Load)
  return target;
}

size_t CpuUsageProto_Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuUsageProto.Load)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float load1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float load5 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float load15 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuUsageProto_Load::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.os.CpuUsageProto.Load)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuUsageProto_Load* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuUsageProto_Load>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.os.CpuUsageProto.Load)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.os.CpuUsageProto.Load)
    MergeFrom(*source);
  }
}

void CpuUsageProto_Load::MergeFrom(const CpuUsageProto_Load& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuUsageProto.Load)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      load1_ = from.load1_;
    }
    if (cached_has_bits & 0x00000002u) {
      load5_ = from.load5_;
    }
    if (cached_has_bits & 0x00000004u) {
      load15_ = from.load15_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuUsageProto_Load::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.os.CpuUsageProto.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuUsageProto_Load::CopyFrom(const CpuUsageProto_Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuUsageProto.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuUsageProto_Load::IsInitialized() const {
  return true;
}

void CpuUsageProto_Load::InternalSwap(CpuUsageProto_Load* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(load1_, other->load1_);
  swap(load5_, other->load5_);
  swap(load15_, other->load15_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuUsageProto_Load::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpuUsageProto_Stat::InitAsDefaultInstance() {
}
class CpuUsageProto_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuUsageProto_Stat>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_added(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uptime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_system_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_minor_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_major_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_parent_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CpuUsageProto_Stat::CpuUsageProto_Stat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuUsageProto.Stat)
}
CpuUsageProto_Stat::CpuUsageProto_Stat(const CpuUsageProto_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_pid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(parent_pid_));
  // @@protoc_insertion_point(copy_constructor:android.os.CpuUsageProto.Stat)
}

void CpuUsageProto_Stat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_pid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(parent_pid_));
}

CpuUsageProto_Stat::~CpuUsageProto_Stat() {
  // @@protoc_insertion_point(destructor:android.os.CpuUsageProto.Stat)
  SharedDtor();
}

void CpuUsageProto_Stat::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CpuUsageProto_Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuUsageProto_Stat& CpuUsageProto_Stat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuUsageProto_Stat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base);
  return *internal_default_instance();
}


void CpuUsageProto_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuUsageProto.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&system_time_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(system_time_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&minor_faults_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_pid_) -
        reinterpret_cast<char*>(&minor_faults_)) + sizeof(parent_pid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuUsageProto_Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "android.os.CpuUsageProto.Stat.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool added = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_added(&has_bits);
          added_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool removed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_removed(&has_bits);
          removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uptime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_uptime(&has_bits);
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_user_time(&has_bits);
          user_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 system_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_system_time(&has_bits);
          system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minor_faults = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_minor_faults(&has_bits);
          minor_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 major_faults = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_major_faults(&has_bits);
          major_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 parent_pid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_parent_pid(&has_bits);
          parent_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuUsageProto_Stat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.os.CpuUsageProto.Stat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.os.CpuUsageProto.Stat.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool added = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_added(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool removed = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_removed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uptime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_uptime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_user_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 system_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_system_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_faults = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_minor_faults(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_faults_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_faults = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_major_faults(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_faults_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parent_pid = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_parent_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuUsageProto.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuUsageProto.Stat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuUsageProto_Stat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuUsageProto.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.os.CpuUsageProto.Stat.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional bool added = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->added(), output);
  }

  // optional bool removed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->removed(), output);
  }

  // optional int32 uptime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->uptime(), output);
  }

  // optional int32 user_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->user_time(), output);
  }

  // optional int32 system_time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->system_time(), output);
  }

  // optional int32 minor_faults = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->minor_faults(), output);
  }

  // optional int32 major_faults = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->major_faults(), output);
  }

  // optional int32 parent_pid = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->parent_pid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.os.CpuUsageProto.Stat)
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuUsageProto_Stat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.os.CpuUsageProto.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.os.CpuUsageProto.Stat.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bool added = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->added(), target);
  }

  // optional bool removed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->removed(), target);
  }

  // optional int32 uptime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->uptime(), target);
  }

  // optional int32 user_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->user_time(), target);
  }

  // optional int32 system_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->system_time(), target);
  }

  // optional int32 minor_faults = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->minor_faults(), target);
  }

  // optional int32 major_faults = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->major_faults(), target);
  }

  // optional int32 parent_pid = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->parent_pid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.os.CpuUsageProto.Stat)
  return target;
}

size_t CpuUsageProto_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuUsageProto.Stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional bool added = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool removed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 uptime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uptime());
    }

    // optional int32 user_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_time());
    }

    // optional int32 system_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->system_time());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 minor_faults = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->minor_faults());
    }

    // optional int32 major_faults = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->major_faults());
    }

    // optional int32 parent_pid = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->parent_pid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuUsageProto_Stat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.os.CpuUsageProto.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuUsageProto_Stat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuUsageProto_Stat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.os.CpuUsageProto.Stat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.os.CpuUsageProto.Stat)
    MergeFrom(*source);
  }
}

void CpuUsageProto_Stat::MergeFrom(const CpuUsageProto_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuUsageProto.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      added_ = from.added_;
    }
    if (cached_has_bits & 0x00000010u) {
      removed_ = from.removed_;
    }
    if (cached_has_bits & 0x00000020u) {
      uptime_ = from.uptime_;
    }
    if (cached_has_bits & 0x00000040u) {
      user_time_ = from.user_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      system_time_ = from.system_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      minor_faults_ = from.minor_faults_;
    }
    if (cached_has_bits & 0x00000200u) {
      major_faults_ = from.major_faults_;
    }
    if (cached_has_bits & 0x00000400u) {
      parent_pid_ = from.parent_pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuUsageProto_Stat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.os.CpuUsageProto.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuUsageProto_Stat::CopyFrom(const CpuUsageProto_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuUsageProto.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuUsageProto_Stat::IsInitialized() const {
  return true;
}

void CpuUsageProto_Stat::InternalSwap(CpuUsageProto_Stat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(pid_, other->pid_);
  swap(added_, other->added_);
  swap(removed_, other->removed_);
  swap(uptime_, other->uptime_);
  swap(user_time_, other->user_time_);
  swap(system_time_, other->system_time_);
  swap(minor_faults_, other->minor_faults_);
  swap(major_faults_, other->major_faults_);
  swap(parent_pid_, other->parent_pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuUsageProto_Stat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpuUsageProto::InitAsDefaultInstance() {
  ::android::os::_CpuUsageProto_default_instance_._instance.get_mutable()->current_load_ = const_cast< ::android::os::CpuUsageProto_Load*>(
      ::android::os::CpuUsageProto_Load::internal_default_instance());
}
class CpuUsageProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuUsageProto>()._has_bits_);
  static const ::android::os::CpuUsageProto_Load& current_load(const CpuUsageProto* msg);
  static void set_has_current_load(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_now(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_sample_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_sample_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_sample_real_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_current_sample_real_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_sample_wall_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_current_sample_wall_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_user_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_system_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_iowait_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_irq_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_total_soft_irq_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_idle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::android::os::CpuUsageProto_Load&
CpuUsageProto::_Internal::current_load(const CpuUsageProto* msg) {
  return *msg->current_load_;
}
CpuUsageProto::CpuUsageProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuUsageProto)
}
CpuUsageProto::CpuUsageProto(const CpuUsageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      processes_(from.processes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_load()) {
    current_load_ = new ::android::os::CpuUsageProto_Load(*from.current_load_);
  } else {
    current_load_ = nullptr;
  }
  ::memcpy(&now_, &from.now_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&now_)) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:android.os.CpuUsageProto)
}

void CpuUsageProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpuUsageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base);
  ::memset(&current_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&current_load_)) + sizeof(total_time_));
}

CpuUsageProto::~CpuUsageProto() {
  // @@protoc_insertion_point(destructor:android.os.CpuUsageProto)
  SharedDtor();
}

void CpuUsageProto::SharedDtor() {
  if (this != internal_default_instance()) delete current_load_;
}

void CpuUsageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuUsageProto& CpuUsageProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuUsageProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpu_5fusage_2eproto.base);
  return *internal_default_instance();
}


void CpuUsageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuUsageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(current_load_ != nullptr);
    current_load_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&now_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_sample_wall_time_) -
        reinterpret_cast<char*>(&now_)) + sizeof(current_sample_wall_time_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&total_user_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_) -
        reinterpret_cast<char*>(&total_user_time_)) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuUsageProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.CpuUsageProto.Load current_load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_current_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 now = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_now(&has_bits);
          now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_sample_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_sample_time(&has_bits);
          last_sample_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 current_sample_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_current_sample_time(&has_bits);
          current_sample_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_sample_real_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_sample_real_time(&has_bits);
          last_sample_real_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 current_sample_real_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_current_sample_real_time(&has_bits);
          current_sample_real_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_sample_wall_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_sample_wall_time(&has_bits);
          last_sample_wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 current_sample_wall_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_current_sample_wall_time(&has_bits);
          current_sample_wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_user_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_total_user_time(&has_bits);
          total_user_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_system_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_system_time(&has_bits);
          total_system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_iowait_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_total_iowait_time(&has_bits);
          total_iowait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_irq_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_total_irq_time(&has_bits);
          total_irq_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_soft_irq_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_soft_irq_time(&has_bits);
          total_soft_irq_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_idle_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_total_idle_time(&has_bits);
          total_idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_total_time(&has_bits);
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.CpuUsageProto.Stat processes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuUsageProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.os.CpuUsageProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.CpuUsageProto.Load current_load = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 now = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_now(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_sample_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_sample_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sample_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 current_sample_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_current_sample_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_sample_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_sample_real_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_sample_real_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sample_real_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 current_sample_real_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_current_sample_real_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_sample_real_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_sample_wall_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_last_sample_wall_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sample_wall_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 current_sample_wall_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_current_sample_wall_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_sample_wall_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_user_time = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_total_user_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_user_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_system_time = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_total_system_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_iowait_time = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_total_iowait_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_iowait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_irq_time = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_total_irq_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_irq_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_soft_irq_time = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_total_soft_irq_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_soft_irq_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_idle_time = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_total_idle_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_time = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_total_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.CpuUsageProto.Stat processes = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_processes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuUsageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuUsageProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuUsageProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuUsageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.CpuUsageProto.Load current_load = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::current_load(this), output);
  }

  // optional int64 now = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->now(), output);
  }

  // optional int64 last_sample_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->last_sample_time(), output);
  }

  // optional int64 current_sample_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->current_sample_time(), output);
  }

  // optional int64 last_sample_real_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->last_sample_real_time(), output);
  }

  // optional int64 current_sample_real_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->current_sample_real_time(), output);
  }

  // optional int64 last_sample_wall_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->last_sample_wall_time(), output);
  }

  // optional int64 current_sample_wall_time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->current_sample_wall_time(), output);
  }

  // optional int32 total_user_time = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->total_user_time(), output);
  }

  // optional int32 total_system_time = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->total_system_time(), output);
  }

  // optional int32 total_iowait_time = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->total_iowait_time(), output);
  }

  // optional int32 total_irq_time = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->total_irq_time(), output);
  }

  // optional int32 total_soft_irq_time = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->total_soft_irq_time(), output);
  }

  // optional int32 total_idle_time = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->total_idle_time(), output);
  }

  // optional int32 total_time = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->total_time(), output);
  }

  // repeated .android.os.CpuUsageProto.Stat processes = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->processes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->processes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.os.CpuUsageProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuUsageProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.os.CpuUsageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.CpuUsageProto.Load current_load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::current_load(this), target);
  }

  // optional int64 now = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->now(), target);
  }

  // optional int64 last_sample_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->last_sample_time(), target);
  }

  // optional int64 current_sample_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->current_sample_time(), target);
  }

  // optional int64 last_sample_real_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->last_sample_real_time(), target);
  }

  // optional int64 current_sample_real_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->current_sample_real_time(), target);
  }

  // optional int64 last_sample_wall_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->last_sample_wall_time(), target);
  }

  // optional int64 current_sample_wall_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->current_sample_wall_time(), target);
  }

  // optional int32 total_user_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->total_user_time(), target);
  }

  // optional int32 total_system_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->total_system_time(), target);
  }

  // optional int32 total_iowait_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->total_iowait_time(), target);
  }

  // optional int32 total_irq_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->total_irq_time(), target);
  }

  // optional int32 total_soft_irq_time = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->total_soft_irq_time(), target);
  }

  // optional int32 total_idle_time = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->total_idle_time(), target);
  }

  // optional int32 total_time = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->total_time(), target);
  }

  // repeated .android.os.CpuUsageProto.Stat processes = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->processes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->processes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.os.CpuUsageProto)
  return target;
}

size_t CpuUsageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuUsageProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.CpuUsageProto.Stat processes = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->processes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->processes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.os.CpuUsageProto.Load current_load = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_load_);
    }

    // optional int64 now = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->now());
    }

    // optional int64 last_sample_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_sample_time());
    }

    // optional int64 current_sample_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->current_sample_time());
    }

    // optional int64 last_sample_real_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_sample_real_time());
    }

    // optional int64 current_sample_real_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->current_sample_real_time());
    }

    // optional int64 last_sample_wall_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_sample_wall_time());
    }

    // optional int64 current_sample_wall_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->current_sample_wall_time());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 total_user_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_user_time());
    }

    // optional int32 total_system_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_system_time());
    }

    // optional int32 total_iowait_time = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_iowait_time());
    }

    // optional int32 total_irq_time = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_irq_time());
    }

    // optional int32 total_soft_irq_time = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_soft_irq_time());
    }

    // optional int32 total_idle_time = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_idle_time());
    }

    // optional int32 total_time = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_time());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuUsageProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.os.CpuUsageProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuUsageProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuUsageProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.os.CpuUsageProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.os.CpuUsageProto)
    MergeFrom(*source);
  }
}

void CpuUsageProto::MergeFrom(const CpuUsageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuUsageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processes_.MergeFrom(from.processes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_current_load()->::android::os::CpuUsageProto_Load::MergeFrom(from.current_load());
    }
    if (cached_has_bits & 0x00000002u) {
      now_ = from.now_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_sample_time_ = from.last_sample_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_sample_time_ = from.current_sample_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_sample_real_time_ = from.last_sample_real_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      current_sample_real_time_ = from.current_sample_real_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_sample_wall_time_ = from.last_sample_wall_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      current_sample_wall_time_ = from.current_sample_wall_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      total_user_time_ = from.total_user_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_system_time_ = from.total_system_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_iowait_time_ = from.total_iowait_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_irq_time_ = from.total_irq_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_soft_irq_time_ = from.total_soft_irq_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_idle_time_ = from.total_idle_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuUsageProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.os.CpuUsageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuUsageProto::CopyFrom(const CpuUsageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuUsageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuUsageProto::IsInitialized() const {
  return true;
}

void CpuUsageProto::InternalSwap(CpuUsageProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&processes_)->InternalSwap(CastToBase(&other->processes_));
  swap(current_load_, other->current_load_);
  swap(now_, other->now_);
  swap(last_sample_time_, other->last_sample_time_);
  swap(current_sample_time_, other->current_sample_time_);
  swap(last_sample_real_time_, other->last_sample_real_time_);
  swap(current_sample_real_time_, other->current_sample_real_time_);
  swap(last_sample_wall_time_, other->last_sample_wall_time_);
  swap(current_sample_wall_time_, other->current_sample_wall_time_);
  swap(total_user_time_, other->total_user_time_);
  swap(total_system_time_, other->total_system_time_);
  swap(total_iowait_time_, other->total_iowait_time_);
  swap(total_irq_time_, other->total_irq_time_);
  swap(total_soft_irq_time_, other->total_soft_irq_time_);
  swap(total_idle_time_, other->total_idle_time_);
  swap(total_time_, other->total_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuUsageProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::CpuUsageProto_Load* Arena::CreateMaybeMessage< ::android::os::CpuUsageProto_Load >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuUsageProto_Load >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::CpuUsageProto_Stat* Arena::CreateMaybeMessage< ::android::os::CpuUsageProto_Stat >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuUsageProto_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::CpuUsageProto* Arena::CreateMaybeMessage< ::android::os::CpuUsageProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuUsageProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
