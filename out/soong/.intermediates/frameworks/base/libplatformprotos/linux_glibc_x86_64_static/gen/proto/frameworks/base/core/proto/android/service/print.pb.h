// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/print.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/content/component_name.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
namespace android {
namespace service {
namespace print {
class ActivePrintServiceProto;
class ActivePrintServiceProtoDefaultTypeInternal;
extern ActivePrintServiceProtoDefaultTypeInternal _ActivePrintServiceProto_default_instance_;
class CachedPrintJobProto;
class CachedPrintJobProtoDefaultTypeInternal;
extern CachedPrintJobProtoDefaultTypeInternal _CachedPrintJobProto_default_instance_;
class InstalledPrintServiceProto;
class InstalledPrintServiceProtoDefaultTypeInternal;
extern InstalledPrintServiceProtoDefaultTypeInternal _InstalledPrintServiceProto_default_instance_;
class MarginsProto;
class MarginsProtoDefaultTypeInternal;
extern MarginsProtoDefaultTypeInternal _MarginsProto_default_instance_;
class MediaSizeProto;
class MediaSizeProtoDefaultTypeInternal;
extern MediaSizeProtoDefaultTypeInternal _MediaSizeProto_default_instance_;
class PageRangeProto;
class PageRangeProtoDefaultTypeInternal;
extern PageRangeProtoDefaultTypeInternal _PageRangeProto_default_instance_;
class PrintAttributesProto;
class PrintAttributesProtoDefaultTypeInternal;
extern PrintAttributesProtoDefaultTypeInternal _PrintAttributesProto_default_instance_;
class PrintDocumentInfoProto;
class PrintDocumentInfoProtoDefaultTypeInternal;
extern PrintDocumentInfoProtoDefaultTypeInternal _PrintDocumentInfoProto_default_instance_;
class PrintJobInfoProto;
class PrintJobInfoProtoDefaultTypeInternal;
extern PrintJobInfoProtoDefaultTypeInternal _PrintJobInfoProto_default_instance_;
class PrintServiceDumpProto;
class PrintServiceDumpProtoDefaultTypeInternal;
extern PrintServiceDumpProtoDefaultTypeInternal _PrintServiceDumpProto_default_instance_;
class PrintSpoolerInternalStateProto;
class PrintSpoolerInternalStateProtoDefaultTypeInternal;
extern PrintSpoolerInternalStateProtoDefaultTypeInternal _PrintSpoolerInternalStateProto_default_instance_;
class PrintSpoolerStateProto;
class PrintSpoolerStateProtoDefaultTypeInternal;
extern PrintSpoolerStateProtoDefaultTypeInternal _PrintSpoolerStateProto_default_instance_;
class PrintUserStateProto;
class PrintUserStateProtoDefaultTypeInternal;
extern PrintUserStateProtoDefaultTypeInternal _PrintUserStateProto_default_instance_;
class PrinterCapabilitiesProto;
class PrinterCapabilitiesProtoDefaultTypeInternal;
extern PrinterCapabilitiesProtoDefaultTypeInternal _PrinterCapabilitiesProto_default_instance_;
class PrinterDiscoverySessionProto;
class PrinterDiscoverySessionProtoDefaultTypeInternal;
extern PrinterDiscoverySessionProtoDefaultTypeInternal _PrinterDiscoverySessionProto_default_instance_;
class PrinterIdProto;
class PrinterIdProtoDefaultTypeInternal;
extern PrinterIdProtoDefaultTypeInternal _PrinterIdProto_default_instance_;
class PrinterInfoProto;
class PrinterInfoProtoDefaultTypeInternal;
extern PrinterInfoProtoDefaultTypeInternal _PrinterInfoProto_default_instance_;
class ResolutionProto;
class ResolutionProtoDefaultTypeInternal;
extern ResolutionProtoDefaultTypeInternal _ResolutionProto_default_instance_;
}  // namespace print
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::print::ActivePrintServiceProto* Arena::CreateMaybeMessage<::android::service::print::ActivePrintServiceProto>(Arena*);
template<> ::android::service::print::CachedPrintJobProto* Arena::CreateMaybeMessage<::android::service::print::CachedPrintJobProto>(Arena*);
template<> ::android::service::print::InstalledPrintServiceProto* Arena::CreateMaybeMessage<::android::service::print::InstalledPrintServiceProto>(Arena*);
template<> ::android::service::print::MarginsProto* Arena::CreateMaybeMessage<::android::service::print::MarginsProto>(Arena*);
template<> ::android::service::print::MediaSizeProto* Arena::CreateMaybeMessage<::android::service::print::MediaSizeProto>(Arena*);
template<> ::android::service::print::PageRangeProto* Arena::CreateMaybeMessage<::android::service::print::PageRangeProto>(Arena*);
template<> ::android::service::print::PrintAttributesProto* Arena::CreateMaybeMessage<::android::service::print::PrintAttributesProto>(Arena*);
template<> ::android::service::print::PrintDocumentInfoProto* Arena::CreateMaybeMessage<::android::service::print::PrintDocumentInfoProto>(Arena*);
template<> ::android::service::print::PrintJobInfoProto* Arena::CreateMaybeMessage<::android::service::print::PrintJobInfoProto>(Arena*);
template<> ::android::service::print::PrintServiceDumpProto* Arena::CreateMaybeMessage<::android::service::print::PrintServiceDumpProto>(Arena*);
template<> ::android::service::print::PrintSpoolerInternalStateProto* Arena::CreateMaybeMessage<::android::service::print::PrintSpoolerInternalStateProto>(Arena*);
template<> ::android::service::print::PrintSpoolerStateProto* Arena::CreateMaybeMessage<::android::service::print::PrintSpoolerStateProto>(Arena*);
template<> ::android::service::print::PrintUserStateProto* Arena::CreateMaybeMessage<::android::service::print::PrintUserStateProto>(Arena*);
template<> ::android::service::print::PrinterCapabilitiesProto* Arena::CreateMaybeMessage<::android::service::print::PrinterCapabilitiesProto>(Arena*);
template<> ::android::service::print::PrinterDiscoverySessionProto* Arena::CreateMaybeMessage<::android::service::print::PrinterDiscoverySessionProto>(Arena*);
template<> ::android::service::print::PrinterIdProto* Arena::CreateMaybeMessage<::android::service::print::PrinterIdProto>(Arena*);
template<> ::android::service::print::PrinterInfoProto* Arena::CreateMaybeMessage<::android::service::print::PrinterInfoProto>(Arena*);
template<> ::android::service::print::ResolutionProto* Arena::CreateMaybeMessage<::android::service::print::ResolutionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace print {

enum PrinterInfoProto_Status : int {
  PrinterInfoProto_Status___STATUS_UNUSED = 0,
  PrinterInfoProto_Status_STATUS_IDLE = 1,
  PrinterInfoProto_Status_STATUS_BUSY = 2,
  PrinterInfoProto_Status_STATUS_UNAVAILABLE = 3
};
bool PrinterInfoProto_Status_IsValid(int value);
constexpr PrinterInfoProto_Status PrinterInfoProto_Status_Status_MIN = PrinterInfoProto_Status___STATUS_UNUSED;
constexpr PrinterInfoProto_Status PrinterInfoProto_Status_Status_MAX = PrinterInfoProto_Status_STATUS_UNAVAILABLE;
constexpr int PrinterInfoProto_Status_Status_ARRAYSIZE = PrinterInfoProto_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrinterInfoProto_Status_descriptor();
template<typename T>
inline const std::string& PrinterInfoProto_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrinterInfoProto_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrinterInfoProto_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrinterInfoProto_Status_descriptor(), enum_t_value);
}
inline bool PrinterInfoProto_Status_Parse(
    const std::string& name, PrinterInfoProto_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrinterInfoProto_Status>(
    PrinterInfoProto_Status_descriptor(), name, value);
}
enum PrintAttributesProto_ColorMode : int {
  PrintAttributesProto_ColorMode___COLOR_MODE_UNUSED = 0,
  PrintAttributesProto_ColorMode_COLOR_MODE_MONOCHROME = 1,
  PrintAttributesProto_ColorMode_COLOR_MODE_COLOR = 2
};
bool PrintAttributesProto_ColorMode_IsValid(int value);
constexpr PrintAttributesProto_ColorMode PrintAttributesProto_ColorMode_ColorMode_MIN = PrintAttributesProto_ColorMode___COLOR_MODE_UNUSED;
constexpr PrintAttributesProto_ColorMode PrintAttributesProto_ColorMode_ColorMode_MAX = PrintAttributesProto_ColorMode_COLOR_MODE_COLOR;
constexpr int PrintAttributesProto_ColorMode_ColorMode_ARRAYSIZE = PrintAttributesProto_ColorMode_ColorMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrintAttributesProto_ColorMode_descriptor();
template<typename T>
inline const std::string& PrintAttributesProto_ColorMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrintAttributesProto_ColorMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrintAttributesProto_ColorMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrintAttributesProto_ColorMode_descriptor(), enum_t_value);
}
inline bool PrintAttributesProto_ColorMode_Parse(
    const std::string& name, PrintAttributesProto_ColorMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrintAttributesProto_ColorMode>(
    PrintAttributesProto_ColorMode_descriptor(), name, value);
}
enum PrintAttributesProto_DuplexMode : int {
  PrintAttributesProto_DuplexMode___DUPLEX_MODE_UNUSED = 0,
  PrintAttributesProto_DuplexMode_DUPLEX_MODE_NONE = 1,
  PrintAttributesProto_DuplexMode_DUPLEX_MODE_LONG_EDGE = 2,
  PrintAttributesProto_DuplexMode_DUPLEX_MODE_SHORT_EDGE = 4
};
bool PrintAttributesProto_DuplexMode_IsValid(int value);
constexpr PrintAttributesProto_DuplexMode PrintAttributesProto_DuplexMode_DuplexMode_MIN = PrintAttributesProto_DuplexMode___DUPLEX_MODE_UNUSED;
constexpr PrintAttributesProto_DuplexMode PrintAttributesProto_DuplexMode_DuplexMode_MAX = PrintAttributesProto_DuplexMode_DUPLEX_MODE_SHORT_EDGE;
constexpr int PrintAttributesProto_DuplexMode_DuplexMode_ARRAYSIZE = PrintAttributesProto_DuplexMode_DuplexMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrintAttributesProto_DuplexMode_descriptor();
template<typename T>
inline const std::string& PrintAttributesProto_DuplexMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrintAttributesProto_DuplexMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrintAttributesProto_DuplexMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrintAttributesProto_DuplexMode_descriptor(), enum_t_value);
}
inline bool PrintAttributesProto_DuplexMode_Parse(
    const std::string& name, PrintAttributesProto_DuplexMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrintAttributesProto_DuplexMode>(
    PrintAttributesProto_DuplexMode_descriptor(), name, value);
}
enum PrintJobInfoProto_State : int {
  PrintJobInfoProto_State_STATE_UNKNOWN = 0,
  PrintJobInfoProto_State_STATE_CREATED = 1,
  PrintJobInfoProto_State_STATE_QUEUED = 2,
  PrintJobInfoProto_State_STATE_STARTED = 3,
  PrintJobInfoProto_State_STATE_BLOCKED = 4,
  PrintJobInfoProto_State_STATE_COMPLETED = 5,
  PrintJobInfoProto_State_STATE_FAILED = 6,
  PrintJobInfoProto_State_STATE_CANCELED = 7
};
bool PrintJobInfoProto_State_IsValid(int value);
constexpr PrintJobInfoProto_State PrintJobInfoProto_State_State_MIN = PrintJobInfoProto_State_STATE_UNKNOWN;
constexpr PrintJobInfoProto_State PrintJobInfoProto_State_State_MAX = PrintJobInfoProto_State_STATE_CANCELED;
constexpr int PrintJobInfoProto_State_State_ARRAYSIZE = PrintJobInfoProto_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrintJobInfoProto_State_descriptor();
template<typename T>
inline const std::string& PrintJobInfoProto_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrintJobInfoProto_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrintJobInfoProto_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrintJobInfoProto_State_descriptor(), enum_t_value);
}
inline bool PrintJobInfoProto_State_Parse(
    const std::string& name, PrintJobInfoProto_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrintJobInfoProto_State>(
    PrintJobInfoProto_State_descriptor(), name, value);
}
// ===================================================================

class PrintServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrintServiceDumpProto) */ {
 public:
  PrintServiceDumpProto();
  virtual ~PrintServiceDumpProto();

  PrintServiceDumpProto(const PrintServiceDumpProto& from);
  PrintServiceDumpProto(PrintServiceDumpProto&& from) noexcept
    : PrintServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline PrintServiceDumpProto& operator=(const PrintServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintServiceDumpProto& operator=(PrintServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const PrintServiceDumpProto*>(
               &_PrintServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrintServiceDumpProto& a, PrintServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintServiceDumpProto* New() const final {
    return CreateMaybeMessage<PrintServiceDumpProto>(nullptr);
  }

  PrintServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintServiceDumpProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintServiceDumpProto& from);
  void MergeFrom(const PrintServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrintServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatesFieldNumber = 1,
  };
  // repeated .android.service.print.PrintUserStateProto user_states = 1;
  int user_states_size() const;
  void clear_user_states();
  ::android::service::print::PrintUserStateProto* mutable_user_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintUserStateProto >*
      mutable_user_states();
  const ::android::service::print::PrintUserStateProto& user_states(int index) const;
  ::android::service::print::PrintUserStateProto* add_user_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintUserStateProto >&
      user_states() const;

  // @@protoc_insertion_point(class_scope:android.service.print.PrintServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintUserStateProto > user_states_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrintUserStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrintUserStateProto) */ {
 public:
  PrintUserStateProto();
  virtual ~PrintUserStateProto();

  PrintUserStateProto(const PrintUserStateProto& from);
  PrintUserStateProto(PrintUserStateProto&& from) noexcept
    : PrintUserStateProto() {
    *this = ::std::move(from);
  }

  inline PrintUserStateProto& operator=(const PrintUserStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintUserStateProto& operator=(PrintUserStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintUserStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintUserStateProto* internal_default_instance() {
    return reinterpret_cast<const PrintUserStateProto*>(
               &_PrintUserStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrintUserStateProto& a, PrintUserStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintUserStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintUserStateProto* New() const final {
    return CreateMaybeMessage<PrintUserStateProto>(nullptr);
  }

  PrintUserStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintUserStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintUserStateProto& from);
  void MergeFrom(const PrintUserStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintUserStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrintUserStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstalledServicesFieldNumber = 2,
    kDisabledServicesFieldNumber = 3,
    kActiveServicesFieldNumber = 4,
    kCachedPrintJobsFieldNumber = 5,
    kDiscoverySessionsFieldNumber = 6,
    kPrintSpoolerStateFieldNumber = 7,
    kUserIdFieldNumber = 1,
  };
  // repeated .android.service.print.InstalledPrintServiceProto installed_services = 2;
  int installed_services_size() const;
  void clear_installed_services();
  ::android::service::print::InstalledPrintServiceProto* mutable_installed_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::InstalledPrintServiceProto >*
      mutable_installed_services();
  const ::android::service::print::InstalledPrintServiceProto& installed_services(int index) const;
  ::android::service::print::InstalledPrintServiceProto* add_installed_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::InstalledPrintServiceProto >&
      installed_services() const;

  // repeated .android.content.ComponentNameProto disabled_services = 3;
  int disabled_services_size() const;
  void clear_disabled_services();
  ::android::content::ComponentNameProto* mutable_disabled_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
      mutable_disabled_services();
  const ::android::content::ComponentNameProto& disabled_services(int index) const;
  ::android::content::ComponentNameProto* add_disabled_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
      disabled_services() const;

  // repeated .android.service.print.ActivePrintServiceProto active_services = 4;
  int active_services_size() const;
  void clear_active_services();
  ::android::service::print::ActivePrintServiceProto* mutable_active_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ActivePrintServiceProto >*
      mutable_active_services();
  const ::android::service::print::ActivePrintServiceProto& active_services(int index) const;
  ::android::service::print::ActivePrintServiceProto* add_active_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ActivePrintServiceProto >&
      active_services() const;

  // repeated .android.service.print.CachedPrintJobProto cached_print_jobs = 5;
  int cached_print_jobs_size() const;
  void clear_cached_print_jobs();
  ::android::service::print::CachedPrintJobProto* mutable_cached_print_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::CachedPrintJobProto >*
      mutable_cached_print_jobs();
  const ::android::service::print::CachedPrintJobProto& cached_print_jobs(int index) const;
  ::android::service::print::CachedPrintJobProto* add_cached_print_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::CachedPrintJobProto >&
      cached_print_jobs() const;

  // repeated .android.service.print.PrinterDiscoverySessionProto discovery_sessions = 6;
  int discovery_sessions_size() const;
  void clear_discovery_sessions();
  ::android::service::print::PrinterDiscoverySessionProto* mutable_discovery_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterDiscoverySessionProto >*
      mutable_discovery_sessions();
  const ::android::service::print::PrinterDiscoverySessionProto& discovery_sessions(int index) const;
  ::android::service::print::PrinterDiscoverySessionProto* add_discovery_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterDiscoverySessionProto >&
      discovery_sessions() const;

  // optional .android.service.print.PrintSpoolerStateProto print_spooler_state = 7;
  bool has_print_spooler_state() const;
  void clear_print_spooler_state();
  const ::android::service::print::PrintSpoolerStateProto& print_spooler_state() const;
  ::android::service::print::PrintSpoolerStateProto* release_print_spooler_state();
  ::android::service::print::PrintSpoolerStateProto* mutable_print_spooler_state();
  void set_allocated_print_spooler_state(::android::service::print::PrintSpoolerStateProto* print_spooler_state);

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.print.PrintUserStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::InstalledPrintServiceProto > installed_services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto > disabled_services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ActivePrintServiceProto > active_services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::CachedPrintJobProto > cached_print_jobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterDiscoverySessionProto > discovery_sessions_;
  ::android::service::print::PrintSpoolerStateProto* print_spooler_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrintSpoolerStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrintSpoolerStateProto) */ {
 public:
  PrintSpoolerStateProto();
  virtual ~PrintSpoolerStateProto();

  PrintSpoolerStateProto(const PrintSpoolerStateProto& from);
  PrintSpoolerStateProto(PrintSpoolerStateProto&& from) noexcept
    : PrintSpoolerStateProto() {
    *this = ::std::move(from);
  }

  inline PrintSpoolerStateProto& operator=(const PrintSpoolerStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintSpoolerStateProto& operator=(PrintSpoolerStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintSpoolerStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintSpoolerStateProto* internal_default_instance() {
    return reinterpret_cast<const PrintSpoolerStateProto*>(
               &_PrintSpoolerStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrintSpoolerStateProto& a, PrintSpoolerStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintSpoolerStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintSpoolerStateProto* New() const final {
    return CreateMaybeMessage<PrintSpoolerStateProto>(nullptr);
  }

  PrintSpoolerStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintSpoolerStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintSpoolerStateProto& from);
  void MergeFrom(const PrintSpoolerStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintSpoolerStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrintSpoolerStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalStateFieldNumber = 3,
    kIsDestroyedFieldNumber = 1,
    kIsBoundFieldNumber = 2,
  };
  // optional .android.service.print.PrintSpoolerInternalStateProto internal_state = 3;
  bool has_internal_state() const;
  void clear_internal_state();
  const ::android::service::print::PrintSpoolerInternalStateProto& internal_state() const;
  ::android::service::print::PrintSpoolerInternalStateProto* release_internal_state();
  ::android::service::print::PrintSpoolerInternalStateProto* mutable_internal_state();
  void set_allocated_internal_state(::android::service::print::PrintSpoolerInternalStateProto* internal_state);

  // optional bool is_destroyed = 1;
  bool has_is_destroyed() const;
  void clear_is_destroyed();
  bool is_destroyed() const;
  void set_is_destroyed(bool value);

  // optional bool is_bound = 2;
  bool has_is_bound() const;
  void clear_is_bound();
  bool is_bound() const;
  void set_is_bound(bool value);

  // @@protoc_insertion_point(class_scope:android.service.print.PrintSpoolerStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::service::print::PrintSpoolerInternalStateProto* internal_state_;
  bool is_destroyed_;
  bool is_bound_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrintSpoolerInternalStateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrintSpoolerInternalStateProto) */ {
 public:
  PrintSpoolerInternalStateProto();
  virtual ~PrintSpoolerInternalStateProto();

  PrintSpoolerInternalStateProto(const PrintSpoolerInternalStateProto& from);
  PrintSpoolerInternalStateProto(PrintSpoolerInternalStateProto&& from) noexcept
    : PrintSpoolerInternalStateProto() {
    *this = ::std::move(from);
  }

  inline PrintSpoolerInternalStateProto& operator=(const PrintSpoolerInternalStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintSpoolerInternalStateProto& operator=(PrintSpoolerInternalStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintSpoolerInternalStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintSpoolerInternalStateProto* internal_default_instance() {
    return reinterpret_cast<const PrintSpoolerInternalStateProto*>(
               &_PrintSpoolerInternalStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrintSpoolerInternalStateProto& a, PrintSpoolerInternalStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintSpoolerInternalStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintSpoolerInternalStateProto* New() const final {
    return CreateMaybeMessage<PrintSpoolerInternalStateProto>(nullptr);
  }

  PrintSpoolerInternalStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintSpoolerInternalStateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintSpoolerInternalStateProto& from);
  void MergeFrom(const PrintSpoolerInternalStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintSpoolerInternalStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrintSpoolerInternalStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrintJobsFieldNumber = 1,
    kPrintJobFilesFieldNumber = 2,
    kApprovedServicesFieldNumber = 3,
  };
  // repeated .android.service.print.PrintJobInfoProto print_jobs = 1;
  int print_jobs_size() const;
  void clear_print_jobs();
  ::android::service::print::PrintJobInfoProto* mutable_print_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintJobInfoProto >*
      mutable_print_jobs();
  const ::android::service::print::PrintJobInfoProto& print_jobs(int index) const;
  ::android::service::print::PrintJobInfoProto* add_print_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintJobInfoProto >&
      print_jobs() const;

  // repeated string print_job_files = 2 [(.android.privacy) = {
  int print_job_files_size() const;
  void clear_print_job_files();
  const std::string& print_job_files(int index) const;
  std::string* mutable_print_job_files(int index);
  void set_print_job_files(int index, const std::string& value);
  void set_print_job_files(int index, std::string&& value);
  void set_print_job_files(int index, const char* value);
  void set_print_job_files(int index, const char* value, size_t size);
  std::string* add_print_job_files();
  void add_print_job_files(const std::string& value);
  void add_print_job_files(std::string&& value);
  void add_print_job_files(const char* value);
  void add_print_job_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& print_job_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_print_job_files();

  // repeated .android.content.ComponentNameProto approved_services = 3;
  int approved_services_size() const;
  void clear_approved_services();
  ::android::content::ComponentNameProto* mutable_approved_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
      mutable_approved_services();
  const ::android::content::ComponentNameProto& approved_services(int index) const;
  ::android::content::ComponentNameProto* add_approved_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
      approved_services() const;

  // @@protoc_insertion_point(class_scope:android.service.print.PrintSpoolerInternalStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintJobInfoProto > print_jobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> print_job_files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto > approved_services_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrinterCapabilitiesProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrinterCapabilitiesProto) */ {
 public:
  PrinterCapabilitiesProto();
  virtual ~PrinterCapabilitiesProto();

  PrinterCapabilitiesProto(const PrinterCapabilitiesProto& from);
  PrinterCapabilitiesProto(PrinterCapabilitiesProto&& from) noexcept
    : PrinterCapabilitiesProto() {
    *this = ::std::move(from);
  }

  inline PrinterCapabilitiesProto& operator=(const PrinterCapabilitiesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterCapabilitiesProto& operator=(PrinterCapabilitiesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrinterCapabilitiesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterCapabilitiesProto* internal_default_instance() {
    return reinterpret_cast<const PrinterCapabilitiesProto*>(
               &_PrinterCapabilitiesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrinterCapabilitiesProto& a, PrinterCapabilitiesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterCapabilitiesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterCapabilitiesProto* New() const final {
    return CreateMaybeMessage<PrinterCapabilitiesProto>(nullptr);
  }

  PrinterCapabilitiesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterCapabilitiesProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrinterCapabilitiesProto& from);
  void MergeFrom(const PrinterCapabilitiesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrinterCapabilitiesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrinterCapabilitiesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaSizesFieldNumber = 2,
    kResolutionsFieldNumber = 3,
    kColorModesFieldNumber = 4,
    kDuplexModesFieldNumber = 5,
    kMinMarginsFieldNumber = 1,
  };
  // repeated .android.service.print.MediaSizeProto media_sizes = 2;
  int media_sizes_size() const;
  void clear_media_sizes();
  ::android::service::print::MediaSizeProto* mutable_media_sizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::MediaSizeProto >*
      mutable_media_sizes();
  const ::android::service::print::MediaSizeProto& media_sizes(int index) const;
  ::android::service::print::MediaSizeProto* add_media_sizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::MediaSizeProto >&
      media_sizes() const;

  // repeated .android.service.print.ResolutionProto resolutions = 3;
  int resolutions_size() const;
  void clear_resolutions();
  ::android::service::print::ResolutionProto* mutable_resolutions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ResolutionProto >*
      mutable_resolutions();
  const ::android::service::print::ResolutionProto& resolutions(int index) const;
  ::android::service::print::ResolutionProto* add_resolutions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ResolutionProto >&
      resolutions() const;

  // repeated .android.service.print.PrintAttributesProto.ColorMode color_modes = 4;
  int color_modes_size() const;
  void clear_color_modes();
  ::android::service::print::PrintAttributesProto_ColorMode color_modes(int index) const;
  void set_color_modes(int index, ::android::service::print::PrintAttributesProto_ColorMode value);
  void add_color_modes(::android::service::print::PrintAttributesProto_ColorMode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& color_modes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_color_modes();

  // repeated .android.service.print.PrintAttributesProto.DuplexMode duplex_modes = 5;
  int duplex_modes_size() const;
  void clear_duplex_modes();
  ::android::service::print::PrintAttributesProto_DuplexMode duplex_modes(int index) const;
  void set_duplex_modes(int index, ::android::service::print::PrintAttributesProto_DuplexMode value);
  void add_duplex_modes(::android::service::print::PrintAttributesProto_DuplexMode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& duplex_modes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_duplex_modes();

  // optional .android.service.print.MarginsProto min_margins = 1;
  bool has_min_margins() const;
  void clear_min_margins();
  const ::android::service::print::MarginsProto& min_margins() const;
  ::android::service::print::MarginsProto* release_min_margins();
  ::android::service::print::MarginsProto* mutable_min_margins();
  void set_allocated_min_margins(::android::service::print::MarginsProto* min_margins);

  // @@protoc_insertion_point(class_scope:android.service.print.PrinterCapabilitiesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::MediaSizeProto > media_sizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ResolutionProto > resolutions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> color_modes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> duplex_modes_;
  ::android::service::print::MarginsProto* min_margins_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrinterInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrinterInfoProto) */ {
 public:
  PrinterInfoProto();
  virtual ~PrinterInfoProto();

  PrinterInfoProto(const PrinterInfoProto& from);
  PrinterInfoProto(PrinterInfoProto&& from) noexcept
    : PrinterInfoProto() {
    *this = ::std::move(from);
  }

  inline PrinterInfoProto& operator=(const PrinterInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterInfoProto& operator=(PrinterInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrinterInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterInfoProto* internal_default_instance() {
    return reinterpret_cast<const PrinterInfoProto*>(
               &_PrinterInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PrinterInfoProto& a, PrinterInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterInfoProto* New() const final {
    return CreateMaybeMessage<PrinterInfoProto>(nullptr);
  }

  PrinterInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrinterInfoProto& from);
  void MergeFrom(const PrinterInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrinterInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrinterInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrinterInfoProto_Status Status;
  static constexpr Status __STATUS_UNUSED =
    PrinterInfoProto_Status___STATUS_UNUSED;
  static constexpr Status STATUS_IDLE =
    PrinterInfoProto_Status_STATUS_IDLE;
  static constexpr Status STATUS_BUSY =
    PrinterInfoProto_Status_STATUS_BUSY;
  static constexpr Status STATUS_UNAVAILABLE =
    PrinterInfoProto_Status_STATUS_UNAVAILABLE;
  static inline bool Status_IsValid(int value) {
    return PrinterInfoProto_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    PrinterInfoProto_Status_Status_MIN;
  static constexpr Status Status_MAX =
    PrinterInfoProto_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    PrinterInfoProto_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return PrinterInfoProto_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return PrinterInfoProto_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return PrinterInfoProto_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kIdFieldNumber = 1,
    kCapabilitiesFieldNumber = 5,
    kStatusFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional .android.service.print.PrinterIdProto id = 1;
  bool has_id() const;
  void clear_id();
  const ::android::service::print::PrinterIdProto& id() const;
  ::android::service::print::PrinterIdProto* release_id();
  ::android::service::print::PrinterIdProto* mutable_id();
  void set_allocated_id(::android::service::print::PrinterIdProto* id);

  // optional .android.service.print.PrinterCapabilitiesProto capabilities = 5;
  bool has_capabilities() const;
  void clear_capabilities();
  const ::android::service::print::PrinterCapabilitiesProto& capabilities() const;
  ::android::service::print::PrinterCapabilitiesProto* release_capabilities();
  ::android::service::print::PrinterCapabilitiesProto* mutable_capabilities();
  void set_allocated_capabilities(::android::service::print::PrinterCapabilitiesProto* capabilities);

  // optional .android.service.print.PrinterInfoProto.Status status = 3 [(.android.privacy) = {
  bool has_status() const;
  void clear_status();
  ::android::service::print::PrinterInfoProto_Status status() const;
  void set_status(::android::service::print::PrinterInfoProto_Status value);

  // @@protoc_insertion_point(class_scope:android.service.print.PrinterInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::android::service::print::PrinterIdProto* id_;
  ::android::service::print::PrinterCapabilitiesProto* capabilities_;
  int status_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrinterDiscoverySessionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrinterDiscoverySessionProto) */ {
 public:
  PrinterDiscoverySessionProto();
  virtual ~PrinterDiscoverySessionProto();

  PrinterDiscoverySessionProto(const PrinterDiscoverySessionProto& from);
  PrinterDiscoverySessionProto(PrinterDiscoverySessionProto&& from) noexcept
    : PrinterDiscoverySessionProto() {
    *this = ::std::move(from);
  }

  inline PrinterDiscoverySessionProto& operator=(const PrinterDiscoverySessionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterDiscoverySessionProto& operator=(PrinterDiscoverySessionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrinterDiscoverySessionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterDiscoverySessionProto* internal_default_instance() {
    return reinterpret_cast<const PrinterDiscoverySessionProto*>(
               &_PrinterDiscoverySessionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PrinterDiscoverySessionProto& a, PrinterDiscoverySessionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterDiscoverySessionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterDiscoverySessionProto* New() const final {
    return CreateMaybeMessage<PrinterDiscoverySessionProto>(nullptr);
  }

  PrinterDiscoverySessionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterDiscoverySessionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrinterDiscoverySessionProto& from);
  void MergeFrom(const PrinterDiscoverySessionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrinterDiscoverySessionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrinterDiscoverySessionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrinterDiscoveryObserversFieldNumber = 3,
    kDiscoveryRequestsFieldNumber = 4,
    kTrackedPrinterRequestsFieldNumber = 5,
    kPrinterFieldNumber = 6,
    kIsDestroyedFieldNumber = 1,
    kIsPrinterDiscoveryInProgressFieldNumber = 2,
  };
  // repeated string printer_discovery_observers = 3;
  int printer_discovery_observers_size() const;
  void clear_printer_discovery_observers();
  const std::string& printer_discovery_observers(int index) const;
  std::string* mutable_printer_discovery_observers(int index);
  void set_printer_discovery_observers(int index, const std::string& value);
  void set_printer_discovery_observers(int index, std::string&& value);
  void set_printer_discovery_observers(int index, const char* value);
  void set_printer_discovery_observers(int index, const char* value, size_t size);
  std::string* add_printer_discovery_observers();
  void add_printer_discovery_observers(const std::string& value);
  void add_printer_discovery_observers(std::string&& value);
  void add_printer_discovery_observers(const char* value);
  void add_printer_discovery_observers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& printer_discovery_observers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_printer_discovery_observers();

  // repeated string discovery_requests = 4;
  int discovery_requests_size() const;
  void clear_discovery_requests();
  const std::string& discovery_requests(int index) const;
  std::string* mutable_discovery_requests(int index);
  void set_discovery_requests(int index, const std::string& value);
  void set_discovery_requests(int index, std::string&& value);
  void set_discovery_requests(int index, const char* value);
  void set_discovery_requests(int index, const char* value, size_t size);
  std::string* add_discovery_requests();
  void add_discovery_requests(const std::string& value);
  void add_discovery_requests(std::string&& value);
  void add_discovery_requests(const char* value);
  void add_discovery_requests(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& discovery_requests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_discovery_requests();

  // repeated .android.service.print.PrinterIdProto tracked_printer_requests = 5;
  int tracked_printer_requests_size() const;
  void clear_tracked_printer_requests();
  ::android::service::print::PrinterIdProto* mutable_tracked_printer_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >*
      mutable_tracked_printer_requests();
  const ::android::service::print::PrinterIdProto& tracked_printer_requests(int index) const;
  ::android::service::print::PrinterIdProto* add_tracked_printer_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >&
      tracked_printer_requests() const;

  // repeated .android.service.print.PrinterInfoProto printer = 6;
  int printer_size() const;
  void clear_printer();
  ::android::service::print::PrinterInfoProto* mutable_printer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterInfoProto >*
      mutable_printer();
  const ::android::service::print::PrinterInfoProto& printer(int index) const;
  ::android::service::print::PrinterInfoProto* add_printer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterInfoProto >&
      printer() const;

  // optional bool is_destroyed = 1;
  bool has_is_destroyed() const;
  void clear_is_destroyed();
  bool is_destroyed() const;
  void set_is_destroyed(bool value);

  // optional bool is_printer_discovery_in_progress = 2;
  bool has_is_printer_discovery_in_progress() const;
  void clear_is_printer_discovery_in_progress();
  bool is_printer_discovery_in_progress() const;
  void set_is_printer_discovery_in_progress(bool value);

  // @@protoc_insertion_point(class_scope:android.service.print.PrinterDiscoverySessionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> printer_discovery_observers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> discovery_requests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto > tracked_printer_requests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterInfoProto > printer_;
  bool is_destroyed_;
  bool is_printer_discovery_in_progress_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class InstalledPrintServiceProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.InstalledPrintServiceProto) */ {
 public:
  InstalledPrintServiceProto();
  virtual ~InstalledPrintServiceProto();

  InstalledPrintServiceProto(const InstalledPrintServiceProto& from);
  InstalledPrintServiceProto(InstalledPrintServiceProto&& from) noexcept
    : InstalledPrintServiceProto() {
    *this = ::std::move(from);
  }

  inline InstalledPrintServiceProto& operator=(const InstalledPrintServiceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstalledPrintServiceProto& operator=(InstalledPrintServiceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstalledPrintServiceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstalledPrintServiceProto* internal_default_instance() {
    return reinterpret_cast<const InstalledPrintServiceProto*>(
               &_InstalledPrintServiceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InstalledPrintServiceProto& a, InstalledPrintServiceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InstalledPrintServiceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstalledPrintServiceProto* New() const final {
    return CreateMaybeMessage<InstalledPrintServiceProto>(nullptr);
  }

  InstalledPrintServiceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstalledPrintServiceProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstalledPrintServiceProto& from);
  void MergeFrom(const InstalledPrintServiceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstalledPrintServiceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.InstalledPrintServiceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsActivityFieldNumber = 2,
    kAddPrintersActivityFieldNumber = 3,
    kAdvancedOptionsActivityFieldNumber = 4,
    kComponentNameFieldNumber = 1,
  };
  // optional string settings_activity = 2;
  bool has_settings_activity() const;
  void clear_settings_activity();
  const std::string& settings_activity() const;
  void set_settings_activity(const std::string& value);
  void set_settings_activity(std::string&& value);
  void set_settings_activity(const char* value);
  void set_settings_activity(const char* value, size_t size);
  std::string* mutable_settings_activity();
  std::string* release_settings_activity();
  void set_allocated_settings_activity(std::string* settings_activity);

  // optional string add_printers_activity = 3;
  bool has_add_printers_activity() const;
  void clear_add_printers_activity();
  const std::string& add_printers_activity() const;
  void set_add_printers_activity(const std::string& value);
  void set_add_printers_activity(std::string&& value);
  void set_add_printers_activity(const char* value);
  void set_add_printers_activity(const char* value, size_t size);
  std::string* mutable_add_printers_activity();
  std::string* release_add_printers_activity();
  void set_allocated_add_printers_activity(std::string* add_printers_activity);

  // optional string advanced_options_activity = 4;
  bool has_advanced_options_activity() const;
  void clear_advanced_options_activity();
  const std::string& advanced_options_activity() const;
  void set_advanced_options_activity(const std::string& value);
  void set_advanced_options_activity(std::string&& value);
  void set_advanced_options_activity(const char* value);
  void set_advanced_options_activity(const char* value, size_t size);
  std::string* mutable_advanced_options_activity();
  std::string* release_advanced_options_activity();
  void set_allocated_advanced_options_activity(std::string* advanced_options_activity);

  // optional .android.content.ComponentNameProto component_name = 1;
  bool has_component_name() const;
  void clear_component_name();
  const ::android::content::ComponentNameProto& component_name() const;
  ::android::content::ComponentNameProto* release_component_name();
  ::android::content::ComponentNameProto* mutable_component_name();
  void set_allocated_component_name(::android::content::ComponentNameProto* component_name);

  // @@protoc_insertion_point(class_scope:android.service.print.InstalledPrintServiceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settings_activity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_printers_activity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr advanced_options_activity_;
  ::android::content::ComponentNameProto* component_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrinterIdProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrinterIdProto) */ {
 public:
  PrinterIdProto();
  virtual ~PrinterIdProto();

  PrinterIdProto(const PrinterIdProto& from);
  PrinterIdProto(PrinterIdProto&& from) noexcept
    : PrinterIdProto() {
    *this = ::std::move(from);
  }

  inline PrinterIdProto& operator=(const PrinterIdProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterIdProto& operator=(PrinterIdProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrinterIdProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterIdProto* internal_default_instance() {
    return reinterpret_cast<const PrinterIdProto*>(
               &_PrinterIdProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PrinterIdProto& a, PrinterIdProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterIdProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterIdProto* New() const final {
    return CreateMaybeMessage<PrinterIdProto>(nullptr);
  }

  PrinterIdProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterIdProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrinterIdProto& from);
  void MergeFrom(const PrinterIdProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrinterIdProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrinterIdProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalIdFieldNumber = 2,
    kServiceNameFieldNumber = 1,
  };
  // optional string local_id = 2;
  bool has_local_id() const;
  void clear_local_id();
  const std::string& local_id() const;
  void set_local_id(const std::string& value);
  void set_local_id(std::string&& value);
  void set_local_id(const char* value);
  void set_local_id(const char* value, size_t size);
  std::string* mutable_local_id();
  std::string* release_local_id();
  void set_allocated_local_id(std::string* local_id);

  // optional .android.content.ComponentNameProto service_name = 1 [(.android.privacy) = {
  bool has_service_name() const;
  void clear_service_name();
  const ::android::content::ComponentNameProto& service_name() const;
  ::android::content::ComponentNameProto* release_service_name();
  ::android::content::ComponentNameProto* mutable_service_name();
  void set_allocated_service_name(::android::content::ComponentNameProto* service_name);

  // @@protoc_insertion_point(class_scope:android.service.print.PrinterIdProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_id_;
  ::android::content::ComponentNameProto* service_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class ActivePrintServiceProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.ActivePrintServiceProto) */ {
 public:
  ActivePrintServiceProto();
  virtual ~ActivePrintServiceProto();

  ActivePrintServiceProto(const ActivePrintServiceProto& from);
  ActivePrintServiceProto(ActivePrintServiceProto&& from) noexcept
    : ActivePrintServiceProto() {
    *this = ::std::move(from);
  }

  inline ActivePrintServiceProto& operator=(const ActivePrintServiceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivePrintServiceProto& operator=(ActivePrintServiceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivePrintServiceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivePrintServiceProto* internal_default_instance() {
    return reinterpret_cast<const ActivePrintServiceProto*>(
               &_ActivePrintServiceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ActivePrintServiceProto& a, ActivePrintServiceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivePrintServiceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivePrintServiceProto* New() const final {
    return CreateMaybeMessage<ActivePrintServiceProto>(nullptr);
  }

  ActivePrintServiceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivePrintServiceProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivePrintServiceProto& from);
  void MergeFrom(const ActivePrintServiceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivePrintServiceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.ActivePrintServiceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedPrintersFieldNumber = 7,
    kComponentNameFieldNumber = 1,
    kIsDestroyedFieldNumber = 2,
    kIsBoundFieldNumber = 3,
    kHasDiscoverySessionFieldNumber = 4,
    kHasActivePrintJobsFieldNumber = 5,
    kIsDiscoveringPrintersFieldNumber = 6,
  };
  // repeated .android.service.print.PrinterIdProto tracked_printers = 7;
  int tracked_printers_size() const;
  void clear_tracked_printers();
  ::android::service::print::PrinterIdProto* mutable_tracked_printers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >*
      mutable_tracked_printers();
  const ::android::service::print::PrinterIdProto& tracked_printers(int index) const;
  ::android::service::print::PrinterIdProto* add_tracked_printers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >&
      tracked_printers() const;

  // optional .android.content.ComponentNameProto component_name = 1;
  bool has_component_name() const;
  void clear_component_name();
  const ::android::content::ComponentNameProto& component_name() const;
  ::android::content::ComponentNameProto* release_component_name();
  ::android::content::ComponentNameProto* mutable_component_name();
  void set_allocated_component_name(::android::content::ComponentNameProto* component_name);

  // optional bool is_destroyed = 2;
  bool has_is_destroyed() const;
  void clear_is_destroyed();
  bool is_destroyed() const;
  void set_is_destroyed(bool value);

  // optional bool is_bound = 3;
  bool has_is_bound() const;
  void clear_is_bound();
  bool is_bound() const;
  void set_is_bound(bool value);

  // optional bool has_discovery_session = 4;
  bool has_has_discovery_session() const;
  void clear_has_discovery_session();
  bool has_discovery_session() const;
  void set_has_discovery_session(bool value);

  // optional bool has_active_print_jobs = 5;
  bool has_has_active_print_jobs() const;
  void clear_has_active_print_jobs();
  bool has_active_print_jobs() const;
  void set_has_active_print_jobs(bool value);

  // optional bool is_discovering_printers = 6;
  bool has_is_discovering_printers() const;
  void clear_is_discovering_printers();
  bool is_discovering_printers() const;
  void set_is_discovering_printers(bool value);

  // @@protoc_insertion_point(class_scope:android.service.print.ActivePrintServiceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto > tracked_printers_;
  ::android::content::ComponentNameProto* component_name_;
  bool is_destroyed_;
  bool is_bound_;
  bool has_discovery_session_;
  bool has_active_print_jobs_;
  bool is_discovering_printers_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class MediaSizeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.MediaSizeProto) */ {
 public:
  MediaSizeProto();
  virtual ~MediaSizeProto();

  MediaSizeProto(const MediaSizeProto& from);
  MediaSizeProto(MediaSizeProto&& from) noexcept
    : MediaSizeProto() {
    *this = ::std::move(from);
  }

  inline MediaSizeProto& operator=(const MediaSizeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaSizeProto& operator=(MediaSizeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaSizeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaSizeProto* internal_default_instance() {
    return reinterpret_cast<const MediaSizeProto*>(
               &_MediaSizeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MediaSizeProto& a, MediaSizeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaSizeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaSizeProto* New() const final {
    return CreateMaybeMessage<MediaSizeProto>(nullptr);
  }

  MediaSizeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaSizeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaSizeProto& from);
  void MergeFrom(const MediaSizeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaSizeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.MediaSizeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLabelFieldNumber = 2,
    kHeightMilsFieldNumber = 3,
    kWidthMilsFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string label = 2;
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional int32 height_mils = 3;
  bool has_height_mils() const;
  void clear_height_mils();
  ::PROTOBUF_NAMESPACE_ID::int32 height_mils() const;
  void set_height_mils(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 width_mils = 4;
  bool has_width_mils() const;
  void clear_width_mils();
  ::PROTOBUF_NAMESPACE_ID::int32 width_mils() const;
  void set_width_mils(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.print.MediaSizeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_mils_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_mils_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class ResolutionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.ResolutionProto) */ {
 public:
  ResolutionProto();
  virtual ~ResolutionProto();

  ResolutionProto(const ResolutionProto& from);
  ResolutionProto(ResolutionProto&& from) noexcept
    : ResolutionProto() {
    *this = ::std::move(from);
  }

  inline ResolutionProto& operator=(const ResolutionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolutionProto& operator=(ResolutionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolutionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolutionProto* internal_default_instance() {
    return reinterpret_cast<const ResolutionProto*>(
               &_ResolutionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ResolutionProto& a, ResolutionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolutionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolutionProto* New() const final {
    return CreateMaybeMessage<ResolutionProto>(nullptr);
  }

  ResolutionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolutionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolutionProto& from);
  void MergeFrom(const ResolutionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolutionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.ResolutionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLabelFieldNumber = 2,
    kHorizontalDpiFieldNumber = 3,
    kVerticalDpiFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string label = 2;
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional int32 horizontal_dpi = 3;
  bool has_horizontal_dpi() const;
  void clear_horizontal_dpi();
  ::PROTOBUF_NAMESPACE_ID::int32 horizontal_dpi() const;
  void set_horizontal_dpi(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 vertical_dpi = 4;
  bool has_vertical_dpi() const;
  void clear_vertical_dpi();
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_dpi() const;
  void set_vertical_dpi(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.print.ResolutionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 horizontal_dpi_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_dpi_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class MarginsProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.MarginsProto) */ {
 public:
  MarginsProto();
  virtual ~MarginsProto();

  MarginsProto(const MarginsProto& from);
  MarginsProto(MarginsProto&& from) noexcept
    : MarginsProto() {
    *this = ::std::move(from);
  }

  inline MarginsProto& operator=(const MarginsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginsProto& operator=(MarginsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarginsProto* internal_default_instance() {
    return reinterpret_cast<const MarginsProto*>(
               &_MarginsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MarginsProto& a, MarginsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginsProto* New() const final {
    return CreateMaybeMessage<MarginsProto>(nullptr);
  }

  MarginsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginsProto& from);
  void MergeFrom(const MarginsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.MarginsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopMilsFieldNumber = 1,
    kLeftMilsFieldNumber = 2,
    kRightMilsFieldNumber = 3,
    kBottomMilsFieldNumber = 4,
  };
  // optional int32 top_mils = 1;
  bool has_top_mils() const;
  void clear_top_mils();
  ::PROTOBUF_NAMESPACE_ID::int32 top_mils() const;
  void set_top_mils(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 left_mils = 2;
  bool has_left_mils() const;
  void clear_left_mils();
  ::PROTOBUF_NAMESPACE_ID::int32 left_mils() const;
  void set_left_mils(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 right_mils = 3;
  bool has_right_mils() const;
  void clear_right_mils();
  ::PROTOBUF_NAMESPACE_ID::int32 right_mils() const;
  void set_right_mils(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 bottom_mils = 4;
  bool has_bottom_mils() const;
  void clear_bottom_mils();
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_mils() const;
  void set_bottom_mils(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.print.MarginsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_mils_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_mils_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_mils_;
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_mils_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrintAttributesProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrintAttributesProto) */ {
 public:
  PrintAttributesProto();
  virtual ~PrintAttributesProto();

  PrintAttributesProto(const PrintAttributesProto& from);
  PrintAttributesProto(PrintAttributesProto&& from) noexcept
    : PrintAttributesProto() {
    *this = ::std::move(from);
  }

  inline PrintAttributesProto& operator=(const PrintAttributesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintAttributesProto& operator=(PrintAttributesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintAttributesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintAttributesProto* internal_default_instance() {
    return reinterpret_cast<const PrintAttributesProto*>(
               &_PrintAttributesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PrintAttributesProto& a, PrintAttributesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintAttributesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintAttributesProto* New() const final {
    return CreateMaybeMessage<PrintAttributesProto>(nullptr);
  }

  PrintAttributesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintAttributesProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintAttributesProto& from);
  void MergeFrom(const PrintAttributesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintAttributesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrintAttributesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrintAttributesProto_ColorMode ColorMode;
  static constexpr ColorMode __COLOR_MODE_UNUSED =
    PrintAttributesProto_ColorMode___COLOR_MODE_UNUSED;
  static constexpr ColorMode COLOR_MODE_MONOCHROME =
    PrintAttributesProto_ColorMode_COLOR_MODE_MONOCHROME;
  static constexpr ColorMode COLOR_MODE_COLOR =
    PrintAttributesProto_ColorMode_COLOR_MODE_COLOR;
  static inline bool ColorMode_IsValid(int value) {
    return PrintAttributesProto_ColorMode_IsValid(value);
  }
  static constexpr ColorMode ColorMode_MIN =
    PrintAttributesProto_ColorMode_ColorMode_MIN;
  static constexpr ColorMode ColorMode_MAX =
    PrintAttributesProto_ColorMode_ColorMode_MAX;
  static constexpr int ColorMode_ARRAYSIZE =
    PrintAttributesProto_ColorMode_ColorMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColorMode_descriptor() {
    return PrintAttributesProto_ColorMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ColorMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorMode_Name.");
    return PrintAttributesProto_ColorMode_Name(enum_t_value);
  }
  static inline bool ColorMode_Parse(const std::string& name,
      ColorMode* value) {
    return PrintAttributesProto_ColorMode_Parse(name, value);
  }

  typedef PrintAttributesProto_DuplexMode DuplexMode;
  static constexpr DuplexMode __DUPLEX_MODE_UNUSED =
    PrintAttributesProto_DuplexMode___DUPLEX_MODE_UNUSED;
  static constexpr DuplexMode DUPLEX_MODE_NONE =
    PrintAttributesProto_DuplexMode_DUPLEX_MODE_NONE;
  static constexpr DuplexMode DUPLEX_MODE_LONG_EDGE =
    PrintAttributesProto_DuplexMode_DUPLEX_MODE_LONG_EDGE;
  static constexpr DuplexMode DUPLEX_MODE_SHORT_EDGE =
    PrintAttributesProto_DuplexMode_DUPLEX_MODE_SHORT_EDGE;
  static inline bool DuplexMode_IsValid(int value) {
    return PrintAttributesProto_DuplexMode_IsValid(value);
  }
  static constexpr DuplexMode DuplexMode_MIN =
    PrintAttributesProto_DuplexMode_DuplexMode_MIN;
  static constexpr DuplexMode DuplexMode_MAX =
    PrintAttributesProto_DuplexMode_DuplexMode_MAX;
  static constexpr int DuplexMode_ARRAYSIZE =
    PrintAttributesProto_DuplexMode_DuplexMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DuplexMode_descriptor() {
    return PrintAttributesProto_DuplexMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DuplexMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DuplexMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DuplexMode_Name.");
    return PrintAttributesProto_DuplexMode_Name(enum_t_value);
  }
  static inline bool DuplexMode_Parse(const std::string& name,
      DuplexMode* value) {
    return PrintAttributesProto_DuplexMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMediaSizeFieldNumber = 1,
    kResolutionFieldNumber = 3,
    kMinMarginsFieldNumber = 4,
    kIsPortraitFieldNumber = 2,
    kColorModeFieldNumber = 5,
    kDuplexModeFieldNumber = 6,
  };
  // optional .android.service.print.ResolutionProto media_size = 1;
  bool has_media_size() const;
  void clear_media_size();
  const ::android::service::print::ResolutionProto& media_size() const;
  ::android::service::print::ResolutionProto* release_media_size();
  ::android::service::print::ResolutionProto* mutable_media_size();
  void set_allocated_media_size(::android::service::print::ResolutionProto* media_size);

  // optional .android.service.print.ResolutionProto resolution = 3;
  bool has_resolution() const;
  void clear_resolution();
  const ::android::service::print::ResolutionProto& resolution() const;
  ::android::service::print::ResolutionProto* release_resolution();
  ::android::service::print::ResolutionProto* mutable_resolution();
  void set_allocated_resolution(::android::service::print::ResolutionProto* resolution);

  // optional .android.service.print.MarginsProto min_margins = 4;
  bool has_min_margins() const;
  void clear_min_margins();
  const ::android::service::print::MarginsProto& min_margins() const;
  ::android::service::print::MarginsProto* release_min_margins();
  ::android::service::print::MarginsProto* mutable_min_margins();
  void set_allocated_min_margins(::android::service::print::MarginsProto* min_margins);

  // optional bool is_portrait = 2;
  bool has_is_portrait() const;
  void clear_is_portrait();
  bool is_portrait() const;
  void set_is_portrait(bool value);

  // optional .android.service.print.PrintAttributesProto.ColorMode color_mode = 5;
  bool has_color_mode() const;
  void clear_color_mode();
  ::android::service::print::PrintAttributesProto_ColorMode color_mode() const;
  void set_color_mode(::android::service::print::PrintAttributesProto_ColorMode value);

  // optional .android.service.print.PrintAttributesProto.DuplexMode duplex_mode = 6;
  bool has_duplex_mode() const;
  void clear_duplex_mode();
  ::android::service::print::PrintAttributesProto_DuplexMode duplex_mode() const;
  void set_duplex_mode(::android::service::print::PrintAttributesProto_DuplexMode value);

  // @@protoc_insertion_point(class_scope:android.service.print.PrintAttributesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::service::print::ResolutionProto* media_size_;
  ::android::service::print::ResolutionProto* resolution_;
  ::android::service::print::MarginsProto* min_margins_;
  bool is_portrait_;
  int color_mode_;
  int duplex_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrintDocumentInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrintDocumentInfoProto) */ {
 public:
  PrintDocumentInfoProto();
  virtual ~PrintDocumentInfoProto();

  PrintDocumentInfoProto(const PrintDocumentInfoProto& from);
  PrintDocumentInfoProto(PrintDocumentInfoProto&& from) noexcept
    : PrintDocumentInfoProto() {
    *this = ::std::move(from);
  }

  inline PrintDocumentInfoProto& operator=(const PrintDocumentInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintDocumentInfoProto& operator=(PrintDocumentInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintDocumentInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintDocumentInfoProto* internal_default_instance() {
    return reinterpret_cast<const PrintDocumentInfoProto*>(
               &_PrintDocumentInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PrintDocumentInfoProto& a, PrintDocumentInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintDocumentInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintDocumentInfoProto* New() const final {
    return CreateMaybeMessage<PrintDocumentInfoProto>(nullptr);
  }

  PrintDocumentInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintDocumentInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintDocumentInfoProto& from);
  void MergeFrom(const PrintDocumentInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintDocumentInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrintDocumentInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPageCountFieldNumber = 2,
    kContentTypeFieldNumber = 3,
    kDataSizeFieldNumber = 4,
  };
  // optional string name = 1 [(.android.privacy) = {
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 page_count = 2;
  bool has_page_count() const;
  void clear_page_count();
  ::PROTOBUF_NAMESPACE_ID::int32 page_count() const;
  void set_page_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 content_type = 3;
  bool has_content_type() const;
  void clear_content_type();
  ::PROTOBUF_NAMESPACE_ID::int32 content_type() const;
  void set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 data_size = 4;
  bool has_data_size() const;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::int64 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.service.print.PrintDocumentInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 content_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PageRangeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PageRangeProto) */ {
 public:
  PageRangeProto();
  virtual ~PageRangeProto();

  PageRangeProto(const PageRangeProto& from);
  PageRangeProto(PageRangeProto&& from) noexcept
    : PageRangeProto() {
    *this = ::std::move(from);
  }

  inline PageRangeProto& operator=(const PageRangeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageRangeProto& operator=(PageRangeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PageRangeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageRangeProto* internal_default_instance() {
    return reinterpret_cast<const PageRangeProto*>(
               &_PageRangeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PageRangeProto& a, PageRangeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PageRangeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageRangeProto* New() const final {
    return CreateMaybeMessage<PageRangeProto>(nullptr);
  }

  PageRangeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageRangeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PageRangeProto& from);
  void MergeFrom(const PageRangeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageRangeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PageRangeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional int32 start = 1;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 end = 2;
  bool has_end() const;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.print.PageRangeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class PrintJobInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.PrintJobInfoProto) */ {
 public:
  PrintJobInfoProto();
  virtual ~PrintJobInfoProto();

  PrintJobInfoProto(const PrintJobInfoProto& from);
  PrintJobInfoProto(PrintJobInfoProto&& from) noexcept
    : PrintJobInfoProto() {
    *this = ::std::move(from);
  }

  inline PrintJobInfoProto& operator=(const PrintJobInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintJobInfoProto& operator=(PrintJobInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintJobInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintJobInfoProto* internal_default_instance() {
    return reinterpret_cast<const PrintJobInfoProto*>(
               &_PrintJobInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PrintJobInfoProto& a, PrintJobInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintJobInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintJobInfoProto* New() const final {
    return CreateMaybeMessage<PrintJobInfoProto>(nullptr);
  }

  PrintJobInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintJobInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintJobInfoProto& from);
  void MergeFrom(const PrintJobInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintJobInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.PrintJobInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrintJobInfoProto_State State;
  static constexpr State STATE_UNKNOWN =
    PrintJobInfoProto_State_STATE_UNKNOWN;
  static constexpr State STATE_CREATED =
    PrintJobInfoProto_State_STATE_CREATED;
  static constexpr State STATE_QUEUED =
    PrintJobInfoProto_State_STATE_QUEUED;
  static constexpr State STATE_STARTED =
    PrintJobInfoProto_State_STATE_STARTED;
  static constexpr State STATE_BLOCKED =
    PrintJobInfoProto_State_STATE_BLOCKED;
  static constexpr State STATE_COMPLETED =
    PrintJobInfoProto_State_STATE_COMPLETED;
  static constexpr State STATE_FAILED =
    PrintJobInfoProto_State_STATE_FAILED;
  static constexpr State STATE_CANCELED =
    PrintJobInfoProto_State_STATE_CANCELED;
  static inline bool State_IsValid(int value) {
    return PrintJobInfoProto_State_IsValid(value);
  }
  static constexpr State State_MIN =
    PrintJobInfoProto_State_State_MIN;
  static constexpr State State_MAX =
    PrintJobInfoProto_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    PrintJobInfoProto_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return PrintJobInfoProto_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return PrintJobInfoProto_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return PrintJobInfoProto_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 10,
    kLabelFieldNumber = 1,
    kPrintJobIdFieldNumber = 2,
    kTagFieldNumber = 5,
    kStatusFieldNumber = 13,
    kPrinterFieldNumber = 4,
    kAttributesFieldNumber = 7,
    kDocumentInfoFieldNumber = 8,
    kCreationTimeFieldNumber = 6,
    kStateFieldNumber = 3,
    kIsCancelingFieldNumber = 9,
    kHasAdvancedOptionsFieldNumber = 11,
    kProgressFieldNumber = 12,
  };
  // repeated .android.service.print.PageRangeProto pages = 10;
  int pages_size() const;
  void clear_pages();
  ::android::service::print::PageRangeProto* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PageRangeProto >*
      mutable_pages();
  const ::android::service::print::PageRangeProto& pages(int index) const;
  ::android::service::print::PageRangeProto* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PageRangeProto >&
      pages() const;

  // optional string label = 1 [(.android.privacy) = {
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional string print_job_id = 2 [(.android.privacy) = {
  bool has_print_job_id() const;
  void clear_print_job_id();
  const std::string& print_job_id() const;
  void set_print_job_id(const std::string& value);
  void set_print_job_id(std::string&& value);
  void set_print_job_id(const char* value);
  void set_print_job_id(const char* value, size_t size);
  std::string* mutable_print_job_id();
  std::string* release_print_job_id();
  void set_allocated_print_job_id(std::string* print_job_id);

  // optional string tag = 5 [(.android.privacy) = {
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string status = 13;
  bool has_status() const;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);

  // optional .android.service.print.PrinterIdProto printer = 4;
  bool has_printer() const;
  void clear_printer();
  const ::android::service::print::PrinterIdProto& printer() const;
  ::android::service::print::PrinterIdProto* release_printer();
  ::android::service::print::PrinterIdProto* mutable_printer();
  void set_allocated_printer(::android::service::print::PrinterIdProto* printer);

  // optional .android.service.print.PrintAttributesProto attributes = 7;
  bool has_attributes() const;
  void clear_attributes();
  const ::android::service::print::PrintAttributesProto& attributes() const;
  ::android::service::print::PrintAttributesProto* release_attributes();
  ::android::service::print::PrintAttributesProto* mutable_attributes();
  void set_allocated_attributes(::android::service::print::PrintAttributesProto* attributes);

  // optional .android.service.print.PrintDocumentInfoProto document_info = 8;
  bool has_document_info() const;
  void clear_document_info();
  const ::android::service::print::PrintDocumentInfoProto& document_info() const;
  ::android::service::print::PrintDocumentInfoProto* release_document_info();
  ::android::service::print::PrintDocumentInfoProto* mutable_document_info();
  void set_allocated_document_info(::android::service::print::PrintDocumentInfoProto* document_info);

  // optional int64 creation_time = 6;
  bool has_creation_time() const;
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.service.print.PrintJobInfoProto.State state = 3;
  bool has_state() const;
  void clear_state();
  ::android::service::print::PrintJobInfoProto_State state() const;
  void set_state(::android::service::print::PrintJobInfoProto_State value);

  // optional bool is_canceling = 9;
  bool has_is_canceling() const;
  void clear_is_canceling();
  bool is_canceling() const;
  void set_is_canceling(bool value);

  // optional bool has_advanced_options = 11;
  bool has_has_advanced_options() const;
  void clear_has_advanced_options();
  bool has_advanced_options() const;
  void set_has_advanced_options(bool value);

  // optional float progress = 12;
  bool has_progress() const;
  void clear_progress();
  float progress() const;
  void set_progress(float value);

  // @@protoc_insertion_point(class_scope:android.service.print.PrintJobInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PageRangeProto > pages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr print_job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::android::service::print::PrinterIdProto* printer_;
  ::android::service::print::PrintAttributesProto* attributes_;
  ::android::service::print::PrintDocumentInfoProto* document_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_;
  int state_;
  bool is_canceling_;
  bool has_advanced_options_;
  float progress_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// -------------------------------------------------------------------

class CachedPrintJobProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.service.print.CachedPrintJobProto) */ {
 public:
  CachedPrintJobProto();
  virtual ~CachedPrintJobProto();

  CachedPrintJobProto(const CachedPrintJobProto& from);
  CachedPrintJobProto(CachedPrintJobProto&& from) noexcept
    : CachedPrintJobProto() {
    *this = ::std::move(from);
  }

  inline CachedPrintJobProto& operator=(const CachedPrintJobProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedPrintJobProto& operator=(CachedPrintJobProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CachedPrintJobProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CachedPrintJobProto* internal_default_instance() {
    return reinterpret_cast<const CachedPrintJobProto*>(
               &_CachedPrintJobProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CachedPrintJobProto& a, CachedPrintJobProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedPrintJobProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CachedPrintJobProto* New() const final {
    return CreateMaybeMessage<CachedPrintJobProto>(nullptr);
  }

  CachedPrintJobProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CachedPrintJobProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CachedPrintJobProto& from);
  void MergeFrom(const CachedPrintJobProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachedPrintJobProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.print.CachedPrintJobProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrintJobFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional .android.service.print.PrintJobInfoProto print_job = 2;
  bool has_print_job() const;
  void clear_print_job();
  const ::android::service::print::PrintJobInfoProto& print_job() const;
  ::android::service::print::PrintJobInfoProto* release_print_job();
  ::android::service::print::PrintJobInfoProto* mutable_print_job();
  void set_allocated_print_job(::android::service::print::PrintJobInfoProto* print_job);

  // optional int32 app_id = 1;
  bool has_app_id() const;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.print.CachedPrintJobProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::service::print::PrintJobInfoProto* print_job_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrintServiceDumpProto

// repeated .android.service.print.PrintUserStateProto user_states = 1;
inline int PrintServiceDumpProto::user_states_size() const {
  return user_states_.size();
}
inline void PrintServiceDumpProto::clear_user_states() {
  user_states_.Clear();
}
inline ::android::service::print::PrintUserStateProto* PrintServiceDumpProto::mutable_user_states(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintServiceDumpProto.user_states)
  return user_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintUserStateProto >*
PrintServiceDumpProto::mutable_user_states() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintServiceDumpProto.user_states)
  return &user_states_;
}
inline const ::android::service::print::PrintUserStateProto& PrintServiceDumpProto::user_states(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintServiceDumpProto.user_states)
  return user_states_.Get(index);
}
inline ::android::service::print::PrintUserStateProto* PrintServiceDumpProto::add_user_states() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintServiceDumpProto.user_states)
  return user_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintUserStateProto >&
PrintServiceDumpProto::user_states() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintServiceDumpProto.user_states)
  return user_states_;
}

// -------------------------------------------------------------------

// PrintUserStateProto

// optional int32 user_id = 1;
inline bool PrintUserStateProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintUserStateProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintUserStateProto::user_id() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintUserStateProto.user_id)
  return user_id_;
}
inline void PrintUserStateProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintUserStateProto.user_id)
}

// repeated .android.service.print.InstalledPrintServiceProto installed_services = 2;
inline int PrintUserStateProto::installed_services_size() const {
  return installed_services_.size();
}
inline void PrintUserStateProto::clear_installed_services() {
  installed_services_.Clear();
}
inline ::android::service::print::InstalledPrintServiceProto* PrintUserStateProto::mutable_installed_services(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintUserStateProto.installed_services)
  return installed_services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::InstalledPrintServiceProto >*
PrintUserStateProto::mutable_installed_services() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintUserStateProto.installed_services)
  return &installed_services_;
}
inline const ::android::service::print::InstalledPrintServiceProto& PrintUserStateProto::installed_services(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintUserStateProto.installed_services)
  return installed_services_.Get(index);
}
inline ::android::service::print::InstalledPrintServiceProto* PrintUserStateProto::add_installed_services() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintUserStateProto.installed_services)
  return installed_services_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::InstalledPrintServiceProto >&
PrintUserStateProto::installed_services() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintUserStateProto.installed_services)
  return installed_services_;
}

// repeated .android.content.ComponentNameProto disabled_services = 3;
inline int PrintUserStateProto::disabled_services_size() const {
  return disabled_services_.size();
}
inline ::android::content::ComponentNameProto* PrintUserStateProto::mutable_disabled_services(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintUserStateProto.disabled_services)
  return disabled_services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
PrintUserStateProto::mutable_disabled_services() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintUserStateProto.disabled_services)
  return &disabled_services_;
}
inline const ::android::content::ComponentNameProto& PrintUserStateProto::disabled_services(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintUserStateProto.disabled_services)
  return disabled_services_.Get(index);
}
inline ::android::content::ComponentNameProto* PrintUserStateProto::add_disabled_services() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintUserStateProto.disabled_services)
  return disabled_services_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
PrintUserStateProto::disabled_services() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintUserStateProto.disabled_services)
  return disabled_services_;
}

// repeated .android.service.print.ActivePrintServiceProto active_services = 4;
inline int PrintUserStateProto::active_services_size() const {
  return active_services_.size();
}
inline void PrintUserStateProto::clear_active_services() {
  active_services_.Clear();
}
inline ::android::service::print::ActivePrintServiceProto* PrintUserStateProto::mutable_active_services(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintUserStateProto.active_services)
  return active_services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ActivePrintServiceProto >*
PrintUserStateProto::mutable_active_services() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintUserStateProto.active_services)
  return &active_services_;
}
inline const ::android::service::print::ActivePrintServiceProto& PrintUserStateProto::active_services(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintUserStateProto.active_services)
  return active_services_.Get(index);
}
inline ::android::service::print::ActivePrintServiceProto* PrintUserStateProto::add_active_services() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintUserStateProto.active_services)
  return active_services_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ActivePrintServiceProto >&
PrintUserStateProto::active_services() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintUserStateProto.active_services)
  return active_services_;
}

// repeated .android.service.print.CachedPrintJobProto cached_print_jobs = 5;
inline int PrintUserStateProto::cached_print_jobs_size() const {
  return cached_print_jobs_.size();
}
inline void PrintUserStateProto::clear_cached_print_jobs() {
  cached_print_jobs_.Clear();
}
inline ::android::service::print::CachedPrintJobProto* PrintUserStateProto::mutable_cached_print_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintUserStateProto.cached_print_jobs)
  return cached_print_jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::CachedPrintJobProto >*
PrintUserStateProto::mutable_cached_print_jobs() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintUserStateProto.cached_print_jobs)
  return &cached_print_jobs_;
}
inline const ::android::service::print::CachedPrintJobProto& PrintUserStateProto::cached_print_jobs(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintUserStateProto.cached_print_jobs)
  return cached_print_jobs_.Get(index);
}
inline ::android::service::print::CachedPrintJobProto* PrintUserStateProto::add_cached_print_jobs() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintUserStateProto.cached_print_jobs)
  return cached_print_jobs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::CachedPrintJobProto >&
PrintUserStateProto::cached_print_jobs() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintUserStateProto.cached_print_jobs)
  return cached_print_jobs_;
}

// repeated .android.service.print.PrinterDiscoverySessionProto discovery_sessions = 6;
inline int PrintUserStateProto::discovery_sessions_size() const {
  return discovery_sessions_.size();
}
inline void PrintUserStateProto::clear_discovery_sessions() {
  discovery_sessions_.Clear();
}
inline ::android::service::print::PrinterDiscoverySessionProto* PrintUserStateProto::mutable_discovery_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintUserStateProto.discovery_sessions)
  return discovery_sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterDiscoverySessionProto >*
PrintUserStateProto::mutable_discovery_sessions() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintUserStateProto.discovery_sessions)
  return &discovery_sessions_;
}
inline const ::android::service::print::PrinterDiscoverySessionProto& PrintUserStateProto::discovery_sessions(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintUserStateProto.discovery_sessions)
  return discovery_sessions_.Get(index);
}
inline ::android::service::print::PrinterDiscoverySessionProto* PrintUserStateProto::add_discovery_sessions() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintUserStateProto.discovery_sessions)
  return discovery_sessions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterDiscoverySessionProto >&
PrintUserStateProto::discovery_sessions() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintUserStateProto.discovery_sessions)
  return discovery_sessions_;
}

// optional .android.service.print.PrintSpoolerStateProto print_spooler_state = 7;
inline bool PrintUserStateProto::has_print_spooler_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintUserStateProto::clear_print_spooler_state() {
  if (print_spooler_state_ != nullptr) print_spooler_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::print::PrintSpoolerStateProto& PrintUserStateProto::print_spooler_state() const {
  const ::android::service::print::PrintSpoolerStateProto* p = print_spooler_state_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintUserStateProto.print_spooler_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrintSpoolerStateProto*>(
      &::android::service::print::_PrintSpoolerStateProto_default_instance_);
}
inline ::android::service::print::PrintSpoolerStateProto* PrintUserStateProto::release_print_spooler_state() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintUserStateProto.print_spooler_state)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::print::PrintSpoolerStateProto* temp = print_spooler_state_;
  print_spooler_state_ = nullptr;
  return temp;
}
inline ::android::service::print::PrintSpoolerStateProto* PrintUserStateProto::mutable_print_spooler_state() {
  _has_bits_[0] |= 0x00000001u;
  if (print_spooler_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrintSpoolerStateProto>(GetArenaNoVirtual());
    print_spooler_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintUserStateProto.print_spooler_state)
  return print_spooler_state_;
}
inline void PrintUserStateProto::set_allocated_print_spooler_state(::android::service::print::PrintSpoolerStateProto* print_spooler_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete print_spooler_state_;
  }
  if (print_spooler_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      print_spooler_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_spooler_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  print_spooler_state_ = print_spooler_state;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintUserStateProto.print_spooler_state)
}

// -------------------------------------------------------------------

// PrintSpoolerStateProto

// optional bool is_destroyed = 1;
inline bool PrintSpoolerStateProto::has_is_destroyed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintSpoolerStateProto::clear_is_destroyed() {
  is_destroyed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PrintSpoolerStateProto::is_destroyed() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintSpoolerStateProto.is_destroyed)
  return is_destroyed_;
}
inline void PrintSpoolerStateProto::set_is_destroyed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_destroyed_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintSpoolerStateProto.is_destroyed)
}

// optional bool is_bound = 2;
inline bool PrintSpoolerStateProto::has_is_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintSpoolerStateProto::clear_is_bound() {
  is_bound_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PrintSpoolerStateProto::is_bound() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintSpoolerStateProto.is_bound)
  return is_bound_;
}
inline void PrintSpoolerStateProto::set_is_bound(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_bound_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintSpoolerStateProto.is_bound)
}

// optional .android.service.print.PrintSpoolerInternalStateProto internal_state = 3;
inline bool PrintSpoolerStateProto::has_internal_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintSpoolerStateProto::clear_internal_state() {
  if (internal_state_ != nullptr) internal_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::print::PrintSpoolerInternalStateProto& PrintSpoolerStateProto::internal_state() const {
  const ::android::service::print::PrintSpoolerInternalStateProto* p = internal_state_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintSpoolerStateProto.internal_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrintSpoolerInternalStateProto*>(
      &::android::service::print::_PrintSpoolerInternalStateProto_default_instance_);
}
inline ::android::service::print::PrintSpoolerInternalStateProto* PrintSpoolerStateProto::release_internal_state() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintSpoolerStateProto.internal_state)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::print::PrintSpoolerInternalStateProto* temp = internal_state_;
  internal_state_ = nullptr;
  return temp;
}
inline ::android::service::print::PrintSpoolerInternalStateProto* PrintSpoolerStateProto::mutable_internal_state() {
  _has_bits_[0] |= 0x00000001u;
  if (internal_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrintSpoolerInternalStateProto>(GetArenaNoVirtual());
    internal_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintSpoolerStateProto.internal_state)
  return internal_state_;
}
inline void PrintSpoolerStateProto::set_allocated_internal_state(::android::service::print::PrintSpoolerInternalStateProto* internal_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete internal_state_;
  }
  if (internal_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      internal_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  internal_state_ = internal_state;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintSpoolerStateProto.internal_state)
}

// -------------------------------------------------------------------

// PrintSpoolerInternalStateProto

// repeated .android.service.print.PrintJobInfoProto print_jobs = 1;
inline int PrintSpoolerInternalStateProto::print_jobs_size() const {
  return print_jobs_.size();
}
inline void PrintSpoolerInternalStateProto::clear_print_jobs() {
  print_jobs_.Clear();
}
inline ::android::service::print::PrintJobInfoProto* PrintSpoolerInternalStateProto::mutable_print_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintSpoolerInternalStateProto.print_jobs)
  return print_jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintJobInfoProto >*
PrintSpoolerInternalStateProto::mutable_print_jobs() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintSpoolerInternalStateProto.print_jobs)
  return &print_jobs_;
}
inline const ::android::service::print::PrintJobInfoProto& PrintSpoolerInternalStateProto::print_jobs(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintSpoolerInternalStateProto.print_jobs)
  return print_jobs_.Get(index);
}
inline ::android::service::print::PrintJobInfoProto* PrintSpoolerInternalStateProto::add_print_jobs() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintSpoolerInternalStateProto.print_jobs)
  return print_jobs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrintJobInfoProto >&
PrintSpoolerInternalStateProto::print_jobs() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintSpoolerInternalStateProto.print_jobs)
  return print_jobs_;
}

// repeated string print_job_files = 2 [(.android.privacy) = {
inline int PrintSpoolerInternalStateProto::print_job_files_size() const {
  return print_job_files_.size();
}
inline void PrintSpoolerInternalStateProto::clear_print_job_files() {
  print_job_files_.Clear();
}
inline const std::string& PrintSpoolerInternalStateProto::print_job_files(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
  return print_job_files_.Get(index);
}
inline std::string* PrintSpoolerInternalStateProto::mutable_print_job_files(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
  return print_job_files_.Mutable(index);
}
inline void PrintSpoolerInternalStateProto::set_print_job_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
  print_job_files_.Mutable(index)->assign(value);
}
inline void PrintSpoolerInternalStateProto::set_print_job_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
  print_job_files_.Mutable(index)->assign(std::move(value));
}
inline void PrintSpoolerInternalStateProto::set_print_job_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  print_job_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
}
inline void PrintSpoolerInternalStateProto::set_print_job_files(int index, const char* value, size_t size) {
  print_job_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
}
inline std::string* PrintSpoolerInternalStateProto::add_print_job_files() {
  // @@protoc_insertion_point(field_add_mutable:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
  return print_job_files_.Add();
}
inline void PrintSpoolerInternalStateProto::add_print_job_files(const std::string& value) {
  print_job_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
}
inline void PrintSpoolerInternalStateProto::add_print_job_files(std::string&& value) {
  print_job_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
}
inline void PrintSpoolerInternalStateProto::add_print_job_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  print_job_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
}
inline void PrintSpoolerInternalStateProto::add_print_job_files(const char* value, size_t size) {
  print_job_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PrintSpoolerInternalStateProto::print_job_files() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
  return print_job_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PrintSpoolerInternalStateProto::mutable_print_job_files() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintSpoolerInternalStateProto.print_job_files)
  return &print_job_files_;
}

// repeated .android.content.ComponentNameProto approved_services = 3;
inline int PrintSpoolerInternalStateProto::approved_services_size() const {
  return approved_services_.size();
}
inline ::android::content::ComponentNameProto* PrintSpoolerInternalStateProto::mutable_approved_services(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintSpoolerInternalStateProto.approved_services)
  return approved_services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
PrintSpoolerInternalStateProto::mutable_approved_services() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintSpoolerInternalStateProto.approved_services)
  return &approved_services_;
}
inline const ::android::content::ComponentNameProto& PrintSpoolerInternalStateProto::approved_services(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintSpoolerInternalStateProto.approved_services)
  return approved_services_.Get(index);
}
inline ::android::content::ComponentNameProto* PrintSpoolerInternalStateProto::add_approved_services() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintSpoolerInternalStateProto.approved_services)
  return approved_services_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
PrintSpoolerInternalStateProto::approved_services() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintSpoolerInternalStateProto.approved_services)
  return approved_services_;
}

// -------------------------------------------------------------------

// PrinterCapabilitiesProto

// optional .android.service.print.MarginsProto min_margins = 1;
inline bool PrinterCapabilitiesProto::has_min_margins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterCapabilitiesProto::clear_min_margins() {
  if (min_margins_ != nullptr) min_margins_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::print::MarginsProto& PrinterCapabilitiesProto::min_margins() const {
  const ::android::service::print::MarginsProto* p = min_margins_;
  // @@protoc_insertion_point(field_get:android.service.print.PrinterCapabilitiesProto.min_margins)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::MarginsProto*>(
      &::android::service::print::_MarginsProto_default_instance_);
}
inline ::android::service::print::MarginsProto* PrinterCapabilitiesProto::release_min_margins() {
  // @@protoc_insertion_point(field_release:android.service.print.PrinterCapabilitiesProto.min_margins)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::print::MarginsProto* temp = min_margins_;
  min_margins_ = nullptr;
  return temp;
}
inline ::android::service::print::MarginsProto* PrinterCapabilitiesProto::mutable_min_margins() {
  _has_bits_[0] |= 0x00000001u;
  if (min_margins_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::MarginsProto>(GetArenaNoVirtual());
    min_margins_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterCapabilitiesProto.min_margins)
  return min_margins_;
}
inline void PrinterCapabilitiesProto::set_allocated_min_margins(::android::service::print::MarginsProto* min_margins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete min_margins_;
  }
  if (min_margins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      min_margins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_margins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_margins_ = min_margins;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrinterCapabilitiesProto.min_margins)
}

// repeated .android.service.print.MediaSizeProto media_sizes = 2;
inline int PrinterCapabilitiesProto::media_sizes_size() const {
  return media_sizes_.size();
}
inline void PrinterCapabilitiesProto::clear_media_sizes() {
  media_sizes_.Clear();
}
inline ::android::service::print::MediaSizeProto* PrinterCapabilitiesProto::mutable_media_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterCapabilitiesProto.media_sizes)
  return media_sizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::MediaSizeProto >*
PrinterCapabilitiesProto::mutable_media_sizes() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterCapabilitiesProto.media_sizes)
  return &media_sizes_;
}
inline const ::android::service::print::MediaSizeProto& PrinterCapabilitiesProto::media_sizes(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterCapabilitiesProto.media_sizes)
  return media_sizes_.Get(index);
}
inline ::android::service::print::MediaSizeProto* PrinterCapabilitiesProto::add_media_sizes() {
  // @@protoc_insertion_point(field_add:android.service.print.PrinterCapabilitiesProto.media_sizes)
  return media_sizes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::MediaSizeProto >&
PrinterCapabilitiesProto::media_sizes() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterCapabilitiesProto.media_sizes)
  return media_sizes_;
}

// repeated .android.service.print.ResolutionProto resolutions = 3;
inline int PrinterCapabilitiesProto::resolutions_size() const {
  return resolutions_.size();
}
inline void PrinterCapabilitiesProto::clear_resolutions() {
  resolutions_.Clear();
}
inline ::android::service::print::ResolutionProto* PrinterCapabilitiesProto::mutable_resolutions(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterCapabilitiesProto.resolutions)
  return resolutions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ResolutionProto >*
PrinterCapabilitiesProto::mutable_resolutions() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterCapabilitiesProto.resolutions)
  return &resolutions_;
}
inline const ::android::service::print::ResolutionProto& PrinterCapabilitiesProto::resolutions(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterCapabilitiesProto.resolutions)
  return resolutions_.Get(index);
}
inline ::android::service::print::ResolutionProto* PrinterCapabilitiesProto::add_resolutions() {
  // @@protoc_insertion_point(field_add:android.service.print.PrinterCapabilitiesProto.resolutions)
  return resolutions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::ResolutionProto >&
PrinterCapabilitiesProto::resolutions() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterCapabilitiesProto.resolutions)
  return resolutions_;
}

// repeated .android.service.print.PrintAttributesProto.ColorMode color_modes = 4;
inline int PrinterCapabilitiesProto::color_modes_size() const {
  return color_modes_.size();
}
inline void PrinterCapabilitiesProto::clear_color_modes() {
  color_modes_.Clear();
}
inline ::android::service::print::PrintAttributesProto_ColorMode PrinterCapabilitiesProto::color_modes(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterCapabilitiesProto.color_modes)
  return static_cast< ::android::service::print::PrintAttributesProto_ColorMode >(color_modes_.Get(index));
}
inline void PrinterCapabilitiesProto::set_color_modes(int index, ::android::service::print::PrintAttributesProto_ColorMode value) {
  assert(::android::service::print::PrintAttributesProto_ColorMode_IsValid(value));
  color_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.service.print.PrinterCapabilitiesProto.color_modes)
}
inline void PrinterCapabilitiesProto::add_color_modes(::android::service::print::PrintAttributesProto_ColorMode value) {
  assert(::android::service::print::PrintAttributesProto_ColorMode_IsValid(value));
  color_modes_.Add(value);
  // @@protoc_insertion_point(field_add:android.service.print.PrinterCapabilitiesProto.color_modes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PrinterCapabilitiesProto::color_modes() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterCapabilitiesProto.color_modes)
  return color_modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PrinterCapabilitiesProto::mutable_color_modes() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterCapabilitiesProto.color_modes)
  return &color_modes_;
}

// repeated .android.service.print.PrintAttributesProto.DuplexMode duplex_modes = 5;
inline int PrinterCapabilitiesProto::duplex_modes_size() const {
  return duplex_modes_.size();
}
inline void PrinterCapabilitiesProto::clear_duplex_modes() {
  duplex_modes_.Clear();
}
inline ::android::service::print::PrintAttributesProto_DuplexMode PrinterCapabilitiesProto::duplex_modes(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterCapabilitiesProto.duplex_modes)
  return static_cast< ::android::service::print::PrintAttributesProto_DuplexMode >(duplex_modes_.Get(index));
}
inline void PrinterCapabilitiesProto::set_duplex_modes(int index, ::android::service::print::PrintAttributesProto_DuplexMode value) {
  assert(::android::service::print::PrintAttributesProto_DuplexMode_IsValid(value));
  duplex_modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.service.print.PrinterCapabilitiesProto.duplex_modes)
}
inline void PrinterCapabilitiesProto::add_duplex_modes(::android::service::print::PrintAttributesProto_DuplexMode value) {
  assert(::android::service::print::PrintAttributesProto_DuplexMode_IsValid(value));
  duplex_modes_.Add(value);
  // @@protoc_insertion_point(field_add:android.service.print.PrinterCapabilitiesProto.duplex_modes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PrinterCapabilitiesProto::duplex_modes() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterCapabilitiesProto.duplex_modes)
  return duplex_modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PrinterCapabilitiesProto::mutable_duplex_modes() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterCapabilitiesProto.duplex_modes)
  return &duplex_modes_;
}

// -------------------------------------------------------------------

// PrinterInfoProto

// optional .android.service.print.PrinterIdProto id = 1;
inline bool PrinterInfoProto::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrinterInfoProto::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::service::print::PrinterIdProto& PrinterInfoProto::id() const {
  const ::android::service::print::PrinterIdProto* p = id_;
  // @@protoc_insertion_point(field_get:android.service.print.PrinterInfoProto.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrinterIdProto*>(
      &::android::service::print::_PrinterIdProto_default_instance_);
}
inline ::android::service::print::PrinterIdProto* PrinterInfoProto::release_id() {
  // @@protoc_insertion_point(field_release:android.service.print.PrinterInfoProto.id)
  _has_bits_[0] &= ~0x00000004u;
  ::android::service::print::PrinterIdProto* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::android::service::print::PrinterIdProto* PrinterInfoProto::mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrinterIdProto>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterInfoProto.id)
  return id_;
}
inline void PrinterInfoProto::set_allocated_id(::android::service::print::PrinterIdProto* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrinterInfoProto.id)
}

// optional string name = 2;
inline bool PrinterInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterInfoProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrinterInfoProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterInfoProto.name)
  return name_.GetNoArena();
}
inline void PrinterInfoProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrinterInfoProto.name)
}
inline void PrinterInfoProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrinterInfoProto.name)
}
inline void PrinterInfoProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrinterInfoProto.name)
}
inline void PrinterInfoProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrinterInfoProto.name)
}
inline std::string* PrinterInfoProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterInfoProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterInfoProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.print.PrinterInfoProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterInfoProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrinterInfoProto.name)
}

// optional .android.service.print.PrinterInfoProto.Status status = 3 [(.android.privacy) = {
inline bool PrinterInfoProto::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrinterInfoProto::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::service::print::PrinterInfoProto_Status PrinterInfoProto::status() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterInfoProto.status)
  return static_cast< ::android::service::print::PrinterInfoProto_Status >(status_);
}
inline void PrinterInfoProto::set_status(::android::service::print::PrinterInfoProto_Status value) {
  assert(::android::service::print::PrinterInfoProto_Status_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrinterInfoProto.status)
}

// optional string description = 4;
inline bool PrinterInfoProto::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrinterInfoProto::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrinterInfoProto::description() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterInfoProto.description)
  return description_.GetNoArena();
}
inline void PrinterInfoProto::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrinterInfoProto.description)
}
inline void PrinterInfoProto::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrinterInfoProto.description)
}
inline void PrinterInfoProto::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrinterInfoProto.description)
}
inline void PrinterInfoProto::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrinterInfoProto.description)
}
inline std::string* PrinterInfoProto::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterInfoProto.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterInfoProto::release_description() {
  // @@protoc_insertion_point(field_release:android.service.print.PrinterInfoProto.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterInfoProto::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrinterInfoProto.description)
}

// optional .android.service.print.PrinterCapabilitiesProto capabilities = 5;
inline bool PrinterInfoProto::has_capabilities() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrinterInfoProto::clear_capabilities() {
  if (capabilities_ != nullptr) capabilities_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::service::print::PrinterCapabilitiesProto& PrinterInfoProto::capabilities() const {
  const ::android::service::print::PrinterCapabilitiesProto* p = capabilities_;
  // @@protoc_insertion_point(field_get:android.service.print.PrinterInfoProto.capabilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrinterCapabilitiesProto*>(
      &::android::service::print::_PrinterCapabilitiesProto_default_instance_);
}
inline ::android::service::print::PrinterCapabilitiesProto* PrinterInfoProto::release_capabilities() {
  // @@protoc_insertion_point(field_release:android.service.print.PrinterInfoProto.capabilities)
  _has_bits_[0] &= ~0x00000008u;
  ::android::service::print::PrinterCapabilitiesProto* temp = capabilities_;
  capabilities_ = nullptr;
  return temp;
}
inline ::android::service::print::PrinterCapabilitiesProto* PrinterInfoProto::mutable_capabilities() {
  _has_bits_[0] |= 0x00000008u;
  if (capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrinterCapabilitiesProto>(GetArenaNoVirtual());
    capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterInfoProto.capabilities)
  return capabilities_;
}
inline void PrinterInfoProto::set_allocated_capabilities(::android::service::print::PrinterCapabilitiesProto* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capabilities_;
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrinterInfoProto.capabilities)
}

// -------------------------------------------------------------------

// PrinterDiscoverySessionProto

// optional bool is_destroyed = 1;
inline bool PrinterDiscoverySessionProto::has_is_destroyed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterDiscoverySessionProto::clear_is_destroyed() {
  is_destroyed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PrinterDiscoverySessionProto::is_destroyed() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterDiscoverySessionProto.is_destroyed)
  return is_destroyed_;
}
inline void PrinterDiscoverySessionProto::set_is_destroyed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_destroyed_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrinterDiscoverySessionProto.is_destroyed)
}

// optional bool is_printer_discovery_in_progress = 2;
inline bool PrinterDiscoverySessionProto::has_is_printer_discovery_in_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrinterDiscoverySessionProto::clear_is_printer_discovery_in_progress() {
  is_printer_discovery_in_progress_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PrinterDiscoverySessionProto::is_printer_discovery_in_progress() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterDiscoverySessionProto.is_printer_discovery_in_progress)
  return is_printer_discovery_in_progress_;
}
inline void PrinterDiscoverySessionProto::set_is_printer_discovery_in_progress(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_printer_discovery_in_progress_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrinterDiscoverySessionProto.is_printer_discovery_in_progress)
}

// repeated string printer_discovery_observers = 3;
inline int PrinterDiscoverySessionProto::printer_discovery_observers_size() const {
  return printer_discovery_observers_.size();
}
inline void PrinterDiscoverySessionProto::clear_printer_discovery_observers() {
  printer_discovery_observers_.Clear();
}
inline const std::string& PrinterDiscoverySessionProto::printer_discovery_observers(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
  return printer_discovery_observers_.Get(index);
}
inline std::string* PrinterDiscoverySessionProto::mutable_printer_discovery_observers(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
  return printer_discovery_observers_.Mutable(index);
}
inline void PrinterDiscoverySessionProto::set_printer_discovery_observers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
  printer_discovery_observers_.Mutable(index)->assign(value);
}
inline void PrinterDiscoverySessionProto::set_printer_discovery_observers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
  printer_discovery_observers_.Mutable(index)->assign(std::move(value));
}
inline void PrinterDiscoverySessionProto::set_printer_discovery_observers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  printer_discovery_observers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
}
inline void PrinterDiscoverySessionProto::set_printer_discovery_observers(int index, const char* value, size_t size) {
  printer_discovery_observers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
}
inline std::string* PrinterDiscoverySessionProto::add_printer_discovery_observers() {
  // @@protoc_insertion_point(field_add_mutable:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
  return printer_discovery_observers_.Add();
}
inline void PrinterDiscoverySessionProto::add_printer_discovery_observers(const std::string& value) {
  printer_discovery_observers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
}
inline void PrinterDiscoverySessionProto::add_printer_discovery_observers(std::string&& value) {
  printer_discovery_observers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
}
inline void PrinterDiscoverySessionProto::add_printer_discovery_observers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  printer_discovery_observers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
}
inline void PrinterDiscoverySessionProto::add_printer_discovery_observers(const char* value, size_t size) {
  printer_discovery_observers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PrinterDiscoverySessionProto::printer_discovery_observers() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
  return printer_discovery_observers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PrinterDiscoverySessionProto::mutable_printer_discovery_observers() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterDiscoverySessionProto.printer_discovery_observers)
  return &printer_discovery_observers_;
}

// repeated string discovery_requests = 4;
inline int PrinterDiscoverySessionProto::discovery_requests_size() const {
  return discovery_requests_.size();
}
inline void PrinterDiscoverySessionProto::clear_discovery_requests() {
  discovery_requests_.Clear();
}
inline const std::string& PrinterDiscoverySessionProto::discovery_requests(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
  return discovery_requests_.Get(index);
}
inline std::string* PrinterDiscoverySessionProto::mutable_discovery_requests(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
  return discovery_requests_.Mutable(index);
}
inline void PrinterDiscoverySessionProto::set_discovery_requests(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
  discovery_requests_.Mutable(index)->assign(value);
}
inline void PrinterDiscoverySessionProto::set_discovery_requests(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
  discovery_requests_.Mutable(index)->assign(std::move(value));
}
inline void PrinterDiscoverySessionProto::set_discovery_requests(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  discovery_requests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
}
inline void PrinterDiscoverySessionProto::set_discovery_requests(int index, const char* value, size_t size) {
  discovery_requests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
}
inline std::string* PrinterDiscoverySessionProto::add_discovery_requests() {
  // @@protoc_insertion_point(field_add_mutable:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
  return discovery_requests_.Add();
}
inline void PrinterDiscoverySessionProto::add_discovery_requests(const std::string& value) {
  discovery_requests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
}
inline void PrinterDiscoverySessionProto::add_discovery_requests(std::string&& value) {
  discovery_requests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
}
inline void PrinterDiscoverySessionProto::add_discovery_requests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  discovery_requests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
}
inline void PrinterDiscoverySessionProto::add_discovery_requests(const char* value, size_t size) {
  discovery_requests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PrinterDiscoverySessionProto::discovery_requests() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
  return discovery_requests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PrinterDiscoverySessionProto::mutable_discovery_requests() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterDiscoverySessionProto.discovery_requests)
  return &discovery_requests_;
}

// repeated .android.service.print.PrinterIdProto tracked_printer_requests = 5;
inline int PrinterDiscoverySessionProto::tracked_printer_requests_size() const {
  return tracked_printer_requests_.size();
}
inline void PrinterDiscoverySessionProto::clear_tracked_printer_requests() {
  tracked_printer_requests_.Clear();
}
inline ::android::service::print::PrinterIdProto* PrinterDiscoverySessionProto::mutable_tracked_printer_requests(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterDiscoverySessionProto.tracked_printer_requests)
  return tracked_printer_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >*
PrinterDiscoverySessionProto::mutable_tracked_printer_requests() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterDiscoverySessionProto.tracked_printer_requests)
  return &tracked_printer_requests_;
}
inline const ::android::service::print::PrinterIdProto& PrinterDiscoverySessionProto::tracked_printer_requests(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterDiscoverySessionProto.tracked_printer_requests)
  return tracked_printer_requests_.Get(index);
}
inline ::android::service::print::PrinterIdProto* PrinterDiscoverySessionProto::add_tracked_printer_requests() {
  // @@protoc_insertion_point(field_add:android.service.print.PrinterDiscoverySessionProto.tracked_printer_requests)
  return tracked_printer_requests_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >&
PrinterDiscoverySessionProto::tracked_printer_requests() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterDiscoverySessionProto.tracked_printer_requests)
  return tracked_printer_requests_;
}

// repeated .android.service.print.PrinterInfoProto printer = 6;
inline int PrinterDiscoverySessionProto::printer_size() const {
  return printer_.size();
}
inline void PrinterDiscoverySessionProto::clear_printer() {
  printer_.Clear();
}
inline ::android::service::print::PrinterInfoProto* PrinterDiscoverySessionProto::mutable_printer(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterDiscoverySessionProto.printer)
  return printer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterInfoProto >*
PrinterDiscoverySessionProto::mutable_printer() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrinterDiscoverySessionProto.printer)
  return &printer_;
}
inline const ::android::service::print::PrinterInfoProto& PrinterDiscoverySessionProto::printer(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterDiscoverySessionProto.printer)
  return printer_.Get(index);
}
inline ::android::service::print::PrinterInfoProto* PrinterDiscoverySessionProto::add_printer() {
  // @@protoc_insertion_point(field_add:android.service.print.PrinterDiscoverySessionProto.printer)
  return printer_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterInfoProto >&
PrinterDiscoverySessionProto::printer() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrinterDiscoverySessionProto.printer)
  return printer_;
}

// -------------------------------------------------------------------

// InstalledPrintServiceProto

// optional .android.content.ComponentNameProto component_name = 1;
inline bool InstalledPrintServiceProto::has_component_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::content::ComponentNameProto& InstalledPrintServiceProto::component_name() const {
  const ::android::content::ComponentNameProto* p = component_name_;
  // @@protoc_insertion_point(field_get:android.service.print.InstalledPrintServiceProto.component_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* InstalledPrintServiceProto::release_component_name() {
  // @@protoc_insertion_point(field_release:android.service.print.InstalledPrintServiceProto.component_name)
  _has_bits_[0] &= ~0x00000008u;
  ::android::content::ComponentNameProto* temp = component_name_;
  component_name_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* InstalledPrintServiceProto::mutable_component_name() {
  _has_bits_[0] |= 0x00000008u;
  if (component_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    component_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.InstalledPrintServiceProto.component_name)
  return component_name_;
}
inline void InstalledPrintServiceProto::set_allocated_component_name(::android::content::ComponentNameProto* component_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_name_);
  }
  if (component_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  component_name_ = component_name;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.InstalledPrintServiceProto.component_name)
}

// optional string settings_activity = 2;
inline bool InstalledPrintServiceProto::has_settings_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstalledPrintServiceProto::clear_settings_activity() {
  settings_activity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstalledPrintServiceProto::settings_activity() const {
  // @@protoc_insertion_point(field_get:android.service.print.InstalledPrintServiceProto.settings_activity)
  return settings_activity_.GetNoArena();
}
inline void InstalledPrintServiceProto::set_settings_activity(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  settings_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.InstalledPrintServiceProto.settings_activity)
}
inline void InstalledPrintServiceProto::set_settings_activity(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  settings_activity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.InstalledPrintServiceProto.settings_activity)
}
inline void InstalledPrintServiceProto::set_settings_activity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  settings_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.InstalledPrintServiceProto.settings_activity)
}
inline void InstalledPrintServiceProto::set_settings_activity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  settings_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.InstalledPrintServiceProto.settings_activity)
}
inline std::string* InstalledPrintServiceProto::mutable_settings_activity() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.print.InstalledPrintServiceProto.settings_activity)
  return settings_activity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstalledPrintServiceProto::release_settings_activity() {
  // @@protoc_insertion_point(field_release:android.service.print.InstalledPrintServiceProto.settings_activity)
  if (!has_settings_activity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return settings_activity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstalledPrintServiceProto::set_allocated_settings_activity(std::string* settings_activity) {
  if (settings_activity != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_activity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settings_activity);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.InstalledPrintServiceProto.settings_activity)
}

// optional string add_printers_activity = 3;
inline bool InstalledPrintServiceProto::has_add_printers_activity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstalledPrintServiceProto::clear_add_printers_activity() {
  add_printers_activity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InstalledPrintServiceProto::add_printers_activity() const {
  // @@protoc_insertion_point(field_get:android.service.print.InstalledPrintServiceProto.add_printers_activity)
  return add_printers_activity_.GetNoArena();
}
inline void InstalledPrintServiceProto::set_add_printers_activity(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  add_printers_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.InstalledPrintServiceProto.add_printers_activity)
}
inline void InstalledPrintServiceProto::set_add_printers_activity(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  add_printers_activity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.InstalledPrintServiceProto.add_printers_activity)
}
inline void InstalledPrintServiceProto::set_add_printers_activity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  add_printers_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.InstalledPrintServiceProto.add_printers_activity)
}
inline void InstalledPrintServiceProto::set_add_printers_activity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  add_printers_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.InstalledPrintServiceProto.add_printers_activity)
}
inline std::string* InstalledPrintServiceProto::mutable_add_printers_activity() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.print.InstalledPrintServiceProto.add_printers_activity)
  return add_printers_activity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstalledPrintServiceProto::release_add_printers_activity() {
  // @@protoc_insertion_point(field_release:android.service.print.InstalledPrintServiceProto.add_printers_activity)
  if (!has_add_printers_activity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return add_printers_activity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstalledPrintServiceProto::set_allocated_add_printers_activity(std::string* add_printers_activity) {
  if (add_printers_activity != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  add_printers_activity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_printers_activity);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.InstalledPrintServiceProto.add_printers_activity)
}

// optional string advanced_options_activity = 4;
inline bool InstalledPrintServiceProto::has_advanced_options_activity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstalledPrintServiceProto::clear_advanced_options_activity() {
  advanced_options_activity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InstalledPrintServiceProto::advanced_options_activity() const {
  // @@protoc_insertion_point(field_get:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
  return advanced_options_activity_.GetNoArena();
}
inline void InstalledPrintServiceProto::set_advanced_options_activity(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  advanced_options_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
}
inline void InstalledPrintServiceProto::set_advanced_options_activity(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  advanced_options_activity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
}
inline void InstalledPrintServiceProto::set_advanced_options_activity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  advanced_options_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
}
inline void InstalledPrintServiceProto::set_advanced_options_activity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  advanced_options_activity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
}
inline std::string* InstalledPrintServiceProto::mutable_advanced_options_activity() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
  return advanced_options_activity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstalledPrintServiceProto::release_advanced_options_activity() {
  // @@protoc_insertion_point(field_release:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
  if (!has_advanced_options_activity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return advanced_options_activity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstalledPrintServiceProto::set_allocated_advanced_options_activity(std::string* advanced_options_activity) {
  if (advanced_options_activity != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  advanced_options_activity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), advanced_options_activity);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.InstalledPrintServiceProto.advanced_options_activity)
}

// -------------------------------------------------------------------

// PrinterIdProto

// optional .android.content.ComponentNameProto service_name = 1 [(.android.privacy) = {
inline bool PrinterIdProto::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::ComponentNameProto& PrinterIdProto::service_name() const {
  const ::android::content::ComponentNameProto* p = service_name_;
  // @@protoc_insertion_point(field_get:android.service.print.PrinterIdProto.service_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* PrinterIdProto::release_service_name() {
  // @@protoc_insertion_point(field_release:android.service.print.PrinterIdProto.service_name)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ComponentNameProto* temp = service_name_;
  service_name_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* PrinterIdProto::mutable_service_name() {
  _has_bits_[0] |= 0x00000002u;
  if (service_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    service_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterIdProto.service_name)
  return service_name_;
}
inline void PrinterIdProto::set_allocated_service_name(::android::content::ComponentNameProto* service_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_name_);
  }
  if (service_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  service_name_ = service_name;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrinterIdProto.service_name)
}

// optional string local_id = 2;
inline bool PrinterIdProto::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterIdProto::clear_local_id() {
  local_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrinterIdProto::local_id() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrinterIdProto.local_id)
  return local_id_.GetNoArena();
}
inline void PrinterIdProto::set_local_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrinterIdProto.local_id)
}
inline void PrinterIdProto::set_local_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  local_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrinterIdProto.local_id)
}
inline void PrinterIdProto::set_local_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrinterIdProto.local_id)
}
inline void PrinterIdProto::set_local_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrinterIdProto.local_id)
}
inline std::string* PrinterIdProto::mutable_local_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrinterIdProto.local_id)
  return local_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterIdProto::release_local_id() {
  // @@protoc_insertion_point(field_release:android.service.print.PrinterIdProto.local_id)
  if (!has_local_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return local_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterIdProto::set_allocated_local_id(std::string* local_id) {
  if (local_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  local_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_id);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrinterIdProto.local_id)
}

// -------------------------------------------------------------------

// ActivePrintServiceProto

// optional .android.content.ComponentNameProto component_name = 1;
inline bool ActivePrintServiceProto::has_component_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::ComponentNameProto& ActivePrintServiceProto::component_name() const {
  const ::android::content::ComponentNameProto* p = component_name_;
  // @@protoc_insertion_point(field_get:android.service.print.ActivePrintServiceProto.component_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* ActivePrintServiceProto::release_component_name() {
  // @@protoc_insertion_point(field_release:android.service.print.ActivePrintServiceProto.component_name)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::ComponentNameProto* temp = component_name_;
  component_name_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* ActivePrintServiceProto::mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  if (component_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    component_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.ActivePrintServiceProto.component_name)
  return component_name_;
}
inline void ActivePrintServiceProto::set_allocated_component_name(::android::content::ComponentNameProto* component_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_name_);
  }
  if (component_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_ = component_name;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.ActivePrintServiceProto.component_name)
}

// optional bool is_destroyed = 2;
inline bool ActivePrintServiceProto::has_is_destroyed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivePrintServiceProto::clear_is_destroyed() {
  is_destroyed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ActivePrintServiceProto::is_destroyed() const {
  // @@protoc_insertion_point(field_get:android.service.print.ActivePrintServiceProto.is_destroyed)
  return is_destroyed_;
}
inline void ActivePrintServiceProto::set_is_destroyed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_destroyed_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.ActivePrintServiceProto.is_destroyed)
}

// optional bool is_bound = 3;
inline bool ActivePrintServiceProto::has_is_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivePrintServiceProto::clear_is_bound() {
  is_bound_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ActivePrintServiceProto::is_bound() const {
  // @@protoc_insertion_point(field_get:android.service.print.ActivePrintServiceProto.is_bound)
  return is_bound_;
}
inline void ActivePrintServiceProto::set_is_bound(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_bound_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.ActivePrintServiceProto.is_bound)
}

// optional bool has_discovery_session = 4;
inline bool ActivePrintServiceProto::has_has_discovery_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivePrintServiceProto::clear_has_discovery_session() {
  has_discovery_session_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ActivePrintServiceProto::has_discovery_session() const {
  // @@protoc_insertion_point(field_get:android.service.print.ActivePrintServiceProto.has_discovery_session)
  return has_discovery_session_;
}
inline void ActivePrintServiceProto::set_has_discovery_session(bool value) {
  _has_bits_[0] |= 0x00000008u;
  has_discovery_session_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.ActivePrintServiceProto.has_discovery_session)
}

// optional bool has_active_print_jobs = 5;
inline bool ActivePrintServiceProto::has_has_active_print_jobs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivePrintServiceProto::clear_has_active_print_jobs() {
  has_active_print_jobs_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ActivePrintServiceProto::has_active_print_jobs() const {
  // @@protoc_insertion_point(field_get:android.service.print.ActivePrintServiceProto.has_active_print_jobs)
  return has_active_print_jobs_;
}
inline void ActivePrintServiceProto::set_has_active_print_jobs(bool value) {
  _has_bits_[0] |= 0x00000010u;
  has_active_print_jobs_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.ActivePrintServiceProto.has_active_print_jobs)
}

// optional bool is_discovering_printers = 6;
inline bool ActivePrintServiceProto::has_is_discovering_printers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivePrintServiceProto::clear_is_discovering_printers() {
  is_discovering_printers_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ActivePrintServiceProto::is_discovering_printers() const {
  // @@protoc_insertion_point(field_get:android.service.print.ActivePrintServiceProto.is_discovering_printers)
  return is_discovering_printers_;
}
inline void ActivePrintServiceProto::set_is_discovering_printers(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_discovering_printers_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.ActivePrintServiceProto.is_discovering_printers)
}

// repeated .android.service.print.PrinterIdProto tracked_printers = 7;
inline int ActivePrintServiceProto::tracked_printers_size() const {
  return tracked_printers_.size();
}
inline void ActivePrintServiceProto::clear_tracked_printers() {
  tracked_printers_.Clear();
}
inline ::android::service::print::PrinterIdProto* ActivePrintServiceProto::mutable_tracked_printers(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.ActivePrintServiceProto.tracked_printers)
  return tracked_printers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >*
ActivePrintServiceProto::mutable_tracked_printers() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.ActivePrintServiceProto.tracked_printers)
  return &tracked_printers_;
}
inline const ::android::service::print::PrinterIdProto& ActivePrintServiceProto::tracked_printers(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.ActivePrintServiceProto.tracked_printers)
  return tracked_printers_.Get(index);
}
inline ::android::service::print::PrinterIdProto* ActivePrintServiceProto::add_tracked_printers() {
  // @@protoc_insertion_point(field_add:android.service.print.ActivePrintServiceProto.tracked_printers)
  return tracked_printers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PrinterIdProto >&
ActivePrintServiceProto::tracked_printers() const {
  // @@protoc_insertion_point(field_list:android.service.print.ActivePrintServiceProto.tracked_printers)
  return tracked_printers_;
}

// -------------------------------------------------------------------

// MediaSizeProto

// optional string id = 1;
inline bool MediaSizeProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaSizeProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaSizeProto::id() const {
  // @@protoc_insertion_point(field_get:android.service.print.MediaSizeProto.id)
  return id_.GetNoArena();
}
inline void MediaSizeProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.MediaSizeProto.id)
}
inline void MediaSizeProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.MediaSizeProto.id)
}
inline void MediaSizeProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.MediaSizeProto.id)
}
inline void MediaSizeProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.MediaSizeProto.id)
}
inline std::string* MediaSizeProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.print.MediaSizeProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaSizeProto::release_id() {
  // @@protoc_insertion_point(field_release:android.service.print.MediaSizeProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaSizeProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.MediaSizeProto.id)
}

// optional string label = 2;
inline bool MediaSizeProto::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaSizeProto::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MediaSizeProto::label() const {
  // @@protoc_insertion_point(field_get:android.service.print.MediaSizeProto.label)
  return label_.GetNoArena();
}
inline void MediaSizeProto::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.MediaSizeProto.label)
}
inline void MediaSizeProto::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.MediaSizeProto.label)
}
inline void MediaSizeProto::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.MediaSizeProto.label)
}
inline void MediaSizeProto::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.MediaSizeProto.label)
}
inline std::string* MediaSizeProto::mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.print.MediaSizeProto.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaSizeProto::release_label() {
  // @@protoc_insertion_point(field_release:android.service.print.MediaSizeProto.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaSizeProto::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.MediaSizeProto.label)
}

// optional int32 height_mils = 3;
inline bool MediaSizeProto::has_height_mils() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaSizeProto::clear_height_mils() {
  height_mils_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaSizeProto::height_mils() const {
  // @@protoc_insertion_point(field_get:android.service.print.MediaSizeProto.height_mils)
  return height_mils_;
}
inline void MediaSizeProto::set_height_mils(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_mils_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.MediaSizeProto.height_mils)
}

// optional int32 width_mils = 4;
inline bool MediaSizeProto::has_width_mils() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaSizeProto::clear_width_mils() {
  width_mils_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaSizeProto::width_mils() const {
  // @@protoc_insertion_point(field_get:android.service.print.MediaSizeProto.width_mils)
  return width_mils_;
}
inline void MediaSizeProto::set_width_mils(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_mils_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.MediaSizeProto.width_mils)
}

// -------------------------------------------------------------------

// ResolutionProto

// optional string id = 1;
inline bool ResolutionProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResolutionProto::id() const {
  // @@protoc_insertion_point(field_get:android.service.print.ResolutionProto.id)
  return id_.GetNoArena();
}
inline void ResolutionProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.ResolutionProto.id)
}
inline void ResolutionProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.ResolutionProto.id)
}
inline void ResolutionProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.ResolutionProto.id)
}
inline void ResolutionProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.ResolutionProto.id)
}
inline std::string* ResolutionProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.print.ResolutionProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResolutionProto::release_id() {
  // @@protoc_insertion_point(field_release:android.service.print.ResolutionProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResolutionProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.ResolutionProto.id)
}

// optional string label = 2;
inline bool ResolutionProto::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionProto::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResolutionProto::label() const {
  // @@protoc_insertion_point(field_get:android.service.print.ResolutionProto.label)
  return label_.GetNoArena();
}
inline void ResolutionProto::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.ResolutionProto.label)
}
inline void ResolutionProto::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.ResolutionProto.label)
}
inline void ResolutionProto::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.ResolutionProto.label)
}
inline void ResolutionProto::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.ResolutionProto.label)
}
inline std::string* ResolutionProto::mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.print.ResolutionProto.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResolutionProto::release_label() {
  // @@protoc_insertion_point(field_release:android.service.print.ResolutionProto.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResolutionProto::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.ResolutionProto.label)
}

// optional int32 horizontal_dpi = 3;
inline bool ResolutionProto::has_horizontal_dpi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionProto::clear_horizontal_dpi() {
  horizontal_dpi_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolutionProto::horizontal_dpi() const {
  // @@protoc_insertion_point(field_get:android.service.print.ResolutionProto.horizontal_dpi)
  return horizontal_dpi_;
}
inline void ResolutionProto::set_horizontal_dpi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  horizontal_dpi_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.ResolutionProto.horizontal_dpi)
}

// optional int32 vertical_dpi = 4;
inline bool ResolutionProto::has_vertical_dpi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionProto::clear_vertical_dpi() {
  vertical_dpi_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolutionProto::vertical_dpi() const {
  // @@protoc_insertion_point(field_get:android.service.print.ResolutionProto.vertical_dpi)
  return vertical_dpi_;
}
inline void ResolutionProto::set_vertical_dpi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  vertical_dpi_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.ResolutionProto.vertical_dpi)
}

// -------------------------------------------------------------------

// MarginsProto

// optional int32 top_mils = 1;
inline bool MarginsProto::has_top_mils() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarginsProto::clear_top_mils() {
  top_mils_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarginsProto::top_mils() const {
  // @@protoc_insertion_point(field_get:android.service.print.MarginsProto.top_mils)
  return top_mils_;
}
inline void MarginsProto::set_top_mils(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  top_mils_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.MarginsProto.top_mils)
}

// optional int32 left_mils = 2;
inline bool MarginsProto::has_left_mils() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarginsProto::clear_left_mils() {
  left_mils_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarginsProto::left_mils() const {
  // @@protoc_insertion_point(field_get:android.service.print.MarginsProto.left_mils)
  return left_mils_;
}
inline void MarginsProto::set_left_mils(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  left_mils_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.MarginsProto.left_mils)
}

// optional int32 right_mils = 3;
inline bool MarginsProto::has_right_mils() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarginsProto::clear_right_mils() {
  right_mils_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarginsProto::right_mils() const {
  // @@protoc_insertion_point(field_get:android.service.print.MarginsProto.right_mils)
  return right_mils_;
}
inline void MarginsProto::set_right_mils(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  right_mils_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.MarginsProto.right_mils)
}

// optional int32 bottom_mils = 4;
inline bool MarginsProto::has_bottom_mils() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarginsProto::clear_bottom_mils() {
  bottom_mils_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarginsProto::bottom_mils() const {
  // @@protoc_insertion_point(field_get:android.service.print.MarginsProto.bottom_mils)
  return bottom_mils_;
}
inline void MarginsProto::set_bottom_mils(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_mils_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.MarginsProto.bottom_mils)
}

// -------------------------------------------------------------------

// PrintAttributesProto

// optional .android.service.print.ResolutionProto media_size = 1;
inline bool PrintAttributesProto::has_media_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintAttributesProto::clear_media_size() {
  if (media_size_ != nullptr) media_size_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::print::ResolutionProto& PrintAttributesProto::media_size() const {
  const ::android::service::print::ResolutionProto* p = media_size_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintAttributesProto.media_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::ResolutionProto*>(
      &::android::service::print::_ResolutionProto_default_instance_);
}
inline ::android::service::print::ResolutionProto* PrintAttributesProto::release_media_size() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintAttributesProto.media_size)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::print::ResolutionProto* temp = media_size_;
  media_size_ = nullptr;
  return temp;
}
inline ::android::service::print::ResolutionProto* PrintAttributesProto::mutable_media_size() {
  _has_bits_[0] |= 0x00000001u;
  if (media_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::ResolutionProto>(GetArenaNoVirtual());
    media_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintAttributesProto.media_size)
  return media_size_;
}
inline void PrintAttributesProto::set_allocated_media_size(::android::service::print::ResolutionProto* media_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete media_size_;
  }
  if (media_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      media_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  media_size_ = media_size;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintAttributesProto.media_size)
}

// optional bool is_portrait = 2;
inline bool PrintAttributesProto::has_is_portrait() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintAttributesProto::clear_is_portrait() {
  is_portrait_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PrintAttributesProto::is_portrait() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintAttributesProto.is_portrait)
  return is_portrait_;
}
inline void PrintAttributesProto::set_is_portrait(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_portrait_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintAttributesProto.is_portrait)
}

// optional .android.service.print.ResolutionProto resolution = 3;
inline bool PrintAttributesProto::has_resolution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintAttributesProto::clear_resolution() {
  if (resolution_ != nullptr) resolution_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::service::print::ResolutionProto& PrintAttributesProto::resolution() const {
  const ::android::service::print::ResolutionProto* p = resolution_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintAttributesProto.resolution)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::ResolutionProto*>(
      &::android::service::print::_ResolutionProto_default_instance_);
}
inline ::android::service::print::ResolutionProto* PrintAttributesProto::release_resolution() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintAttributesProto.resolution)
  _has_bits_[0] &= ~0x00000002u;
  ::android::service::print::ResolutionProto* temp = resolution_;
  resolution_ = nullptr;
  return temp;
}
inline ::android::service::print::ResolutionProto* PrintAttributesProto::mutable_resolution() {
  _has_bits_[0] |= 0x00000002u;
  if (resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::ResolutionProto>(GetArenaNoVirtual());
    resolution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintAttributesProto.resolution)
  return resolution_;
}
inline void PrintAttributesProto::set_allocated_resolution(::android::service::print::ResolutionProto* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resolution_;
  }
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  resolution_ = resolution;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintAttributesProto.resolution)
}

// optional .android.service.print.MarginsProto min_margins = 4;
inline bool PrintAttributesProto::has_min_margins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintAttributesProto::clear_min_margins() {
  if (min_margins_ != nullptr) min_margins_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::service::print::MarginsProto& PrintAttributesProto::min_margins() const {
  const ::android::service::print::MarginsProto* p = min_margins_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintAttributesProto.min_margins)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::MarginsProto*>(
      &::android::service::print::_MarginsProto_default_instance_);
}
inline ::android::service::print::MarginsProto* PrintAttributesProto::release_min_margins() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintAttributesProto.min_margins)
  _has_bits_[0] &= ~0x00000004u;
  ::android::service::print::MarginsProto* temp = min_margins_;
  min_margins_ = nullptr;
  return temp;
}
inline ::android::service::print::MarginsProto* PrintAttributesProto::mutable_min_margins() {
  _has_bits_[0] |= 0x00000004u;
  if (min_margins_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::MarginsProto>(GetArenaNoVirtual());
    min_margins_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintAttributesProto.min_margins)
  return min_margins_;
}
inline void PrintAttributesProto::set_allocated_min_margins(::android::service::print::MarginsProto* min_margins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete min_margins_;
  }
  if (min_margins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      min_margins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_margins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  min_margins_ = min_margins;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintAttributesProto.min_margins)
}

// optional .android.service.print.PrintAttributesProto.ColorMode color_mode = 5;
inline bool PrintAttributesProto::has_color_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintAttributesProto::clear_color_mode() {
  color_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::service::print::PrintAttributesProto_ColorMode PrintAttributesProto::color_mode() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintAttributesProto.color_mode)
  return static_cast< ::android::service::print::PrintAttributesProto_ColorMode >(color_mode_);
}
inline void PrintAttributesProto::set_color_mode(::android::service::print::PrintAttributesProto_ColorMode value) {
  assert(::android::service::print::PrintAttributesProto_ColorMode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  color_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintAttributesProto.color_mode)
}

// optional .android.service.print.PrintAttributesProto.DuplexMode duplex_mode = 6;
inline bool PrintAttributesProto::has_duplex_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintAttributesProto::clear_duplex_mode() {
  duplex_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::android::service::print::PrintAttributesProto_DuplexMode PrintAttributesProto::duplex_mode() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintAttributesProto.duplex_mode)
  return static_cast< ::android::service::print::PrintAttributesProto_DuplexMode >(duplex_mode_);
}
inline void PrintAttributesProto::set_duplex_mode(::android::service::print::PrintAttributesProto_DuplexMode value) {
  assert(::android::service::print::PrintAttributesProto_DuplexMode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  duplex_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintAttributesProto.duplex_mode)
}

// -------------------------------------------------------------------

// PrintDocumentInfoProto

// optional string name = 1 [(.android.privacy) = {
inline bool PrintDocumentInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintDocumentInfoProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrintDocumentInfoProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintDocumentInfoProto.name)
  return name_.GetNoArena();
}
inline void PrintDocumentInfoProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrintDocumentInfoProto.name)
}
inline void PrintDocumentInfoProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrintDocumentInfoProto.name)
}
inline void PrintDocumentInfoProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrintDocumentInfoProto.name)
}
inline void PrintDocumentInfoProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrintDocumentInfoProto.name)
}
inline std::string* PrintDocumentInfoProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintDocumentInfoProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrintDocumentInfoProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintDocumentInfoProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrintDocumentInfoProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintDocumentInfoProto.name)
}

// optional int32 page_count = 2;
inline bool PrintDocumentInfoProto::has_page_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintDocumentInfoProto::clear_page_count() {
  page_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintDocumentInfoProto::page_count() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintDocumentInfoProto.page_count)
  return page_count_;
}
inline void PrintDocumentInfoProto::set_page_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_count_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintDocumentInfoProto.page_count)
}

// optional int32 content_type = 3;
inline bool PrintDocumentInfoProto::has_content_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintDocumentInfoProto::clear_content_type() {
  content_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintDocumentInfoProto::content_type() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintDocumentInfoProto.content_type)
  return content_type_;
}
inline void PrintDocumentInfoProto::set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  content_type_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintDocumentInfoProto.content_type)
}

// optional int64 data_size = 4;
inline bool PrintDocumentInfoProto::has_data_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintDocumentInfoProto::clear_data_size() {
  data_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrintDocumentInfoProto::data_size() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintDocumentInfoProto.data_size)
  return data_size_;
}
inline void PrintDocumentInfoProto::set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  data_size_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintDocumentInfoProto.data_size)
}

// -------------------------------------------------------------------

// PageRangeProto

// optional int32 start = 1;
inline bool PageRangeProto::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageRangeProto::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PageRangeProto::start() const {
  // @@protoc_insertion_point(field_get:android.service.print.PageRangeProto.start)
  return start_;
}
inline void PageRangeProto::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PageRangeProto.start)
}

// optional int32 end = 2;
inline bool PageRangeProto::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageRangeProto::clear_end() {
  end_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PageRangeProto::end() const {
  // @@protoc_insertion_point(field_get:android.service.print.PageRangeProto.end)
  return end_;
}
inline void PageRangeProto::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  end_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PageRangeProto.end)
}

// -------------------------------------------------------------------

// PrintJobInfoProto

// optional string label = 1 [(.android.privacy) = {
inline bool PrintJobInfoProto::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintJobInfoProto::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrintJobInfoProto::label() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.label)
  return label_.GetNoArena();
}
inline void PrintJobInfoProto::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.label)
}
inline void PrintJobInfoProto::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrintJobInfoProto.label)
}
inline void PrintJobInfoProto::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrintJobInfoProto.label)
}
inline void PrintJobInfoProto::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrintJobInfoProto.label)
}
inline std::string* PrintJobInfoProto::mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrintJobInfoProto::release_label() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintJobInfoProto.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrintJobInfoProto::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintJobInfoProto.label)
}

// optional string print_job_id = 2 [(.android.privacy) = {
inline bool PrintJobInfoProto::has_print_job_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintJobInfoProto::clear_print_job_id() {
  print_job_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrintJobInfoProto::print_job_id() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.print_job_id)
  return print_job_id_.GetNoArena();
}
inline void PrintJobInfoProto::set_print_job_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  print_job_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.print_job_id)
}
inline void PrintJobInfoProto::set_print_job_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  print_job_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrintJobInfoProto.print_job_id)
}
inline void PrintJobInfoProto::set_print_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  print_job_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrintJobInfoProto.print_job_id)
}
inline void PrintJobInfoProto::set_print_job_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  print_job_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrintJobInfoProto.print_job_id)
}
inline std::string* PrintJobInfoProto::mutable_print_job_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.print_job_id)
  return print_job_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrintJobInfoProto::release_print_job_id() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintJobInfoProto.print_job_id)
  if (!has_print_job_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return print_job_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrintJobInfoProto::set_allocated_print_job_id(std::string* print_job_id) {
  if (print_job_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  print_job_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), print_job_id);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintJobInfoProto.print_job_id)
}

// optional .android.service.print.PrintJobInfoProto.State state = 3;
inline bool PrintJobInfoProto::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrintJobInfoProto::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::service::print::PrintJobInfoProto_State PrintJobInfoProto::state() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.state)
  return static_cast< ::android::service::print::PrintJobInfoProto_State >(state_);
}
inline void PrintJobInfoProto::set_state(::android::service::print::PrintJobInfoProto_State value) {
  assert(::android::service::print::PrintJobInfoProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  state_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.state)
}

// optional .android.service.print.PrinterIdProto printer = 4;
inline bool PrintJobInfoProto::has_printer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintJobInfoProto::clear_printer() {
  if (printer_ != nullptr) printer_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::service::print::PrinterIdProto& PrintJobInfoProto::printer() const {
  const ::android::service::print::PrinterIdProto* p = printer_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.printer)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrinterIdProto*>(
      &::android::service::print::_PrinterIdProto_default_instance_);
}
inline ::android::service::print::PrinterIdProto* PrintJobInfoProto::release_printer() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintJobInfoProto.printer)
  _has_bits_[0] &= ~0x00000010u;
  ::android::service::print::PrinterIdProto* temp = printer_;
  printer_ = nullptr;
  return temp;
}
inline ::android::service::print::PrinterIdProto* PrintJobInfoProto::mutable_printer() {
  _has_bits_[0] |= 0x00000010u;
  if (printer_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrinterIdProto>(GetArenaNoVirtual());
    printer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.printer)
  return printer_;
}
inline void PrintJobInfoProto::set_allocated_printer(::android::service::print::PrinterIdProto* printer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete printer_;
  }
  if (printer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      printer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, printer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  printer_ = printer;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintJobInfoProto.printer)
}

// optional string tag = 5 [(.android.privacy) = {
inline bool PrintJobInfoProto::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintJobInfoProto::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrintJobInfoProto::tag() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.tag)
  return tag_.GetNoArena();
}
inline void PrintJobInfoProto::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.tag)
}
inline void PrintJobInfoProto::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrintJobInfoProto.tag)
}
inline void PrintJobInfoProto::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrintJobInfoProto.tag)
}
inline void PrintJobInfoProto::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrintJobInfoProto.tag)
}
inline std::string* PrintJobInfoProto::mutable_tag() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrintJobInfoProto::release_tag() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintJobInfoProto.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrintJobInfoProto::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintJobInfoProto.tag)
}

// optional int64 creation_time = 6;
inline bool PrintJobInfoProto::has_creation_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrintJobInfoProto::clear_creation_time() {
  creation_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrintJobInfoProto::creation_time() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.creation_time)
  return creation_time_;
}
inline void PrintJobInfoProto::set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.creation_time)
}

// optional .android.service.print.PrintAttributesProto attributes = 7;
inline bool PrintJobInfoProto::has_attributes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintJobInfoProto::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::android::service::print::PrintAttributesProto& PrintJobInfoProto::attributes() const {
  const ::android::service::print::PrintAttributesProto* p = attributes_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrintAttributesProto*>(
      &::android::service::print::_PrintAttributesProto_default_instance_);
}
inline ::android::service::print::PrintAttributesProto* PrintJobInfoProto::release_attributes() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintJobInfoProto.attributes)
  _has_bits_[0] &= ~0x00000020u;
  ::android::service::print::PrintAttributesProto* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::android::service::print::PrintAttributesProto* PrintJobInfoProto::mutable_attributes() {
  _has_bits_[0] |= 0x00000020u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrintAttributesProto>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.attributes)
  return attributes_;
}
inline void PrintJobInfoProto::set_allocated_attributes(::android::service::print::PrintAttributesProto* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintJobInfoProto.attributes)
}

// optional .android.service.print.PrintDocumentInfoProto document_info = 8;
inline bool PrintJobInfoProto::has_document_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrintJobInfoProto::clear_document_info() {
  if (document_info_ != nullptr) document_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::android::service::print::PrintDocumentInfoProto& PrintJobInfoProto::document_info() const {
  const ::android::service::print::PrintDocumentInfoProto* p = document_info_;
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.document_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrintDocumentInfoProto*>(
      &::android::service::print::_PrintDocumentInfoProto_default_instance_);
}
inline ::android::service::print::PrintDocumentInfoProto* PrintJobInfoProto::release_document_info() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintJobInfoProto.document_info)
  _has_bits_[0] &= ~0x00000040u;
  ::android::service::print::PrintDocumentInfoProto* temp = document_info_;
  document_info_ = nullptr;
  return temp;
}
inline ::android::service::print::PrintDocumentInfoProto* PrintJobInfoProto::mutable_document_info() {
  _has_bits_[0] |= 0x00000040u;
  if (document_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrintDocumentInfoProto>(GetArenaNoVirtual());
    document_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.document_info)
  return document_info_;
}
inline void PrintJobInfoProto::set_allocated_document_info(::android::service::print::PrintDocumentInfoProto* document_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete document_info_;
  }
  if (document_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  document_info_ = document_info;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintJobInfoProto.document_info)
}

// optional bool is_canceling = 9;
inline bool PrintJobInfoProto::has_is_canceling() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrintJobInfoProto::clear_is_canceling() {
  is_canceling_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool PrintJobInfoProto::is_canceling() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.is_canceling)
  return is_canceling_;
}
inline void PrintJobInfoProto::set_is_canceling(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_canceling_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.is_canceling)
}

// repeated .android.service.print.PageRangeProto pages = 10;
inline int PrintJobInfoProto::pages_size() const {
  return pages_.size();
}
inline void PrintJobInfoProto::clear_pages() {
  pages_.Clear();
}
inline ::android::service::print::PageRangeProto* PrintJobInfoProto::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.pages)
  return pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PageRangeProto >*
PrintJobInfoProto::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:android.service.print.PrintJobInfoProto.pages)
  return &pages_;
}
inline const ::android::service::print::PageRangeProto& PrintJobInfoProto::pages(int index) const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.pages)
  return pages_.Get(index);
}
inline ::android::service::print::PageRangeProto* PrintJobInfoProto::add_pages() {
  // @@protoc_insertion_point(field_add:android.service.print.PrintJobInfoProto.pages)
  return pages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::print::PageRangeProto >&
PrintJobInfoProto::pages() const {
  // @@protoc_insertion_point(field_list:android.service.print.PrintJobInfoProto.pages)
  return pages_;
}

// optional bool has_advanced_options = 11;
inline bool PrintJobInfoProto::has_has_advanced_options() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrintJobInfoProto::clear_has_advanced_options() {
  has_advanced_options_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PrintJobInfoProto::has_advanced_options() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.has_advanced_options)
  return has_advanced_options_;
}
inline void PrintJobInfoProto::set_has_advanced_options(bool value) {
  _has_bits_[0] |= 0x00000400u;
  has_advanced_options_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.has_advanced_options)
}

// optional float progress = 12;
inline bool PrintJobInfoProto::has_progress() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrintJobInfoProto::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float PrintJobInfoProto::progress() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.progress)
  return progress_;
}
inline void PrintJobInfoProto::set_progress(float value) {
  _has_bits_[0] |= 0x00000800u;
  progress_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.progress)
}

// optional string status = 13;
inline bool PrintJobInfoProto::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintJobInfoProto::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrintJobInfoProto::status() const {
  // @@protoc_insertion_point(field_get:android.service.print.PrintJobInfoProto.status)
  return status_.GetNoArena();
}
inline void PrintJobInfoProto::set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.print.PrintJobInfoProto.status)
}
inline void PrintJobInfoProto::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.print.PrintJobInfoProto.status)
}
inline void PrintJobInfoProto::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.print.PrintJobInfoProto.status)
}
inline void PrintJobInfoProto::set_status(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.print.PrintJobInfoProto.status)
}
inline std::string* PrintJobInfoProto::mutable_status() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.service.print.PrintJobInfoProto.status)
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrintJobInfoProto::release_status() {
  // @@protoc_insertion_point(field_release:android.service.print.PrintJobInfoProto.status)
  if (!has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return status_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrintJobInfoProto::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:android.service.print.PrintJobInfoProto.status)
}

// -------------------------------------------------------------------

// CachedPrintJobProto

// optional int32 app_id = 1;
inline bool CachedPrintJobProto::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CachedPrintJobProto::clear_app_id() {
  app_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedPrintJobProto::app_id() const {
  // @@protoc_insertion_point(field_get:android.service.print.CachedPrintJobProto.app_id)
  return app_id_;
}
inline void CachedPrintJobProto::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
  // @@protoc_insertion_point(field_set:android.service.print.CachedPrintJobProto.app_id)
}

// optional .android.service.print.PrintJobInfoProto print_job = 2;
inline bool CachedPrintJobProto::has_print_job() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CachedPrintJobProto::clear_print_job() {
  if (print_job_ != nullptr) print_job_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::print::PrintJobInfoProto& CachedPrintJobProto::print_job() const {
  const ::android::service::print::PrintJobInfoProto* p = print_job_;
  // @@protoc_insertion_point(field_get:android.service.print.CachedPrintJobProto.print_job)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::print::PrintJobInfoProto*>(
      &::android::service::print::_PrintJobInfoProto_default_instance_);
}
inline ::android::service::print::PrintJobInfoProto* CachedPrintJobProto::release_print_job() {
  // @@protoc_insertion_point(field_release:android.service.print.CachedPrintJobProto.print_job)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::print::PrintJobInfoProto* temp = print_job_;
  print_job_ = nullptr;
  return temp;
}
inline ::android::service::print::PrintJobInfoProto* CachedPrintJobProto::mutable_print_job() {
  _has_bits_[0] |= 0x00000001u;
  if (print_job_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::print::PrintJobInfoProto>(GetArenaNoVirtual());
    print_job_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.print.CachedPrintJobProto.print_job)
  return print_job_;
}
inline void CachedPrintJobProto::set_allocated_print_job(::android::service::print::PrintJobInfoProto* print_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete print_job_;
  }
  if (print_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      print_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_job, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  print_job_ = print_job;
  // @@protoc_insertion_point(field_set_allocated:android.service.print.CachedPrintJobProto.print_job)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace print
}  // namespace service
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::service::print::PrinterInfoProto_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::print::PrinterInfoProto_Status>() {
  return ::android::service::print::PrinterInfoProto_Status_descriptor();
}
template <> struct is_proto_enum< ::android::service::print::PrintAttributesProto_ColorMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::print::PrintAttributesProto_ColorMode>() {
  return ::android::service::print::PrintAttributesProto_ColorMode_descriptor();
}
template <> struct is_proto_enum< ::android::service::print::PrintAttributesProto_DuplexMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::print::PrintAttributesProto_DuplexMode>() {
  return ::android::service::print::PrintAttributesProto_DuplexMode_descriptor();
}
template <> struct is_proto_enum< ::android::service::print::PrintJobInfoProto_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::print::PrintJobInfoProto_State>() {
  return ::android::service::print::PrintJobInfoProto_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fprint_2eproto
