// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/backtrace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto;
namespace android {
namespace os {
class BackTraceProto;
class BackTraceProtoDefaultTypeInternal;
extern BackTraceProtoDefaultTypeInternal _BackTraceProto_default_instance_;
class BackTraceProto_Stack;
class BackTraceProto_StackDefaultTypeInternal;
extern BackTraceProto_StackDefaultTypeInternal _BackTraceProto_Stack_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::BackTraceProto* Arena::CreateMaybeMessage<::android::os::BackTraceProto>(Arena*);
template<> ::android::os::BackTraceProto_Stack* Arena::CreateMaybeMessage<::android::os::BackTraceProto_Stack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

// ===================================================================

class BackTraceProto_Stack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.BackTraceProto.Stack) */ {
 public:
  BackTraceProto_Stack();
  virtual ~BackTraceProto_Stack();

  BackTraceProto_Stack(const BackTraceProto_Stack& from);
  BackTraceProto_Stack(BackTraceProto_Stack&& from) noexcept
    : BackTraceProto_Stack() {
    *this = ::std::move(from);
  }

  inline BackTraceProto_Stack& operator=(const BackTraceProto_Stack& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackTraceProto_Stack& operator=(BackTraceProto_Stack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BackTraceProto_Stack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackTraceProto_Stack* internal_default_instance() {
    return reinterpret_cast<const BackTraceProto_Stack*>(
               &_BackTraceProto_Stack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BackTraceProto_Stack& a, BackTraceProto_Stack& b) {
    a.Swap(&b);
  }
  inline void Swap(BackTraceProto_Stack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackTraceProto_Stack* New() const final {
    return CreateMaybeMessage<BackTraceProto_Stack>(nullptr);
  }

  BackTraceProto_Stack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackTraceProto_Stack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BackTraceProto_Stack& from);
  void MergeFrom(const BackTraceProto_Stack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackTraceProto_Stack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.BackTraceProto.Stack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDumpFieldNumber = 2,
    kDumpDurationNsFieldNumber = 3,
    kPidFieldNumber = 1,
  };
  // optional string dump = 2;
  bool has_dump() const;
  void clear_dump();
  const std::string& dump() const;
  void set_dump(const std::string& value);
  void set_dump(std::string&& value);
  void set_dump(const char* value);
  void set_dump(const char* value, size_t size);
  std::string* mutable_dump();
  std::string* release_dump();
  void set_allocated_dump(std::string* dump);

  // optional int64 dump_duration_ns = 3;
  bool has_dump_duration_ns() const;
  void clear_dump_duration_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 dump_duration_ns() const;
  void set_dump_duration_ns(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.BackTraceProto.Stack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dump_;
  ::PROTOBUF_NAMESPACE_ID::int64 dump_duration_ns_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto;
};
// -------------------------------------------------------------------

class BackTraceProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.os.BackTraceProto) */ {
 public:
  BackTraceProto();
  virtual ~BackTraceProto();

  BackTraceProto(const BackTraceProto& from);
  BackTraceProto(BackTraceProto&& from) noexcept
    : BackTraceProto() {
    *this = ::std::move(from);
  }

  inline BackTraceProto& operator=(const BackTraceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackTraceProto& operator=(BackTraceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BackTraceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackTraceProto* internal_default_instance() {
    return reinterpret_cast<const BackTraceProto*>(
               &_BackTraceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BackTraceProto& a, BackTraceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BackTraceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackTraceProto* New() const final {
    return CreateMaybeMessage<BackTraceProto>(nullptr);
  }

  BackTraceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackTraceProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BackTraceProto& from);
  void MergeFrom(const BackTraceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackTraceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.BackTraceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BackTraceProto_Stack Stack;

  // accessors -------------------------------------------------------

  enum : int {
    kTracesFieldNumber = 1,
  };
  // repeated .android.os.BackTraceProto.Stack traces = 1;
  int traces_size() const;
  void clear_traces();
  ::android::os::BackTraceProto_Stack* mutable_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::BackTraceProto_Stack >*
      mutable_traces();
  const ::android::os::BackTraceProto_Stack& traces(int index) const;
  ::android::os::BackTraceProto_Stack* add_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::BackTraceProto_Stack >&
      traces() const;

  // @@protoc_insertion_point(class_scope:android.os.BackTraceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::BackTraceProto_Stack > traces_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BackTraceProto_Stack

// optional int32 pid = 1;
inline bool BackTraceProto_Stack::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackTraceProto_Stack::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackTraceProto_Stack::pid() const {
  // @@protoc_insertion_point(field_get:android.os.BackTraceProto.Stack.pid)
  return pid_;
}
inline void BackTraceProto_Stack::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:android.os.BackTraceProto.Stack.pid)
}

// optional string dump = 2;
inline bool BackTraceProto_Stack::has_dump() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackTraceProto_Stack::clear_dump() {
  dump_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackTraceProto_Stack::dump() const {
  // @@protoc_insertion_point(field_get:android.os.BackTraceProto.Stack.dump)
  return dump_.GetNoArena();
}
inline void BackTraceProto_Stack::set_dump(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dump_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.BackTraceProto.Stack.dump)
}
inline void BackTraceProto_Stack::set_dump(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dump_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.BackTraceProto.Stack.dump)
}
inline void BackTraceProto_Stack::set_dump(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dump_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.BackTraceProto.Stack.dump)
}
inline void BackTraceProto_Stack::set_dump(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dump_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.BackTraceProto.Stack.dump)
}
inline std::string* BackTraceProto_Stack::mutable_dump() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.BackTraceProto.Stack.dump)
  return dump_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackTraceProto_Stack::release_dump() {
  // @@protoc_insertion_point(field_release:android.os.BackTraceProto.Stack.dump)
  if (!has_dump()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dump_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackTraceProto_Stack::set_allocated_dump(std::string* dump) {
  if (dump != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dump_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dump);
  // @@protoc_insertion_point(field_set_allocated:android.os.BackTraceProto.Stack.dump)
}

// optional int64 dump_duration_ns = 3;
inline bool BackTraceProto_Stack::has_dump_duration_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackTraceProto_Stack::clear_dump_duration_ns() {
  dump_duration_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BackTraceProto_Stack::dump_duration_ns() const {
  // @@protoc_insertion_point(field_get:android.os.BackTraceProto.Stack.dump_duration_ns)
  return dump_duration_ns_;
}
inline void BackTraceProto_Stack::set_dump_duration_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  dump_duration_ns_ = value;
  // @@protoc_insertion_point(field_set:android.os.BackTraceProto.Stack.dump_duration_ns)
}

// -------------------------------------------------------------------

// BackTraceProto

// repeated .android.os.BackTraceProto.Stack traces = 1;
inline int BackTraceProto::traces_size() const {
  return traces_.size();
}
inline void BackTraceProto::clear_traces() {
  traces_.Clear();
}
inline ::android::os::BackTraceProto_Stack* BackTraceProto::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.BackTraceProto.traces)
  return traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::BackTraceProto_Stack >*
BackTraceProto::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:android.os.BackTraceProto.traces)
  return &traces_;
}
inline const ::android::os::BackTraceProto_Stack& BackTraceProto::traces(int index) const {
  // @@protoc_insertion_point(field_get:android.os.BackTraceProto.traces)
  return traces_.Get(index);
}
inline ::android::os::BackTraceProto_Stack* BackTraceProto::add_traces() {
  // @@protoc_insertion_point(field_add:android.os.BackTraceProto.traces)
  return traces_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::BackTraceProto_Stack >&
BackTraceProto::traces() const {
  // @@protoc_insertion_point(field_list:android.os.BackTraceProto.traces)
  return traces_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbacktrace_2eproto
