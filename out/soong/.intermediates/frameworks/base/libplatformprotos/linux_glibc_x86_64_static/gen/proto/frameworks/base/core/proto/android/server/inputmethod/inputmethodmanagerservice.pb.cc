// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/inputmethod/inputmethodmanagerservice.proto

#include "frameworks/base/core/proto/android/server/inputmethod/inputmethodmanagerservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finputmethod_2feditorinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EditorInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finputmethod_2feditorinfo_2eproto;
namespace android {
namespace server {
namespace inputmethod {
class InputMethodManagerServiceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputMethodManagerServiceProto> _instance;
} _InputMethodManagerServiceProto_default_instance_;
}  // namespace inputmethod
}  // namespace server
}  // namespace android
static void InitDefaultsscc_info_InputMethodManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::server::inputmethod::_InputMethodManagerServiceProto_default_instance_;
    new (ptr) ::android::server::inputmethod::InputMethodManagerServiceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::server::inputmethod::InputMethodManagerServiceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputMethodManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InputMethodManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto}, {
      &scc_info_EditorInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finputmethod_2feditorinfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_method_id_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_seq_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_client_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_focused_window_name_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, last_ime_target_window_name_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_focused_window_soft_input_mode_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_attribute_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_id_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, show_requested_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, show_explicitly_requested_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, show_forced_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, input_shown_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, in_fullscreen_mode_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_token_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, cur_token_display_id_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, system_ready_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, last_switch_user_id_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, have_connection_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, bound_to_method_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, is_interactive_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, back_disposition_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, ime_window_visibility_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, show_ime_with_hard_keyboard_),
  PROTOBUF_FIELD_OFFSET(::android::server::inputmethod::InputMethodManagerServiceProto, accessibility_requesting_no_soft_keyboard_),
  0,
  8,
  1,
  2,
  3,
  4,
  7,
  5,
  9,
  10,
  11,
  12,
  14,
  6,
  13,
  15,
  18,
  16,
  17,
  21,
  19,
  20,
  22,
  23,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(::android::server::inputmethod::InputMethodManagerServiceProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::server::inputmethod::_InputMethodManagerServiceProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nUframeworks/base/core/proto/android/ser"
  "ver/inputmethod/inputmethodmanagerservic"
  "e.proto\022\032android.server.inputmethod\032Dfra"
  "meworks/base/core/proto/android/view/inp"
  "utmethod/editorinfo.proto\"\340\005\n\036InputMetho"
  "dManagerServiceProto\022\025\n\rcur_method_id\030\001 "
  "\001(\t\022\017\n\007cur_seq\030\002 \001(\005\022\022\n\ncur_client\030\003 \001(\t"
  "\022\037\n\027cur_focused_window_name\030\004 \001(\t\022#\n\033las"
  "t_ime_target_window_name\030\005 \001(\t\022*\n\"cur_fo"
  "cused_window_soft_input_mode\030\006 \001(\t\022@\n\rcu"
  "r_attribute\030\007 \001(\0132).android.view.inputme"
  "thod.EditorInfoProto\022\016\n\006cur_id\030\010 \001(\t\022\026\n\016"
  "show_requested\030\t \001(\010\022!\n\031show_explicitly_"
  "requested\030\n \001(\010\022\023\n\013show_forced\030\013 \001(\010\022\023\n\013"
  "input_shown\030\014 \001(\010\022\032\n\022in_fullscreen_mode\030"
  "\r \001(\010\022\021\n\tcur_token\030\016 \001(\t\022\034\n\024cur_token_di"
  "splay_id\030\017 \001(\005\022\024\n\014system_ready\030\020 \001(\010\022\033\n\023"
  "last_switch_user_id\030\021 \001(\005\022\027\n\017have_connec"
  "tion\030\022 \001(\010\022\027\n\017bound_to_method\030\023 \001(\010\022\026\n\016i"
  "s_interactive\030\024 \001(\010\022\030\n\020back_disposition\030"
  "\025 \001(\005\022\035\n\025ime_window_visibility\030\026 \001(\005\022#\n\033"
  "show_ime_with_hard_keyboard\030\027 \001(\010\0221\n)acc"
  "essibility_requesting_no_soft_keyboard\030\030"
  " \001(\010B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_deps[1] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finputmethod_2feditorinfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_sccs[1] = {
  &scc_info_InputMethodManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto, "frameworks/base/core/proto/android/server/inputmethod/inputmethodmanagerservice.proto", 928,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto, 1, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto), true);
namespace android {
namespace server {
namespace inputmethod {

// ===================================================================

void InputMethodManagerServiceProto::InitAsDefaultInstance() {
  ::android::server::inputmethod::_InputMethodManagerServiceProto_default_instance_._instance.get_mutable()->cur_attribute_ = const_cast< ::android::view::inputmethod::EditorInfoProto*>(
      ::android::view::inputmethod::EditorInfoProto::internal_default_instance());
}
class InputMethodManagerServiceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMethodManagerServiceProto>()._has_bits_);
  static void set_has_cur_method_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cur_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cur_client(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cur_focused_window_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_ime_target_window_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cur_focused_window_soft_input_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::view::inputmethod::EditorInfoProto& cur_attribute(const InputMethodManagerServiceProto* msg);
  static void set_has_cur_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cur_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_show_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_show_explicitly_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_show_forced(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_input_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_in_fullscreen_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cur_token(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cur_token_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_system_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_last_switch_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_have_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bound_to_method(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_interactive(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_back_disposition(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ime_window_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_show_ime_with_hard_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_accessibility_requesting_no_soft_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::android::view::inputmethod::EditorInfoProto&
InputMethodManagerServiceProto::_Internal::cur_attribute(const InputMethodManagerServiceProto* msg) {
  return *msg->cur_attribute_;
}
void InputMethodManagerServiceProto::clear_cur_attribute() {
  if (cur_attribute_ != nullptr) cur_attribute_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
InputMethodManagerServiceProto::InputMethodManagerServiceProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.server.inputmethod.InputMethodManagerServiceProto)
}
InputMethodManagerServiceProto::InputMethodManagerServiceProto(const InputMethodManagerServiceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_method_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cur_method_id()) {
    cur_method_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_method_id_);
  }
  cur_client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cur_client()) {
    cur_client_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_client_);
  }
  cur_focused_window_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cur_focused_window_name()) {
    cur_focused_window_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_focused_window_name_);
  }
  last_ime_target_window_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_ime_target_window_name()) {
    last_ime_target_window_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_ime_target_window_name_);
  }
  cur_focused_window_soft_input_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cur_focused_window_soft_input_mode()) {
    cur_focused_window_soft_input_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_focused_window_soft_input_mode_);
  }
  cur_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cur_id()) {
    cur_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_id_);
  }
  cur_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cur_token()) {
    cur_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_token_);
  }
  if (from.has_cur_attribute()) {
    cur_attribute_ = new ::android::view::inputmethod::EditorInfoProto(*from.cur_attribute_);
  } else {
    cur_attribute_ = nullptr;
  }
  ::memcpy(&cur_seq_, &from.cur_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&accessibility_requesting_no_soft_keyboard_) -
    reinterpret_cast<char*>(&cur_seq_)) + sizeof(accessibility_requesting_no_soft_keyboard_));
  // @@protoc_insertion_point(copy_constructor:android.server.inputmethod.InputMethodManagerServiceProto)
}

void InputMethodManagerServiceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputMethodManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto.base);
  cur_method_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_focused_window_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_ime_target_window_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_focused_window_soft_input_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cur_attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accessibility_requesting_no_soft_keyboard_) -
      reinterpret_cast<char*>(&cur_attribute_)) + sizeof(accessibility_requesting_no_soft_keyboard_));
}

InputMethodManagerServiceProto::~InputMethodManagerServiceProto() {
  // @@protoc_insertion_point(destructor:android.server.inputmethod.InputMethodManagerServiceProto)
  SharedDtor();
}

void InputMethodManagerServiceProto::SharedDtor() {
  cur_method_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_client_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_focused_window_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_ime_target_window_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_focused_window_soft_input_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cur_attribute_;
}

void InputMethodManagerServiceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputMethodManagerServiceProto& InputMethodManagerServiceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputMethodManagerServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void InputMethodManagerServiceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.server.inputmethod.InputMethodManagerServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cur_method_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cur_client_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      cur_focused_window_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      last_ime_target_window_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      cur_focused_window_soft_input_mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      cur_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      cur_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cur_attribute_ != nullptr);
      cur_attribute_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cur_seq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&system_ready_) -
        reinterpret_cast<char*>(&cur_seq_)) + sizeof(system_ready_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&have_connection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accessibility_requesting_no_soft_keyboard_) -
        reinterpret_cast<char*>(&have_connection_)) + sizeof(accessibility_requesting_no_soft_keyboard_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputMethodManagerServiceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string cur_method_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cur_method_id(), ptr, ctx, "android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cur_seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cur_seq(&has_bits);
          cur_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cur_client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cur_client(), ptr, ctx, "android.server.inputmethod.InputMethodManagerServiceProto.cur_client");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cur_focused_window_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cur_focused_window_name(), ptr, ctx, "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_ime_target_window_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_last_ime_target_window_name(), ptr, ctx, "android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cur_focused_window_soft_input_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cur_focused_window_soft_input_mode(), ptr, ctx, "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.view.inputmethod.EditorInfoProto cur_attribute = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_cur_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cur_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cur_id(), ptr, ctx, "android.server.inputmethod.InputMethodManagerServiceProto.cur_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_requested = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_show_requested(&has_bits);
          show_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_explicitly_requested = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_show_explicitly_requested(&has_bits);
          show_explicitly_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_forced = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_show_forced(&has_bits);
          show_forced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_shown = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_input_shown(&has_bits);
          input_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_fullscreen_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_in_fullscreen_mode(&has_bits);
          in_fullscreen_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cur_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cur_token(), ptr, ctx, "android.server.inputmethod.InputMethodManagerServiceProto.cur_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cur_token_display_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_cur_token_display_id(&has_bits);
          cur_token_display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool system_ready = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_system_ready(&has_bits);
          system_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_switch_user_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_last_switch_user_id(&has_bits);
          last_switch_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool have_connection = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_have_connection(&has_bits);
          have_connection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bound_to_method = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_bound_to_method(&has_bits);
          bound_to_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_interactive = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_is_interactive(&has_bits);
          is_interactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 back_disposition = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_back_disposition(&has_bits);
          back_disposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ime_window_visibility = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_ime_window_visibility(&has_bits);
          ime_window_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_ime_with_hard_keyboard = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_show_ime_with_hard_keyboard(&has_bits);
          show_ime_with_hard_keyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool accessibility_requesting_no_soft_keyboard = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_accessibility_requesting_no_soft_keyboard(&has_bits);
          accessibility_requesting_no_soft_keyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputMethodManagerServiceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.server.inputmethod.InputMethodManagerServiceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cur_method_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_method_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur_method_id().data(), static_cast<int>(this->cur_method_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_seq = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cur_seq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cur_client = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_client()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur_client().data(), static_cast<int>(this->cur_client().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.server.inputmethod.InputMethodManagerServiceProto.cur_client");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cur_focused_window_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_focused_window_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur_focused_window_name().data(), static_cast<int>(this->cur_focused_window_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_ime_target_window_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_ime_target_window_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_ime_target_window_name().data(), static_cast<int>(this->last_ime_target_window_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cur_focused_window_soft_input_mode = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_focused_window_soft_input_mode()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur_focused_window_soft_input_mode().data(), static_cast<int>(this->cur_focused_window_soft_input_mode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.view.inputmethod.EditorInfoProto cur_attribute = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cur_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cur_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur_id().data(), static_cast<int>(this->cur_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.server.inputmethod.InputMethodManagerServiceProto.cur_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_requested = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_show_requested(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_explicitly_requested = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_show_explicitly_requested(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_explicitly_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_forced = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_show_forced(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_forced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool input_shown = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_input_shown(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &input_shown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_fullscreen_mode = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_in_fullscreen_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_fullscreen_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cur_token = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_token()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur_token().data(), static_cast<int>(this->cur_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.server.inputmethod.InputMethodManagerServiceProto.cur_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_token_display_id = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_cur_token_display_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_token_display_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool system_ready = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_system_ready(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_switch_user_id = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_last_switch_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_switch_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool have_connection = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_have_connection(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_connection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bound_to_method = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_bound_to_method(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bound_to_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_interactive = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_is_interactive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_interactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 back_disposition = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_back_disposition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_disposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ime_window_visibility = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_ime_window_visibility(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ime_window_visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_ime_with_hard_keyboard = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_show_ime_with_hard_keyboard(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_ime_with_hard_keyboard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accessibility_requesting_no_soft_keyboard = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_accessibility_requesting_no_soft_keyboard(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accessibility_requesting_no_soft_keyboard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.server.inputmethod.InputMethodManagerServiceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.server.inputmethod.InputMethodManagerServiceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputMethodManagerServiceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.server.inputmethod.InputMethodManagerServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cur_method_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_method_id().data(), static_cast<int>(this->cur_method_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cur_method_id(), output);
  }

  // optional int32 cur_seq = 2;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cur_seq(), output);
  }

  // optional string cur_client = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_client().data(), static_cast<int>(this->cur_client().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_client");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cur_client(), output);
  }

  // optional string cur_focused_window_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_focused_window_name().data(), static_cast<int>(this->cur_focused_window_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cur_focused_window_name(), output);
  }

  // optional string last_ime_target_window_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_ime_target_window_name().data(), static_cast<int>(this->last_ime_target_window_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->last_ime_target_window_name(), output);
  }

  // optional string cur_focused_window_soft_input_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_focused_window_soft_input_mode().data(), static_cast<int>(this->cur_focused_window_soft_input_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cur_focused_window_soft_input_mode(), output);
  }

  // optional .android.view.inputmethod.EditorInfoProto cur_attribute = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::cur_attribute(this), output);
  }

  // optional string cur_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_id().data(), static_cast<int>(this->cur_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cur_id(), output);
  }

  // optional bool show_requested = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->show_requested(), output);
  }

  // optional bool show_explicitly_requested = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->show_explicitly_requested(), output);
  }

  // optional bool show_forced = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->show_forced(), output);
  }

  // optional bool input_shown = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->input_shown(), output);
  }

  // optional bool in_fullscreen_mode = 13;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->in_fullscreen_mode(), output);
  }

  // optional string cur_token = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_token().data(), static_cast<int>(this->cur_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->cur_token(), output);
  }

  // optional int32 cur_token_display_id = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->cur_token_display_id(), output);
  }

  // optional bool system_ready = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->system_ready(), output);
  }

  // optional int32 last_switch_user_id = 17;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->last_switch_user_id(), output);
  }

  // optional bool have_connection = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->have_connection(), output);
  }

  // optional bool bound_to_method = 19;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->bound_to_method(), output);
  }

  // optional bool is_interactive = 20;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->is_interactive(), output);
  }

  // optional int32 back_disposition = 21;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->back_disposition(), output);
  }

  // optional int32 ime_window_visibility = 22;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->ime_window_visibility(), output);
  }

  // optional bool show_ime_with_hard_keyboard = 23;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->show_ime_with_hard_keyboard(), output);
  }

  // optional bool accessibility_requesting_no_soft_keyboard = 24;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->accessibility_requesting_no_soft_keyboard(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.server.inputmethod.InputMethodManagerServiceProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* InputMethodManagerServiceProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.server.inputmethod.InputMethodManagerServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cur_method_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_method_id().data(), static_cast<int>(this->cur_method_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cur_method_id(), target);
  }

  // optional int32 cur_seq = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_seq(), target);
  }

  // optional string cur_client = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_client().data(), static_cast<int>(this->cur_client().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_client");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->cur_client(), target);
  }

  // optional string cur_focused_window_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_focused_window_name().data(), static_cast<int>(this->cur_focused_window_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->cur_focused_window_name(), target);
  }

  // optional string last_ime_target_window_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_ime_target_window_name().data(), static_cast<int>(this->last_ime_target_window_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->last_ime_target_window_name(), target);
  }

  // optional string cur_focused_window_soft_input_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_focused_window_soft_input_mode().data(), static_cast<int>(this->cur_focused_window_soft_input_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->cur_focused_window_soft_input_mode(), target);
  }

  // optional .android.view.inputmethod.EditorInfoProto cur_attribute = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::cur_attribute(this), target);
  }

  // optional string cur_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_id().data(), static_cast<int>(this->cur_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->cur_id(), target);
  }

  // optional bool show_requested = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->show_requested(), target);
  }

  // optional bool show_explicitly_requested = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->show_explicitly_requested(), target);
  }

  // optional bool show_forced = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->show_forced(), target);
  }

  // optional bool input_shown = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->input_shown(), target);
  }

  // optional bool in_fullscreen_mode = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->in_fullscreen_mode(), target);
  }

  // optional string cur_token = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_token().data(), static_cast<int>(this->cur_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.server.inputmethod.InputMethodManagerServiceProto.cur_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->cur_token(), target);
  }

  // optional int32 cur_token_display_id = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->cur_token_display_id(), target);
  }

  // optional bool system_ready = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->system_ready(), target);
  }

  // optional int32 last_switch_user_id = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->last_switch_user_id(), target);
  }

  // optional bool have_connection = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->have_connection(), target);
  }

  // optional bool bound_to_method = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->bound_to_method(), target);
  }

  // optional bool is_interactive = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->is_interactive(), target);
  }

  // optional int32 back_disposition = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->back_disposition(), target);
  }

  // optional int32 ime_window_visibility = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->ime_window_visibility(), target);
  }

  // optional bool show_ime_with_hard_keyboard = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->show_ime_with_hard_keyboard(), target);
  }

  // optional bool accessibility_requesting_no_soft_keyboard = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->accessibility_requesting_no_soft_keyboard(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.server.inputmethod.InputMethodManagerServiceProto)
  return target;
}

size_t InputMethodManagerServiceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.server.inputmethod.InputMethodManagerServiceProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cur_method_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cur_method_id());
    }

    // optional string cur_client = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cur_client());
    }

    // optional string cur_focused_window_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cur_focused_window_name());
    }

    // optional string last_ime_target_window_name = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_ime_target_window_name());
    }

    // optional string cur_focused_window_soft_input_mode = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cur_focused_window_soft_input_mode());
    }

    // optional string cur_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cur_id());
    }

    // optional string cur_token = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cur_token());
    }

    // optional .android.view.inputmethod.EditorInfoProto cur_attribute = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cur_attribute_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 cur_seq = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cur_seq());
    }

    // optional bool show_requested = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool show_explicitly_requested = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool show_forced = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool input_shown = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 cur_token_display_id = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cur_token_display_id());
    }

    // optional bool in_fullscreen_mode = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool system_ready = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool have_connection = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool bound_to_method = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 last_switch_user_id = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_switch_user_id());
    }

    // optional int32 back_disposition = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->back_disposition());
    }

    // optional int32 ime_window_visibility = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ime_window_visibility());
    }

    // optional bool is_interactive = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool show_ime_with_hard_keyboard = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool accessibility_requesting_no_soft_keyboard = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputMethodManagerServiceProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.server.inputmethod.InputMethodManagerServiceProto)
  GOOGLE_DCHECK_NE(&from, this);
  const InputMethodManagerServiceProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputMethodManagerServiceProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.server.inputmethod.InputMethodManagerServiceProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.server.inputmethod.InputMethodManagerServiceProto)
    MergeFrom(*source);
  }
}

void InputMethodManagerServiceProto::MergeFrom(const InputMethodManagerServiceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.server.inputmethod.InputMethodManagerServiceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cur_method_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_method_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cur_client_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_client_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      cur_focused_window_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_focused_window_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      last_ime_target_window_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_ime_target_window_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      cur_focused_window_soft_input_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_focused_window_soft_input_mode_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      cur_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      cur_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cur_token_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_cur_attribute()->::android::view::inputmethod::EditorInfoProto::MergeFrom(from.cur_attribute());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cur_seq_ = from.cur_seq_;
    }
    if (cached_has_bits & 0x00000200u) {
      show_requested_ = from.show_requested_;
    }
    if (cached_has_bits & 0x00000400u) {
      show_explicitly_requested_ = from.show_explicitly_requested_;
    }
    if (cached_has_bits & 0x00000800u) {
      show_forced_ = from.show_forced_;
    }
    if (cached_has_bits & 0x00001000u) {
      input_shown_ = from.input_shown_;
    }
    if (cached_has_bits & 0x00002000u) {
      cur_token_display_id_ = from.cur_token_display_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      in_fullscreen_mode_ = from.in_fullscreen_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      system_ready_ = from.system_ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      have_connection_ = from.have_connection_;
    }
    if (cached_has_bits & 0x00020000u) {
      bound_to_method_ = from.bound_to_method_;
    }
    if (cached_has_bits & 0x00040000u) {
      last_switch_user_id_ = from.last_switch_user_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      back_disposition_ = from.back_disposition_;
    }
    if (cached_has_bits & 0x00100000u) {
      ime_window_visibility_ = from.ime_window_visibility_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_interactive_ = from.is_interactive_;
    }
    if (cached_has_bits & 0x00400000u) {
      show_ime_with_hard_keyboard_ = from.show_ime_with_hard_keyboard_;
    }
    if (cached_has_bits & 0x00800000u) {
      accessibility_requesting_no_soft_keyboard_ = from.accessibility_requesting_no_soft_keyboard_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputMethodManagerServiceProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.server.inputmethod.InputMethodManagerServiceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputMethodManagerServiceProto::CopyFrom(const InputMethodManagerServiceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.server.inputmethod.InputMethodManagerServiceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMethodManagerServiceProto::IsInitialized() const {
  return true;
}

void InputMethodManagerServiceProto::InternalSwap(InputMethodManagerServiceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cur_method_id_.Swap(&other->cur_method_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cur_client_.Swap(&other->cur_client_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cur_focused_window_name_.Swap(&other->cur_focused_window_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_ime_target_window_name_.Swap(&other->last_ime_target_window_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cur_focused_window_soft_input_mode_.Swap(&other->cur_focused_window_soft_input_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cur_id_.Swap(&other->cur_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cur_token_.Swap(&other->cur_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cur_attribute_, other->cur_attribute_);
  swap(cur_seq_, other->cur_seq_);
  swap(show_requested_, other->show_requested_);
  swap(show_explicitly_requested_, other->show_explicitly_requested_);
  swap(show_forced_, other->show_forced_);
  swap(input_shown_, other->input_shown_);
  swap(cur_token_display_id_, other->cur_token_display_id_);
  swap(in_fullscreen_mode_, other->in_fullscreen_mode_);
  swap(system_ready_, other->system_ready_);
  swap(have_connection_, other->have_connection_);
  swap(bound_to_method_, other->bound_to_method_);
  swap(last_switch_user_id_, other->last_switch_user_id_);
  swap(back_disposition_, other->back_disposition_);
  swap(ime_window_visibility_, other->ime_window_visibility_);
  swap(is_interactive_, other->is_interactive_);
  swap(show_ime_with_hard_keyboard_, other->show_ime_with_hard_keyboard_);
  swap(accessibility_requesting_no_soft_keyboard_, other->accessibility_requesting_no_soft_keyboard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputMethodManagerServiceProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace inputmethod
}  // namespace server
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::server::inputmethod::InputMethodManagerServiceProto* Arena::CreateMaybeMessage< ::android::server::inputmethod::InputMethodManagerServiceProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::server::inputmethod::InputMethodManagerServiceProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
