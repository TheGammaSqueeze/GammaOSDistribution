// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/alarm/alarmmanagerservice.proto

#include "frameworks/base/core/proto/android/server/alarm/alarmmanagerservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingIntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2flocallog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2flocallog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmClockMetadataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace alarm {
class AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch> _instance;
} _AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_default_instance_;
class AlarmManagerServiceDumpProto_TopAlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmManagerServiceDumpProto_TopAlarm> _instance;
} _AlarmManagerServiceDumpProto_TopAlarm_default_instance_;
class AlarmManagerServiceDumpProto_AlarmStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmManagerServiceDumpProto_AlarmStat> _instance;
} _AlarmManagerServiceDumpProto_AlarmStat_default_instance_;
class AlarmManagerServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmManagerServiceDumpProto> _instance;
} _AlarmManagerServiceDumpProto_default_instance_;
class AlarmClockMetadataProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmClockMetadataProto> _instance;
} _AlarmClockMetadataProto_default_instance_;
class AlarmProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmProto> _instance;
} _AlarmProto_default_instance_;
class BatchProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchProto> _instance;
} _BatchProto_default_instance_;
class BroadcastStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastStatsProto> _instance;
} _BroadcastStatsProto_default_instance_;
class ConstantsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantsProto> _instance;
} _ConstantsProto_default_instance_;
class FilterStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterStatsProto> _instance;
} _FilterStatsProto_default_instance_;
class IdleDispatchEntryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IdleDispatchEntryProto> _instance;
} _IdleDispatchEntryProto_default_instance_;
class InFlightProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InFlightProto> _instance;
} _InFlightProto_default_instance_;
class WakeupEventProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WakeupEventProto> _instance;
} _WakeupEventProto_default_instance_;
}  // namespace alarm
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_AlarmClockMetadataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_AlarmClockMetadataProto_default_instance_;
    new (ptr) ::com::android::server::alarm::AlarmClockMetadataProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::AlarmClockMetadataProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmClockMetadataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlarmClockMetadataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_AlarmManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_AlarmManagerServiceDumpProto_default_instance_;
    new (ptr) ::com::android::server::alarm::AlarmManagerServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::AlarmManagerServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_AlarmManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsscc_info_AlarmManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {
      &scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base,
      &scc_info_AlarmClockMetadataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_LocalLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2flocallog_2eproto.base,
      &scc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_AlarmManagerServiceDumpProto_AlarmStat_default_instance_;
    new (ptr) ::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {
      &scc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_default_instance_;
    new (ptr) ::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_AlarmManagerServiceDumpProto_TopAlarm_default_instance_;
    new (ptr) ::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {
      &scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_AlarmProto_default_instance_;
    new (ptr) ::com::android::server::alarm::AlarmProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::AlarmProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {
      &scc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto.base,
      &scc_info_PendingIntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto.base,}};

static void InitDefaultsscc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_BatchProto_default_instance_;
    new (ptr) ::com::android::server::alarm::BatchProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::BatchProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {
      &scc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_BroadcastStatsProto_default_instance_;
    new (ptr) ::com::android::server::alarm::BroadcastStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::BroadcastStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_ConstantsProto_default_instance_;
    new (ptr) ::com::android::server::alarm::ConstantsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::ConstantsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_FilterStatsProto_default_instance_;
    new (ptr) ::com::android::server::alarm::FilterStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::FilterStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_IdleDispatchEntryProto_default_instance_;
    new (ptr) ::com::android::server::alarm::IdleDispatchEntryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::IdleDispatchEntryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_InFlightProto_default_instance_;
    new (ptr) ::com::android::server::alarm::InFlightProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::InFlightProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {
      &scc_info_PendingIntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto.base,
      &scc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
      &scc_info_WorkSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto.base,}};

static void InitDefaultsscc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::alarm::_WakeupEventProto_default_instance_;
    new (ptr) ::com::android::server::alarm::WakeupEventProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::alarm::WakeupEventProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch, time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch, next_allowed_ms_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm, package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm, filter_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat, broadcast_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat, filters_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, current_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, elapsed_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, last_time_change_clock_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, last_time_change_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, settings_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, app_state_tracker_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, is_interactive_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_since_non_interactive_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, max_wakeup_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_since_last_dispatch_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_until_next_non_wakeup_delivery_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_until_next_non_wakeup_alarm_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_until_next_wakeup_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_since_last_wakeup_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_since_last_wakeup_set_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, time_change_event_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, device_idle_user_exempt_app_ids_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, next_alarm_clock_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, pending_alarm_batches_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, pending_user_blocked_background_alarms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, pending_idle_until_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, pending_while_idle_alarms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, next_wake_from_idle_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, past_due_non_wakeup_alarms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, delayed_alarm_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, total_delay_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, max_delay_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, max_non_interactive_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, broadcast_ref_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, pending_intent_send_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, pending_intent_finish_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, listener_send_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, listener_finish_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, outstanding_deliveries_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, use_allow_while_idle_short_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, last_allow_while_idle_dispatch_times_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, recent_problems_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, top_alarms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, alarm_stats_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, allow_while_idle_dispatches_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, recent_wakeup_history_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmManagerServiceDumpProto, pending_alarms_),
  5,
  6,
  7,
  8,
  0,
  1,
  18,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  3,
  ~0u,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmClockMetadataProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmClockMetadataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmClockMetadataProto, user_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmClockMetadataProto, is_pending_send_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmClockMetadataProto, trigger_time_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, type_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, time_until_when_elapsed_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, window_length_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, repeat_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, alarm_clock_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, operation_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::AlarmProto, listener_),
  0,
  6,
  4,
  5,
  8,
  7,
  9,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BatchProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BatchProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BatchProto, start_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BatchProto, end_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BatchProto, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BatchProto, alarms_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, package_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, total_flight_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, wakeup_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, start_time_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::BroadcastStatsProto, nesting_),
  1,
  0,
  3,
  2,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, min_futurity_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, min_interval_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, listener_timeout_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, allow_while_idle_short_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, allow_while_idle_long_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, allow_while_idle_whitelist_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::ConstantsProto, max_interval_duration_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, last_flight_time_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, total_flight_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, wakeup_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, start_time_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::FilterStatsProto, nesting_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, pkg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, op_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, entry_creation_realtime_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::IdleDispatchEntryProto, arg_realtime_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, tag_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, when_elapsed_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, alarm_type_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, pending_intent_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, broadcast_stats_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, filter_stats_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::InFlightProto, work_source_),
  5,
  0,
  7,
  6,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::WakeupEventProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::WakeupEventProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::WakeupEventProto, uid_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::WakeupEventProto, action_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::alarm::WakeupEventProto, when_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch)},
  { 11, 19, sizeof(::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm)},
  { 22, 29, sizeof(::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat)},
  { 31, 78, sizeof(::com::android::server::alarm::AlarmManagerServiceDumpProto)},
  { 120, 128, sizeof(::com::android::server::alarm::AlarmClockMetadataProto)},
  { 131, 146, sizeof(::com::android::server::alarm::AlarmProto)},
  { 156, 165, sizeof(::com::android::server::alarm::BatchProto)},
  { 169, 181, sizeof(::com::android::server::alarm::BroadcastStatsProto)},
  { 188, 200, sizeof(::com::android::server::alarm::ConstantsProto)},
  { 207, 219, sizeof(::com::android::server::alarm::FilterStatsProto)},
  { 226, 237, sizeof(::com::android::server::alarm::IdleDispatchEntryProto)},
  { 243, 256, sizeof(::com::android::server::alarm::InFlightProto)},
  { 264, 272, sizeof(::com::android::server::alarm::WakeupEventProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_AlarmManagerServiceDumpProto_TopAlarm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_AlarmManagerServiceDumpProto_AlarmStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_AlarmManagerServiceDumpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_AlarmClockMetadataProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_AlarmProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_BatchProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_BroadcastStatsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_ConstantsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_FilterStatsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_IdleDispatchEntryProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_InFlightProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::alarm::_WakeupEventProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nIframeworks/base/core/proto/android/ser"
  "ver/alarm/alarmmanagerservice.proto\022\030com"
  ".android.server.alarm\0329frameworks/base/c"
  "ore/proto/android/app/alarmmanager.proto"
  "\032:frameworks/base/core/proto/android/app"
  "/pendingintent.proto\032:frameworks/base/co"
  "re/proto/android/internal/locallog.proto"
  "\0326frameworks/base/core/proto/android/os/"
  "worksource.proto\032\?frameworks/base/core/p"
  "roto/android/server/appstatetracker.prot"
  "o\0320frameworks/base/core/proto/android/pr"
  "ivacy.proto\"\223\024\n\034AlarmManagerServiceDumpP"
  "roto\022\024\n\014current_time\030\001 \001(\003\022\030\n\020elapsed_re"
  "altime\030\002 \001(\003\022#\n\033last_time_change_clock_t"
  "ime\030\003 \001(\003\022!\n\031last_time_change_realtime\030\004"
  " \001(\003\022:\n\010settings\030\005 \001(\0132(.com.android.ser"
  "ver.alarm.ConstantsProto\022C\n\021app_state_tr"
  "acker\030\006 \001(\0132(.com.android.server.AppStat"
  "eTrackerProto\022\026\n\016is_interactive\030\007 \001(\010\022%\n"
  "\035time_since_non_interactive_ms\030\010 \001(\003\022\033\n\023"
  "max_wakeup_delay_ms\030\t \001(\003\022#\n\033time_since_"
  "last_dispatch_ms\030\n \001(\003\022.\n&time_until_nex"
  "t_non_wakeup_delivery_ms\030\013 \001(\003\022+\n#time_u"
  "ntil_next_non_wakeup_alarm_ms\030\014 \001(\003\022!\n\031t"
  "ime_until_next_wakeup_ms\030\r \001(\003\022!\n\031time_s"
  "ince_last_wakeup_ms\030\016 \001(\003\022%\n\035time_since_"
  "last_wakeup_set_ms\030\017 \001(\003\022\037\n\027time_change_"
  "event_count\030\020 \001(\003\022\'\n\037device_idle_user_ex"
  "empt_app_ids\030\021 \003(\005\022T\n\031next_alarm_clock_m"
  "etadata\030\022 \003(\01321.com.android.server.alarm"
  ".AlarmClockMetadataProto\022C\n\025pending_alar"
  "m_batches\030\023 \003(\0132$.com.android.server.ala"
  "rm.BatchProto\022T\n&pending_user_blocked_ba"
  "ckground_alarms\030\024 \003(\0132$.com.android.serv"
  "er.alarm.AlarmProto\022@\n\022pending_idle_unti"
  "l\030\025 \001(\0132$.com.android.server.alarm.Alarm"
  "Proto\022G\n\031pending_while_idle_alarms\030\026 \003(\013"
  "2$.com.android.server.alarm.AlarmProto\022A"
  "\n\023next_wake_from_idle\030\027 \001(\0132$.com.androi"
  "d.server.alarm.AlarmProto\022H\n\032past_due_no"
  "n_wakeup_alarms\030\030 \003(\0132$.com.android.serv"
  "er.alarm.AlarmProto\022\033\n\023delayed_alarm_cou"
  "nt\030\031 \001(\005\022\033\n\023total_delay_time_ms\030\032 \001(\003\022\035\n"
  "\025max_delay_duration_ms\030\033 \001(\003\022\'\n\037max_non_"
  "interactive_duration_ms\030\034 \001(\003\022\033\n\023broadca"
  "st_ref_count\030\035 \001(\005\022!\n\031pending_intent_sen"
  "d_count\030\036 \001(\005\022#\n\033pending_intent_finish_c"
  "ount\030\037 \001(\005\022\033\n\023listener_send_count\030  \001(\005\022"
  "\035\n\025listener_finish_count\030! \001(\005\022G\n\026outsta"
  "nding_deliveries\030\" \003(\0132\'.com.android.ser"
  "ver.alarm.InFlightProto\022\'\n\037use_allow_whi"
  "le_idle_short_time\030# \003(\005\022\177\n$last_allow_w"
  "hile_idle_dispatch_times\030$ \003(\0132Q.com.and"
  "roid.server.alarm.AlarmManagerServiceDum"
  "pProto.LastAllowWhileIdleDispatch\022A\n\017rec"
  "ent_problems\030% \001(\0132(.com.android.interna"
  "l.util.LocalLogProto\022S\n\ntop_alarms\030& \003(\013"
  "2\?.com.android.server.alarm.AlarmManager"
  "ServiceDumpProto.TopAlarm\022U\n\013alarm_stats"
  "\030\' \003(\0132@.com.android.server.alarm.AlarmM"
  "anagerServiceDumpProto.AlarmStat\022U\n\033allo"
  "w_while_idle_dispatches\030( \003(\01320.com.andr"
  "oid.server.alarm.IdleDispatchEntryProto\022"
  "I\n\025recent_wakeup_history\030) \003(\0132*.com.and"
  "roid.server.alarm.WakeupEventProto\022<\n\016pe"
  "nding_alarms\030* \003(\0132$.com.android.server."
  "alarm.AlarmProto\032^\n\032LastAllowWhileIdleDi"
  "spatch\022\013\n\003uid\030\001 \001(\005\022\017\n\007time_ms\030\002 \001(\003\022\027\n\017"
  "next_allowed_ms\030\003 \001(\003:\t\232\237\325\207\003\003\010\310\001\032t\n\010TopA"
  "larm\022\013\n\003uid\030\001 \001(\005\022\024\n\014package_name\030\002 \001(\t\022"
  ":\n\006filter\030\003 \001(\0132*.com.android.server.ala"
  "rm.FilterStatsProto:\t\232\237\325\207\003\003\010\310\001\032\225\001\n\tAlarm"
  "Stat\022@\n\tbroadcast\030\001 \001(\0132-.com.android.se"
  "rver.alarm.BroadcastStatsProto\022;\n\007filter"
  "s\030\002 \003(\0132*.com.android.server.alarm.Filte"
  "rStatsProto:\t\232\237\325\207\003\003\010\310\001:\t\232\237\325\207\003\003\010\310\001\"d\n\027Ala"
  "rmClockMetadataProto\022\014\n\004user\030\001 \001(\005\022\027\n\017is"
  "_pending_send\030\002 \001(\010\022\027\n\017trigger_time_ms\030\003"
  " \001(\003:\t\232\237\325\207\003\003\010\310\001\"\345\002\n\nAlarmProto\022\025\n\003tag\030\001 "
  "\001(\tB\010\232\237\325\207\003\002\010d\0226\n\004type\030\002 \001(\0162(.android.ap"
  "p.AlarmManagerProto.AlarmType\022\"\n\032time_un"
  "til_when_elapsed_ms\030\003 \001(\003\022\030\n\020window_leng"
  "th_ms\030\004 \001(\003\022\032\n\022repeat_interval_ms\030\005 \001(\003\022"
  "\r\n\005count\030\006 \001(\005\022\r\n\005flags\030\007 \001(\005\0225\n\013alarm_c"
  "lock\030\010 \001(\0132 .android.app.AlarmClockInfoP"
  "roto\0222\n\toperation\030\t \001(\0132\037.android.app.Pe"
  "ndingIntentProto\022\032\n\010listener\030\n \001(\tB\010\232\237\325\207"
  "\003\002\010d:\t\232\237\325\207\003\003\010\310\001\"\212\001\n\nBatchProto\022\026\n\016start_"
  "realtime\030\001 \001(\003\022\024\n\014end_realtime\030\002 \001(\003\022\r\n\005"
  "flags\030\003 \001(\005\0224\n\006alarms\030\004 \003(\0132$.com.androi"
  "d.server.alarm.AlarmProto:\t\232\237\325\207\003\003\010\310\001\"\270\001\n"
  "\023BroadcastStatsProto\022\013\n\003uid\030\001 \001(\005\022\024\n\014pac"
  "kage_name\030\002 \001(\t\022 \n\030total_flight_duration"
  "_ms\030\003 \001(\003\022\r\n\005count\030\004 \001(\005\022\024\n\014wakeup_count"
  "\030\005 \001(\005\022\033\n\023start_time_realtime\030\006 \001(\003\022\017\n\007n"
  "esting\030\007 \001(\005:\t\232\237\325\207\003\003\010\310\001\"\256\002\n\016ConstantsPro"
  "to\022 \n\030min_futurity_duration_ms\030\001 \001(\003\022 \n\030"
  "min_interval_duration_ms\030\002 \001(\003\022$\n\034listen"
  "er_timeout_duration_ms\030\003 \001(\003\022*\n\"allow_wh"
  "ile_idle_short_duration_ms\030\004 \001(\003\022)\n!allo"
  "w_while_idle_long_duration_ms\030\005 \001(\003\022.\n&a"
  "llow_while_idle_whitelist_duration_ms\030\006 "
  "\001(\003\022 \n\030max_interval_duration_ms\030\007 \001(\003:\t\232"
  "\237\325\207\003\003\010\310\001\"\314\001\n\020FilterStatsProto\022\025\n\003tag\030\001 \001"
  "(\tB\010\232\237\325\207\003\002\010d\022!\n\031last_flight_time_realtim"
  "e\030\002 \001(\003\022 \n\030total_flight_duration_ms\030\003 \001("
  "\003\022\r\n\005count\030\004 \001(\005\022\024\n\014wakeup_count\030\005 \001(\005\022\033"
  "\n\023start_time_realtime\030\006 \001(\003\022\017\n\007nesting\030\007"
  " \001(\005:\t\232\237\325\207\003\003\010\310\001\"\227\001\n\026IdleDispatchEntryPro"
  "to\022\013\n\003uid\030\001 \001(\005\022\013\n\003pkg\030\002 \001(\t\022\025\n\003tag\030\003 \001("
  "\tB\010\232\237\325\207\003\002\010d\022\n\n\002op\030\004 \001(\t\022\037\n\027entry_creatio"
  "n_realtime\030\005 \001(\003\022\024\n\014arg_realtime\030\006 \001(\003:\t"
  "\232\237\325\207\003\003\010\310\001\"\212\003\n\rInFlightProto\022\013\n\003uid\030\001 \001(\005"
  "\022\025\n\003tag\030\002 \001(\tB\010\232\237\325\207\003\002\010d\022\027\n\017when_elapsed_"
  "ms\030\003 \001(\003\022<\n\nalarm_type\030\004 \001(\0162(.android.a"
  "pp.AlarmManagerProto.AlarmType\0227\n\016pendin"
  "g_intent\030\005 \001(\0132\037.android.app.PendingInte"
  "ntProto\022F\n\017broadcast_stats\030\006 \001(\0132-.com.a"
  "ndroid.server.alarm.BroadcastStatsProto\022"
  "@\n\014filter_stats\030\007 \001(\0132*.com.android.serv"
  "er.alarm.FilterStatsProto\0220\n\013work_source"
  "\030\010 \001(\0132\033.android.os.WorkSourceProto:\t\232\237\325"
  "\207\003\003\010\310\001\"H\n\020WakeupEventProto\022\013\n\003uid\030\001 \001(\005\022"
  "\016\n\006action\030\002 \001(\t\022\014\n\004when\030\003 \001(\003:\t\232\237\325\207\003\003\010\310\001"
  "B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_deps[6] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2flocallog_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_sccs[13] = {
  &scc_info_AlarmClockMetadataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_AlarmManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
  &scc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto, "frameworks/base/core/proto/android/server/alarm/alarmmanagerservice.proto", 4964,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto_deps, 13, 6,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto, 13, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace alarm {

// ===================================================================

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::InitAsDefaultInstance() {
}
class AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next_allowed_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
}
AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch(const AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_ms_, &from.time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&time_ms_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::SharedCtor() {
  ::memset(&time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&time_ms_)) + sizeof(uid_));
}

AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::~AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  SharedDtor();
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::SharedDtor() {
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch& AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&time_ms_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_ms(&has_bits);
          time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 next_allowed_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_next_allowed_ms(&has_bits);
          next_allowed_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 next_allowed_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_next_allowed_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_allowed_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int64 time_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->time_ms(), output);
  }

  // optional int64 next_allowed_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->next_allowed_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int64 time_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->time_ms(), target);
  }

  // optional int64 next_allowed_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->next_allowed_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  return target;
}

size_t AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 time_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_ms());
    }

    // optional int64 next_allowed_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->next_allowed_ms());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
    MergeFrom(*source);
  }
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::MergeFrom(const AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_ms_ = from.time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      next_allowed_ms_ = from.next_allowed_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::CopyFrom(const AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::IsInitialized() const {
  return true;
}

void AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::InternalSwap(AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_ms_, other->time_ms_);
  swap(next_allowed_ms_, other->next_allowed_ms_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmManagerServiceDumpProto_TopAlarm::InitAsDefaultInstance() {
  ::com::android::server::alarm::_AlarmManagerServiceDumpProto_TopAlarm_default_instance_._instance.get_mutable()->filter_ = const_cast< ::com::android::server::alarm::FilterStatsProto*>(
      ::com::android::server::alarm::FilterStatsProto::internal_default_instance());
}
class AlarmManagerServiceDumpProto_TopAlarm::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmManagerServiceDumpProto_TopAlarm>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::alarm::FilterStatsProto& filter(const AlarmManagerServiceDumpProto_TopAlarm* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::alarm::FilterStatsProto&
AlarmManagerServiceDumpProto_TopAlarm::_Internal::filter(const AlarmManagerServiceDumpProto_TopAlarm* msg) {
  return *msg->filter_;
}
AlarmManagerServiceDumpProto_TopAlarm::AlarmManagerServiceDumpProto_TopAlarm()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
}
AlarmManagerServiceDumpProto_TopAlarm::AlarmManagerServiceDumpProto_TopAlarm(const AlarmManagerServiceDumpProto_TopAlarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  if (from.has_filter()) {
    filter_ = new ::com::android::server::alarm::FilterStatsProto(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
}

void AlarmManagerServiceDumpProto_TopAlarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(uid_));
}

AlarmManagerServiceDumpProto_TopAlarm::~AlarmManagerServiceDumpProto_TopAlarm() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  SharedDtor();
}

void AlarmManagerServiceDumpProto_TopAlarm::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
}

void AlarmManagerServiceDumpProto_TopAlarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmManagerServiceDumpProto_TopAlarm& AlarmManagerServiceDumpProto_TopAlarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmManagerServiceDumpProto_TopAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AlarmManagerServiceDumpProto_TopAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(filter_ != nullptr);
      filter_->Clear();
    }
  }
  uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmManagerServiceDumpProto_TopAlarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package_name(), ptr, ctx, "com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm.package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.alarm.FilterStatsProto filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmManagerServiceDumpProto_TopAlarm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), static_cast<int>(this->package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm.package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.alarm.FilterStatsProto filter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmManagerServiceDumpProto_TopAlarm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm.package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // optional .com.android.server.alarm.FilterStatsProto filter = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmManagerServiceDumpProto_TopAlarm::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm.package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->package_name(), target);
  }

  // optional .com.android.server.alarm.FilterStatsProto filter = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  return target;
}

size_t AlarmManagerServiceDumpProto_TopAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string package_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .com.android.server.alarm.FilterStatsProto filter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_);
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmManagerServiceDumpProto_TopAlarm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmManagerServiceDumpProto_TopAlarm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmManagerServiceDumpProto_TopAlarm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
    MergeFrom(*source);
  }
}

void AlarmManagerServiceDumpProto_TopAlarm::MergeFrom(const AlarmManagerServiceDumpProto_TopAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_filter()->::com::android::server::alarm::FilterStatsProto::MergeFrom(from.filter());
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmManagerServiceDumpProto_TopAlarm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmManagerServiceDumpProto_TopAlarm::CopyFrom(const AlarmManagerServiceDumpProto_TopAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmManagerServiceDumpProto_TopAlarm::IsInitialized() const {
  return true;
}

void AlarmManagerServiceDumpProto_TopAlarm::InternalSwap(AlarmManagerServiceDumpProto_TopAlarm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filter_, other->filter_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmManagerServiceDumpProto_TopAlarm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmManagerServiceDumpProto_AlarmStat::InitAsDefaultInstance() {
  ::com::android::server::alarm::_AlarmManagerServiceDumpProto_AlarmStat_default_instance_._instance.get_mutable()->broadcast_ = const_cast< ::com::android::server::alarm::BroadcastStatsProto*>(
      ::com::android::server::alarm::BroadcastStatsProto::internal_default_instance());
}
class AlarmManagerServiceDumpProto_AlarmStat::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmManagerServiceDumpProto_AlarmStat>()._has_bits_);
  static const ::com::android::server::alarm::BroadcastStatsProto& broadcast(const AlarmManagerServiceDumpProto_AlarmStat* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::alarm::BroadcastStatsProto&
AlarmManagerServiceDumpProto_AlarmStat::_Internal::broadcast(const AlarmManagerServiceDumpProto_AlarmStat* msg) {
  return *msg->broadcast_;
}
AlarmManagerServiceDumpProto_AlarmStat::AlarmManagerServiceDumpProto_AlarmStat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
}
AlarmManagerServiceDumpProto_AlarmStat::AlarmManagerServiceDumpProto_AlarmStat(const AlarmManagerServiceDumpProto_AlarmStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_broadcast()) {
    broadcast_ = new ::com::android::server::alarm::BroadcastStatsProto(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
}

void AlarmManagerServiceDumpProto_AlarmStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  broadcast_ = nullptr;
}

AlarmManagerServiceDumpProto_AlarmStat::~AlarmManagerServiceDumpProto_AlarmStat() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  SharedDtor();
}

void AlarmManagerServiceDumpProto_AlarmStat::SharedDtor() {
  if (this != internal_default_instance()) delete broadcast_;
}

void AlarmManagerServiceDumpProto_AlarmStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmManagerServiceDumpProto_AlarmStat& AlarmManagerServiceDumpProto_AlarmStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmManagerServiceDumpProto_AlarmStat_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AlarmManagerServiceDumpProto_AlarmStat::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(broadcast_ != nullptr);
    broadcast_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmManagerServiceDumpProto_AlarmStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.alarm.BroadcastStatsProto broadcast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.FilterStatsProto filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmManagerServiceDumpProto_AlarmStat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.alarm.BroadcastStatsProto broadcast = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.FilterStatsProto filters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmManagerServiceDumpProto_AlarmStat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.alarm.BroadcastStatsProto broadcast = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::broadcast(this), output);
  }

  // repeated .com.android.server.alarm.FilterStatsProto filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->filters(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmManagerServiceDumpProto_AlarmStat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.alarm.BroadcastStatsProto broadcast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::broadcast(this), target);
  }

  // repeated .com.android.server.alarm.FilterStatsProto filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->filters(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  return target;
}

size_t AlarmManagerServiceDumpProto_AlarmStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.alarm.FilterStatsProto filters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  // optional .com.android.server.alarm.BroadcastStatsProto broadcast = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *broadcast_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmManagerServiceDumpProto_AlarmStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmManagerServiceDumpProto_AlarmStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmManagerServiceDumpProto_AlarmStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
    MergeFrom(*source);
  }
}

void AlarmManagerServiceDumpProto_AlarmStat::MergeFrom(const AlarmManagerServiceDumpProto_AlarmStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from.has_broadcast()) {
    mutable_broadcast()->::com::android::server::alarm::BroadcastStatsProto::MergeFrom(from.broadcast());
  }
}

void AlarmManagerServiceDumpProto_AlarmStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmManagerServiceDumpProto_AlarmStat::CopyFrom(const AlarmManagerServiceDumpProto_AlarmStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmManagerServiceDumpProto_AlarmStat::IsInitialized() const {
  return true;
}

void AlarmManagerServiceDumpProto_AlarmStat::InternalSwap(AlarmManagerServiceDumpProto_AlarmStat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&filters_)->InternalSwap(CastToBase(&other->filters_));
  swap(broadcast_, other->broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmManagerServiceDumpProto_AlarmStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmManagerServiceDumpProto::InitAsDefaultInstance() {
  ::com::android::server::alarm::_AlarmManagerServiceDumpProto_default_instance_._instance.get_mutable()->settings_ = const_cast< ::com::android::server::alarm::ConstantsProto*>(
      ::com::android::server::alarm::ConstantsProto::internal_default_instance());
  ::com::android::server::alarm::_AlarmManagerServiceDumpProto_default_instance_._instance.get_mutable()->app_state_tracker_ = const_cast< ::com::android::server::AppStateTrackerProto*>(
      ::com::android::server::AppStateTrackerProto::internal_default_instance());
  ::com::android::server::alarm::_AlarmManagerServiceDumpProto_default_instance_._instance.get_mutable()->pending_idle_until_ = const_cast< ::com::android::server::alarm::AlarmProto*>(
      ::com::android::server::alarm::AlarmProto::internal_default_instance());
  ::com::android::server::alarm::_AlarmManagerServiceDumpProto_default_instance_._instance.get_mutable()->next_wake_from_idle_ = const_cast< ::com::android::server::alarm::AlarmProto*>(
      ::com::android::server::alarm::AlarmProto::internal_default_instance());
  ::com::android::server::alarm::_AlarmManagerServiceDumpProto_default_instance_._instance.get_mutable()->recent_problems_ = const_cast< ::com::android::internal::util::LocalLogProto*>(
      ::com::android::internal::util::LocalLogProto::internal_default_instance());
}
class AlarmManagerServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmManagerServiceDumpProto>()._has_bits_);
  static void set_has_current_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_elapsed_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_time_change_clock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_time_change_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::com::android::server::alarm::ConstantsProto& settings(const AlarmManagerServiceDumpProto* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::AppStateTrackerProto& app_state_tracker(const AlarmManagerServiceDumpProto* msg);
  static void set_has_app_state_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_interactive(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_time_since_non_interactive_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_wakeup_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_time_since_last_dispatch_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_time_until_next_non_wakeup_delivery_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_time_until_next_non_wakeup_alarm_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_time_until_next_wakeup_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_time_since_last_wakeup_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_time_since_last_wakeup_set_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_time_change_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::com::android::server::alarm::AlarmProto& pending_idle_until(const AlarmManagerServiceDumpProto* msg);
  static void set_has_pending_idle_until(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::alarm::AlarmProto& next_wake_from_idle(const AlarmManagerServiceDumpProto* msg);
  static void set_has_next_wake_from_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delayed_alarm_count(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_total_delay_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_delay_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_non_interactive_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_broadcast_ref_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_pending_intent_send_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_pending_intent_finish_count(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_listener_send_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_listener_finish_count(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::com::android::internal::util::LocalLogProto& recent_problems(const AlarmManagerServiceDumpProto* msg);
  static void set_has_recent_problems(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::com::android::server::alarm::ConstantsProto&
AlarmManagerServiceDumpProto::_Internal::settings(const AlarmManagerServiceDumpProto* msg) {
  return *msg->settings_;
}
const ::com::android::server::AppStateTrackerProto&
AlarmManagerServiceDumpProto::_Internal::app_state_tracker(const AlarmManagerServiceDumpProto* msg) {
  return *msg->app_state_tracker_;
}
const ::com::android::server::alarm::AlarmProto&
AlarmManagerServiceDumpProto::_Internal::pending_idle_until(const AlarmManagerServiceDumpProto* msg) {
  return *msg->pending_idle_until_;
}
const ::com::android::server::alarm::AlarmProto&
AlarmManagerServiceDumpProto::_Internal::next_wake_from_idle(const AlarmManagerServiceDumpProto* msg) {
  return *msg->next_wake_from_idle_;
}
const ::com::android::internal::util::LocalLogProto&
AlarmManagerServiceDumpProto::_Internal::recent_problems(const AlarmManagerServiceDumpProto* msg) {
  return *msg->recent_problems_;
}
void AlarmManagerServiceDumpProto::clear_app_state_tracker() {
  if (app_state_tracker_ != nullptr) app_state_tracker_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void AlarmManagerServiceDumpProto::clear_recent_problems() {
  if (recent_problems_ != nullptr) recent_problems_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
AlarmManagerServiceDumpProto::AlarmManagerServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.AlarmManagerServiceDumpProto)
}
AlarmManagerServiceDumpProto::AlarmManagerServiceDumpProto(const AlarmManagerServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      device_idle_user_exempt_app_ids_(from.device_idle_user_exempt_app_ids_),
      next_alarm_clock_metadata_(from.next_alarm_clock_metadata_),
      pending_alarm_batches_(from.pending_alarm_batches_),
      pending_user_blocked_background_alarms_(from.pending_user_blocked_background_alarms_),
      pending_while_idle_alarms_(from.pending_while_idle_alarms_),
      past_due_non_wakeup_alarms_(from.past_due_non_wakeup_alarms_),
      outstanding_deliveries_(from.outstanding_deliveries_),
      use_allow_while_idle_short_time_(from.use_allow_while_idle_short_time_),
      last_allow_while_idle_dispatch_times_(from.last_allow_while_idle_dispatch_times_),
      top_alarms_(from.top_alarms_),
      alarm_stats_(from.alarm_stats_),
      allow_while_idle_dispatches_(from.allow_while_idle_dispatches_),
      recent_wakeup_history_(from.recent_wakeup_history_),
      pending_alarms_(from.pending_alarms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::com::android::server::alarm::ConstantsProto(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_app_state_tracker()) {
    app_state_tracker_ = new ::com::android::server::AppStateTrackerProto(*from.app_state_tracker_);
  } else {
    app_state_tracker_ = nullptr;
  }
  if (from.has_pending_idle_until()) {
    pending_idle_until_ = new ::com::android::server::alarm::AlarmProto(*from.pending_idle_until_);
  } else {
    pending_idle_until_ = nullptr;
  }
  if (from.has_next_wake_from_idle()) {
    next_wake_from_idle_ = new ::com::android::server::alarm::AlarmProto(*from.next_wake_from_idle_);
  } else {
    next_wake_from_idle_ = nullptr;
  }
  if (from.has_recent_problems()) {
    recent_problems_ = new ::com::android::internal::util::LocalLogProto(*from.recent_problems_);
  } else {
    recent_problems_ = nullptr;
  }
  ::memcpy(&current_time_, &from.current_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&listener_finish_count_) -
    reinterpret_cast<char*>(&current_time_)) + sizeof(listener_finish_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.AlarmManagerServiceDumpProto)
}

void AlarmManagerServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listener_finish_count_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(listener_finish_count_));
}

AlarmManagerServiceDumpProto::~AlarmManagerServiceDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.AlarmManagerServiceDumpProto)
  SharedDtor();
}

void AlarmManagerServiceDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete app_state_tracker_;
  if (this != internal_default_instance()) delete pending_idle_until_;
  if (this != internal_default_instance()) delete next_wake_from_idle_;
  if (this != internal_default_instance()) delete recent_problems_;
}

void AlarmManagerServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmManagerServiceDumpProto& AlarmManagerServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AlarmManagerServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_idle_user_exempt_app_ids_.Clear();
  next_alarm_clock_metadata_.Clear();
  pending_alarm_batches_.Clear();
  pending_user_blocked_background_alarms_.Clear();
  pending_while_idle_alarms_.Clear();
  past_due_non_wakeup_alarms_.Clear();
  outstanding_deliveries_.Clear();
  use_allow_while_idle_short_time_.Clear();
  last_allow_while_idle_dispatch_times_.Clear();
  top_alarms_.Clear();
  alarm_stats_.Clear();
  allow_while_idle_dispatches_.Clear();
  recent_wakeup_history_.Clear();
  pending_alarms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(app_state_tracker_ != nullptr);
      app_state_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pending_idle_until_ != nullptr);
      pending_idle_until_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(next_wake_from_idle_ != nullptr);
      next_wake_from_idle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(recent_problems_ != nullptr);
      recent_problems_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&current_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_time_change_clock_time_) -
        reinterpret_cast<char*>(&current_time_)) + sizeof(last_time_change_clock_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&last_time_change_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_since_last_wakeup_ms_) -
        reinterpret_cast<char*>(&last_time_change_realtime_)) + sizeof(time_since_last_wakeup_ms_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&time_since_last_wakeup_set_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_ref_count_) -
        reinterpret_cast<char*>(&time_since_last_wakeup_set_ms_)) + sizeof(broadcast_ref_count_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&pending_intent_send_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&listener_finish_count_) -
        reinterpret_cast<char*>(&pending_intent_send_count_)) + sizeof(listener_finish_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmManagerServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 current_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_current_time(&has_bits);
          current_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 elapsed_realtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_elapsed_realtime(&has_bits);
          elapsed_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_time_change_clock_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_time_change_clock_time(&has_bits);
          last_time_change_clock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_time_change_realtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_time_change_realtime(&has_bits);
          last_time_change_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.alarm.ConstantsProto settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.AppStateTrackerProto app_state_tracker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_app_state_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_interactive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_interactive(&has_bits);
          is_interactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_non_interactive_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time_since_non_interactive_ms(&has_bits);
          time_since_non_interactive_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_wakeup_delay_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_wakeup_delay_ms(&has_bits);
          max_wakeup_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_last_dispatch_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_time_since_last_dispatch_ms(&has_bits);
          time_since_last_dispatch_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_until_next_non_wakeup_delivery_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_time_until_next_non_wakeup_delivery_ms(&has_bits);
          time_until_next_non_wakeup_delivery_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_until_next_non_wakeup_alarm_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_time_until_next_non_wakeup_alarm_ms(&has_bits);
          time_until_next_non_wakeup_alarm_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_until_next_wakeup_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_time_until_next_wakeup_ms(&has_bits);
          time_until_next_wakeup_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_last_wakeup_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_time_since_last_wakeup_ms(&has_bits);
          time_since_last_wakeup_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_last_wakeup_set_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_time_since_last_wakeup_set_ms(&has_bits);
          time_since_last_wakeup_set_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_change_event_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_time_change_event_count(&has_bits);
          time_change_event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 device_idle_user_exempt_app_ids = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_device_idle_user_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 392);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_device_idle_user_exempt_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmClockMetadataProto next_alarm_clock_metadata = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_next_alarm_clock_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.BatchProto pending_alarm_batches = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pending_alarm_batches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmProto pending_user_blocked_background_alarms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pending_user_blocked_background_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.alarm.AlarmProto pending_idle_until = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_pending_idle_until(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmProto pending_while_idle_alarms = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pending_while_idle_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.alarm.AlarmProto next_wake_from_idle = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_next_wake_from_idle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmProto past_due_non_wakeup_alarms = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_past_due_non_wakeup_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      // optional int32 delayed_alarm_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_delayed_alarm_count(&has_bits);
          delayed_alarm_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_delay_time_ms = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_total_delay_time_ms(&has_bits);
          total_delay_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_delay_duration_ms = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_max_delay_duration_ms(&has_bits);
          max_delay_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_non_interactive_duration_ms = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_max_non_interactive_duration_ms(&has_bits);
          max_non_interactive_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 broadcast_ref_count = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_broadcast_ref_count(&has_bits);
          broadcast_ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pending_intent_send_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_pending_intent_send_count(&has_bits);
          pending_intent_send_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pending_intent_finish_count = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_pending_intent_finish_count(&has_bits);
          pending_intent_finish_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 listener_send_count = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_listener_send_count(&has_bits);
          listener_send_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 listener_finish_count = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_listener_finish_count(&has_bits);
          listener_finish_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.InFlightProto outstanding_deliveries = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_outstanding_deliveries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 658);
        } else goto handle_unusual;
        continue;
      // repeated int32 use_allow_while_idle_short_time = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_use_allow_while_idle_short_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 664);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_use_allow_while_idle_short_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch last_allow_while_idle_dispatch_times = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_last_allow_while_idle_dispatch_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 674);
        } else goto handle_unusual;
        continue;
      // optional .com.android.internal.util.LocalLogProto recent_problems = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_recent_problems(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm top_alarms = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_top_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 690);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat alarm_stats = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_alarm_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 698);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.IdleDispatchEntryProto allow_while_idle_dispatches = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_allow_while_idle_dispatches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 706);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.WakeupEventProto recent_wakeup_history = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_recent_wakeup_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 714);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmProto pending_alarms = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pending_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 722);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmManagerServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 current_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_current_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 elapsed_realtime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_elapsed_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_time_change_clock_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_time_change_clock_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_change_clock_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_time_change_realtime = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_time_change_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_change_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.alarm.ConstantsProto settings = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.AppStateTrackerProto app_state_tracker = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_state_tracker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_interactive = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_is_interactive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_interactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_non_interactive_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_time_since_non_interactive_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_non_interactive_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_wakeup_delay_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_max_wakeup_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_wakeup_delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_last_dispatch_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_time_since_last_dispatch_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_last_dispatch_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_until_next_non_wakeup_delivery_ms = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_time_until_next_non_wakeup_delivery_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_until_next_non_wakeup_delivery_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_until_next_non_wakeup_alarm_ms = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_time_until_next_non_wakeup_alarm_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_until_next_non_wakeup_alarm_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_until_next_wakeup_ms = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_time_until_next_wakeup_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_until_next_wakeup_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_last_wakeup_ms = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_time_since_last_wakeup_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_last_wakeup_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_last_wakeup_set_ms = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_time_since_last_wakeup_set_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_last_wakeup_set_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_change_event_count = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_time_change_event_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_change_event_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 device_idle_user_exempt_app_ids = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 136u, input, this->mutable_device_idle_user_exempt_app_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_device_idle_user_exempt_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmClockMetadataProto next_alarm_clock_metadata = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_next_alarm_clock_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.BatchProto pending_alarm_batches = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_alarm_batches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmProto pending_user_blocked_background_alarms = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_user_blocked_background_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.alarm.AlarmProto pending_idle_until = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_idle_until()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmProto pending_while_idle_alarms = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_while_idle_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.alarm.AlarmProto next_wake_from_idle = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_next_wake_from_idle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmProto past_due_non_wakeup_alarms = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_past_due_non_wakeup_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delayed_alarm_count = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_delayed_alarm_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delayed_alarm_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_delay_time_ms = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_total_delay_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_delay_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_delay_duration_ms = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_max_delay_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_delay_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_non_interactive_duration_ms = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_max_non_interactive_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_non_interactive_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 broadcast_ref_count = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_broadcast_ref_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_ref_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pending_intent_send_count = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_pending_intent_send_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pending_intent_send_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pending_intent_finish_count = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          _Internal::set_has_pending_intent_finish_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pending_intent_finish_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 listener_send_count = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_listener_send_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &listener_send_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 listener_finish_count = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_listener_finish_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &listener_finish_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.InFlightProto outstanding_deliveries = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outstanding_deliveries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 use_allow_while_idle_short_time = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 280u, input, this->mutable_use_allow_while_idle_short_time())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_use_allow_while_idle_short_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch last_allow_while_idle_dispatch_times = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_last_allow_while_idle_dispatch_times()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.internal.util.LocalLogProto recent_problems = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recent_problems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm top_alarms = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_top_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat alarm_stats = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alarm_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.IdleDispatchEntryProto allow_while_idle_dispatches = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_allow_while_idle_dispatches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.WakeupEventProto recent_wakeup_history = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_recent_wakeup_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmProto pending_alarms = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.AlarmManagerServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.AlarmManagerServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmManagerServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 current_time = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->current_time(), output);
  }

  // optional int64 elapsed_realtime = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->elapsed_realtime(), output);
  }

  // optional int64 last_time_change_clock_time = 3;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->last_time_change_clock_time(), output);
  }

  // optional int64 last_time_change_realtime = 4;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_time_change_realtime(), output);
  }

  // optional .com.android.server.alarm.ConstantsProto settings = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::settings(this), output);
  }

  // optional .com.android.server.AppStateTrackerProto app_state_tracker = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::app_state_tracker(this), output);
  }

  // optional bool is_interactive = 7;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_interactive(), output);
  }

  // optional int64 time_since_non_interactive_ms = 8;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->time_since_non_interactive_ms(), output);
  }

  // optional int64 max_wakeup_delay_ms = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->max_wakeup_delay_ms(), output);
  }

  // optional int64 time_since_last_dispatch_ms = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->time_since_last_dispatch_ms(), output);
  }

  // optional int64 time_until_next_non_wakeup_delivery_ms = 11;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->time_until_next_non_wakeup_delivery_ms(), output);
  }

  // optional int64 time_until_next_non_wakeup_alarm_ms = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->time_until_next_non_wakeup_alarm_ms(), output);
  }

  // optional int64 time_until_next_wakeup_ms = 13;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->time_until_next_wakeup_ms(), output);
  }

  // optional int64 time_since_last_wakeup_ms = 14;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->time_since_last_wakeup_ms(), output);
  }

  // optional int64 time_since_last_wakeup_set_ms = 15;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->time_since_last_wakeup_set_ms(), output);
  }

  // optional int64 time_change_event_count = 16;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->time_change_event_count(), output);
  }

  // repeated int32 device_idle_user_exempt_app_ids = 17;
  for (int i = 0, n = this->device_idle_user_exempt_app_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      17, this->device_idle_user_exempt_app_ids(i), output);
  }

  // repeated .com.android.server.alarm.AlarmClockMetadataProto next_alarm_clock_metadata = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->next_alarm_clock_metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->next_alarm_clock_metadata(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.alarm.BatchProto pending_alarm_batches = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_alarm_batches_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->pending_alarm_batches(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.alarm.AlarmProto pending_user_blocked_background_alarms = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_user_blocked_background_alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->pending_user_blocked_background_alarms(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.alarm.AlarmProto pending_idle_until = 21;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::pending_idle_until(this), output);
  }

  // repeated .com.android.server.alarm.AlarmProto pending_while_idle_alarms = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_while_idle_alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->pending_while_idle_alarms(static_cast<int>(i)),
      output);
  }

  // optional .com.android.server.alarm.AlarmProto next_wake_from_idle = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, _Internal::next_wake_from_idle(this), output);
  }

  // repeated .com.android.server.alarm.AlarmProto past_due_non_wakeup_alarms = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->past_due_non_wakeup_alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->past_due_non_wakeup_alarms(static_cast<int>(i)),
      output);
  }

  // optional int32 delayed_alarm_count = 25;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->delayed_alarm_count(), output);
  }

  // optional int64 total_delay_time_ms = 26;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(26, this->total_delay_time_ms(), output);
  }

  // optional int64 max_delay_duration_ms = 27;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(27, this->max_delay_duration_ms(), output);
  }

  // optional int64 max_non_interactive_duration_ms = 28;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(28, this->max_non_interactive_duration_ms(), output);
  }

  // optional int32 broadcast_ref_count = 29;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(29, this->broadcast_ref_count(), output);
  }

  // optional int32 pending_intent_send_count = 30;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(30, this->pending_intent_send_count(), output);
  }

  // optional int32 pending_intent_finish_count = 31;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(31, this->pending_intent_finish_count(), output);
  }

  // optional int32 listener_send_count = 32;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(32, this->listener_send_count(), output);
  }

  // optional int32 listener_finish_count = 33;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(33, this->listener_finish_count(), output);
  }

  // repeated .com.android.server.alarm.InFlightProto outstanding_deliveries = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outstanding_deliveries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      34,
      this->outstanding_deliveries(static_cast<int>(i)),
      output);
  }

  // repeated int32 use_allow_while_idle_short_time = 35;
  for (int i = 0, n = this->use_allow_while_idle_short_time_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      35, this->use_allow_while_idle_short_time(i), output);
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch last_allow_while_idle_dispatch_times = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_allow_while_idle_dispatch_times_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      36,
      this->last_allow_while_idle_dispatch_times(static_cast<int>(i)),
      output);
  }

  // optional .com.android.internal.util.LocalLogProto recent_problems = 37;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, _Internal::recent_problems(this), output);
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm top_alarms = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      38,
      this->top_alarms(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat alarm_stats = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarm_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      39,
      this->alarm_stats(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.alarm.IdleDispatchEntryProto allow_while_idle_dispatches = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allow_while_idle_dispatches_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      40,
      this->allow_while_idle_dispatches(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.alarm.WakeupEventProto recent_wakeup_history = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recent_wakeup_history_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      41,
      this->recent_wakeup_history(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.alarm.AlarmProto pending_alarms = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      42,
      this->pending_alarms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.AlarmManagerServiceDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmManagerServiceDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 current_time = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->current_time(), target);
  }

  // optional int64 elapsed_realtime = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->elapsed_realtime(), target);
  }

  // optional int64 last_time_change_clock_time = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->last_time_change_clock_time(), target);
  }

  // optional int64 last_time_change_realtime = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->last_time_change_realtime(), target);
  }

  // optional .com.android.server.alarm.ConstantsProto settings = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::settings(this), target);
  }

  // optional .com.android.server.AppStateTrackerProto app_state_tracker = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::app_state_tracker(this), target);
  }

  // optional bool is_interactive = 7;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_interactive(), target);
  }

  // optional int64 time_since_non_interactive_ms = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->time_since_non_interactive_ms(), target);
  }

  // optional int64 max_wakeup_delay_ms = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->max_wakeup_delay_ms(), target);
  }

  // optional int64 time_since_last_dispatch_ms = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->time_since_last_dispatch_ms(), target);
  }

  // optional int64 time_until_next_non_wakeup_delivery_ms = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->time_until_next_non_wakeup_delivery_ms(), target);
  }

  // optional int64 time_until_next_non_wakeup_alarm_ms = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->time_until_next_non_wakeup_alarm_ms(), target);
  }

  // optional int64 time_until_next_wakeup_ms = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->time_until_next_wakeup_ms(), target);
  }

  // optional int64 time_since_last_wakeup_ms = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->time_since_last_wakeup_ms(), target);
  }

  // optional int64 time_since_last_wakeup_set_ms = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->time_since_last_wakeup_set_ms(), target);
  }

  // optional int64 time_change_event_count = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->time_change_event_count(), target);
  }

  // repeated int32 device_idle_user_exempt_app_ids = 17;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(17, this->device_idle_user_exempt_app_ids_, target);

  // repeated .com.android.server.alarm.AlarmClockMetadataProto next_alarm_clock_metadata = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->next_alarm_clock_metadata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->next_alarm_clock_metadata(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.alarm.BatchProto pending_alarm_batches = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_alarm_batches_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->pending_alarm_batches(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.alarm.AlarmProto pending_user_blocked_background_alarms = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_user_blocked_background_alarms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->pending_user_blocked_background_alarms(static_cast<int>(i)), target);
  }

  // optional .com.android.server.alarm.AlarmProto pending_idle_until = 21;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::pending_idle_until(this), target);
  }

  // repeated .com.android.server.alarm.AlarmProto pending_while_idle_alarms = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_while_idle_alarms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->pending_while_idle_alarms(static_cast<int>(i)), target);
  }

  // optional .com.android.server.alarm.AlarmProto next_wake_from_idle = 23;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, _Internal::next_wake_from_idle(this), target);
  }

  // repeated .com.android.server.alarm.AlarmProto past_due_non_wakeup_alarms = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->past_due_non_wakeup_alarms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->past_due_non_wakeup_alarms(static_cast<int>(i)), target);
  }

  // optional int32 delayed_alarm_count = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->delayed_alarm_count(), target);
  }

  // optional int64 total_delay_time_ms = 26;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->total_delay_time_ms(), target);
  }

  // optional int64 max_delay_duration_ms = 27;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->max_delay_duration_ms(), target);
  }

  // optional int64 max_non_interactive_duration_ms = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->max_non_interactive_duration_ms(), target);
  }

  // optional int32 broadcast_ref_count = 29;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->broadcast_ref_count(), target);
  }

  // optional int32 pending_intent_send_count = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->pending_intent_send_count(), target);
  }

  // optional int32 pending_intent_finish_count = 31;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->pending_intent_finish_count(), target);
  }

  // optional int32 listener_send_count = 32;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->listener_send_count(), target);
  }

  // optional int32 listener_finish_count = 33;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->listener_finish_count(), target);
  }

  // repeated .com.android.server.alarm.InFlightProto outstanding_deliveries = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outstanding_deliveries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, this->outstanding_deliveries(static_cast<int>(i)), target);
  }

  // repeated int32 use_allow_while_idle_short_time = 35;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(35, this->use_allow_while_idle_short_time_, target);

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch last_allow_while_idle_dispatch_times = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_allow_while_idle_dispatch_times_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, this->last_allow_while_idle_dispatch_times(static_cast<int>(i)), target);
  }

  // optional .com.android.internal.util.LocalLogProto recent_problems = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, _Internal::recent_problems(this), target);
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm top_alarms = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_alarms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, this->top_alarms(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat alarm_stats = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarm_stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, this->alarm_stats(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.alarm.IdleDispatchEntryProto allow_while_idle_dispatches = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allow_while_idle_dispatches_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->allow_while_idle_dispatches(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.alarm.WakeupEventProto recent_wakeup_history = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recent_wakeup_history_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->recent_wakeup_history(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.alarm.AlarmProto pending_alarms = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_alarms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->pending_alarms(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.AlarmManagerServiceDumpProto)
  return target;
}

size_t AlarmManagerServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 device_idle_user_exempt_app_ids = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->device_idle_user_exempt_app_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_idle_user_exempt_app_ids_size());
    total_size += data_size;
  }

  // repeated .com.android.server.alarm.AlarmClockMetadataProto next_alarm_clock_metadata = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->next_alarm_clock_metadata_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->next_alarm_clock_metadata(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.BatchProto pending_alarm_batches = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_alarm_batches_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_alarm_batches(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.AlarmProto pending_user_blocked_background_alarms = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_user_blocked_background_alarms_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_user_blocked_background_alarms(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.AlarmProto pending_while_idle_alarms = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_while_idle_alarms_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_while_idle_alarms(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.AlarmProto past_due_non_wakeup_alarms = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->past_due_non_wakeup_alarms_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->past_due_non_wakeup_alarms(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.InFlightProto outstanding_deliveries = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->outstanding_deliveries_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outstanding_deliveries(static_cast<int>(i)));
    }
  }

  // repeated int32 use_allow_while_idle_short_time = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->use_allow_while_idle_short_time_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->use_allow_while_idle_short_time_size());
    total_size += data_size;
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.LastAllowWhileIdleDispatch last_allow_while_idle_dispatch_times = 36;
  {
    unsigned int count = static_cast<unsigned int>(this->last_allow_while_idle_dispatch_times_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->last_allow_while_idle_dispatch_times(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.TopAlarm top_alarms = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->top_alarms_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->top_alarms(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.AlarmManagerServiceDumpProto.AlarmStat alarm_stats = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->alarm_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alarm_stats(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.IdleDispatchEntryProto allow_while_idle_dispatches = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->allow_while_idle_dispatches_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->allow_while_idle_dispatches(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.WakeupEventProto recent_wakeup_history = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->recent_wakeup_history_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->recent_wakeup_history(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.alarm.AlarmProto pending_alarms = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_alarms_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_alarms(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.alarm.ConstantsProto settings = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .com.android.server.AppStateTrackerProto app_state_tracker = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_state_tracker_);
    }

    // optional .com.android.server.alarm.AlarmProto pending_idle_until = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_idle_until_);
    }

    // optional .com.android.server.alarm.AlarmProto next_wake_from_idle = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *next_wake_from_idle_);
    }

    // optional .com.android.internal.util.LocalLogProto recent_problems = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_problems_);
    }

    // optional int64 current_time = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->current_time());
    }

    // optional int64 elapsed_realtime = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->elapsed_realtime());
    }

    // optional int64 last_time_change_clock_time = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_time_change_clock_time());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 last_time_change_realtime = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_time_change_realtime());
    }

    // optional int64 time_since_non_interactive_ms = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_non_interactive_ms());
    }

    // optional int64 max_wakeup_delay_ms = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_wakeup_delay_ms());
    }

    // optional int64 time_since_last_dispatch_ms = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_last_dispatch_ms());
    }

    // optional int64 time_until_next_non_wakeup_delivery_ms = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_until_next_non_wakeup_delivery_ms());
    }

    // optional int64 time_until_next_non_wakeup_alarm_ms = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_until_next_non_wakeup_alarm_ms());
    }

    // optional int64 time_until_next_wakeup_ms = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_until_next_wakeup_ms());
    }

    // optional int64 time_since_last_wakeup_ms = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_last_wakeup_ms());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 time_since_last_wakeup_set_ms = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_last_wakeup_set_ms());
    }

    // optional int64 time_change_event_count = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_change_event_count());
    }

    // optional bool is_interactive = 7;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional int32 delayed_alarm_count = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->delayed_alarm_count());
    }

    // optional int64 total_delay_time_ms = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_delay_time_ms());
    }

    // optional int64 max_delay_duration_ms = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_delay_duration_ms());
    }

    // optional int64 max_non_interactive_duration_ms = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_non_interactive_duration_ms());
    }

    // optional int32 broadcast_ref_count = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->broadcast_ref_count());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional int32 pending_intent_send_count = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pending_intent_send_count());
    }

    // optional int32 pending_intent_finish_count = 31;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pending_intent_finish_count());
    }

    // optional int32 listener_send_count = 32;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->listener_send_count());
    }

    // optional int32 listener_finish_count = 33;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->listener_finish_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmManagerServiceDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmManagerServiceDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmManagerServiceDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.AlarmManagerServiceDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.AlarmManagerServiceDumpProto)
    MergeFrom(*source);
  }
}

void AlarmManagerServiceDumpProto::MergeFrom(const AlarmManagerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_idle_user_exempt_app_ids_.MergeFrom(from.device_idle_user_exempt_app_ids_);
  next_alarm_clock_metadata_.MergeFrom(from.next_alarm_clock_metadata_);
  pending_alarm_batches_.MergeFrom(from.pending_alarm_batches_);
  pending_user_blocked_background_alarms_.MergeFrom(from.pending_user_blocked_background_alarms_);
  pending_while_idle_alarms_.MergeFrom(from.pending_while_idle_alarms_);
  past_due_non_wakeup_alarms_.MergeFrom(from.past_due_non_wakeup_alarms_);
  outstanding_deliveries_.MergeFrom(from.outstanding_deliveries_);
  use_allow_while_idle_short_time_.MergeFrom(from.use_allow_while_idle_short_time_);
  last_allow_while_idle_dispatch_times_.MergeFrom(from.last_allow_while_idle_dispatch_times_);
  top_alarms_.MergeFrom(from.top_alarms_);
  alarm_stats_.MergeFrom(from.alarm_stats_);
  allow_while_idle_dispatches_.MergeFrom(from.allow_while_idle_dispatches_);
  recent_wakeup_history_.MergeFrom(from.recent_wakeup_history_);
  pending_alarms_.MergeFrom(from.pending_alarms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_settings()->::com::android::server::alarm::ConstantsProto::MergeFrom(from.settings());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_app_state_tracker()->::com::android::server::AppStateTrackerProto::MergeFrom(from.app_state_tracker());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pending_idle_until()->::com::android::server::alarm::AlarmProto::MergeFrom(from.pending_idle_until());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_next_wake_from_idle()->::com::android::server::alarm::AlarmProto::MergeFrom(from.next_wake_from_idle());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_recent_problems()->::com::android::internal::util::LocalLogProto::MergeFrom(from.recent_problems());
    }
    if (cached_has_bits & 0x00000020u) {
      current_time_ = from.current_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      elapsed_realtime_ = from.elapsed_realtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_time_change_clock_time_ = from.last_time_change_clock_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      last_time_change_realtime_ = from.last_time_change_realtime_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_since_non_interactive_ms_ = from.time_since_non_interactive_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_wakeup_delay_ms_ = from.max_wakeup_delay_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      time_since_last_dispatch_ms_ = from.time_since_last_dispatch_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_until_next_non_wakeup_delivery_ms_ = from.time_until_next_non_wakeup_delivery_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      time_until_next_non_wakeup_alarm_ms_ = from.time_until_next_non_wakeup_alarm_ms_;
    }
    if (cached_has_bits & 0x00004000u) {
      time_until_next_wakeup_ms_ = from.time_until_next_wakeup_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      time_since_last_wakeup_ms_ = from.time_since_last_wakeup_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      time_since_last_wakeup_set_ms_ = from.time_since_last_wakeup_set_ms_;
    }
    if (cached_has_bits & 0x00020000u) {
      time_change_event_count_ = from.time_change_event_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_interactive_ = from.is_interactive_;
    }
    if (cached_has_bits & 0x00080000u) {
      delayed_alarm_count_ = from.delayed_alarm_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      total_delay_time_ms_ = from.total_delay_time_ms_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_delay_duration_ms_ = from.max_delay_duration_ms_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_non_interactive_duration_ms_ = from.max_non_interactive_duration_ms_;
    }
    if (cached_has_bits & 0x00800000u) {
      broadcast_ref_count_ = from.broadcast_ref_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      pending_intent_send_count_ = from.pending_intent_send_count_;
    }
    if (cached_has_bits & 0x02000000u) {
      pending_intent_finish_count_ = from.pending_intent_finish_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      listener_send_count_ = from.listener_send_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      listener_finish_count_ = from.listener_finish_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmManagerServiceDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmManagerServiceDumpProto::CopyFrom(const AlarmManagerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.AlarmManagerServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmManagerServiceDumpProto::IsInitialized() const {
  return true;
}

void AlarmManagerServiceDumpProto::InternalSwap(AlarmManagerServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_idle_user_exempt_app_ids_.InternalSwap(&other->device_idle_user_exempt_app_ids_);
  CastToBase(&next_alarm_clock_metadata_)->InternalSwap(CastToBase(&other->next_alarm_clock_metadata_));
  CastToBase(&pending_alarm_batches_)->InternalSwap(CastToBase(&other->pending_alarm_batches_));
  CastToBase(&pending_user_blocked_background_alarms_)->InternalSwap(CastToBase(&other->pending_user_blocked_background_alarms_));
  CastToBase(&pending_while_idle_alarms_)->InternalSwap(CastToBase(&other->pending_while_idle_alarms_));
  CastToBase(&past_due_non_wakeup_alarms_)->InternalSwap(CastToBase(&other->past_due_non_wakeup_alarms_));
  CastToBase(&outstanding_deliveries_)->InternalSwap(CastToBase(&other->outstanding_deliveries_));
  use_allow_while_idle_short_time_.InternalSwap(&other->use_allow_while_idle_short_time_);
  CastToBase(&last_allow_while_idle_dispatch_times_)->InternalSwap(CastToBase(&other->last_allow_while_idle_dispatch_times_));
  CastToBase(&top_alarms_)->InternalSwap(CastToBase(&other->top_alarms_));
  CastToBase(&alarm_stats_)->InternalSwap(CastToBase(&other->alarm_stats_));
  CastToBase(&allow_while_idle_dispatches_)->InternalSwap(CastToBase(&other->allow_while_idle_dispatches_));
  CastToBase(&recent_wakeup_history_)->InternalSwap(CastToBase(&other->recent_wakeup_history_));
  CastToBase(&pending_alarms_)->InternalSwap(CastToBase(&other->pending_alarms_));
  swap(settings_, other->settings_);
  swap(app_state_tracker_, other->app_state_tracker_);
  swap(pending_idle_until_, other->pending_idle_until_);
  swap(next_wake_from_idle_, other->next_wake_from_idle_);
  swap(recent_problems_, other->recent_problems_);
  swap(current_time_, other->current_time_);
  swap(elapsed_realtime_, other->elapsed_realtime_);
  swap(last_time_change_clock_time_, other->last_time_change_clock_time_);
  swap(last_time_change_realtime_, other->last_time_change_realtime_);
  swap(time_since_non_interactive_ms_, other->time_since_non_interactive_ms_);
  swap(max_wakeup_delay_ms_, other->max_wakeup_delay_ms_);
  swap(time_since_last_dispatch_ms_, other->time_since_last_dispatch_ms_);
  swap(time_until_next_non_wakeup_delivery_ms_, other->time_until_next_non_wakeup_delivery_ms_);
  swap(time_until_next_non_wakeup_alarm_ms_, other->time_until_next_non_wakeup_alarm_ms_);
  swap(time_until_next_wakeup_ms_, other->time_until_next_wakeup_ms_);
  swap(time_since_last_wakeup_ms_, other->time_since_last_wakeup_ms_);
  swap(time_since_last_wakeup_set_ms_, other->time_since_last_wakeup_set_ms_);
  swap(time_change_event_count_, other->time_change_event_count_);
  swap(is_interactive_, other->is_interactive_);
  swap(delayed_alarm_count_, other->delayed_alarm_count_);
  swap(total_delay_time_ms_, other->total_delay_time_ms_);
  swap(max_delay_duration_ms_, other->max_delay_duration_ms_);
  swap(max_non_interactive_duration_ms_, other->max_non_interactive_duration_ms_);
  swap(broadcast_ref_count_, other->broadcast_ref_count_);
  swap(pending_intent_send_count_, other->pending_intent_send_count_);
  swap(pending_intent_finish_count_, other->pending_intent_finish_count_);
  swap(listener_send_count_, other->listener_send_count_);
  swap(listener_finish_count_, other->listener_finish_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmManagerServiceDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmClockMetadataProto::InitAsDefaultInstance() {
}
class AlarmClockMetadataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmClockMetadataProto>()._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_pending_send(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trigger_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AlarmClockMetadataProto::AlarmClockMetadataProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.AlarmClockMetadataProto)
}
AlarmClockMetadataProto::AlarmClockMetadataProto(const AlarmClockMetadataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_, &from.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_time_ms_) -
    reinterpret_cast<char*>(&user_)) + sizeof(trigger_time_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.AlarmClockMetadataProto)
}

void AlarmClockMetadataProto::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_time_ms_) -
      reinterpret_cast<char*>(&user_)) + sizeof(trigger_time_ms_));
}

AlarmClockMetadataProto::~AlarmClockMetadataProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.AlarmClockMetadataProto)
  SharedDtor();
}

void AlarmClockMetadataProto::SharedDtor() {
}

void AlarmClockMetadataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmClockMetadataProto& AlarmClockMetadataProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmClockMetadataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AlarmClockMetadataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.AlarmClockMetadataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&user_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_time_ms_) -
        reinterpret_cast<char*>(&user_)) + sizeof(trigger_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmClockMetadataProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user(&has_bits);
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pending_send = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_pending_send(&has_bits);
          is_pending_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trigger_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_trigger_time_ms(&has_bits);
          trigger_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmClockMetadataProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.AlarmClockMetadataProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pending_send = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_pending_send(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_send_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_time_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_trigger_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.AlarmClockMetadataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.AlarmClockMetadataProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmClockMetadataProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.AlarmClockMetadataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user(), output);
  }

  // optional bool is_pending_send = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_pending_send(), output);
  }

  // optional int64 trigger_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->trigger_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.AlarmClockMetadataProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmClockMetadataProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.AlarmClockMetadataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->user(), target);
  }

  // optional bool is_pending_send = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_pending_send(), target);
  }

  // optional int64 trigger_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->trigger_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.AlarmClockMetadataProto)
  return target;
}

size_t AlarmClockMetadataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.AlarmClockMetadataProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 user = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user());
    }

    // optional bool is_pending_send = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int64 trigger_time_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_time_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmClockMetadataProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.AlarmClockMetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmClockMetadataProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmClockMetadataProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.AlarmClockMetadataProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.AlarmClockMetadataProto)
    MergeFrom(*source);
  }
}

void AlarmClockMetadataProto::MergeFrom(const AlarmClockMetadataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.AlarmClockMetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_ = from.user_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pending_send_ = from.is_pending_send_;
    }
    if (cached_has_bits & 0x00000004u) {
      trigger_time_ms_ = from.trigger_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmClockMetadataProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.AlarmClockMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmClockMetadataProto::CopyFrom(const AlarmClockMetadataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.AlarmClockMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmClockMetadataProto::IsInitialized() const {
  return true;
}

void AlarmClockMetadataProto::InternalSwap(AlarmClockMetadataProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_, other->user_);
  swap(is_pending_send_, other->is_pending_send_);
  swap(trigger_time_ms_, other->trigger_time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmClockMetadataProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmProto::InitAsDefaultInstance() {
  ::com::android::server::alarm::_AlarmProto_default_instance_._instance.get_mutable()->alarm_clock_ = const_cast< ::android::app::AlarmClockInfoProto*>(
      ::android::app::AlarmClockInfoProto::internal_default_instance());
  ::com::android::server::alarm::_AlarmProto_default_instance_._instance.get_mutable()->operation_ = const_cast< ::android::app::PendingIntentProto*>(
      ::android::app::PendingIntentProto::internal_default_instance());
}
class AlarmProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmProto>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_until_when_elapsed_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_window_length_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_repeat_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::app::AlarmClockInfoProto& alarm_clock(const AlarmProto* msg);
  static void set_has_alarm_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::app::PendingIntentProto& operation(const AlarmProto* msg);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_listener(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::app::AlarmClockInfoProto&
AlarmProto::_Internal::alarm_clock(const AlarmProto* msg) {
  return *msg->alarm_clock_;
}
const ::android::app::PendingIntentProto&
AlarmProto::_Internal::operation(const AlarmProto* msg) {
  return *msg->operation_;
}
void AlarmProto::clear_alarm_clock() {
  if (alarm_clock_ != nullptr) alarm_clock_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void AlarmProto::clear_operation() {
  if (operation_ != nullptr) operation_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
AlarmProto::AlarmProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.AlarmProto)
}
AlarmProto::AlarmProto(const AlarmProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  listener_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_listener()) {
    listener_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listener_);
  }
  if (from.has_alarm_clock()) {
    alarm_clock_ = new ::android::app::AlarmClockInfoProto(*from.alarm_clock_);
  } else {
    alarm_clock_ = nullptr;
  }
  if (from.has_operation()) {
    operation_ = new ::android::app::PendingIntentProto(*from.operation_);
  } else {
    operation_ = nullptr;
  }
  ::memcpy(&time_until_when_elapsed_ms_, &from.time_until_when_elapsed_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&time_until_when_elapsed_ms_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.AlarmProto)
}

void AlarmProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listener_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&alarm_clock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&alarm_clock_)) + sizeof(flags_));
}

AlarmProto::~AlarmProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.AlarmProto)
  SharedDtor();
}

void AlarmProto::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listener_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete alarm_clock_;
  if (this != internal_default_instance()) delete operation_;
}

void AlarmProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmProto& AlarmProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void AlarmProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.AlarmProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      listener_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(alarm_clock_ != nullptr);
      alarm_clock_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(operation_ != nullptr);
      operation_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&time_until_when_elapsed_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&time_until_when_elapsed_ms_)) + sizeof(count_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&repeat_interval_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&repeat_interval_ms_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tag = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.alarm.AlarmProto.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.AlarmManagerProto.AlarmType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::AlarmManagerProto_AlarmType_IsValid(val))) {
            set_type(static_cast<::android::app::AlarmManagerProto_AlarmType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 time_until_when_elapsed_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_until_when_elapsed_ms(&has_bits);
          time_until_when_elapsed_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 window_length_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_window_length_ms(&has_bits);
          window_length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 repeat_interval_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_repeat_interval_ms(&has_bits);
          repeat_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.AlarmClockInfoProto alarm_clock = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_alarm_clock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.PendingIntentProto operation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string listener = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_listener(), ptr, ctx, "com.android.server.alarm.AlarmProto.listener");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.AlarmProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.AlarmProto.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.AlarmManagerProto.AlarmType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::AlarmManagerProto_AlarmType_IsValid(value)) {
            set_type(static_cast< ::android::app::AlarmManagerProto_AlarmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_until_when_elapsed_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_time_until_when_elapsed_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_until_when_elapsed_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 window_length_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_window_length_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &window_length_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 repeat_interval_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_repeat_interval_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &repeat_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.AlarmClockInfoProto alarm_clock = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alarm_clock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.PendingIntentProto operation = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string listener = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_listener()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listener().data(), static_cast<int>(this->listener().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.AlarmProto.listener");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.AlarmProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.AlarmProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.AlarmProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.AlarmProto.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional .android.app.AlarmManagerProto.AlarmType type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int64 time_until_when_elapsed_ms = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->time_until_when_elapsed_ms(), output);
  }

  // optional int64 window_length_ms = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->window_length_ms(), output);
  }

  // optional int64 repeat_interval_ms = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->repeat_interval_ms(), output);
  }

  // optional int32 count = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // optional int32 flags = 7;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->flags(), output);
  }

  // optional .android.app.AlarmClockInfoProto alarm_clock = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::alarm_clock(this), output);
  }

  // optional .android.app.PendingIntentProto operation = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::operation(this), output);
  }

  // optional string listener = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listener().data(), static_cast<int>(this->listener().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.AlarmProto.listener");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->listener(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.AlarmProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.AlarmProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.AlarmProto.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional .android.app.AlarmManagerProto.AlarmType type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int64 time_until_when_elapsed_ms = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->time_until_when_elapsed_ms(), target);
  }

  // optional int64 window_length_ms = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->window_length_ms(), target);
  }

  // optional int64 repeat_interval_ms = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->repeat_interval_ms(), target);
  }

  // optional int32 count = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // optional int32 flags = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->flags(), target);
  }

  // optional .android.app.AlarmClockInfoProto alarm_clock = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::alarm_clock(this), target);
  }

  // optional .android.app.PendingIntentProto operation = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::operation(this), target);
  }

  // optional string listener = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listener().data(), static_cast<int>(this->listener().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.AlarmProto.listener");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->listener(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.AlarmProto)
  return target;
}

size_t AlarmProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.AlarmProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string listener = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->listener());
    }

    // optional .android.app.AlarmClockInfoProto alarm_clock = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alarm_clock_);
    }

    // optional .android.app.PendingIntentProto operation = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_);
    }

    // optional int64 time_until_when_elapsed_ms = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_until_when_elapsed_ms());
    }

    // optional int64 window_length_ms = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->window_length_ms());
    }

    // optional .android.app.AlarmManagerProto.AlarmType type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 count = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 repeat_interval_ms = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->repeat_interval_ms());
    }

    // optional int32 flags = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.AlarmProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.AlarmProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.AlarmProto)
    MergeFrom(*source);
  }
}

void AlarmProto::MergeFrom(const AlarmProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.AlarmProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      listener_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listener_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_alarm_clock()->::android::app::AlarmClockInfoProto::MergeFrom(from.alarm_clock());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_operation()->::android::app::PendingIntentProto::MergeFrom(from.operation());
    }
    if (cached_has_bits & 0x00000010u) {
      time_until_when_elapsed_ms_ = from.time_until_when_elapsed_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      window_length_ms_ = from.window_length_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      repeat_interval_ms_ = from.repeat_interval_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.AlarmProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmProto::CopyFrom(const AlarmProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.AlarmProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmProto::IsInitialized() const {
  return true;
}

void AlarmProto::InternalSwap(AlarmProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  listener_.Swap(&other->listener_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(alarm_clock_, other->alarm_clock_);
  swap(operation_, other->operation_);
  swap(time_until_when_elapsed_ms_, other->time_until_when_elapsed_ms_);
  swap(window_length_ms_, other->window_length_ms_);
  swap(type_, other->type_);
  swap(count_, other->count_);
  swap(repeat_interval_ms_, other->repeat_interval_ms_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchProto::InitAsDefaultInstance() {
}
class BatchProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchProto>()._has_bits_);
  static void set_has_start_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BatchProto::BatchProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.BatchProto)
}
BatchProto::BatchProto(const BatchProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      alarms_(from.alarms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_realtime_, &from.start_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&start_realtime_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.BatchProto)
}

void BatchProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  ::memset(&start_realtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_realtime_)) + sizeof(flags_));
}

BatchProto::~BatchProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.BatchProto)
  SharedDtor();
}

void BatchProto::SharedDtor() {
}

void BatchProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchProto& BatchProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BatchProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.BatchProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&start_realtime_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start_realtime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_realtime(&has_bits);
          start_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 end_realtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_realtime(&has_bits);
          end_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.alarm.AlarmProto alarms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.BatchProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_realtime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_realtime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.alarm.AlarmProto alarms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.BatchProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.BatchProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.BatchProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_realtime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start_realtime(), output);
  }

  // optional int64 end_realtime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->end_realtime(), output);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // repeated .com.android.server.alarm.AlarmProto alarms = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->alarms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.BatchProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.BatchProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_realtime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->start_realtime(), target);
  }

  // optional int64 end_realtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->end_realtime(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  // repeated .com.android.server.alarm.AlarmProto alarms = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->alarms(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.BatchProto)
  return target;
}

size_t BatchProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.BatchProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.alarm.AlarmProto alarms = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->alarms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alarms(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 start_realtime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_realtime());
    }

    // optional int64 end_realtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_realtime());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.BatchProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.BatchProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.BatchProto)
    MergeFrom(*source);
  }
}

void BatchProto::MergeFrom(const BatchProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.BatchProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alarms_.MergeFrom(from.alarms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_realtime_ = from.start_realtime_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_realtime_ = from.end_realtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.BatchProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchProto::CopyFrom(const BatchProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.BatchProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchProto::IsInitialized() const {
  return true;
}

void BatchProto::InternalSwap(BatchProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&alarms_)->InternalSwap(CastToBase(&other->alarms_));
  swap(start_realtime_, other->start_realtime_);
  swap(end_realtime_, other->end_realtime_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastStatsProto::InitAsDefaultInstance() {
}
class BroadcastStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastStatsProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_flight_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wakeup_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_time_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nesting(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BroadcastStatsProto::BroadcastStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.BroadcastStatsProto)
}
BroadcastStatsProto::BroadcastStatsProto(const BroadcastStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nesting_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(nesting_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.BroadcastStatsProto)
}

void BroadcastStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nesting_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(nesting_));
}

BroadcastStatsProto::~BroadcastStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.BroadcastStatsProto)
  SharedDtor();
}

void BroadcastStatsProto::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastStatsProto& BroadcastStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void BroadcastStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.BroadcastStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nesting_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(nesting_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package_name(), ptr, ctx, "com.android.server.alarm.BroadcastStatsProto.package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_flight_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_flight_duration_ms(&has_bits);
          total_flight_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wakeup_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wakeup_count(&has_bits);
          wakeup_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_time_realtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_time_realtime(&has_bits);
          start_time_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nesting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nesting(&has_bits);
          nesting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.BroadcastStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), static_cast<int>(this->package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.BroadcastStatsProto.package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_flight_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_total_flight_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_flight_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wakeup_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_wakeup_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wakeup_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_time_realtime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_start_time_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nesting = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_nesting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nesting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.BroadcastStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.BroadcastStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.BroadcastStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.BroadcastStatsProto.package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // optional int64 total_flight_duration_ms = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->total_flight_duration_ms(), output);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 wakeup_count = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->wakeup_count(), output);
  }

  // optional int64 start_time_realtime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->start_time_realtime(), output);
  }

  // optional int32 nesting = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->nesting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.BroadcastStatsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastStatsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.BroadcastStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.BroadcastStatsProto.package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->package_name(), target);
  }

  // optional int64 total_flight_duration_ms = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->total_flight_duration_ms(), target);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int32 wakeup_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->wakeup_count(), target);
  }

  // optional int64 start_time_realtime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->start_time_realtime(), target);
  }

  // optional int32 nesting = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->nesting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.BroadcastStatsProto)
  return target;
}

size_t BroadcastStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.BroadcastStatsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string package_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 total_flight_duration_ms = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_flight_duration_ms());
    }

    // optional int64 start_time_realtime = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time_realtime());
    }

    // optional int32 wakeup_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->wakeup_count());
    }

    // optional int32 nesting = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nesting());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastStatsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.BroadcastStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastStatsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.BroadcastStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.BroadcastStatsProto)
    MergeFrom(*source);
  }
}

void BroadcastStatsProto::MergeFrom(const BroadcastStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.BroadcastStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_flight_duration_ms_ = from.total_flight_duration_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_time_realtime_ = from.start_time_realtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      wakeup_count_ = from.wakeup_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      nesting_ = from.nesting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BroadcastStatsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.BroadcastStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastStatsProto::CopyFrom(const BroadcastStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.BroadcastStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastStatsProto::IsInitialized() const {
  return true;
}

void BroadcastStatsProto::InternalSwap(BroadcastStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(count_, other->count_);
  swap(total_flight_duration_ms_, other->total_flight_duration_ms_);
  swap(start_time_realtime_, other->start_time_realtime_);
  swap(wakeup_count_, other->wakeup_count_);
  swap(nesting_, other->nesting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastStatsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstantsProto::InitAsDefaultInstance() {
}
class ConstantsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstantsProto>()._has_bits_);
  static void set_has_min_futurity_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_interval_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_listener_timeout_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_while_idle_short_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allow_while_idle_long_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_allow_while_idle_whitelist_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_interval_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ConstantsProto::ConstantsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.ConstantsProto)
}
ConstantsProto::ConstantsProto(const ConstantsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_futurity_duration_ms_, &from.min_futurity_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_interval_duration_ms_) -
    reinterpret_cast<char*>(&min_futurity_duration_ms_)) + sizeof(max_interval_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.ConstantsProto)
}

void ConstantsProto::SharedCtor() {
  ::memset(&min_futurity_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_interval_duration_ms_) -
      reinterpret_cast<char*>(&min_futurity_duration_ms_)) + sizeof(max_interval_duration_ms_));
}

ConstantsProto::~ConstantsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.ConstantsProto)
  SharedDtor();
}

void ConstantsProto::SharedDtor() {
}

void ConstantsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantsProto& ConstantsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void ConstantsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&min_futurity_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_interval_duration_ms_) -
        reinterpret_cast<char*>(&min_futurity_duration_ms_)) + sizeof(max_interval_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConstantsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 min_futurity_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_futurity_duration_ms(&has_bits);
          min_futurity_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_interval_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_interval_duration_ms(&has_bits);
          min_interval_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 listener_timeout_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_listener_timeout_duration_ms(&has_bits);
          listener_timeout_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 allow_while_idle_short_duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_allow_while_idle_short_duration_ms(&has_bits);
          allow_while_idle_short_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 allow_while_idle_long_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_allow_while_idle_long_duration_ms(&has_bits);
          allow_while_idle_long_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 allow_while_idle_whitelist_duration_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_allow_while_idle_whitelist_duration_ms(&has_bits);
          allow_while_idle_whitelist_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_interval_duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_interval_duration_ms(&has_bits);
          max_interval_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConstantsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.ConstantsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 min_futurity_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_min_futurity_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_futurity_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_interval_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_min_interval_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_interval_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 listener_timeout_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_listener_timeout_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &listener_timeout_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 allow_while_idle_short_duration_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_allow_while_idle_short_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allow_while_idle_short_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 allow_while_idle_long_duration_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_allow_while_idle_long_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allow_while_idle_long_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 allow_while_idle_whitelist_duration_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_allow_while_idle_whitelist_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allow_while_idle_whitelist_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_interval_duration_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_max_interval_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_interval_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.ConstantsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.ConstantsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConstantsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 min_futurity_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->min_futurity_duration_ms(), output);
  }

  // optional int64 min_interval_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->min_interval_duration_ms(), output);
  }

  // optional int64 listener_timeout_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->listener_timeout_duration_ms(), output);
  }

  // optional int64 allow_while_idle_short_duration_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->allow_while_idle_short_duration_ms(), output);
  }

  // optional int64 allow_while_idle_long_duration_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->allow_while_idle_long_duration_ms(), output);
  }

  // optional int64 allow_while_idle_whitelist_duration_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->allow_while_idle_whitelist_duration_ms(), output);
  }

  // optional int64 max_interval_duration_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->max_interval_duration_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.ConstantsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.ConstantsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 min_futurity_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->min_futurity_duration_ms(), target);
  }

  // optional int64 min_interval_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->min_interval_duration_ms(), target);
  }

  // optional int64 listener_timeout_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->listener_timeout_duration_ms(), target);
  }

  // optional int64 allow_while_idle_short_duration_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->allow_while_idle_short_duration_ms(), target);
  }

  // optional int64 allow_while_idle_long_duration_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->allow_while_idle_long_duration_ms(), target);
  }

  // optional int64 allow_while_idle_whitelist_duration_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->allow_while_idle_whitelist_duration_ms(), target);
  }

  // optional int64 max_interval_duration_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->max_interval_duration_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.ConstantsProto)
  return target;
}

size_t ConstantsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.ConstantsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 min_futurity_duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_futurity_duration_ms());
    }

    // optional int64 min_interval_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_interval_duration_ms());
    }

    // optional int64 listener_timeout_duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->listener_timeout_duration_ms());
    }

    // optional int64 allow_while_idle_short_duration_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->allow_while_idle_short_duration_ms());
    }

    // optional int64 allow_while_idle_long_duration_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->allow_while_idle_long_duration_ms());
    }

    // optional int64 allow_while_idle_whitelist_duration_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->allow_while_idle_whitelist_duration_ms());
    }

    // optional int64 max_interval_duration_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_interval_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.ConstantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.ConstantsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.ConstantsProto)
    MergeFrom(*source);
  }
}

void ConstantsProto::MergeFrom(const ConstantsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.ConstantsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      min_futurity_duration_ms_ = from.min_futurity_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_interval_duration_ms_ = from.min_interval_duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      listener_timeout_duration_ms_ = from.listener_timeout_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      allow_while_idle_short_duration_ms_ = from.allow_while_idle_short_duration_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      allow_while_idle_long_duration_ms_ = from.allow_while_idle_long_duration_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      allow_while_idle_whitelist_duration_ms_ = from.allow_while_idle_whitelist_duration_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_interval_duration_ms_ = from.max_interval_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConstantsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.ConstantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantsProto::CopyFrom(const ConstantsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.ConstantsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantsProto::IsInitialized() const {
  return true;
}

void ConstantsProto::InternalSwap(ConstantsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_futurity_duration_ms_, other->min_futurity_duration_ms_);
  swap(min_interval_duration_ms_, other->min_interval_duration_ms_);
  swap(listener_timeout_duration_ms_, other->listener_timeout_duration_ms_);
  swap(allow_while_idle_short_duration_ms_, other->allow_while_idle_short_duration_ms_);
  swap(allow_while_idle_long_duration_ms_, other->allow_while_idle_long_duration_ms_);
  swap(allow_while_idle_whitelist_duration_ms_, other->allow_while_idle_whitelist_duration_ms_);
  swap(max_interval_duration_ms_, other->max_interval_duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterStatsProto::InitAsDefaultInstance() {
}
class FilterStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterStatsProto>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_flight_time_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_flight_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wakeup_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_time_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_nesting(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

FilterStatsProto::FilterStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.FilterStatsProto)
}
FilterStatsProto::FilterStatsProto(const FilterStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&last_flight_time_realtime_, &from.last_flight_time_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&nesting_) -
    reinterpret_cast<char*>(&last_flight_time_realtime_)) + sizeof(nesting_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.FilterStatsProto)
}

void FilterStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_flight_time_realtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nesting_) -
      reinterpret_cast<char*>(&last_flight_time_realtime_)) + sizeof(nesting_));
}

FilterStatsProto::~FilterStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.FilterStatsProto)
  SharedDtor();
}

void FilterStatsProto::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilterStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterStatsProto& FilterStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void FilterStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.FilterStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&last_flight_time_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nesting_) -
        reinterpret_cast<char*>(&last_flight_time_realtime_)) + sizeof(nesting_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tag = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.alarm.FilterStatsProto.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_flight_time_realtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_flight_time_realtime(&has_bits);
          last_flight_time_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_flight_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_flight_duration_ms(&has_bits);
          total_flight_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wakeup_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wakeup_count(&has_bits);
          wakeup_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_time_realtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_time_realtime(&has_bits);
          start_time_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nesting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nesting(&has_bits);
          nesting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.FilterStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.FilterStatsProto.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_flight_time_realtime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_flight_time_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_flight_time_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_flight_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_total_flight_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_flight_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wakeup_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_wakeup_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wakeup_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_time_realtime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_start_time_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nesting = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_nesting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nesting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.FilterStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.FilterStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.FilterStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.FilterStatsProto.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional int64 last_flight_time_realtime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->last_flight_time_realtime(), output);
  }

  // optional int64 total_flight_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->total_flight_duration_ms(), output);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 wakeup_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->wakeup_count(), output);
  }

  // optional int64 start_time_realtime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->start_time_realtime(), output);
  }

  // optional int32 nesting = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->nesting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.FilterStatsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterStatsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.FilterStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.FilterStatsProto.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional int64 last_flight_time_realtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->last_flight_time_realtime(), target);
  }

  // optional int64 total_flight_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->total_flight_duration_ms(), target);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int32 wakeup_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->wakeup_count(), target);
  }

  // optional int64 start_time_realtime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->start_time_realtime(), target);
  }

  // optional int32 nesting = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->nesting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.FilterStatsProto)
  return target;
}

size_t FilterStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.FilterStatsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string tag = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional int64 last_flight_time_realtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_flight_time_realtime());
    }

    // optional int64 total_flight_duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_flight_duration_ms());
    }

    // optional int32 count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 wakeup_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->wakeup_count());
    }

    // optional int64 start_time_realtime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time_realtime());
    }

    // optional int32 nesting = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nesting());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterStatsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.FilterStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterStatsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.FilterStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.FilterStatsProto)
    MergeFrom(*source);
  }
}

void FilterStatsProto::MergeFrom(const FilterStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.FilterStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_flight_time_realtime_ = from.last_flight_time_realtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_flight_duration_ms_ = from.total_flight_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      wakeup_count_ = from.wakeup_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_realtime_ = from.start_time_realtime_;
    }
    if (cached_has_bits & 0x00000040u) {
      nesting_ = from.nesting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FilterStatsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.FilterStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterStatsProto::CopyFrom(const FilterStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.FilterStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterStatsProto::IsInitialized() const {
  return true;
}

void FilterStatsProto::InternalSwap(FilterStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_flight_time_realtime_, other->last_flight_time_realtime_);
  swap(total_flight_duration_ms_, other->total_flight_duration_ms_);
  swap(count_, other->count_);
  swap(wakeup_count_, other->wakeup_count_);
  swap(start_time_realtime_, other->start_time_realtime_);
  swap(nesting_, other->nesting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterStatsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IdleDispatchEntryProto::InitAsDefaultInstance() {
}
class IdleDispatchEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<IdleDispatchEntryProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entry_creation_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_arg_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

IdleDispatchEntryProto::IdleDispatchEntryProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.IdleDispatchEntryProto)
}
IdleDispatchEntryProto::IdleDispatchEntryProto(const IdleDispatchEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_pkg()) {
    pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pkg_);
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_op()) {
    op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  ::memcpy(&entry_creation_realtime_, &from.entry_creation_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&entry_creation_realtime_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.IdleDispatchEntryProto)
}

void IdleDispatchEntryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_creation_realtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&entry_creation_realtime_)) + sizeof(uid_));
}

IdleDispatchEntryProto::~IdleDispatchEntryProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.IdleDispatchEntryProto)
  SharedDtor();
}

void IdleDispatchEntryProto::SharedDtor() {
  pkg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IdleDispatchEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IdleDispatchEntryProto& IdleDispatchEntryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IdleDispatchEntryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void IdleDispatchEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.IdleDispatchEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pkg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      op_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&entry_creation_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&entry_creation_realtime_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IdleDispatchEntryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pkg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_pkg(), ptr, ctx, "com.android.server.alarm.IdleDispatchEntryProto.pkg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.alarm.IdleDispatchEntryProto.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_op(), ptr, ctx, "com.android.server.alarm.IdleDispatchEntryProto.op");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 entry_creation_realtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_entry_creation_realtime(&has_bits);
          entry_creation_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 arg_realtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_arg_realtime(&has_bits);
          arg_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IdleDispatchEntryProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.IdleDispatchEntryProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pkg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pkg()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pkg().data(), static_cast<int>(this->pkg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.IdleDispatchEntryProto.pkg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.IdleDispatchEntryProto.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string op = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->op().data(), static_cast<int>(this->op().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.IdleDispatchEntryProto.op");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 entry_creation_realtime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_entry_creation_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &entry_creation_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 arg_realtime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_arg_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &arg_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.IdleDispatchEntryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.IdleDispatchEntryProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IdleDispatchEntryProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.IdleDispatchEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string pkg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pkg().data(), static_cast<int>(this->pkg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.IdleDispatchEntryProto.pkg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pkg(), output);
  }

  // optional string tag = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.IdleDispatchEntryProto.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional string op = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), static_cast<int>(this->op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.IdleDispatchEntryProto.op");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->op(), output);
  }

  // optional int64 entry_creation_realtime = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->entry_creation_realtime(), output);
  }

  // optional int64 arg_realtime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->arg_realtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.IdleDispatchEntryProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* IdleDispatchEntryProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.IdleDispatchEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string pkg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pkg().data(), static_cast<int>(this->pkg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.IdleDispatchEntryProto.pkg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->pkg(), target);
  }

  // optional string tag = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.IdleDispatchEntryProto.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional string op = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), static_cast<int>(this->op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.IdleDispatchEntryProto.op");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->op(), target);
  }

  // optional int64 entry_creation_realtime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->entry_creation_realtime(), target);
  }

  // optional int64 arg_realtime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->arg_realtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.IdleDispatchEntryProto)
  return target;
}

size_t IdleDispatchEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.IdleDispatchEntryProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string pkg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->pkg());
    }

    // optional string tag = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string op = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->op());
    }

    // optional int64 entry_creation_realtime = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->entry_creation_realtime());
    }

    // optional int64 arg_realtime = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->arg_realtime());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdleDispatchEntryProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.IdleDispatchEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IdleDispatchEntryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdleDispatchEntryProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.IdleDispatchEntryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.IdleDispatchEntryProto)
    MergeFrom(*source);
  }
}

void IdleDispatchEntryProto::MergeFrom(const IdleDispatchEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.IdleDispatchEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pkg_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
    }
    if (cached_has_bits & 0x00000008u) {
      entry_creation_realtime_ = from.entry_creation_realtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      arg_realtime_ = from.arg_realtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IdleDispatchEntryProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.IdleDispatchEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdleDispatchEntryProto::CopyFrom(const IdleDispatchEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.IdleDispatchEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdleDispatchEntryProto::IsInitialized() const {
  return true;
}

void IdleDispatchEntryProto::InternalSwap(IdleDispatchEntryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pkg_.Swap(&other->pkg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entry_creation_realtime_, other->entry_creation_realtime_);
  swap(arg_realtime_, other->arg_realtime_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdleDispatchEntryProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InFlightProto::InitAsDefaultInstance() {
  ::com::android::server::alarm::_InFlightProto_default_instance_._instance.get_mutable()->pending_intent_ = const_cast< ::android::app::PendingIntentProto*>(
      ::android::app::PendingIntentProto::internal_default_instance());
  ::com::android::server::alarm::_InFlightProto_default_instance_._instance.get_mutable()->broadcast_stats_ = const_cast< ::com::android::server::alarm::BroadcastStatsProto*>(
      ::com::android::server::alarm::BroadcastStatsProto::internal_default_instance());
  ::com::android::server::alarm::_InFlightProto_default_instance_._instance.get_mutable()->filter_stats_ = const_cast< ::com::android::server::alarm::FilterStatsProto*>(
      ::com::android::server::alarm::FilterStatsProto::internal_default_instance());
  ::com::android::server::alarm::_InFlightProto_default_instance_._instance.get_mutable()->work_source_ = const_cast< ::android::os::WorkSourceProto*>(
      ::android::os::WorkSourceProto::internal_default_instance());
}
class InFlightProto::_Internal {
 public:
  using HasBits = decltype(std::declval<InFlightProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_when_elapsed_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_alarm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::app::PendingIntentProto& pending_intent(const InFlightProto* msg);
  static void set_has_pending_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::alarm::BroadcastStatsProto& broadcast_stats(const InFlightProto* msg);
  static void set_has_broadcast_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::alarm::FilterStatsProto& filter_stats(const InFlightProto* msg);
  static void set_has_filter_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::os::WorkSourceProto& work_source(const InFlightProto* msg);
  static void set_has_work_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::app::PendingIntentProto&
InFlightProto::_Internal::pending_intent(const InFlightProto* msg) {
  return *msg->pending_intent_;
}
const ::com::android::server::alarm::BroadcastStatsProto&
InFlightProto::_Internal::broadcast_stats(const InFlightProto* msg) {
  return *msg->broadcast_stats_;
}
const ::com::android::server::alarm::FilterStatsProto&
InFlightProto::_Internal::filter_stats(const InFlightProto* msg) {
  return *msg->filter_stats_;
}
const ::android::os::WorkSourceProto&
InFlightProto::_Internal::work_source(const InFlightProto* msg) {
  return *msg->work_source_;
}
void InFlightProto::clear_pending_intent() {
  if (pending_intent_ != nullptr) pending_intent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InFlightProto::clear_work_source() {
  if (work_source_ != nullptr) work_source_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
InFlightProto::InFlightProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.InFlightProto)
}
InFlightProto::InFlightProto(const InFlightProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.has_pending_intent()) {
    pending_intent_ = new ::android::app::PendingIntentProto(*from.pending_intent_);
  } else {
    pending_intent_ = nullptr;
  }
  if (from.has_broadcast_stats()) {
    broadcast_stats_ = new ::com::android::server::alarm::BroadcastStatsProto(*from.broadcast_stats_);
  } else {
    broadcast_stats_ = nullptr;
  }
  if (from.has_filter_stats()) {
    filter_stats_ = new ::com::android::server::alarm::FilterStatsProto(*from.filter_stats_);
  } else {
    filter_stats_ = nullptr;
  }
  if (from.has_work_source()) {
    work_source_ = new ::android::os::WorkSourceProto(*from.work_source_);
  } else {
    work_source_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&when_elapsed_ms_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(when_elapsed_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.InFlightProto)
}

void InFlightProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&when_elapsed_ms_) -
      reinterpret_cast<char*>(&pending_intent_)) + sizeof(when_elapsed_ms_));
}

InFlightProto::~InFlightProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.InFlightProto)
  SharedDtor();
}

void InFlightProto::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pending_intent_;
  if (this != internal_default_instance()) delete broadcast_stats_;
  if (this != internal_default_instance()) delete filter_stats_;
  if (this != internal_default_instance()) delete work_source_;
}

void InFlightProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InFlightProto& InFlightProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InFlightProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void InFlightProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.InFlightProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pending_intent_ != nullptr);
      pending_intent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(broadcast_stats_ != nullptr);
      broadcast_stats_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(filter_stats_ != nullptr);
      filter_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(work_source_ != nullptr);
      work_source_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&when_elapsed_ms_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(when_elapsed_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InFlightProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tag(), ptr, ctx, "com.android.server.alarm.InFlightProto.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 when_elapsed_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_when_elapsed_ms(&has_bits);
          when_elapsed_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.AlarmManagerProto.AlarmType alarm_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::AlarmManagerProto_AlarmType_IsValid(val))) {
            set_alarm_type(static_cast<::android::app::AlarmManagerProto_AlarmType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.app.PendingIntentProto pending_intent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_pending_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.alarm.BroadcastStatsProto broadcast_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_broadcast_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.alarm.FilterStatsProto filter_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_filter_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.WorkSourceProto work_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_work_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InFlightProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.InFlightProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.InFlightProto.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 when_elapsed_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_when_elapsed_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &when_elapsed_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.AlarmManagerProto.AlarmType alarm_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::AlarmManagerProto_AlarmType_IsValid(value)) {
            set_alarm_type(static_cast< ::android::app::AlarmManagerProto_AlarmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.PendingIntentProto pending_intent = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.alarm.BroadcastStatsProto broadcast_stats = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_broadcast_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.alarm.FilterStatsProto filter_stats = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.WorkSourceProto work_source = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_work_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.InFlightProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.InFlightProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InFlightProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.InFlightProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string tag = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.InFlightProto.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional int64 when_elapsed_ms = 3;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->when_elapsed_ms(), output);
  }

  // optional .android.app.AlarmManagerProto.AlarmType alarm_type = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->alarm_type(), output);
  }

  // optional .android.app.PendingIntentProto pending_intent = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::pending_intent(this), output);
  }

  // optional .com.android.server.alarm.BroadcastStatsProto broadcast_stats = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::broadcast_stats(this), output);
  }

  // optional .com.android.server.alarm.FilterStatsProto filter_stats = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::filter_stats(this), output);
  }

  // optional .android.os.WorkSourceProto work_source = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::work_source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.InFlightProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* InFlightProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.InFlightProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string tag = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.InFlightProto.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional int64 when_elapsed_ms = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->when_elapsed_ms(), target);
  }

  // optional .android.app.AlarmManagerProto.AlarmType alarm_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->alarm_type(), target);
  }

  // optional .android.app.PendingIntentProto pending_intent = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::pending_intent(this), target);
  }

  // optional .com.android.server.alarm.BroadcastStatsProto broadcast_stats = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::broadcast_stats(this), target);
  }

  // optional .com.android.server.alarm.FilterStatsProto filter_stats = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::filter_stats(this), target);
  }

  // optional .android.os.WorkSourceProto work_source = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::work_source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.InFlightProto)
  return target;
}

size_t InFlightProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.InFlightProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional .android.app.PendingIntentProto pending_intent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_intent_);
    }

    // optional .com.android.server.alarm.BroadcastStatsProto broadcast_stats = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_stats_);
    }

    // optional .com.android.server.alarm.FilterStatsProto filter_stats = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_stats_);
    }

    // optional .android.os.WorkSourceProto work_source = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_source_);
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional .android.app.AlarmManagerProto.AlarmType alarm_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->alarm_type());
    }

    // optional int64 when_elapsed_ms = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->when_elapsed_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InFlightProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.InFlightProto)
  GOOGLE_DCHECK_NE(&from, this);
  const InFlightProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InFlightProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.InFlightProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.InFlightProto)
    MergeFrom(*source);
  }
}

void InFlightProto::MergeFrom(const InFlightProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.InFlightProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pending_intent()->::android::app::PendingIntentProto::MergeFrom(from.pending_intent());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_broadcast_stats()->::com::android::server::alarm::BroadcastStatsProto::MergeFrom(from.broadcast_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_filter_stats()->::com::android::server::alarm::FilterStatsProto::MergeFrom(from.filter_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_work_source()->::android::os::WorkSourceProto::MergeFrom(from.work_source());
    }
    if (cached_has_bits & 0x00000020u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000040u) {
      alarm_type_ = from.alarm_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      when_elapsed_ms_ = from.when_elapsed_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InFlightProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.InFlightProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InFlightProto::CopyFrom(const InFlightProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.InFlightProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InFlightProto::IsInitialized() const {
  return true;
}

void InFlightProto::InternalSwap(InFlightProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pending_intent_, other->pending_intent_);
  swap(broadcast_stats_, other->broadcast_stats_);
  swap(filter_stats_, other->filter_stats_);
  swap(work_source_, other->work_source_);
  swap(uid_, other->uid_);
  swap(alarm_type_, other->alarm_type_);
  swap(when_elapsed_ms_, other->when_elapsed_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InFlightProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WakeupEventProto::InitAsDefaultInstance() {
}
class WakeupEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WakeupEventProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_when(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WakeupEventProto::WakeupEventProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.alarm.WakeupEventProto)
}
WakeupEventProto::WakeupEventProto(const WakeupEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  ::memcpy(&when_, &from.when_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&when_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.alarm.WakeupEventProto)
}

void WakeupEventProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&when_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&when_)) + sizeof(uid_));
}

WakeupEventProto::~WakeupEventProto() {
  // @@protoc_insertion_point(destructor:com.android.server.alarm.WakeupEventProto)
  SharedDtor();
}

void WakeupEventProto::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WakeupEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WakeupEventProto& WakeupEventProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WakeupEventProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2falarm_2falarmmanagerservice_2eproto.base);
  return *internal_default_instance();
}


void WakeupEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.alarm.WakeupEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&when_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&when_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WakeupEventProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_action(), ptr, ctx, "com.android.server.alarm.WakeupEventProto.action");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 when = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_when(&has_bits);
          when_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WakeupEventProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.alarm.WakeupEventProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string action = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), static_cast<int>(this->action().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.alarm.WakeupEventProto.action");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 when = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_when(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &when_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.alarm.WakeupEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.alarm.WakeupEventProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WakeupEventProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.alarm.WakeupEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string action = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.WakeupEventProto.action");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->action(), output);
  }

  // optional int64 when = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->when(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.alarm.WakeupEventProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* WakeupEventProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.alarm.WakeupEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string action = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.alarm.WakeupEventProto.action");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->action(), target);
  }

  // optional int64 when = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->when(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.alarm.WakeupEventProto)
  return target;
}

size_t WakeupEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.alarm.WakeupEventProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string action = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional int64 when = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->when());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WakeupEventProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.alarm.WakeupEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WakeupEventProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WakeupEventProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.alarm.WakeupEventProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.alarm.WakeupEventProto)
    MergeFrom(*source);
  }
}

void WakeupEventProto::MergeFrom(const WakeupEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.alarm.WakeupEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (cached_has_bits & 0x00000002u) {
      when_ = from.when_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WakeupEventProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.alarm.WakeupEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeupEventProto::CopyFrom(const WakeupEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.alarm.WakeupEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeupEventProto::IsInitialized() const {
  return true;
}

void WakeupEventProto::InternalSwap(WakeupEventProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(when_, other->when_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WakeupEventProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace alarm
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch* Arena::CreateMaybeMessage< ::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::AlarmManagerServiceDumpProto_LastAllowWhileIdleDispatch >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm* Arena::CreateMaybeMessage< ::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::AlarmManagerServiceDumpProto_TopAlarm >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat* Arena::CreateMaybeMessage< ::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::AlarmManagerServiceDumpProto_AlarmStat >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::AlarmManagerServiceDumpProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::AlarmManagerServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::AlarmManagerServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::AlarmClockMetadataProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::AlarmClockMetadataProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::AlarmClockMetadataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::AlarmProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::AlarmProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::AlarmProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::BatchProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::BatchProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::BatchProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::BroadcastStatsProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::BroadcastStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::BroadcastStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::ConstantsProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::ConstantsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::ConstantsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::FilterStatsProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::FilterStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::FilterStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::IdleDispatchEntryProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::IdleDispatchEntryProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::IdleDispatchEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::InFlightProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::InFlightProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::InFlightProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::alarm::WakeupEventProto* Arena::CreateMaybeMessage< ::com::android::server::alarm::WakeupEventProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::alarm::WakeupEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
