// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/notification_channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/media/audioattributes.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto;
namespace android {
namespace app {
class NotificationChannelProto;
class NotificationChannelProtoDefaultTypeInternal;
extern NotificationChannelProtoDefaultTypeInternal _NotificationChannelProto_default_instance_;
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::app::NotificationChannelProto* Arena::CreateMaybeMessage<::android::app::NotificationChannelProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace app {

// ===================================================================

class NotificationChannelProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.app.NotificationChannelProto) */ {
 public:
  NotificationChannelProto();
  virtual ~NotificationChannelProto();

  NotificationChannelProto(const NotificationChannelProto& from);
  NotificationChannelProto(NotificationChannelProto&& from) noexcept
    : NotificationChannelProto() {
    *this = ::std::move(from);
  }

  inline NotificationChannelProto& operator=(const NotificationChannelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationChannelProto& operator=(NotificationChannelProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationChannelProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationChannelProto* internal_default_instance() {
    return reinterpret_cast<const NotificationChannelProto*>(
               &_NotificationChannelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationChannelProto& a, NotificationChannelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationChannelProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationChannelProto* New() const final {
    return CreateMaybeMessage<NotificationChannelProto>(nullptr);
  }

  NotificationChannelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationChannelProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationChannelProto& from);
  void MergeFrom(const NotificationChannelProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationChannelProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.app.NotificationChannelProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVibrationFieldNumber = 10,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kSoundFieldNumber = 7,
    kGroupFieldNumber = 15,
    kAudioAttributesFieldNumber = 16,
    kImportanceFieldNumber = 4,
    kLockscreenVisibilityFieldNumber = 6,
    kLightColorFieldNumber = 9,
    kCanBypassDndFieldNumber = 5,
    kUseLightsFieldNumber = 8,
    kIsVibrationEnabledFieldNumber = 12,
    kShowBadgeFieldNumber = 13,
    kUserLockedFieldsFieldNumber = 11,
    kIsDeletedFieldNumber = 14,
    kIsBlockableSystemFieldNumber = 17,
    kFgServiceShownFieldNumber = 18,
    kAllowAppOverlayFieldNumber = 19,
  };
  // repeated int64 vibration = 10;
  int vibration_size() const;
  void clear_vibration();
  ::PROTOBUF_NAMESPACE_ID::int64 vibration(int index) const;
  void set_vibration(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_vibration(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      vibration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_vibration();

  // optional string id = 1 [(.android.privacy) = {
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string name = 2 [(.android.privacy) = {
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 3 [(.android.privacy) = {
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string sound = 7 [(.android.privacy) = {
  bool has_sound() const;
  void clear_sound();
  const std::string& sound() const;
  void set_sound(const std::string& value);
  void set_sound(std::string&& value);
  void set_sound(const char* value);
  void set_sound(const char* value, size_t size);
  std::string* mutable_sound();
  std::string* release_sound();
  void set_allocated_sound(std::string* sound);

  // optional string group = 15 [(.android.privacy) = {
  bool has_group() const;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);

  // optional .android.media.AudioAttributesProto audio_attributes = 16;
  bool has_audio_attributes() const;
  void clear_audio_attributes();
  const ::android::media::AudioAttributesProto& audio_attributes() const;
  ::android::media::AudioAttributesProto* release_audio_attributes();
  ::android::media::AudioAttributesProto* mutable_audio_attributes();
  void set_allocated_audio_attributes(::android::media::AudioAttributesProto* audio_attributes);

  // optional int32 importance = 4;
  bool has_importance() const;
  void clear_importance();
  ::PROTOBUF_NAMESPACE_ID::int32 importance() const;
  void set_importance(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 lockscreen_visibility = 6;
  bool has_lockscreen_visibility() const;
  void clear_lockscreen_visibility();
  ::PROTOBUF_NAMESPACE_ID::int32 lockscreen_visibility() const;
  void set_lockscreen_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 light_color = 9;
  bool has_light_color() const;
  void clear_light_color();
  ::PROTOBUF_NAMESPACE_ID::int32 light_color() const;
  void set_light_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool can_bypass_dnd = 5;
  bool has_can_bypass_dnd() const;
  void clear_can_bypass_dnd();
  bool can_bypass_dnd() const;
  void set_can_bypass_dnd(bool value);

  // optional bool use_lights = 8;
  bool has_use_lights() const;
  void clear_use_lights();
  bool use_lights() const;
  void set_use_lights(bool value);

  // optional bool is_vibration_enabled = 12;
  bool has_is_vibration_enabled() const;
  void clear_is_vibration_enabled();
  bool is_vibration_enabled() const;
  void set_is_vibration_enabled(bool value);

  // optional bool show_badge = 13;
  bool has_show_badge() const;
  void clear_show_badge();
  bool show_badge() const;
  void set_show_badge(bool value);

  // optional int32 user_locked_fields = 11;
  bool has_user_locked_fields() const;
  void clear_user_locked_fields();
  ::PROTOBUF_NAMESPACE_ID::int32 user_locked_fields() const;
  void set_user_locked_fields(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_deleted = 14;
  bool has_is_deleted() const;
  void clear_is_deleted();
  bool is_deleted() const;
  void set_is_deleted(bool value);

  // optional bool is_blockable_system = 17;
  bool has_is_blockable_system() const;
  void clear_is_blockable_system();
  bool is_blockable_system() const;
  void set_is_blockable_system(bool value);

  // optional bool fg_service_shown = 18;
  bool has_fg_service_shown() const;
  void clear_fg_service_shown();
  bool fg_service_shown() const;
  void set_fg_service_shown(bool value);

  // optional bool allow_app_overlay = 19;
  bool has_allow_app_overlay() const;
  void clear_allow_app_overlay();
  bool allow_app_overlay() const;
  void set_allow_app_overlay(bool value);

  // @@protoc_insertion_point(class_scope:android.app.NotificationChannelProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > vibration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sound_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::android::media::AudioAttributesProto* audio_attributes_;
  ::PROTOBUF_NAMESPACE_ID::int32 importance_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockscreen_visibility_;
  ::PROTOBUF_NAMESPACE_ID::int32 light_color_;
  bool can_bypass_dnd_;
  bool use_lights_;
  bool is_vibration_enabled_;
  bool show_badge_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_locked_fields_;
  bool is_deleted_;
  bool is_blockable_system_;
  bool fg_service_shown_;
  bool allow_app_overlay_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationChannelProto

// optional string id = 1 [(.android.privacy) = {
inline bool NotificationChannelProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationChannelProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationChannelProto::id() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.id)
  return id_.GetNoArena();
}
inline void NotificationChannelProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.id)
}
inline void NotificationChannelProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.app.NotificationChannelProto.id)
}
inline void NotificationChannelProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.app.NotificationChannelProto.id)
}
inline void NotificationChannelProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.app.NotificationChannelProto.id)
}
inline std::string* NotificationChannelProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.app.NotificationChannelProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationChannelProto::release_id() {
  // @@protoc_insertion_point(field_release:android.app.NotificationChannelProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:android.app.NotificationChannelProto.id)
}

// optional string name = 2 [(.android.privacy) = {
inline bool NotificationChannelProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationChannelProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationChannelProto::name() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.name)
  return name_.GetNoArena();
}
inline void NotificationChannelProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.name)
}
inline void NotificationChannelProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.app.NotificationChannelProto.name)
}
inline void NotificationChannelProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.app.NotificationChannelProto.name)
}
inline void NotificationChannelProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.app.NotificationChannelProto.name)
}
inline std::string* NotificationChannelProto::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.app.NotificationChannelProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationChannelProto::release_name() {
  // @@protoc_insertion_point(field_release:android.app.NotificationChannelProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.app.NotificationChannelProto.name)
}

// optional string description = 3 [(.android.privacy) = {
inline bool NotificationChannelProto::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationChannelProto::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotificationChannelProto::description() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.description)
  return description_.GetNoArena();
}
inline void NotificationChannelProto::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.description)
}
inline void NotificationChannelProto::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.app.NotificationChannelProto.description)
}
inline void NotificationChannelProto::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.app.NotificationChannelProto.description)
}
inline void NotificationChannelProto::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.app.NotificationChannelProto.description)
}
inline std::string* NotificationChannelProto::mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.app.NotificationChannelProto.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationChannelProto::release_description() {
  // @@protoc_insertion_point(field_release:android.app.NotificationChannelProto.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelProto::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:android.app.NotificationChannelProto.description)
}

// optional int32 importance = 4;
inline bool NotificationChannelProto::has_importance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotificationChannelProto::clear_importance() {
  importance_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationChannelProto::importance() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.importance)
  return importance_;
}
inline void NotificationChannelProto::set_importance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  importance_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.importance)
}

// optional bool can_bypass_dnd = 5;
inline bool NotificationChannelProto::has_can_bypass_dnd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotificationChannelProto::clear_can_bypass_dnd() {
  can_bypass_dnd_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool NotificationChannelProto::can_bypass_dnd() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.can_bypass_dnd)
  return can_bypass_dnd_;
}
inline void NotificationChannelProto::set_can_bypass_dnd(bool value) {
  _has_bits_[0] |= 0x00000200u;
  can_bypass_dnd_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.can_bypass_dnd)
}

// optional int32 lockscreen_visibility = 6;
inline bool NotificationChannelProto::has_lockscreen_visibility() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotificationChannelProto::clear_lockscreen_visibility() {
  lockscreen_visibility_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationChannelProto::lockscreen_visibility() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.lockscreen_visibility)
  return lockscreen_visibility_;
}
inline void NotificationChannelProto::set_lockscreen_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lockscreen_visibility_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.lockscreen_visibility)
}

// optional string sound = 7 [(.android.privacy) = {
inline bool NotificationChannelProto::has_sound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationChannelProto::clear_sound() {
  sound_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NotificationChannelProto::sound() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.sound)
  return sound_.GetNoArena();
}
inline void NotificationChannelProto::set_sound(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.sound)
}
inline void NotificationChannelProto::set_sound(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sound_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.app.NotificationChannelProto.sound)
}
inline void NotificationChannelProto::set_sound(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.app.NotificationChannelProto.sound)
}
inline void NotificationChannelProto::set_sound(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.app.NotificationChannelProto.sound)
}
inline std::string* NotificationChannelProto::mutable_sound() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.app.NotificationChannelProto.sound)
  return sound_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationChannelProto::release_sound() {
  // @@protoc_insertion_point(field_release:android.app.NotificationChannelProto.sound)
  if (!has_sound()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sound_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelProto::set_allocated_sound(std::string* sound) {
  if (sound != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sound_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sound);
  // @@protoc_insertion_point(field_set_allocated:android.app.NotificationChannelProto.sound)
}

// optional bool use_lights = 8;
inline bool NotificationChannelProto::has_use_lights() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotificationChannelProto::clear_use_lights() {
  use_lights_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool NotificationChannelProto::use_lights() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.use_lights)
  return use_lights_;
}
inline void NotificationChannelProto::set_use_lights(bool value) {
  _has_bits_[0] |= 0x00000400u;
  use_lights_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.use_lights)
}

// optional int32 light_color = 9;
inline bool NotificationChannelProto::has_light_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotificationChannelProto::clear_light_color() {
  light_color_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationChannelProto::light_color() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.light_color)
  return light_color_;
}
inline void NotificationChannelProto::set_light_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  light_color_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.light_color)
}

// repeated int64 vibration = 10;
inline int NotificationChannelProto::vibration_size() const {
  return vibration_.size();
}
inline void NotificationChannelProto::clear_vibration() {
  vibration_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationChannelProto::vibration(int index) const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.vibration)
  return vibration_.Get(index);
}
inline void NotificationChannelProto::set_vibration(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  vibration_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.vibration)
}
inline void NotificationChannelProto::add_vibration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  vibration_.Add(value);
  // @@protoc_insertion_point(field_add:android.app.NotificationChannelProto.vibration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
NotificationChannelProto::vibration() const {
  // @@protoc_insertion_point(field_list:android.app.NotificationChannelProto.vibration)
  return vibration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
NotificationChannelProto::mutable_vibration() {
  // @@protoc_insertion_point(field_mutable_list:android.app.NotificationChannelProto.vibration)
  return &vibration_;
}

// optional int32 user_locked_fields = 11;
inline bool NotificationChannelProto::has_user_locked_fields() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NotificationChannelProto::clear_user_locked_fields() {
  user_locked_fields_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationChannelProto::user_locked_fields() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.user_locked_fields)
  return user_locked_fields_;
}
inline void NotificationChannelProto::set_user_locked_fields(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  user_locked_fields_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.user_locked_fields)
}

// optional bool is_vibration_enabled = 12;
inline bool NotificationChannelProto::has_is_vibration_enabled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NotificationChannelProto::clear_is_vibration_enabled() {
  is_vibration_enabled_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool NotificationChannelProto::is_vibration_enabled() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.is_vibration_enabled)
  return is_vibration_enabled_;
}
inline void NotificationChannelProto::set_is_vibration_enabled(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_vibration_enabled_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.is_vibration_enabled)
}

// optional bool show_badge = 13;
inline bool NotificationChannelProto::has_show_badge() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NotificationChannelProto::clear_show_badge() {
  show_badge_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool NotificationChannelProto::show_badge() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.show_badge)
  return show_badge_;
}
inline void NotificationChannelProto::set_show_badge(bool value) {
  _has_bits_[0] |= 0x00001000u;
  show_badge_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.show_badge)
}

// optional bool is_deleted = 14;
inline bool NotificationChannelProto::has_is_deleted() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NotificationChannelProto::clear_is_deleted() {
  is_deleted_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool NotificationChannelProto::is_deleted() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.is_deleted)
  return is_deleted_;
}
inline void NotificationChannelProto::set_is_deleted(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_deleted_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.is_deleted)
}

// optional string group = 15 [(.android.privacy) = {
inline bool NotificationChannelProto::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationChannelProto::clear_group() {
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NotificationChannelProto::group() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.group)
  return group_.GetNoArena();
}
inline void NotificationChannelProto::set_group(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.group)
}
inline void NotificationChannelProto::set_group(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.app.NotificationChannelProto.group)
}
inline void NotificationChannelProto::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.app.NotificationChannelProto.group)
}
inline void NotificationChannelProto::set_group(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.app.NotificationChannelProto.group)
}
inline std::string* NotificationChannelProto::mutable_group() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.app.NotificationChannelProto.group)
  return group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationChannelProto::release_group() {
  // @@protoc_insertion_point(field_release:android.app.NotificationChannelProto.group)
  if (!has_group()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return group_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelProto::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:android.app.NotificationChannelProto.group)
}

// optional .android.media.AudioAttributesProto audio_attributes = 16;
inline bool NotificationChannelProto::has_audio_attributes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::media::AudioAttributesProto& NotificationChannelProto::audio_attributes() const {
  const ::android::media::AudioAttributesProto* p = audio_attributes_;
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.audio_attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::media::AudioAttributesProto*>(
      &::android::media::_AudioAttributesProto_default_instance_);
}
inline ::android::media::AudioAttributesProto* NotificationChannelProto::release_audio_attributes() {
  // @@protoc_insertion_point(field_release:android.app.NotificationChannelProto.audio_attributes)
  _has_bits_[0] &= ~0x00000020u;
  ::android::media::AudioAttributesProto* temp = audio_attributes_;
  audio_attributes_ = nullptr;
  return temp;
}
inline ::android::media::AudioAttributesProto* NotificationChannelProto::mutable_audio_attributes() {
  _has_bits_[0] |= 0x00000020u;
  if (audio_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::media::AudioAttributesProto>(GetArenaNoVirtual());
    audio_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.app.NotificationChannelProto.audio_attributes)
  return audio_attributes_;
}
inline void NotificationChannelProto::set_allocated_audio_attributes(::android::media::AudioAttributesProto* audio_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_attributes_);
  }
  if (audio_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  audio_attributes_ = audio_attributes;
  // @@protoc_insertion_point(field_set_allocated:android.app.NotificationChannelProto.audio_attributes)
}

// optional bool is_blockable_system = 17;
inline bool NotificationChannelProto::has_is_blockable_system() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NotificationChannelProto::clear_is_blockable_system() {
  is_blockable_system_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool NotificationChannelProto::is_blockable_system() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.is_blockable_system)
  return is_blockable_system_;
}
inline void NotificationChannelProto::set_is_blockable_system(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_blockable_system_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.is_blockable_system)
}

// optional bool fg_service_shown = 18;
inline bool NotificationChannelProto::has_fg_service_shown() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NotificationChannelProto::clear_fg_service_shown() {
  fg_service_shown_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool NotificationChannelProto::fg_service_shown() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.fg_service_shown)
  return fg_service_shown_;
}
inline void NotificationChannelProto::set_fg_service_shown(bool value) {
  _has_bits_[0] |= 0x00010000u;
  fg_service_shown_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.fg_service_shown)
}

// optional bool allow_app_overlay = 19;
inline bool NotificationChannelProto::has_allow_app_overlay() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NotificationChannelProto::clear_allow_app_overlay() {
  allow_app_overlay_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool NotificationChannelProto::allow_app_overlay() const {
  // @@protoc_insertion_point(field_get:android.app.NotificationChannelProto.allow_app_overlay)
  return allow_app_overlay_;
}
inline void NotificationChannelProto::set_allow_app_overlay(bool value) {
  _has_bits_[0] |= 0x00020000u;
  allow_app_overlay_ = value;
  // @@protoc_insertion_point(field_set:android.app.NotificationChannelProto.allow_app_overlay)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotification_5fchannel_2eproto
