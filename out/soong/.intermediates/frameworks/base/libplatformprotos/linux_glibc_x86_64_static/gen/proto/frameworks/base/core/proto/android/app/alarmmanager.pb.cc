// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/alarmmanager.proto

#include "frameworks/base/core/proto/android/app/alarmmanager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingIntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto;
namespace android {
namespace app {
class AlarmManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmManagerProto> _instance;
} _AlarmManagerProto_default_instance_;
class AlarmClockInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmClockInfoProto> _instance;
} _AlarmClockInfoProto_default_instance_;
}  // namespace app
}  // namespace android
static void InitDefaultsscc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::app::_AlarmClockInfoProto_default_instance_;
    new (ptr) ::android::app::AlarmClockInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::app::AlarmClockInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto}, {
      &scc_info_PendingIntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto.base,}};

static void InitDefaultsscc_info_AlarmManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::app::_AlarmManagerProto_default_instance_;
    new (ptr) ::android::app::AlarmManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::app::AlarmManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlarmManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::app::AlarmManagerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::app::AlarmManagerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::app::AlarmClockInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::app::AlarmClockInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::app::AlarmClockInfoProto, trigger_time_ms_),
  PROTOBUF_FIELD_OFFSET(::android::app::AlarmClockInfoProto, show_intent_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::android::app::AlarmManagerProto)},
  { 5, 12, sizeof(::android::app::AlarmClockInfoProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::app::_AlarmManagerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::app::_AlarmClockInfoProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9frameworks/base/core/proto/android/app"
  "/alarmmanager.proto\022\013android.app\032:framew"
  "orks/base/core/proto/android/app/pending"
  "intent.proto\0320frameworks/base/core/proto"
  "/android/privacy.proto\"l\n\021AlarmManagerPr"
  "oto\"W\n\tAlarmType\022\016\n\nRTC_WAKEUP\020\000\022\007\n\003RTC\020"
  "\001\022\033\n\027ELAPSED_REALTIME_WAKEUP\020\002\022\024\n\020ELAPSE"
  "D_REALTIME\020\003\"o\n\023AlarmClockInfoProto\022\027\n\017t"
  "rigger_time_ms\030\001 \001(\003\0224\n\013show_intent\030\002 \001("
  "\0132\037.android.app.PendingIntentProto:\t\232\237\325\207"
  "\003\003\010\310\001B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_deps[2] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fpendingintent_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_sccs[2] = {
  &scc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto.base,
  &scc_info_AlarmManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto, "frameworks/base/core/proto/android/app/alarmmanager.proto", 409,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto, 2, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto), true);
namespace android {
namespace app {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmManagerProto_AlarmType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto[0];
}
bool AlarmManagerProto_AlarmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AlarmManagerProto_AlarmType AlarmManagerProto::RTC_WAKEUP;
constexpr AlarmManagerProto_AlarmType AlarmManagerProto::RTC;
constexpr AlarmManagerProto_AlarmType AlarmManagerProto::ELAPSED_REALTIME_WAKEUP;
constexpr AlarmManagerProto_AlarmType AlarmManagerProto::ELAPSED_REALTIME;
constexpr AlarmManagerProto_AlarmType AlarmManagerProto::AlarmType_MIN;
constexpr AlarmManagerProto_AlarmType AlarmManagerProto::AlarmType_MAX;
constexpr int AlarmManagerProto::AlarmType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AlarmManagerProto::InitAsDefaultInstance() {
}
class AlarmManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmManagerProto>()._has_bits_);
};

AlarmManagerProto::AlarmManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.app.AlarmManagerProto)
}
AlarmManagerProto::AlarmManagerProto(const AlarmManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.app.AlarmManagerProto)
}

void AlarmManagerProto::SharedCtor() {
}

AlarmManagerProto::~AlarmManagerProto() {
  // @@protoc_insertion_point(destructor:android.app.AlarmManagerProto)
  SharedDtor();
}

void AlarmManagerProto::SharedDtor() {
}

void AlarmManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmManagerProto& AlarmManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto.base);
  return *internal_default_instance();
}


void AlarmManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.app.AlarmManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.app.AlarmManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:android.app.AlarmManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.app.AlarmManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.app.AlarmManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.app.AlarmManagerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmManagerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.app.AlarmManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.app.AlarmManagerProto)
  return target;
}

size_t AlarmManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.app.AlarmManagerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmManagerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.app.AlarmManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmManagerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmManagerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.app.AlarmManagerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.app.AlarmManagerProto)
    MergeFrom(*source);
  }
}

void AlarmManagerProto::MergeFrom(const AlarmManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.app.AlarmManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AlarmManagerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.app.AlarmManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmManagerProto::CopyFrom(const AlarmManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.app.AlarmManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmManagerProto::IsInitialized() const {
  return true;
}

void AlarmManagerProto::InternalSwap(AlarmManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmManagerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmClockInfoProto::InitAsDefaultInstance() {
  ::android::app::_AlarmClockInfoProto_default_instance_._instance.get_mutable()->show_intent_ = const_cast< ::android::app::PendingIntentProto*>(
      ::android::app::PendingIntentProto::internal_default_instance());
}
class AlarmClockInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmClockInfoProto>()._has_bits_);
  static void set_has_trigger_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::app::PendingIntentProto& show_intent(const AlarmClockInfoProto* msg);
  static void set_has_show_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::app::PendingIntentProto&
AlarmClockInfoProto::_Internal::show_intent(const AlarmClockInfoProto* msg) {
  return *msg->show_intent_;
}
void AlarmClockInfoProto::clear_show_intent() {
  if (show_intent_ != nullptr) show_intent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AlarmClockInfoProto::AlarmClockInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.app.AlarmClockInfoProto)
}
AlarmClockInfoProto::AlarmClockInfoProto(const AlarmClockInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_show_intent()) {
    show_intent_ = new ::android::app::PendingIntentProto(*from.show_intent_);
  } else {
    show_intent_ = nullptr;
  }
  trigger_time_ms_ = from.trigger_time_ms_;
  // @@protoc_insertion_point(copy_constructor:android.app.AlarmClockInfoProto)
}

void AlarmClockInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto.base);
  ::memset(&show_intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_time_ms_) -
      reinterpret_cast<char*>(&show_intent_)) + sizeof(trigger_time_ms_));
}

AlarmClockInfoProto::~AlarmClockInfoProto() {
  // @@protoc_insertion_point(destructor:android.app.AlarmClockInfoProto)
  SharedDtor();
}

void AlarmClockInfoProto::SharedDtor() {
  if (this != internal_default_instance()) delete show_intent_;
}

void AlarmClockInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmClockInfoProto& AlarmClockInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmClockInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto.base);
  return *internal_default_instance();
}


void AlarmClockInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.app.AlarmClockInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(show_intent_ != nullptr);
    show_intent_->Clear();
  }
  trigger_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlarmClockInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 trigger_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trigger_time_ms(&has_bits);
          trigger_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.PendingIntentProto show_intent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_show_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlarmClockInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.app.AlarmClockInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 trigger_time_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_trigger_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.PendingIntentProto show_intent = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.app.AlarmClockInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.app.AlarmClockInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlarmClockInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.app.AlarmClockInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 trigger_time_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->trigger_time_ms(), output);
  }

  // optional .android.app.PendingIntentProto show_intent = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::show_intent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.app.AlarmClockInfoProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmClockInfoProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.app.AlarmClockInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 trigger_time_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->trigger_time_ms(), target);
  }

  // optional .android.app.PendingIntentProto show_intent = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::show_intent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.app.AlarmClockInfoProto)
  return target;
}

size_t AlarmClockInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.app.AlarmClockInfoProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.app.PendingIntentProto show_intent = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_intent_);
    }

    // optional int64 trigger_time_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_time_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmClockInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.app.AlarmClockInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmClockInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmClockInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.app.AlarmClockInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.app.AlarmClockInfoProto)
    MergeFrom(*source);
  }
}

void AlarmClockInfoProto::MergeFrom(const AlarmClockInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.app.AlarmClockInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_show_intent()->::android::app::PendingIntentProto::MergeFrom(from.show_intent());
    }
    if (cached_has_bits & 0x00000002u) {
      trigger_time_ms_ = from.trigger_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmClockInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.app.AlarmClockInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmClockInfoProto::CopyFrom(const AlarmClockInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.app.AlarmClockInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmClockInfoProto::IsInitialized() const {
  return true;
}

void AlarmClockInfoProto::InternalSwap(AlarmClockInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_intent_, other->show_intent_);
  swap(trigger_time_ms_, other->trigger_time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmClockInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::app::AlarmManagerProto* Arena::CreateMaybeMessage< ::android::app::AlarmManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::app::AlarmManagerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::app::AlarmClockInfoProto* Arena::CreateMaybeMessage< ::android::app::AlarmClockInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::app::AlarmClockInfoProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
