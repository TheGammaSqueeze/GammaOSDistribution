// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/view/remote_animation_target.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/app/window_configuration.pb.h"
#include "frameworks/base/core/proto/android/graphics/point.pb.h"
#include "frameworks/base/core/proto/android/graphics/rect.pb.h"
#include "frameworks/base/core/proto/android/view/surfacecontrol.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto;
namespace android {
namespace view {
class RemoteAnimationTargetProto;
class RemoteAnimationTargetProtoDefaultTypeInternal;
extern RemoteAnimationTargetProtoDefaultTypeInternal _RemoteAnimationTargetProto_default_instance_;
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::view::RemoteAnimationTargetProto* Arena::CreateMaybeMessage<::android::view::RemoteAnimationTargetProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace view {

// ===================================================================

class RemoteAnimationTargetProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.view.RemoteAnimationTargetProto) */ {
 public:
  RemoteAnimationTargetProto();
  virtual ~RemoteAnimationTargetProto();

  RemoteAnimationTargetProto(const RemoteAnimationTargetProto& from);
  RemoteAnimationTargetProto(RemoteAnimationTargetProto&& from) noexcept
    : RemoteAnimationTargetProto() {
    *this = ::std::move(from);
  }

  inline RemoteAnimationTargetProto& operator=(const RemoteAnimationTargetProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteAnimationTargetProto& operator=(RemoteAnimationTargetProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteAnimationTargetProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteAnimationTargetProto* internal_default_instance() {
    return reinterpret_cast<const RemoteAnimationTargetProto*>(
               &_RemoteAnimationTargetProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RemoteAnimationTargetProto& a, RemoteAnimationTargetProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteAnimationTargetProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteAnimationTargetProto* New() const final {
    return CreateMaybeMessage<RemoteAnimationTargetProto>(nullptr);
  }

  RemoteAnimationTargetProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteAnimationTargetProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteAnimationTargetProto& from);
  void MergeFrom(const RemoteAnimationTargetProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteAnimationTargetProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.view.RemoteAnimationTargetProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeashFieldNumber = 3,
    kClipRectFieldNumber = 5,
    kContentInsetsFieldNumber = 6,
    kPositionFieldNumber = 8,
    kSourceContainerBoundsFieldNumber = 9,
    kWindowConfigurationFieldNumber = 10,
    kStartLeashFieldNumber = 11,
    kStartBoundsFieldNumber = 12,
    kLocalBoundsFieldNumber = 13,
    kScreenSpaceBoundsFieldNumber = 14,
    kTaskIdFieldNumber = 1,
    kModeFieldNumber = 2,
    kIsTranslucentFieldNumber = 4,
    kPrefixOrderIndexFieldNumber = 7,
  };
  // optional .android.view.SurfaceControlProto leash = 3;
  bool has_leash() const;
  void clear_leash();
  const ::android::view::SurfaceControlProto& leash() const;
  ::android::view::SurfaceControlProto* release_leash();
  ::android::view::SurfaceControlProto* mutable_leash();
  void set_allocated_leash(::android::view::SurfaceControlProto* leash);

  // optional .android.graphics.RectProto clip_rect = 5;
  bool has_clip_rect() const;
  void clear_clip_rect();
  const ::android::graphics::RectProto& clip_rect() const;
  ::android::graphics::RectProto* release_clip_rect();
  ::android::graphics::RectProto* mutable_clip_rect();
  void set_allocated_clip_rect(::android::graphics::RectProto* clip_rect);

  // optional .android.graphics.RectProto content_insets = 6;
  bool has_content_insets() const;
  void clear_content_insets();
  const ::android::graphics::RectProto& content_insets() const;
  ::android::graphics::RectProto* release_content_insets();
  ::android::graphics::RectProto* mutable_content_insets();
  void set_allocated_content_insets(::android::graphics::RectProto* content_insets);

  // optional .android.graphics.PointProto position = 8;
  bool has_position() const;
  void clear_position();
  const ::android::graphics::PointProto& position() const;
  ::android::graphics::PointProto* release_position();
  ::android::graphics::PointProto* mutable_position();
  void set_allocated_position(::android::graphics::PointProto* position);

  // optional .android.graphics.RectProto source_container_bounds = 9;
  bool has_source_container_bounds() const;
  void clear_source_container_bounds();
  const ::android::graphics::RectProto& source_container_bounds() const;
  ::android::graphics::RectProto* release_source_container_bounds();
  ::android::graphics::RectProto* mutable_source_container_bounds();
  void set_allocated_source_container_bounds(::android::graphics::RectProto* source_container_bounds);

  // optional .android.app.WindowConfigurationProto window_configuration = 10;
  bool has_window_configuration() const;
  void clear_window_configuration();
  const ::android::app::WindowConfigurationProto& window_configuration() const;
  ::android::app::WindowConfigurationProto* release_window_configuration();
  ::android::app::WindowConfigurationProto* mutable_window_configuration();
  void set_allocated_window_configuration(::android::app::WindowConfigurationProto* window_configuration);

  // optional .android.view.SurfaceControlProto start_leash = 11;
  bool has_start_leash() const;
  void clear_start_leash();
  const ::android::view::SurfaceControlProto& start_leash() const;
  ::android::view::SurfaceControlProto* release_start_leash();
  ::android::view::SurfaceControlProto* mutable_start_leash();
  void set_allocated_start_leash(::android::view::SurfaceControlProto* start_leash);

  // optional .android.graphics.RectProto start_bounds = 12;
  bool has_start_bounds() const;
  void clear_start_bounds();
  const ::android::graphics::RectProto& start_bounds() const;
  ::android::graphics::RectProto* release_start_bounds();
  ::android::graphics::RectProto* mutable_start_bounds();
  void set_allocated_start_bounds(::android::graphics::RectProto* start_bounds);

  // optional .android.graphics.RectProto local_bounds = 13;
  bool has_local_bounds() const;
  void clear_local_bounds();
  const ::android::graphics::RectProto& local_bounds() const;
  ::android::graphics::RectProto* release_local_bounds();
  ::android::graphics::RectProto* mutable_local_bounds();
  void set_allocated_local_bounds(::android::graphics::RectProto* local_bounds);

  // optional .android.graphics.RectProto screen_space_bounds = 14;
  bool has_screen_space_bounds() const;
  void clear_screen_space_bounds();
  const ::android::graphics::RectProto& screen_space_bounds() const;
  ::android::graphics::RectProto* release_screen_space_bounds();
  ::android::graphics::RectProto* mutable_screen_space_bounds();
  void set_allocated_screen_space_bounds(::android::graphics::RectProto* screen_space_bounds);

  // optional int32 task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mode = 2;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_translucent = 4;
  bool has_is_translucent() const;
  void clear_is_translucent();
  bool is_translucent() const;
  void set_is_translucent(bool value);

  // optional int32 prefix_order_index = 7;
  bool has_prefix_order_index() const;
  void clear_prefix_order_index();
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_order_index() const;
  void set_prefix_order_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.view.RemoteAnimationTargetProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::view::SurfaceControlProto* leash_;
  ::android::graphics::RectProto* clip_rect_;
  ::android::graphics::RectProto* content_insets_;
  ::android::graphics::PointProto* position_;
  ::android::graphics::RectProto* source_container_bounds_;
  ::android::app::WindowConfigurationProto* window_configuration_;
  ::android::view::SurfaceControlProto* start_leash_;
  ::android::graphics::RectProto* start_bounds_;
  ::android::graphics::RectProto* local_bounds_;
  ::android::graphics::RectProto* screen_space_bounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  bool is_translucent_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_order_index_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteAnimationTargetProto

// optional int32 task_id = 1;
inline bool RemoteAnimationTargetProto::has_task_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RemoteAnimationTargetProto::clear_task_id() {
  task_id_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteAnimationTargetProto::task_id() const {
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.task_id)
  return task_id_;
}
inline void RemoteAnimationTargetProto::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  task_id_ = value;
  // @@protoc_insertion_point(field_set:android.view.RemoteAnimationTargetProto.task_id)
}

// optional int32 mode = 2;
inline bool RemoteAnimationTargetProto::has_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RemoteAnimationTargetProto::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteAnimationTargetProto::mode() const {
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.mode)
  return mode_;
}
inline void RemoteAnimationTargetProto::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:android.view.RemoteAnimationTargetProto.mode)
}

// optional .android.view.SurfaceControlProto leash = 3;
inline bool RemoteAnimationTargetProto::has_leash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::view::SurfaceControlProto& RemoteAnimationTargetProto::leash() const {
  const ::android::view::SurfaceControlProto* p = leash_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.leash)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::SurfaceControlProto*>(
      &::android::view::_SurfaceControlProto_default_instance_);
}
inline ::android::view::SurfaceControlProto* RemoteAnimationTargetProto::release_leash() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.leash)
  _has_bits_[0] &= ~0x00000001u;
  ::android::view::SurfaceControlProto* temp = leash_;
  leash_ = nullptr;
  return temp;
}
inline ::android::view::SurfaceControlProto* RemoteAnimationTargetProto::mutable_leash() {
  _has_bits_[0] |= 0x00000001u;
  if (leash_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::SurfaceControlProto>(GetArenaNoVirtual());
    leash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.leash)
  return leash_;
}
inline void RemoteAnimationTargetProto::set_allocated_leash(::android::view::SurfaceControlProto* leash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leash_);
  }
  if (leash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leash, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leash_ = leash;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.leash)
}

// optional bool is_translucent = 4;
inline bool RemoteAnimationTargetProto::has_is_translucent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RemoteAnimationTargetProto::clear_is_translucent() {
  is_translucent_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool RemoteAnimationTargetProto::is_translucent() const {
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.is_translucent)
  return is_translucent_;
}
inline void RemoteAnimationTargetProto::set_is_translucent(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_translucent_ = value;
  // @@protoc_insertion_point(field_set:android.view.RemoteAnimationTargetProto.is_translucent)
}

// optional .android.graphics.RectProto clip_rect = 5;
inline bool RemoteAnimationTargetProto::has_clip_rect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::graphics::RectProto& RemoteAnimationTargetProto::clip_rect() const {
  const ::android::graphics::RectProto* p = clip_rect_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.clip_rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::release_clip_rect() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.clip_rect)
  _has_bits_[0] &= ~0x00000002u;
  ::android::graphics::RectProto* temp = clip_rect_;
  clip_rect_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::mutable_clip_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (clip_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    clip_rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.clip_rect)
  return clip_rect_;
}
inline void RemoteAnimationTargetProto::set_allocated_clip_rect(::android::graphics::RectProto* clip_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clip_rect_);
  }
  if (clip_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clip_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clip_rect_ = clip_rect;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.clip_rect)
}

// optional .android.graphics.RectProto content_insets = 6;
inline bool RemoteAnimationTargetProto::has_content_insets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::graphics::RectProto& RemoteAnimationTargetProto::content_insets() const {
  const ::android::graphics::RectProto* p = content_insets_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.content_insets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::release_content_insets() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.content_insets)
  _has_bits_[0] &= ~0x00000004u;
  ::android::graphics::RectProto* temp = content_insets_;
  content_insets_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::mutable_content_insets() {
  _has_bits_[0] |= 0x00000004u;
  if (content_insets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    content_insets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.content_insets)
  return content_insets_;
}
inline void RemoteAnimationTargetProto::set_allocated_content_insets(::android::graphics::RectProto* content_insets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_insets_);
  }
  if (content_insets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_insets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_insets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  content_insets_ = content_insets;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.content_insets)
}

// optional int32 prefix_order_index = 7;
inline bool RemoteAnimationTargetProto::has_prefix_order_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RemoteAnimationTargetProto::clear_prefix_order_index() {
  prefix_order_index_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteAnimationTargetProto::prefix_order_index() const {
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.prefix_order_index)
  return prefix_order_index_;
}
inline void RemoteAnimationTargetProto::set_prefix_order_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  prefix_order_index_ = value;
  // @@protoc_insertion_point(field_set:android.view.RemoteAnimationTargetProto.prefix_order_index)
}

// optional .android.graphics.PointProto position = 8;
inline bool RemoteAnimationTargetProto::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::graphics::PointProto& RemoteAnimationTargetProto::position() const {
  const ::android::graphics::PointProto* p = position_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::PointProto*>(
      &::android::graphics::_PointProto_default_instance_);
}
inline ::android::graphics::PointProto* RemoteAnimationTargetProto::release_position() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.position)
  _has_bits_[0] &= ~0x00000008u;
  ::android::graphics::PointProto* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::android::graphics::PointProto* RemoteAnimationTargetProto::mutable_position() {
  _has_bits_[0] |= 0x00000008u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::PointProto>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.position)
  return position_;
}
inline void RemoteAnimationTargetProto::set_allocated_position(::android::graphics::PointProto* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.position)
}

// optional .android.graphics.RectProto source_container_bounds = 9;
inline bool RemoteAnimationTargetProto::has_source_container_bounds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::graphics::RectProto& RemoteAnimationTargetProto::source_container_bounds() const {
  const ::android::graphics::RectProto* p = source_container_bounds_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.source_container_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::release_source_container_bounds() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.source_container_bounds)
  _has_bits_[0] &= ~0x00000010u;
  ::android::graphics::RectProto* temp = source_container_bounds_;
  source_container_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::mutable_source_container_bounds() {
  _has_bits_[0] |= 0x00000010u;
  if (source_container_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    source_container_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.source_container_bounds)
  return source_container_bounds_;
}
inline void RemoteAnimationTargetProto::set_allocated_source_container_bounds(::android::graphics::RectProto* source_container_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_container_bounds_);
  }
  if (source_container_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_container_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_container_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  source_container_bounds_ = source_container_bounds;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.source_container_bounds)
}

// optional .android.app.WindowConfigurationProto window_configuration = 10;
inline bool RemoteAnimationTargetProto::has_window_configuration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::app::WindowConfigurationProto& RemoteAnimationTargetProto::window_configuration() const {
  const ::android::app::WindowConfigurationProto* p = window_configuration_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.window_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::app::WindowConfigurationProto*>(
      &::android::app::_WindowConfigurationProto_default_instance_);
}
inline ::android::app::WindowConfigurationProto* RemoteAnimationTargetProto::release_window_configuration() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.window_configuration)
  _has_bits_[0] &= ~0x00000020u;
  ::android::app::WindowConfigurationProto* temp = window_configuration_;
  window_configuration_ = nullptr;
  return temp;
}
inline ::android::app::WindowConfigurationProto* RemoteAnimationTargetProto::mutable_window_configuration() {
  _has_bits_[0] |= 0x00000020u;
  if (window_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::app::WindowConfigurationProto>(GetArenaNoVirtual());
    window_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.window_configuration)
  return window_configuration_;
}
inline void RemoteAnimationTargetProto::set_allocated_window_configuration(::android::app::WindowConfigurationProto* window_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_configuration_);
  }
  if (window_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  window_configuration_ = window_configuration;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.window_configuration)
}

// optional .android.view.SurfaceControlProto start_leash = 11;
inline bool RemoteAnimationTargetProto::has_start_leash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::view::SurfaceControlProto& RemoteAnimationTargetProto::start_leash() const {
  const ::android::view::SurfaceControlProto* p = start_leash_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.start_leash)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::SurfaceControlProto*>(
      &::android::view::_SurfaceControlProto_default_instance_);
}
inline ::android::view::SurfaceControlProto* RemoteAnimationTargetProto::release_start_leash() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.start_leash)
  _has_bits_[0] &= ~0x00000040u;
  ::android::view::SurfaceControlProto* temp = start_leash_;
  start_leash_ = nullptr;
  return temp;
}
inline ::android::view::SurfaceControlProto* RemoteAnimationTargetProto::mutable_start_leash() {
  _has_bits_[0] |= 0x00000040u;
  if (start_leash_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::SurfaceControlProto>(GetArenaNoVirtual());
    start_leash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.start_leash)
  return start_leash_;
}
inline void RemoteAnimationTargetProto::set_allocated_start_leash(::android::view::SurfaceControlProto* start_leash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_leash_);
  }
  if (start_leash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start_leash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_leash, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  start_leash_ = start_leash;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.start_leash)
}

// optional .android.graphics.RectProto start_bounds = 12;
inline bool RemoteAnimationTargetProto::has_start_bounds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::graphics::RectProto& RemoteAnimationTargetProto::start_bounds() const {
  const ::android::graphics::RectProto* p = start_bounds_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.start_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::release_start_bounds() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.start_bounds)
  _has_bits_[0] &= ~0x00000080u;
  ::android::graphics::RectProto* temp = start_bounds_;
  start_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::mutable_start_bounds() {
  _has_bits_[0] |= 0x00000080u;
  if (start_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    start_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.start_bounds)
  return start_bounds_;
}
inline void RemoteAnimationTargetProto::set_allocated_start_bounds(::android::graphics::RectProto* start_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_bounds_);
  }
  if (start_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  start_bounds_ = start_bounds;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.start_bounds)
}

// optional .android.graphics.RectProto local_bounds = 13;
inline bool RemoteAnimationTargetProto::has_local_bounds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::graphics::RectProto& RemoteAnimationTargetProto::local_bounds() const {
  const ::android::graphics::RectProto* p = local_bounds_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.local_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::release_local_bounds() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.local_bounds)
  _has_bits_[0] &= ~0x00000100u;
  ::android::graphics::RectProto* temp = local_bounds_;
  local_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::mutable_local_bounds() {
  _has_bits_[0] |= 0x00000100u;
  if (local_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    local_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.local_bounds)
  return local_bounds_;
}
inline void RemoteAnimationTargetProto::set_allocated_local_bounds(::android::graphics::RectProto* local_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_bounds_);
  }
  if (local_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  local_bounds_ = local_bounds;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.local_bounds)
}

// optional .android.graphics.RectProto screen_space_bounds = 14;
inline bool RemoteAnimationTargetProto::has_screen_space_bounds() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::graphics::RectProto& RemoteAnimationTargetProto::screen_space_bounds() const {
  const ::android::graphics::RectProto* p = screen_space_bounds_;
  // @@protoc_insertion_point(field_get:android.view.RemoteAnimationTargetProto.screen_space_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::release_screen_space_bounds() {
  // @@protoc_insertion_point(field_release:android.view.RemoteAnimationTargetProto.screen_space_bounds)
  _has_bits_[0] &= ~0x00000200u;
  ::android::graphics::RectProto* temp = screen_space_bounds_;
  screen_space_bounds_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* RemoteAnimationTargetProto::mutable_screen_space_bounds() {
  _has_bits_[0] |= 0x00000200u;
  if (screen_space_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    screen_space_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.RemoteAnimationTargetProto.screen_space_bounds)
  return screen_space_bounds_;
}
inline void RemoteAnimationTargetProto::set_allocated_screen_space_bounds(::android::graphics::RectProto* screen_space_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_space_bounds_);
  }
  if (screen_space_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen_space_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_space_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  screen_space_bounds_ = screen_space_bounds;
  // @@protoc_insertion_point(field_set_allocated:android.view.RemoteAnimationTargetProto.screen_space_bounds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace view
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto
