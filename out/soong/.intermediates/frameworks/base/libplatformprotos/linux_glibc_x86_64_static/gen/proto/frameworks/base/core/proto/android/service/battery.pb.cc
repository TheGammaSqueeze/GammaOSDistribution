// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/battery.proto

#include "frameworks/base/core/proto/android/service/battery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace service {
namespace battery {
class BatteryServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryServiceDumpProto> _instance;
} _BatteryServiceDumpProto_default_instance_;
}  // namespace battery
}  // namespace service
}  // namespace android
static void InitDefaultsscc_info_BatteryServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::battery::_BatteryServiceDumpProto_default_instance_;
    new (ptr) ::android::service::battery::BatteryServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::battery::BatteryServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatteryServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BatteryServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, are_updates_stopped_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, plugged_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, max_charging_current_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, max_charging_voltage_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, charge_counter_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, status_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, health_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, is_present_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, level_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, scale_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, voltage_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, temperature_),
  PROTOBUF_FIELD_OFFSET(::android::service::battery::BatteryServiceDumpProto, technology_),
  4,
  1,
  2,
  3,
  6,
  7,
  8,
  5,
  9,
  10,
  11,
  12,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::android::service::battery::BatteryServiceDumpProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::service::battery::_BatteryServiceDumpProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8frameworks/base/core/proto/android/ser"
  "vice/battery.proto\022\027android.service.batt"
  "ery\0320frameworks/base/core/proto/android/"
  "privacy.proto\0323frameworks/proto_logging/"
  "stats/enums/os/enums.proto\"\225\003\n\027BatterySe"
  "rviceDumpProto\022\033\n\023are_updates_stopped\030\001 "
  "\001(\010\0224\n\007plugged\030\002 \001(\0162#.android.os.Batter"
  "yPluggedStateEnum\022\034\n\024max_charging_curren"
  "t\030\003 \001(\005\022\034\n\024max_charging_voltage\030\004 \001(\005\022\026\n"
  "\016charge_counter\030\005 \001(\005\022-\n\006status\030\006 \001(\0162\035."
  "android.os.BatteryStatusEnum\022-\n\006health\030\007"
  " \001(\0162\035.android.os.BatteryHealthEnum\022\022\n\ni"
  "s_present\030\010 \001(\010\022\r\n\005level\030\t \001(\005\022\r\n\005scale\030"
  "\n \001(\005\022\017\n\007voltage\030\013 \001(\005\022\023\n\013temperature\030\014 "
  "\001(\005\022\022\n\ntechnology\030\r \001(\t:\t\232\237\325\207\003\003\010\310\001B\027B\023Ba"
  "tteryServiceProtoP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_deps[2] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
  &::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_sccs[1] = {
  &scc_info_BatteryServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto, "frameworks/base/core/proto/android/service/battery.proto", 619,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto, 1, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto), true);
namespace android {
namespace service {
namespace battery {

// ===================================================================

void BatteryServiceDumpProto::InitAsDefaultInstance() {
}
class BatteryServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BatteryServiceDumpProto>()._has_bits_);
  static void set_has_are_updates_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_plugged(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_charging_current(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_charging_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_charge_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_present(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_technology(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BatteryServiceDumpProto::BatteryServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.battery.BatteryServiceDumpProto)
}
BatteryServiceDumpProto::BatteryServiceDumpProto(const BatteryServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  technology_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_technology()) {
    technology_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.technology_);
  }
  ::memcpy(&plugged_, &from.plugged_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
    reinterpret_cast<char*>(&plugged_)) + sizeof(temperature_));
  // @@protoc_insertion_point(copy_constructor:android.service.battery.BatteryServiceDumpProto)
}

void BatteryServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto.base);
  technology_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&plugged_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&plugged_)) + sizeof(temperature_));
}

BatteryServiceDumpProto::~BatteryServiceDumpProto() {
  // @@protoc_insertion_point(destructor:android.service.battery.BatteryServiceDumpProto)
  SharedDtor();
}

void BatteryServiceDumpProto::SharedDtor() {
  technology_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatteryServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryServiceDumpProto& BatteryServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto.base);
  return *internal_default_instance();
}


void BatteryServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.battery.BatteryServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    technology_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&plugged_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&plugged_)) + sizeof(status_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&health_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temperature_) -
        reinterpret_cast<char*>(&health_)) + sizeof(temperature_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatteryServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool are_updates_stopped = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_are_updates_stopped(&has_bits);
          are_updates_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.BatteryPluggedStateEnum plugged = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::BatteryPluggedStateEnum_IsValid(val))) {
            set_plugged(static_cast<::android::os::BatteryPluggedStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 max_charging_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_charging_current(&has_bits);
          max_charging_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_charging_voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_charging_voltage(&has_bits);
          max_charging_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 charge_counter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_charge_counter(&has_bits);
          charge_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.BatteryStatusEnum status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::BatteryStatusEnum_IsValid(val))) {
            set_status(static_cast<::android::os::BatteryStatusEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.BatteryHealthEnum health = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::BatteryHealthEnum_IsValid(val))) {
            set_health(static_cast<::android::os::BatteryHealthEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_present = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_present(&has_bits);
          is_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 voltage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_voltage(&has_bits);
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 temperature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technology = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_technology(), ptr, ctx, "android.service.battery.BatteryServiceDumpProto.technology");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatteryServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.service.battery.BatteryServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool are_updates_stopped = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_are_updates_stopped(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_updates_stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.BatteryPluggedStateEnum plugged = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::BatteryPluggedStateEnum_IsValid(value)) {
            set_plugged(static_cast< ::android::os::BatteryPluggedStateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_charging_current = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_charging_current(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_charging_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_charging_voltage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_charging_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_charging_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 charge_counter = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_charge_counter(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.BatteryStatusEnum status = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::BatteryStatusEnum_IsValid(value)) {
            set_status(static_cast< ::android::os::BatteryStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.BatteryHealthEnum health = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::BatteryHealthEnum_IsValid(value)) {
            set_health(static_cast< ::android::os::BatteryHealthEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_present = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_present(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scale = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 voltage = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 temperature = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_temperature(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string technology = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_technology()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->technology().data(), static_cast<int>(this->technology().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.service.battery.BatteryServiceDumpProto.technology");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.battery.BatteryServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.battery.BatteryServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatteryServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.battery.BatteryServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool are_updates_stopped = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->are_updates_stopped(), output);
  }

  // optional .android.os.BatteryPluggedStateEnum plugged = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->plugged(), output);
  }

  // optional int32 max_charging_current = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_charging_current(), output);
  }

  // optional int32 max_charging_voltage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_charging_voltage(), output);
  }

  // optional int32 charge_counter = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->charge_counter(), output);
  }

  // optional .android.os.BatteryStatusEnum status = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional .android.os.BatteryHealthEnum health = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->health(), output);
  }

  // optional bool is_present = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_present(), output);
  }

  // optional int32 level = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int32 scale = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->scale(), output);
  }

  // optional int32 voltage = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->voltage(), output);
  }

  // optional int32 temperature = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->temperature(), output);
  }

  // optional string technology = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->technology().data(), static_cast<int>(this->technology().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.service.battery.BatteryServiceDumpProto.technology");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->technology(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.service.battery.BatteryServiceDumpProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryServiceDumpProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.service.battery.BatteryServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool are_updates_stopped = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->are_updates_stopped(), target);
  }

  // optional .android.os.BatteryPluggedStateEnum plugged = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->plugged(), target);
  }

  // optional int32 max_charging_current = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_charging_current(), target);
  }

  // optional int32 max_charging_voltage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_charging_voltage(), target);
  }

  // optional int32 charge_counter = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->charge_counter(), target);
  }

  // optional .android.os.BatteryStatusEnum status = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional .android.os.BatteryHealthEnum health = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->health(), target);
  }

  // optional bool is_present = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->is_present(), target);
  }

  // optional int32 level = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int32 scale = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->scale(), target);
  }

  // optional int32 voltage = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->voltage(), target);
  }

  // optional int32 temperature = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->temperature(), target);
  }

  // optional string technology = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->technology().data(), static_cast<int>(this->technology().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "android.service.battery.BatteryServiceDumpProto.technology");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->technology(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.service.battery.BatteryServiceDumpProto)
  return target;
}

size_t BatteryServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.battery.BatteryServiceDumpProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string technology = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->technology());
    }

    // optional .android.os.BatteryPluggedStateEnum plugged = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->plugged());
    }

    // optional int32 max_charging_current = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_charging_current());
    }

    // optional int32 max_charging_voltage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_charging_voltage());
    }

    // optional bool are_updates_stopped = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_present = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 charge_counter = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->charge_counter());
    }

    // optional .android.os.BatteryStatusEnum status = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .android.os.BatteryHealthEnum health = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->health());
    }

    // optional int32 level = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 scale = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->scale());
    }

    // optional int32 voltage = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->voltage());
    }

    // optional int32 temperature = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->temperature());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryServiceDumpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.service.battery.BatteryServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryServiceDumpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryServiceDumpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.service.battery.BatteryServiceDumpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.service.battery.BatteryServiceDumpProto)
    MergeFrom(*source);
  }
}

void BatteryServiceDumpProto::MergeFrom(const BatteryServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.battery.BatteryServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      technology_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.technology_);
    }
    if (cached_has_bits & 0x00000002u) {
      plugged_ = from.plugged_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_charging_current_ = from.max_charging_current_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_charging_voltage_ = from.max_charging_voltage_;
    }
    if (cached_has_bits & 0x00000010u) {
      are_updates_stopped_ = from.are_updates_stopped_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_present_ = from.is_present_;
    }
    if (cached_has_bits & 0x00000040u) {
      charge_counter_ = from.charge_counter_;
    }
    if (cached_has_bits & 0x00000080u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000200u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000400u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000800u) {
      voltage_ = from.voltage_;
    }
    if (cached_has_bits & 0x00001000u) {
      temperature_ = from.temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatteryServiceDumpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.service.battery.BatteryServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryServiceDumpProto::CopyFrom(const BatteryServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.battery.BatteryServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryServiceDumpProto::IsInitialized() const {
  return true;
}

void BatteryServiceDumpProto::InternalSwap(BatteryServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  technology_.Swap(&other->technology_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plugged_, other->plugged_);
  swap(max_charging_current_, other->max_charging_current_);
  swap(max_charging_voltage_, other->max_charging_voltage_);
  swap(are_updates_stopped_, other->are_updates_stopped_);
  swap(is_present_, other->is_present_);
  swap(charge_counter_, other->charge_counter_);
  swap(status_, other->status_);
  swap(health_, other->health_);
  swap(level_, other->level_);
  swap(scale_, other->scale_);
  swap(voltage_, other->voltage_);
  swap(temperature_, other->temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryServiceDumpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace battery
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::service::battery::BatteryServiceDumpProto* Arena::CreateMaybeMessage< ::android::service::battery::BatteryServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::battery::BatteryServiceDumpProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
