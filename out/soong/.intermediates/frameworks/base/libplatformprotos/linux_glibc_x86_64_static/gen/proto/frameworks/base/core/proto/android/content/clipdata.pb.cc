// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/content/clipdata.proto

#include "frameworks/base/core/proto/android/content/clipdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClipDataProto_Icon_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClipDescriptionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto;
namespace android {
namespace content {
class ClipDataProto_IconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClipDataProto_Icon> _instance;
} _ClipDataProto_Icon_default_instance_;
class ClipDataProto_ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClipDataProto_Item> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr html_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  const ::android::content::IntentProto* intent_;
  bool nothing_;
} _ClipDataProto_Item_default_instance_;
class ClipDataProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClipDataProto> _instance;
} _ClipDataProto_default_instance_;
}  // namespace content
}  // namespace android
static void InitDefaultsscc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_ClipDataProto_default_instance_;
    new (ptr) ::android::content::ClipDataProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::ClipDataProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto}, {
      &scc_info_ClipDescriptionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto.base,
      &scc_info_ClipDataProto_Icon_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base,
      &scc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base,}};

static void InitDefaultsscc_info_ClipDataProto_Icon_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_ClipDataProto_Icon_default_instance_;
    new (ptr) ::android::content::ClipDataProto_Icon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::ClipDataProto_Icon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClipDataProto_Icon_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClipDataProto_Icon_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto}, {}};

static void InitDefaultsscc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_ClipDataProto_Item_default_instance_;
    new (ptr) ::android::content::ClipDataProto_Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::ClipDataProto_Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto}, {
      &scc_info_IntentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Icon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Icon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Icon, width_),
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Icon, height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Item, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::android::content::ClipDataProto_ItemDefaultTypeInternal, html_text_),
  offsetof(::android::content::ClipDataProto_ItemDefaultTypeInternal, text_),
  offsetof(::android::content::ClipDataProto_ItemDefaultTypeInternal, uri_),
  offsetof(::android::content::ClipDataProto_ItemDefaultTypeInternal, intent_),
  offsetof(::android::content::ClipDataProto_ItemDefaultTypeInternal, nothing_),
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto_Item, data_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto, description_),
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto, icon_),
  PROTOBUF_FIELD_OFFSET(::android::content::ClipDataProto, items_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::android::content::ClipDataProto_Icon)},
  { 9, 20, sizeof(::android::content::ClipDataProto_Item)},
  { 25, 33, sizeof(::android::content::ClipDataProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::content::_ClipDataProto_Icon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::content::_ClipDataProto_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::content::_ClipDataProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9frameworks/base/core/proto/android/con"
  "tent/clipdata.proto\022\017android.content\032@fr"
  "ameworks/base/core/proto/android/content"
  "/clipdescription.proto\0327frameworks/base/"
  "core/proto/android/content/intent.proto\032"
  "0frameworks/base/core/proto/android/priv"
  "acy.proto\"\213\003\n\rClipDataProto\022:\n\013descripti"
  "on\030\001 \001(\0132%.android.content.ClipDescripti"
  "onProto\0221\n\004icon\030\002 \001(\0132#.android.content."
  "ClipDataProto.Icon\0222\n\005items\030\003 \003(\0132#.andr"
  "oid.content.ClipDataProto.Item\0320\n\004Icon\022\r"
  "\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005:\t\232\237\325\207\003\003\010\310\001"
  "\032\232\001\n\004Item\022\023\n\thtml_text\030\001 \001(\tH\000\022\016\n\004text\030\002"
  " \001(\tH\000\022\r\n\003uri\030\003 \001(\tH\000\022.\n\006intent\030\004 \001(\0132\034."
  "android.content.IntentProtoH\000\022\034\n\007nothing"
  "\030\005 \001(\010B\t\232\237\325\207\003\003\010\310\001H\000:\010\232\237\325\207\003\002\010\000B\006\n\004data:\010\232"
  "\237\325\207\003\002\010\000B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_deps[3] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_sccs[3] = {
  &scc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base,
  &scc_info_ClipDataProto_Icon_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base,
  &scc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto, "frameworks/base/core/proto/android/content/clipdata.proto", 651,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto, 3, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto), true);
namespace android {
namespace content {

// ===================================================================

void ClipDataProto_Icon::InitAsDefaultInstance() {
}
class ClipDataProto_Icon::_Internal {
 public:
  using HasBits = decltype(std::declval<ClipDataProto_Icon>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClipDataProto_Icon::ClipDataProto_Icon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.ClipDataProto.Icon)
}
ClipDataProto_Icon::ClipDataProto_Icon(const ClipDataProto_Icon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:android.content.ClipDataProto.Icon)
}

void ClipDataProto_Icon::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ClipDataProto_Icon::~ClipDataProto_Icon() {
  // @@protoc_insertion_point(destructor:android.content.ClipDataProto.Icon)
  SharedDtor();
}

void ClipDataProto_Icon::SharedDtor() {
}

void ClipDataProto_Icon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClipDataProto_Icon& ClipDataProto_Icon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClipDataProto_Icon_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base);
  return *internal_default_instance();
}


void ClipDataProto_Icon::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.ClipDataProto.Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClipDataProto_Icon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClipDataProto_Icon::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.content.ClipDataProto.Icon)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.ClipDataProto.Icon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.ClipDataProto.Icon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClipDataProto_Icon::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.ClipDataProto.Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.content.ClipDataProto.Icon)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClipDataProto_Icon::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.content.ClipDataProto.Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.content.ClipDataProto.Icon)
  return target;
}

size_t ClipDataProto_Icon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.ClipDataProto.Icon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipDataProto_Icon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.content.ClipDataProto.Icon)
  GOOGLE_DCHECK_NE(&from, this);
  const ClipDataProto_Icon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClipDataProto_Icon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.content.ClipDataProto.Icon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.content.ClipDataProto.Icon)
    MergeFrom(*source);
  }
}

void ClipDataProto_Icon::MergeFrom(const ClipDataProto_Icon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.ClipDataProto.Icon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClipDataProto_Icon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.content.ClipDataProto.Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipDataProto_Icon::CopyFrom(const ClipDataProto_Icon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.ClipDataProto.Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipDataProto_Icon::IsInitialized() const {
  return true;
}

void ClipDataProto_Icon::InternalSwap(ClipDataProto_Icon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipDataProto_Icon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClipDataProto_Item::InitAsDefaultInstance() {
  ::android::content::_ClipDataProto_Item_default_instance_.html_text_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::android::content::_ClipDataProto_Item_default_instance_.text_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::android::content::_ClipDataProto_Item_default_instance_.uri_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::android::content::_ClipDataProto_Item_default_instance_.intent_ = const_cast< ::android::content::IntentProto*>(
      ::android::content::IntentProto::internal_default_instance());
  ::android::content::_ClipDataProto_Item_default_instance_.nothing_ = false;
}
class ClipDataProto_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<ClipDataProto_Item>()._has_bits_);
  static const ::android::content::IntentProto& intent(const ClipDataProto_Item* msg);
};

const ::android::content::IntentProto&
ClipDataProto_Item::_Internal::intent(const ClipDataProto_Item* msg) {
  return *msg->data_.intent_;
}
void ClipDataProto_Item::set_allocated_intent(::android::content::IntentProto* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    set_has_intent();
    data_.intent_ = intent;
  }
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDataProto.Item.intent)
}
void ClipDataProto_Item::clear_intent() {
  if (has_intent()) {
    delete data_.intent_;
    clear_has_data();
  }
}
ClipDataProto_Item::ClipDataProto_Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.ClipDataProto.Item)
}
ClipDataProto_Item::ClipDataProto_Item(const ClipDataProto_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kHtmlText: {
      set_html_text(from.html_text());
      break;
    }
    case kText: {
      set_text(from.text());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kIntent: {
      mutable_intent()->::android::content::IntentProto::MergeFrom(from.intent());
      break;
    }
    case kNothing: {
      set_nothing(from.nothing());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.content.ClipDataProto.Item)
}

void ClipDataProto_Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base);
  clear_has_data();
}

ClipDataProto_Item::~ClipDataProto_Item() {
  // @@protoc_insertion_point(destructor:android.content.ClipDataProto.Item)
  SharedDtor();
}

void ClipDataProto_Item::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void ClipDataProto_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClipDataProto_Item& ClipDataProto_Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClipDataProto_Item_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base);
  return *internal_default_instance();
}


void ClipDataProto_Item::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:android.content.ClipDataProto.Item)
  switch (data_case()) {
    case kHtmlText: {
      data_.html_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kText: {
      data_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kUri: {
      data_.uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIntent: {
      delete data_.intent_;
      break;
    }
    case kNothing: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ClipDataProto_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.ClipDataProto.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClipDataProto_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string html_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_html_text(), ptr, ctx, "android.content.ClipDataProto.Item.html_text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_text(), ptr, ctx, "android.content.ClipDataProto.Item.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_uri(), ptr, ctx, "android.content.ClipDataProto.Item.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.IntentProto intent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool nothing = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          set_nothing(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClipDataProto_Item::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.content.ClipDataProto.Item)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string html_text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_html_text()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_text().data(), static_cast<int>(this->html_text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.content.ClipDataProto.Item.html_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.content.ClipDataProto.Item.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uri = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "android.content.ClipDataProto.Item.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.IntentProto intent = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool nothing = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          clear_data();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_.nothing_)));
          set_has_nothing();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.ClipDataProto.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.ClipDataProto.Item)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClipDataProto_Item::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.ClipDataProto.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kHtmlText:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->html_text().data(), static_cast<int>(this->html_text().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.content.ClipDataProto.Item.html_text");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->html_text(), output);
      break;
    case kText:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->text().data(), static_cast<int>(this->text().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.content.ClipDataProto.Item.text");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->text(), output);
      break;
    case kUri:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->uri().data(), static_cast<int>(this->uri().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.content.ClipDataProto.Item.uri");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->uri(), output);
      break;
    case kIntent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::intent(this), output);
      break;
    case kNothing:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->nothing(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.content.ClipDataProto.Item)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClipDataProto_Item::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.content.ClipDataProto.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kHtmlText:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->html_text().data(), static_cast<int>(this->html_text().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.content.ClipDataProto.Item.html_text");
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
          1, this->html_text(), target);
      break;
    case kText:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->text().data(), static_cast<int>(this->text().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.content.ClipDataProto.Item.text");
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
          2, this->text(), target);
      break;
    case kUri:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->uri().data(), static_cast<int>(this->uri().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "android.content.ClipDataProto.Item.uri");
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
          3, this->uri(), target);
      break;
    case kIntent:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::intent(this), target);
      break;
    case kNothing:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->nothing(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.content.ClipDataProto.Item)
  return target;
}

size_t ClipDataProto_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.ClipDataProto.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // optional string html_text = 1;
    case kHtmlText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->html_text());
      break;
    }
    // optional string text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    // optional string uri = 3;
    case kUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    // optional .android.content.IntentProto intent = 4;
    case kIntent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.intent_);
      break;
    }
    // optional bool nothing = 5 [(.android.privacy) = {
    case kNothing: {
      total_size += 1 + 1;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipDataProto_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.content.ClipDataProto.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const ClipDataProto_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClipDataProto_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.content.ClipDataProto.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.content.ClipDataProto.Item)
    MergeFrom(*source);
  }
}

void ClipDataProto_Item::MergeFrom(const ClipDataProto_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.ClipDataProto.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kHtmlText: {
      set_html_text(from.html_text());
      break;
    }
    case kText: {
      set_text(from.text());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kIntent: {
      mutable_intent()->::android::content::IntentProto::MergeFrom(from.intent());
      break;
    }
    case kNothing: {
      set_nothing(from.nothing());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void ClipDataProto_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.content.ClipDataProto.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipDataProto_Item::CopyFrom(const ClipDataProto_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.ClipDataProto.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipDataProto_Item::IsInitialized() const {
  return true;
}

void ClipDataProto_Item::InternalSwap(ClipDataProto_Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipDataProto_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClipDataProto::InitAsDefaultInstance() {
  ::android::content::_ClipDataProto_default_instance_._instance.get_mutable()->description_ = const_cast< ::android::content::ClipDescriptionProto*>(
      ::android::content::ClipDescriptionProto::internal_default_instance());
  ::android::content::_ClipDataProto_default_instance_._instance.get_mutable()->icon_ = const_cast< ::android::content::ClipDataProto_Icon*>(
      ::android::content::ClipDataProto_Icon::internal_default_instance());
}
class ClipDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ClipDataProto>()._has_bits_);
  static const ::android::content::ClipDescriptionProto& description(const ClipDataProto* msg);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::content::ClipDataProto_Icon& icon(const ClipDataProto* msg);
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::content::ClipDescriptionProto&
ClipDataProto::_Internal::description(const ClipDataProto* msg) {
  return *msg->description_;
}
const ::android::content::ClipDataProto_Icon&
ClipDataProto::_Internal::icon(const ClipDataProto* msg) {
  return *msg->icon_;
}
void ClipDataProto::clear_description() {
  if (description_ != nullptr) description_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClipDataProto::ClipDataProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.ClipDataProto)
}
ClipDataProto::ClipDataProto(const ClipDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_description()) {
    description_ = new ::android::content::ClipDescriptionProto(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from.has_icon()) {
    icon_ = new ::android::content::ClipDataProto_Icon(*from.icon_);
  } else {
    icon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.content.ClipDataProto)
}

void ClipDataProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base);
  ::memset(&description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&icon_) -
      reinterpret_cast<char*>(&description_)) + sizeof(icon_));
}

ClipDataProto::~ClipDataProto() {
  // @@protoc_insertion_point(destructor:android.content.ClipDataProto)
  SharedDtor();
}

void ClipDataProto::SharedDtor() {
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete icon_;
}

void ClipDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClipDataProto& ClipDataProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClipDataProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdata_2eproto.base);
  return *internal_default_instance();
}


void ClipDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.ClipDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(description_ != nullptr);
      description_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(icon_ != nullptr);
      icon_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClipDataProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ClipDescriptionProto description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ClipDataProto.Icon icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_icon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.content.ClipDataProto.Item items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClipDataProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.content.ClipDataProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ClipDescriptionProto description = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ClipDataProto.Icon icon = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.content.ClipDataProto.Item items = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.ClipDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.ClipDataProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClipDataProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.ClipDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ClipDescriptionProto description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::description(this), output);
  }

  // optional .android.content.ClipDataProto.Icon icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::icon(this), output);
  }

  // repeated .android.content.ClipDataProto.Item items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.content.ClipDataProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClipDataProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.content.ClipDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ClipDescriptionProto description = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::description(this), target);
  }

  // optional .android.content.ClipDataProto.Icon icon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::icon(this), target);
  }

  // repeated .android.content.ClipDataProto.Item items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.content.ClipDataProto)
  return target;
}

size_t ClipDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.ClipDataProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.content.ClipDataProto.Item items = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.content.ClipDescriptionProto description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *description_);
    }

    // optional .android.content.ClipDataProto.Icon icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *icon_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipDataProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.content.ClipDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ClipDataProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClipDataProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.content.ClipDataProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.content.ClipDataProto)
    MergeFrom(*source);
  }
}

void ClipDataProto::MergeFrom(const ClipDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.ClipDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_description()->::android::content::ClipDescriptionProto::MergeFrom(from.description());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_icon()->::android::content::ClipDataProto_Icon::MergeFrom(from.icon());
    }
  }
}

void ClipDataProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.content.ClipDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipDataProto::CopyFrom(const ClipDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.ClipDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipDataProto::IsInitialized() const {
  return true;
}

void ClipDataProto::InternalSwap(ClipDataProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(description_, other->description_);
  swap(icon_, other->icon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipDataProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::content::ClipDataProto_Icon* Arena::CreateMaybeMessage< ::android::content::ClipDataProto_Icon >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::ClipDataProto_Icon >(arena);
}
template<> PROTOBUF_NOINLINE ::android::content::ClipDataProto_Item* Arena::CreateMaybeMessage< ::android::content::ClipDataProto_Item >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::ClipDataProto_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::android::content::ClipDataProto* Arena::CreateMaybeMessage< ::android::content::ClipDataProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::ClipDataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
