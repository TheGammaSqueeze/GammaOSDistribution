// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/server/location/enums.proto

#include "frameworks/proto_logging/stats/enums/server/location/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace server {
namespace location {
}  // namespace location
}  // namespace server
}  // namespace android
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@frameworks/proto_logging/stats/enums/s"
  "erver/location/enums.proto\022\027android.serv"
  "er.location*y\n\024GpsSignalQualityEnum\022\'\n\032G"
  "PS_SIGNAL_QUALITY_UNKNOWN\020\377\377\377\377\377\377\377\377\377\001\022\033\n\027"
  "GPS_SIGNAL_QUALITY_POOR\020\000\022\033\n\027GPS_SIGNAL_"
  "QUALITY_GOOD\020\001*O\n\nGnssNiType\022\t\n\005VOICE\020\001\022"
  "\r\n\tUMTS_SUPL\020\002\022\023\n\017UMTS_CTRL_PLANE\020\003\022\022\n\016E"
  "MERGENCY_SUPL\020\004*S\n\024GnssUserResponseType\022"
  "\023\n\017RESPONSE_ACCEPT\020\001\022\021\n\rRESPONSE_DENY\020\002\022"
  "\023\n\017RESPONSE_NORESP\020\003*|\n\022GnssNiEncodingTy"
  "pe\022\014\n\010ENC_NONE\020\000\022\030\n\024ENC_SUPL_GSM_DEFAULT"
  "\020\001\022\021\n\rENC_SUPL_UTF8\020\002\022\021\n\rENC_SUPL_UCS2\020\003"
  "\022\030\n\013ENC_UNKNOWN\020\377\377\377\377\377\377\377\377\377\001*X\n\020NfwProtoco"
  "lStack\022\016\n\nCTRL_PLANE\020\000\022\010\n\004SUPL\020\001\022\007\n\003IMS\020"
  "\n\022\007\n\003SIM\020\013\022\030\n\024OTHER_PROTOCOL_STACK\020d*\235\001\n"
  "\014NfwRequestor\022\013\n\007CARRIER\020\000\022\007\n\003OEM\020\n\022\030\n\024M"
  "ODEM_CHIPSET_VENDOR\020\013\022\027\n\023GNSS_CHIPSET_VE"
  "NDOR\020\014\022\030\n\024OTHER_CHIPSET_VENDOR\020\r\022\025\n\021AUTO"
  "MOBILE_CLIENT\020\024\022\023\n\017OTHER_REQUESTOR\020d*b\n\017"
  "NfwResponseType\022\014\n\010REJECTED\020\000\022!\n\035ACCEPTE"
  "D_NO_LOCATION_PROVIDED\020\001\022\036\n\032ACCEPTED_LOC"
  "ATION_PROVIDED\020\002*\034\n\010SuplMode\022\007\n\003MSB\020\001\022\007\n"
  "\003MSA\020\002*/\n\nLppProfile\022\016\n\nUSER_PLANE\020\001\022\021\n\r"
  "CONTROL_PLANE\020\002*E\n\022GlonassPosProtocol\022\016\n"
  "\nRRC_CPLANE\020\001\022\017\n\013RRLP_CPLANE\020\002\022\016\n\nLPP_UP"
  "LANE\020\004*\031\n\007GpsLock\022\006\n\002MO\020\001\022\006\n\002NI\020\002B\034B\030Ser"
  "verLocationProtoEnumsP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto, "frameworks/proto_logging/stats/enums/server/location/enums.proto", 1063,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto, 0, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto), true);
namespace android {
namespace server {
namespace location {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsSignalQualityEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[0];
}
bool GpsSignalQualityEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssNiType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[1];
}
bool GnssNiType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssUserResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[2];
}
bool GnssUserResponseType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssNiEncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[3];
}
bool GnssNiEncodingType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NfwProtocolStack_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[4];
}
bool NfwProtocolStack_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NfwRequestor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[5];
}
bool NfwRequestor_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NfwResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[6];
}
bool NfwResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SuplMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[7];
}
bool SuplMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LppProfile_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[8];
}
bool LppProfile_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GlonassPosProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[9];
}
bool GlonassPosProtocol_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsLock_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2flocation_2fenums_2eproto[10];
}
bool GpsLock_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace location
}  // namespace server
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
