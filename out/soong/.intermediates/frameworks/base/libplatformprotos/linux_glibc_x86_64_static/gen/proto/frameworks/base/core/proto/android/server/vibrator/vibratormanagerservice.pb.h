// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/vibrator/vibratormanagerservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace vibrator {
class CombinedVibrationEffectProto;
class CombinedVibrationEffectProtoDefaultTypeInternal;
extern CombinedVibrationEffectProtoDefaultTypeInternal _CombinedVibrationEffectProto_default_instance_;
class PrebakedSegmentProto;
class PrebakedSegmentProtoDefaultTypeInternal;
extern PrebakedSegmentProtoDefaultTypeInternal _PrebakedSegmentProto_default_instance_;
class PrimitiveSegmentProto;
class PrimitiveSegmentProtoDefaultTypeInternal;
extern PrimitiveSegmentProtoDefaultTypeInternal _PrimitiveSegmentProto_default_instance_;
class RampSegmentProto;
class RampSegmentProtoDefaultTypeInternal;
extern RampSegmentProtoDefaultTypeInternal _RampSegmentProto_default_instance_;
class SegmentProto;
class SegmentProtoDefaultTypeInternal;
extern SegmentProtoDefaultTypeInternal _SegmentProto_default_instance_;
class StepSegmentProto;
class StepSegmentProtoDefaultTypeInternal;
extern StepSegmentProtoDefaultTypeInternal _StepSegmentProto_default_instance_;
class SyncVibrationEffectProto;
class SyncVibrationEffectProtoDefaultTypeInternal;
extern SyncVibrationEffectProtoDefaultTypeInternal _SyncVibrationEffectProto_default_instance_;
class VibrationAttributesProto;
class VibrationAttributesProtoDefaultTypeInternal;
extern VibrationAttributesProtoDefaultTypeInternal _VibrationAttributesProto_default_instance_;
class VibrationEffectProto;
class VibrationEffectProtoDefaultTypeInternal;
extern VibrationEffectProtoDefaultTypeInternal _VibrationEffectProto_default_instance_;
class VibrationProto;
class VibrationProtoDefaultTypeInternal;
extern VibrationProtoDefaultTypeInternal _VibrationProto_default_instance_;
class VibratorManagerServiceDumpProto;
class VibratorManagerServiceDumpProtoDefaultTypeInternal;
extern VibratorManagerServiceDumpProtoDefaultTypeInternal _VibratorManagerServiceDumpProto_default_instance_;
}  // namespace vibrator
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::vibrator::CombinedVibrationEffectProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::CombinedVibrationEffectProto>(Arena*);
template<> ::com::android::server::vibrator::PrebakedSegmentProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::PrebakedSegmentProto>(Arena*);
template<> ::com::android::server::vibrator::PrimitiveSegmentProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::PrimitiveSegmentProto>(Arena*);
template<> ::com::android::server::vibrator::RampSegmentProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::RampSegmentProto>(Arena*);
template<> ::com::android::server::vibrator::SegmentProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::SegmentProto>(Arena*);
template<> ::com::android::server::vibrator::StepSegmentProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::StepSegmentProto>(Arena*);
template<> ::com::android::server::vibrator::SyncVibrationEffectProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::SyncVibrationEffectProto>(Arena*);
template<> ::com::android::server::vibrator::VibrationAttributesProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::VibrationAttributesProto>(Arena*);
template<> ::com::android::server::vibrator::VibrationEffectProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::VibrationEffectProto>(Arena*);
template<> ::com::android::server::vibrator::VibrationProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::VibrationProto>(Arena*);
template<> ::com::android::server::vibrator::VibratorManagerServiceDumpProto* Arena::CreateMaybeMessage<::com::android::server::vibrator::VibratorManagerServiceDumpProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace vibrator {

// ===================================================================

class StepSegmentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.StepSegmentProto) */ {
 public:
  StepSegmentProto();
  virtual ~StepSegmentProto();

  StepSegmentProto(const StepSegmentProto& from);
  StepSegmentProto(StepSegmentProto&& from) noexcept
    : StepSegmentProto() {
    *this = ::std::move(from);
  }

  inline StepSegmentProto& operator=(const StepSegmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepSegmentProto& operator=(StepSegmentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepSegmentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepSegmentProto* internal_default_instance() {
    return reinterpret_cast<const StepSegmentProto*>(
               &_StepSegmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StepSegmentProto& a, StepSegmentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StepSegmentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepSegmentProto* New() const final {
    return CreateMaybeMessage<StepSegmentProto>(nullptr);
  }

  StepSegmentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepSegmentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepSegmentProto& from);
  void MergeFrom(const StepSegmentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepSegmentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.StepSegmentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
    kAmplitudeFieldNumber = 2,
    kFrequencyFieldNumber = 3,
  };
  // optional int32 duration = 1;
  bool has_duration() const;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float amplitude = 2;
  bool has_amplitude() const;
  void clear_amplitude();
  float amplitude() const;
  void set_amplitude(float value);

  // optional float frequency = 3;
  bool has_frequency() const;
  void clear_frequency();
  float frequency() const;
  void set_frequency(float value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.StepSegmentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  float amplitude_;
  float frequency_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class RampSegmentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.RampSegmentProto) */ {
 public:
  RampSegmentProto();
  virtual ~RampSegmentProto();

  RampSegmentProto(const RampSegmentProto& from);
  RampSegmentProto(RampSegmentProto&& from) noexcept
    : RampSegmentProto() {
    *this = ::std::move(from);
  }

  inline RampSegmentProto& operator=(const RampSegmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RampSegmentProto& operator=(RampSegmentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RampSegmentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RampSegmentProto* internal_default_instance() {
    return reinterpret_cast<const RampSegmentProto*>(
               &_RampSegmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RampSegmentProto& a, RampSegmentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RampSegmentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RampSegmentProto* New() const final {
    return CreateMaybeMessage<RampSegmentProto>(nullptr);
  }

  RampSegmentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RampSegmentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RampSegmentProto& from);
  void MergeFrom(const RampSegmentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RampSegmentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.RampSegmentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
    kStartAmplitudeFieldNumber = 2,
    kEndAmplitudeFieldNumber = 3,
    kStartFrequencyFieldNumber = 4,
    kEndFrequencyFieldNumber = 5,
  };
  // optional int32 duration = 1;
  bool has_duration() const;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float startAmplitude = 2;
  bool has_startamplitude() const;
  void clear_startamplitude();
  float startamplitude() const;
  void set_startamplitude(float value);

  // optional float endAmplitude = 3;
  bool has_endamplitude() const;
  void clear_endamplitude();
  float endamplitude() const;
  void set_endamplitude(float value);

  // optional float startFrequency = 4;
  bool has_startfrequency() const;
  void clear_startfrequency();
  float startfrequency() const;
  void set_startfrequency(float value);

  // optional float endFrequency = 5;
  bool has_endfrequency() const;
  void clear_endfrequency();
  float endfrequency() const;
  void set_endfrequency(float value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.RampSegmentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  float startamplitude_;
  float endamplitude_;
  float startfrequency_;
  float endfrequency_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PrebakedSegmentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.PrebakedSegmentProto) */ {
 public:
  PrebakedSegmentProto();
  virtual ~PrebakedSegmentProto();

  PrebakedSegmentProto(const PrebakedSegmentProto& from);
  PrebakedSegmentProto(PrebakedSegmentProto&& from) noexcept
    : PrebakedSegmentProto() {
    *this = ::std::move(from);
  }

  inline PrebakedSegmentProto& operator=(const PrebakedSegmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrebakedSegmentProto& operator=(PrebakedSegmentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrebakedSegmentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrebakedSegmentProto* internal_default_instance() {
    return reinterpret_cast<const PrebakedSegmentProto*>(
               &_PrebakedSegmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrebakedSegmentProto& a, PrebakedSegmentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrebakedSegmentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrebakedSegmentProto* New() const final {
    return CreateMaybeMessage<PrebakedSegmentProto>(nullptr);
  }

  PrebakedSegmentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrebakedSegmentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrebakedSegmentProto& from);
  void MergeFrom(const PrebakedSegmentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrebakedSegmentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.PrebakedSegmentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIdFieldNumber = 1,
    kEffectStrengthFieldNumber = 2,
    kFallbackFieldNumber = 3,
  };
  // optional int32 effect_id = 1;
  bool has_effect_id() const;
  void clear_effect_id();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id() const;
  void set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 effect_strength = 2;
  bool has_effect_strength() const;
  void clear_effect_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_strength() const;
  void set_effect_strength(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 fallback = 3;
  bool has_fallback() const;
  void clear_fallback();
  ::PROTOBUF_NAMESPACE_ID::int32 fallback() const;
  void set_fallback(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.PrebakedSegmentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_strength_;
  ::PROTOBUF_NAMESPACE_ID::int32 fallback_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PrimitiveSegmentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.PrimitiveSegmentProto) */ {
 public:
  PrimitiveSegmentProto();
  virtual ~PrimitiveSegmentProto();

  PrimitiveSegmentProto(const PrimitiveSegmentProto& from);
  PrimitiveSegmentProto(PrimitiveSegmentProto&& from) noexcept
    : PrimitiveSegmentProto() {
    *this = ::std::move(from);
  }

  inline PrimitiveSegmentProto& operator=(const PrimitiveSegmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveSegmentProto& operator=(PrimitiveSegmentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrimitiveSegmentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveSegmentProto* internal_default_instance() {
    return reinterpret_cast<const PrimitiveSegmentProto*>(
               &_PrimitiveSegmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrimitiveSegmentProto& a, PrimitiveSegmentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveSegmentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveSegmentProto* New() const final {
    return CreateMaybeMessage<PrimitiveSegmentProto>(nullptr);
  }

  PrimitiveSegmentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrimitiveSegmentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrimitiveSegmentProto& from);
  void MergeFrom(const PrimitiveSegmentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveSegmentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.PrimitiveSegmentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimitiveIdFieldNumber = 1,
    kScaleFieldNumber = 2,
    kDelayFieldNumber = 3,
  };
  // optional int32 primitive_id = 1;
  bool has_primitive_id() const;
  void clear_primitive_id();
  ::PROTOBUF_NAMESPACE_ID::int32 primitive_id() const;
  void set_primitive_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float scale = 2;
  bool has_scale() const;
  void clear_scale();
  float scale() const;
  void set_scale(float value);

  // optional int32 delay = 3;
  bool has_delay() const;
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.PrimitiveSegmentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 primitive_id_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class SegmentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.SegmentProto) */ {
 public:
  SegmentProto();
  virtual ~SegmentProto();

  SegmentProto(const SegmentProto& from);
  SegmentProto(SegmentProto&& from) noexcept
    : SegmentProto() {
    *this = ::std::move(from);
  }

  inline SegmentProto& operator=(const SegmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentProto& operator=(SegmentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentProto* internal_default_instance() {
    return reinterpret_cast<const SegmentProto*>(
               &_SegmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SegmentProto& a, SegmentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentProto* New() const final {
    return CreateMaybeMessage<SegmentProto>(nullptr);
  }

  SegmentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentProto& from);
  void MergeFrom(const SegmentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.SegmentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrebakedFieldNumber = 1,
    kPrimitiveFieldNumber = 2,
    kStepFieldNumber = 3,
    kRampFieldNumber = 4,
  };
  // optional .com.android.server.vibrator.PrebakedSegmentProto prebaked = 1;
  bool has_prebaked() const;
  void clear_prebaked();
  const ::com::android::server::vibrator::PrebakedSegmentProto& prebaked() const;
  ::com::android::server::vibrator::PrebakedSegmentProto* release_prebaked();
  ::com::android::server::vibrator::PrebakedSegmentProto* mutable_prebaked();
  void set_allocated_prebaked(::com::android::server::vibrator::PrebakedSegmentProto* prebaked);

  // optional .com.android.server.vibrator.PrimitiveSegmentProto primitive = 2;
  bool has_primitive() const;
  void clear_primitive();
  const ::com::android::server::vibrator::PrimitiveSegmentProto& primitive() const;
  ::com::android::server::vibrator::PrimitiveSegmentProto* release_primitive();
  ::com::android::server::vibrator::PrimitiveSegmentProto* mutable_primitive();
  void set_allocated_primitive(::com::android::server::vibrator::PrimitiveSegmentProto* primitive);

  // optional .com.android.server.vibrator.StepSegmentProto step = 3;
  bool has_step() const;
  void clear_step();
  const ::com::android::server::vibrator::StepSegmentProto& step() const;
  ::com::android::server::vibrator::StepSegmentProto* release_step();
  ::com::android::server::vibrator::StepSegmentProto* mutable_step();
  void set_allocated_step(::com::android::server::vibrator::StepSegmentProto* step);

  // optional .com.android.server.vibrator.RampSegmentProto ramp = 4;
  bool has_ramp() const;
  void clear_ramp();
  const ::com::android::server::vibrator::RampSegmentProto& ramp() const;
  ::com::android::server::vibrator::RampSegmentProto* release_ramp();
  ::com::android::server::vibrator::RampSegmentProto* mutable_ramp();
  void set_allocated_ramp(::com::android::server::vibrator::RampSegmentProto* ramp);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.SegmentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::vibrator::PrebakedSegmentProto* prebaked_;
  ::com::android::server::vibrator::PrimitiveSegmentProto* primitive_;
  ::com::android::server::vibrator::StepSegmentProto* step_;
  ::com::android::server::vibrator::RampSegmentProto* ramp_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class VibrationEffectProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.VibrationEffectProto) */ {
 public:
  VibrationEffectProto();
  virtual ~VibrationEffectProto();

  VibrationEffectProto(const VibrationEffectProto& from);
  VibrationEffectProto(VibrationEffectProto&& from) noexcept
    : VibrationEffectProto() {
    *this = ::std::move(from);
  }

  inline VibrationEffectProto& operator=(const VibrationEffectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VibrationEffectProto& operator=(VibrationEffectProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VibrationEffectProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VibrationEffectProto* internal_default_instance() {
    return reinterpret_cast<const VibrationEffectProto*>(
               &_VibrationEffectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VibrationEffectProto& a, VibrationEffectProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VibrationEffectProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VibrationEffectProto* New() const final {
    return CreateMaybeMessage<VibrationEffectProto>(nullptr);
  }

  VibrationEffectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VibrationEffectProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VibrationEffectProto& from);
  void MergeFrom(const VibrationEffectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VibrationEffectProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.VibrationEffectProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
    kRepeatFieldNumber = 2,
  };
  // optional .com.android.server.vibrator.SegmentProto segments = 1;
  bool has_segments() const;
  void clear_segments();
  const ::com::android::server::vibrator::SegmentProto& segments() const;
  ::com::android::server::vibrator::SegmentProto* release_segments();
  ::com::android::server::vibrator::SegmentProto* mutable_segments();
  void set_allocated_segments(::com::android::server::vibrator::SegmentProto* segments);

  // required int32 repeat = 2;
  bool has_repeat() const;
  void clear_repeat();
  ::PROTOBUF_NAMESPACE_ID::int32 repeat() const;
  void set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.VibrationEffectProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::vibrator::SegmentProto* segments_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeat_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class SyncVibrationEffectProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.SyncVibrationEffectProto) */ {
 public:
  SyncVibrationEffectProto();
  virtual ~SyncVibrationEffectProto();

  SyncVibrationEffectProto(const SyncVibrationEffectProto& from);
  SyncVibrationEffectProto(SyncVibrationEffectProto&& from) noexcept
    : SyncVibrationEffectProto() {
    *this = ::std::move(from);
  }

  inline SyncVibrationEffectProto& operator=(const SyncVibrationEffectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncVibrationEffectProto& operator=(SyncVibrationEffectProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncVibrationEffectProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncVibrationEffectProto* internal_default_instance() {
    return reinterpret_cast<const SyncVibrationEffectProto*>(
               &_SyncVibrationEffectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SyncVibrationEffectProto& a, SyncVibrationEffectProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncVibrationEffectProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncVibrationEffectProto* New() const final {
    return CreateMaybeMessage<SyncVibrationEffectProto>(nullptr);
  }

  SyncVibrationEffectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncVibrationEffectProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncVibrationEffectProto& from);
  void MergeFrom(const SyncVibrationEffectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncVibrationEffectProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.SyncVibrationEffectProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 1,
    kVibratorIdsFieldNumber = 2,
  };
  // repeated .com.android.server.vibrator.VibrationEffectProto effects = 1;
  int effects_size() const;
  void clear_effects();
  ::com::android::server::vibrator::VibrationEffectProto* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationEffectProto >*
      mutable_effects();
  const ::com::android::server::vibrator::VibrationEffectProto& effects(int index) const;
  ::com::android::server::vibrator::VibrationEffectProto* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationEffectProto >&
      effects() const;

  // repeated int32 vibrator_ids = 2;
  int vibrator_ids_size() const;
  void clear_vibrator_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 vibrator_ids(int index) const;
  void set_vibrator_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_vibrator_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      vibrator_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_vibrator_ids();

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.SyncVibrationEffectProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationEffectProto > effects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > vibrator_ids_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class CombinedVibrationEffectProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.CombinedVibrationEffectProto) */ {
 public:
  CombinedVibrationEffectProto();
  virtual ~CombinedVibrationEffectProto();

  CombinedVibrationEffectProto(const CombinedVibrationEffectProto& from);
  CombinedVibrationEffectProto(CombinedVibrationEffectProto&& from) noexcept
    : CombinedVibrationEffectProto() {
    *this = ::std::move(from);
  }

  inline CombinedVibrationEffectProto& operator=(const CombinedVibrationEffectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CombinedVibrationEffectProto& operator=(CombinedVibrationEffectProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CombinedVibrationEffectProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CombinedVibrationEffectProto* internal_default_instance() {
    return reinterpret_cast<const CombinedVibrationEffectProto*>(
               &_CombinedVibrationEffectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CombinedVibrationEffectProto& a, CombinedVibrationEffectProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CombinedVibrationEffectProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CombinedVibrationEffectProto* New() const final {
    return CreateMaybeMessage<CombinedVibrationEffectProto>(nullptr);
  }

  CombinedVibrationEffectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CombinedVibrationEffectProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CombinedVibrationEffectProto& from);
  void MergeFrom(const CombinedVibrationEffectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CombinedVibrationEffectProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.CombinedVibrationEffectProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 1,
    kDelaysFieldNumber = 2,
  };
  // repeated .com.android.server.vibrator.SyncVibrationEffectProto effects = 1;
  int effects_size() const;
  void clear_effects();
  ::com::android::server::vibrator::SyncVibrationEffectProto* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::SyncVibrationEffectProto >*
      mutable_effects();
  const ::com::android::server::vibrator::SyncVibrationEffectProto& effects(int index) const;
  ::com::android::server::vibrator::SyncVibrationEffectProto* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::SyncVibrationEffectProto >&
      effects() const;

  // repeated int32 delays = 2;
  int delays_size() const;
  void clear_delays();
  ::PROTOBUF_NAMESPACE_ID::int32 delays(int index) const;
  void set_delays(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_delays(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      delays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_delays();

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.CombinedVibrationEffectProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::SyncVibrationEffectProto > effects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > delays_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class VibrationAttributesProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.VibrationAttributesProto) */ {
 public:
  VibrationAttributesProto();
  virtual ~VibrationAttributesProto();

  VibrationAttributesProto(const VibrationAttributesProto& from);
  VibrationAttributesProto(VibrationAttributesProto&& from) noexcept
    : VibrationAttributesProto() {
    *this = ::std::move(from);
  }

  inline VibrationAttributesProto& operator=(const VibrationAttributesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VibrationAttributesProto& operator=(VibrationAttributesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VibrationAttributesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VibrationAttributesProto* internal_default_instance() {
    return reinterpret_cast<const VibrationAttributesProto*>(
               &_VibrationAttributesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VibrationAttributesProto& a, VibrationAttributesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VibrationAttributesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VibrationAttributesProto* New() const final {
    return CreateMaybeMessage<VibrationAttributesProto>(nullptr);
  }

  VibrationAttributesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VibrationAttributesProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VibrationAttributesProto& from);
  void MergeFrom(const VibrationAttributesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VibrationAttributesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.VibrationAttributesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageFieldNumber = 1,
    kAudioUsageFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // optional int32 usage = 1;
  bool has_usage() const;
  void clear_usage();
  ::PROTOBUF_NAMESPACE_ID::int32 usage() const;
  void set_usage(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 audio_usage = 2;
  bool has_audio_usage() const;
  void clear_audio_usage();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_usage() const;
  void set_audio_usage(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.VibrationAttributesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 usage_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_usage_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class VibrationProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.VibrationProto) */ {
 public:
  VibrationProto();
  virtual ~VibrationProto();

  VibrationProto(const VibrationProto& from);
  VibrationProto(VibrationProto&& from) noexcept
    : VibrationProto() {
    *this = ::std::move(from);
  }

  inline VibrationProto& operator=(const VibrationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VibrationProto& operator=(VibrationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VibrationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VibrationProto* internal_default_instance() {
    return reinterpret_cast<const VibrationProto*>(
               &_VibrationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VibrationProto& a, VibrationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VibrationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VibrationProto* New() const final {
    return CreateMaybeMessage<VibrationProto>(nullptr);
  }

  VibrationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VibrationProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VibrationProto& from);
  void MergeFrom(const VibrationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VibrationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.VibrationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectFieldNumber = 3,
    kOriginalEffectFieldNumber = 4,
    kAttributesFieldNumber = 5,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kStatusFieldNumber = 6,
  };
  // optional .com.android.server.vibrator.CombinedVibrationEffectProto effect = 3;
  bool has_effect() const;
  void clear_effect();
  const ::com::android::server::vibrator::CombinedVibrationEffectProto& effect() const;
  ::com::android::server::vibrator::CombinedVibrationEffectProto* release_effect();
  ::com::android::server::vibrator::CombinedVibrationEffectProto* mutable_effect();
  void set_allocated_effect(::com::android::server::vibrator::CombinedVibrationEffectProto* effect);

  // optional .com.android.server.vibrator.CombinedVibrationEffectProto original_effect = 4;
  bool has_original_effect() const;
  void clear_original_effect();
  const ::com::android::server::vibrator::CombinedVibrationEffectProto& original_effect() const;
  ::com::android::server::vibrator::CombinedVibrationEffectProto* release_original_effect();
  ::com::android::server::vibrator::CombinedVibrationEffectProto* mutable_original_effect();
  void set_allocated_original_effect(::com::android::server::vibrator::CombinedVibrationEffectProto* original_effect);

  // optional .com.android.server.vibrator.VibrationAttributesProto attributes = 5;
  bool has_attributes() const;
  void clear_attributes();
  const ::com::android::server::vibrator::VibrationAttributesProto& attributes() const;
  ::com::android::server::vibrator::VibrationAttributesProto* release_attributes();
  ::com::android::server::vibrator::VibrationAttributesProto* mutable_attributes();
  void set_allocated_attributes(::com::android::server::vibrator::VibrationAttributesProto* attributes);

  // optional int64 start_time = 1;
  bool has_start_time() const;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 status = 6;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.VibrationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::vibrator::CombinedVibrationEffectProto* effect_;
  ::com::android::server::vibrator::CombinedVibrationEffectProto* original_effect_;
  ::com::android::server::vibrator::VibrationAttributesProto* attributes_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// -------------------------------------------------------------------

class VibratorManagerServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.vibrator.VibratorManagerServiceDumpProto) */ {
 public:
  VibratorManagerServiceDumpProto();
  virtual ~VibratorManagerServiceDumpProto();

  VibratorManagerServiceDumpProto(const VibratorManagerServiceDumpProto& from);
  VibratorManagerServiceDumpProto(VibratorManagerServiceDumpProto&& from) noexcept
    : VibratorManagerServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline VibratorManagerServiceDumpProto& operator=(const VibratorManagerServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VibratorManagerServiceDumpProto& operator=(VibratorManagerServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VibratorManagerServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VibratorManagerServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const VibratorManagerServiceDumpProto*>(
               &_VibratorManagerServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VibratorManagerServiceDumpProto& a, VibratorManagerServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VibratorManagerServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VibratorManagerServiceDumpProto* New() const final {
    return CreateMaybeMessage<VibratorManagerServiceDumpProto>(nullptr);
  }

  VibratorManagerServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VibratorManagerServiceDumpProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VibratorManagerServiceDumpProto& from);
  void MergeFrom(const VibratorManagerServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VibratorManagerServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.vibrator.VibratorManagerServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVibratorIdsFieldNumber = 1,
    kPreviousRingVibrationsFieldNumber = 13,
    kPreviousNotificationVibrationsFieldNumber = 14,
    kPreviousAlarmVibrationsFieldNumber = 15,
    kPreviousVibrationsFieldNumber = 16,
    kPreviousExternalVibrationsFieldNumber = 17,
    kCurrentVibrationFieldNumber = 2,
    kCurrentExternalVibrationFieldNumber = 4,
    kIsVibratingFieldNumber = 3,
    kVibratorUnderExternalControlFieldNumber = 5,
    kLowPowerModeFieldNumber = 6,
    kHapticFeedbackIntensityFieldNumber = 7,
    kHapticFeedbackDefaultIntensityFieldNumber = 8,
    kNotificationIntensityFieldNumber = 9,
    kNotificationDefaultIntensityFieldNumber = 10,
    kRingIntensityFieldNumber = 11,
    kRingDefaultIntensityFieldNumber = 12,
  };
  // repeated int32 vibrator_ids = 1;
  int vibrator_ids_size() const;
  void clear_vibrator_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 vibrator_ids(int index) const;
  void set_vibrator_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_vibrator_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      vibrator_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_vibrator_ids();

  // repeated .com.android.server.vibrator.VibrationProto previous_ring_vibrations = 13;
  int previous_ring_vibrations_size() const;
  void clear_previous_ring_vibrations();
  ::com::android::server::vibrator::VibrationProto* mutable_previous_ring_vibrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
      mutable_previous_ring_vibrations();
  const ::com::android::server::vibrator::VibrationProto& previous_ring_vibrations(int index) const;
  ::com::android::server::vibrator::VibrationProto* add_previous_ring_vibrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
      previous_ring_vibrations() const;

  // repeated .com.android.server.vibrator.VibrationProto previous_notification_vibrations = 14;
  int previous_notification_vibrations_size() const;
  void clear_previous_notification_vibrations();
  ::com::android::server::vibrator::VibrationProto* mutable_previous_notification_vibrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
      mutable_previous_notification_vibrations();
  const ::com::android::server::vibrator::VibrationProto& previous_notification_vibrations(int index) const;
  ::com::android::server::vibrator::VibrationProto* add_previous_notification_vibrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
      previous_notification_vibrations() const;

  // repeated .com.android.server.vibrator.VibrationProto previous_alarm_vibrations = 15;
  int previous_alarm_vibrations_size() const;
  void clear_previous_alarm_vibrations();
  ::com::android::server::vibrator::VibrationProto* mutable_previous_alarm_vibrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
      mutable_previous_alarm_vibrations();
  const ::com::android::server::vibrator::VibrationProto& previous_alarm_vibrations(int index) const;
  ::com::android::server::vibrator::VibrationProto* add_previous_alarm_vibrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
      previous_alarm_vibrations() const;

  // repeated .com.android.server.vibrator.VibrationProto previous_vibrations = 16;
  int previous_vibrations_size() const;
  void clear_previous_vibrations();
  ::com::android::server::vibrator::VibrationProto* mutable_previous_vibrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
      mutable_previous_vibrations();
  const ::com::android::server::vibrator::VibrationProto& previous_vibrations(int index) const;
  ::com::android::server::vibrator::VibrationProto* add_previous_vibrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
      previous_vibrations() const;

  // repeated .com.android.server.vibrator.VibrationProto previous_external_vibrations = 17;
  int previous_external_vibrations_size() const;
  void clear_previous_external_vibrations();
  ::com::android::server::vibrator::VibrationProto* mutable_previous_external_vibrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
      mutable_previous_external_vibrations();
  const ::com::android::server::vibrator::VibrationProto& previous_external_vibrations(int index) const;
  ::com::android::server::vibrator::VibrationProto* add_previous_external_vibrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
      previous_external_vibrations() const;

  // optional .com.android.server.vibrator.VibrationProto current_vibration = 2;
  bool has_current_vibration() const;
  void clear_current_vibration();
  const ::com::android::server::vibrator::VibrationProto& current_vibration() const;
  ::com::android::server::vibrator::VibrationProto* release_current_vibration();
  ::com::android::server::vibrator::VibrationProto* mutable_current_vibration();
  void set_allocated_current_vibration(::com::android::server::vibrator::VibrationProto* current_vibration);

  // optional .com.android.server.vibrator.VibrationProto current_external_vibration = 4;
  bool has_current_external_vibration() const;
  void clear_current_external_vibration();
  const ::com::android::server::vibrator::VibrationProto& current_external_vibration() const;
  ::com::android::server::vibrator::VibrationProto* release_current_external_vibration();
  ::com::android::server::vibrator::VibrationProto* mutable_current_external_vibration();
  void set_allocated_current_external_vibration(::com::android::server::vibrator::VibrationProto* current_external_vibration);

  // optional bool is_vibrating = 3;
  bool has_is_vibrating() const;
  void clear_is_vibrating();
  bool is_vibrating() const;
  void set_is_vibrating(bool value);

  // optional bool vibrator_under_external_control = 5;
  bool has_vibrator_under_external_control() const;
  void clear_vibrator_under_external_control();
  bool vibrator_under_external_control() const;
  void set_vibrator_under_external_control(bool value);

  // optional bool low_power_mode = 6;
  bool has_low_power_mode() const;
  void clear_low_power_mode();
  bool low_power_mode() const;
  void set_low_power_mode(bool value);

  // optional int32 haptic_feedback_intensity = 7;
  bool has_haptic_feedback_intensity() const;
  void clear_haptic_feedback_intensity();
  ::PROTOBUF_NAMESPACE_ID::int32 haptic_feedback_intensity() const;
  void set_haptic_feedback_intensity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 haptic_feedback_default_intensity = 8;
  bool has_haptic_feedback_default_intensity() const;
  void clear_haptic_feedback_default_intensity();
  ::PROTOBUF_NAMESPACE_ID::int32 haptic_feedback_default_intensity() const;
  void set_haptic_feedback_default_intensity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 notification_intensity = 9;
  bool has_notification_intensity() const;
  void clear_notification_intensity();
  ::PROTOBUF_NAMESPACE_ID::int32 notification_intensity() const;
  void set_notification_intensity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 notification_default_intensity = 10;
  bool has_notification_default_intensity() const;
  void clear_notification_default_intensity();
  ::PROTOBUF_NAMESPACE_ID::int32 notification_default_intensity() const;
  void set_notification_default_intensity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ring_intensity = 11;
  bool has_ring_intensity() const;
  void clear_ring_intensity();
  ::PROTOBUF_NAMESPACE_ID::int32 ring_intensity() const;
  void set_ring_intensity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ring_default_intensity = 12;
  bool has_ring_default_intensity() const;
  void clear_ring_default_intensity();
  ::PROTOBUF_NAMESPACE_ID::int32 ring_default_intensity() const;
  void set_ring_default_intensity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.vibrator.VibratorManagerServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > vibrator_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto > previous_ring_vibrations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto > previous_notification_vibrations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto > previous_alarm_vibrations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto > previous_vibrations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto > previous_external_vibrations_;
  ::com::android::server::vibrator::VibrationProto* current_vibration_;
  ::com::android::server::vibrator::VibrationProto* current_external_vibration_;
  bool is_vibrating_;
  bool vibrator_under_external_control_;
  bool low_power_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 haptic_feedback_intensity_;
  ::PROTOBUF_NAMESPACE_ID::int32 haptic_feedback_default_intensity_;
  ::PROTOBUF_NAMESPACE_ID::int32 notification_intensity_;
  ::PROTOBUF_NAMESPACE_ID::int32 notification_default_intensity_;
  ::PROTOBUF_NAMESPACE_ID::int32 ring_intensity_;
  ::PROTOBUF_NAMESPACE_ID::int32 ring_default_intensity_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StepSegmentProto

// optional int32 duration = 1;
inline bool StepSegmentProto::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StepSegmentProto::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StepSegmentProto::duration() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.StepSegmentProto.duration)
  return duration_;
}
inline void StepSegmentProto::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.StepSegmentProto.duration)
}

// optional float amplitude = 2;
inline bool StepSegmentProto::has_amplitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StepSegmentProto::clear_amplitude() {
  amplitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float StepSegmentProto::amplitude() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.StepSegmentProto.amplitude)
  return amplitude_;
}
inline void StepSegmentProto::set_amplitude(float value) {
  _has_bits_[0] |= 0x00000002u;
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.StepSegmentProto.amplitude)
}

// optional float frequency = 3;
inline bool StepSegmentProto::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StepSegmentProto::clear_frequency() {
  frequency_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float StepSegmentProto::frequency() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.StepSegmentProto.frequency)
  return frequency_;
}
inline void StepSegmentProto::set_frequency(float value) {
  _has_bits_[0] |= 0x00000004u;
  frequency_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.StepSegmentProto.frequency)
}

// -------------------------------------------------------------------

// RampSegmentProto

// optional int32 duration = 1;
inline bool RampSegmentProto::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RampSegmentProto::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RampSegmentProto::duration() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.RampSegmentProto.duration)
  return duration_;
}
inline void RampSegmentProto::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.RampSegmentProto.duration)
}

// optional float startAmplitude = 2;
inline bool RampSegmentProto::has_startamplitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RampSegmentProto::clear_startamplitude() {
  startamplitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RampSegmentProto::startamplitude() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.RampSegmentProto.startAmplitude)
  return startamplitude_;
}
inline void RampSegmentProto::set_startamplitude(float value) {
  _has_bits_[0] |= 0x00000002u;
  startamplitude_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.RampSegmentProto.startAmplitude)
}

// optional float endAmplitude = 3;
inline bool RampSegmentProto::has_endamplitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RampSegmentProto::clear_endamplitude() {
  endamplitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RampSegmentProto::endamplitude() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.RampSegmentProto.endAmplitude)
  return endamplitude_;
}
inline void RampSegmentProto::set_endamplitude(float value) {
  _has_bits_[0] |= 0x00000004u;
  endamplitude_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.RampSegmentProto.endAmplitude)
}

// optional float startFrequency = 4;
inline bool RampSegmentProto::has_startfrequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RampSegmentProto::clear_startfrequency() {
  startfrequency_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RampSegmentProto::startfrequency() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.RampSegmentProto.startFrequency)
  return startfrequency_;
}
inline void RampSegmentProto::set_startfrequency(float value) {
  _has_bits_[0] |= 0x00000008u;
  startfrequency_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.RampSegmentProto.startFrequency)
}

// optional float endFrequency = 5;
inline bool RampSegmentProto::has_endfrequency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RampSegmentProto::clear_endfrequency() {
  endfrequency_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RampSegmentProto::endfrequency() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.RampSegmentProto.endFrequency)
  return endfrequency_;
}
inline void RampSegmentProto::set_endfrequency(float value) {
  _has_bits_[0] |= 0x00000010u;
  endfrequency_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.RampSegmentProto.endFrequency)
}

// -------------------------------------------------------------------

// PrebakedSegmentProto

// optional int32 effect_id = 1;
inline bool PrebakedSegmentProto::has_effect_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrebakedSegmentProto::clear_effect_id() {
  effect_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrebakedSegmentProto::effect_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.PrebakedSegmentProto.effect_id)
  return effect_id_;
}
inline void PrebakedSegmentProto::set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  effect_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.PrebakedSegmentProto.effect_id)
}

// optional int32 effect_strength = 2;
inline bool PrebakedSegmentProto::has_effect_strength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrebakedSegmentProto::clear_effect_strength() {
  effect_strength_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrebakedSegmentProto::effect_strength() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.PrebakedSegmentProto.effect_strength)
  return effect_strength_;
}
inline void PrebakedSegmentProto::set_effect_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  effect_strength_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.PrebakedSegmentProto.effect_strength)
}

// optional int32 fallback = 3;
inline bool PrebakedSegmentProto::has_fallback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrebakedSegmentProto::clear_fallback() {
  fallback_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrebakedSegmentProto::fallback() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.PrebakedSegmentProto.fallback)
  return fallback_;
}
inline void PrebakedSegmentProto::set_fallback(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  fallback_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.PrebakedSegmentProto.fallback)
}

// -------------------------------------------------------------------

// PrimitiveSegmentProto

// optional int32 primitive_id = 1;
inline bool PrimitiveSegmentProto::has_primitive_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrimitiveSegmentProto::clear_primitive_id() {
  primitive_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimitiveSegmentProto::primitive_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.PrimitiveSegmentProto.primitive_id)
  return primitive_id_;
}
inline void PrimitiveSegmentProto::set_primitive_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  primitive_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.PrimitiveSegmentProto.primitive_id)
}

// optional float scale = 2;
inline bool PrimitiveSegmentProto::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrimitiveSegmentProto::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PrimitiveSegmentProto::scale() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.PrimitiveSegmentProto.scale)
  return scale_;
}
inline void PrimitiveSegmentProto::set_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.PrimitiveSegmentProto.scale)
}

// optional int32 delay = 3;
inline bool PrimitiveSegmentProto::has_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrimitiveSegmentProto::clear_delay() {
  delay_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimitiveSegmentProto::delay() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.PrimitiveSegmentProto.delay)
  return delay_;
}
inline void PrimitiveSegmentProto::set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  delay_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.PrimitiveSegmentProto.delay)
}

// -------------------------------------------------------------------

// SegmentProto

// optional .com.android.server.vibrator.PrebakedSegmentProto prebaked = 1;
inline bool SegmentProto::has_prebaked() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentProto::clear_prebaked() {
  if (prebaked_ != nullptr) prebaked_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::vibrator::PrebakedSegmentProto& SegmentProto::prebaked() const {
  const ::com::android::server::vibrator::PrebakedSegmentProto* p = prebaked_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.SegmentProto.prebaked)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::PrebakedSegmentProto*>(
      &::com::android::server::vibrator::_PrebakedSegmentProto_default_instance_);
}
inline ::com::android::server::vibrator::PrebakedSegmentProto* SegmentProto::release_prebaked() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.SegmentProto.prebaked)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::vibrator::PrebakedSegmentProto* temp = prebaked_;
  prebaked_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::PrebakedSegmentProto* SegmentProto::mutable_prebaked() {
  _has_bits_[0] |= 0x00000001u;
  if (prebaked_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::PrebakedSegmentProto>(GetArenaNoVirtual());
    prebaked_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.SegmentProto.prebaked)
  return prebaked_;
}
inline void SegmentProto::set_allocated_prebaked(::com::android::server::vibrator::PrebakedSegmentProto* prebaked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prebaked_;
  }
  if (prebaked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prebaked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prebaked, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prebaked_ = prebaked;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.SegmentProto.prebaked)
}

// optional .com.android.server.vibrator.PrimitiveSegmentProto primitive = 2;
inline bool SegmentProto::has_primitive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentProto::clear_primitive() {
  if (primitive_ != nullptr) primitive_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::vibrator::PrimitiveSegmentProto& SegmentProto::primitive() const {
  const ::com::android::server::vibrator::PrimitiveSegmentProto* p = primitive_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.SegmentProto.primitive)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::PrimitiveSegmentProto*>(
      &::com::android::server::vibrator::_PrimitiveSegmentProto_default_instance_);
}
inline ::com::android::server::vibrator::PrimitiveSegmentProto* SegmentProto::release_primitive() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.SegmentProto.primitive)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::vibrator::PrimitiveSegmentProto* temp = primitive_;
  primitive_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::PrimitiveSegmentProto* SegmentProto::mutable_primitive() {
  _has_bits_[0] |= 0x00000002u;
  if (primitive_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::PrimitiveSegmentProto>(GetArenaNoVirtual());
    primitive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.SegmentProto.primitive)
  return primitive_;
}
inline void SegmentProto::set_allocated_primitive(::com::android::server::vibrator::PrimitiveSegmentProto* primitive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete primitive_;
  }
  if (primitive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      primitive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primitive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  primitive_ = primitive;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.SegmentProto.primitive)
}

// optional .com.android.server.vibrator.StepSegmentProto step = 3;
inline bool SegmentProto::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SegmentProto::clear_step() {
  if (step_ != nullptr) step_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::vibrator::StepSegmentProto& SegmentProto::step() const {
  const ::com::android::server::vibrator::StepSegmentProto* p = step_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.SegmentProto.step)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::StepSegmentProto*>(
      &::com::android::server::vibrator::_StepSegmentProto_default_instance_);
}
inline ::com::android::server::vibrator::StepSegmentProto* SegmentProto::release_step() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.SegmentProto.step)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::vibrator::StepSegmentProto* temp = step_;
  step_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::StepSegmentProto* SegmentProto::mutable_step() {
  _has_bits_[0] |= 0x00000004u;
  if (step_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::StepSegmentProto>(GetArenaNoVirtual());
    step_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.SegmentProto.step)
  return step_;
}
inline void SegmentProto::set_allocated_step(::com::android::server::vibrator::StepSegmentProto* step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete step_;
  }
  if (step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  step_ = step;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.SegmentProto.step)
}

// optional .com.android.server.vibrator.RampSegmentProto ramp = 4;
inline bool SegmentProto::has_ramp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SegmentProto::clear_ramp() {
  if (ramp_ != nullptr) ramp_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::vibrator::RampSegmentProto& SegmentProto::ramp() const {
  const ::com::android::server::vibrator::RampSegmentProto* p = ramp_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.SegmentProto.ramp)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::RampSegmentProto*>(
      &::com::android::server::vibrator::_RampSegmentProto_default_instance_);
}
inline ::com::android::server::vibrator::RampSegmentProto* SegmentProto::release_ramp() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.SegmentProto.ramp)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::vibrator::RampSegmentProto* temp = ramp_;
  ramp_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::RampSegmentProto* SegmentProto::mutable_ramp() {
  _has_bits_[0] |= 0x00000008u;
  if (ramp_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::RampSegmentProto>(GetArenaNoVirtual());
    ramp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.SegmentProto.ramp)
  return ramp_;
}
inline void SegmentProto::set_allocated_ramp(::com::android::server::vibrator::RampSegmentProto* ramp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ramp_;
  }
  if (ramp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ramp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ramp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ramp_ = ramp;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.SegmentProto.ramp)
}

// -------------------------------------------------------------------

// VibrationEffectProto

// optional .com.android.server.vibrator.SegmentProto segments = 1;
inline bool VibrationEffectProto::has_segments() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibrationEffectProto::clear_segments() {
  if (segments_ != nullptr) segments_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::vibrator::SegmentProto& VibrationEffectProto::segments() const {
  const ::com::android::server::vibrator::SegmentProto* p = segments_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationEffectProto.segments)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::SegmentProto*>(
      &::com::android::server::vibrator::_SegmentProto_default_instance_);
}
inline ::com::android::server::vibrator::SegmentProto* VibrationEffectProto::release_segments() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.VibrationEffectProto.segments)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::vibrator::SegmentProto* temp = segments_;
  segments_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::SegmentProto* VibrationEffectProto::mutable_segments() {
  _has_bits_[0] |= 0x00000001u;
  if (segments_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::SegmentProto>(GetArenaNoVirtual());
    segments_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibrationEffectProto.segments)
  return segments_;
}
inline void VibrationEffectProto::set_allocated_segments(::com::android::server::vibrator::SegmentProto* segments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete segments_;
  }
  if (segments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      segments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segments, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  segments_ = segments;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.VibrationEffectProto.segments)
}

// required int32 repeat = 2;
inline bool VibrationEffectProto::has_repeat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VibrationEffectProto::clear_repeat() {
  repeat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibrationEffectProto::repeat() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationEffectProto.repeat)
  return repeat_;
}
inline void VibrationEffectProto::set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  repeat_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibrationEffectProto.repeat)
}

// -------------------------------------------------------------------

// SyncVibrationEffectProto

// repeated .com.android.server.vibrator.VibrationEffectProto effects = 1;
inline int SyncVibrationEffectProto::effects_size() const {
  return effects_.size();
}
inline void SyncVibrationEffectProto::clear_effects() {
  effects_.Clear();
}
inline ::com::android::server::vibrator::VibrationEffectProto* SyncVibrationEffectProto::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.SyncVibrationEffectProto.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationEffectProto >*
SyncVibrationEffectProto::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.SyncVibrationEffectProto.effects)
  return &effects_;
}
inline const ::com::android::server::vibrator::VibrationEffectProto& SyncVibrationEffectProto::effects(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.SyncVibrationEffectProto.effects)
  return effects_.Get(index);
}
inline ::com::android::server::vibrator::VibrationEffectProto* SyncVibrationEffectProto::add_effects() {
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.SyncVibrationEffectProto.effects)
  return effects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationEffectProto >&
SyncVibrationEffectProto::effects() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.SyncVibrationEffectProto.effects)
  return effects_;
}

// repeated int32 vibrator_ids = 2;
inline int SyncVibrationEffectProto::vibrator_ids_size() const {
  return vibrator_ids_.size();
}
inline void SyncVibrationEffectProto::clear_vibrator_ids() {
  vibrator_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncVibrationEffectProto::vibrator_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.SyncVibrationEffectProto.vibrator_ids)
  return vibrator_ids_.Get(index);
}
inline void SyncVibrationEffectProto::set_vibrator_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  vibrator_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.SyncVibrationEffectProto.vibrator_ids)
}
inline void SyncVibrationEffectProto::add_vibrator_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  vibrator_ids_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.SyncVibrationEffectProto.vibrator_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SyncVibrationEffectProto::vibrator_ids() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.SyncVibrationEffectProto.vibrator_ids)
  return vibrator_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SyncVibrationEffectProto::mutable_vibrator_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.SyncVibrationEffectProto.vibrator_ids)
  return &vibrator_ids_;
}

// -------------------------------------------------------------------

// CombinedVibrationEffectProto

// repeated .com.android.server.vibrator.SyncVibrationEffectProto effects = 1;
inline int CombinedVibrationEffectProto::effects_size() const {
  return effects_.size();
}
inline void CombinedVibrationEffectProto::clear_effects() {
  effects_.Clear();
}
inline ::com::android::server::vibrator::SyncVibrationEffectProto* CombinedVibrationEffectProto::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.CombinedVibrationEffectProto.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::SyncVibrationEffectProto >*
CombinedVibrationEffectProto::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.CombinedVibrationEffectProto.effects)
  return &effects_;
}
inline const ::com::android::server::vibrator::SyncVibrationEffectProto& CombinedVibrationEffectProto::effects(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.CombinedVibrationEffectProto.effects)
  return effects_.Get(index);
}
inline ::com::android::server::vibrator::SyncVibrationEffectProto* CombinedVibrationEffectProto::add_effects() {
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.CombinedVibrationEffectProto.effects)
  return effects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::SyncVibrationEffectProto >&
CombinedVibrationEffectProto::effects() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.CombinedVibrationEffectProto.effects)
  return effects_;
}

// repeated int32 delays = 2;
inline int CombinedVibrationEffectProto::delays_size() const {
  return delays_.size();
}
inline void CombinedVibrationEffectProto::clear_delays() {
  delays_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CombinedVibrationEffectProto::delays(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.CombinedVibrationEffectProto.delays)
  return delays_.Get(index);
}
inline void CombinedVibrationEffectProto::set_delays(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  delays_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.CombinedVibrationEffectProto.delays)
}
inline void CombinedVibrationEffectProto::add_delays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  delays_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.CombinedVibrationEffectProto.delays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CombinedVibrationEffectProto::delays() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.CombinedVibrationEffectProto.delays)
  return delays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CombinedVibrationEffectProto::mutable_delays() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.CombinedVibrationEffectProto.delays)
  return &delays_;
}

// -------------------------------------------------------------------

// VibrationAttributesProto

// optional int32 usage = 1;
inline bool VibrationAttributesProto::has_usage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibrationAttributesProto::clear_usage() {
  usage_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibrationAttributesProto::usage() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationAttributesProto.usage)
  return usage_;
}
inline void VibrationAttributesProto::set_usage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  usage_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibrationAttributesProto.usage)
}

// optional int32 audio_usage = 2;
inline bool VibrationAttributesProto::has_audio_usage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VibrationAttributesProto::clear_audio_usage() {
  audio_usage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibrationAttributesProto::audio_usage() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationAttributesProto.audio_usage)
  return audio_usage_;
}
inline void VibrationAttributesProto::set_audio_usage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  audio_usage_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibrationAttributesProto.audio_usage)
}

// optional int32 flags = 3;
inline bool VibrationAttributesProto::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VibrationAttributesProto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibrationAttributesProto::flags() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationAttributesProto.flags)
  return flags_;
}
inline void VibrationAttributesProto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibrationAttributesProto.flags)
}

// -------------------------------------------------------------------

// VibrationProto

// optional int64 start_time = 1;
inline bool VibrationProto::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VibrationProto::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VibrationProto::start_time() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationProto.start_time)
  return start_time_;
}
inline void VibrationProto::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_time_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibrationProto.start_time)
}

// optional int64 end_time = 2;
inline bool VibrationProto::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VibrationProto::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VibrationProto::end_time() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationProto.end_time)
  return end_time_;
}
inline void VibrationProto::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  end_time_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibrationProto.end_time)
}

// optional .com.android.server.vibrator.CombinedVibrationEffectProto effect = 3;
inline bool VibrationProto::has_effect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibrationProto::clear_effect() {
  if (effect_ != nullptr) effect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::vibrator::CombinedVibrationEffectProto& VibrationProto::effect() const {
  const ::com::android::server::vibrator::CombinedVibrationEffectProto* p = effect_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationProto.effect)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::CombinedVibrationEffectProto*>(
      &::com::android::server::vibrator::_CombinedVibrationEffectProto_default_instance_);
}
inline ::com::android::server::vibrator::CombinedVibrationEffectProto* VibrationProto::release_effect() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.VibrationProto.effect)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::vibrator::CombinedVibrationEffectProto* temp = effect_;
  effect_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::CombinedVibrationEffectProto* VibrationProto::mutable_effect() {
  _has_bits_[0] |= 0x00000001u;
  if (effect_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::CombinedVibrationEffectProto>(GetArenaNoVirtual());
    effect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibrationProto.effect)
  return effect_;
}
inline void VibrationProto::set_allocated_effect(::com::android::server::vibrator::CombinedVibrationEffectProto* effect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete effect_;
  }
  if (effect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      effect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effect_ = effect;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.VibrationProto.effect)
}

// optional .com.android.server.vibrator.CombinedVibrationEffectProto original_effect = 4;
inline bool VibrationProto::has_original_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VibrationProto::clear_original_effect() {
  if (original_effect_ != nullptr) original_effect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::vibrator::CombinedVibrationEffectProto& VibrationProto::original_effect() const {
  const ::com::android::server::vibrator::CombinedVibrationEffectProto* p = original_effect_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationProto.original_effect)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::CombinedVibrationEffectProto*>(
      &::com::android::server::vibrator::_CombinedVibrationEffectProto_default_instance_);
}
inline ::com::android::server::vibrator::CombinedVibrationEffectProto* VibrationProto::release_original_effect() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.VibrationProto.original_effect)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::vibrator::CombinedVibrationEffectProto* temp = original_effect_;
  original_effect_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::CombinedVibrationEffectProto* VibrationProto::mutable_original_effect() {
  _has_bits_[0] |= 0x00000002u;
  if (original_effect_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::CombinedVibrationEffectProto>(GetArenaNoVirtual());
    original_effect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibrationProto.original_effect)
  return original_effect_;
}
inline void VibrationProto::set_allocated_original_effect(::com::android::server::vibrator::CombinedVibrationEffectProto* original_effect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete original_effect_;
  }
  if (original_effect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      original_effect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_effect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  original_effect_ = original_effect;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.VibrationProto.original_effect)
}

// optional .com.android.server.vibrator.VibrationAttributesProto attributes = 5;
inline bool VibrationProto::has_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VibrationProto::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::vibrator::VibrationAttributesProto& VibrationProto::attributes() const {
  const ::com::android::server::vibrator::VibrationAttributesProto* p = attributes_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationProto.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::VibrationAttributesProto*>(
      &::com::android::server::vibrator::_VibrationAttributesProto_default_instance_);
}
inline ::com::android::server::vibrator::VibrationAttributesProto* VibrationProto::release_attributes() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.VibrationProto.attributes)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::vibrator::VibrationAttributesProto* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::VibrationAttributesProto* VibrationProto::mutable_attributes() {
  _has_bits_[0] |= 0x00000004u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::VibrationAttributesProto>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibrationProto.attributes)
  return attributes_;
}
inline void VibrationProto::set_allocated_attributes(::com::android::server::vibrator::VibrationAttributesProto* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.VibrationProto.attributes)
}

// optional int32 status = 6;
inline bool VibrationProto::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VibrationProto::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibrationProto::status() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibrationProto.status)
  return status_;
}
inline void VibrationProto::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibrationProto.status)
}

// -------------------------------------------------------------------

// VibratorManagerServiceDumpProto

// repeated int32 vibrator_ids = 1;
inline int VibratorManagerServiceDumpProto::vibrator_ids_size() const {
  return vibrator_ids_.size();
}
inline void VibratorManagerServiceDumpProto::clear_vibrator_ids() {
  vibrator_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibratorManagerServiceDumpProto::vibrator_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.vibrator_ids)
  return vibrator_ids_.Get(index);
}
inline void VibratorManagerServiceDumpProto::set_vibrator_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  vibrator_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.vibrator_ids)
}
inline void VibratorManagerServiceDumpProto::add_vibrator_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  vibrator_ids_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.VibratorManagerServiceDumpProto.vibrator_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VibratorManagerServiceDumpProto::vibrator_ids() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.vibrator_ids)
  return vibrator_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VibratorManagerServiceDumpProto::mutable_vibrator_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.vibrator_ids)
  return &vibrator_ids_;
}

// optional .com.android.server.vibrator.VibrationProto current_vibration = 2;
inline bool VibratorManagerServiceDumpProto::has_current_vibration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_current_vibration() {
  if (current_vibration_ != nullptr) current_vibration_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::vibrator::VibrationProto& VibratorManagerServiceDumpProto::current_vibration() const {
  const ::com::android::server::vibrator::VibrationProto* p = current_vibration_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_vibration)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::VibrationProto*>(
      &::com::android::server::vibrator::_VibrationProto_default_instance_);
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::release_current_vibration() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_vibration)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::vibrator::VibrationProto* temp = current_vibration_;
  current_vibration_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::mutable_current_vibration() {
  _has_bits_[0] |= 0x00000001u;
  if (current_vibration_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::VibrationProto>(GetArenaNoVirtual());
    current_vibration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_vibration)
  return current_vibration_;
}
inline void VibratorManagerServiceDumpProto::set_allocated_current_vibration(::com::android::server::vibrator::VibrationProto* current_vibration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_vibration_;
  }
  if (current_vibration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_vibration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_vibration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_vibration_ = current_vibration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_vibration)
}

// optional bool is_vibrating = 3;
inline bool VibratorManagerServiceDumpProto::has_is_vibrating() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_is_vibrating() {
  is_vibrating_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool VibratorManagerServiceDumpProto::is_vibrating() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.is_vibrating)
  return is_vibrating_;
}
inline void VibratorManagerServiceDumpProto::set_is_vibrating(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_vibrating_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.is_vibrating)
}

// optional .com.android.server.vibrator.VibrationProto current_external_vibration = 4;
inline bool VibratorManagerServiceDumpProto::has_current_external_vibration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_current_external_vibration() {
  if (current_external_vibration_ != nullptr) current_external_vibration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::vibrator::VibrationProto& VibratorManagerServiceDumpProto::current_external_vibration() const {
  const ::com::android::server::vibrator::VibrationProto* p = current_external_vibration_;
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_external_vibration)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::vibrator::VibrationProto*>(
      &::com::android::server::vibrator::_VibrationProto_default_instance_);
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::release_current_external_vibration() {
  // @@protoc_insertion_point(field_release:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_external_vibration)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::vibrator::VibrationProto* temp = current_external_vibration_;
  current_external_vibration_ = nullptr;
  return temp;
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::mutable_current_external_vibration() {
  _has_bits_[0] |= 0x00000002u;
  if (current_external_vibration_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::vibrator::VibrationProto>(GetArenaNoVirtual());
    current_external_vibration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_external_vibration)
  return current_external_vibration_;
}
inline void VibratorManagerServiceDumpProto::set_allocated_current_external_vibration(::com::android::server::vibrator::VibrationProto* current_external_vibration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_external_vibration_;
  }
  if (current_external_vibration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_external_vibration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_external_vibration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_external_vibration_ = current_external_vibration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.vibrator.VibratorManagerServiceDumpProto.current_external_vibration)
}

// optional bool vibrator_under_external_control = 5;
inline bool VibratorManagerServiceDumpProto::has_vibrator_under_external_control() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_vibrator_under_external_control() {
  vibrator_under_external_control_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool VibratorManagerServiceDumpProto::vibrator_under_external_control() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.vibrator_under_external_control)
  return vibrator_under_external_control_;
}
inline void VibratorManagerServiceDumpProto::set_vibrator_under_external_control(bool value) {
  _has_bits_[0] |= 0x00000008u;
  vibrator_under_external_control_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.vibrator_under_external_control)
}

// optional bool low_power_mode = 6;
inline bool VibratorManagerServiceDumpProto::has_low_power_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_low_power_mode() {
  low_power_mode_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool VibratorManagerServiceDumpProto::low_power_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.low_power_mode)
  return low_power_mode_;
}
inline void VibratorManagerServiceDumpProto::set_low_power_mode(bool value) {
  _has_bits_[0] |= 0x00000010u;
  low_power_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.low_power_mode)
}

// optional int32 haptic_feedback_intensity = 7;
inline bool VibratorManagerServiceDumpProto::has_haptic_feedback_intensity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_haptic_feedback_intensity() {
  haptic_feedback_intensity_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibratorManagerServiceDumpProto::haptic_feedback_intensity() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.haptic_feedback_intensity)
  return haptic_feedback_intensity_;
}
inline void VibratorManagerServiceDumpProto::set_haptic_feedback_intensity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  haptic_feedback_intensity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.haptic_feedback_intensity)
}

// optional int32 haptic_feedback_default_intensity = 8;
inline bool VibratorManagerServiceDumpProto::has_haptic_feedback_default_intensity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_haptic_feedback_default_intensity() {
  haptic_feedback_default_intensity_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibratorManagerServiceDumpProto::haptic_feedback_default_intensity() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.haptic_feedback_default_intensity)
  return haptic_feedback_default_intensity_;
}
inline void VibratorManagerServiceDumpProto::set_haptic_feedback_default_intensity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  haptic_feedback_default_intensity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.haptic_feedback_default_intensity)
}

// optional int32 notification_intensity = 9;
inline bool VibratorManagerServiceDumpProto::has_notification_intensity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_notification_intensity() {
  notification_intensity_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibratorManagerServiceDumpProto::notification_intensity() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.notification_intensity)
  return notification_intensity_;
}
inline void VibratorManagerServiceDumpProto::set_notification_intensity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  notification_intensity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.notification_intensity)
}

// optional int32 notification_default_intensity = 10;
inline bool VibratorManagerServiceDumpProto::has_notification_default_intensity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_notification_default_intensity() {
  notification_default_intensity_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibratorManagerServiceDumpProto::notification_default_intensity() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.notification_default_intensity)
  return notification_default_intensity_;
}
inline void VibratorManagerServiceDumpProto::set_notification_default_intensity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  notification_default_intensity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.notification_default_intensity)
}

// optional int32 ring_intensity = 11;
inline bool VibratorManagerServiceDumpProto::has_ring_intensity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_ring_intensity() {
  ring_intensity_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibratorManagerServiceDumpProto::ring_intensity() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.ring_intensity)
  return ring_intensity_;
}
inline void VibratorManagerServiceDumpProto::set_ring_intensity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  ring_intensity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.ring_intensity)
}

// optional int32 ring_default_intensity = 12;
inline bool VibratorManagerServiceDumpProto::has_ring_default_intensity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VibratorManagerServiceDumpProto::clear_ring_default_intensity() {
  ring_default_intensity_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VibratorManagerServiceDumpProto::ring_default_intensity() const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.ring_default_intensity)
  return ring_default_intensity_;
}
inline void VibratorManagerServiceDumpProto::set_ring_default_intensity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  ring_default_intensity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.vibrator.VibratorManagerServiceDumpProto.ring_default_intensity)
}

// repeated .com.android.server.vibrator.VibrationProto previous_ring_vibrations = 13;
inline int VibratorManagerServiceDumpProto::previous_ring_vibrations_size() const {
  return previous_ring_vibrations_.size();
}
inline void VibratorManagerServiceDumpProto::clear_previous_ring_vibrations() {
  previous_ring_vibrations_.Clear();
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::mutable_previous_ring_vibrations(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_ring_vibrations)
  return previous_ring_vibrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
VibratorManagerServiceDumpProto::mutable_previous_ring_vibrations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_ring_vibrations)
  return &previous_ring_vibrations_;
}
inline const ::com::android::server::vibrator::VibrationProto& VibratorManagerServiceDumpProto::previous_ring_vibrations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_ring_vibrations)
  return previous_ring_vibrations_.Get(index);
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::add_previous_ring_vibrations() {
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_ring_vibrations)
  return previous_ring_vibrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
VibratorManagerServiceDumpProto::previous_ring_vibrations() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_ring_vibrations)
  return previous_ring_vibrations_;
}

// repeated .com.android.server.vibrator.VibrationProto previous_notification_vibrations = 14;
inline int VibratorManagerServiceDumpProto::previous_notification_vibrations_size() const {
  return previous_notification_vibrations_.size();
}
inline void VibratorManagerServiceDumpProto::clear_previous_notification_vibrations() {
  previous_notification_vibrations_.Clear();
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::mutable_previous_notification_vibrations(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_notification_vibrations)
  return previous_notification_vibrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
VibratorManagerServiceDumpProto::mutable_previous_notification_vibrations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_notification_vibrations)
  return &previous_notification_vibrations_;
}
inline const ::com::android::server::vibrator::VibrationProto& VibratorManagerServiceDumpProto::previous_notification_vibrations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_notification_vibrations)
  return previous_notification_vibrations_.Get(index);
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::add_previous_notification_vibrations() {
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_notification_vibrations)
  return previous_notification_vibrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
VibratorManagerServiceDumpProto::previous_notification_vibrations() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_notification_vibrations)
  return previous_notification_vibrations_;
}

// repeated .com.android.server.vibrator.VibrationProto previous_alarm_vibrations = 15;
inline int VibratorManagerServiceDumpProto::previous_alarm_vibrations_size() const {
  return previous_alarm_vibrations_.size();
}
inline void VibratorManagerServiceDumpProto::clear_previous_alarm_vibrations() {
  previous_alarm_vibrations_.Clear();
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::mutable_previous_alarm_vibrations(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_alarm_vibrations)
  return previous_alarm_vibrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
VibratorManagerServiceDumpProto::mutable_previous_alarm_vibrations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_alarm_vibrations)
  return &previous_alarm_vibrations_;
}
inline const ::com::android::server::vibrator::VibrationProto& VibratorManagerServiceDumpProto::previous_alarm_vibrations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_alarm_vibrations)
  return previous_alarm_vibrations_.Get(index);
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::add_previous_alarm_vibrations() {
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_alarm_vibrations)
  return previous_alarm_vibrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
VibratorManagerServiceDumpProto::previous_alarm_vibrations() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_alarm_vibrations)
  return previous_alarm_vibrations_;
}

// repeated .com.android.server.vibrator.VibrationProto previous_vibrations = 16;
inline int VibratorManagerServiceDumpProto::previous_vibrations_size() const {
  return previous_vibrations_.size();
}
inline void VibratorManagerServiceDumpProto::clear_previous_vibrations() {
  previous_vibrations_.Clear();
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::mutable_previous_vibrations(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_vibrations)
  return previous_vibrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
VibratorManagerServiceDumpProto::mutable_previous_vibrations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_vibrations)
  return &previous_vibrations_;
}
inline const ::com::android::server::vibrator::VibrationProto& VibratorManagerServiceDumpProto::previous_vibrations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_vibrations)
  return previous_vibrations_.Get(index);
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::add_previous_vibrations() {
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_vibrations)
  return previous_vibrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
VibratorManagerServiceDumpProto::previous_vibrations() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_vibrations)
  return previous_vibrations_;
}

// repeated .com.android.server.vibrator.VibrationProto previous_external_vibrations = 17;
inline int VibratorManagerServiceDumpProto::previous_external_vibrations_size() const {
  return previous_external_vibrations_.size();
}
inline void VibratorManagerServiceDumpProto::clear_previous_external_vibrations() {
  previous_external_vibrations_.Clear();
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::mutable_previous_external_vibrations(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_external_vibrations)
  return previous_external_vibrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >*
VibratorManagerServiceDumpProto::mutable_previous_external_vibrations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_external_vibrations)
  return &previous_external_vibrations_;
}
inline const ::com::android::server::vibrator::VibrationProto& VibratorManagerServiceDumpProto::previous_external_vibrations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_external_vibrations)
  return previous_external_vibrations_.Get(index);
}
inline ::com::android::server::vibrator::VibrationProto* VibratorManagerServiceDumpProto::add_previous_external_vibrations() {
  // @@protoc_insertion_point(field_add:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_external_vibrations)
  return previous_external_vibrations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::vibrator::VibrationProto >&
VibratorManagerServiceDumpProto::previous_external_vibrations() const {
  // @@protoc_insertion_point(field_list:com.android.server.vibrator.VibratorManagerServiceDumpProto.previous_external_vibrations)
  return previous_external_vibrations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vibrator
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto
