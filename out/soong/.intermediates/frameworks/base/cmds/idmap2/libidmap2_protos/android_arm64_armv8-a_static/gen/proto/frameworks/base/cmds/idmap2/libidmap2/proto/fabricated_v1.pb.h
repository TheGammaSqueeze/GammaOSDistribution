// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/cmds/idmap2/libidmap2/proto/fabricated_v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace idmap2 {
namespace pb {
class FabricatedOverlay;
class FabricatedOverlayDefaultTypeInternal;
extern FabricatedOverlayDefaultTypeInternal _FabricatedOverlay_default_instance_;
class ResourceEntry;
class ResourceEntryDefaultTypeInternal;
extern ResourceEntryDefaultTypeInternal _ResourceEntry_default_instance_;
class ResourcePackage;
class ResourcePackageDefaultTypeInternal;
extern ResourcePackageDefaultTypeInternal _ResourcePackage_default_instance_;
class ResourceType;
class ResourceTypeDefaultTypeInternal;
extern ResourceTypeDefaultTypeInternal _ResourceType_default_instance_;
class ResourceValue;
class ResourceValueDefaultTypeInternal;
extern ResourceValueDefaultTypeInternal _ResourceValue_default_instance_;
}  // namespace pb
}  // namespace idmap2
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::idmap2::pb::FabricatedOverlay* Arena::CreateMaybeMessage<::android::idmap2::pb::FabricatedOverlay>(Arena*);
template<> ::android::idmap2::pb::ResourceEntry* Arena::CreateMaybeMessage<::android::idmap2::pb::ResourceEntry>(Arena*);
template<> ::android::idmap2::pb::ResourcePackage* Arena::CreateMaybeMessage<::android::idmap2::pb::ResourcePackage>(Arena*);
template<> ::android::idmap2::pb::ResourceType* Arena::CreateMaybeMessage<::android::idmap2::pb::ResourceType>(Arena*);
template<> ::android::idmap2::pb::ResourceValue* Arena::CreateMaybeMessage<::android::idmap2::pb::ResourceValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace idmap2 {
namespace pb {

// ===================================================================

class FabricatedOverlay :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.idmap2.pb.FabricatedOverlay) */ {
 public:
  FabricatedOverlay();
  virtual ~FabricatedOverlay();

  FabricatedOverlay(const FabricatedOverlay& from);
  FabricatedOverlay(FabricatedOverlay&& from) noexcept
    : FabricatedOverlay() {
    *this = ::std::move(from);
  }

  inline FabricatedOverlay& operator=(const FabricatedOverlay& from) {
    CopyFrom(from);
    return *this;
  }
  inline FabricatedOverlay& operator=(FabricatedOverlay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FabricatedOverlay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FabricatedOverlay* internal_default_instance() {
    return reinterpret_cast<const FabricatedOverlay*>(
               &_FabricatedOverlay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FabricatedOverlay& a, FabricatedOverlay& b) {
    a.Swap(&b);
  }
  inline void Swap(FabricatedOverlay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FabricatedOverlay* New() const final {
    return CreateMaybeMessage<FabricatedOverlay>(nullptr);
  }

  FabricatedOverlay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FabricatedOverlay>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FabricatedOverlay& from);
  void MergeFrom(const FabricatedOverlay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FabricatedOverlay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.idmap2.pb.FabricatedOverlay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
    kNameFieldNumber = 2,
    kPackageNameFieldNumber = 3,
    kTargetPackageNameFieldNumber = 4,
    kTargetOverlayableFieldNumber = 5,
  };
  // repeated .android.idmap2.pb.ResourcePackage packages = 1;
  int packages_size() const;
  void clear_packages();
  ::android::idmap2::pb::ResourcePackage* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourcePackage >*
      mutable_packages();
  const ::android::idmap2::pb::ResourcePackage& packages(int index) const;
  ::android::idmap2::pb::ResourcePackage* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourcePackage >&
      packages() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string package_name = 3;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // string target_package_name = 4;
  void clear_target_package_name();
  const std::string& target_package_name() const;
  void set_target_package_name(const std::string& value);
  void set_target_package_name(std::string&& value);
  void set_target_package_name(const char* value);
  void set_target_package_name(const char* value, size_t size);
  std::string* mutable_target_package_name();
  std::string* release_target_package_name();
  void set_allocated_target_package_name(std::string* target_package_name);

  // string target_overlayable = 5;
  void clear_target_overlayable();
  const std::string& target_overlayable() const;
  void set_target_overlayable(const std::string& value);
  void set_target_overlayable(std::string&& value);
  void set_target_overlayable(const char* value);
  void set_target_overlayable(const char* value, size_t size);
  std::string* mutable_target_overlayable();
  std::string* release_target_overlayable();
  void set_allocated_target_overlayable(std::string* target_overlayable);

  // @@protoc_insertion_point(class_scope:android.idmap2.pb.FabricatedOverlay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourcePackage > packages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_overlayable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto;
};
// -------------------------------------------------------------------

class ResourcePackage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.idmap2.pb.ResourcePackage) */ {
 public:
  ResourcePackage();
  virtual ~ResourcePackage();

  ResourcePackage(const ResourcePackage& from);
  ResourcePackage(ResourcePackage&& from) noexcept
    : ResourcePackage() {
    *this = ::std::move(from);
  }

  inline ResourcePackage& operator=(const ResourcePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcePackage& operator=(ResourcePackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ResourcePackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourcePackage* internal_default_instance() {
    return reinterpret_cast<const ResourcePackage*>(
               &_ResourcePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourcePackage& a, ResourcePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcePackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourcePackage* New() const final {
    return CreateMaybeMessage<ResourcePackage>(nullptr);
  }

  ResourcePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourcePackage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResourcePackage& from);
  void MergeFrom(const ResourcePackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourcePackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.idmap2.pb.ResourcePackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .android.idmap2.pb.ResourceType types = 2;
  int types_size() const;
  void clear_types();
  ::android::idmap2::pb::ResourceType* mutable_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceType >*
      mutable_types();
  const ::android::idmap2::pb::ResourceType& types(int index) const;
  ::android::idmap2::pb::ResourceType* add_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceType >&
      types() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:android.idmap2.pb.ResourcePackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceType > types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto;
};
// -------------------------------------------------------------------

class ResourceType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.idmap2.pb.ResourceType) */ {
 public:
  ResourceType();
  virtual ~ResourceType();

  ResourceType(const ResourceType& from);
  ResourceType(ResourceType&& from) noexcept
    : ResourceType() {
    *this = ::std::move(from);
  }

  inline ResourceType& operator=(const ResourceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceType& operator=(ResourceType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ResourceType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceType* internal_default_instance() {
    return reinterpret_cast<const ResourceType*>(
               &_ResourceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResourceType& a, ResourceType& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceType* New() const final {
    return CreateMaybeMessage<ResourceType>(nullptr);
  }

  ResourceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResourceType& from);
  void MergeFrom(const ResourceType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.idmap2.pb.ResourceType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .android.idmap2.pb.ResourceEntry entries = 2;
  int entries_size() const;
  void clear_entries();
  ::android::idmap2::pb::ResourceEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceEntry >*
      mutable_entries();
  const ::android::idmap2::pb::ResourceEntry& entries(int index) const;
  ::android::idmap2::pb::ResourceEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceEntry >&
      entries() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:android.idmap2.pb.ResourceType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto;
};
// -------------------------------------------------------------------

class ResourceEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.idmap2.pb.ResourceEntry) */ {
 public:
  ResourceEntry();
  virtual ~ResourceEntry();

  ResourceEntry(const ResourceEntry& from);
  ResourceEntry(ResourceEntry&& from) noexcept
    : ResourceEntry() {
    *this = ::std::move(from);
  }

  inline ResourceEntry& operator=(const ResourceEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceEntry& operator=(ResourceEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ResourceEntry& default_instance();

  enum ValueCase {
    kResValue = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceEntry* internal_default_instance() {
    return reinterpret_cast<const ResourceEntry*>(
               &_ResourceEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResourceEntry& a, ResourceEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceEntry* New() const final {
    return CreateMaybeMessage<ResourceEntry>(nullptr);
  }

  ResourceEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResourceEntry& from);
  void MergeFrom(const ResourceEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.idmap2.pb.ResourceEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kResValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .android.idmap2.pb.ResourceValue res_value = 2;
  bool has_res_value() const;
  void clear_res_value();
  const ::android::idmap2::pb::ResourceValue& res_value() const;
  ::android::idmap2::pb::ResourceValue* release_res_value();
  ::android::idmap2::pb::ResourceValue* mutable_res_value();
  void set_allocated_res_value(::android::idmap2::pb::ResourceValue* res_value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:android.idmap2.pb.ResourceEntry)
 private:
  class _Internal;
  void set_has_res_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::android::idmap2::pb::ResourceValue* res_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto;
};
// -------------------------------------------------------------------

class ResourceValue :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.idmap2.pb.ResourceValue) */ {
 public:
  ResourceValue();
  virtual ~ResourceValue();

  ResourceValue(const ResourceValue& from);
  ResourceValue(ResourceValue&& from) noexcept
    : ResourceValue() {
    *this = ::std::move(from);
  }

  inline ResourceValue& operator=(const ResourceValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceValue& operator=(ResourceValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ResourceValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceValue* internal_default_instance() {
    return reinterpret_cast<const ResourceValue*>(
               &_ResourceValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceValue& a, ResourceValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceValue* New() const final {
    return CreateMaybeMessage<ResourceValue>(nullptr);
  }

  ResourceValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResourceValue& from);
  void MergeFrom(const ResourceValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.idmap2.pb.ResourceValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 1,
    kDataValueFieldNumber = 2,
  };
  // uint32 data_type = 1;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 data_value = 2;
  void clear_data_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_value() const;
  void set_data_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.idmap2.pb.ResourceValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FabricatedOverlay

// repeated .android.idmap2.pb.ResourcePackage packages = 1;
inline int FabricatedOverlay::packages_size() const {
  return packages_.size();
}
inline void FabricatedOverlay::clear_packages() {
  packages_.Clear();
}
inline ::android::idmap2::pb::ResourcePackage* FabricatedOverlay::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.FabricatedOverlay.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourcePackage >*
FabricatedOverlay::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:android.idmap2.pb.FabricatedOverlay.packages)
  return &packages_;
}
inline const ::android::idmap2::pb::ResourcePackage& FabricatedOverlay::packages(int index) const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.FabricatedOverlay.packages)
  return packages_.Get(index);
}
inline ::android::idmap2::pb::ResourcePackage* FabricatedOverlay::add_packages() {
  // @@protoc_insertion_point(field_add:android.idmap2.pb.FabricatedOverlay.packages)
  return packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourcePackage >&
FabricatedOverlay::packages() const {
  // @@protoc_insertion_point(field_list:android.idmap2.pb.FabricatedOverlay.packages)
  return packages_;
}

// string name = 2;
inline void FabricatedOverlay::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FabricatedOverlay::name() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.FabricatedOverlay.name)
  return name_.GetNoArena();
}
inline void FabricatedOverlay::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.idmap2.pb.FabricatedOverlay.name)
}
inline void FabricatedOverlay::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.idmap2.pb.FabricatedOverlay.name)
}
inline void FabricatedOverlay::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.idmap2.pb.FabricatedOverlay.name)
}
inline void FabricatedOverlay::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.idmap2.pb.FabricatedOverlay.name)
}
inline std::string* FabricatedOverlay::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.FabricatedOverlay.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FabricatedOverlay::release_name() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.FabricatedOverlay.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FabricatedOverlay::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.idmap2.pb.FabricatedOverlay.name)
}

// string package_name = 3;
inline void FabricatedOverlay::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FabricatedOverlay::package_name() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.FabricatedOverlay.package_name)
  return package_name_.GetNoArena();
}
inline void FabricatedOverlay::set_package_name(const std::string& value) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.idmap2.pb.FabricatedOverlay.package_name)
}
inline void FabricatedOverlay::set_package_name(std::string&& value) {
  
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.idmap2.pb.FabricatedOverlay.package_name)
}
inline void FabricatedOverlay::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.idmap2.pb.FabricatedOverlay.package_name)
}
inline void FabricatedOverlay::set_package_name(const char* value, size_t size) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.idmap2.pb.FabricatedOverlay.package_name)
}
inline std::string* FabricatedOverlay::mutable_package_name() {
  
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.FabricatedOverlay.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FabricatedOverlay::release_package_name() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.FabricatedOverlay.package_name)
  
  return package_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FabricatedOverlay::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    
  } else {
    
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.idmap2.pb.FabricatedOverlay.package_name)
}

// string target_package_name = 4;
inline void FabricatedOverlay::clear_target_package_name() {
  target_package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FabricatedOverlay::target_package_name() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.FabricatedOverlay.target_package_name)
  return target_package_name_.GetNoArena();
}
inline void FabricatedOverlay::set_target_package_name(const std::string& value) {
  
  target_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.idmap2.pb.FabricatedOverlay.target_package_name)
}
inline void FabricatedOverlay::set_target_package_name(std::string&& value) {
  
  target_package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.idmap2.pb.FabricatedOverlay.target_package_name)
}
inline void FabricatedOverlay::set_target_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.idmap2.pb.FabricatedOverlay.target_package_name)
}
inline void FabricatedOverlay::set_target_package_name(const char* value, size_t size) {
  
  target_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.idmap2.pb.FabricatedOverlay.target_package_name)
}
inline std::string* FabricatedOverlay::mutable_target_package_name() {
  
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.FabricatedOverlay.target_package_name)
  return target_package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FabricatedOverlay::release_target_package_name() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.FabricatedOverlay.target_package_name)
  
  return target_package_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FabricatedOverlay::set_allocated_target_package_name(std::string* target_package_name) {
  if (target_package_name != nullptr) {
    
  } else {
    
  }
  target_package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_package_name);
  // @@protoc_insertion_point(field_set_allocated:android.idmap2.pb.FabricatedOverlay.target_package_name)
}

// string target_overlayable = 5;
inline void FabricatedOverlay::clear_target_overlayable() {
  target_overlayable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FabricatedOverlay::target_overlayable() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.FabricatedOverlay.target_overlayable)
  return target_overlayable_.GetNoArena();
}
inline void FabricatedOverlay::set_target_overlayable(const std::string& value) {
  
  target_overlayable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.idmap2.pb.FabricatedOverlay.target_overlayable)
}
inline void FabricatedOverlay::set_target_overlayable(std::string&& value) {
  
  target_overlayable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.idmap2.pb.FabricatedOverlay.target_overlayable)
}
inline void FabricatedOverlay::set_target_overlayable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_overlayable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.idmap2.pb.FabricatedOverlay.target_overlayable)
}
inline void FabricatedOverlay::set_target_overlayable(const char* value, size_t size) {
  
  target_overlayable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.idmap2.pb.FabricatedOverlay.target_overlayable)
}
inline std::string* FabricatedOverlay::mutable_target_overlayable() {
  
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.FabricatedOverlay.target_overlayable)
  return target_overlayable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FabricatedOverlay::release_target_overlayable() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.FabricatedOverlay.target_overlayable)
  
  return target_overlayable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FabricatedOverlay::set_allocated_target_overlayable(std::string* target_overlayable) {
  if (target_overlayable != nullptr) {
    
  } else {
    
  }
  target_overlayable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_overlayable);
  // @@protoc_insertion_point(field_set_allocated:android.idmap2.pb.FabricatedOverlay.target_overlayable)
}

// -------------------------------------------------------------------

// ResourcePackage

// string name = 1;
inline void ResourcePackage::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResourcePackage::name() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourcePackage.name)
  return name_.GetNoArena();
}
inline void ResourcePackage::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.idmap2.pb.ResourcePackage.name)
}
inline void ResourcePackage::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.idmap2.pb.ResourcePackage.name)
}
inline void ResourcePackage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.idmap2.pb.ResourcePackage.name)
}
inline void ResourcePackage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.idmap2.pb.ResourcePackage.name)
}
inline std::string* ResourcePackage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.ResourcePackage.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourcePackage::release_name() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.ResourcePackage.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourcePackage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.idmap2.pb.ResourcePackage.name)
}

// repeated .android.idmap2.pb.ResourceType types = 2;
inline int ResourcePackage::types_size() const {
  return types_.size();
}
inline void ResourcePackage::clear_types() {
  types_.Clear();
}
inline ::android::idmap2::pb::ResourceType* ResourcePackage::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.ResourcePackage.types)
  return types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceType >*
ResourcePackage::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:android.idmap2.pb.ResourcePackage.types)
  return &types_;
}
inline const ::android::idmap2::pb::ResourceType& ResourcePackage::types(int index) const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourcePackage.types)
  return types_.Get(index);
}
inline ::android::idmap2::pb::ResourceType* ResourcePackage::add_types() {
  // @@protoc_insertion_point(field_add:android.idmap2.pb.ResourcePackage.types)
  return types_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceType >&
ResourcePackage::types() const {
  // @@protoc_insertion_point(field_list:android.idmap2.pb.ResourcePackage.types)
  return types_;
}

// -------------------------------------------------------------------

// ResourceType

// string name = 1;
inline void ResourceType::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResourceType::name() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourceType.name)
  return name_.GetNoArena();
}
inline void ResourceType::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.idmap2.pb.ResourceType.name)
}
inline void ResourceType::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.idmap2.pb.ResourceType.name)
}
inline void ResourceType::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.idmap2.pb.ResourceType.name)
}
inline void ResourceType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.idmap2.pb.ResourceType.name)
}
inline std::string* ResourceType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.ResourceType.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceType::release_name() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.ResourceType.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.idmap2.pb.ResourceType.name)
}

// repeated .android.idmap2.pb.ResourceEntry entries = 2;
inline int ResourceType::entries_size() const {
  return entries_.size();
}
inline void ResourceType::clear_entries() {
  entries_.Clear();
}
inline ::android::idmap2::pb::ResourceEntry* ResourceType::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.ResourceType.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceEntry >*
ResourceType::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:android.idmap2.pb.ResourceType.entries)
  return &entries_;
}
inline const ::android::idmap2::pb::ResourceEntry& ResourceType::entries(int index) const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourceType.entries)
  return entries_.Get(index);
}
inline ::android::idmap2::pb::ResourceEntry* ResourceType::add_entries() {
  // @@protoc_insertion_point(field_add:android.idmap2.pb.ResourceType.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::idmap2::pb::ResourceEntry >&
ResourceType::entries() const {
  // @@protoc_insertion_point(field_list:android.idmap2.pb.ResourceType.entries)
  return entries_;
}

// -------------------------------------------------------------------

// ResourceEntry

// string name = 1;
inline void ResourceEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResourceEntry::name() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourceEntry.name)
  return name_.GetNoArena();
}
inline void ResourceEntry::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.idmap2.pb.ResourceEntry.name)
}
inline void ResourceEntry::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.idmap2.pb.ResourceEntry.name)
}
inline void ResourceEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.idmap2.pb.ResourceEntry.name)
}
inline void ResourceEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.idmap2.pb.ResourceEntry.name)
}
inline std::string* ResourceEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.ResourceEntry.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceEntry::release_name() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.ResourceEntry.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.idmap2.pb.ResourceEntry.name)
}

// .android.idmap2.pb.ResourceValue res_value = 2;
inline bool ResourceEntry::has_res_value() const {
  return value_case() == kResValue;
}
inline void ResourceEntry::set_has_res_value() {
  _oneof_case_[0] = kResValue;
}
inline void ResourceEntry::clear_res_value() {
  if (has_res_value()) {
    delete value_.res_value_;
    clear_has_value();
  }
}
inline ::android::idmap2::pb::ResourceValue* ResourceEntry::release_res_value() {
  // @@protoc_insertion_point(field_release:android.idmap2.pb.ResourceEntry.res_value)
  if (has_res_value()) {
    clear_has_value();
      ::android::idmap2::pb::ResourceValue* temp = value_.res_value_;
    value_.res_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::idmap2::pb::ResourceValue& ResourceEntry::res_value() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourceEntry.res_value)
  return has_res_value()
      ? *value_.res_value_
      : *reinterpret_cast< ::android::idmap2::pb::ResourceValue*>(&::android::idmap2::pb::_ResourceValue_default_instance_);
}
inline ::android::idmap2::pb::ResourceValue* ResourceEntry::mutable_res_value() {
  if (!has_res_value()) {
    clear_value();
    set_has_res_value();
    value_.res_value_ = CreateMaybeMessage< ::android::idmap2::pb::ResourceValue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.idmap2.pb.ResourceEntry.res_value)
  return value_.res_value_;
}

inline bool ResourceEntry::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ResourceEntry::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ResourceEntry::ValueCase ResourceEntry::value_case() const {
  return ResourceEntry::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResourceValue

// uint32 data_type = 1;
inline void ResourceValue::clear_data_type() {
  data_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceValue::data_type() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourceValue.data_type)
  return data_type_;
}
inline void ResourceValue::set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:android.idmap2.pb.ResourceValue.data_type)
}

// uint32 data_value = 2;
inline void ResourceValue::clear_data_value() {
  data_value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceValue::data_value() const {
  // @@protoc_insertion_point(field_get:android.idmap2.pb.ResourceValue.data_value)
  return data_value_;
}
inline void ResourceValue::set_data_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_value_ = value;
  // @@protoc_insertion_point(field_set:android.idmap2.pb.ResourceValue.data_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace idmap2
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcmds_2fidmap2_2flibidmap2_2fproto_2ffabricated_5fv1_2eproto
