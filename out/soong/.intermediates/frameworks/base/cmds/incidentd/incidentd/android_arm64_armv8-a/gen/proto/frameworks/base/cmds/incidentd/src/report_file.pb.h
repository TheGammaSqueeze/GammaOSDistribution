// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/cmds/incidentd/src/report_file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/os/metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
namespace incidentd {
class ReportFileProto;
class ReportFileProtoDefaultTypeInternal;
extern ReportFileProtoDefaultTypeInternal _ReportFileProto_default_instance_;
class ReportFileProto_Report;
class ReportFileProto_ReportDefaultTypeInternal;
extern ReportFileProto_ReportDefaultTypeInternal _ReportFileProto_Report_default_instance_;
}  // namespace incidentd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::incidentd::ReportFileProto* Arena::CreateMaybeMessage<::android::os::incidentd::ReportFileProto>(Arena*);
template<> ::android::os::incidentd::ReportFileProto_Report* Arena::CreateMaybeMessage<::android::os::incidentd::ReportFileProto_Report>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {
namespace incidentd {

// ===================================================================

class ReportFileProto_Report :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.incidentd.ReportFileProto.Report) */ {
 public:
  ReportFileProto_Report();
  virtual ~ReportFileProto_Report();

  ReportFileProto_Report(const ReportFileProto_Report& from);
  ReportFileProto_Report(ReportFileProto_Report&& from) noexcept
    : ReportFileProto_Report() {
    *this = ::std::move(from);
  }

  inline ReportFileProto_Report& operator=(const ReportFileProto_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportFileProto_Report& operator=(ReportFileProto_Report&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReportFileProto_Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportFileProto_Report* internal_default_instance() {
    return reinterpret_cast<const ReportFileProto_Report*>(
               &_ReportFileProto_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportFileProto_Report& a, ReportFileProto_Report& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportFileProto_Report* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportFileProto_Report* New() const final {
    return CreateMaybeMessage<ReportFileProto_Report>(nullptr);
  }

  ReportFileProto_Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportFileProto_Report>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReportFileProto_Report& from);
  void MergeFrom(const ReportFileProto_Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportFileProto_Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.incidentd.ReportFileProto.Report";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionFieldNumber = 6,
    kHeaderFieldNumber = 7,
    kPkgFieldNumber = 1,
    kClsFieldNumber = 2,
    kPrivacyPolicyFieldNumber = 4,
    kAllSectionsFieldNumber = 5,
    kShareApprovedFieldNumber = 8,
    kGzipFieldNumber = 9,
  };
  // repeated int32 section = 6;
  int section_size() const;
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::int32 section(int index) const;
  void set_section(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_section(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      section() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_section();

  // repeated bytes header = 7;
  int header_size() const;
  void clear_header();
  const std::string& header(int index) const;
  std::string* mutable_header(int index);
  void set_header(int index, const std::string& value);
  void set_header(int index, std::string&& value);
  void set_header(int index, const char* value);
  void set_header(int index, const void* value, size_t size);
  std::string* add_header();
  void add_header(const std::string& value);
  void add_header(std::string&& value);
  void add_header(const char* value);
  void add_header(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& header() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_header();

  // optional string pkg = 1;
  bool has_pkg() const;
  void clear_pkg();
  const std::string& pkg() const;
  void set_pkg(const std::string& value);
  void set_pkg(std::string&& value);
  void set_pkg(const char* value);
  void set_pkg(const char* value, size_t size);
  std::string* mutable_pkg();
  std::string* release_pkg();
  void set_allocated_pkg(std::string* pkg);

  // optional string cls = 2;
  bool has_cls() const;
  void clear_cls();
  const std::string& cls() const;
  void set_cls(const std::string& value);
  void set_cls(std::string&& value);
  void set_cls(const char* value);
  void set_cls(const char* value, size_t size);
  std::string* mutable_cls();
  std::string* release_cls();
  void set_allocated_cls(std::string* cls);

  // optional uint32 privacy_policy = 4;
  bool has_privacy_policy() const;
  void clear_privacy_policy();
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy_policy() const;
  void set_privacy_policy(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool all_sections = 5;
  bool has_all_sections() const;
  void clear_all_sections();
  bool all_sections() const;
  void set_all_sections(bool value);

  // optional bool share_approved = 8;
  bool has_share_approved() const;
  void clear_share_approved();
  bool share_approved() const;
  void set_share_approved(bool value);

  // optional bool gzip = 9;
  bool has_gzip() const;
  void clear_gzip();
  bool gzip() const;
  void set_gzip(bool value);

  // @@protoc_insertion_point(class_scope:android.os.incidentd.ReportFileProto.Report)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > section_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pkg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cls_;
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy_policy_;
  bool all_sections_;
  bool share_approved_;
  bool gzip_;
  friend struct ::TableStruct_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto;
};
// -------------------------------------------------------------------

class ReportFileProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.incidentd.ReportFileProto) */ {
 public:
  ReportFileProto();
  virtual ~ReportFileProto();

  ReportFileProto(const ReportFileProto& from);
  ReportFileProto(ReportFileProto&& from) noexcept
    : ReportFileProto() {
    *this = ::std::move(from);
  }

  inline ReportFileProto& operator=(const ReportFileProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportFileProto& operator=(ReportFileProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReportFileProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportFileProto* internal_default_instance() {
    return reinterpret_cast<const ReportFileProto*>(
               &_ReportFileProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReportFileProto& a, ReportFileProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportFileProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportFileProto* New() const final {
    return CreateMaybeMessage<ReportFileProto>(nullptr);
  }

  ReportFileProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportFileProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReportFileProto& from);
  void MergeFrom(const ReportFileProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportFileProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.incidentd.ReportFileProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ReportFileProto_Report Report;

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 2,
    kDataFileFieldNumber = 3,
    kMetadataFieldNumber = 1,
    kDataFileSizeFieldNumber = 5,
    kPrivacyPolicyFieldNumber = 4,
    kCompletedFieldNumber = 6,
  };
  // repeated .android.os.incidentd.ReportFileProto.Report report = 2;
  int report_size() const;
  void clear_report();
  ::android::os::incidentd::ReportFileProto_Report* mutable_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::incidentd::ReportFileProto_Report >*
      mutable_report();
  const ::android::os::incidentd::ReportFileProto_Report& report(int index) const;
  ::android::os::incidentd::ReportFileProto_Report* add_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::incidentd::ReportFileProto_Report >&
      report() const;

  // optional string data_file = 3;
  bool has_data_file() const;
  void clear_data_file();
  const std::string& data_file() const;
  void set_data_file(const std::string& value);
  void set_data_file(std::string&& value);
  void set_data_file(const char* value);
  void set_data_file(const char* value, size_t size);
  std::string* mutable_data_file();
  std::string* release_data_file();
  void set_allocated_data_file(std::string* data_file);

  // optional .android.os.IncidentMetadata metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  const ::android::os::IncidentMetadata& metadata() const;
  ::android::os::IncidentMetadata* release_metadata();
  ::android::os::IncidentMetadata* mutable_metadata();
  void set_allocated_metadata(::android::os::IncidentMetadata* metadata);

  // optional int64 data_file_size = 5;
  bool has_data_file_size() const;
  void clear_data_file_size();
  ::PROTOBUF_NAMESPACE_ID::int64 data_file_size() const;
  void set_data_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 privacy_policy = 4;
  bool has_privacy_policy() const;
  void clear_privacy_policy();
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy_policy() const;
  void set_privacy_policy(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool completed = 6;
  bool has_completed() const;
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:android.os.incidentd.ReportFileProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::incidentd::ReportFileProto_Report > report_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_file_;
  ::android::os::IncidentMetadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy_policy_;
  bool completed_;
  friend struct ::TableStruct_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportFileProto_Report

// optional string pkg = 1;
inline bool ReportFileProto_Report::has_pkg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportFileProto_Report::clear_pkg() {
  pkg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReportFileProto_Report::pkg() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.pkg)
  return pkg_.GetNoArena();
}
inline void ReportFileProto_Report::set_pkg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.pkg)
}
inline void ReportFileProto_Report::set_pkg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pkg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.incidentd.ReportFileProto.Report.pkg)
}
inline void ReportFileProto_Report::set_pkg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.incidentd.ReportFileProto.Report.pkg)
}
inline void ReportFileProto_Report::set_pkg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.incidentd.ReportFileProto.Report.pkg)
}
inline std::string* ReportFileProto_Report::mutable_pkg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.incidentd.ReportFileProto.Report.pkg)
  return pkg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportFileProto_Report::release_pkg() {
  // @@protoc_insertion_point(field_release:android.os.incidentd.ReportFileProto.Report.pkg)
  if (!has_pkg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pkg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportFileProto_Report::set_allocated_pkg(std::string* pkg) {
  if (pkg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pkg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pkg);
  // @@protoc_insertion_point(field_set_allocated:android.os.incidentd.ReportFileProto.Report.pkg)
}

// optional string cls = 2;
inline bool ReportFileProto_Report::has_cls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportFileProto_Report::clear_cls() {
  cls_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReportFileProto_Report::cls() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.cls)
  return cls_.GetNoArena();
}
inline void ReportFileProto_Report::set_cls(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cls_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.cls)
}
inline void ReportFileProto_Report::set_cls(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cls_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.incidentd.ReportFileProto.Report.cls)
}
inline void ReportFileProto_Report::set_cls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cls_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.incidentd.ReportFileProto.Report.cls)
}
inline void ReportFileProto_Report::set_cls(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cls_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.incidentd.ReportFileProto.Report.cls)
}
inline std::string* ReportFileProto_Report::mutable_cls() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.incidentd.ReportFileProto.Report.cls)
  return cls_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportFileProto_Report::release_cls() {
  // @@protoc_insertion_point(field_release:android.os.incidentd.ReportFileProto.Report.cls)
  if (!has_cls()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cls_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportFileProto_Report::set_allocated_cls(std::string* cls) {
  if (cls != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cls_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cls);
  // @@protoc_insertion_point(field_set_allocated:android.os.incidentd.ReportFileProto.Report.cls)
}

// optional uint32 privacy_policy = 4;
inline bool ReportFileProto_Report::has_privacy_policy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportFileProto_Report::clear_privacy_policy() {
  privacy_policy_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportFileProto_Report::privacy_policy() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.privacy_policy)
  return privacy_policy_;
}
inline void ReportFileProto_Report::set_privacy_policy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  privacy_policy_ = value;
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.privacy_policy)
}

// optional bool all_sections = 5;
inline bool ReportFileProto_Report::has_all_sections() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportFileProto_Report::clear_all_sections() {
  all_sections_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReportFileProto_Report::all_sections() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.all_sections)
  return all_sections_;
}
inline void ReportFileProto_Report::set_all_sections(bool value) {
  _has_bits_[0] |= 0x00000008u;
  all_sections_ = value;
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.all_sections)
}

// repeated int32 section = 6;
inline int ReportFileProto_Report::section_size() const {
  return section_.size();
}
inline void ReportFileProto_Report::clear_section() {
  section_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportFileProto_Report::section(int index) const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.section)
  return section_.Get(index);
}
inline void ReportFileProto_Report::set_section(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  section_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.section)
}
inline void ReportFileProto_Report::add_section(::PROTOBUF_NAMESPACE_ID::int32 value) {
  section_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.incidentd.ReportFileProto.Report.section)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ReportFileProto_Report::section() const {
  // @@protoc_insertion_point(field_list:android.os.incidentd.ReportFileProto.Report.section)
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ReportFileProto_Report::mutable_section() {
  // @@protoc_insertion_point(field_mutable_list:android.os.incidentd.ReportFileProto.Report.section)
  return &section_;
}

// repeated bytes header = 7;
inline int ReportFileProto_Report::header_size() const {
  return header_.size();
}
inline void ReportFileProto_Report::clear_header() {
  header_.Clear();
}
inline const std::string& ReportFileProto_Report::header(int index) const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.header)
  return header_.Get(index);
}
inline std::string* ReportFileProto_Report::mutable_header(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.incidentd.ReportFileProto.Report.header)
  return header_.Mutable(index);
}
inline void ReportFileProto_Report::set_header(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.header)
  header_.Mutable(index)->assign(value);
}
inline void ReportFileProto_Report::set_header(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.header)
  header_.Mutable(index)->assign(std::move(value));
}
inline void ReportFileProto_Report::set_header(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  header_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.os.incidentd.ReportFileProto.Report.header)
}
inline void ReportFileProto_Report::set_header(int index, const void* value, size_t size) {
  header_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.os.incidentd.ReportFileProto.Report.header)
}
inline std::string* ReportFileProto_Report::add_header() {
  // @@protoc_insertion_point(field_add_mutable:android.os.incidentd.ReportFileProto.Report.header)
  return header_.Add();
}
inline void ReportFileProto_Report::add_header(const std::string& value) {
  header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.os.incidentd.ReportFileProto.Report.header)
}
inline void ReportFileProto_Report::add_header(std::string&& value) {
  header_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.os.incidentd.ReportFileProto.Report.header)
}
inline void ReportFileProto_Report::add_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.os.incidentd.ReportFileProto.Report.header)
}
inline void ReportFileProto_Report::add_header(const void* value, size_t size) {
  header_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.os.incidentd.ReportFileProto.Report.header)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReportFileProto_Report::header() const {
  // @@protoc_insertion_point(field_list:android.os.incidentd.ReportFileProto.Report.header)
  return header_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReportFileProto_Report::mutable_header() {
  // @@protoc_insertion_point(field_mutable_list:android.os.incidentd.ReportFileProto.Report.header)
  return &header_;
}

// optional bool share_approved = 8;
inline bool ReportFileProto_Report::has_share_approved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportFileProto_Report::clear_share_approved() {
  share_approved_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ReportFileProto_Report::share_approved() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.share_approved)
  return share_approved_;
}
inline void ReportFileProto_Report::set_share_approved(bool value) {
  _has_bits_[0] |= 0x00000010u;
  share_approved_ = value;
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.share_approved)
}

// optional bool gzip = 9;
inline bool ReportFileProto_Report::has_gzip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportFileProto_Report::clear_gzip() {
  gzip_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ReportFileProto_Report::gzip() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.Report.gzip)
  return gzip_;
}
inline void ReportFileProto_Report::set_gzip(bool value) {
  _has_bits_[0] |= 0x00000020u;
  gzip_ = value;
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.Report.gzip)
}

// -------------------------------------------------------------------

// ReportFileProto

// optional .android.os.IncidentMetadata metadata = 1;
inline bool ReportFileProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::os::IncidentMetadata& ReportFileProto::metadata() const {
  const ::android::os::IncidentMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::IncidentMetadata*>(
      &::android::os::_IncidentMetadata_default_instance_);
}
inline ::android::os::IncidentMetadata* ReportFileProto::release_metadata() {
  // @@protoc_insertion_point(field_release:android.os.incidentd.ReportFileProto.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::IncidentMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::android::os::IncidentMetadata* ReportFileProto::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::IncidentMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.incidentd.ReportFileProto.metadata)
  return metadata_;
}
inline void ReportFileProto::set_allocated_metadata(::android::os::IncidentMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:android.os.incidentd.ReportFileProto.metadata)
}

// repeated .android.os.incidentd.ReportFileProto.Report report = 2;
inline int ReportFileProto::report_size() const {
  return report_.size();
}
inline void ReportFileProto::clear_report() {
  report_.Clear();
}
inline ::android::os::incidentd::ReportFileProto_Report* ReportFileProto::mutable_report(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.incidentd.ReportFileProto.report)
  return report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::incidentd::ReportFileProto_Report >*
ReportFileProto::mutable_report() {
  // @@protoc_insertion_point(field_mutable_list:android.os.incidentd.ReportFileProto.report)
  return &report_;
}
inline const ::android::os::incidentd::ReportFileProto_Report& ReportFileProto::report(int index) const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.report)
  return report_.Get(index);
}
inline ::android::os::incidentd::ReportFileProto_Report* ReportFileProto::add_report() {
  // @@protoc_insertion_point(field_add:android.os.incidentd.ReportFileProto.report)
  return report_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::incidentd::ReportFileProto_Report >&
ReportFileProto::report() const {
  // @@protoc_insertion_point(field_list:android.os.incidentd.ReportFileProto.report)
  return report_;
}

// optional string data_file = 3;
inline bool ReportFileProto::has_data_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportFileProto::clear_data_file() {
  data_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReportFileProto::data_file() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.data_file)
  return data_file_.GetNoArena();
}
inline void ReportFileProto::set_data_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.data_file)
}
inline void ReportFileProto::set_data_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.incidentd.ReportFileProto.data_file)
}
inline void ReportFileProto::set_data_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.incidentd.ReportFileProto.data_file)
}
inline void ReportFileProto::set_data_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.incidentd.ReportFileProto.data_file)
}
inline std::string* ReportFileProto::mutable_data_file() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.incidentd.ReportFileProto.data_file)
  return data_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportFileProto::release_data_file() {
  // @@protoc_insertion_point(field_release:android.os.incidentd.ReportFileProto.data_file)
  if (!has_data_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportFileProto::set_allocated_data_file(std::string* data_file) {
  if (data_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_file);
  // @@protoc_insertion_point(field_set_allocated:android.os.incidentd.ReportFileProto.data_file)
}

// optional uint32 privacy_policy = 4;
inline bool ReportFileProto::has_privacy_policy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportFileProto::clear_privacy_policy() {
  privacy_policy_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportFileProto::privacy_policy() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.privacy_policy)
  return privacy_policy_;
}
inline void ReportFileProto::set_privacy_policy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  privacy_policy_ = value;
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.privacy_policy)
}

// optional int64 data_file_size = 5;
inline bool ReportFileProto::has_data_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportFileProto::clear_data_file_size() {
  data_file_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportFileProto::data_file_size() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.data_file_size)
  return data_file_size_;
}
inline void ReportFileProto::set_data_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  data_file_size_ = value;
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.data_file_size)
}

// optional bool completed = 6;
inline bool ReportFileProto::has_completed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportFileProto::clear_completed() {
  completed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ReportFileProto::completed() const {
  // @@protoc_insertion_point(field_get:android.os.incidentd.ReportFileProto.completed)
  return completed_;
}
inline void ReportFileProto::set_completed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  completed_ = value;
  // @@protoc_insertion_point(field_set:android.os.incidentd.ReportFileProto.completed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace incidentd
}  // namespace os
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto
