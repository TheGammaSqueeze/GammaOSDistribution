// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/cmds/incidentd/src/report_file.proto

#include "frameworks/base/cmds/incidentd/src/report_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IncidentMetadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportFileProto_Report_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto;
namespace android {
namespace os {
namespace incidentd {
class ReportFileProto_ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportFileProto_Report> _instance;
} _ReportFileProto_Report_default_instance_;
class ReportFileProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportFileProto> _instance;
} _ReportFileProto_default_instance_;
}  // namespace incidentd
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_ReportFileProto_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::incidentd::_ReportFileProto_default_instance_;
    new (ptr) ::android::os::incidentd::ReportFileProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::incidentd::ReportFileProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReportFileProto_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ReportFileProto_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto}, {
      &scc_info_IncidentMetadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto.base,
      &scc_info_ReportFileProto_Report_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto.base,}};

static void InitDefaultsscc_info_ReportFileProto_Report_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::incidentd::_ReportFileProto_Report_default_instance_;
    new (ptr) ::android::os::incidentd::ReportFileProto_Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::incidentd::ReportFileProto_Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportFileProto_Report_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReportFileProto_Report_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto}, {}};

namespace android {
namespace os {
namespace incidentd {

// ===================================================================

void ReportFileProto_Report::InitAsDefaultInstance() {
}
class ReportFileProto_Report::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportFileProto_Report>()._has_bits_);
  static void set_has_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cls(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_privacy_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_all_sections(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_share_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gzip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ReportFileProto_Report::ReportFileProto_Report()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.incidentd.ReportFileProto.Report)
}
ReportFileProto_Report::ReportFileProto_Report(const ReportFileProto_Report& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      section_(from.section_),
      header_(from.header_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_pkg()) {
    pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pkg_);
  }
  cls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cls()) {
    cls_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cls_);
  }
  ::memcpy(&privacy_policy_, &from.privacy_policy_,
    static_cast<size_t>(reinterpret_cast<char*>(&gzip_) -
    reinterpret_cast<char*>(&privacy_policy_)) + sizeof(gzip_));
  // @@protoc_insertion_point(copy_constructor:android.os.incidentd.ReportFileProto.Report)
}

void ReportFileProto_Report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportFileProto_Report_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto.base);
  pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&privacy_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gzip_) -
      reinterpret_cast<char*>(&privacy_policy_)) + sizeof(gzip_));
}

ReportFileProto_Report::~ReportFileProto_Report() {
  // @@protoc_insertion_point(destructor:android.os.incidentd.ReportFileProto.Report)
  SharedDtor();
}

void ReportFileProto_Report::SharedDtor() {
  pkg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cls_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportFileProto_Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportFileProto_Report& ReportFileProto_Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportFileProto_Report_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto.base);
  return *internal_default_instance();
}


void ReportFileProto_Report::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.incidentd.ReportFileProto.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_.Clear();
  header_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pkg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cls_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&privacy_policy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gzip_) -
        reinterpret_cast<char*>(&privacy_policy_)) + sizeof(gzip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportFileProto_Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pkg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_pkg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cls(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 privacy_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_privacy_policy(&has_bits);
          privacy_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all_sections = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_all_sections(&has_bits);
          all_sections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 section = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_section(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_section(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes header = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_header(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional bool share_approved = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_share_approved(&has_bits);
          share_approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gzip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_gzip(&has_bits);
          gzip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportFileProto_Report::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.incidentd.ReportFileProto.Report)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pkg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cls = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 privacy_policy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_privacy_policy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privacy_policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_sections = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_all_sections(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_sections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 section = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_section())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_section())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes header = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool share_approved = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_share_approved(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_approved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gzip = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_gzip(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gzip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.incidentd.ReportFileProto.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.incidentd.ReportFileProto.Report)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportFileProto_Report::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.incidentd.ReportFileProto.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pkg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pkg(), output);
  }

  // optional string cls = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cls(), output);
  }

  // optional uint32 privacy_policy = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->privacy_policy(), output);
  }

  // optional bool all_sections = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->all_sections(), output);
  }

  // repeated int32 section = 6;
  for (int i = 0, n = this->section_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      6, this->section(i), output);
  }

  // repeated bytes header = 7;
  for (int i = 0, n = this->header_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      7, this->header(i), output);
  }

  // optional bool share_approved = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->share_approved(), output);
  }

  // optional bool gzip = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->gzip(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.incidentd.ReportFileProto.Report)
}

size_t ReportFileProto_Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.incidentd.ReportFileProto.Report)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 section = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->section_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->section_size());
    total_size += data_size;
  }

  // repeated bytes header = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->header_size());
  for (int i = 0, n = this->header_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->header(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string pkg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->pkg());
    }

    // optional string cls = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cls());
    }

    // optional uint32 privacy_policy = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->privacy_policy());
    }

    // optional bool all_sections = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool share_approved = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool gzip = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportFileProto_Report::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReportFileProto_Report*>(
      &from));
}

void ReportFileProto_Report::MergeFrom(const ReportFileProto_Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.incidentd.ReportFileProto.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_.MergeFrom(from.section_);
  header_.MergeFrom(from.header_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pkg_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cls_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cls_);
    }
    if (cached_has_bits & 0x00000004u) {
      privacy_policy_ = from.privacy_policy_;
    }
    if (cached_has_bits & 0x00000008u) {
      all_sections_ = from.all_sections_;
    }
    if (cached_has_bits & 0x00000010u) {
      share_approved_ = from.share_approved_;
    }
    if (cached_has_bits & 0x00000020u) {
      gzip_ = from.gzip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportFileProto_Report::CopyFrom(const ReportFileProto_Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.incidentd.ReportFileProto.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportFileProto_Report::IsInitialized() const {
  return true;
}

void ReportFileProto_Report::InternalSwap(ReportFileProto_Report* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_.InternalSwap(&other->section_);
  header_.InternalSwap(CastToBase(&other->header_));
  pkg_.Swap(&other->pkg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cls_.Swap(&other->cls_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(privacy_policy_, other->privacy_policy_);
  swap(all_sections_, other->all_sections_);
  swap(share_approved_, other->share_approved_);
  swap(gzip_, other->gzip_);
}

std::string ReportFileProto_Report::GetTypeName() const {
  return "android.os.incidentd.ReportFileProto.Report";
}


// ===================================================================

void ReportFileProto::InitAsDefaultInstance() {
  ::android::os::incidentd::_ReportFileProto_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::android::os::IncidentMetadata*>(
      ::android::os::IncidentMetadata::internal_default_instance());
}
class ReportFileProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportFileProto>()._has_bits_);
  static const ::android::os::IncidentMetadata& metadata(const ReportFileProto* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privacy_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::os::IncidentMetadata&
ReportFileProto::_Internal::metadata(const ReportFileProto* msg) {
  return *msg->metadata_;
}
void ReportFileProto::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ReportFileProto::ReportFileProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.incidentd.ReportFileProto)
}
ReportFileProto::ReportFileProto(const ReportFileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      report_(from.report_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_file()) {
    data_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_file_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::android::os::IncidentMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&data_file_size_, &from.data_file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&data_file_size_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:android.os.incidentd.ReportFileProto)
}

void ReportFileProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportFileProto_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto.base);
  data_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(completed_));
}

ReportFileProto::~ReportFileProto() {
  // @@protoc_insertion_point(destructor:android.os.incidentd.ReportFileProto)
  SharedDtor();
}

void ReportFileProto::SharedDtor() {
  data_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void ReportFileProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportFileProto& ReportFileProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportFileProto_frameworks_2fbase_2fcmds_2fincidentd_2fsrc_2freport_5ffile_2eproto.base);
  return *internal_default_instance();
}


void ReportFileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.incidentd.ReportFileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&data_file_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&data_file_size_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportFileProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.IncidentMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.incidentd.ReportFileProto.Report report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional string data_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data_file(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 privacy_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_privacy_policy(&has_bits);
          privacy_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 data_file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_data_file_size(&has_bits);
          data_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportFileProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.incidentd.ReportFileProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.IncidentMetadata metadata = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.incidentd.ReportFileProto.Report report = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_file = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_data_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 privacy_policy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_privacy_policy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privacy_policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 data_file_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_data_file_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool completed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_completed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.incidentd.ReportFileProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.incidentd.ReportFileProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportFileProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.incidentd.ReportFileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.IncidentMetadata metadata = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::metadata(this), output);
  }

  // repeated .android.os.incidentd.ReportFileProto.Report report = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->report(static_cast<int>(i)),
      output);
  }

  // optional string data_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data_file(), output);
  }

  // optional uint32 privacy_policy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->privacy_policy(), output);
  }

  // optional int64 data_file_size = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->data_file_size(), output);
  }

  // optional bool completed = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->completed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.incidentd.ReportFileProto)
}

size_t ReportFileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.incidentd.ReportFileProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.incidentd.ReportFileProto.Report report = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->report_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->report(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string data_file = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->data_file());
    }

    // optional .android.os.IncidentMetadata metadata = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional int64 data_file_size = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->data_file_size());
    }

    // optional uint32 privacy_policy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->privacy_policy());
    }

    // optional bool completed = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportFileProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReportFileProto*>(
      &from));
}

void ReportFileProto::MergeFrom(const ReportFileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.incidentd.ReportFileProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  report_.MergeFrom(from.report_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_metadata()->::android::os::IncidentMetadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      data_file_size_ = from.data_file_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      privacy_policy_ = from.privacy_policy_;
    }
    if (cached_has_bits & 0x00000010u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportFileProto::CopyFrom(const ReportFileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.incidentd.ReportFileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportFileProto::IsInitialized() const {
  return true;
}

void ReportFileProto::InternalSwap(ReportFileProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&report_)->InternalSwap(CastToBase(&other->report_));
  data_file_.Swap(&other->data_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(data_file_size_, other->data_file_size_);
  swap(privacy_policy_, other->privacy_policy_);
  swap(completed_, other->completed_);
}

std::string ReportFileProto::GetTypeName() const {
  return "android.os.incidentd.ReportFileProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace incidentd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::incidentd::ReportFileProto_Report* Arena::CreateMaybeMessage< ::android::os::incidentd::ReportFileProto_Report >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::incidentd::ReportFileProto_Report >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::incidentd::ReportFileProto* Arena::CreateMaybeMessage< ::android::os::incidentd::ReportFileProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::incidentd::ReportFileProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
