<?xml version="1.0" encoding="UTF-8" standalone="no"?><config><compat-change description="Keystore operation creation may fail Keystore used to work under the assumption that the creation of cryptographic operations always succeeds. However, the KeyMint backend has only a limited number of operation slots. In order to keep up the appearance of &quot;infinite&quot; operation slots, the Keystore daemon would prune least recently used operations if there is no available operation slot. As a result, good operations could be terminated prematurely. This opens AndroidKeystore up to denial-of-service and unintended livelock situations. E.g.: if multiple apps wake up at the same time, e.g., due to power management optimizations, and attempt to perform crypto operations, they start terminating each others operations without making any progress. To break out of livelocks and to discourage DoS attempts we have changed the pruning strategy such that it prefers clients that use few operation slots and only briefly. As a result we can, almost, guarantee that single operations that don't linger inactive for more than 5 seconds will conclude unhampered by the pruning strategy. &quot;Almost&quot;, because there are operations related to file system encryption that can prune even these operations, but those are extremely rare. As a side effect of this new pruning strategy operation creation can now fail if the client has a lower pruning power than all of the existing operations. Pruning strategy To find a suitable candidate we compute the malus for the caller and each existing operation. The malus is the inverse of the pruning power (caller) or pruning resistance (existing operation). For the caller to be able to prune an operation it must find an operation with a malus higher than its own. For more detail on the pruning strategy consult the implementation at https://android.googlesource.com/platform/system/security/+/refs/heads/master/keystore2/src/operation.rs For older SDK version, KeyStore2 will poll the Keystore daemon for a free operation slot. So to applications, targeting earlier SDK versions, it will still look like cipher and signature object initialization always succeeds, however, it may take longer to get an operation. All SDK version benefit from fairer operation slot scheduling and a better chance to successfully conclude an operation." disabled="true" id="169897160" name="KEYSTORE_OPERATION_CREATION_MAY_FAIL"><meta-data definedIn="android.security.KeyStore2" sourcePosition="frameworks/base/keystore/java/android/security/KeyStore2.java:88"/></compat-change></config>