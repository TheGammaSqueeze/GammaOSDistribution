package android.widget;

import android.R;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.IntFlagMapping;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link TextView}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class TextView$InspectionCompanion implements InspectionCompanion<TextView> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code autoLink}.
     */
    private int mAutoLinkId;

    /**
     * Property ID of {@code autoSizeMaxTextSize}.
     */
    private int mAutoSizeMaxTextSizeId;

    /**
     * Property ID of {@code autoSizeMinTextSize}.
     */
    private int mAutoSizeMinTextSizeId;

    /**
     * Property ID of {@code autoSizeStepGranularity}.
     */
    private int mAutoSizeStepGranularityId;

    /**
     * Property ID of {@code autoSizeTextType}.
     */
    private int mAutoSizeTextTypeId;

    /**
     * Property ID of {@code breakStrategy}.
     */
    private int mBreakStrategyId;

    /**
     * Property ID of {@code cursorVisible}.
     */
    private int mCursorVisibleId;

    /**
     * Property ID of {@code drawableBlendMode}.
     */
    private int mDrawableBlendModeId;

    /**
     * Property ID of {@code drawablePadding}.
     */
    private int mDrawablePaddingId;

    /**
     * Property ID of {@code drawableTint}.
     */
    private int mDrawableTintId;

    /**
     * Property ID of {@code drawableTintMode}.
     */
    private int mDrawableTintModeId;

    /**
     * Property ID of {@code elegantTextHeight}.
     */
    private int mElegantTextHeightId;

    /**
     * Property ID of {@code ellipsize}.
     */
    private int mEllipsizeId;

    /**
     * Property ID of {@code fallbackLineSpacing}.
     */
    private int mFallbackLineSpacingId;

    /**
     * Property ID of {@code firstBaselineToTopHeight}.
     */
    private int mFirstBaselineToTopHeightId;

    /**
     * Property ID of {@code fontFeatureSettings}.
     */
    private int mFontFeatureSettingsId;

    /**
     * Property ID of {@code freezesText}.
     */
    private int mFreezesTextId;

    /**
     * Property ID of {@code gravity}.
     */
    private int mGravityId;

    /**
     * Property ID of {@code hint}.
     */
    private int mHintId;

    /**
     * Property ID of {@code hyphenationFrequency}.
     */
    private int mHyphenationFrequencyId;

    /**
     * Property ID of {@code imeActionId}.
     */
    private int mImeActionIdId;

    /**
     * Property ID of {@code imeActionLabel}.
     */
    private int mImeActionLabelId;

    /**
     * Property ID of {@code imeOptions}.
     */
    private int mImeOptionsId;

    /**
     * Property ID of {@code includeFontPadding}.
     */
    private int mIncludeFontPaddingId;

    /**
     * Property ID of {@code inputType}.
     */
    private int mInputTypeId;

    /**
     * Property ID of {@code justificationMode}.
     */
    private int mJustificationModeId;

    /**
     * Property ID of {@code lastBaselineToBottomHeight}.
     */
    private int mLastBaselineToBottomHeightId;

    /**
     * Property ID of {@code letterSpacing}.
     */
    private int mLetterSpacingId;

    /**
     * Property ID of {@code lineHeight}.
     */
    private int mLineHeightId;

    /**
     * Property ID of {@code lineSpacingExtra}.
     */
    private int mLineSpacingExtraId;

    /**
     * Property ID of {@code lineSpacingMultiplier}.
     */
    private int mLineSpacingMultiplierId;

    /**
     * Property ID of {@code linksClickable}.
     */
    private int mLinksClickableId;

    /**
     * Property ID of {@code marqueeRepeatLimit}.
     */
    private int mMarqueeRepeatLimitId;

    /**
     * Property ID of {@code maxEms}.
     */
    private int mMaxEmsId;

    /**
     * Property ID of {@code maxHeight}.
     */
    private int mMaxHeightId;

    /**
     * Property ID of {@code maxLines}.
     */
    private int mMaxLinesId;

    /**
     * Property ID of {@code maxWidth}.
     */
    private int mMaxWidthId;

    /**
     * Property ID of {@code minEms}.
     */
    private int mMinEmsId;

    /**
     * Property ID of {@code minLines}.
     */
    private int mMinLinesId;

    /**
     * Property ID of {@code minWidth}.
     */
    private int mMinWidthId;

    /**
     * Property ID of {@code privateImeOptions}.
     */
    private int mPrivateImeOptionsId;

    /**
     * Property ID of {@code scrollHorizontally}.
     */
    private int mScrollHorizontallyId;

    /**
     * Property ID of {@code shadowColor}.
     */
    private int mShadowColorId;

    /**
     * Property ID of {@code shadowDx}.
     */
    private int mShadowDxId;

    /**
     * Property ID of {@code shadowDy}.
     */
    private int mShadowDyId;

    /**
     * Property ID of {@code shadowRadius}.
     */
    private int mShadowRadiusId;

    /**
     * Property ID of {@code singleLine}.
     */
    private int mSingleLineId;

    /**
     * Property ID of {@code text}.
     */
    private int mTextId;

    /**
     * Property ID of {@code textAllCaps}.
     */
    private int mTextAllCapsId;

    /**
     * Property ID of {@code textColor}.
     */
    private int mTextColorId;

    /**
     * Property ID of {@code textColorHighlight}.
     */
    private int mTextColorHighlightId;

    /**
     * Property ID of {@code textColorHint}.
     */
    private int mTextColorHintId;

    /**
     * Property ID of {@code textColorLink}.
     */
    private int mTextColorLinkId;

    /**
     * Property ID of {@code textIsSelectable}.
     */
    private int mTextIsSelectableId;

    /**
     * Property ID of {@code textScaleX}.
     */
    private int mTextScaleXId;

    /**
     * Property ID of {@code textSize}.
     */
    private int mTextSizeId;

    /**
     * Property ID of {@code typeface}.
     */
    private int mTypefaceId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        final IntFlagMapping autoLinkFlagMapping = new IntFlagMapping();
        autoLinkFlagMapping.add(0x00000002, 0x00000002, "email");
        autoLinkFlagMapping.add(0x00000008, 0x00000008, "map");
        autoLinkFlagMapping.add(0x00000004, 0x00000004, "phone");
        autoLinkFlagMapping.add(0x00000001, 0x00000001, "web");
        mAutoLinkId = propertyMapper.mapIntFlag("autoLink", R.attr.autoLink, autoLinkFlagMapping::get);
        mAutoSizeMaxTextSizeId = propertyMapper.mapInt("autoSizeMaxTextSize", R.attr.autoSizeMaxTextSize);
        mAutoSizeMinTextSizeId = propertyMapper.mapInt("autoSizeMinTextSize", R.attr.autoSizeMinTextSize);
        mAutoSizeStepGranularityId = propertyMapper.mapInt("autoSizeStepGranularity", R.attr.autoSizeStepGranularity);
        final SparseArray<String> autoSizeTextTypeEnumMapping = new SparseArray<>();
        autoSizeTextTypeEnumMapping.put(0, "none");
        autoSizeTextTypeEnumMapping.put(1, "uniform");
        mAutoSizeTextTypeId = propertyMapper.mapIntEnum("autoSizeTextType", R.attr.autoSizeTextType, autoSizeTextTypeEnumMapping::get);
        final SparseArray<String> breakStrategyEnumMapping = new SparseArray<>();
        breakStrategyEnumMapping.put(0, "simple");
        breakStrategyEnumMapping.put(1, "high_quality");
        breakStrategyEnumMapping.put(2, "balanced");
        mBreakStrategyId = propertyMapper.mapIntEnum("breakStrategy", R.attr.breakStrategy, breakStrategyEnumMapping::get);
        mCursorVisibleId = propertyMapper.mapBoolean("cursorVisible", R.attr.cursorVisible);
        mDrawableBlendModeId = propertyMapper.mapObject("drawableBlendMode", 0x00000050);
        mDrawablePaddingId = propertyMapper.mapInt("drawablePadding", R.attr.drawablePadding);
        mDrawableTintId = propertyMapper.mapObject("drawableTint", R.attr.drawableTint);
        mDrawableTintModeId = propertyMapper.mapObject("drawableTintMode", R.attr.drawableTintMode);
        mElegantTextHeightId = propertyMapper.mapBoolean("elegantTextHeight", R.attr.elegantTextHeight);
        mEllipsizeId = propertyMapper.mapObject("ellipsize", R.attr.ellipsize);
        mFallbackLineSpacingId = propertyMapper.mapBoolean("fallbackLineSpacing", R.attr.fallbackLineSpacing);
        mFirstBaselineToTopHeightId = propertyMapper.mapInt("firstBaselineToTopHeight", R.attr.firstBaselineToTopHeight);
        mFontFeatureSettingsId = propertyMapper.mapObject("fontFeatureSettings", R.attr.fontFeatureSettings);
        mFreezesTextId = propertyMapper.mapBoolean("freezesText", R.attr.freezesText);
        mGravityId = propertyMapper.mapGravity("gravity", R.attr.gravity);
        mHintId = propertyMapper.mapObject("hint", R.attr.hint);
        final SparseArray<String> hyphenationFrequencyEnumMapping = new SparseArray<>();
        hyphenationFrequencyEnumMapping.put(0, "none");
        hyphenationFrequencyEnumMapping.put(1, "normal");
        hyphenationFrequencyEnumMapping.put(2, "full");
        mHyphenationFrequencyId = propertyMapper.mapIntEnum("hyphenationFrequency", R.attr.hyphenationFrequency, hyphenationFrequencyEnumMapping::get);
        mImeActionIdId = propertyMapper.mapInt("imeActionId", R.attr.imeActionId);
        mImeActionLabelId = propertyMapper.mapObject("imeActionLabel", R.attr.imeActionLabel);
        final IntFlagMapping imeOptionsFlagMapping = new IntFlagMapping();
        imeOptionsFlagMapping.add(0x000000ff, 0x00000006, "actionDone");
        imeOptionsFlagMapping.add(0x000000ff, 0x00000002, "actionGo");
        imeOptionsFlagMapping.add(0x000000ff, 0x00000005, "actionNext");
        imeOptionsFlagMapping.add(0x000000ff, 0x00000001, "actionNone");
        imeOptionsFlagMapping.add(0x000000ff, 0x00000007, "actionPrevious");
        imeOptionsFlagMapping.add(0x000000ff, 0x00000003, "actionSearch");
        imeOptionsFlagMapping.add(0x000000ff, 0x00000004, "actionSend");
        imeOptionsFlagMapping.add(0x000000ff, 0x00000000, "actionUnspecified");
        imeOptionsFlagMapping.add(0x80000000, 0x80000000, "flagForceAscii");
        imeOptionsFlagMapping.add(0x08000000, 0x08000000, "flagNavigateNext");
        imeOptionsFlagMapping.add(0x04000000, 0x04000000, "flagNavigatePrevious");
        imeOptionsFlagMapping.add(0x20000000, 0x20000000, "flagNoAccessoryAction");
        imeOptionsFlagMapping.add(0x40000000, 0x40000000, "flagNoEnterAction");
        imeOptionsFlagMapping.add(0x10000000, 0x10000000, "flagNoExtractUi");
        imeOptionsFlagMapping.add(0x02000000, 0x02000000, "flagNoFullscreen");
        imeOptionsFlagMapping.add(0x01000000, 0x01000000, "flagNoPersonalizedLearning");
        imeOptionsFlagMapping.add(0xffffffff, 0x00000000, "normal");
        mImeOptionsId = propertyMapper.mapIntFlag("imeOptions", R.attr.imeOptions, imeOptionsFlagMapping::get);
        mIncludeFontPaddingId = propertyMapper.mapBoolean("includeFontPadding", R.attr.includeFontPadding);
        final IntFlagMapping inputTypeFlagMapping = new IntFlagMapping();
        inputTypeFlagMapping.add(0x00000fff, 0x00000014, "date");
        inputTypeFlagMapping.add(0x00000fff, 0x00000004, "datetime");
        inputTypeFlagMapping.add(0xffffffff, 0x00000000, "none");
        inputTypeFlagMapping.add(0x00000fff, 0x00000002, "number");
        inputTypeFlagMapping.add(0x00fff00f, 0x00002002, "numberDecimal");
        inputTypeFlagMapping.add(0x00000fff, 0x00000012, "numberPassword");
        inputTypeFlagMapping.add(0x00fff00f, 0x00001002, "numberSigned");
        inputTypeFlagMapping.add(0x00000fff, 0x00000003, "phone");
        inputTypeFlagMapping.add(0x00000fff, 0x00000001, "text");
        inputTypeFlagMapping.add(0x00fff00f, 0x00010001, "textAutoComplete");
        inputTypeFlagMapping.add(0x00fff00f, 0x00008001, "textAutoCorrect");
        inputTypeFlagMapping.add(0x00fff00f, 0x00001001, "textCapCharacters");
        inputTypeFlagMapping.add(0x00fff00f, 0x00004001, "textCapSentences");
        inputTypeFlagMapping.add(0x00fff00f, 0x00002001, "textCapWords");
        inputTypeFlagMapping.add(0x00000fff, 0x00000021, "textEmailAddress");
        inputTypeFlagMapping.add(0x00000fff, 0x00000031, "textEmailSubject");
        inputTypeFlagMapping.add(0x00000fff, 0x000000b1, "textFilter");
        inputTypeFlagMapping.add(0x00fff00f, 0x00040001, "textImeMultiLine");
        inputTypeFlagMapping.add(0x00000fff, 0x00000051, "textLongMessage");
        inputTypeFlagMapping.add(0x00fff00f, 0x00020001, "textMultiLine");
        inputTypeFlagMapping.add(0x00fff00f, 0x00080001, "textNoSuggestions");
        inputTypeFlagMapping.add(0x00000fff, 0x00000081, "textPassword");
        inputTypeFlagMapping.add(0x00000fff, 0x00000061, "textPersonName");
        inputTypeFlagMapping.add(0x00000fff, 0x000000c1, "textPhonetic");
        inputTypeFlagMapping.add(0x00000fff, 0x00000071, "textPostalAddress");
        inputTypeFlagMapping.add(0x00000fff, 0x00000041, "textShortMessage");
        inputTypeFlagMapping.add(0x00000fff, 0x00000011, "textUri");
        inputTypeFlagMapping.add(0x00000fff, 0x00000091, "textVisiblePassword");
        inputTypeFlagMapping.add(0x00000fff, 0x000000a1, "textWebEditText");
        inputTypeFlagMapping.add(0x00000fff, 0x000000d1, "textWebEmailAddress");
        inputTypeFlagMapping.add(0x00000fff, 0x000000e1, "textWebPassword");
        inputTypeFlagMapping.add(0x00000fff, 0x00000024, "time");
        mInputTypeId = propertyMapper.mapIntFlag("inputType", R.attr.inputType, inputTypeFlagMapping::get);
        final SparseArray<String> justificationModeEnumMapping = new SparseArray<>();
        justificationModeEnumMapping.put(0, "none");
        justificationModeEnumMapping.put(1, "inter_word");
        mJustificationModeId = propertyMapper.mapIntEnum("justificationMode", R.attr.justificationMode, justificationModeEnumMapping::get);
        mLastBaselineToBottomHeightId = propertyMapper.mapInt("lastBaselineToBottomHeight", R.attr.lastBaselineToBottomHeight);
        mLetterSpacingId = propertyMapper.mapFloat("letterSpacing", R.attr.letterSpacing);
        mLineHeightId = propertyMapper.mapInt("lineHeight", R.attr.lineHeight);
        mLineSpacingExtraId = propertyMapper.mapFloat("lineSpacingExtra", R.attr.lineSpacingExtra);
        mLineSpacingMultiplierId = propertyMapper.mapFloat("lineSpacingMultiplier", R.attr.lineSpacingMultiplier);
        mLinksClickableId = propertyMapper.mapBoolean("linksClickable", R.attr.linksClickable);
        mMarqueeRepeatLimitId = propertyMapper.mapInt("marqueeRepeatLimit", R.attr.marqueeRepeatLimit);
        mMaxEmsId = propertyMapper.mapInt("maxEms", R.attr.maxEms);
        mMaxHeightId = propertyMapper.mapInt("maxHeight", R.attr.maxHeight);
        mMaxLinesId = propertyMapper.mapInt("maxLines", R.attr.maxLines);
        mMaxWidthId = propertyMapper.mapInt("maxWidth", R.attr.maxWidth);
        mMinEmsId = propertyMapper.mapInt("minEms", R.attr.minEms);
        mMinLinesId = propertyMapper.mapInt("minLines", R.attr.minLines);
        mMinWidthId = propertyMapper.mapInt("minWidth", R.attr.minWidth);
        mPrivateImeOptionsId = propertyMapper.mapObject("privateImeOptions", R.attr.privateImeOptions);
        mScrollHorizontallyId = propertyMapper.mapBoolean("scrollHorizontally", R.attr.scrollHorizontally);
        mShadowColorId = propertyMapper.mapColor("shadowColor", R.attr.shadowColor);
        mShadowDxId = propertyMapper.mapFloat("shadowDx", R.attr.shadowDx);
        mShadowDyId = propertyMapper.mapFloat("shadowDy", R.attr.shadowDy);
        mShadowRadiusId = propertyMapper.mapFloat("shadowRadius", R.attr.shadowRadius);
        mSingleLineId = propertyMapper.mapBoolean("singleLine", R.attr.singleLine);
        mTextId = propertyMapper.mapObject("text", R.attr.text);
        mTextAllCapsId = propertyMapper.mapBoolean("textAllCaps", R.attr.textAllCaps);
        mTextColorId = propertyMapper.mapObject("textColor", R.attr.textColor);
        mTextColorHighlightId = propertyMapper.mapColor("textColorHighlight", R.attr.textColorHighlight);
        mTextColorHintId = propertyMapper.mapObject("textColorHint", R.attr.textColorHint);
        mTextColorLinkId = propertyMapper.mapObject("textColorLink", R.attr.textColorLink);
        mTextIsSelectableId = propertyMapper.mapBoolean("textIsSelectable", R.attr.textIsSelectable);
        mTextScaleXId = propertyMapper.mapFloat("textScaleX", R.attr.textScaleX);
        mTextSizeId = propertyMapper.mapFloat("textSize", R.attr.textSize);
        mTypefaceId = propertyMapper.mapObject("typeface", R.attr.typeface);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(TextView node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readIntFlag(mAutoLinkId, node.getAutoLinkMask());
        propertyReader.readInt(mAutoSizeMaxTextSizeId, node.getAutoSizeMaxTextSize());
        propertyReader.readInt(mAutoSizeMinTextSizeId, node.getAutoSizeMinTextSize());
        propertyReader.readInt(mAutoSizeStepGranularityId, node.getAutoSizeStepGranularity());
        propertyReader.readIntEnum(mAutoSizeTextTypeId, node.getAutoSizeTextType());
        propertyReader.readIntEnum(mBreakStrategyId, node.getBreakStrategy());
        propertyReader.readBoolean(mCursorVisibleId, node.isCursorVisible());
        propertyReader.readObject(mDrawableBlendModeId, node.getCompoundDrawableTintBlendMode());
        propertyReader.readInt(mDrawablePaddingId, node.getCompoundDrawablePadding());
        propertyReader.readObject(mDrawableTintId, node.getCompoundDrawableTintList());
        propertyReader.readObject(mDrawableTintModeId, node.getCompoundDrawableTintMode());
        propertyReader.readBoolean(mElegantTextHeightId, node.isElegantTextHeight());
        propertyReader.readObject(mEllipsizeId, node.getEllipsize());
        propertyReader.readBoolean(mFallbackLineSpacingId, node.isFallbackLineSpacing());
        propertyReader.readInt(mFirstBaselineToTopHeightId, node.getFirstBaselineToTopHeight());
        propertyReader.readObject(mFontFeatureSettingsId, node.getFontFeatureSettings());
        propertyReader.readBoolean(mFreezesTextId, node.getFreezesText());
        propertyReader.readGravity(mGravityId, node.getGravity());
        propertyReader.readObject(mHintId, node.getHint());
        propertyReader.readIntEnum(mHyphenationFrequencyId, node.getHyphenationFrequency());
        propertyReader.readInt(mImeActionIdId, node.getImeActionId());
        propertyReader.readObject(mImeActionLabelId, node.getImeActionLabel());
        propertyReader.readIntFlag(mImeOptionsId, node.getImeOptions());
        propertyReader.readBoolean(mIncludeFontPaddingId, node.getIncludeFontPadding());
        propertyReader.readIntFlag(mInputTypeId, node.getInputType());
        propertyReader.readIntEnum(mJustificationModeId, node.getJustificationMode());
        propertyReader.readInt(mLastBaselineToBottomHeightId, node.getLastBaselineToBottomHeight());
        propertyReader.readFloat(mLetterSpacingId, node.getLetterSpacing());
        propertyReader.readInt(mLineHeightId, node.getLineHeight());
        propertyReader.readFloat(mLineSpacingExtraId, node.getLineSpacingExtra());
        propertyReader.readFloat(mLineSpacingMultiplierId, node.getLineSpacingMultiplier());
        propertyReader.readBoolean(mLinksClickableId, node.getLinksClickable());
        propertyReader.readInt(mMarqueeRepeatLimitId, node.getMarqueeRepeatLimit());
        propertyReader.readInt(mMaxEmsId, node.getMaxEms());
        propertyReader.readInt(mMaxHeightId, node.getMaxHeight());
        propertyReader.readInt(mMaxLinesId, node.getMaxLines());
        propertyReader.readInt(mMaxWidthId, node.getMaxWidth());
        propertyReader.readInt(mMinEmsId, node.getMinEms());
        propertyReader.readInt(mMinLinesId, node.getMinLines());
        propertyReader.readInt(mMinWidthId, node.getMinWidth());
        propertyReader.readObject(mPrivateImeOptionsId, node.getPrivateImeOptions());
        propertyReader.readBoolean(mScrollHorizontallyId, node.isHorizontallyScrollable());
        propertyReader.readColor(mShadowColorId, node.getShadowColor());
        propertyReader.readFloat(mShadowDxId, node.getShadowDx());
        propertyReader.readFloat(mShadowDyId, node.getShadowDy());
        propertyReader.readFloat(mShadowRadiusId, node.getShadowRadius());
        propertyReader.readBoolean(mSingleLineId, node.isSingleLine());
        propertyReader.readObject(mTextId, node.getText());
        propertyReader.readBoolean(mTextAllCapsId, node.isAllCaps());
        propertyReader.readObject(mTextColorId, node.getTextColors());
        propertyReader.readColor(mTextColorHighlightId, node.getHighlightColor());
        propertyReader.readObject(mTextColorHintId, node.getHintTextColors());
        propertyReader.readObject(mTextColorLinkId, node.getLinkTextColors());
        propertyReader.readBoolean(mTextIsSelectableId, node.isTextSelectable());
        propertyReader.readFloat(mTextScaleXId, node.getTextScaleX());
        propertyReader.readFloat(mTextSizeId, node.getTextSize());
        propertyReader.readObject(mTypefaceId, node.getTypeface());
    }
}
