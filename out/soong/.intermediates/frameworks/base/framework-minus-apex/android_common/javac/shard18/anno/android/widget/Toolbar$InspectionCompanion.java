package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link Toolbar}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class Toolbar$InspectionCompanion implements InspectionCompanion<Toolbar> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code collapseContentDescription}.
     */
    private int mCollapseContentDescriptionId;

    /**
     * Property ID of {@code collapseIcon}.
     */
    private int mCollapseIconId;

    /**
     * Property ID of {@code contentInsetEnd}.
     */
    private int mContentInsetEndId;

    /**
     * Property ID of {@code contentInsetEndWithActions}.
     */
    private int mContentInsetEndWithActionsId;

    /**
     * Property ID of {@code contentInsetLeft}.
     */
    private int mContentInsetLeftId;

    /**
     * Property ID of {@code contentInsetRight}.
     */
    private int mContentInsetRightId;

    /**
     * Property ID of {@code contentInsetStart}.
     */
    private int mContentInsetStartId;

    /**
     * Property ID of {@code contentInsetStartWithNavigation}.
     */
    private int mContentInsetStartWithNavigationId;

    /**
     * Property ID of {@code logo}.
     */
    private int mLogoId;

    /**
     * Property ID of {@code logoDescription}.
     */
    private int mLogoDescriptionId;

    /**
     * Property ID of {@code navigationContentDescription}.
     */
    private int mNavigationContentDescriptionId;

    /**
     * Property ID of {@code navigationIcon}.
     */
    private int mNavigationIconId;

    /**
     * Property ID of {@code popupTheme}.
     */
    private int mPopupThemeId;

    /**
     * Property ID of {@code subtitle}.
     */
    private int mSubtitleId;

    /**
     * Property ID of {@code title}.
     */
    private int mTitleId;

    /**
     * Property ID of {@code titleMarginBottom}.
     */
    private int mTitleMarginBottomId;

    /**
     * Property ID of {@code titleMarginEnd}.
     */
    private int mTitleMarginEndId;

    /**
     * Property ID of {@code titleMarginStart}.
     */
    private int mTitleMarginStartId;

    /**
     * Property ID of {@code titleMarginTop}.
     */
    private int mTitleMarginTopId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mCollapseContentDescriptionId = propertyMapper.mapObject("collapseContentDescription", R.attr.collapseContentDescription);
        mCollapseIconId = propertyMapper.mapObject("collapseIcon", R.attr.collapseIcon);
        mContentInsetEndId = propertyMapper.mapInt("contentInsetEnd", R.attr.contentInsetEnd);
        mContentInsetEndWithActionsId = propertyMapper.mapInt("contentInsetEndWithActions", R.attr.contentInsetEndWithActions);
        mContentInsetLeftId = propertyMapper.mapInt("contentInsetLeft", R.attr.contentInsetLeft);
        mContentInsetRightId = propertyMapper.mapInt("contentInsetRight", R.attr.contentInsetRight);
        mContentInsetStartId = propertyMapper.mapInt("contentInsetStart", R.attr.contentInsetStart);
        mContentInsetStartWithNavigationId = propertyMapper.mapInt("contentInsetStartWithNavigation", R.attr.contentInsetStartWithNavigation);
        mLogoId = propertyMapper.mapObject("logo", R.attr.logo);
        mLogoDescriptionId = propertyMapper.mapObject("logoDescription", R.attr.logoDescription);
        mNavigationContentDescriptionId = propertyMapper.mapObject("navigationContentDescription", R.attr.navigationContentDescription);
        mNavigationIconId = propertyMapper.mapObject("navigationIcon", R.attr.navigationIcon);
        mPopupThemeId = propertyMapper.mapInt("popupTheme", R.attr.popupTheme);
        mSubtitleId = propertyMapper.mapObject("subtitle", R.attr.subtitle);
        mTitleId = propertyMapper.mapObject("title", R.attr.title);
        mTitleMarginBottomId = propertyMapper.mapInt("titleMarginBottom", R.attr.titleMarginBottom);
        mTitleMarginEndId = propertyMapper.mapInt("titleMarginEnd", R.attr.titleMarginEnd);
        mTitleMarginStartId = propertyMapper.mapInt("titleMarginStart", R.attr.titleMarginStart);
        mTitleMarginTopId = propertyMapper.mapInt("titleMarginTop", R.attr.titleMarginTop);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(Toolbar node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readObject(mCollapseContentDescriptionId, node.getCollapseContentDescription());
        propertyReader.readObject(mCollapseIconId, node.getCollapseIcon());
        propertyReader.readInt(mContentInsetEndId, node.getContentInsetEnd());
        propertyReader.readInt(mContentInsetEndWithActionsId, node.getContentInsetEndWithActions());
        propertyReader.readInt(mContentInsetLeftId, node.getContentInsetLeft());
        propertyReader.readInt(mContentInsetRightId, node.getContentInsetRight());
        propertyReader.readInt(mContentInsetStartId, node.getContentInsetStart());
        propertyReader.readInt(mContentInsetStartWithNavigationId, node.getContentInsetStartWithNavigation());
        propertyReader.readObject(mLogoId, node.getLogo());
        propertyReader.readObject(mLogoDescriptionId, node.getLogoDescription());
        propertyReader.readObject(mNavigationContentDescriptionId, node.getNavigationContentDescription());
        propertyReader.readObject(mNavigationIconId, node.getNavigationIcon());
        propertyReader.readInt(mPopupThemeId, node.getPopupTheme());
        propertyReader.readObject(mSubtitleId, node.getSubtitle());
        propertyReader.readObject(mTitleId, node.getTitle());
        propertyReader.readInt(mTitleMarginBottomId, node.getTitleMarginBottom());
        propertyReader.readInt(mTitleMarginEndId, node.getTitleMarginEnd());
        propertyReader.readInt(mTitleMarginStartId, node.getTitleMarginStart());
        propertyReader.readInt(mTitleMarginTopId, node.getTitleMarginTop());
    }
}
