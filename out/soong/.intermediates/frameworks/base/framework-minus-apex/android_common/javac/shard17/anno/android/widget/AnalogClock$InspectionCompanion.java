package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link AnalogClock}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class AnalogClock$InspectionCompanion implements InspectionCompanion<AnalogClock> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code dialTintBlendMode}.
     */
    private int mDialTintBlendModeId;

    /**
     * Property ID of {@code dialTintList}.
     */
    private int mDialTintListId;

    /**
     * Property ID of {@code hourHandTintBlendMode}.
     */
    private int mHourHandTintBlendModeId;

    /**
     * Property ID of {@code hourHandTintList}.
     */
    private int mHourHandTintListId;

    /**
     * Property ID of {@code minuteHandTintBlendMode}.
     */
    private int mMinuteHandTintBlendModeId;

    /**
     * Property ID of {@code minuteHandTintList}.
     */
    private int mMinuteHandTintListId;

    /**
     * Property ID of {@code secondHandTintBlendMode}.
     */
    private int mSecondHandTintBlendModeId;

    /**
     * Property ID of {@code secondHandTintList}.
     */
    private int mSecondHandTintListId;

    /**
     * Property ID of {@code timeZone}.
     */
    private int mTimeZoneId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mDialTintBlendModeId = propertyMapper.mapObject("dialTintBlendMode", 0x00000006);
        mDialTintListId = propertyMapper.mapObject("dialTintList", 0x00000005);
        mHourHandTintBlendModeId = propertyMapper.mapObject("hourHandTintBlendMode", 0x00000008);
        mHourHandTintListId = propertyMapper.mapObject("hourHandTintList", 0x00000007);
        mMinuteHandTintBlendModeId = propertyMapper.mapObject("minuteHandTintBlendMode", 0x0000000a);
        mMinuteHandTintListId = propertyMapper.mapObject("minuteHandTintList", 0x00000009);
        mSecondHandTintBlendModeId = propertyMapper.mapObject("secondHandTintBlendMode", 0x0000000c);
        mSecondHandTintListId = propertyMapper.mapObject("secondHandTintList", 0x0000000b);
        mTimeZoneId = propertyMapper.mapObject("timeZone", R.attr.timeZone);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(AnalogClock node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readObject(mDialTintBlendModeId, node.getDialTintBlendMode());
        propertyReader.readObject(mDialTintListId, node.getDialTintList());
        propertyReader.readObject(mHourHandTintBlendModeId, node.getHourHandTintBlendMode());
        propertyReader.readObject(mHourHandTintListId, node.getHourHandTintList());
        propertyReader.readObject(mMinuteHandTintBlendModeId, node.getMinuteHandTintBlendMode());
        propertyReader.readObject(mMinuteHandTintListId, node.getMinuteHandTintList());
        propertyReader.readObject(mSecondHandTintBlendModeId, node.getSecondHandTintBlendMode());
        propertyReader.readObject(mSecondHandTintListId, node.getSecondHandTintList());
        propertyReader.readObject(mTimeZoneId, node.getTimeZone());
    }
}
