package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link ProgressBar}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class ProgressBar$InspectionCompanion implements InspectionCompanion<ProgressBar> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code indeterminate}.
     */
    private int mIndeterminateId;

    /**
     * Property ID of {@code indeterminateDrawable}.
     */
    private int mIndeterminateDrawableId;

    /**
     * Property ID of {@code indeterminateTint}.
     */
    private int mIndeterminateTintId;

    /**
     * Property ID of {@code indeterminateTintBlendMode}.
     */
    private int mIndeterminateTintBlendModeId;

    /**
     * Property ID of {@code indeterminateTintMode}.
     */
    private int mIndeterminateTintModeId;

    /**
     * Property ID of {@code interpolator}.
     */
    private int mInterpolatorId;

    /**
     * Property ID of {@code max}.
     */
    private int mMaxId;

    /**
     * Property ID of {@code min}.
     */
    private int mMinId;

    /**
     * Property ID of {@code mirrorForRtl}.
     */
    private int mMirrorForRtlId;

    /**
     * Property ID of {@code progress}.
     */
    private int mProgressId;

    /**
     * Property ID of {@code progressBackgroundTint}.
     */
    private int mProgressBackgroundTintId;

    /**
     * Property ID of {@code progressBackgroundTintBlendMode}.
     */
    private int mProgressBackgroundTintBlendModeId;

    /**
     * Property ID of {@code progressBackgroundTintMode}.
     */
    private int mProgressBackgroundTintModeId;

    /**
     * Property ID of {@code progressDrawable}.
     */
    private int mProgressDrawableId;

    /**
     * Property ID of {@code progressTint}.
     */
    private int mProgressTintId;

    /**
     * Property ID of {@code progressTintBlendMode}.
     */
    private int mProgressTintBlendModeId;

    /**
     * Property ID of {@code progressTintMode}.
     */
    private int mProgressTintModeId;

    /**
     * Property ID of {@code secondaryProgress}.
     */
    private int mSecondaryProgressId;

    /**
     * Property ID of {@code secondaryProgressTint}.
     */
    private int mSecondaryProgressTintId;

    /**
     * Property ID of {@code secondaryProgressTintBlendMode}.
     */
    private int mSecondaryProgressTintBlendModeId;

    /**
     * Property ID of {@code secondaryProgressTintMode}.
     */
    private int mSecondaryProgressTintModeId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mIndeterminateId = propertyMapper.mapBoolean("indeterminate", R.attr.indeterminate);
        mIndeterminateDrawableId = propertyMapper.mapObject("indeterminateDrawable", R.attr.indeterminateDrawable);
        mIndeterminateTintId = propertyMapper.mapObject("indeterminateTint", R.attr.indeterminateTint);
        mIndeterminateTintBlendModeId = propertyMapper.mapObject("indeterminateTintBlendMode", 0x00000017);
        mIndeterminateTintModeId = propertyMapper.mapObject("indeterminateTintMode", R.attr.indeterminateTintMode);
        mInterpolatorId = propertyMapper.mapObject("interpolator", R.attr.interpolator);
        mMaxId = propertyMapper.mapInt("max", R.attr.max);
        mMinId = propertyMapper.mapInt("min", R.attr.min);
        mMirrorForRtlId = propertyMapper.mapBoolean("mirrorForRtl", R.attr.mirrorForRtl);
        mProgressId = propertyMapper.mapInt("progress", R.attr.progress);
        mProgressBackgroundTintId = propertyMapper.mapObject("progressBackgroundTint", R.attr.progressBackgroundTint);
        mProgressBackgroundTintBlendModeId = propertyMapper.mapObject("progressBackgroundTintBlendMode", 0x00000013);
        mProgressBackgroundTintModeId = propertyMapper.mapObject("progressBackgroundTintMode", R.attr.progressBackgroundTintMode);
        mProgressDrawableId = propertyMapper.mapObject("progressDrawable", R.attr.progressDrawable);
        mProgressTintId = propertyMapper.mapObject("progressTint", R.attr.progressTint);
        mProgressTintBlendModeId = propertyMapper.mapObject("progressTintBlendMode", 0x00000011);
        mProgressTintModeId = propertyMapper.mapObject("progressTintMode", R.attr.progressTintMode);
        mSecondaryProgressId = propertyMapper.mapInt("secondaryProgress", R.attr.secondaryProgress);
        mSecondaryProgressTintId = propertyMapper.mapObject("secondaryProgressTint", R.attr.secondaryProgressTint);
        mSecondaryProgressTintBlendModeId = propertyMapper.mapObject("secondaryProgressTintBlendMode", 0x00000015);
        mSecondaryProgressTintModeId = propertyMapper.mapObject("secondaryProgressTintMode", R.attr.secondaryProgressTintMode);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(ProgressBar node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mIndeterminateId, node.isIndeterminate());
        propertyReader.readObject(mIndeterminateDrawableId, node.getIndeterminateDrawable());
        propertyReader.readObject(mIndeterminateTintId, node.getIndeterminateTintList());
        propertyReader.readObject(mIndeterminateTintBlendModeId, node.getIndeterminateTintBlendMode());
        propertyReader.readObject(mIndeterminateTintModeId, node.getIndeterminateTintMode());
        propertyReader.readObject(mInterpolatorId, node.getInterpolator());
        propertyReader.readInt(mMaxId, node.getMax());
        propertyReader.readInt(mMinId, node.getMin());
        propertyReader.readBoolean(mMirrorForRtlId, node.getMirrorForRtl());
        propertyReader.readInt(mProgressId, node.getProgress());
        propertyReader.readObject(mProgressBackgroundTintId, node.getProgressBackgroundTintList());
        propertyReader.readObject(mProgressBackgroundTintBlendModeId, node.getProgressBackgroundTintBlendMode());
        propertyReader.readObject(mProgressBackgroundTintModeId, node.getProgressBackgroundTintMode());
        propertyReader.readObject(mProgressDrawableId, node.getProgressDrawable());
        propertyReader.readObject(mProgressTintId, node.getProgressTintList());
        propertyReader.readObject(mProgressTintBlendModeId, node.getProgressTintBlendMode());
        propertyReader.readObject(mProgressTintModeId, node.getProgressTintMode());
        propertyReader.readInt(mSecondaryProgressId, node.getSecondaryProgress());
        propertyReader.readObject(mSecondaryProgressTintId, node.getSecondaryProgressTintList());
        propertyReader.readObject(mSecondaryProgressTintBlendModeId, node.getSecondaryProgressTintBlendMode());
        propertyReader.readObject(mSecondaryProgressTintModeId, node.getSecondaryProgressTintMode());
    }
}
