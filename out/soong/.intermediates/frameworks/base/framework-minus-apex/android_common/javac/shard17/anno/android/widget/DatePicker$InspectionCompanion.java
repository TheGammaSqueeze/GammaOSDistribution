package android.widget;

import android.R;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link DatePicker}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class DatePicker$InspectionCompanion implements InspectionCompanion<DatePicker> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code calendarViewShown}.
     */
    private int mCalendarViewShownId;

    /**
     * Property ID of {@code datePickerMode}.
     */
    private int mDatePickerModeId;

    /**
     * Property ID of {@code dayOfMonth}.
     */
    private int mDayOfMonthId;

    /**
     * Property ID of {@code firstDayOfWeek}.
     */
    private int mFirstDayOfWeekId;

    /**
     * Property ID of {@code maxDate}.
     */
    private int mMaxDateId;

    /**
     * Property ID of {@code minDate}.
     */
    private int mMinDateId;

    /**
     * Property ID of {@code month}.
     */
    private int mMonthId;

    /**
     * Property ID of {@code spinnersShown}.
     */
    private int mSpinnersShownId;

    /**
     * Property ID of {@code year}.
     */
    private int mYearId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mCalendarViewShownId = propertyMapper.mapBoolean("calendarViewShown", R.attr.calendarViewShown);
        final SparseArray<String> datePickerModeEnumMapping = new SparseArray<>();
        datePickerModeEnumMapping.put(1, "spinner");
        datePickerModeEnumMapping.put(2, "calendar");
        mDatePickerModeId = propertyMapper.mapIntEnum("datePickerMode", R.attr.datePickerMode, datePickerModeEnumMapping::get);
        mDayOfMonthId = propertyMapper.mapInt("dayOfMonth", 0);
        mFirstDayOfWeekId = propertyMapper.mapInt("firstDayOfWeek", R.attr.firstDayOfWeek);
        mMaxDateId = propertyMapper.mapLong("maxDate", R.attr.maxDate);
        mMinDateId = propertyMapper.mapLong("minDate", R.attr.minDate);
        mMonthId = propertyMapper.mapInt("month", 0);
        mSpinnersShownId = propertyMapper.mapBoolean("spinnersShown", R.attr.spinnersShown);
        mYearId = propertyMapper.mapInt("year", 0);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(DatePicker node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mCalendarViewShownId, node.getCalendarViewShown());
        propertyReader.readIntEnum(mDatePickerModeId, node.getMode());
        propertyReader.readInt(mDayOfMonthId, node.getDayOfMonth());
        propertyReader.readInt(mFirstDayOfWeekId, node.getFirstDayOfWeek());
        propertyReader.readLong(mMaxDateId, node.getMaxDate());
        propertyReader.readLong(mMinDateId, node.getMinDate());
        propertyReader.readInt(mMonthId, node.getMonth());
        propertyReader.readBoolean(mSpinnersShownId, node.getSpinnersShown());
        propertyReader.readInt(mYearId, node.getYear());
    }
}
