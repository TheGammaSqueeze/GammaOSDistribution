package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link RatingBar}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class RatingBar$InspectionCompanion implements InspectionCompanion<RatingBar> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code isIndicator}.
     */
    private int mIsIndicatorId;

    /**
     * Property ID of {@code numStars}.
     */
    private int mNumStarsId;

    /**
     * Property ID of {@code rating}.
     */
    private int mRatingId;

    /**
     * Property ID of {@code stepSize}.
     */
    private int mStepSizeId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mIsIndicatorId = propertyMapper.mapBoolean("isIndicator", R.attr.isIndicator);
        mNumStarsId = propertyMapper.mapInt("numStars", R.attr.numStars);
        mRatingId = propertyMapper.mapFloat("rating", R.attr.rating);
        mStepSizeId = propertyMapper.mapFloat("stepSize", R.attr.stepSize);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(RatingBar node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mIsIndicatorId, node.isIndicator());
        propertyReader.readInt(mNumStarsId, node.getNumStars());
        propertyReader.readFloat(mRatingId, node.getRating());
        propertyReader.readFloat(mStepSizeId, node.getStepSize());
    }
}
