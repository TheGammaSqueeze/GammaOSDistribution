package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link ViewAnimator}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class ViewAnimator$InspectionCompanion implements InspectionCompanion<ViewAnimator> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code animateFirstView}.
     */
    private int mAnimateFirstViewId;

    /**
     * Property ID of {@code inAnimation}.
     */
    private int mInAnimationId;

    /**
     * Property ID of {@code outAnimation}.
     */
    private int mOutAnimationId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mAnimateFirstViewId = propertyMapper.mapBoolean("animateFirstView", R.attr.animateFirstView);
        mInAnimationId = propertyMapper.mapObject("inAnimation", R.attr.inAnimation);
        mOutAnimationId = propertyMapper.mapObject("outAnimation", R.attr.outAnimation);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(ViewAnimator node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mAnimateFirstViewId, node.getAnimateFirstView());
        propertyReader.readObject(mInAnimationId, node.getInAnimation());
        propertyReader.readObject(mOutAnimationId, node.getOutAnimation());
    }
}
