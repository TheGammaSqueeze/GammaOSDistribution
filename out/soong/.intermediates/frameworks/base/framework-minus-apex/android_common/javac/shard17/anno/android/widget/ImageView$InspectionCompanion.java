package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link ImageView}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class ImageView$InspectionCompanion implements InspectionCompanion<ImageView> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code adjustViewBounds}.
     */
    private int mAdjustViewBoundsId;

    /**
     * Property ID of {@code baseline}.
     */
    private int mBaselineId;

    /**
     * Property ID of {@code baselineAlignBottom}.
     */
    private int mBaselineAlignBottomId;

    /**
     * Property ID of {@code blendMode}.
     */
    private int mBlendModeId;

    /**
     * Property ID of {@code cropToPadding}.
     */
    private int mCropToPaddingId;

    /**
     * Property ID of {@code maxHeight}.
     */
    private int mMaxHeightId;

    /**
     * Property ID of {@code maxWidth}.
     */
    private int mMaxWidthId;

    /**
     * Property ID of {@code scaleType}.
     */
    private int mScaleTypeId;

    /**
     * Property ID of {@code src}.
     */
    private int mSrcId;

    /**
     * Property ID of {@code tint}.
     */
    private int mTintId;

    /**
     * Property ID of {@code tintMode}.
     */
    private int mTintModeId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mAdjustViewBoundsId = propertyMapper.mapBoolean("adjustViewBounds", R.attr.adjustViewBounds);
        mBaselineId = propertyMapper.mapInt("baseline", R.attr.baseline);
        mBaselineAlignBottomId = propertyMapper.mapBoolean("baselineAlignBottom", R.attr.baselineAlignBottom);
        mBlendModeId = propertyMapper.mapObject("blendMode", 0x00000009);
        mCropToPaddingId = propertyMapper.mapBoolean("cropToPadding", R.attr.cropToPadding);
        mMaxHeightId = propertyMapper.mapInt("maxHeight", R.attr.maxHeight);
        mMaxWidthId = propertyMapper.mapInt("maxWidth", R.attr.maxWidth);
        mScaleTypeId = propertyMapper.mapObject("scaleType", R.attr.scaleType);
        mSrcId = propertyMapper.mapObject("src", R.attr.src);
        mTintId = propertyMapper.mapObject("tint", R.attr.tint);
        mTintModeId = propertyMapper.mapObject("tintMode", R.attr.tintMode);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(ImageView node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mAdjustViewBoundsId, node.getAdjustViewBounds());
        propertyReader.readInt(mBaselineId, node.getBaseline());
        propertyReader.readBoolean(mBaselineAlignBottomId, node.getBaselineAlignBottom());
        propertyReader.readObject(mBlendModeId, node.getImageTintBlendMode());
        propertyReader.readBoolean(mCropToPaddingId, node.getCropToPadding());
        propertyReader.readInt(mMaxHeightId, node.getMaxHeight());
        propertyReader.readInt(mMaxWidthId, node.getMaxWidth());
        propertyReader.readObject(mScaleTypeId, node.getScaleType());
        propertyReader.readObject(mSrcId, node.getDrawable());
        propertyReader.readObject(mTintId, node.getImageTintList());
        propertyReader.readObject(mTintModeId, node.getImageTintMode());
    }
}
