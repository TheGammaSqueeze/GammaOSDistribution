package android.widget;

import android.R;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link GridLayout}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class GridLayout$InspectionCompanion implements InspectionCompanion<GridLayout> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code alignmentMode}.
     */
    private int mAlignmentModeId;

    /**
     * Property ID of {@code columnCount}.
     */
    private int mColumnCountId;

    /**
     * Property ID of {@code columnOrderPreserved}.
     */
    private int mColumnOrderPreservedId;

    /**
     * Property ID of {@code orientation}.
     */
    private int mOrientationId;

    /**
     * Property ID of {@code rowCount}.
     */
    private int mRowCountId;

    /**
     * Property ID of {@code rowOrderPreserved}.
     */
    private int mRowOrderPreservedId;

    /**
     * Property ID of {@code useDefaultMargins}.
     */
    private int mUseDefaultMarginsId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        final SparseArray<String> alignmentModeEnumMapping = new SparseArray<>();
        alignmentModeEnumMapping.put(0, "alignBounds");
        alignmentModeEnumMapping.put(1, "alignMargins");
        mAlignmentModeId = propertyMapper.mapIntEnum("alignmentMode", R.attr.alignmentMode, alignmentModeEnumMapping::get);
        mColumnCountId = propertyMapper.mapInt("columnCount", R.attr.columnCount);
        mColumnOrderPreservedId = propertyMapper.mapBoolean("columnOrderPreserved", R.attr.columnOrderPreserved);
        final SparseArray<String> orientationEnumMapping = new SparseArray<>();
        orientationEnumMapping.put(0, "horizontal");
        orientationEnumMapping.put(1, "vertical");
        mOrientationId = propertyMapper.mapIntEnum("orientation", R.attr.orientation, orientationEnumMapping::get);
        mRowCountId = propertyMapper.mapInt("rowCount", R.attr.rowCount);
        mRowOrderPreservedId = propertyMapper.mapBoolean("rowOrderPreserved", R.attr.rowOrderPreserved);
        mUseDefaultMarginsId = propertyMapper.mapBoolean("useDefaultMargins", R.attr.useDefaultMargins);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(GridLayout node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readIntEnum(mAlignmentModeId, node.getAlignmentMode());
        propertyReader.readInt(mColumnCountId, node.getColumnCount());
        propertyReader.readBoolean(mColumnOrderPreservedId, node.isColumnOrderPreserved());
        propertyReader.readIntEnum(mOrientationId, node.getOrientation());
        propertyReader.readInt(mRowCountId, node.getRowCount());
        propertyReader.readBoolean(mRowOrderPreservedId, node.isRowOrderPreserved());
        propertyReader.readBoolean(mUseDefaultMarginsId, node.getUseDefaultMargins());
    }
}
