package android.widget;

import android.R;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link GridView}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class GridView$InspectionCompanion implements InspectionCompanion<GridView> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code columnWidth}.
     */
    private int mColumnWidthId;

    /**
     * Property ID of {@code gravity}.
     */
    private int mGravityId;

    /**
     * Property ID of {@code horizontalSpacing}.
     */
    private int mHorizontalSpacingId;

    /**
     * Property ID of {@code numColumns}.
     */
    private int mNumColumnsId;

    /**
     * Property ID of {@code stretchMode}.
     */
    private int mStretchModeId;

    /**
     * Property ID of {@code verticalSpacing}.
     */
    private int mVerticalSpacingId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mColumnWidthId = propertyMapper.mapInt("columnWidth", R.attr.columnWidth);
        mGravityId = propertyMapper.mapGravity("gravity", R.attr.gravity);
        mHorizontalSpacingId = propertyMapper.mapInt("horizontalSpacing", R.attr.horizontalSpacing);
        mNumColumnsId = propertyMapper.mapInt("numColumns", R.attr.numColumns);
        final SparseArray<String> stretchModeEnumMapping = new SparseArray<>();
        stretchModeEnumMapping.put(0, "none");
        stretchModeEnumMapping.put(1, "spacingWidth");
        stretchModeEnumMapping.put(2, "columnWidth");
        stretchModeEnumMapping.put(3, "spacingWidthUniform");
        mStretchModeId = propertyMapper.mapIntEnum("stretchMode", R.attr.stretchMode, stretchModeEnumMapping::get);
        mVerticalSpacingId = propertyMapper.mapInt("verticalSpacing", R.attr.verticalSpacing);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(GridView node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readInt(mColumnWidthId, node.getColumnWidth());
        propertyReader.readGravity(mGravityId, node.getGravity());
        propertyReader.readInt(mHorizontalSpacingId, node.getHorizontalSpacing());
        propertyReader.readInt(mNumColumnsId, node.getNumColumns());
        propertyReader.readIntEnum(mStretchModeId, node.getStretchMode());
        propertyReader.readInt(mVerticalSpacingId, node.getVerticalSpacing());
    }
}
