package android.widget;

import android.R;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link LinearLayout}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class LinearLayout$InspectionCompanion implements InspectionCompanion<LinearLayout> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code baselineAligned}.
     */
    private int mBaselineAlignedId;

    /**
     * Property ID of {@code baselineAlignedChildIndex}.
     */
    private int mBaselineAlignedChildIndexId;

    /**
     * Property ID of {@code divider}.
     */
    private int mDividerId;

    /**
     * Property ID of {@code gravity}.
     */
    private int mGravityId;

    /**
     * Property ID of {@code measureWithLargestChild}.
     */
    private int mMeasureWithLargestChildId;

    /**
     * Property ID of {@code orientation}.
     */
    private int mOrientationId;

    /**
     * Property ID of {@code weightSum}.
     */
    private int mWeightSumId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mBaselineAlignedId = propertyMapper.mapBoolean("baselineAligned", R.attr.baselineAligned);
        mBaselineAlignedChildIndexId = propertyMapper.mapInt("baselineAlignedChildIndex", R.attr.baselineAlignedChildIndex);
        mDividerId = propertyMapper.mapObject("divider", R.attr.divider);
        mGravityId = propertyMapper.mapGravity("gravity", R.attr.gravity);
        mMeasureWithLargestChildId = propertyMapper.mapBoolean("measureWithLargestChild", R.attr.measureWithLargestChild);
        final SparseArray<String> orientationEnumMapping = new SparseArray<>();
        orientationEnumMapping.put(0, "horizontal");
        orientationEnumMapping.put(1, "vertical");
        mOrientationId = propertyMapper.mapIntEnum("orientation", R.attr.orientation, orientationEnumMapping::get);
        mWeightSumId = propertyMapper.mapFloat("weightSum", R.attr.weightSum);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(LinearLayout node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mBaselineAlignedId, node.isBaselineAligned());
        propertyReader.readInt(mBaselineAlignedChildIndexId, node.getBaselineAlignedChildIndex());
        propertyReader.readObject(mDividerId, node.getDividerDrawable());
        propertyReader.readGravity(mGravityId, node.getGravity());
        propertyReader.readBoolean(mMeasureWithLargestChildId, node.isMeasureWithLargestChildEnabled());
        propertyReader.readIntEnum(mOrientationId, node.getOrientation());
        propertyReader.readFloat(mWeightSumId, node.getWeightSum());
    }
}
