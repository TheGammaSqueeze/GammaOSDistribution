package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link Switch}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class Switch$InspectionCompanion implements InspectionCompanion<Switch> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code showText}.
     */
    private int mShowTextId;

    /**
     * Property ID of {@code splitTrack}.
     */
    private int mSplitTrackId;

    /**
     * Property ID of {@code switchMinWidth}.
     */
    private int mSwitchMinWidthId;

    /**
     * Property ID of {@code switchPadding}.
     */
    private int mSwitchPaddingId;

    /**
     * Property ID of {@code textOff}.
     */
    private int mTextOffId;

    /**
     * Property ID of {@code textOn}.
     */
    private int mTextOnId;

    /**
     * Property ID of {@code thumb}.
     */
    private int mThumbId;

    /**
     * Property ID of {@code thumbTextPadding}.
     */
    private int mThumbTextPaddingId;

    /**
     * Property ID of {@code thumbTint}.
     */
    private int mThumbTintId;

    /**
     * Property ID of {@code thumbTintBlendMode}.
     */
    private int mThumbTintBlendModeId;

    /**
     * Property ID of {@code thumbTintMode}.
     */
    private int mThumbTintModeId;

    /**
     * Property ID of {@code track}.
     */
    private int mTrackId;

    /**
     * Property ID of {@code trackTint}.
     */
    private int mTrackTintId;

    /**
     * Property ID of {@code trackTintBlendMode}.
     */
    private int mTrackTintBlendModeId;

    /**
     * Property ID of {@code trackTintMode}.
     */
    private int mTrackTintModeId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mShowTextId = propertyMapper.mapBoolean("showText", R.attr.showText);
        mSplitTrackId = propertyMapper.mapBoolean("splitTrack", R.attr.splitTrack);
        mSwitchMinWidthId = propertyMapper.mapInt("switchMinWidth", R.attr.switchMinWidth);
        mSwitchPaddingId = propertyMapper.mapInt("switchPadding", R.attr.switchPadding);
        mTextOffId = propertyMapper.mapObject("textOff", R.attr.textOff);
        mTextOnId = propertyMapper.mapObject("textOn", R.attr.textOn);
        mThumbId = propertyMapper.mapObject("thumb", R.attr.thumb);
        mThumbTextPaddingId = propertyMapper.mapInt("thumbTextPadding", R.attr.thumbTextPadding);
        mThumbTintId = propertyMapper.mapObject("thumbTint", R.attr.thumbTint);
        mThumbTintBlendModeId = propertyMapper.mapObject("thumbTintBlendMode", 0x0000000a);
        mThumbTintModeId = propertyMapper.mapObject("thumbTintMode", R.attr.thumbTintMode);
        mTrackId = propertyMapper.mapObject("track", R.attr.track);
        mTrackTintId = propertyMapper.mapObject("trackTint", R.attr.trackTint);
        mTrackTintBlendModeId = propertyMapper.mapObject("trackTintBlendMode", 0x0000000d);
        mTrackTintModeId = propertyMapper.mapObject("trackTintMode", R.attr.trackTintMode);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(Switch node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mShowTextId, node.getShowText());
        propertyReader.readBoolean(mSplitTrackId, node.getSplitTrack());
        propertyReader.readInt(mSwitchMinWidthId, node.getSwitchMinWidth());
        propertyReader.readInt(mSwitchPaddingId, node.getSwitchPadding());
        propertyReader.readObject(mTextOffId, node.getTextOff());
        propertyReader.readObject(mTextOnId, node.getTextOn());
        propertyReader.readObject(mThumbId, node.getThumbDrawable());
        propertyReader.readInt(mThumbTextPaddingId, node.getThumbTextPadding());
        propertyReader.readObject(mThumbTintId, node.getThumbTintList());
        propertyReader.readObject(mThumbTintBlendModeId, node.getThumbTintBlendMode());
        propertyReader.readObject(mThumbTintModeId, node.getThumbTintMode());
        propertyReader.readObject(mTrackId, node.getTrackDrawable());
        propertyReader.readObject(mTrackTintId, node.getTrackTintList());
        propertyReader.readObject(mTrackTintBlendModeId, node.getTrackTintBlendMode());
        propertyReader.readObject(mTrackTintModeId, node.getTrackTintMode());
    }
}
