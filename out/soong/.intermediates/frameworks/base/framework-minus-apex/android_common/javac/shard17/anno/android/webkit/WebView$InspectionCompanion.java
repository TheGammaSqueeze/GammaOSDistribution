package android.webkit;

import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link WebView}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class WebView$InspectionCompanion implements InspectionCompanion<WebView> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code contentHeight}.
     */
    private int mContentHeightId;

    /**
     * Property ID of {@code favicon}.
     */
    private int mFaviconId;

    /**
     * Property ID of {@code originalUrl}.
     */
    private int mOriginalUrlId;

    /**
     * Property ID of {@code progress}.
     */
    private int mProgressId;

    /**
     * Property ID of {@code rendererPriorityWaivedWhenNotVisible}.
     */
    private int mRendererPriorityWaivedWhenNotVisibleId;

    /**
     * Property ID of {@code rendererRequestedPriority}.
     */
    private int mRendererRequestedPriorityId;

    /**
     * Property ID of {@code title}.
     */
    private int mTitleId;

    /**
     * Property ID of {@code url}.
     */
    private int mUrlId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mContentHeightId = propertyMapper.mapInt("contentHeight", 0);
        mFaviconId = propertyMapper.mapObject("favicon", 0);
        mOriginalUrlId = propertyMapper.mapObject("originalUrl", 0);
        mProgressId = propertyMapper.mapInt("progress", 0);
        mRendererPriorityWaivedWhenNotVisibleId = propertyMapper.mapBoolean("rendererPriorityWaivedWhenNotVisible", 0);
        final SparseArray<String> rendererRequestedPriorityEnumMapping = new SparseArray<>();
        rendererRequestedPriorityEnumMapping.put(0, "waived");
        rendererRequestedPriorityEnumMapping.put(1, "bound");
        rendererRequestedPriorityEnumMapping.put(2, "important");
        mRendererRequestedPriorityId = propertyMapper.mapIntEnum("rendererRequestedPriority", 0, rendererRequestedPriorityEnumMapping::get);
        mTitleId = propertyMapper.mapObject("title", 0);
        mUrlId = propertyMapper.mapObject("url", 0);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(WebView node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readInt(mContentHeightId, node.getContentHeight());
        propertyReader.readObject(mFaviconId, node.getFavicon());
        propertyReader.readObject(mOriginalUrlId, node.getOriginalUrl());
        propertyReader.readInt(mProgressId, node.getProgress());
        propertyReader.readBoolean(mRendererPriorityWaivedWhenNotVisibleId, node.getRendererPriorityWaivedWhenNotVisible());
        propertyReader.readIntEnum(mRendererRequestedPriorityId, node.getRendererRequestedPriority());
        propertyReader.readObject(mTitleId, node.getTitle());
        propertyReader.readObject(mUrlId, node.getUrl());
    }
}
