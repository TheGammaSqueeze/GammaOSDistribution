package android.widget;

import android.R;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link TimePicker}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class TimePicker$InspectionCompanion implements InspectionCompanion<TimePicker> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code 24Hour}.
     */
    private int m24HourId;

    /**
     * Property ID of {@code hour}.
     */
    private int mHourId;

    /**
     * Property ID of {@code minute}.
     */
    private int mMinuteId;

    /**
     * Property ID of {@code timePickerMode}.
     */
    private int mTimePickerModeId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        m24HourId = propertyMapper.mapBoolean("24Hour", 0);
        mHourId = propertyMapper.mapInt("hour", 0);
        mMinuteId = propertyMapper.mapInt("minute", 0);
        final SparseArray<String> timePickerModeEnumMapping = new SparseArray<>();
        timePickerModeEnumMapping.put(1, "spinner");
        timePickerModeEnumMapping.put(2, "clock");
        mTimePickerModeId = propertyMapper.mapIntEnum("timePickerMode", R.attr.timePickerMode, timePickerModeEnumMapping::get);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(TimePicker node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(m24HourId, node.is24HourView());
        propertyReader.readInt(mHourId, node.getHour());
        propertyReader.readInt(mMinuteId, node.getMinute());
        propertyReader.readIntEnum(mTimePickerModeId, node.getMode());
    }
}
