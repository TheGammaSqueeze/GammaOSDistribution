package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link SearchView}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class SearchView$InspectionCompanion implements InspectionCompanion<SearchView> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code iconified}.
     */
    private int mIconifiedId;

    /**
     * Property ID of {@code iconifiedByDefault}.
     */
    private int mIconifiedByDefaultId;

    /**
     * Property ID of {@code maxWidth}.
     */
    private int mMaxWidthId;

    /**
     * Property ID of {@code query}.
     */
    private int mQueryId;

    /**
     * Property ID of {@code queryHint}.
     */
    private int mQueryHintId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mIconifiedId = propertyMapper.mapBoolean("iconified", 0);
        mIconifiedByDefaultId = propertyMapper.mapBoolean("iconifiedByDefault", R.attr.iconifiedByDefault);
        mMaxWidthId = propertyMapper.mapInt("maxWidth", R.attr.maxWidth);
        mQueryId = propertyMapper.mapObject("query", 0);
        mQueryHintId = propertyMapper.mapObject("queryHint", R.attr.queryHint);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(SearchView node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readBoolean(mIconifiedId, node.isIconified());
        propertyReader.readBoolean(mIconifiedByDefaultId, node.isIconifiedByDefault());
        propertyReader.readInt(mMaxWidthId, node.getMaxWidth());
        propertyReader.readObject(mQueryId, node.getQuery());
        propertyReader.readObject(mQueryHintId, node.getQueryHint());
    }
}
