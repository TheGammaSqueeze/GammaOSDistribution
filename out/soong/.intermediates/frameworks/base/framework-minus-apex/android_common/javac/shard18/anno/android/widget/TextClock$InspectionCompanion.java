package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link TextClock}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class TextClock$InspectionCompanion implements InspectionCompanion<TextClock> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code format12Hour}.
     */
    private int mFormat12HourId;

    /**
     * Property ID of {@code format24Hour}.
     */
    private int mFormat24HourId;

    /**
     * Property ID of {@code is24HourModeEnabled}.
     */
    private int mIs24HourModeEnabledId;

    /**
     * Property ID of {@code timeZone}.
     */
    private int mTimeZoneId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mFormat12HourId = propertyMapper.mapObject("format12Hour", R.attr.format12Hour);
        mFormat24HourId = propertyMapper.mapObject("format24Hour", R.attr.format24Hour);
        mIs24HourModeEnabledId = propertyMapper.mapBoolean("is24HourModeEnabled", 0);
        mTimeZoneId = propertyMapper.mapObject("timeZone", R.attr.timeZone);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(TextClock node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readObject(mFormat12HourId, node.getFormat12Hour());
        propertyReader.readObject(mFormat24HourId, node.getFormat24Hour());
        propertyReader.readBoolean(mIs24HourModeEnabledId, node.is24HourModeEnabled());
        propertyReader.readObject(mTimeZoneId, node.getTimeZone());
    }
}
