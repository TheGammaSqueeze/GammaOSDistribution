package android.widget;

import android.R;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;
import java.lang.String;

/**
 * Inspection companion for {@link AbsListView}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class AbsListView$InspectionCompanion implements InspectionCompanion<AbsListView> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code cacheColorHint}.
     */
    private int mCacheColorHintId;

    /**
     * Property ID of {@code choiceMode}.
     */
    private int mChoiceModeId;

    /**
     * Property ID of {@code drawSelectorOnTop}.
     */
    private int mDrawSelectorOnTopId;

    /**
     * Property ID of {@code fastScrollEnabled}.
     */
    private int mFastScrollEnabledId;

    /**
     * Property ID of {@code listSelector}.
     */
    private int mListSelectorId;

    /**
     * Property ID of {@code scrollingCache}.
     */
    private int mScrollingCacheId;

    /**
     * Property ID of {@code smoothScrollbar}.
     */
    private int mSmoothScrollbarId;

    /**
     * Property ID of {@code stackFromBottom}.
     */
    private int mStackFromBottomId;

    /**
     * Property ID of {@code textFilterEnabled}.
     */
    private int mTextFilterEnabledId;

    /**
     * Property ID of {@code transcriptMode}.
     */
    private int mTranscriptModeId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mCacheColorHintId = propertyMapper.mapColor("cacheColorHint", R.attr.cacheColorHint);
        final SparseArray<String> choiceModeEnumMapping = new SparseArray<>();
        choiceModeEnumMapping.put(0, "none");
        choiceModeEnumMapping.put(1, "singleChoice");
        choiceModeEnumMapping.put(2, "multipleChoice");
        choiceModeEnumMapping.put(3, "multipleChoiceModal");
        mChoiceModeId = propertyMapper.mapIntEnum("choiceMode", R.attr.choiceMode, choiceModeEnumMapping::get);
        mDrawSelectorOnTopId = propertyMapper.mapBoolean("drawSelectorOnTop", R.attr.drawSelectorOnTop);
        mFastScrollEnabledId = propertyMapper.mapBoolean("fastScrollEnabled", R.attr.fastScrollEnabled);
        mListSelectorId = propertyMapper.mapObject("listSelector", R.attr.listSelector);
        mScrollingCacheId = propertyMapper.mapBoolean("scrollingCache", R.attr.scrollingCache);
        mSmoothScrollbarId = propertyMapper.mapBoolean("smoothScrollbar", R.attr.smoothScrollbar);
        mStackFromBottomId = propertyMapper.mapBoolean("stackFromBottom", R.attr.stackFromBottom);
        mTextFilterEnabledId = propertyMapper.mapBoolean("textFilterEnabled", R.attr.textFilterEnabled);
        final SparseArray<String> transcriptModeEnumMapping = new SparseArray<>();
        transcriptModeEnumMapping.put(0, "disabled");
        transcriptModeEnumMapping.put(1, "normal");
        transcriptModeEnumMapping.put(2, "alwaysScroll");
        mTranscriptModeId = propertyMapper.mapIntEnum("transcriptMode", R.attr.transcriptMode, transcriptModeEnumMapping::get);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(AbsListView node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readColor(mCacheColorHintId, node.getCacheColorHint());
        propertyReader.readIntEnum(mChoiceModeId, node.getChoiceMode());
        propertyReader.readBoolean(mDrawSelectorOnTopId, node.isDrawSelectorOnTop());
        propertyReader.readBoolean(mFastScrollEnabledId, node.isFastScrollEnabled());
        propertyReader.readObject(mListSelectorId, node.getSelector());
        propertyReader.readBoolean(mScrollingCacheId, node.isScrollingCacheEnabled());
        propertyReader.readBoolean(mSmoothScrollbarId, node.isSmoothScrollbarEnabled());
        propertyReader.readBoolean(mStackFromBottomId, node.isStackFromBottom());
        propertyReader.readBoolean(mTextFilterEnabledId, node.isTextFilterEnabled());
        propertyReader.readIntEnum(mTranscriptModeId, node.getTranscriptMode());
    }
}
