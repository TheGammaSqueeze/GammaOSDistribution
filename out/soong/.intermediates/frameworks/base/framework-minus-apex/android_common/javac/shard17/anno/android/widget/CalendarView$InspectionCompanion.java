package android.widget;

import android.R;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.lang.Override;

/**
 * Inspection companion for {@link CalendarView}.
 *
 * Generated by {@link android.processor.view.inspector.InspectionCompanionGenerator}
 * on behalf of {@link android.processor.view.inspector.PlatformInspectableProcessor}.
 */
public final class CalendarView$InspectionCompanion implements InspectionCompanion<CalendarView> {
    /**
     * Guards against reading properties before mapping them.
     */
    private boolean mPropertiesMapped = false;

    /**
     * Property ID of {@code dateTextAppearance}.
     */
    private int mDateTextAppearanceId;

    /**
     * Property ID of {@code firstDayOfWeek}.
     */
    private int mFirstDayOfWeekId;

    /**
     * Property ID of {@code focusedMonthDateColor}.
     */
    private int mFocusedMonthDateColorId;

    /**
     * Property ID of {@code maxDate}.
     */
    private int mMaxDateId;

    /**
     * Property ID of {@code minDate}.
     */
    private int mMinDateId;

    /**
     * Property ID of {@code selectedDateVerticalBar}.
     */
    private int mSelectedDateVerticalBarId;

    /**
     * Property ID of {@code selectedWeekBackgroundColor}.
     */
    private int mSelectedWeekBackgroundColorId;

    /**
     * Property ID of {@code showWeekNumber}.
     */
    private int mShowWeekNumberId;

    /**
     * Property ID of {@code shownWeekCount}.
     */
    private int mShownWeekCountId;

    /**
     * Property ID of {@code unfocusedMonthDateColor}.
     */
    private int mUnfocusedMonthDateColorId;

    /**
     * Property ID of {@code weekDayTextAppearance}.
     */
    private int mWeekDayTextAppearanceId;

    /**
     * Property ID of {@code weekNumberColor}.
     */
    private int mWeekNumberColorId;

    /**
     * Property ID of {@code weekSeparatorLineColor}.
     */
    private int mWeekSeparatorLineColorId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        mDateTextAppearanceId = propertyMapper.mapResourceId("dateTextAppearance", R.attr.dateTextAppearance);
        mFirstDayOfWeekId = propertyMapper.mapInt("firstDayOfWeek", R.attr.firstDayOfWeek);
        mFocusedMonthDateColorId = propertyMapper.mapColor("focusedMonthDateColor", R.attr.focusedMonthDateColor);
        mMaxDateId = propertyMapper.mapLong("maxDate", R.attr.maxDate);
        mMinDateId = propertyMapper.mapLong("minDate", R.attr.minDate);
        mSelectedDateVerticalBarId = propertyMapper.mapObject("selectedDateVerticalBar", R.attr.selectedDateVerticalBar);
        mSelectedWeekBackgroundColorId = propertyMapper.mapColor("selectedWeekBackgroundColor", R.attr.selectedWeekBackgroundColor);
        mShowWeekNumberId = propertyMapper.mapBoolean("showWeekNumber", R.attr.showWeekNumber);
        mShownWeekCountId = propertyMapper.mapInt("shownWeekCount", R.attr.shownWeekCount);
        mUnfocusedMonthDateColorId = propertyMapper.mapColor("unfocusedMonthDateColor", R.attr.unfocusedMonthDateColor);
        mWeekDayTextAppearanceId = propertyMapper.mapResourceId("weekDayTextAppearance", R.attr.weekDayTextAppearance);
        mWeekNumberColorId = propertyMapper.mapColor("weekNumberColor", R.attr.weekNumberColor);
        mWeekSeparatorLineColorId = propertyMapper.mapColor("weekSeparatorLineColor", R.attr.weekSeparatorLineColor);
        mPropertiesMapped = true;
    }

    @Override
    public void readProperties(CalendarView node, PropertyReader propertyReader) {
        if (!mPropertiesMapped) {
            throw new InspectionCompanion.UninitializedPropertyMapException();
        }
        propertyReader.readResourceId(mDateTextAppearanceId, node.getDateTextAppearance());
        propertyReader.readInt(mFirstDayOfWeekId, node.getFirstDayOfWeek());
        propertyReader.readColor(mFocusedMonthDateColorId, node.getFocusedMonthDateColor());
        propertyReader.readLong(mMaxDateId, node.getMaxDate());
        propertyReader.readLong(mMinDateId, node.getMinDate());
        propertyReader.readObject(mSelectedDateVerticalBarId, node.getSelectedDateVerticalBar());
        propertyReader.readColor(mSelectedWeekBackgroundColorId, node.getSelectedWeekBackgroundColor());
        propertyReader.readBoolean(mShowWeekNumberId, node.getShowWeekNumber());
        propertyReader.readInt(mShownWeekCountId, node.getShownWeekCount());
        propertyReader.readColor(mUnfocusedMonthDateColorId, node.getUnfocusedMonthDateColor());
        propertyReader.readResourceId(mWeekDayTextAppearanceId, node.getWeekDayTextAppearance());
        propertyReader.readColor(mWeekNumberColorId, node.getWeekNumberColor());
        propertyReader.readColor(mWeekSeparatorLineColorId, node.getWeekSeparatorLineColor());
    }
}
