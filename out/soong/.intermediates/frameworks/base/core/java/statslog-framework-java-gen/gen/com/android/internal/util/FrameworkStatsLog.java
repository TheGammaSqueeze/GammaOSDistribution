// This file is autogenerated

package com.android.internal.util;


import android.util.StatsEvent;
import android.util.StatsLog;


/**
 * Utility class for logging statistics events.
 */
public class FrameworkStatsLog {
    // Constants for atom codes.

    /**
     * ProcessStateChanged process_state_changed<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_STATE_CHANGED, int uid, java.lang.String process_name, java.lang.String package_name, int state, long version);<br>
     */
    public static final int PROCESS_STATE_CHANGED = 3;

    /**
     * SensorStateChanged sensor_state_changed<br>
     * Usage: StatsLog.write(StatsLog.SENSOR_STATE_CHANGED, android.os.WorkSource workSource, int sensor_id, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.SENSOR_STATE_CHANGED, int uid, java.lang.String tag, int sensor_id, int state);<br>
     */
    public static final int SENSOR_STATE_CHANGED = 5;

    /**
     * GpsScanStateChanged gps_scan_state_changed<br>
     * Usage: StatsLog.write(StatsLog.GPS_SCAN_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.GPS_SCAN_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int GPS_SCAN_STATE_CHANGED = 6;

    /**
     * SyncStateChanged sync_state_changed<br>
     * Usage: StatsLog.write(StatsLog.SYNC_STATE_CHANGED, android.os.WorkSource workSource, java.lang.String sync_name, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.SYNC_STATE_CHANGED, int uid, java.lang.String tag, java.lang.String sync_name, int state);<br>
     */
    public static final int SYNC_STATE_CHANGED = 7;

    /**
     * ScheduledJobStateChanged scheduled_job_state_changed<br>
     * Usage: StatsLog.write(StatsLog.SCHEDULED_JOB_STATE_CHANGED, android.os.WorkSource workSource, java.lang.String job_name, int state, int internal_stop_reason, int standby_bucket, int job_id, boolean has_charging_constraint, boolean has_battery_not_low_constraint, boolean has_storage_not_low_constraint, boolean has_timing_delay_constraint, boolean has_deadline_constraint, boolean has_idle_constraint, boolean has_connectivity_constraint, boolean has_content_trigger_constraint, boolean is_requested_expedited_job, boolean is_running_as_expedited_job, int public_stop_reason);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.SCHEDULED_JOB_STATE_CHANGED, int uid, java.lang.String tag, java.lang.String job_name, int state, int internal_stop_reason, int standby_bucket, int job_id, boolean has_charging_constraint, boolean has_battery_not_low_constraint, boolean has_storage_not_low_constraint, boolean has_timing_delay_constraint, boolean has_deadline_constraint, boolean has_idle_constraint, boolean has_connectivity_constraint, boolean has_content_trigger_constraint, boolean is_requested_expedited_job, boolean is_running_as_expedited_job, int public_stop_reason);<br>
     */
    public static final int SCHEDULED_JOB_STATE_CHANGED = 8;

    /**
     * ScreenBrightnessChanged screen_brightness_changed<br>
     * Usage: StatsLog.write(StatsLog.SCREEN_BRIGHTNESS_CHANGED, int level);<br>
     */
    public static final int SCREEN_BRIGHTNESS_CHANGED = 9;

    /**
     * WakelockStateChanged wakelock_state_changed<br>
     * Usage: StatsLog.write(StatsLog.WAKELOCK_STATE_CHANGED, android.os.WorkSource workSource, int type, java.lang.String tag, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.WAKELOCK_STATE_CHANGED, int uid, java.lang.String tag, int type, java.lang.String tag, int state);<br>
     */
    public static final int WAKELOCK_STATE_CHANGED = 10;

    /**
     * LongPartialWakelockStateChanged long_partial_wakelock_state_changed<br>
     * Usage: StatsLog.write(StatsLog.LONG_PARTIAL_WAKELOCK_STATE_CHANGED, android.os.WorkSource workSource, java.lang.String tag, java.lang.String history_tag, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.LONG_PARTIAL_WAKELOCK_STATE_CHANGED, int uid, java.lang.String tag, java.lang.String tag, java.lang.String history_tag, int state);<br>
     */
    public static final int LONG_PARTIAL_WAKELOCK_STATE_CHANGED = 11;

    /**
     * MobileRadioPowerStateChanged mobile_radio_power_state_changed<br>
     * Usage: StatsLog.write(StatsLog.MOBILE_RADIO_POWER_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.MOBILE_RADIO_POWER_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int MOBILE_RADIO_POWER_STATE_CHANGED = 12;

    /**
     * WifiRadioPowerStateChanged wifi_radio_power_state_changed<br>
     * Usage: StatsLog.write(StatsLog.WIFI_RADIO_POWER_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.WIFI_RADIO_POWER_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int WIFI_RADIO_POWER_STATE_CHANGED = 13;

    /**
     * ActivityManagerSleepStateChanged activity_manager_sleep_state_changed<br>
     * Usage: StatsLog.write(StatsLog.ACTIVITY_MANAGER_SLEEP_STATE_CHANGED, int state);<br>
     */
    public static final int ACTIVITY_MANAGER_SLEEP_STATE_CHANGED = 14;

    /**
     * MemoryFactorStateChanged memory_factor_state_changed<br>
     * Usage: StatsLog.write(StatsLog.MEMORY_FACTOR_STATE_CHANGED, int factor);<br>
     */
    public static final int MEMORY_FACTOR_STATE_CHANGED = 15;

    /**
     * ExcessiveCpuUsageReported excessive_cpu_usage_reported<br>
     * Usage: StatsLog.write(StatsLog.EXCESSIVE_CPU_USAGE_REPORTED, int uid, java.lang.String process_name, java.lang.String package_name, long version);<br>
     */
    public static final int EXCESSIVE_CPU_USAGE_REPORTED = 16;

    /**
     * CachedKillReported cached_kill_reported<br>
     * Usage: StatsLog.write(StatsLog.CACHED_KILL_REPORTED, int uid, java.lang.String process_name, java.lang.String package_name, long pss, long version);<br>
     */
    public static final int CACHED_KILL_REPORTED = 17;

    /**
     * ProcessMemoryStatReported process_memory_stat_reported<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_MEMORY_STAT_REPORTED, int uid, java.lang.String process_name, java.lang.String package_name, long pss, long uss, long rss, int type, long duration_millis, long version);<br>
     */
    public static final int PROCESS_MEMORY_STAT_REPORTED = 18;

    /**
     * BatterySaverModeStateChanged battery_saver_mode_state_changed<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_SAVER_MODE_STATE_CHANGED, int state);<br>
     */
    public static final int BATTERY_SAVER_MODE_STATE_CHANGED = 20;

    /**
     * DeviceIdleModeStateChanged device_idle_mode_state_changed<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_IDLE_MODE_STATE_CHANGED, int state);<br>
     */
    public static final int DEVICE_IDLE_MODE_STATE_CHANGED = 21;

    /**
     * DeviceIdlingModeStateChanged device_idling_mode_state_changed<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_IDLING_MODE_STATE_CHANGED, int state);<br>
     */
    public static final int DEVICE_IDLING_MODE_STATE_CHANGED = 22;

    /**
     * AudioStateChanged audio_state_changed<br>
     * Usage: StatsLog.write(StatsLog.AUDIO_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.AUDIO_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int AUDIO_STATE_CHANGED = 23;

    /**
     * MediaCodecStateChanged media_codec_state_changed<br>
     * Usage: StatsLog.write(StatsLog.MEDIA_CODEC_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.MEDIA_CODEC_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int MEDIA_CODEC_STATE_CHANGED = 24;

    /**
     * CameraStateChanged camera_state_changed<br>
     * Usage: StatsLog.write(StatsLog.CAMERA_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.CAMERA_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int CAMERA_STATE_CHANGED = 25;

    /**
     * FlashlightStateChanged flashlight_state_changed<br>
     * Usage: StatsLog.write(StatsLog.FLASHLIGHT_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.FLASHLIGHT_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int FLASHLIGHT_STATE_CHANGED = 26;

    /**
     * UidProcessStateChanged uid_process_state_changed<br>
     * Usage: StatsLog.write(StatsLog.UID_PROCESS_STATE_CHANGED, int uid, int state);<br>
     */
    public static final int UID_PROCESS_STATE_CHANGED = 27;

    /**
     * ProcessLifeCycleStateChanged process_life_cycle_state_changed<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_LIFE_CYCLE_STATE_CHANGED, int uid, java.lang.String process_name, int state);<br>
     */
    public static final int PROCESS_LIFE_CYCLE_STATE_CHANGED = 28;

    /**
     * ScreenStateChanged screen_state_changed<br>
     * Usage: StatsLog.write(StatsLog.SCREEN_STATE_CHANGED, int state);<br>
     */
    public static final int SCREEN_STATE_CHANGED = 29;

    /**
     * BatteryLevelChanged battery_level_changed<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_LEVEL_CHANGED, int battery_level);<br>
     */
    public static final int BATTERY_LEVEL_CHANGED = 30;

    /**
     * ChargingStateChanged charging_state_changed<br>
     * Usage: StatsLog.write(StatsLog.CHARGING_STATE_CHANGED, int state);<br>
     */
    public static final int CHARGING_STATE_CHANGED = 31;

    /**
     * PluggedStateChanged plugged_state_changed<br>
     * Usage: StatsLog.write(StatsLog.PLUGGED_STATE_CHANGED, int state);<br>
     */
    public static final int PLUGGED_STATE_CHANGED = 32;

    /**
     * InteractiveStateChanged interactive_state_changed<br>
     * Usage: StatsLog.write(StatsLog.INTERACTIVE_STATE_CHANGED, int state);<br>
     */
    public static final int INTERACTIVE_STATE_CHANGED = 33;

    /**
     * WakeupAlarmOccurred wakeup_alarm_occurred<br>
     * Usage: StatsLog.write(StatsLog.WAKEUP_ALARM_OCCURRED, android.os.WorkSource workSource, java.lang.String tag, java.lang.String package_name, int app_standby_bucket);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.WAKEUP_ALARM_OCCURRED, int uid, java.lang.String tag, java.lang.String tag, java.lang.String package_name, int app_standby_bucket);<br>
     */
    public static final int WAKEUP_ALARM_OCCURRED = 35;

    /**
     * KernelWakeupReported kernel_wakeup_reported<br>
     * Usage: StatsLog.write(StatsLog.KERNEL_WAKEUP_REPORTED, java.lang.String wakeup_reason_name, long duration_micros);<br>
     */
    public static final int KERNEL_WAKEUP_REPORTED = 36;

    /**
     * PhoneSignalStrengthChanged phone_signal_strength_changed<br>
     * Usage: StatsLog.write(StatsLog.PHONE_SIGNAL_STRENGTH_CHANGED, int signal_strength);<br>
     */
    public static final int PHONE_SIGNAL_STRENGTH_CHANGED = 40;

    /**
     * SettingChanged setting_changed<br>
     * Usage: StatsLog.write(StatsLog.SETTING_CHANGED, java.lang.String setting, java.lang.String value, java.lang.String new_value, java.lang.String prev_value, java.lang.String tag, boolean is_default, int user, int reason);<br>
     */
    public static final int SETTING_CHANGED = 41;

    /**
     * ActivityForegroundStateChanged activity_foreground_state_changed<br>
     * Usage: StatsLog.write(StatsLog.ACTIVITY_FOREGROUND_STATE_CHANGED, int uid, java.lang.String pkg_name, java.lang.String class_name, int state);<br>
     */
    public static final int ACTIVITY_FOREGROUND_STATE_CHANGED = 42;

    /**
     * IsolatedUidChanged isolated_uid_changed<br>
     * Usage: StatsLog.write(StatsLog.ISOLATED_UID_CHANGED, int parent_uid, int isolated_uid, int event);<br>
     */
    public static final int ISOLATED_UID_CHANGED = 43;

    /**
     * PacketWakeupOccurred packet_wakeup_occurred<br>
     * Usage: StatsLog.write(StatsLog.PACKET_WAKEUP_OCCURRED, int uid, java.lang.String iface, int ethertype, java.lang.String destination_hardware_address, java.lang.String source_ip, java.lang.String destination_ip, int ip_next_header, int source_port, int destination_port);<br>
     */
    public static final int PACKET_WAKEUP_OCCURRED = 44;

    /**
     * WallClockTimeShifted wall_clock_time_shifted<br>
     * Usage: StatsLog.write(StatsLog.WALL_CLOCK_TIME_SHIFTED, long wall_clock_timestamp_millis);<br>
     */
    public static final int WALL_CLOCK_TIME_SHIFTED = 45;

    /**
     * AppStartOccurred app_start_occurred<br>
     * Usage: StatsLog.write(StatsLog.APP_START_OCCURRED, int uid, java.lang.String pkg_name, int type, java.lang.String activity_name, java.lang.String calling_pkg_name, boolean is_instant_app, long activity_start_millis, int reason, int transition_delay_millis, int starting_window_delay_millis, int bind_application_delay_millis, int windows_drawn_delay_millis, java.lang.String launch_token, int package_optimization_compilation_reason, int package_optimization_compilation_filter, int source_type, int source_event_delay_millis, boolean is_hibernating, boolean is_incremental, boolean is_loading, int activity_name_hash, long activity_start_timestamp_millis);<br>
     */
    public static final int APP_START_OCCURRED = 48;

    /**
     * AppStartCanceled app_start_canceled<br>
     * Usage: StatsLog.write(StatsLog.APP_START_CANCELED, int uid, java.lang.String pkg_name, int type, java.lang.String activity_name);<br>
     */
    public static final int APP_START_CANCELED = 49;

    /**
     * AppStartFullyDrawn app_start_fully_drawn<br>
     * Usage: StatsLog.write(StatsLog.APP_START_FULLY_DRAWN, int uid, java.lang.String pkg_name, int type, java.lang.String activity_name, boolean transition_process_running, long app_startup_time_millis, int package_optimization_compilation_reason, int package_optimization_compilation_filter, int source_type, int source_event_delay_millis, boolean is_incremental, boolean is_loading, int activity_name_hash);<br>
     */
    public static final int APP_START_FULLY_DRAWN = 50;

    /**
     * LmkKillOccurred lmk_kill_occurred<br>
     * Usage: StatsLog.write(StatsLog.LMK_KILL_OCCURRED, int uid, java.lang.String process_name, int oom_adj_score, long page_fault, long page_major_fault, long rss_in_bytes, long cache_in_bytes, long swap_in_bytes, long process_start_time_nanos, int min_oom_score, int free_mem_kb, int free_swap_kb, int reason, int thrashing, int max_thrashing);<br>
     */
    public static final int LMK_KILL_OCCURRED = 51;

    /**
     * PictureInPictureStateChanged picture_in_picture_state_changed<br>
     * Usage: StatsLog.write(StatsLog.PICTURE_IN_PICTURE_STATE_CHANGED, int uid, java.lang.String short_name, int state);<br>
     */
    public static final int PICTURE_IN_PICTURE_STATE_CHANGED = 52;

    /**
     * LmkStateChanged lmk_state_changed<br>
     * Usage: StatsLog.write(StatsLog.LMK_STATE_CHANGED, int state);<br>
     */
    public static final int LMK_STATE_CHANGED = 54;

    /**
     * AppStartMemoryStateCaptured app_start_memory_state_captured<br>
     * Usage: StatsLog.write(StatsLog.APP_START_MEMORY_STATE_CAPTURED, int uid, java.lang.String process_name, java.lang.String activity_name, long page_fault, long page_major_fault, long rss_in_bytes, long cache_in_bytes, long swap_in_bytes);<br>
     */
    public static final int APP_START_MEMORY_STATE_CAPTURED = 55;

    /**
     * ShutdownSequenceReported shutdown_sequence_reported<br>
     * Usage: StatsLog.write(StatsLog.SHUTDOWN_SEQUENCE_REPORTED, boolean reboot, java.lang.String reason, long start_time_millis, long duration_millis);<br>
     */
    public static final int SHUTDOWN_SEQUENCE_REPORTED = 56;

    /**
     * OverlayStateChanged overlay_state_changed<br>
     * Usage: StatsLog.write(StatsLog.OVERLAY_STATE_CHANGED, int uid, java.lang.String package_name, boolean using_alert_window, int state);<br>
     */
    public static final int OVERLAY_STATE_CHANGED = 59;

    /**
     * ForegroundServiceStateChanged foreground_service_state_changed<br>
     * Usage: StatsLog.write(StatsLog.FOREGROUND_SERVICE_STATE_CHANGED, int uid, java.lang.String short_name, int state, boolean allow_while_in_use_permission, int fgs_start_reason_code, int target_sdk_version, int calling_uid, int caller_target_sdk_version, int temp_allow_list_calling_uid, boolean fgs_notification_deferred, boolean fgs_notification_shown, int fgs_duration_ms, int fgs_start_count, int short_name_hash);<br>
     */
    public static final int FOREGROUND_SERVICE_STATE_CHANGED = 60;

    /**
     * AppDied app_died<br>
     * Usage: StatsLog.write(StatsLog.APP_DIED, long timestamp_millis);<br>
     */
    public static final int APP_DIED = 65;

    /**
     * ResourceConfigurationChanged resource_configuration_changed<br>
     * Usage: StatsLog.write(StatsLog.RESOURCE_CONFIGURATION_CHANGED, int color_mode, int density_dpi, float font_scale, int hard_keyboard_hidden, int keyboard, int keyboard_hidden, int mcc, int mnc, int navigation, int navigation_hidden, int orientation, int screen_height_dp, int screen_layout, int screen_width_dp, int smallest_screen_width_dp, int touchscreen, int ui_mode);<br>
     */
    public static final int RESOURCE_CONFIGURATION_CHANGED = 66;

    /**
     * BluetoothEnabledStateChanged bluetooth_enabled_state_changed<br>
     * Usage: StatsLog.write(StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED, android.os.WorkSource workSource, int state, int reason, java.lang.String pkg_name);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED, int uid, java.lang.String tag, int state, int reason, java.lang.String pkg_name);<br>
     */
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED = 67;

    /**
     * GpsSignalQualityChanged gps_signal_quality_changed<br>
     * Usage: StatsLog.write(StatsLog.GPS_SIGNAL_QUALITY_CHANGED, int level);<br>
     */
    public static final int GPS_SIGNAL_QUALITY_CHANGED = 69;

    /**
     * UsbConnectorStateChanged usb_connector_state_changed<br>
     * Usage: StatsLog.write(StatsLog.USB_CONNECTOR_STATE_CHANGED, int state, java.lang.String id, long last_connect_duration_millis);<br>
     */
    public static final int USB_CONNECTOR_STATE_CHANGED = 70;

    /**
     * UsbDeviceAttached usb_device_attached<br>
     * Usage: StatsLog.write(StatsLog.USB_DEVICE_ATTACHED, int vid, int pid, boolean has_audio, boolean has_hid, boolean has_storage, int state, long last_connect_duration_millis);<br>
     */
    public static final int USB_DEVICE_ATTACHED = 77;

    /**
     * AppCrashOccurred app_crash_occurred<br>
     * Usage: StatsLog.write(StatsLog.APP_CRASH_OCCURRED, int uid, java.lang.String event_type, java.lang.String process_name, int pid, java.lang.String package_name, int is_instant_app, int foreground_state, int error_source, boolean is_incremental, float loading_progress, long millis_since_oldest_pending_read, int storage_health_code, int data_loader_status_code, boolean read_logs_enabled, long millis_since_last_data_loader_bind, long data_loader_bind_delay_millis, int total_delayed_reads, int total_failed_reads, int last_read_error_uid, long last_read_error_millis_since, int last_read_error_code, long total_delayed_reads_duration_millis);<br>
     */
    public static final int APP_CRASH_OCCURRED = 78;

    /**
     * ANROccurred anr_occurred<br>
     * Usage: StatsLog.write(StatsLog.ANR_OCCURRED, int uid, java.lang.String process_name, java.lang.String short_component_name, java.lang.String reason, int is_instant_app, int foreground_state, int error_source, java.lang.String package_name, boolean is_incremental, float loading_progress, long millis_since_oldest_pending_read, int storage_health_code, int data_loader_status_code, boolean read_logs_enabled, long millis_since_last_data_loader_bind, long data_loader_bind_delay_millis, int total_delayed_reads, int total_failed_reads, int last_read_error_uid, long last_read_error_millis_since, int last_read_error_code, long total_delayed_reads_duration_millis);<br>
     */
    public static final int ANR_OCCURRED = 79;

    /**
     * WTFOccurred wtf_occurred<br>
     * Usage: StatsLog.write(StatsLog.WTF_OCCURRED, int uid, java.lang.String tag, java.lang.String process_name, int pid, int error_source);<br>
     */
    public static final int WTF_OCCURRED = 80;

    /**
     * LowMemReported low_mem_reported<br>
     * Usage: StatsLog.write(StatsLog.LOW_MEM_REPORTED);<br>
     */
    public static final int LOW_MEM_REPORTED = 81;

    /**
     * KeyValuePairsAtom key_value_pairs_atom<br>
     * Usage: StatsLog.write(StatsLog.KEY_VALUE_PAIRS_ATOM, int uid, android.util.SparseArray<Object> value_map);<br>
     */
    public static final int KEY_VALUE_PAIRS_ATOM = 83;

    /**
     * VibratorStateChanged vibrator_state_changed<br>
     * Usage: StatsLog.write(StatsLog.VIBRATOR_STATE_CHANGED, android.os.WorkSource workSource, int state, long duration_millis);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.VIBRATOR_STATE_CHANGED, int uid, java.lang.String tag, int state, long duration_millis);<br>
     */
    public static final int VIBRATOR_STATE_CHANGED = 84;

    /**
     * DeferredJobStatsReported deferred_job_stats_reported<br>
     * Usage: StatsLog.write(StatsLog.DEFERRED_JOB_STATS_REPORTED, android.os.WorkSource workSource, int num_jobs_deferred, long time_since_last_job_millis);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.DEFERRED_JOB_STATS_REPORTED, int uid, java.lang.String tag, int num_jobs_deferred, long time_since_last_job_millis);<br>
     */
    public static final int DEFERRED_JOB_STATS_REPORTED = 85;

    /**
     * BiometricAcquired biometric_acquired<br>
     * Usage: StatsLog.write(StatsLog.BIOMETRIC_ACQUIRED, int modality, int user, boolean is_crypto, int action, int client, int acquire_info, int acquire_info_vendor, boolean debug, int sensor_id);<br>
     */
    public static final int BIOMETRIC_ACQUIRED = 87;

    /**
     * BiometricAuthenticated biometric_authenticated<br>
     * Usage: StatsLog.write(StatsLog.BIOMETRIC_AUTHENTICATED, int modality, int user, boolean is_crypto, int client, boolean require_confirmation, int state, long latency_millis, boolean debug, int sensor_id, float ambient_light_lux);<br>
     */
    public static final int BIOMETRIC_AUTHENTICATED = 88;

    /**
     * BiometricErrorOccurred biometric_error_occurred<br>
     * Usage: StatsLog.write(StatsLog.BIOMETRIC_ERROR_OCCURRED, int modality, int user, boolean is_crypto, int action, int client, int error_info, int error_info_vendor, boolean debug, long latency_millis, int sensor_id);<br>
     */
    public static final int BIOMETRIC_ERROR_OCCURRED = 89;

    /**
     * UiEventReported ui_event_reported<br>
     * Usage: StatsLog.write(StatsLog.UI_EVENT_REPORTED, int event_id, int uid, java.lang.String package_name, int instance_id);<br>
     */
    public static final int UI_EVENT_REPORTED = 90;

    /**
     * PhoneServiceStateChanged phone_service_state_changed<br>
     * Usage: StatsLog.write(StatsLog.PHONE_SERVICE_STATE_CHANGED, int state, int sim_state, int signal_strength);<br>
     */
    public static final int PHONE_SERVICE_STATE_CHANGED = 94;

    /**
     * PhoneStateChanged phone_state_changed<br>
     * Usage: StatsLog.write(StatsLog.PHONE_STATE_CHANGED, int state);<br>
     */
    public static final int PHONE_STATE_CHANGED = 95;

    /**
     * ConnectivityStateChanged connectivity_state_changed<br>
     * Usage: StatsLog.write(StatsLog.CONNECTIVITY_STATE_CHANGED, int net_id, int state);<br>
     */
    public static final int CONNECTIVITY_STATE_CHANGED = 98;

    /**
     * ServiceStateChanged service_state_changed<br>
     * Usage: StatsLog.write(StatsLog.SERVICE_STATE_CHANGED, int uid, java.lang.String package_name, java.lang.String service_name, int state);<br>
     */
    public static final int SERVICE_STATE_CHANGED = 99;

    /**
     * ServiceLaunchReported service_launch_reported<br>
     * Usage: StatsLog.write(StatsLog.SERVICE_LAUNCH_REPORTED, int uid, java.lang.String package_name, java.lang.String service_name);<br>
     */
    public static final int SERVICE_LAUNCH_REPORTED = 100;

    /**
     * FlagFlipUpdateOccurred flag_flip_update_occurred<br>
     * Usage: StatsLog.write(StatsLog.FLAG_FLIP_UPDATE_OCCURRED, java.lang.String flag_flip_package_name, long order_id);<br>
     */
    public static final int FLAG_FLIP_UPDATE_OCCURRED = 101;

    /**
     * DevicePolicyEvent device_policy_event<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_POLICY_EVENT, int event_id, java.lang.String admin_package_name, int integer_value, boolean boolean_value, long time_period_millis, byte[] string_list_value);<br>
     */
    public static final int DEVICE_POLICY_EVENT = 103;

    /**
     * WifiEnabledStateChanged wifi_enabled_state_changed<br>
     * Usage: StatsLog.write(StatsLog.WIFI_ENABLED_STATE_CHANGED, int state);<br>
     */
    public static final int WIFI_ENABLED_STATE_CHANGED = 113;

    /**
     * WifiRunningStateChanged wifi_running_state_changed<br>
     * Usage: StatsLog.write(StatsLog.WIFI_RUNNING_STATE_CHANGED, android.os.WorkSource workSource, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.WIFI_RUNNING_STATE_CHANGED, int uid, java.lang.String tag, int state);<br>
     */
    public static final int WIFI_RUNNING_STATE_CHANGED = 114;

    /**
     * AppCompacted app_compacted<br>
     * Usage: StatsLog.write(StatsLog.APP_COMPACTED, int pid, java.lang.String process_name, int action, long before_rss_total_kilobytes, long before_rss_file_kilobytes, long before_rss_anon_kilobytes, long before_swap_kilobytes, long after_rss_total_kilobytes, long after_rss_file_kilobytes, long after_rss_anon_kilobytes, long after_swap_kilobytes, long time_to_compact_millis, int last_action, long last_compact_timestamp_ms_since_boot, int oom_score_adj, int process_state, long before_zram_free_kilobytes, long after_zram_free_kilobytes);<br>
     */
    public static final int APP_COMPACTED = 115;

    /**
     * RescuePartyResetReported rescue_party_reset_reported<br>
     * Usage: StatsLog.write(StatsLog.RESCUE_PARTY_RESET_REPORTED, int rescue_level);<br>
     */
    public static final int RESCUE_PARTY_RESET_REPORTED = 122;

    /**
     * SignedConfigReported signed_config_reported<br>
     * Usage: StatsLog.write(StatsLog.SIGNED_CONFIG_REPORTED, int type, int status, int version, java.lang.String from_package, int verified_with);<br>
     */
    public static final int SIGNED_CONFIG_REPORTED = 123;

    /**
     * GnssNiEventReported gnss_ni_event_reported<br>
     * Usage: StatsLog.write(StatsLog.GNSS_NI_EVENT_REPORTED, int event_type, int notification_id, int ni_type, boolean need_notify, boolean need_verify, boolean privacy_override, int timeout, int default_response, java.lang.String requestor_id, java.lang.String text, int requestor_id_encoding, int text_encoding, boolean is_supl_es_enabled, boolean is_location_enabled, int user_response);<br>
     */
    public static final int GNSS_NI_EVENT_REPORTED = 124;

    /**
     * AppDowngraded app_downgraded<br>
     * Usage: StatsLog.write(StatsLog.APP_DOWNGRADED, java.lang.String package_name, long size_in_bytes_before, long size_in_bytes_after, boolean aggressive);<br>
     */
    public static final int APP_DOWNGRADED = 128;

    /**
     * LowStorageStateChanged low_storage_state_changed<br>
     * Usage: StatsLog.write(StatsLog.LOW_STORAGE_STATE_CHANGED, java.lang.String volume_description, int state);<br>
     */
    public static final int LOW_STORAGE_STATE_CHANGED = 130;

    /**
     * GnssNfwNotificationReported gnss_nfw_notification_reported<br>
     * Usage: StatsLog.write(StatsLog.GNSS_NFW_NOTIFICATION_REPORTED, java.lang.String proxy_app_package_name, int protocol_stack, java.lang.String other_protocol_stack_name, int requestor, java.lang.String requestor_id, int response_type, boolean in_emergency_mode, boolean is_cached_location, boolean is_permission_mismatched);<br>
     */
    public static final int GNSS_NFW_NOTIFICATION_REPORTED = 131;

    /**
     * GnssConfigurationReported gnss_configuration_reported<br>
     * Usage: StatsLog.write(StatsLog.GNSS_CONFIGURATION_REPORTED, java.lang.String supl_host, int supl_port, java.lang.String c2k_host, int c2k_port, int supl_ver, int supl_mode, boolean supl_es, int lpp_profile, int a_glonass_pos_protocol_select, boolean use_emergency_pdn_for_emergency_supl, int gps_lock, int es_extension_sec, java.lang.String enabled_proxy_app_package_name_list);<br>
     */
    public static final int GNSS_CONFIGURATION_REPORTED = 132;

    /**
     * BroadcastDispatchLatencyReported broadcast_dispatch_latency_reported<br>
     * Usage: StatsLog.write(StatsLog.BROADCAST_DISPATCH_LATENCY_REPORTED, long dispatch_latency_millis);<br>
     */
    public static final int BROADCAST_DISPATCH_LATENCY_REPORTED = 142;

    /**
     * AttentionManagerServiceResultReported attention_manager_service_result_reported<br>
     * Usage: StatsLog.write(StatsLog.ATTENTION_MANAGER_SERVICE_RESULT_REPORTED, int attention_check_result);<br>
     */
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED = 143;

    /**
     * AdbConnectionChanged adb_connection_changed<br>
     * Usage: StatsLog.write(StatsLog.ADB_CONNECTION_CHANGED, long last_connection_time_millis, long auth_window_millis, int state, boolean always_allow);<br>
     */
    public static final int ADB_CONNECTION_CHANGED = 144;

    /**
     * UsbContaminantReported usb_contaminant_reported<br>
     * Usage: StatsLog.write(StatsLog.USB_CONTAMINANT_REPORTED, java.lang.String id, int status);<br>
     */
    public static final int USB_CONTAMINANT_REPORTED = 146;

    /**
     * WatchdogRollbackOccurred watchdog_rollback_occurred<br>
     * Usage: StatsLog.write(StatsLog.WATCHDOG_ROLLBACK_OCCURRED, int rollback_type, java.lang.String package_name, int package_version_code, int rollback_reason, java.lang.String failing_package_name, byte[] experiment_ids);<br>
     */
    public static final int WATCHDOG_ROLLBACK_OCCURRED = 147;

    /**
     * BiometricSystemHealthIssueDetected biometric_system_health_issue_detected<br>
     * Usage: StatsLog.write(StatsLog.BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED, int modality, int issue, boolean debug, int sensor_id);<br>
     */
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED = 148;

    /**
     * BubbleUIChanged bubble_ui_changed<br>
     * Usage: StatsLog.write(StatsLog.BUBBLE_UI_CHANGED, java.lang.String package_name, java.lang.String notification_channel, int notification_id, int position, int total_number, int action, float normalized_x_position, float normalized_y_position, boolean is_unread, boolean is_ongoing, boolean is_foreground);<br>
     */
    public static final int BUBBLE_UI_CHANGED = 149;

    /**
     * ScheduledJobConstraintChanged scheduled_job_constraint_changed<br>
     * Usage: StatsLog.write(StatsLog.SCHEDULED_JOB_CONSTRAINT_CHANGED, android.os.WorkSource workSource, java.lang.String job_name, int constraint, int state);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.SCHEDULED_JOB_CONSTRAINT_CHANGED, int uid, java.lang.String tag, java.lang.String job_name, int constraint, int state);<br>
     */
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED = 150;

    /**
     * ScreenTimeoutExtensionReported screen_timeout_extension_reported<br>
     * Usage: StatsLog.write(StatsLog.SCREEN_TIMEOUT_EXTENSION_REPORTED, int consecutive_timeout_extended_count);<br>
     */
    public static final int SCREEN_TIMEOUT_EXTENSION_REPORTED = 168;

    /**
     * ProcessStartTime process_start_time<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_START_TIME, int uid, int pid, java.lang.String process_name, int type, long process_start_time_millis, int bind_application_delay_millis, int process_start_delay_millis, java.lang.String hosting_type, java.lang.String hosting_name);<br>
     */
    public static final int PROCESS_START_TIME = 169;

    /**
     * BubbleDeveloperErrorReported bubble_developer_error_reported<br>
     * Usage: StatsLog.write(StatsLog.BUBBLE_DEVELOPER_ERROR_REPORTED, java.lang.String package_name, int error);<br>
     */
    public static final int BUBBLE_DEVELOPER_ERROR_REPORTED = 173;

    /**
     * TouchGestureClassified touch_gesture_classified<br>
     * Usage: StatsLog.write(StatsLog.TOUCH_GESTURE_CLASSIFIED, java.lang.String source, int classification, int latency_millis, float displacement_px);<br>
     */
    public static final int TOUCH_GESTURE_CLASSIFIED = 177;

    /**
     * HiddenApiUsed hidden_api_used<br>
     * Usage: StatsLog.write(StatsLog.HIDDEN_API_USED, int uid, java.lang.String signature, int access_method, boolean access_denied);<br>
     */
    public static final int HIDDEN_API_USED = 178;

    /**
     * AppInstallOnExternalStorageReported app_install_on_external_storage_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED, int storage_type, java.lang.String package_name);<br>
     */
    public static final int APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED = 181;

    /**
     * AppMovedStorageReported app_moved_storage_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_MOVED_STORAGE_REPORTED, int external_storage_type, int move_type, java.lang.String package_name);<br>
     */
    public static final int APP_MOVED_STORAGE_REPORTED = 183;

    /**
     * BiometricEnrolled biometric_enrolled<br>
     * Usage: StatsLog.write(StatsLog.BIOMETRIC_ENROLLED, int modality, int user, long latency_millis, boolean success, int sensor_id, float ambient_light_lux);<br>
     */
    public static final int BIOMETRIC_ENROLLED = 184;

    /**
     * SystemServerWatchdogOccurred system_server_watchdog_occurred<br>
     * Usage: StatsLog.write(StatsLog.SYSTEM_SERVER_WATCHDOG_OCCURRED, java.lang.String subject);<br>
     */
    public static final int SYSTEM_SERVER_WATCHDOG_OCCURRED = 185;

    /**
     * TombStoneOccurred tomb_stone_occurred<br>
     * Usage: StatsLog.write(StatsLog.TOMB_STONE_OCCURRED);<br>
     */
    public static final int TOMB_STONE_OCCURRED = 186;

    /**
     * ThermalThrottlingSeverityStateChanged thermal_throttling_severity_state_changed<br>
     * Usage: StatsLog.write(StatsLog.THERMAL_THROTTLING_SEVERITY_STATE_CHANGED, int sensor_type, java.lang.String sensor_name, int temperature_deci_celsius, int severity);<br>
     */
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED = 189;

    /**
     * ContentCaptureCallerMismatchReported content_capture_caller_mismatch_reported<br>
     * Usage: StatsLog.write(StatsLog.CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED, java.lang.String intended_package, java.lang.String calling_package);<br>
     */
    public static final int CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED = 206;

    /**
     * ContentCaptureServiceEvents content_capture_service_events<br>
     * Usage: StatsLog.write(StatsLog.CONTENT_CAPTURE_SERVICE_EVENTS, int event, java.lang.String service_info, java.lang.String target_info);<br>
     */
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS = 207;

    /**
     * ContentCaptureSessionEvents content_capture_session_events<br>
     * Usage: StatsLog.write(StatsLog.CONTENT_CAPTURE_SESSION_EVENTS, int session_id, int event, int state_flags, java.lang.String service_info, java.lang.String app_info, boolean is_child_session);<br>
     */
    public static final int CONTENT_CAPTURE_SESSION_EVENTS = 208;

    /**
     * ContentCaptureFlushed content_capture_flushed<br>
     * Usage: StatsLog.write(StatsLog.CONTENT_CAPTURE_FLUSHED, int session_id, java.lang.String service_info, java.lang.String app_info, int child_session_started, int child_session_finished, int view_appeared_count, int view_disappeared_count, int view_text_changed_count, int max_events, int idle_flush_freq, int text_flush_freq, int flush_reason);<br>
     */
    public static final int CONTENT_CAPTURE_FLUSHED = 209;

    /**
     * LocationManagerApiUsageReported location_manager_api_usage_reported<br>
     * Usage: StatsLog.write(StatsLog.LOCATION_MANAGER_API_USAGE_REPORTED, int state, int api_in_use, java.lang.String calling_package_name, int provider, int quality, int bucketized_interval, int bucketized_smallest_displacement, long num_updates, int bucketized_expire_in, int callback_type, int bucketized_radius, int activiy_importance, java.lang.String attribution_tag);<br>
     */
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED = 210;

    /**
     * ExclusionRectStateChanged exclusion_rect_state_changed<br>
     * Usage: StatsLog.write(StatsLog.EXCLUSION_RECT_STATE_CHANGED, java.lang.String component_name, int requested_height, int rejected_height, int x_location, boolean landscape, boolean splitscreen, int duration_millis);<br>
     */
    public static final int EXCLUSION_RECT_STATE_CHANGED = 223;

    /**
     * CameraActionEvent camera_action_event<br>
     * Usage: StatsLog.write(StatsLog.CAMERA_ACTION_EVENT, long duration_millis, int api_level, java.lang.String package_name, int facing, java.lang.String camera_id, int action, boolean is_ndk, int latency_millis, int operating_mode, int internal_reconfig, long request_count, long result_error_count, boolean device_error, int stream_count, byte[] stream_1, byte[] stream_2, byte[] stream_3, byte[] stream_4, byte[] stream_5);<br>
     */
    public static final int CAMERA_ACTION_EVENT = 227;

    /**
     * AppCompatibilityChangeReported app_compatibility_change_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_COMPATIBILITY_CHANGE_REPORTED, int uid, long change_id, int state, int source);<br>
     */
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED = 228;

    /**
     * RebootEscrowRecoveryReported reboot_escrow_recovery_reported<br>
     * Usage: StatsLog.write(StatsLog.REBOOT_ESCROW_RECOVERY_REPORTED, boolean successful, int error_code, int type, int get_escrow_key_retry_count, int duration_escrow_key_storage_to_unlock_seconds, int vbmeta_digest_status, int duration_boot_complete_to_unlock_seconds);<br>
     */
    public static final int REBOOT_ESCROW_RECOVERY_REPORTED = 238;

    /**
     * BootTimeEventDuration boot_time_event_duration_reported<br>
     * Usage: StatsLog.write(StatsLog.BOOT_TIME_EVENT_DURATION_REPORTED, int event, long duration_millis);<br>
     */
    public static final int BOOT_TIME_EVENT_DURATION_REPORTED = 239;

    /**
     * BootTimeEventElapsedTime boot_time_event_elapsed_time_reported<br>
     * Usage: StatsLog.write(StatsLog.BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED, int event, long time_millis);<br>
     */
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED = 240;

    /**
     * BootTimeEventErrorCode boot_time_event_error_code_reported<br>
     * Usage: StatsLog.write(StatsLog.BOOT_TIME_EVENT_ERROR_CODE_REPORTED, int event, int error_code);<br>
     */
    public static final int BOOT_TIME_EVENT_ERROR_CODE_REPORTED = 242;

    /**
     * UserspaceRebootReported userspace_reboot_reported<br>
     * Usage: StatsLog.write(StatsLog.USERSPACE_REBOOT_REPORTED, int outcome, long duration_millis, int user_encryption_state);<br>
     */
    public static final int USERSPACE_REBOOT_REPORTED = 243;

    /**
     * NotificationReported notification_reported<br>
     * Usage: StatsLog.write(StatsLog.NOTIFICATION_REPORTED, int event_id, int uid, java.lang.String package_name, int instance_id, int notification_id_hash, int channel_id_hash, int group_id_hash, int group_instance_id, boolean is_group_summary, java.lang.String category, int style, int num_people, int position, int importance, int alerting, int importance_source, int importance_initial, int importance_initial_source, int importance_asst, int assistant_hash, float assistant_ranking_score);<br>
     */
    public static final int NOTIFICATION_REPORTED = 244;

    /**
     * NotificationChannelModified notification_channel_modified<br>
     * Usage: StatsLog.write(StatsLog.NOTIFICATION_CHANNEL_MODIFIED, int event_id, int uid, java.lang.String package_name, int channel_id_hash, int old_importance, int importance, boolean is_conversation, int conversation_id_hash, boolean is_conversation_demoted, boolean is_conversation_priority);<br>
     */
    public static final int NOTIFICATION_CHANNEL_MODIFIED = 246;

    /**
     * IntegrityCheckResultReported integrity_check_result_reported<br>
     * Usage: StatsLog.write(StatsLog.INTEGRITY_CHECK_RESULT_REPORTED, java.lang.String package_name, java.lang.String app_certificate_hash, long version_code, java.lang.String installer_package_name, int response, boolean caused_by_app_cert_rule, boolean caused_by_installer_rule);<br>
     */
    public static final int INTEGRITY_CHECK_RESULT_REPORTED = 247;

    /**
     * IntegrityRulesPushed integrity_rules_pushed<br>
     * Usage: StatsLog.write(StatsLog.INTEGRITY_RULES_PUSHED, boolean success, java.lang.String rule_provider, java.lang.String rule_version);<br>
     */
    public static final int INTEGRITY_RULES_PUSHED = 248;

    /**
     * AppFreezeChanged app_freeze_changed<br>
     * Usage: StatsLog.write(StatsLog.APP_FREEZE_CHANGED, int action, int pid, java.lang.String process_name, long time_unfrozen_millis);<br>
     */
    public static final int APP_FREEZE_CHANGED = 254;

    /**
     * ForegroundServiceAppOpSessionEnded foreground_service_app_op_session_ended<br>
     * Usage: StatsLog.write(StatsLog.FOREGROUND_SERVICE_APP_OP_SESSION_ENDED, int uid, int app_op_name, int app_op_mode, int count_ops_accepted, int count_ops_rejected);<br>
     */
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED = 256;

    /**
     * AppStandbyBucketChanged app_standby_bucket_changed<br>
     * Usage: StatsLog.write(StatsLog.APP_STANDBY_BUCKET_CHANGED, java.lang.String package_name, int user_id, int bucket, int main_reason, int sub_reason);<br>
     */
    public static final int APP_STANDBY_BUCKET_CHANGED = 258;

    /**
     * SharesheetStarted sharesheet_started<br>
     * Usage: StatsLog.write(StatsLog.SHARESHEET_STARTED, int event_id, java.lang.String package_name, int instance_id, java.lang.String mime_type, int num_app_provided_direct_targets, int num_app_provided_app_targets, boolean is_workprofile, int preview_type, int intent_type);<br>
     */
    public static final int SHARESHEET_STARTED = 259;

    /**
     * RankingSelected ranking_selected<br>
     * Usage: StatsLog.write(StatsLog.RANKING_SELECTED, int event_id, java.lang.String package_name, int instance_id, int position_picked);<br>
     */
    public static final int RANKING_SELECTED = 260;

    /**
     * PackageInstallerV2Reported package_installer_v2_reported<br>
     * Usage: StatsLog.write(StatsLog.PACKAGE_INSTALLER_V2_REPORTED, boolean is_incremental, java.lang.String package_name, long duration_millis, int return_code, long apks_size_bytes, int uid);<br>
     */
    public static final int PACKAGE_INSTALLER_V2_REPORTED = 263;

    /**
     * UserLifecycleJourneyReported user_lifecycle_journey_reported<br>
     * Usage: StatsLog.write(StatsLog.USER_LIFECYCLE_JOURNEY_REPORTED, long session_id, int journey, int origin_user, int target_user, int user_type, int user_flags);<br>
     */
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED = 264;

    /**
     * UserLifecycleEventOccurred user_lifecycle_event_occurred<br>
     * Usage: StatsLog.write(StatsLog.USER_LIFECYCLE_EVENT_OCCURRED, long session_id, int user_id, int event, int state);<br>
     */
    public static final int USER_LIFECYCLE_EVENT_OCCURRED = 265;

    /**
     * AccessibilityShortcutReported accessibility_shortcut_reported<br>
     * Usage: StatsLog.write(StatsLog.ACCESSIBILITY_SHORTCUT_REPORTED, java.lang.String package_name, int shortcut_type, int service_status);<br>
     */
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED = 266;

    /**
     * AppUsageEventOccurred app_usage_event_occurred<br>
     * Usage: StatsLog.write(StatsLog.APP_USAGE_EVENT_OCCURRED, int uid, java.lang.String package_name, java.lang.String class_name, int event_type);<br>
     */
    public static final int APP_USAGE_EVENT_OCCURRED = 269;

    /**
     * TvTunerStateChanged tv_tuner_state_changed<br>
     * Usage: StatsLog.write(StatsLog.TV_TUNER_STATE_CHANGED, int uid, int state);<br>
     */
    public static final int TV_TUNER_STATE_CHANGED = 276;

    /**
     * TvTunerDvrStatus tv_tuner_dvr_status<br>
     * Usage: StatsLog.write(StatsLog.TV_TUNER_DVR_STATUS, int uid, int type, int state, int segment_id, int overflow_underflow_count);<br>
     */
    public static final int TV_TUNER_DVR_STATUS = 279;

    /**
     * TvCasSessionOpenStatus tv_cas_session_open_status<br>
     * Usage: StatsLog.write(StatsLog.TV_CAS_SESSION_OPEN_STATUS, int uid, int cas_system_id, int state);<br>
     */
    public static final int TV_CAS_SESSION_OPEN_STATUS = 280;

    /**
     * AssistantInvocationReported assistant_invocation_reported<br>
     * Usage: StatsLog.write(StatsLog.ASSISTANT_INVOCATION_REPORTED, int event_id, int uid, java.lang.String package_name, int instance_id, int device_state, boolean assistant_handles_showing);<br>
     */
    public static final int ASSISTANT_INVOCATION_REPORTED = 281;

    /**
     * DisplayWakeReported display_wake_reported<br>
     * Usage: StatsLog.write(StatsLog.DISPLAY_WAKE_REPORTED, int wake_up_reason);<br>
     */
    public static final int DISPLAY_WAKE_REPORTED = 282;

    /**
     * BlobCommitted blob_committed<br>
     * Usage: StatsLog.write(StatsLog.BLOB_COMMITTED, int uid, long blob_id, long size, int result);<br>
     */
    public static final int BLOB_COMMITTED = 298;

    /**
     * BlobLeased blob_leased<br>
     * Usage: StatsLog.write(StatsLog.BLOB_LEASED, int uid, long blob_id, long size, int result);<br>
     */
    public static final int BLOB_LEASED = 299;

    /**
     * BlobOpened blob_opened<br>
     * Usage: StatsLog.write(StatsLog.BLOB_OPENED, int uid, long blob_id, long size, int result);<br>
     */
    public static final int BLOB_OPENED = 300;

    /**
     * UIInteractionFrameInfoReported ui_interaction_frame_info_reported<br>
     * Usage: StatsLog.write(StatsLog.UI_INTERACTION_FRAME_INFO_REPORTED, int interaction_type, long total_frames, long missed_frames, long max_frame_time_nanos, long sf_missed_frames, long app_missed_frames);<br>
     */
    public static final int UI_INTERACTION_FRAME_INFO_REPORTED = 305;

    /**
     * UIActionLatencyReported ui_action_latency_reported<br>
     * Usage: StatsLog.write(StatsLog.UI_ACTION_LATENCY_REPORTED, int action, long latency_millis);<br>
     */
    public static final int UI_ACTION_LATENCY_REPORTED = 306;

    /**
     * HdmiCecActiveSourceChanged hdmi_cec_active_source_changed<br>
     * Usage: StatsLog.write(StatsLog.HDMI_CEC_ACTIVE_SOURCE_CHANGED, int active_source_logical_address, int active_source_physical_address, int local_relationship);<br>
     */
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED = 309;

    /**
     * HdmiCecMessageReported hdmi_cec_message_reported<br>
     * Usage: StatsLog.write(StatsLog.HDMI_CEC_MESSAGE_REPORTED, int uid, int direction, int initiator_logical_address, int destination_logical_address, int opcode, int send_message_result, int user_control_pressed_command, int feature_abort_opcode, int feature_abort_reason);<br>
     */
    public static final int HDMI_CEC_MESSAGE_REPORTED = 310;

    /**
     * TifTuneStateChanged tif_tune_changed<br>
     * Usage: StatsLog.write(StatsLog.TIF_TUNE_CHANGED, android.os.WorkSource workSource, int state, java.lang.String tif_session_id, int type, int input_id, int hdmi_port);<br>
     * Usage: StatsLog.write_non_chained(StatsLog.TIF_TUNE_CHANGED, int uid, java.lang.String tag, int state, java.lang.String tif_session_id, int type, int input_id, int hdmi_port);<br>
     */
    public static final int TIF_TUNE_CHANGED = 327;

    /**
     * AutoRotateReported auto_rotate_reported<br>
     * Usage: StatsLog.write(StatsLog.AUTO_ROTATE_REPORTED, int current_orientation, int proposed_orientation, int recommended_orientation, long recommendation_process_duration_millis);<br>
     */
    public static final int AUTO_ROTATE_REPORTED = 328;

    /**
     * DeviceRotated device_rotated<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_ROTATED, long timestamp_millis, int proposed_orientation, int rotation_event_type);<br>
     */
    public static final int DEVICE_ROTATED = 333;

    /**
     * FaceDownReported face_down_reported<br>
     * Usage: StatsLog.write(StatsLog.FACE_DOWN_REPORTED, int face_down_response, long millis_since_flip, long millis_until_normal_timeout, long millis_until_next_screen_on);<br>
     */
    public static final int FACE_DOWN_REPORTED = 337;

    /**
     * RebootEscrowPreparationReported reboot_escrow_preparation_reported<br>
     * Usage: StatsLog.write(StatsLog.REBOOT_ESCROW_PREPARATION_REPORTED, int requesting_uid, int result, int requested_client_count);<br>
     */
    public static final int REBOOT_ESCROW_PREPARATION_REPORTED = 339;

    /**
     * RebootEscrowLskfCaptureReported reboot_escrow_lskf_capture_reported<br>
     * Usage: StatsLog.write(StatsLog.REBOOT_ESCROW_LSKF_CAPTURE_REPORTED, int uid_to_notify, int requested_client_count, int duration_ror_requested_to_lskf_captured_seconds);<br>
     */
    public static final int REBOOT_ESCROW_LSKF_CAPTURE_REPORTED = 340;

    /**
     * RebootEscrowRebootReported reboot_escrow_reboot_reported<br>
     * Usage: StatsLog.write(StatsLog.REBOOT_ESCROW_REBOOT_REPORTED, int error_code, int request_uid, int prepared_clients_count, int request_count, boolean slot_switch, boolean server_based, int duration_lskf_captured_to_reboot_seconds, int lskf_captured_counts);<br>
     */
    public static final int REBOOT_ESCROW_REBOOT_REPORTED = 341;

    /**
     * BinderLatencyReported binder_latency_reported<br>
     * Usage: StatsLog.write(StatsLog.BINDER_LATENCY_REPORTED, byte[] repeated_api_stats, float sampling_rate, int sharding_modulo, int bucket_count, int first_bucket_size, float scale_factor);<br>
     */
    public static final int BINDER_LATENCY_REPORTED = 342;

    /**
     * MagnificationUsageReported magnification_usage_reported<br>
     * Usage: StatsLog.write(StatsLog.MAGNIFICATION_USAGE_REPORTED, int activated_mode, long duration_millis);<br>
     */
    public static final int MAGNIFICATION_USAGE_REPORTED = 345;

    /**
     * MagnificationModeWithImeOnReported magnification_mode_with_ime_on_reported<br>
     * Usage: StatsLog.write(StatsLog.MAGNIFICATION_MODE_WITH_IME_ON_REPORTED, int activated_mode);<br>
     */
    public static final int MAGNIFICATION_MODE_WITH_IME_ON_REPORTED = 346;

    /**
     * DeviceStateChanged device_state_changed<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_STATE_CHANGED, int new_device_state, boolean boot_state);<br>
     */
    public static final int DEVICE_STATE_CHANGED = 350;

    /**
     * InputDeviceRegistered inputdevice_registered<br>
     * Usage: StatsLog.write(StatsLog.INPUTDEVICE_REGISTERED, java.lang.String name, int vendor_id, int product_id, int version_id, int bus_id, java.lang.String obfuscated_id, int device_classes);<br>
     */
    public static final int INPUTDEVICE_REGISTERED = 351;

    /**
     * AuthPromptAuthenticateInvoked auth_prompt_authenticate_invoked<br>
     * Usage: StatsLog.write(StatsLog.AUTH_PROMPT_AUTHENTICATE_INVOKED, boolean is_crypto, boolean is_confirmation_required, boolean is_credential_allowed, boolean is_allowed_authenticators_set, int allowed_authenticators);<br>
     */
    public static final int AUTH_PROMPT_AUTHENTICATE_INVOKED = 353;

    /**
     * AuthManagerCanAuthenticateInvoked auth_manager_can_authenticate_invoked<br>
     * Usage: StatsLog.write(StatsLog.AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED, boolean is_allowed_authenticators_set, int allowed_authenticators, int result_code);<br>
     */
    public static final int AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED = 354;

    /**
     * AuthEnrollActionInvoked auth_enroll_action_invoked<br>
     * Usage: StatsLog.write(StatsLog.AUTH_ENROLL_ACTION_INVOKED, boolean is_strong_biometric_enrolled, boolean is_weak_biometric_enrolled, boolean is_device_credential_enrolled, boolean is_allowed_authenticators_set, int allowed_authenticators);<br>
     */
    public static final int AUTH_ENROLL_ACTION_INVOKED = 355;

    /**
     * AuthDeprecatedAPIUsed auth_deprecated_api_used<br>
     * Usage: StatsLog.write(StatsLog.AUTH_DEPRECATED_API_USED, int deprecated_api, int app_uid, int target_sdk);<br>
     */
    public static final int AUTH_DEPRECATED_API_USED = 356;

    /**
     * LocationTimeZoneProviderStateChanged location_time_zone_provider_state_changed<br>
     * Usage: StatsLog.write(StatsLog.LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED, int provider_index, int state);<br>
     */
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED = 359;

    /**
     * FdtrackEventOccurred fdtrack_event_occurred<br>
     * Usage: StatsLog.write(StatsLog.FDTRACK_EVENT_OCCURRED, int event, int fd_count);<br>
     */
    public static final int FDTRACK_EVENT_OCCURRED = 364;

    /**
     * TimeoutAutoExtendedReported timeout_auto_extended_reported<br>
     * Usage: StatsLog.write(StatsLog.TIMEOUT_AUTO_EXTENDED_REPORTED, int outcome, long time_to_outcome_millis, long time_to_first_interaction_millis);<br>
     */
    public static final int TIMEOUT_AUTO_EXTENDED_REPORTED = 365;

    /**
     * AlarmBatchDelivered alarm_batch_delivered<br>
     * Usage: StatsLog.write(StatsLog.ALARM_BATCH_DELIVERED, int num_alarms, int wakeups);<br>
     */
    public static final int ALARM_BATCH_DELIVERED = 367;

    /**
     * AlarmScheduled alarm_scheduled<br>
     * Usage: StatsLog.write(StatsLog.ALARM_SCHEDULED, int calling_uid, boolean is_exact, boolean is_wakeup, boolean is_allow_while_idle, boolean is_alarm_clock, boolean is_repeating, int exact_alarm_allowed_reason, boolean is_rtc, int calling_process_state);<br>
     */
    public static final int ALARM_SCHEDULED = 368;

    /**
     * UserLevelHibernationStateChanged user_level_hibernation_state_changed<br>
     * Usage: StatsLog.write(StatsLog.USER_LEVEL_HIBERNATION_STATE_CHANGED, java.lang.String package_name, int user_id, boolean is_hibernating);<br>
     */
    public static final int USER_LEVEL_HIBERNATION_STATE_CHANGED = 370;

    /**
     * AppProcessDied app_process_died<br>
     * Usage: StatsLog.write(StatsLog.APP_PROCESS_DIED, int uid, java.lang.String process_name, int reason, int sub_reason, int importance, int pss, int rss);<br>
     */
    public static final int APP_PROCESS_DIED = 373;

    /**
     * ANROccurredProcessingStarted anr_occurred_processing_started<br>
     * Usage: StatsLog.write(StatsLog.ANR_OCCURRED_PROCESSING_STARTED, java.lang.String process_name);<br>
     */
    public static final int ANR_OCCURRED_PROCESSING_STARTED = 376;

    /**
     * MediaCodecReported media_codec_reported<br>
     * Usage: StatsLog.write(StatsLog.MEDIA_CODEC_REPORTED, long timestamp_nanos, java.lang.String package_name, long package_version_code, long media_apex_version, java.lang.String codec, java.lang.String mime, java.lang.String mode, int encoder, int secure, int width, int height, int rotation, int crypto, int profile, int level, int max_width, int max_height, int error_code, java.lang.String error_state, long latency_max, long latency_min, long latency_avg, long latency_count, long latency_unknown, int queue_input_buffer_error, int queue_secure_input_buffer_error, java.lang.String bitrate_mode, int bitrate, long lifetime_millis, long playback_duration_seconds, java.lang.String log_session_id, int channel_count, int sample_rate, long video_encode_bytes, long video_encode_frames, long video_input_bytes, long video_input_frames, long video_encode_duration_us, int color_format, float frame_rate, float capture_rate, float operating_rate, int priority, int video_qp_i_min, int video_qp_i_max, int video_qp_p_min, int video_qp_p_max, int video_qp_b_min, int video_qp_b_max, int original_bitrate, int shaping_enhanced, int original_video_qp_i_min, int original_video_qp_i_max, int original_video_qp_p_min, int original_video_qp_p_max, int original_video_qp_b_min, int original_video_qp_b_max);<br>
     */
    public static final int MEDIA_CODEC_REPORTED = 378;

    /**
     * PrivacySensorToggleInteraction privacy_sensor_toggle_interaction<br>
     * Usage: StatsLog.write(StatsLog.PRIVACY_SENSOR_TOGGLE_INTERACTION, int sensor, int action, int source, long time_in_previous_state_in_mins);<br>
     */
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION = 381;

    /**
     * PrivacyToggleDialogInteraction privacy_toggle_dialog_interaction<br>
     * Usage: StatsLog.write(StatsLog.PRIVACY_TOGGLE_DIALOG_INTERACTION, int action, java.lang.String package_name);<br>
     */
    public static final int PRIVACY_TOGGLE_DIALOG_INTERACTION = 382;

    /**
     * AppCompatStateChanged app_compat_state_changed<br>
     * Usage: StatsLog.write(StatsLog.APP_COMPAT_STATE_CHANGED, int uid, int state);<br>
     */
    public static final int APP_COMPAT_STATE_CHANGED = 386;

    /**
     * SizeCompatRestartButtonEventReported size_compat_restart_button_event_reported<br>
     * Usage: StatsLog.write(StatsLog.SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED, int uid, int event);<br>
     */
    public static final int SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED = 387;

    /**
     * SplitscreenUIChanged splitscreen_ui_changed<br>
     * Usage: StatsLog.write(StatsLog.SPLITSCREEN_UI_CHANGED, int action, int enter_reason, int exit_reason, float split_ratio, int main_stage_position, int main_stage_uid, int side_stage_position, int side_stage_uid, int drag_instance_id, int instance_id);<br>
     */
    public static final int SPLITSCREEN_UI_CHANGED = 388;

    /**
     * CameraCompatControlEventReported camera_compat_control_event_reported<br>
     * Usage: StatsLog.write(StatsLog.CAMERA_COMPAT_CONTROL_EVENT_REPORTED, int uid, int event);<br>
     */
    public static final int CAMERA_COMPAT_CONTROL_EVENT_REPORTED = 411;

    /**
     * HotwordDetectorCreateRequested hotword_detector_create_requested<br>
     * Usage: StatsLog.write(StatsLog.HOTWORD_DETECTOR_CREATE_REQUESTED, int detector_type, boolean is_created_done, int uid);<br>
     */
    public static final int HOTWORD_DETECTOR_CREATE_REQUESTED = 430;

    /**
     * HotwordDetectionServiceInitResultReported hotword_detection_service_init_result_reported<br>
     * Usage: StatsLog.write(StatsLog.HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED, int detector_type, int result);<br>
     */
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED = 431;

    /**
     * HotwordDetectionServiceRestarted hotword_detection_service_restarted<br>
     * Usage: StatsLog.write(StatsLog.HOTWORD_DETECTION_SERVICE_RESTARTED, int detector_type, int reason);<br>
     */
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED = 432;

    /**
     * HotwordDetectorKeyphraseTriggered hotword_detector_keyphrase_triggered<br>
     * Usage: StatsLog.write(StatsLog.HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED, int detector_type, int result);<br>
     */
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED = 433;

    /**
     * HotwordDetectorEvents hotword_detector_events<br>
     * Usage: StatsLog.write(StatsLog.HOTWORD_DETECTOR_EVENTS, int detector_type, int event, int uid);<br>
     */
    public static final int HOTWORD_DETECTOR_EVENTS = 434;

    /**
     * WifiBytesTransfer wifi_bytes_transfer<br>
     * Usage: StatsLog.write(StatsLog.WIFI_BYTES_TRANSFER, int uid, long rx_bytes, long rx_packets, long tx_bytes, long tx_packets);<br>
     */
    public static final int WIFI_BYTES_TRANSFER = 10000;

    /**
     * WifiBytesTransferByFgBg wifi_bytes_transfer_by_fg_bg<br>
     * Usage: StatsLog.write(StatsLog.WIFI_BYTES_TRANSFER_BY_FG_BG, int uid, boolean is_foreground, long rx_bytes, long rx_packets, long tx_bytes, long tx_packets);<br>
     */
    public static final int WIFI_BYTES_TRANSFER_BY_FG_BG = 10001;

    /**
     * MobileBytesTransfer mobile_bytes_transfer<br>
     * Usage: StatsLog.write(StatsLog.MOBILE_BYTES_TRANSFER, int uid, long rx_bytes, long rx_packets, long tx_bytes, long tx_packets);<br>
     */
    public static final int MOBILE_BYTES_TRANSFER = 10002;

    /**
     * MobileBytesTransferByFgBg mobile_bytes_transfer_by_fg_bg<br>
     * Usage: StatsLog.write(StatsLog.MOBILE_BYTES_TRANSFER_BY_FG_BG, int uid, boolean is_foreground, long rx_bytes, long rx_packets, long tx_bytes, long tx_packets);<br>
     */
    public static final int MOBILE_BYTES_TRANSFER_BY_FG_BG = 10003;

    /**
     * KernelWakelock kernel_wakelock<br>
     * Usage: StatsLog.write(StatsLog.KERNEL_WAKELOCK, java.lang.String name, int count, int version, long time_micros);<br>
     */
    public static final int KERNEL_WAKELOCK = 10004;

    /**
     * SubsystemSleepState subsystem_sleep_state<br>
     * Usage: StatsLog.write(StatsLog.SUBSYSTEM_SLEEP_STATE, java.lang.String subsystem_name, java.lang.String subname, long count, long time_millis);<br>
     */
    public static final int SUBSYSTEM_SLEEP_STATE = 10005;

    /**
     * BluetoothBytesTransfer bluetooth_bytes_transfer<br>
     * Usage: StatsLog.write(StatsLog.BLUETOOTH_BYTES_TRANSFER, int uid, long rx_bytes, long tx_bytes);<br>
     */
    public static final int BLUETOOTH_BYTES_TRANSFER = 10006;

    /**
     * BluetoothActivityInfo bluetooth_activity_info<br>
     * Usage: StatsLog.write(StatsLog.BLUETOOTH_ACTIVITY_INFO, long timestamp_millis, int bluetooth_stack_state, long controller_tx_time_millis, long controller_rx_time_millis, long controller_idle_time_millis, long energy_used);<br>
     */
    public static final int BLUETOOTH_ACTIVITY_INFO = 10007;

    /**
     * CpuTimePerUid cpu_time_per_uid<br>
     * Usage: StatsLog.write(StatsLog.CPU_TIME_PER_UID, int uid, long user_time_micros, long sys_time_micros);<br>
     */
    public static final int CPU_TIME_PER_UID = 10009;

    /**
     * CpuTimePerUidFreq cpu_time_per_uid_freq<br>
     * Usage: StatsLog.write(StatsLog.CPU_TIME_PER_UID_FREQ, int uid, int freq_index, long time_millis);<br>
     */
    public static final int CPU_TIME_PER_UID_FREQ = 10010;

    /**
     * WifiActivityInfo wifi_activity_info<br>
     * Usage: StatsLog.write(StatsLog.WIFI_ACTIVITY_INFO, long timestamp_millis, int stack_state, long controller_tx_time_millis, long controller_rx_time_millis, long controller_idle_time_millis, long controller_energy_used);<br>
     */
    public static final int WIFI_ACTIVITY_INFO = 10011;

    /**
     * ModemActivityInfo modem_activity_info<br>
     * Usage: StatsLog.write(StatsLog.MODEM_ACTIVITY_INFO, long timestamp_millis, long sleep_time_millis, long controller_idle_time_millis, long controller_tx_time_pl0_millis, long controller_tx_time_pl1_millis, long controller_tx_time_pl2_millis, long controller_tx_time_pl3_millis, long controller_tx_time_pl4_millis, long controller_rx_time_millis, long energy_used);<br>
     */
    public static final int MODEM_ACTIVITY_INFO = 10012;

    /**
     * ProcessMemoryState process_memory_state<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_MEMORY_STATE, int uid, java.lang.String process_name, int oom_adj_score, long page_fault, long page_major_fault, long rss_in_bytes, long cache_in_bytes, long swap_in_bytes, long rss_high_watermark_in_bytes, long start_time_nanos, int anon_rss_and_swap_in_kilobytes);<br>
     */
    public static final int PROCESS_MEMORY_STATE = 10013;

    /**
     * SystemElapsedRealtime system_elapsed_realtime<br>
     * Usage: StatsLog.write(StatsLog.SYSTEM_ELAPSED_REALTIME, long time_millis);<br>
     */
    public static final int SYSTEM_ELAPSED_REALTIME = 10014;

    /**
     * SystemUptime system_uptime<br>
     * Usage: StatsLog.write(StatsLog.SYSTEM_UPTIME, long uptime_millis);<br>
     */
    public static final int SYSTEM_UPTIME = 10015;

    /**
     * CpuActiveTime cpu_active_time<br>
     * Usage: StatsLog.write(StatsLog.CPU_ACTIVE_TIME, int uid, long time_millis);<br>
     */
    public static final int CPU_ACTIVE_TIME = 10016;

    /**
     * CpuClusterTime cpu_cluster_time<br>
     * Usage: StatsLog.write(StatsLog.CPU_CLUSTER_TIME, int uid, int cluster_index, long time_millis);<br>
     */
    public static final int CPU_CLUSTER_TIME = 10017;

    /**
     * RemainingBatteryCapacity remaining_battery_capacity<br>
     * Usage: StatsLog.write(StatsLog.REMAINING_BATTERY_CAPACITY, int charge_micro_ampere_hour);<br>
     */
    public static final int REMAINING_BATTERY_CAPACITY = 10019;

    /**
     * FullBatteryCapacity full_battery_capacity<br>
     * Usage: StatsLog.write(StatsLog.FULL_BATTERY_CAPACITY, int capacity_micro_ampere_hour);<br>
     */
    public static final int FULL_BATTERY_CAPACITY = 10020;

    /**
     * Temperature temperature<br>
     * Usage: StatsLog.write(StatsLog.TEMPERATURE, int sensor_location, java.lang.String sensor_name, int temperature_deci_celsius, int severity);<br>
     */
    public static final int TEMPERATURE = 10021;

    /**
     * BinderCalls binder_calls<br>
     * Usage: StatsLog.write(StatsLog.BINDER_CALLS, int uid, java.lang.String service_class_name, java.lang.String service_method_name, long call_count, long recorded_exception_count, long recorded_total_latency_micros, long recorded_max_latency_micros, long recorded_total_cpu_micros, long recorded_max_cpu_micros, long recorded_max_reply_size_bytes, long recorded_max_request_size_bytes, long recorded_call_count, boolean screen_interactive, int direct_caller_uid);<br>
     */
    public static final int BINDER_CALLS = 10022;

    /**
     * BinderCallsExceptions binder_calls_exceptions<br>
     * Usage: StatsLog.write(StatsLog.BINDER_CALLS_EXCEPTIONS, java.lang.String exception_class_name, long exception_count);<br>
     */
    public static final int BINDER_CALLS_EXCEPTIONS = 10023;

    /**
     * LooperStats looper_stats<br>
     * Usage: StatsLog.write(StatsLog.LOOPER_STATS, int uid, java.lang.String handler_class_name, java.lang.String looper_thread_name, java.lang.String message_name, long message_count, long exception_count, long recorded_message_count, long recorded_total_latency_micros, long recorded_total_cpu_micros, boolean screen_interactive, long recorded_max_cpu_micros, long recorded_max_latency_micros, long recorded_delay_message_count, long recorded_total_delay_millis, long recorded_max_delay_millis);<br>
     */
    public static final int LOOPER_STATS = 10024;

    /**
     * DiskStats disk_stats<br>
     * Usage: StatsLog.write(StatsLog.DISK_STATS, long data_write_latency_millis, boolean file_based_encryption, int recent_disk_write_speed);<br>
     */
    public static final int DISK_STATS = 10025;

    /**
     * DirectoryUsage directory_usage<br>
     * Usage: StatsLog.write(StatsLog.DIRECTORY_USAGE, int directory, long free_bytes, long total_bytes);<br>
     */
    public static final int DIRECTORY_USAGE = 10026;

    /**
     * AppSize app_size<br>
     * Usage: StatsLog.write(StatsLog.APP_SIZE, java.lang.String package_name, long app_size_bytes, long app_data_size_bytes, long app_cache_size_bytes, long cache_time_millis);<br>
     */
    public static final int APP_SIZE = 10027;

    /**
     * CategorySize category_size<br>
     * Usage: StatsLog.write(StatsLog.CATEGORY_SIZE, int category, long size_bytes, long cache_time_millis);<br>
     */
    public static final int CATEGORY_SIZE = 10028;

    /**
     * ProcStats proc_stats<br>
     * Usage: StatsLog.write(StatsLog.PROC_STATS, byte[] proc_stats_section, int shard_id);<br>
     */
    public static final int PROC_STATS = 10029;

    /**
     * BatteryVoltage battery_voltage<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_VOLTAGE, int voltage_millivolt);<br>
     */
    public static final int BATTERY_VOLTAGE = 10030;

    /**
     * NumFingerprintsEnrolled num_fingerprints_enrolled<br>
     * Usage: StatsLog.write(StatsLog.NUM_FINGERPRINTS_ENROLLED, int user, int num_fingerprints_enrolled);<br>
     */
    public static final int NUM_FINGERPRINTS_ENROLLED = 10031;

    /**
     * DiskIo disk_io<br>
     * Usage: StatsLog.write(StatsLog.DISK_IO, int uid, long fg_chars_read, long fg_chars_write, long fg_bytes_read, long fg_bytes_write, long bg_chars_read, long bg_chars_write, long bg_bytes_read, long bg_bytes_write, long fg_fsync, long bg_fsync);<br>
     */
    public static final int DISK_IO = 10032;

    /**
     * PowerProfile power_profile<br>
     * Usage: StatsLog.write(StatsLog.POWER_PROFILE, byte[] power_profile);<br>
     */
    public static final int POWER_PROFILE = 10033;

    /**
     * ProcStatsPkgProc proc_stats_pkg_proc<br>
     * Usage: StatsLog.write(StatsLog.PROC_STATS_PKG_PROC, byte[] proc_stats_section);<br>
     */
    public static final int PROC_STATS_PKG_PROC = 10034;

    /**
     * ProcessCpuTime process_cpu_time<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_CPU_TIME, int uid, java.lang.String process_name, long user_time_millis, long system_time_millis);<br>
     */
    public static final int PROCESS_CPU_TIME = 10035;

    /**
     * CpuTimePerThreadFreq cpu_time_per_thread_freq<br>
     * Usage: StatsLog.write(StatsLog.CPU_TIME_PER_THREAD_FREQ, int uid, int process_id, int thread_id, java.lang.String process_name, java.lang.String thread_name, int frequency1_khz, int time1_millis, int frequency2_khz, int time2_millis, int frequency3_khz, int time3_millis, int frequency4_khz, int time4_millis, int frequency5_khz, int time5_millis, int frequency6_khz, int time6_millis, int frequency7_khz, int time7_millis, int frequency8_khz, int time8_millis);<br>
     */
    public static final int CPU_TIME_PER_THREAD_FREQ = 10037;

    /**
     * OnDevicePowerMeasurement on_device_power_measurement<br>
     * Usage: StatsLog.write(StatsLog.ON_DEVICE_POWER_MEASUREMENT, java.lang.String subsystem_name, java.lang.String rail_name, long measurement_timestamp_millis, long energy_microwatt_secs);<br>
     */
    public static final int ON_DEVICE_POWER_MEASUREMENT = 10038;

    /**
     * DeviceCalculatedPowerUse device_calculated_power_use<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_CALCULATED_POWER_USE, long computed_power_nano_amp_secs);<br>
     */
    public static final int DEVICE_CALCULATED_POWER_USE = 10039;

    /**
     * DeviceCalculatedPowerBlameUid device_calculated_power_blame_uid<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_CALCULATED_POWER_BLAME_UID, int uid, long power_nano_amp_secs);<br>
     */
    public static final int DEVICE_CALCULATED_POWER_BLAME_UID = 10040;

    /**
     * DeviceCalculatedPowerBlameOther device_calculated_power_blame_other<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_CALCULATED_POWER_BLAME_OTHER, int drain_type, long power_nano_amp_secs);<br>
     */
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER = 10041;

    /**
     * ProcessMemoryHighWaterMark process_memory_high_water_mark<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_MEMORY_HIGH_WATER_MARK, int uid, java.lang.String process_name, long rss_high_water_mark_in_bytes, int rss_high_water_mark_in_kilobytes);<br>
     */
    public static final int PROCESS_MEMORY_HIGH_WATER_MARK = 10042;

    /**
     * BatteryLevel battery_level<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_LEVEL, int battery_level);<br>
     */
    public static final int BATTERY_LEVEL = 10043;

    /**
     * BuildInformation build_information<br>
     * Usage: StatsLog.write(StatsLog.BUILD_INFORMATION, java.lang.String fingerprint, java.lang.String brand, java.lang.String product, java.lang.String device, java.lang.String version_release, java.lang.String id, java.lang.String version_incremental, java.lang.String type, java.lang.String tags);<br>
     */
    public static final int BUILD_INFORMATION = 10044;

    /**
     * BatteryCycleCount battery_cycle_count<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_CYCLE_COUNT, int cycle_count);<br>
     */
    public static final int BATTERY_CYCLE_COUNT = 10045;

    /**
     * DebugElapsedClock debug_elapsed_clock<br>
     * Usage: StatsLog.write(StatsLog.DEBUG_ELAPSED_CLOCK, long pull_count, long elapsed_clock_millis, long same_elapsed_clock_millis, long elapsed_clock_diff_millis, int type);<br>
     */
    public static final int DEBUG_ELAPSED_CLOCK = 10046;

    /**
     * DebugFailingElapsedClock debug_failing_elapsed_clock<br>
     * Usage: StatsLog.write(StatsLog.DEBUG_FAILING_ELAPSED_CLOCK, long pull_count, long elapsed_clock_millis, long same_elapsed_clock_millis, long elapsed_clock_diff_millis);<br>
     */
    public static final int DEBUG_FAILING_ELAPSED_CLOCK = 10047;

    /**
     * NumFacesEnrolled num_faces_enrolled<br>
     * Usage: StatsLog.write(StatsLog.NUM_FACES_ENROLLED, int user, int num_faces_enrolled);<br>
     */
    public static final int NUM_FACES_ENROLLED = 10048;

    /**
     * RoleHolder role_holder<br>
     * Usage: StatsLog.write(StatsLog.ROLE_HOLDER, int uid, java.lang.String package_name, java.lang.String role);<br>
     */
    public static final int ROLE_HOLDER = 10049;

    /**
     * DangerousPermissionState dangerous_permission_state<br>
     * Usage: StatsLog.write(StatsLog.DANGEROUS_PERMISSION_STATE, java.lang.String permission_name, int uid, java.lang.String package_name, boolean is_granted, int permission_flags, int protection_flags);<br>
     */
    public static final int DANGEROUS_PERMISSION_STATE = 10050;

    /**
     * TimeZoneDataInfo time_zone_data_info<br>
     * Usage: StatsLog.write(StatsLog.TIME_ZONE_DATA_INFO, java.lang.String tzdb_version);<br>
     */
    public static final int TIME_ZONE_DATA_INFO = 10052;

    /**
     * ExternalStorageInfo external_storage_info<br>
     * Usage: StatsLog.write(StatsLog.EXTERNAL_STORAGE_INFO, int storage_type, int volume_type, long size_bytes);<br>
     */
    public static final int EXTERNAL_STORAGE_INFO = 10053;

    /**
     * SystemIonHeapSize system_ion_heap_size<br>
     * Usage: StatsLog.write(StatsLog.SYSTEM_ION_HEAP_SIZE, long size_in_bytes);<br>
     */
    public static final int SYSTEM_ION_HEAP_SIZE = 10056;

    /**
     * AppsOnExternalStorageInfo apps_on_external_storage_info<br>
     * Usage: StatsLog.write(StatsLog.APPS_ON_EXTERNAL_STORAGE_INFO, int external_storage_type, java.lang.String package_name);<br>
     */
    public static final int APPS_ON_EXTERNAL_STORAGE_INFO = 10057;

    /**
     * FaceSettings face_settings<br>
     * Usage: StatsLog.write(StatsLog.FACE_SETTINGS, boolean unlock_keyguard_enabled, boolean unlock_dismisses_keyguard, boolean unlock_attention_required, boolean unlock_app_enabled, boolean unlock_always_require_confirmation, boolean unlock_diversity_required);<br>
     */
    public static final int FACE_SETTINGS = 10058;

    /**
     * CoolingDevice cooling_device<br>
     * Usage: StatsLog.write(StatsLog.COOLING_DEVICE, int device_location, java.lang.String device_name, int state);<br>
     */
    public static final int COOLING_DEVICE = 10059;

    /**
     * AppOps app_ops<br>
     * Usage: StatsLog.write(StatsLog.APP_OPS, int uid, java.lang.String package_name, int op_id, long trusted_foreground_granted_count, long trusted_background_granted_count, long trusted_foreground_rejected_count, long trusted_background_rejected_count, long trusted_foreground_duration_millis, long trusted_background_duration_millis, boolean is_runtime_permission);<br>
     */
    public static final int APP_OPS = 10060;

    /**
     * ProcessSystemIonHeapSize process_system_ion_heap_size<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_SYSTEM_ION_HEAP_SIZE, int uid, java.lang.String process_name, int total_size_in_kilobytes, int allocation_count, int max_size_in_kilobytes);<br>
     */
    public static final int PROCESS_SYSTEM_ION_HEAP_SIZE = 10061;

    /**
     * ProcessMemorySnapshot process_memory_snapshot<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_MEMORY_SNAPSHOT, int uid, java.lang.String process_name, int pid, int oom_score_adj, int rss_in_kilobytes, int anon_rss_in_kilobytes, int swap_in_kilobytes, int anon_rss_and_swap_in_kilobytes);<br>
     */
    public static final int PROCESS_MEMORY_SNAPSHOT = 10064;

    /**
     * NotificationRemoteViews notification_remote_views<br>
     * Usage: StatsLog.write(StatsLog.NOTIFICATION_REMOTE_VIEWS, byte[] notification_remote_views);<br>
     */
    public static final int NOTIFICATION_REMOTE_VIEWS = 10066;

    /**
     * DangerousPermissionStateSampled dangerous_permission_state_sampled<br>
     * Usage: StatsLog.write(StatsLog.DANGEROUS_PERMISSION_STATE_SAMPLED, java.lang.String permission_name, int uid, boolean is_granted, int permission_flags, int protection_flags);<br>
     */
    public static final int DANGEROUS_PERMISSION_STATE_SAMPLED = 10067;

    /**
     * RuntimeAppOpAccess runtime_app_op_access<br>
     * Usage: StatsLog.write(StatsLog.RUNTIME_APP_OP_ACCESS, int uid, java.lang.String package_name, java.lang.String op_deprecated, java.lang.String attribution_tag, java.lang.String message, int sampling_strategy, int op);<br>
     */
    public static final int RUNTIME_APP_OP_ACCESS = 10069;

    /**
     * IonHeapSize ion_heap_size<br>
     * Usage: StatsLog.write(StatsLog.ION_HEAP_SIZE, int total_size_kb);<br>
     */
    public static final int ION_HEAP_SIZE = 10070;

    /**
     * PackageNotificationPreferences package_notification_preferences<br>
     * Usage: StatsLog.write(StatsLog.PACKAGE_NOTIFICATION_PREFERENCES, int uid, int importance, int visibility, int user_locked_fields);<br>
     */
    public static final int PACKAGE_NOTIFICATION_PREFERENCES = 10071;

    /**
     * PackageNotificationChannelPreferences package_notification_channel_preferences<br>
     * Usage: StatsLog.write(StatsLog.PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES, int uid, java.lang.String channel_id, java.lang.String channel_name, java.lang.String description, int importance, int user_locked_fields, boolean is_deleted, boolean is_conversation, boolean is_demoted_conversation, boolean is_important_conversation);<br>
     */
    public static final int PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES = 10072;

    /**
     * PackageNotificationChannelGroupPreferences package_notification_channel_group_preferences<br>
     * Usage: StatsLog.write(StatsLog.PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES, int uid, java.lang.String group_id, java.lang.String group_name, java.lang.String description, boolean is_blocked, int user_locked_fields);<br>
     */
    public static final int PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES = 10073;

    /**
     * GnssStats gnss_stats<br>
     * Usage: StatsLog.write(StatsLog.GNSS_STATS, long location_reports, long location_failure_reports, long time_to_first_fix_reports, long time_to_first_fix_millis, long position_accuracy_reports, long position_accuracy_meters, long top_four_average_cn0_reports, long top_four_average_cn0_db_mhz, long l5_top_four_average_cn0_reports, long l5_top_four_average_cn0_db_mhz, long sv_status_reports, long sv_status_reports_used_in_fix, long l5_sv_status_reports, long l5_sv_status_reports_used_in_fix);<br>
     */
    public static final int GNSS_STATS = 10074;

    /**
     * AttributedAppOps attributed_app_ops<br>
     * Usage: StatsLog.write(StatsLog.ATTRIBUTED_APP_OPS, int uid, java.lang.String package_name, java.lang.String tag, int op, long trusted_foreground_granted_count, long trusted_background_granted_count, long trusted_foreground_rejected_count, long trusted_background_rejected_count, long trusted_foreground_duration_millis, long trusted_background_duration_millis, boolean is_runtime_permission, int sampling_rate);<br>
     */
    public static final int ATTRIBUTED_APP_OPS = 10075;

    /**
     * SettingSnapshot setting_snapshot<br>
     * Usage: StatsLog.write(StatsLog.SETTING_SNAPSHOT, java.lang.String name, int type, boolean bool_value, int int_value, float float_value, java.lang.String str_value, int user_id);<br>
     */
    public static final int SETTING_SNAPSHOT = 10080;

    /**
     * BlobInfo blob_info<br>
     * Usage: StatsLog.write(StatsLog.BLOB_INFO, long blob_id, long size, long expiry_timestamp_millis, byte[] committers, byte[] leasees);<br>
     */
    public static final int BLOB_INFO = 10081;

    /**
     * DataUsageBytesTransfer data_usage_bytes_transfer<br>
     * Usage: StatsLog.write(StatsLog.DATA_USAGE_BYTES_TRANSFER, int state, long rx_bytes, long rx_packets, long tx_bytes, long tx_packets, int rat_type, java.lang.String sim_mcc, java.lang.String sim_mnc, int carrier_id, int opportunistic_data_sub, boolean is_nr_connected);<br>
     */
    public static final int DATA_USAGE_BYTES_TRANSFER = 10082;

    /**
     * BytesTransferByTagAndMetered bytes_transfer_by_tag_and_metered<br>
     * Usage: StatsLog.write(StatsLog.BYTES_TRANSFER_BY_TAG_AND_METERED, int uid, boolean is_metered, int tag, long rx_bytes, long rx_packets, long tx_bytes, long tx_packets);<br>
     */
    public static final int BYTES_TRANSFER_BY_TAG_AND_METERED = 10083;

    /**
     * DNDModeProto dnd_mode_rule<br>
     * Usage: StatsLog.write(StatsLog.DND_MODE_RULE, int user, boolean enabled, boolean channels_bypassing, int zen_mode, java.lang.String id, int uid, byte[] policy);<br>
     */
    public static final int DND_MODE_RULE = 10084;

    /**
     * SystemMemory system_memory<br>
     * Usage: StatsLog.write(StatsLog.SYSTEM_MEMORY, int unreclaimable_slab_kb, int vmalloc_used_kb, int page_tables_kb, int kernel_stack_kb, int total_ion_kb, int unaccounted_kb, int gpu_total_usage_kb, int gpu_private_usage_kb, int dmabuf_total_exported_kb);<br>
     */
    public static final int SYSTEM_MEMORY = 10092;

    /**
     * CpuTimePerClusterFreq cpu_time_per_cluster_freq<br>
     * Usage: StatsLog.write(StatsLog.CPU_TIME_PER_CLUSTER_FREQ, int cluster, int freq_khz, long time_millis);<br>
     */
    public static final int CPU_TIME_PER_CLUSTER_FREQ = 10095;

    /**
     * CpuCyclesPerUidCluster cpu_cycles_per_uid_cluster<br>
     * Usage: StatsLog.write(StatsLog.CPU_CYCLES_PER_UID_CLUSTER, int uid, int cluster, long mcycles, long time_millis, long power_profile_estimate);<br>
     */
    public static final int CPU_CYCLES_PER_UID_CLUSTER = 10096;

    /**
     * DeviceRotatedData device_rotated_data<br>
     * Usage: StatsLog.write(StatsLog.DEVICE_ROTATED_DATA, byte[] snapshot, int proposed_orientation);<br>
     */
    public static final int DEVICE_ROTATED_DATA = 10097;

    /**
     * CpuCyclesPerThreadGroupCluster cpu_cycles_per_thread_group_cluster<br>
     * Usage: StatsLog.write(StatsLog.CPU_CYCLES_PER_THREAD_GROUP_CLUSTER, int thread_group, int cluster, long mcycles, long time_millis);<br>
     */
    public static final int CPU_CYCLES_PER_THREAD_GROUP_CLUSTER = 10098;

    /**
     * OemManagedBytesTransfer oem_managed_bytes_transfer<br>
     * Usage: StatsLog.write(StatsLog.OEM_MANAGED_BYTES_TRANSFER, int uid, boolean is_foreground, int oem_managed_type, int transport_type, long rx_bytes, long rx_packets, long tx_bytes, long tx_packets);<br>
     */
    public static final int OEM_MANAGED_BYTES_TRANSFER = 10100;

    /**
     * GnssPowerStats gnss_power_stats<br>
     * Usage: StatsLog.write(StatsLog.GNSS_POWER_STATS, long elapsed_realtime_uncertainty_nanos, long total_energy_micro_joule, long singleband_tracking_mode_energy_micro_joule, long multiband_tracking_mode_energy_micro_joule, long singleband_acquisition_mode_energy_micro_joule, long multiband_acquisition_mode_energy_micro_joule, long vendor_specific_power_modes_energy_micro_joule_0, long vendor_specific_power_modes_energy_micro_joule_1, long vendor_specific_power_modes_energy_micro_joule_2, long vendor_specific_power_modes_energy_micro_joule_3, long vendor_specific_power_modes_energy_micro_joule_4, long vendor_specific_power_modes_energy_micro_joule_5, long vendor_specific_power_modes_energy_micro_joule_6, long vendor_specific_power_modes_energy_micro_joule_7, long vendor_specific_power_modes_energy_micro_joule_8, long vendor_specific_power_modes_energy_micro_joule_9);<br>
     */
    public static final int GNSS_POWER_STATS = 10101;

    /**
     * TimeZoneDetectorState time_zone_detector_state<br>
     * Usage: StatsLog.write(StatsLog.TIME_ZONE_DETECTOR_STATE, boolean telephony_supported, boolean geo_supported, boolean location_enabled, boolean auto_detection_setting, boolean geo_detection_setting, int detection_mode, int device_time_zone_ordinal, byte[] latest_manual_suggestion, byte[] latest_telephony_suggestion, byte[] latest_geo_suggestion);<br>
     */
    public static final int TIME_ZONE_DETECTOR_STATE = 10102;

    /**
     * Keystore2StorageStats keystore2_storage_stats<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_STORAGE_STATS, int storage_type, long size, long unused_size);<br>
     */
    public static final int KEYSTORE2_STORAGE_STATS = 10103;

    /**
     * RkpPoolStats rkp_pool_stats<br>
     * Usage: StatsLog.write(StatsLog.RKP_POOL_STATS, int security_level, int expiring, int unassigned, int attested, int total);<br>
     */
    public static final int RKP_POOL_STATS = 10104;

    /**
     * ProcessDmabufMemory process_dmabuf_memory<br>
     * Usage: StatsLog.write(StatsLog.PROCESS_DMABUF_MEMORY, int uid, java.lang.String process_name, int oom_adj_score, int retained_dmabuf_kb, int retained_dmabuf_count, int mapped_dmabuf_kb, int mapped_dmabuf_count);<br>
     */
    public static final int PROCESS_DMABUF_MEMORY = 10105;

    /**
     * PendingAlarmInfo pending_alarm_info<br>
     * Usage: StatsLog.write(StatsLog.PENDING_ALARM_INFO, int num_total, int num_exact, int num_wakeup, int num_allow_while_idle, int num_prioritized, int num_foreground_service, int num_activity, int num_service, int num_listener, int num_indefinite_future, int num_repeating, int num_alarm_clock, int num_rtc);<br>
     */
    public static final int PENDING_ALARM_INFO = 10106;

    /**
     * UserLevelHibernatedApps user_level_hibernated_apps<br>
     * Usage: StatsLog.write(StatsLog.USER_LEVEL_HIBERNATED_APPS, int hibernated_app_count, int user_id);<br>
     */
    public static final int USER_LEVEL_HIBERNATED_APPS = 10107;

    /**
     * GlobalHibernatedApps global_hibernated_apps<br>
     * Usage: StatsLog.write(StatsLog.GLOBAL_HIBERNATED_APPS, int hibernated_app_count, long storage_saved_mb);<br>
     */
    public static final int GLOBAL_HIBERNATED_APPS = 10109;

    /**
     * BatteryUsageStatsBeforeReset battery_usage_stats_before_reset<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_USAGE_STATS_BEFORE_RESET, byte[] battery_usage_stats);<br>
     */
    public static final int BATTERY_USAGE_STATS_BEFORE_RESET = 10111;

    /**
     * BatteryUsageStatsSinceReset battery_usage_stats_since_reset<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_USAGE_STATS_SINCE_RESET, byte[] battery_usage_stats);<br>
     */
    public static final int BATTERY_USAGE_STATS_SINCE_RESET = 10112;

    /**
     * BatteryUsageStatsSinceResetUsingPowerProfileModel battery_usage_stats_since_reset_using_power_profile_model<br>
     * Usage: StatsLog.write(StatsLog.BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL, byte[] battery_usage_stats);<br>
     */
    public static final int BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL = 10113;

    /**
     * InstalledIncrementalPackage installed_incremental_package<br>
     * Usage: StatsLog.write(StatsLog.INSTALLED_INCREMENTAL_PACKAGE, int uid);<br>
     */
    public static final int INSTALLED_INCREMENTAL_PACKAGE = 10114;

    /**
     * VmStat vmstat<br>
     * Usage: StatsLog.write(StatsLog.VMSTAT, int oom_kill_count);<br>
     */
    public static final int VMSTAT = 10117;

    /**
     * Keystore2KeyCreationWithGeneralInfo keystore2_key_creation_with_general_info<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO, int algorithm, int key_size, int ec_curve, int key_origin, int error_code, boolean attestation_requested, int count);<br>
     */
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO = 10118;

    /**
     * Keystore2KeyCreationWithAuthInfo keystore2_key_creation_with_auth_info<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO, int user_auth_type, int log_auth_timeout_seconds, int security_level, int count);<br>
     */
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO = 10119;

    /**
     * Keystore2KeyCreationWithPurposeAndModesInfo keystore2_key_creation_with_purpose_and_modes_info<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO, int algorithm, int purpose_bitmap, int padding_mode_bitmap, int digest_bitmap, int block_mode_bitmap, int count);<br>
     */
    public static final int KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO = 10120;

    /**
     * Keystore2AtomWithOverflow keystore2_atom_with_overflow<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_ATOM_WITH_OVERFLOW, int atom_id, int count);<br>
     */
    public static final int KEYSTORE2_ATOM_WITH_OVERFLOW = 10121;

    /**
     * Keystore2KeyOperationWithPurposeAndModesInfo keystore2_key_operation_with_purpose_and_modes_info<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO, int purpose, int padding_mode_bitmap, int digest_bitmap, int block_mode_bitmap, int count);<br>
     */
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO = 10122;

    /**
     * Keystore2KeyOperationWithGeneralInfo keystore2_key_operation_with_general_info<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO, int outcome, int error_code, boolean key_upgraded, int security_level, int count);<br>
     */
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO = 10123;

    /**
     * RkpErrorStats rkp_error_stats<br>
     * Usage: StatsLog.write(StatsLog.RKP_ERROR_STATS, int rkp_error, int count);<br>
     */
    public static final int RKP_ERROR_STATS = 10124;

    /**
     * Keystore2CrashStats keystore2_crash_stats<br>
     * Usage: StatsLog.write(StatsLog.KEYSTORE2_CRASH_STATS, int count_of_crash_events);<br>
     */
    public static final int KEYSTORE2_CRASH_STATS = 10125;

    /**
     * AccessibilityShortcutStats accessibility_shortcut_stats<br>
     * Usage: StatsLog.write(StatsLog.ACCESSIBILITY_SHORTCUT_STATS, int software_shortcut_type, int software_shortcut_service_num, int hardware_shortcut_type, int hardware_shortcut_service_num, int gesture_shortcut_type, int gesture_shortcut_service_num);<br>
     */
    public static final int ACCESSIBILITY_SHORTCUT_STATS = 10127;

    /**
     * AccessibilityFloatingMenuStats accessibility_floating_menu_stats<br>
     * Usage: StatsLog.write(StatsLog.ACCESSIBILITY_FLOATING_MENU_STATS, int size, int icon_type, boolean fade_enabled, float opacity);<br>
     */
    public static final int ACCESSIBILITY_FLOATING_MENU_STATS = 10128;

    // Constants for enum values.

    // Values for ProcessStateChanged.state
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_UNKNOWN_TO_PROTO = 998;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_UNKNOWN = 999;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_PERSISTENT = 1000;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_PERSISTENT_UI = 1001;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_TOP = 1002;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_FOREGROUND_SERVICE = 1003;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_BOUND_FOREGROUND_SERVICE = 1004;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_IMPORTANT_FOREGROUND = 1005;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_IMPORTANT_BACKGROUND = 1006;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_TRANSIENT_BACKGROUND = 1007;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_BACKUP = 1008;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_SERVICE = 1009;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_RECEIVER = 1010;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_TOP_SLEEPING = 1011;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_HEAVY_WEIGHT = 1012;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_HOME = 1013;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_LAST_ACTIVITY = 1014;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_ACTIVITY = 1015;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_ACTIVITY_CLIENT = 1016;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_RECENT = 1017;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_EMPTY = 1018;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_NONEXISTENT = 1019;
    public static final int PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_BOUND_TOP = 1020;

    // Values for SensorStateChanged.state
    public static final int SENSOR_STATE_CHANGED__STATE__OFF = 0;
    public static final int SENSOR_STATE_CHANGED__STATE__ON = 1;

    // Values for GpsScanStateChanged.state
    public static final int GPS_SCAN_STATE_CHANGED__STATE__OFF = 0;
    public static final int GPS_SCAN_STATE_CHANGED__STATE__ON = 1;

    // Values for SyncStateChanged.state
    public static final int SYNC_STATE_CHANGED__STATE__OFF = 0;
    public static final int SYNC_STATE_CHANGED__STATE__ON = 1;

    // Values for ScheduledJobStateChanged.state
    public static final int SCHEDULED_JOB_STATE_CHANGED__STATE__FINISHED = 0;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STATE__STARTED = 1;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STATE__SCHEDULED = 2;

    // Values for ScheduledJobStateChanged.internal_stop_reason
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_UNKNOWN = -1;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_CANCELLED = 0;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_CONSTRAINTS_NOT_SATISFIED = 1;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_PREEMPT = 2;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_TIMEOUT = 3;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_DEVICE_IDLE = 4;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_DEVICE_THERMAL = 5;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_RESTRICTED_BUCKET = 6;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_UNINSTALL = 7;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_DATA_CLEARED = 8;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_RTC_UPDATED = 9;
    public static final int SCHEDULED_JOB_STATE_CHANGED__INTERNAL_STOP_REASON__INTERNAL_STOP_REASON_SUCCESSFUL_FINISH = 10;

    // Values for ScheduledJobStateChanged.standby_bucket
    public static final int SCHEDULED_JOB_STATE_CHANGED__STANDBY_BUCKET__UNKNOWN = -1;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STANDBY_BUCKET__ACTIVE = 0;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STANDBY_BUCKET__WORKING_SET = 1;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STANDBY_BUCKET__FREQUENT = 2;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STANDBY_BUCKET__RARE = 3;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STANDBY_BUCKET__NEVER = 4;
    public static final int SCHEDULED_JOB_STATE_CHANGED__STANDBY_BUCKET__RESTRICTED = 5;

    // Values for ScheduledJobStateChanged.public_stop_reason
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_UNDEFINED = 0;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_CANCELLED_BY_APP = 1;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_PREEMPT = 2;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_TIMEOUT = 3;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_DEVICE_STATE = 4;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_CONSTRAINT_BATTERY_NOT_LOW = 5;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_CONSTRAINT_CHARGING = 6;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_CONSTRAINT_CONNECTIVITY = 7;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_CONSTRAINT_DEVICE_IDLE = 8;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_CONSTRAINT_STORAGE_NOT_LOW = 9;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_QUOTA = 10;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_BACKGROUND_RESTRICTION = 11;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_APP_STANDBY = 12;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_USER = 13;
    public static final int SCHEDULED_JOB_STATE_CHANGED__PUBLIC_STOP_REASON__STOP_REASON_SYSTEM_PROCESSING = 14;

    // Values for WakelockStateChanged.type
    public static final int WAKELOCK_STATE_CHANGED__TYPE__PARTIAL_WAKE_LOCK = 1;
    public static final int WAKELOCK_STATE_CHANGED__TYPE__SCREEN_DIM_WAKE_LOCK = 6;
    public static final int WAKELOCK_STATE_CHANGED__TYPE__SCREEN_BRIGHT_WAKE_LOCK = 10;
    public static final int WAKELOCK_STATE_CHANGED__TYPE__FULL_WAKE_LOCK = 26;
    public static final int WAKELOCK_STATE_CHANGED__TYPE__PROXIMITY_SCREEN_OFF_WAKE_LOCK = 32;
    public static final int WAKELOCK_STATE_CHANGED__TYPE__DOZE_WAKE_LOCK = 64;
    public static final int WAKELOCK_STATE_CHANGED__TYPE__DRAW_WAKE_LOCK = 128;

    // Values for WakelockStateChanged.state
    public static final int WAKELOCK_STATE_CHANGED__STATE__RELEASE = 0;
    public static final int WAKELOCK_STATE_CHANGED__STATE__ACQUIRE = 1;
    public static final int WAKELOCK_STATE_CHANGED__STATE__CHANGE_RELEASE = 2;
    public static final int WAKELOCK_STATE_CHANGED__STATE__CHANGE_ACQUIRE = 3;

    // Values for LongPartialWakelockStateChanged.state
    public static final int LONG_PARTIAL_WAKELOCK_STATE_CHANGED__STATE__OFF = 0;
    public static final int LONG_PARTIAL_WAKELOCK_STATE_CHANGED__STATE__ON = 1;

    // Values for MobileRadioPowerStateChanged.state
    public static final int MOBILE_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_LOW = 1;
    public static final int MOBILE_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_MEDIUM = 2;
    public static final int MOBILE_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_HIGH = 3;
    public static final int MOBILE_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_UNKNOWN = 2147483647;

    // Values for WifiRadioPowerStateChanged.state
    public static final int WIFI_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_LOW = 1;
    public static final int WIFI_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_MEDIUM = 2;
    public static final int WIFI_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_HIGH = 3;
    public static final int WIFI_RADIO_POWER_STATE_CHANGED__STATE__DATA_CONNECTION_POWER_STATE_UNKNOWN = 2147483647;

    // Values for ActivityManagerSleepStateChanged.state
    public static final int ACTIVITY_MANAGER_SLEEP_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int ACTIVITY_MANAGER_SLEEP_STATE_CHANGED__STATE__ASLEEP = 1;
    public static final int ACTIVITY_MANAGER_SLEEP_STATE_CHANGED__STATE__AWAKE = 2;

    // Values for MemoryFactorStateChanged.factor
    public static final int MEMORY_FACTOR_STATE_CHANGED__FACTOR__MEMORY_UNKNOWN = 0;
    public static final int MEMORY_FACTOR_STATE_CHANGED__FACTOR__NORMAL = 1;
    public static final int MEMORY_FACTOR_STATE_CHANGED__FACTOR__MODERATE = 2;
    public static final int MEMORY_FACTOR_STATE_CHANGED__FACTOR__LOW = 3;
    public static final int MEMORY_FACTOR_STATE_CHANGED__FACTOR__CRITICAL = 4;

    // Values for ProcessMemoryStatReported.type
    public static final int PROCESS_MEMORY_STAT_REPORTED__TYPE__ADD_PSS_INTERNAL_SINGLE = 0;
    public static final int PROCESS_MEMORY_STAT_REPORTED__TYPE__ADD_PSS_INTERNAL_ALL_MEM = 1;
    public static final int PROCESS_MEMORY_STAT_REPORTED__TYPE__ADD_PSS_INTERNAL_ALL_POLL = 2;
    public static final int PROCESS_MEMORY_STAT_REPORTED__TYPE__ADD_PSS_EXTERNAL = 3;
    public static final int PROCESS_MEMORY_STAT_REPORTED__TYPE__ADD_PSS_EXTERNAL_SLOW = 4;

    // Values for BatterySaverModeStateChanged.state
    public static final int BATTERY_SAVER_MODE_STATE_CHANGED__STATE__OFF = 0;
    public static final int BATTERY_SAVER_MODE_STATE_CHANGED__STATE__ON = 1;

    // Values for DeviceIdleModeStateChanged.state
    public static final int DEVICE_IDLE_MODE_STATE_CHANGED__STATE__DEVICE_IDLE_MODE_OFF = 0;
    public static final int DEVICE_IDLE_MODE_STATE_CHANGED__STATE__DEVICE_IDLE_MODE_LIGHT = 1;
    public static final int DEVICE_IDLE_MODE_STATE_CHANGED__STATE__DEVICE_IDLE_MODE_DEEP = 2;

    // Values for DeviceIdlingModeStateChanged.state
    public static final int DEVICE_IDLING_MODE_STATE_CHANGED__STATE__DEVICE_IDLE_MODE_OFF = 0;
    public static final int DEVICE_IDLING_MODE_STATE_CHANGED__STATE__DEVICE_IDLE_MODE_LIGHT = 1;
    public static final int DEVICE_IDLING_MODE_STATE_CHANGED__STATE__DEVICE_IDLE_MODE_DEEP = 2;

    // Values for AudioStateChanged.state
    public static final int AUDIO_STATE_CHANGED__STATE__OFF = 0;
    public static final int AUDIO_STATE_CHANGED__STATE__ON = 1;
    public static final int AUDIO_STATE_CHANGED__STATE__RESET = 2;

    // Values for MediaCodecStateChanged.state
    public static final int MEDIA_CODEC_STATE_CHANGED__STATE__OFF = 0;
    public static final int MEDIA_CODEC_STATE_CHANGED__STATE__ON = 1;
    public static final int MEDIA_CODEC_STATE_CHANGED__STATE__RESET = 2;

    // Values for CameraStateChanged.state
    public static final int CAMERA_STATE_CHANGED__STATE__OFF = 0;
    public static final int CAMERA_STATE_CHANGED__STATE__ON = 1;
    public static final int CAMERA_STATE_CHANGED__STATE__RESET = 2;

    // Values for FlashlightStateChanged.state
    public static final int FLASHLIGHT_STATE_CHANGED__STATE__OFF = 0;
    public static final int FLASHLIGHT_STATE_CHANGED__STATE__ON = 1;
    public static final int FLASHLIGHT_STATE_CHANGED__STATE__RESET = 2;

    // Values for UidProcessStateChanged.state
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_UNKNOWN_TO_PROTO = 998;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_UNKNOWN = 999;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_PERSISTENT = 1000;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_PERSISTENT_UI = 1001;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_TOP = 1002;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_FOREGROUND_SERVICE = 1003;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_BOUND_FOREGROUND_SERVICE = 1004;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_IMPORTANT_FOREGROUND = 1005;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_IMPORTANT_BACKGROUND = 1006;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_TRANSIENT_BACKGROUND = 1007;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_BACKUP = 1008;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_SERVICE = 1009;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_RECEIVER = 1010;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_TOP_SLEEPING = 1011;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_HEAVY_WEIGHT = 1012;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_HOME = 1013;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_LAST_ACTIVITY = 1014;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_ACTIVITY = 1015;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_ACTIVITY_CLIENT = 1016;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_RECENT = 1017;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_CACHED_EMPTY = 1018;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_NONEXISTENT = 1019;
    public static final int UID_PROCESS_STATE_CHANGED__STATE__PROCESS_STATE_BOUND_TOP = 1020;

    // Values for ProcessLifeCycleStateChanged.state
    public static final int PROCESS_LIFE_CYCLE_STATE_CHANGED__STATE__FINISHED = 0;
    public static final int PROCESS_LIFE_CYCLE_STATE_CHANGED__STATE__STARTED = 1;
    public static final int PROCESS_LIFE_CYCLE_STATE_CHANGED__STATE__CRASHED = 2;

    // Values for ScreenStateChanged.state
    public static final int SCREEN_STATE_CHANGED__STATE__DISPLAY_STATE_UNKNOWN = 0;
    public static final int SCREEN_STATE_CHANGED__STATE__DISPLAY_STATE_OFF = 1;
    public static final int SCREEN_STATE_CHANGED__STATE__DISPLAY_STATE_ON = 2;
    public static final int SCREEN_STATE_CHANGED__STATE__DISPLAY_STATE_DOZE = 3;
    public static final int SCREEN_STATE_CHANGED__STATE__DISPLAY_STATE_DOZE_SUSPEND = 4;
    public static final int SCREEN_STATE_CHANGED__STATE__DISPLAY_STATE_VR = 5;
    public static final int SCREEN_STATE_CHANGED__STATE__DISPLAY_STATE_ON_SUSPEND = 6;

    // Values for ChargingStateChanged.state
    public static final int CHARGING_STATE_CHANGED__STATE__BATTERY_STATUS_INVALID = 0;
    public static final int CHARGING_STATE_CHANGED__STATE__BATTERY_STATUS_UNKNOWN = 1;
    public static final int CHARGING_STATE_CHANGED__STATE__BATTERY_STATUS_CHARGING = 2;
    public static final int CHARGING_STATE_CHANGED__STATE__BATTERY_STATUS_DISCHARGING = 3;
    public static final int CHARGING_STATE_CHANGED__STATE__BATTERY_STATUS_NOT_CHARGING = 4;
    public static final int CHARGING_STATE_CHANGED__STATE__BATTERY_STATUS_FULL = 5;

    // Values for PluggedStateChanged.state
    public static final int PLUGGED_STATE_CHANGED__STATE__BATTERY_PLUGGED_NONE = 0;
    public static final int PLUGGED_STATE_CHANGED__STATE__BATTERY_PLUGGED_AC = 1;
    public static final int PLUGGED_STATE_CHANGED__STATE__BATTERY_PLUGGED_USB = 2;
    public static final int PLUGGED_STATE_CHANGED__STATE__BATTERY_PLUGGED_WIRELESS = 4;

    // Values for InteractiveStateChanged.state
    public static final int INTERACTIVE_STATE_CHANGED__STATE__OFF = 0;
    public static final int INTERACTIVE_STATE_CHANGED__STATE__ON = 1;

    // Values for WakeupAlarmOccurred.app_standby_bucket
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_UNKNOWN = 0;
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_EXEMPTED = 5;
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_ACTIVE = 10;
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_WORKING_SET = 20;
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_FREQUENT = 30;
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_RARE = 40;
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_RESTRICTED = 45;
    public static final int WAKEUP_ALARM_OCCURRED__APP_STANDBY_BUCKET__BUCKET_NEVER = 50;

    // Values for PhoneSignalStrengthChanged.signal_strength
    public static final int PHONE_SIGNAL_STRENGTH_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_NONE_OR_UNKNOWN = 0;
    public static final int PHONE_SIGNAL_STRENGTH_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_POOR = 1;
    public static final int PHONE_SIGNAL_STRENGTH_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_MODERATE = 2;
    public static final int PHONE_SIGNAL_STRENGTH_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_GOOD = 3;
    public static final int PHONE_SIGNAL_STRENGTH_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_GREAT = 4;

    // Values for SettingChanged.reason
    public static final int SETTING_CHANGED__REASON__UPDATED = 1;
    public static final int SETTING_CHANGED__REASON__DELETED = 2;

    // Values for ActivityForegroundStateChanged.state
    public static final int ACTIVITY_FOREGROUND_STATE_CHANGED__STATE__BACKGROUND = 0;
    public static final int ACTIVITY_FOREGROUND_STATE_CHANGED__STATE__FOREGROUND = 1;

    // Values for IsolatedUidChanged.event
    public static final int ISOLATED_UID_CHANGED__EVENT__REMOVED = 0;
    public static final int ISOLATED_UID_CHANGED__EVENT__CREATED = 1;

    // Values for AppStartOccurred.type
    public static final int APP_START_OCCURRED__TYPE__UNKNOWN = 0;
    public static final int APP_START_OCCURRED__TYPE__WARM = 1;
    public static final int APP_START_OCCURRED__TYPE__HOT = 2;
    public static final int APP_START_OCCURRED__TYPE__COLD = 3;
    public static final int APP_START_OCCURRED__TYPE__RELAUNCH = 4;

    // Values for AppStartOccurred.reason
    public static final int APP_START_OCCURRED__REASON__APP_TRANSITION_REASON_UNKNOWN = 0;
    public static final int APP_START_OCCURRED__REASON__APP_TRANSITION_SPLASH_SCREEN = 1;
    public static final int APP_START_OCCURRED__REASON__APP_TRANSITION_WINDOWS_DRAWN = 2;
    public static final int APP_START_OCCURRED__REASON__APP_TRANSITION_TIMEOUT = 3;
    public static final int APP_START_OCCURRED__REASON__APP_TRANSITION_SNAPSHOT = 4;
    public static final int APP_START_OCCURRED__REASON__APP_TRANSITION_RECENTS_ANIM = 5;

    // Values for AppStartOccurred.source_type
    public static final int APP_START_OCCURRED__SOURCE_TYPE__UNAVAILABLE = 0;
    public static final int APP_START_OCCURRED__SOURCE_TYPE__LAUNCHER = 1;
    public static final int APP_START_OCCURRED__SOURCE_TYPE__NOTIFICATION = 2;
    public static final int APP_START_OCCURRED__SOURCE_TYPE__LOCKSCREEN = 3;
    public static final int APP_START_OCCURRED__SOURCE_TYPE__RECENTS_ANIMATION = 4;

    // Values for AppStartCanceled.type
    public static final int APP_START_CANCELED__TYPE__UNKNOWN = 0;
    public static final int APP_START_CANCELED__TYPE__WARM = 1;
    public static final int APP_START_CANCELED__TYPE__HOT = 2;
    public static final int APP_START_CANCELED__TYPE__COLD = 3;
    public static final int APP_START_CANCELED__TYPE__RELAUNCH = 4;

    // Values for AppStartFullyDrawn.type
    public static final int APP_START_FULLY_DRAWN__TYPE__UNKNOWN = 0;
    public static final int APP_START_FULLY_DRAWN__TYPE__WITH_BUNDLE = 1;
    public static final int APP_START_FULLY_DRAWN__TYPE__WITHOUT_BUNDLE = 2;

    // Values for AppStartFullyDrawn.source_type
    public static final int APP_START_FULLY_DRAWN__SOURCE_TYPE__UNAVAILABLE = 0;
    public static final int APP_START_FULLY_DRAWN__SOURCE_TYPE__LAUNCHER = 1;
    public static final int APP_START_FULLY_DRAWN__SOURCE_TYPE__NOTIFICATION = 2;
    public static final int APP_START_FULLY_DRAWN__SOURCE_TYPE__LOCKSCREEN = 3;

    // Values for LmkKillOccurred.reason
    public static final int LMK_KILL_OCCURRED__REASON__UNKNOWN = 0;
    public static final int LMK_KILL_OCCURRED__REASON__PRESSURE_AFTER_KILL = 1;
    public static final int LMK_KILL_OCCURRED__REASON__NOT_RESPONDING = 2;
    public static final int LMK_KILL_OCCURRED__REASON__LOW_SWAP_AND_THRASHING = 3;
    public static final int LMK_KILL_OCCURRED__REASON__LOW_MEM_AND_SWAP = 4;
    public static final int LMK_KILL_OCCURRED__REASON__LOW_MEM_AND_THRASHING = 5;
    public static final int LMK_KILL_OCCURRED__REASON__DIRECT_RECL_AND_THRASHING = 6;
    public static final int LMK_KILL_OCCURRED__REASON__LOW_MEM_AND_SWAP_UTIL = 7;
    public static final int LMK_KILL_OCCURRED__REASON__LOW_FILECACHE_AFTER_THRASHING = 8;

    // Values for PictureInPictureStateChanged.state
    public static final int PICTURE_IN_PICTURE_STATE_CHANGED__STATE__ENTERED = 1;
    public static final int PICTURE_IN_PICTURE_STATE_CHANGED__STATE__EXPANDED_TO_FULL_SCREEN = 2;
    public static final int PICTURE_IN_PICTURE_STATE_CHANGED__STATE__MINIMIZED = 3;
    public static final int PICTURE_IN_PICTURE_STATE_CHANGED__STATE__DISMISSED = 4;

    // Values for LmkStateChanged.state
    public static final int LMK_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int LMK_STATE_CHANGED__STATE__START = 1;
    public static final int LMK_STATE_CHANGED__STATE__STOP = 2;

    // Values for OverlayStateChanged.state
    public static final int OVERLAY_STATE_CHANGED__STATE__ENTERED = 1;
    public static final int OVERLAY_STATE_CHANGED__STATE__EXITED = 2;

    // Values for ForegroundServiceStateChanged.state
    public static final int FOREGROUND_SERVICE_STATE_CHANGED__STATE__ENTER = 1;
    public static final int FOREGROUND_SERVICE_STATE_CHANGED__STATE__EXIT = 2;
    public static final int FOREGROUND_SERVICE_STATE_CHANGED__STATE__DENIED = 3;

    // Values for BluetoothEnabledStateChanged.state
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__STATE__ENABLED = 1;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__STATE__DISABLED = 2;

    // Values for BluetoothEnabledStateChanged.reason
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_UNSPECIFIED = 0;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_APPLICATION_REQUEST = 1;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_AIRPLANE_MODE = 2;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_DISALLOWED = 3;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_RESTARTED = 4;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_START_ERROR = 5;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_SYSTEM_BOOT = 6;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_CRASH = 7;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_USER_SWITCH = 8;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_RESTORE_USER_SETTING = 9;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_FACTORY_RESET = 10;
    public static final int BLUETOOTH_ENABLED_STATE_CHANGED__REASON__ENABLE_DISABLE_REASON_INIT_FLAGS_CHANGED = 11;

    // Values for GpsSignalQualityChanged.level
    public static final int GPS_SIGNAL_QUALITY_CHANGED__LEVEL__GPS_SIGNAL_QUALITY_UNKNOWN = -1;
    public static final int GPS_SIGNAL_QUALITY_CHANGED__LEVEL__GPS_SIGNAL_QUALITY_POOR = 0;
    public static final int GPS_SIGNAL_QUALITY_CHANGED__LEVEL__GPS_SIGNAL_QUALITY_GOOD = 1;

    // Values for UsbConnectorStateChanged.state
    public static final int USB_CONNECTOR_STATE_CHANGED__STATE__STATE_DISCONNECTED = 0;
    public static final int USB_CONNECTOR_STATE_CHANGED__STATE__STATE_CONNECTED = 1;

    // Values for UsbDeviceAttached.state
    public static final int USB_DEVICE_ATTACHED__STATE__STATE_DISCONNECTED = 0;
    public static final int USB_DEVICE_ATTACHED__STATE__STATE_CONNECTED = 1;

    // Values for AppCrashOccurred.is_instant_app
    public static final int APP_CRASH_OCCURRED__IS_INSTANT_APP__UNAVAILABLE = 0;
    public static final int APP_CRASH_OCCURRED__IS_INSTANT_APP__FALSE = 1;
    public static final int APP_CRASH_OCCURRED__IS_INSTANT_APP__TRUE = 2;

    // Values for AppCrashOccurred.foreground_state
    public static final int APP_CRASH_OCCURRED__FOREGROUND_STATE__UNKNOWN = 0;
    public static final int APP_CRASH_OCCURRED__FOREGROUND_STATE__BACKGROUND = 1;
    public static final int APP_CRASH_OCCURRED__FOREGROUND_STATE__FOREGROUND = 2;

    // Values for AppCrashOccurred.error_source
    public static final int APP_CRASH_OCCURRED__ERROR_SOURCE__ERROR_SOURCE_UNKNOWN = 0;
    public static final int APP_CRASH_OCCURRED__ERROR_SOURCE__DATA_APP = 1;
    public static final int APP_CRASH_OCCURRED__ERROR_SOURCE__SYSTEM_APP = 2;
    public static final int APP_CRASH_OCCURRED__ERROR_SOURCE__SYSTEM_SERVER = 3;

    // Values for ANROccurred.is_instant_app
    public static final int ANROCCURRED__IS_INSTANT_APP__UNAVAILABLE = 0;
    public static final int ANROCCURRED__IS_INSTANT_APP__FALSE = 1;
    public static final int ANROCCURRED__IS_INSTANT_APP__TRUE = 2;

    // Values for ANROccurred.foreground_state
    public static final int ANROCCURRED__FOREGROUND_STATE__UNKNOWN = 0;
    public static final int ANROCCURRED__FOREGROUND_STATE__BACKGROUND = 1;
    public static final int ANROCCURRED__FOREGROUND_STATE__FOREGROUND = 2;

    // Values for ANROccurred.error_source
    public static final int ANROCCURRED__ERROR_SOURCE__ERROR_SOURCE_UNKNOWN = 0;
    public static final int ANROCCURRED__ERROR_SOURCE__DATA_APP = 1;
    public static final int ANROCCURRED__ERROR_SOURCE__SYSTEM_APP = 2;
    public static final int ANROCCURRED__ERROR_SOURCE__SYSTEM_SERVER = 3;

    // Values for WTFOccurred.error_source
    public static final int WTFOCCURRED__ERROR_SOURCE__ERROR_SOURCE_UNKNOWN = 0;
    public static final int WTFOCCURRED__ERROR_SOURCE__DATA_APP = 1;
    public static final int WTFOCCURRED__ERROR_SOURCE__SYSTEM_APP = 2;
    public static final int WTFOCCURRED__ERROR_SOURCE__SYSTEM_SERVER = 3;

    // Values for VibratorStateChanged.state
    public static final int VIBRATOR_STATE_CHANGED__STATE__OFF = 0;
    public static final int VIBRATOR_STATE_CHANGED__STATE__ON = 1;

    // Values for BiometricAcquired.modality
    public static final int BIOMETRIC_ACQUIRED__MODALITY__MODALITY_UNKNOWN = 0;
    public static final int BIOMETRIC_ACQUIRED__MODALITY__MODALITY_FINGERPRINT = 1;
    public static final int BIOMETRIC_ACQUIRED__MODALITY__MODALITY_IRIS = 2;
    public static final int BIOMETRIC_ACQUIRED__MODALITY__MODALITY_FACE = 4;

    // Values for BiometricAcquired.action
    public static final int BIOMETRIC_ACQUIRED__ACTION__ACTION_UNKNOWN = 0;
    public static final int BIOMETRIC_ACQUIRED__ACTION__ACTION_ENROLL = 1;
    public static final int BIOMETRIC_ACQUIRED__ACTION__ACTION_AUTHENTICATE = 2;
    public static final int BIOMETRIC_ACQUIRED__ACTION__ACTION_ENUMERATE = 3;
    public static final int BIOMETRIC_ACQUIRED__ACTION__ACTION_REMOVE = 4;

    // Values for BiometricAcquired.client
    public static final int BIOMETRIC_ACQUIRED__CLIENT__CLIENT_UNKNOWN = 0;
    public static final int BIOMETRIC_ACQUIRED__CLIENT__CLIENT_KEYGUARD = 1;
    public static final int BIOMETRIC_ACQUIRED__CLIENT__CLIENT_BIOMETRIC_PROMPT = 2;
    public static final int BIOMETRIC_ACQUIRED__CLIENT__CLIENT_FINGERPRINT_MANAGER = 3;

    // Values for BiometricAuthenticated.modality
    public static final int BIOMETRIC_AUTHENTICATED__MODALITY__MODALITY_UNKNOWN = 0;
    public static final int BIOMETRIC_AUTHENTICATED__MODALITY__MODALITY_FINGERPRINT = 1;
    public static final int BIOMETRIC_AUTHENTICATED__MODALITY__MODALITY_IRIS = 2;
    public static final int BIOMETRIC_AUTHENTICATED__MODALITY__MODALITY_FACE = 4;

    // Values for BiometricAuthenticated.client
    public static final int BIOMETRIC_AUTHENTICATED__CLIENT__CLIENT_UNKNOWN = 0;
    public static final int BIOMETRIC_AUTHENTICATED__CLIENT__CLIENT_KEYGUARD = 1;
    public static final int BIOMETRIC_AUTHENTICATED__CLIENT__CLIENT_BIOMETRIC_PROMPT = 2;
    public static final int BIOMETRIC_AUTHENTICATED__CLIENT__CLIENT_FINGERPRINT_MANAGER = 3;

    // Values for BiometricAuthenticated.state
    public static final int BIOMETRIC_AUTHENTICATED__STATE__UNKNOWN = 0;
    public static final int BIOMETRIC_AUTHENTICATED__STATE__REJECTED = 1;
    public static final int BIOMETRIC_AUTHENTICATED__STATE__PENDING_CONFIRMATION = 2;
    public static final int BIOMETRIC_AUTHENTICATED__STATE__CONFIRMED = 3;

    // Values for BiometricErrorOccurred.modality
    public static final int BIOMETRIC_ERROR_OCCURRED__MODALITY__MODALITY_UNKNOWN = 0;
    public static final int BIOMETRIC_ERROR_OCCURRED__MODALITY__MODALITY_FINGERPRINT = 1;
    public static final int BIOMETRIC_ERROR_OCCURRED__MODALITY__MODALITY_IRIS = 2;
    public static final int BIOMETRIC_ERROR_OCCURRED__MODALITY__MODALITY_FACE = 4;

    // Values for BiometricErrorOccurred.action
    public static final int BIOMETRIC_ERROR_OCCURRED__ACTION__ACTION_UNKNOWN = 0;
    public static final int BIOMETRIC_ERROR_OCCURRED__ACTION__ACTION_ENROLL = 1;
    public static final int BIOMETRIC_ERROR_OCCURRED__ACTION__ACTION_AUTHENTICATE = 2;
    public static final int BIOMETRIC_ERROR_OCCURRED__ACTION__ACTION_ENUMERATE = 3;
    public static final int BIOMETRIC_ERROR_OCCURRED__ACTION__ACTION_REMOVE = 4;

    // Values for BiometricErrorOccurred.client
    public static final int BIOMETRIC_ERROR_OCCURRED__CLIENT__CLIENT_UNKNOWN = 0;
    public static final int BIOMETRIC_ERROR_OCCURRED__CLIENT__CLIENT_KEYGUARD = 1;
    public static final int BIOMETRIC_ERROR_OCCURRED__CLIENT__CLIENT_BIOMETRIC_PROMPT = 2;
    public static final int BIOMETRIC_ERROR_OCCURRED__CLIENT__CLIENT_FINGERPRINT_MANAGER = 3;

    // Values for PhoneServiceStateChanged.state
    public static final int PHONE_SERVICE_STATE_CHANGED__STATE__SERVICE_STATE_IN_SERVICE = 0;
    public static final int PHONE_SERVICE_STATE_CHANGED__STATE__SERVICE_STATE_OUT_OF_SERVICE = 1;
    public static final int PHONE_SERVICE_STATE_CHANGED__STATE__SERVICE_STATE_EMERGENCY_ONLY = 2;
    public static final int PHONE_SERVICE_STATE_CHANGED__STATE__SERVICE_STATE_POWER_OFF = 3;

    // Values for PhoneServiceStateChanged.sim_state
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_UNKNOWN = 0;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_ABSENT = 1;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_PIN_REQUIRED = 2;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_PUK_REQUIRED = 3;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_NETWORK_LOCKED = 4;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_READY = 5;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_NOT_READY = 6;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_PERM_DISABLED = 7;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_CARD_IO_ERROR = 8;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_CARD_RESTRICTED = 9;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_LOADED = 10;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIM_STATE__SIM_STATE_PRESENT = 11;

    // Values for PhoneServiceStateChanged.signal_strength
    public static final int PHONE_SERVICE_STATE_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_NONE_OR_UNKNOWN = 0;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_POOR = 1;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_MODERATE = 2;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_GOOD = 3;
    public static final int PHONE_SERVICE_STATE_CHANGED__SIGNAL_STRENGTH__SIGNAL_STRENGTH_GREAT = 4;

    // Values for PhoneStateChanged.state
    public static final int PHONE_STATE_CHANGED__STATE__OFF = 0;
    public static final int PHONE_STATE_CHANGED__STATE__ON = 1;

    // Values for ConnectivityStateChanged.state
    public static final int CONNECTIVITY_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int CONNECTIVITY_STATE_CHANGED__STATE__CONNECTED = 1;
    public static final int CONNECTIVITY_STATE_CHANGED__STATE__DISCONNECTED = 2;

    // Values for ServiceStateChanged.state
    public static final int SERVICE_STATE_CHANGED__STATE__START = 1;
    public static final int SERVICE_STATE_CHANGED__STATE__STOP = 2;

    // Values for DevicePolicyEvent.event_id
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_QUALITY = 1;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_MINIMUM_LENGTH = 2;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_MINIMUM_NUMERIC = 3;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_MINIMUM_NON_LETTER = 4;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_MINIMUM_LETTERS = 5;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_MINIMUM_LOWER_CASE = 6;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_MINIMUM_UPPER_CASE = 7;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_MINIMUM_SYMBOLS = 8;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_KEYGUARD_DISABLED_FEATURES = 9;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__LOCK_NOW = 10;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__WIPE_DATA_WITH_REASON = 11;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ADD_USER_RESTRICTION = 12;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__REMOVE_USER_RESTRICTION = 13;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_SECURE_SETTING = 14;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_SECURITY_LOGGING_ENABLED = 15;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RETRIEVE_SECURITY_LOGS = 16;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RETRIEVE_PRE_REBOOT_SECURITY_LOGS = 17;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PERMISSION_POLICY = 18;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PERMISSION_GRANT_STATE = 19;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__INSTALL_KEY_PAIR = 20;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__INSTALL_CA_CERT = 21;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CHOOSE_PRIVATE_KEY_ALIAS = 22;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__REMOVE_KEY_PAIR = 23;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__UNINSTALL_CA_CERTS = 24;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_CERT_INSTALLER_PACKAGE = 25;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_ALWAYS_ON_VPN_PACKAGE = 26;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PERMITTED_INPUT_METHODS = 27;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PERMITTED_ACCESSIBILITY_SERVICES = 28;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_SCREEN_CAPTURE_DISABLED = 29;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_CAMERA_DISABLED = 30;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__QUERY_SUMMARY_FOR_USER = 31;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__QUERY_SUMMARY = 32;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__QUERY_DETAILS = 33;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__REBOOT = 34;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_MASTER_VOLUME_MUTED = 35;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_AUTO_TIME_REQUIRED = 36;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_KEYGUARD_DISABLED = 37;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_STATUS_BAR_DISABLED = 38;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_ORGANIZATION_COLOR = 39;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PROFILE_NAME = 40;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_USER_ICON = 41;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_DEVICE_OWNER_LOCK_SCREEN_INFO = 42;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_SHORT_SUPPORT_MESSAGE = 43;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_LONG_SUPPORT_MESSAGE = 44;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_CROSS_PROFILE_CONTACTS_SEARCH_DISABLED = 45;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_CROSS_PROFILE_CALLER_ID_DISABLED = 46;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_BLUETOOTH_CONTACT_SHARING_DISABLED = 47;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ADD_CROSS_PROFILE_INTENT_FILTER = 48;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ADD_CROSS_PROFILE_WIDGET_PROVIDER = 49;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_SYSTEM_UPDATE_POLICY = 50;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_LOCKTASK_MODE_ENABLED = 51;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ADD_PERSISTENT_PREFERRED_ACTIVITY = 52;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__REQUEST_BUGREPORT = 53;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__GET_WIFI_MAC_ADDRESS = 54;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__REQUEST_QUIET_MODE_ENABLED = 55;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__WORK_PROFILE_LOCATION_CHANGED = 56;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__DO_USER_INFO_CLICKED = 57;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__TRANSFER_OWNERSHIP = 58;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__GENERATE_KEY_PAIR = 59;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_KEY_PAIR_CERTIFICATE = 60;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_KEEP_UNINSTALLED_PACKAGES = 61;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_APPLICATION_RESTRICTIONS = 62;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_APPLICATION_HIDDEN = 63;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ENABLE_SYSTEM_APP = 64;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ENABLE_SYSTEM_APP_WITH_INTENT = 65;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__INSTALL_EXISTING_PACKAGE = 66;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_UNINSTALL_BLOCKED = 67;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PACKAGES_SUSPENDED = 68;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ON_LOCK_TASK_MODE_ENTERING = 69;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_CROSS_PROFILE_CALENDAR_PACKAGES = 70;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__GET_USER_PASSWORD_COMPLEXITY_LEVEL = 72;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__INSTALL_SYSTEM_UPDATE = 73;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__INSTALL_SYSTEM_UPDATE_ERROR = 74;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__IS_MANAGED_KIOSK = 75;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__IS_UNATTENDED_MANAGED_KIOSK = 76;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_MANAGED_PROFILE_ON_FULLY_MANAGED_DEVICE = 77;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PERSISTENT_DEVICE_OWNER = 78;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ENTRY_POINT_NFC = 79;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ENTRY_POINT_QR_CODE = 80;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ENTRY_POINT_CLOUD_ENROLLMENT = 81;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ENTRY_POINT_ADB = 82;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ENTRY_POINT_TRUSTED_SOURCE = 83;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_DPC_PACKAGE_NAME = 84;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_DPC_INSTALLED_BY_PACKAGE = 85;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PROVISIONING_ACTIVITY_TIME_MS = 86;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PREPROVISIONING_ACTIVITY_TIME_MS = 87;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ENCRYPT_DEVICE_ACTIVITY_TIME_MS = 88;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_WEB_ACTIVITY_TIME_MS = 89;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_TRAMPOLINE_ACTIVITY_TIME_MS = 90;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_POST_ENCRYPTION_ACTIVITY_TIME_MS = 91;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_FINALIZATION_ACTIVITY_TIME_MS = 92;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_NETWORK_TYPE = 93;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ACTION = 94;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_EXTRAS = 95;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_COPY_ACCOUNT_TASK_MS = 96;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_CREATE_PROFILE_TASK_MS = 97;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_START_PROFILE_TASK_MS = 98;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_DOWNLOAD_PACKAGE_TASK_MS = 99;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_INSTALL_PACKAGE_TASK_MS = 100;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_CANCELLED = 101;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ERROR = 102;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_COPY_ACCOUNT_STATUS = 103;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_TOTAL_TASK_TIME_MS = 104;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_SESSION_STARTED = 105;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_SESSION_COMPLETED = 106;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_TERMS_ACTIVITY_TIME_MS = 107;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_TERMS_COUNT = 108;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_TERMS_READ = 109;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SEPARATE_PROFILE_CHALLENGE_CHANGED = 110;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_GLOBAL_SETTING = 111;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__INSTALL_PACKAGE = 112;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__UNINSTALL_PACKAGE = 113;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__WIFI_SERVICE_ADD_NETWORK_SUGGESTIONS = 114;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__WIFI_SERVICE_ADD_OR_UPDATE_NETWORK = 115;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__QUERY_SUMMARY_FOR_DEVICE = 116;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__REMOVE_CROSS_PROFILE_WIDGET_PROVIDER = 117;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ESTABLISH_VPN = 118;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_NETWORK_LOGGING_ENABLED = 119;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RETRIEVE_NETWORK_LOGS = 120;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PREPARE_TOTAL_TIME_MS = 121;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PREPARE_STARTED = 122;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PREPARE_COMPLETED = 123;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_FLOW_TYPE = 124;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_APPS_GET_TARGET_USER_PROFILES = 125;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_APPS_START_ACTIVITY_AS_USER = 126;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_AUTO_TIME = 127;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_AUTO_TIME_ZONE = 128;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_USER_CONTROL_DISABLED_PACKAGES = 129;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_FACTORY_RESET_PROTECTION = 130;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_COMMON_CRITERIA_MODE = 131;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ALLOW_MODIFICATION_OF_ADMIN_CONFIGURED_NETWORKS = 132;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_TIME = 133;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_TIME_ZONE = 134;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PERSONAL_APPS_SUSPENDED = 135;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_MANAGED_PROFILE_MAXIMUM_TIME_OFF = 136;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__COMP_TO_ORG_OWNED_PO_MIGRATED = 137;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_CROSS_PROFILE_PACKAGES = 138;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_INTERACT_ACROSS_PROFILES_APP_OP = 139;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__GET_CROSS_PROFILE_PACKAGES = 140;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CAN_REQUEST_INTERACT_ACROSS_PROFILES_TRUE = 141;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CAN_REQUEST_INTERACT_ACROSS_PROFILES_FALSE_NO_PROFILES = 142;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CAN_REQUEST_INTERACT_ACROSS_PROFILES_FALSE_WHITELIST = 143;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CAN_REQUEST_INTERACT_ACROSS_PROFILES_FALSE_PERMISSION = 144;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CAN_INTERACT_ACROSS_PROFILES_TRUE = 145;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CAN_INTERACT_ACROSS_PROFILES_FALSE_PERMISSION = 146;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CAN_INTERACT_ACROSS_PROFILES_FALSE_NO_PROFILES = 147;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREATE_CROSS_PROFILE_INTENT = 148;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__IS_MANAGED_PROFILE = 149;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__START_ACTIVITY_BY_INTENT = 150;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__BIND_CROSS_PROFILE_SERVICE = 151;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_DPC_SETUP_STARTED = 152;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_DPC_SETUP_COMPLETED = 153;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_ORGANIZATION_OWNED_MANAGED_PROFILE = 154;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESOLVER_CROSS_PROFILE_TARGET_OPENED = 155;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESOLVER_SWITCH_TABS = 156;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESOLVER_EMPTY_STATE_WORK_APPS_DISABLED = 157;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESOLVER_EMPTY_STATE_NO_SHARING_TO_PERSONAL = 158;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESOLVER_EMPTY_STATE_NO_SHARING_TO_WORK = 159;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESOLVER_EMPTY_STATE_NO_APPS_RESOLVED = 160;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESOLVER_AUTOLAUNCH_CROSS_PROFILE_TARGET = 161;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_LAUNCHED_FROM_APP = 162;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_LAUNCHED_FROM_SETTINGS = 163;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_ADMIN_RESTRICTED = 164;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_MISSING_WORK_APP = 165;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_MISSING_PERSONAL_APP = 166;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_MISSING_INSTALL_BANNER_INTENT = 167;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_INSTALL_BANNER_CLICKED = 168;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_INSTALL_BANNER_NO_INTENT_CLICKED = 169;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_USER_CONSENTED = 170;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_USER_DECLINED_CONSENT = 171;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CROSS_PROFILE_SETTINGS_PAGE_PERMISSION_REVOKED = 172;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__DOCSUI_EMPTY_STATE_NO_PERMISSION = 173;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__DOCSUI_EMPTY_STATE_QUIET_MODE = 174;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__DOCSUI_LAUNCH_OTHER_APP = 175;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__DOCSUI_PICK_RESULT = 176;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PASSWORD_COMPLEXITY = 177;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_REQUEST_NAME = 178;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_REQUEST_POLICY = 179;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_REQUEST_ACCEPTED = 180;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_REQUEST_DENIED = 181;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_REQUEST_FAILED = 182;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_CREDENTIAL_FOUND_IN_POLICY = 183;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_INSTALL_KEY_PAIR_FAILED = 184;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_GENERATE_KEY_PAIR_FAILED = 185;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_POLICY_LOOKUP_FAILED = 186;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__CREDENTIAL_MANAGEMENT_APP_REMOVED = 187;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_ORGANIZATION_ID = 188;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__IS_ACTIVE_PASSWORD_SUFFICIENT_FOR_DEVICE = 189;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_COPY_ACCOUNT_MS = 190;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_CREATE_PROFILE_MS = 191;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_START_PROFILE_MS = 192;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_COPY_ACCOUNT_STATUS = 193;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_ERROR = 194;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PROVISION_MANAGED_PROFILE_TASK_MS = 195;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_PROVISION_FULLY_MANAGED_DEVICE_TASK_MS = 196;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_PARAM = 197;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_USB_DATA_SIGNALING = 198;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__SET_PREFERENTIAL_NETWORK_SERVICE_ENABLED = 199;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_IS_LANDSCAPE = 200;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__PROVISIONING_IS_NIGHT_MODE = 201;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ADD_ACCOUNT = 202;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__ADD_ACCOUNT_EXPLICITLY = 203;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__GET_ACCOUNT_AUTH_TOKEN = 204;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESET_PASSWORD = 205;
    public static final int DEVICE_POLICY_EVENT__EVENT_ID__RESET_PASSWORD_WITH_TOKEN = 206;

    // Values for WifiEnabledStateChanged.state
    public static final int WIFI_ENABLED_STATE_CHANGED__STATE__OFF = 0;
    public static final int WIFI_ENABLED_STATE_CHANGED__STATE__ON = 1;

    // Values for WifiRunningStateChanged.state
    public static final int WIFI_RUNNING_STATE_CHANGED__STATE__OFF = 0;
    public static final int WIFI_RUNNING_STATE_CHANGED__STATE__ON = 1;

    // Values for AppCompacted.action
    public static final int APP_COMPACTED__ACTION__UNKNOWN = 0;
    public static final int APP_COMPACTED__ACTION__SOME = 1;
    public static final int APP_COMPACTED__ACTION__FULL = 2;
    public static final int APP_COMPACTED__ACTION__PERSISTENT = 3;
    public static final int APP_COMPACTED__ACTION__BFGS = 4;

    // Values for AppCompacted.last_action
    public static final int APP_COMPACTED__LAST_ACTION__UNKNOWN = 0;
    public static final int APP_COMPACTED__LAST_ACTION__SOME = 1;
    public static final int APP_COMPACTED__LAST_ACTION__FULL = 2;
    public static final int APP_COMPACTED__LAST_ACTION__PERSISTENT = 3;
    public static final int APP_COMPACTED__LAST_ACTION__BFGS = 4;

    // Values for AppCompacted.process_state
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_UNKNOWN_TO_PROTO = 998;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_UNKNOWN = 999;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_PERSISTENT = 1000;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_PERSISTENT_UI = 1001;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_TOP = 1002;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_FOREGROUND_SERVICE = 1003;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_BOUND_FOREGROUND_SERVICE = 1004;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_IMPORTANT_FOREGROUND = 1005;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_IMPORTANT_BACKGROUND = 1006;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_TRANSIENT_BACKGROUND = 1007;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_BACKUP = 1008;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_SERVICE = 1009;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_RECEIVER = 1010;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_TOP_SLEEPING = 1011;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_HEAVY_WEIGHT = 1012;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_HOME = 1013;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_LAST_ACTIVITY = 1014;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_CACHED_ACTIVITY = 1015;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_CACHED_ACTIVITY_CLIENT = 1016;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_CACHED_RECENT = 1017;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_CACHED_EMPTY = 1018;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_NONEXISTENT = 1019;
    public static final int APP_COMPACTED__PROCESS_STATE__PROCESS_STATE_BOUND_TOP = 1020;

    // Values for SignedConfigReported.type
    public static final int SIGNED_CONFIG_REPORTED__TYPE__UNKNOWN_TYPE = 0;
    public static final int SIGNED_CONFIG_REPORTED__TYPE__GLOBAL_SETTINGS = 1;

    // Values for SignedConfigReported.status
    public static final int SIGNED_CONFIG_REPORTED__STATUS__UNKNOWN_STATUS = 0;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__APPLIED = 1;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__BASE64_FAILURE_CONFIG = 2;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__BASE64_FAILURE_SIGNATURE = 3;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__SECURITY_EXCEPTION = 4;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__INVALID_CONFIG = 5;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__OLD_CONFIG = 6;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__SIGNATURE_CHECK_FAILED = 7;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__NOT_APPLICABLE = 8;
    public static final int SIGNED_CONFIG_REPORTED__STATUS__SIGNATURE_CHECK_FAILED_PROD_KEY_ABSENT = 9;

    // Values for SignedConfigReported.verified_with
    public static final int SIGNED_CONFIG_REPORTED__VERIFIED_WITH__NO_KEY = 0;
    public static final int SIGNED_CONFIG_REPORTED__VERIFIED_WITH__DEBUG = 1;
    public static final int SIGNED_CONFIG_REPORTED__VERIFIED_WITH__PRODUCTION = 2;

    // Values for GnssNiEventReported.event_type
    public static final int GNSS_NI_EVENT_REPORTED__EVENT_TYPE__UNKNOWN = 0;
    public static final int GNSS_NI_EVENT_REPORTED__EVENT_TYPE__NI_REQUEST = 1;
    public static final int GNSS_NI_EVENT_REPORTED__EVENT_TYPE__NI_RESPONSE = 2;

    // Values for GnssNiEventReported.ni_type
    public static final int GNSS_NI_EVENT_REPORTED__NI_TYPE__VOICE = 1;
    public static final int GNSS_NI_EVENT_REPORTED__NI_TYPE__UMTS_SUPL = 2;
    public static final int GNSS_NI_EVENT_REPORTED__NI_TYPE__UMTS_CTRL_PLANE = 3;
    public static final int GNSS_NI_EVENT_REPORTED__NI_TYPE__EMERGENCY_SUPL = 4;

    // Values for GnssNiEventReported.default_response
    public static final int GNSS_NI_EVENT_REPORTED__DEFAULT_RESPONSE__RESPONSE_ACCEPT = 1;
    public static final int GNSS_NI_EVENT_REPORTED__DEFAULT_RESPONSE__RESPONSE_DENY = 2;
    public static final int GNSS_NI_EVENT_REPORTED__DEFAULT_RESPONSE__RESPONSE_NORESP = 3;

    // Values for GnssNiEventReported.requestor_id_encoding
    public static final int GNSS_NI_EVENT_REPORTED__REQUESTOR_ID_ENCODING__ENC_UNKNOWN = -1;
    public static final int GNSS_NI_EVENT_REPORTED__REQUESTOR_ID_ENCODING__ENC_NONE = 0;
    public static final int GNSS_NI_EVENT_REPORTED__REQUESTOR_ID_ENCODING__ENC_SUPL_GSM_DEFAULT = 1;
    public static final int GNSS_NI_EVENT_REPORTED__REQUESTOR_ID_ENCODING__ENC_SUPL_UTF8 = 2;
    public static final int GNSS_NI_EVENT_REPORTED__REQUESTOR_ID_ENCODING__ENC_SUPL_UCS2 = 3;

    // Values for GnssNiEventReported.text_encoding
    public static final int GNSS_NI_EVENT_REPORTED__TEXT_ENCODING__ENC_UNKNOWN = -1;
    public static final int GNSS_NI_EVENT_REPORTED__TEXT_ENCODING__ENC_NONE = 0;
    public static final int GNSS_NI_EVENT_REPORTED__TEXT_ENCODING__ENC_SUPL_GSM_DEFAULT = 1;
    public static final int GNSS_NI_EVENT_REPORTED__TEXT_ENCODING__ENC_SUPL_UTF8 = 2;
    public static final int GNSS_NI_EVENT_REPORTED__TEXT_ENCODING__ENC_SUPL_UCS2 = 3;

    // Values for GnssNiEventReported.user_response
    public static final int GNSS_NI_EVENT_REPORTED__USER_RESPONSE__RESPONSE_ACCEPT = 1;
    public static final int GNSS_NI_EVENT_REPORTED__USER_RESPONSE__RESPONSE_DENY = 2;
    public static final int GNSS_NI_EVENT_REPORTED__USER_RESPONSE__RESPONSE_NORESP = 3;

    // Values for LowStorageStateChanged.state
    public static final int LOW_STORAGE_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int LOW_STORAGE_STATE_CHANGED__STATE__OFF = 1;
    public static final int LOW_STORAGE_STATE_CHANGED__STATE__ON = 2;

    // Values for GnssNfwNotificationReported.protocol_stack
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__PROTOCOL_STACK__CTRL_PLANE = 0;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__PROTOCOL_STACK__SUPL = 1;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__PROTOCOL_STACK__IMS = 10;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__PROTOCOL_STACK__SIM = 11;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__PROTOCOL_STACK__OTHER_PROTOCOL_STACK = 100;

    // Values for GnssNfwNotificationReported.requestor
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__REQUESTOR__CARRIER = 0;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__REQUESTOR__OEM = 10;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__REQUESTOR__MODEM_CHIPSET_VENDOR = 11;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__REQUESTOR__GNSS_CHIPSET_VENDOR = 12;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__REQUESTOR__OTHER_CHIPSET_VENDOR = 13;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__REQUESTOR__AUTOMOBILE_CLIENT = 20;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__REQUESTOR__OTHER_REQUESTOR = 100;

    // Values for GnssNfwNotificationReported.response_type
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__RESPONSE_TYPE__REJECTED = 0;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__RESPONSE_TYPE__ACCEPTED_NO_LOCATION_PROVIDED = 1;
    public static final int GNSS_NFW_NOTIFICATION_REPORTED__RESPONSE_TYPE__ACCEPTED_LOCATION_PROVIDED = 2;

    // Values for GnssConfigurationReported.supl_mode
    public static final int GNSS_CONFIGURATION_REPORTED__SUPL_MODE__MSB = 1;
    public static final int GNSS_CONFIGURATION_REPORTED__SUPL_MODE__MSA = 2;

    // Values for GnssConfigurationReported.lpp_profile
    public static final int GNSS_CONFIGURATION_REPORTED__LPP_PROFILE__USER_PLANE = 1;
    public static final int GNSS_CONFIGURATION_REPORTED__LPP_PROFILE__CONTROL_PLANE = 2;

    // Values for GnssConfigurationReported.a_glonass_pos_protocol_select
    public static final int GNSS_CONFIGURATION_REPORTED__A_GLONASS_POS_PROTOCOL_SELECT__RRC_CPLANE = 1;
    public static final int GNSS_CONFIGURATION_REPORTED__A_GLONASS_POS_PROTOCOL_SELECT__RRLP_CPLANE = 2;
    public static final int GNSS_CONFIGURATION_REPORTED__A_GLONASS_POS_PROTOCOL_SELECT__LPP_UPLANE = 4;

    // Values for GnssConfigurationReported.gps_lock
    public static final int GNSS_CONFIGURATION_REPORTED__GPS_LOCK__MO = 1;
    public static final int GNSS_CONFIGURATION_REPORTED__GPS_LOCK__NI = 2;

    // Values for AttentionManagerServiceResultReported.attention_check_result
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__ATTENTION_SUCCESS_ABSENT = 0;
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__ATTENTION_SUCCESS_PRESENT = 1;
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__ATTENTION_FAILURE_UNKNOWN = 2;
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__ATTENTION_FAILURE_CANCELLED = 3;
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__ATTENTION_FAILURE_PREEMPTED = 4;
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__ATTENTION_FAILURE_TIMED_OUT = 5;
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__ATTENTION_FAILURE_CAMERA_PERMISSION_ABSENT = 6;
    public static final int ATTENTION_MANAGER_SERVICE_RESULT_REPORTED__ATTENTION_CHECK_RESULT__UNKNOWN = 20;

    // Values for AdbConnectionChanged.state
    public static final int ADB_CONNECTION_CHANGED__STATE__UNKNOWN = 0;
    public static final int ADB_CONNECTION_CHANGED__STATE__AWAITING_USER_APPROVAL = 1;
    public static final int ADB_CONNECTION_CHANGED__STATE__USER_ALLOWED = 2;
    public static final int ADB_CONNECTION_CHANGED__STATE__USER_DENIED = 3;
    public static final int ADB_CONNECTION_CHANGED__STATE__AUTOMATICALLY_ALLOWED = 4;
    public static final int ADB_CONNECTION_CHANGED__STATE__DENIED_INVALID_KEY = 5;
    public static final int ADB_CONNECTION_CHANGED__STATE__DENIED_VOLD_DECRYPT = 6;
    public static final int ADB_CONNECTION_CHANGED__STATE__DISCONNECTED = 7;

    // Values for UsbContaminantReported.status
    public static final int USB_CONTAMINANT_REPORTED__STATUS__CONTAMINANT_STATUS_UNKNOWN = 0;
    public static final int USB_CONTAMINANT_REPORTED__STATUS__CONTAMINANT_STATUS_NOT_SUPPORTED = 1;
    public static final int USB_CONTAMINANT_REPORTED__STATUS__CONTAMINANT_STATUS_DISABLED = 2;
    public static final int USB_CONTAMINANT_REPORTED__STATUS__CONTAMINANT_STATUS_NOT_DETECTED = 3;
    public static final int USB_CONTAMINANT_REPORTED__STATUS__CONTAMINANT_STATUS_DETECTED = 4;

    // Values for WatchdogRollbackOccurred.rollback_type
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__UNKNOWN = 0;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_INITIATE = 1;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_SUCCESS = 2;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_FAILURE = 3;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_BOOT_TRIGGERED = 4;

    // Values for WatchdogRollbackOccurred.rollback_reason
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_UNKNOWN = 0;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_NATIVE_CRASH = 1;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_EXPLICIT_HEALTH_CHECK = 2;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_APP_CRASH = 3;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_APP_NOT_RESPONDING = 4;
    public static final int WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_NATIVE_CRASH_DURING_BOOT = 5;

    // Values for BiometricSystemHealthIssueDetected.modality
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__MODALITY__MODALITY_UNKNOWN = 0;
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__MODALITY__MODALITY_FINGERPRINT = 1;
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__MODALITY__MODALITY_IRIS = 2;
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__MODALITY__MODALITY_FACE = 4;

    // Values for BiometricSystemHealthIssueDetected.issue
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__ISSUE__ISSUE_UNKNOWN = 0;
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__ISSUE__ISSUE_HAL_DEATH = 1;
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__ISSUE__ISSUE_UNKNOWN_TEMPLATE_ENROLLED_FRAMEWORK = 2;
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__ISSUE__ISSUE_UNKNOWN_TEMPLATE_ENROLLED_HAL = 3;
    public static final int BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED__ISSUE__ISSUE_CANCEL_TIMED_OUT = 4;

    // Values for BubbleUIChanged.action
    public static final int BUBBLE_UICHANGED__ACTION__UNKNOWN = 0;
    public static final int BUBBLE_UICHANGED__ACTION__POSTED = 1;
    public static final int BUBBLE_UICHANGED__ACTION__UPDATED = 2;
    public static final int BUBBLE_UICHANGED__ACTION__EXPANDED = 3;
    public static final int BUBBLE_UICHANGED__ACTION__COLLAPSED = 4;
    public static final int BUBBLE_UICHANGED__ACTION__DISMISSED = 5;
    public static final int BUBBLE_UICHANGED__ACTION__STACK_DISMISSED = 6;
    public static final int BUBBLE_UICHANGED__ACTION__STACK_MOVED = 7;
    public static final int BUBBLE_UICHANGED__ACTION__HEADER_GO_TO_APP = 8;
    public static final int BUBBLE_UICHANGED__ACTION__HEADER_GO_TO_SETTINGS = 9;
    public static final int BUBBLE_UICHANGED__ACTION__PERMISSION_OPT_IN = 10;
    public static final int BUBBLE_UICHANGED__ACTION__PERMISSION_OPT_OUT = 11;
    public static final int BUBBLE_UICHANGED__ACTION__PERMISSION_DIALOG_SHOWN = 12;
    public static final int BUBBLE_UICHANGED__ACTION__SWIPE_LEFT = 13;
    public static final int BUBBLE_UICHANGED__ACTION__SWIPE_RIGHT = 14;
    public static final int BUBBLE_UICHANGED__ACTION__STACK_EXPANDED = 15;
    public static final int BUBBLE_UICHANGED__ACTION__FLYOUT = 16;

    // Values for ScheduledJobConstraintChanged.constraint
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_UNKNOWN = 0;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_CHARGING = 1;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_BATTERY_NOT_LOW = 2;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_STORAGE_NOT_LOW = 3;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_TIMING_DELAY = 4;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_DEADLINE = 5;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_IDLE = 6;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_CONNECTIVITY = 7;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_CONTENT_TRIGGER = 8;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_DEVICE_NOT_DOZING = 9;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_WITHIN_QUOTA = 10;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_BACKGROUND_NOT_RESTRICTED = 11;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__CONSTRAINT__CONSTRAINT_WITHIN_EXPEDITED_JOB_QUOTA = 12;

    // Values for ScheduledJobConstraintChanged.state
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__STATE__UNKNOWN = 0;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__STATE__UNSATISFIED = 1;
    public static final int SCHEDULED_JOB_CONSTRAINT_CHANGED__STATE__SATISFIED = 2;

    // Values for ProcessStartTime.type
    public static final int PROCESS_START_TIME__TYPE__UNKNOWN = 0;
    public static final int PROCESS_START_TIME__TYPE__WARM = 1;
    public static final int PROCESS_START_TIME__TYPE__HOT = 2;
    public static final int PROCESS_START_TIME__TYPE__COLD = 3;

    // Values for BubbleDeveloperErrorReported.error
    public static final int BUBBLE_DEVELOPER_ERROR_REPORTED__ERROR__UNKNOWN = 0;
    public static final int BUBBLE_DEVELOPER_ERROR_REPORTED__ERROR__ACTIVITY_INFO_MISSING = 1;
    public static final int BUBBLE_DEVELOPER_ERROR_REPORTED__ERROR__ACTIVITY_INFO_NOT_RESIZABLE = 2;
    public static final int BUBBLE_DEVELOPER_ERROR_REPORTED__ERROR__DOCUMENT_LAUNCH_NOT_ALWAYS = 3;

    // Values for TouchGestureClassified.classification
    public static final int TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__UNKNOWN_CLASSIFICATION = 0;
    public static final int TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__SINGLE_TAP = 1;
    public static final int TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__DOUBLE_TAP = 2;
    public static final int TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS = 3;
    public static final int TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__DEEP_PRESS = 4;
    public static final int TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__SCROLL = 5;

    // Values for HiddenApiUsed.access_method
    public static final int HIDDEN_API_USED__ACCESS_METHOD__NONE = 0;
    public static final int HIDDEN_API_USED__ACCESS_METHOD__REFLECTION = 1;
    public static final int HIDDEN_API_USED__ACCESS_METHOD__JNI = 2;
    public static final int HIDDEN_API_USED__ACCESS_METHOD__LINKING = 3;

    // Values for AppInstallOnExternalStorageReported.storage_type
    public static final int APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED__STORAGE_TYPE__UNKNOWN = 0;
    public static final int APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED__STORAGE_TYPE__SD_CARD = 1;
    public static final int APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED__STORAGE_TYPE__USB = 2;
    public static final int APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED__STORAGE_TYPE__OTHER = 3;

    // Values for AppMovedStorageReported.external_storage_type
    public static final int APP_MOVED_STORAGE_REPORTED__EXTERNAL_STORAGE_TYPE__UNKNOWN = 0;
    public static final int APP_MOVED_STORAGE_REPORTED__EXTERNAL_STORAGE_TYPE__SD_CARD = 1;
    public static final int APP_MOVED_STORAGE_REPORTED__EXTERNAL_STORAGE_TYPE__USB = 2;
    public static final int APP_MOVED_STORAGE_REPORTED__EXTERNAL_STORAGE_TYPE__OTHER = 3;

    // Values for AppMovedStorageReported.move_type
    public static final int APP_MOVED_STORAGE_REPORTED__MOVE_TYPE__UNKNOWN = 0;
    public static final int APP_MOVED_STORAGE_REPORTED__MOVE_TYPE__TO_EXTERNAL = 1;
    public static final int APP_MOVED_STORAGE_REPORTED__MOVE_TYPE__TO_INTERNAL = 2;

    // Values for BiometricEnrolled.modality
    public static final int BIOMETRIC_ENROLLED__MODALITY__MODALITY_UNKNOWN = 0;
    public static final int BIOMETRIC_ENROLLED__MODALITY__MODALITY_FINGERPRINT = 1;
    public static final int BIOMETRIC_ENROLLED__MODALITY__MODALITY_IRIS = 2;
    public static final int BIOMETRIC_ENROLLED__MODALITY__MODALITY_FACE = 4;

    // Values for ThermalThrottlingSeverityStateChanged.sensor_type
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_UNKNOWN = -1;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_CPU = 0;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_GPU = 1;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_BATTERY = 2;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_SKIN = 3;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_USB_PORT = 4;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_POWER_AMPLIFIER = 5;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_BCL_VOLTAGE = 6;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_BCL_CURRENT = 7;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_BCL_PERCENTAGE = 8;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SENSOR_TYPE__TEMPERATURE_TYPE_NPU = 9;

    // Values for ThermalThrottlingSeverityStateChanged.severity
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SEVERITY__NONE = 0;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SEVERITY__LIGHT = 1;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SEVERITY__MODERATE = 2;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SEVERITY__SEVERE = 3;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SEVERITY__CRITICAL = 4;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SEVERITY__EMERGENCY = 5;
    public static final int THERMAL_THROTTLING_SEVERITY_STATE_CHANGED__SEVERITY__SHUTDOWN = 6;

    // Values for ContentCaptureServiceEvents.event
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__UNKNOWN = 0;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__ON_CONNECTED = 1;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__ON_DISCONNECTED = 2;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__SET_WHITELIST = 3;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__SET_DISABLED = 4;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__ON_USER_DATA_REMOVED = 5;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__ON_DATA_SHARE_REQUEST = 6;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__ACCEPT_DATA_SHARE_REQUEST = 7;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__REJECT_DATA_SHARE_REQUEST = 8;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__DATA_SHARE_WRITE_FINISHED = 9;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__DATA_SHARE_ERROR_IOEXCEPTION = 10;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__DATA_SHARE_ERROR_EMPTY_DATA = 11;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__DATA_SHARE_ERROR_CLIENT_PIPE_FAIL = 12;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__DATA_SHARE_ERROR_SERVICE_PIPE_FAIL = 13;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__DATA_SHARE_ERROR_CONCURRENT_REQUEST = 14;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED = 15;
    public static final int CONTENT_CAPTURE_SERVICE_EVENTS__EVENT__ON_REMOTE_SERVICE_DIED = 16;

    // Values for ContentCaptureSessionEvents.event
    public static final int CONTENT_CAPTURE_SESSION_EVENTS__EVENT__UNKNOWN = 0;
    public static final int CONTENT_CAPTURE_SESSION_EVENTS__EVENT__ON_SESSION_STARTED = 1;
    public static final int CONTENT_CAPTURE_SESSION_EVENTS__EVENT__ON_SESSION_FINISHED = 2;
    public static final int CONTENT_CAPTURE_SESSION_EVENTS__EVENT__SESSION_NOT_CREATED = 3;

    // Values for LocationManagerApiUsageReported.state
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__STATE__USAGE_STARTED = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__STATE__USAGE_ENDED = 1;

    // Values for LocationManagerApiUsageReported.api_in_use
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__API_IN_USE__API_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__API_IN_USE__API_REQUEST_LOCATION_UPDATES = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__API_IN_USE__API_ADD_GNSS_MEASUREMENTS_LISTENER = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__API_IN_USE__API_REGISTER_GNSS_STATUS_CALLBACK = 3;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__API_IN_USE__API_REQUEST_GEOFENCE = 4;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__API_IN_USE__API_SEND_EXTRA_COMMAND = 5;

    // Values for LocationManagerApiUsageReported.provider
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__PROVIDER__PROVIDER_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__PROVIDER__PROVIDER_NETWORK = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__PROVIDER__PROVIDER_GPS = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__PROVIDER__PROVIDER_PASSIVE = 3;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__PROVIDER__PROVIDER_FUSED = 4;

    // Values for LocationManagerApiUsageReported.quality
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__QUALITY__QUALITY_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__QUALITY__ACCURACY_FINE = 100;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__QUALITY__ACCURACY_BLOCK = 102;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__QUALITY__ACCURACY_CITY = 104;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__QUALITY__POWER_NONE = 200;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__QUALITY__POWER_LOW = 201;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__QUALITY__POWER_HIGH = 203;

    // Values for LocationManagerApiUsageReported.bucketized_interval
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_INTERVAL__INTERVAL_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_INTERVAL__INTERVAL_BETWEEN_0_SEC_AND_1_SEC = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_INTERVAL__INTERVAL_BETWEEN_1_SEC_AND_5_SEC = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_INTERVAL__INTERVAL_BETWEEN_5_SEC_AND_1_MIN = 3;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_INTERVAL__INTERVAL_BETWEEN_1_MIN_AND_10_MIN = 4;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_INTERVAL__INTERVAL_BETWEEN_10_MIN_AND_1_HOUR = 5;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_INTERVAL__INTERVAL_LARGER_THAN_1_HOUR = 6;

    // Values for LocationManagerApiUsageReported.bucketized_smallest_displacement
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_SMALLEST_DISPLACEMENT__DISTANCE_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_SMALLEST_DISPLACEMENT__DISTANCE_ZERO = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_SMALLEST_DISPLACEMENT__DISTANCE_BETWEEN_0_AND_100 = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_SMALLEST_DISPLACEMENT__DISTANCE_LARGER_THAN_100 = 3;

    // Values for LocationManagerApiUsageReported.bucketized_expire_in
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_EXPIRE_IN__EXPIRATION_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_EXPIRE_IN__EXPIRATION_BETWEEN_0_AND_20_SEC = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_EXPIRE_IN__EXPIRATION_BETWEEN_20_SEC_AND_1_MIN = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_EXPIRE_IN__EXPIRATION_BETWEEN_1_MIN_AND_10_MIN = 3;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_EXPIRE_IN__EXPIRATION_BETWEEN_10_MIN_AND_1_HOUR = 4;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_EXPIRE_IN__EXPIRATION_LARGER_THAN_1_HOUR = 5;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_EXPIRE_IN__EXPIRATION_NO_EXPIRY = 6;

    // Values for LocationManagerApiUsageReported.callback_type
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__CALLBACK_TYPE__CALLBACK_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__CALLBACK_TYPE__CALLBACK_NOT_APPLICABLE = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__CALLBACK_TYPE__CALLBACK_LISTENER = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__CALLBACK_TYPE__CALLBACK_PENDING_INTENT = 3;

    // Values for LocationManagerApiUsageReported.bucketized_radius
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_BETWEEN_0_AND_100 = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_BETWEEN_100_AND_200 = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_BETWEEN_200_AND_300 = 3;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_BETWEEN_300_AND_1000 = 4;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_BETWEEN_1000_AND_10000 = 5;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_LARGER_THAN_100000 = 6;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__BUCKETIZED_RADIUS__RADIUS_NEGATIVE = 7;

    // Values for LocationManagerApiUsageReported.activiy_importance
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__ACTIVIY_IMPORTANCE__IMPORTANCE_UNKNOWN = 0;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__ACTIVIY_IMPORTANCE__IMPORTANCE_TOP = 1;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__ACTIVIY_IMPORTANCE__IMPORTANCE_FORGROUND_SERVICE = 2;
    public static final int LOCATION_MANAGER_API_USAGE_REPORTED__ACTIVIY_IMPORTANCE__IMPORTANCE_BACKGROUND = 3;

    // Values for ExclusionRectStateChanged.x_location
    public static final int EXCLUSION_RECT_STATE_CHANGED__X_LOCATION__DEFAULT_LOCATION = 0;
    public static final int EXCLUSION_RECT_STATE_CHANGED__X_LOCATION__LEFT = 1;
    public static final int EXCLUSION_RECT_STATE_CHANGED__X_LOCATION__RIGHT = 2;

    // Values for CameraActionEvent.facing
    public static final int CAMERA_ACTION_EVENT__FACING__UNKNOWN = 0;
    public static final int CAMERA_ACTION_EVENT__FACING__BACK = 1;
    public static final int CAMERA_ACTION_EVENT__FACING__FRONT = 2;
    public static final int CAMERA_ACTION_EVENT__FACING__EXTERNAL = 3;

    // Values for CameraActionEvent.action
    public static final int CAMERA_ACTION_EVENT__ACTION__UNKNOWN_ACTION = 0;
    public static final int CAMERA_ACTION_EVENT__ACTION__OPEN = 1;
    public static final int CAMERA_ACTION_EVENT__ACTION__CLOSE = 2;
    public static final int CAMERA_ACTION_EVENT__ACTION__SESSION = 3;

    // Values for AppCompatibilityChangeReported.state
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED__STATE__UNKNOWN_STATE = 0;
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED__STATE__ENABLED = 1;
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED__STATE__DISABLED = 2;
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED__STATE__LOGGED = 3;

    // Values for AppCompatibilityChangeReported.source
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED__SOURCE__UNKNOWN_SOURCE = 0;
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED__SOURCE__APP_PROCESS = 1;
    public static final int APP_COMPATIBILITY_CHANGE_REPORTED__SOURCE__SYSTEM_SERVER = 2;

    // Values for RebootEscrowRecoveryReported.type
    public static final int REBOOT_ESCROW_RECOVERY_REPORTED__TYPE__UNKNOWN = 0;
    public static final int REBOOT_ESCROW_RECOVERY_REPORTED__TYPE__HAL = 1;
    public static final int REBOOT_ESCROW_RECOVERY_REPORTED__TYPE__SERVER_BASED = 2;

    // Values for RebootEscrowRecoveryReported.vbmeta_digest_status
    public static final int REBOOT_ESCROW_RECOVERY_REPORTED__VBMETA_DIGEST_STATUS__MATCH_EXPECTED_SLOT = 0;
    public static final int REBOOT_ESCROW_RECOVERY_REPORTED__VBMETA_DIGEST_STATUS__MATCH_FALLBACK_SLOT = 1;
    public static final int REBOOT_ESCROW_RECOVERY_REPORTED__VBMETA_DIGEST_STATUS__MISMATCH = 2;

    // Values for BootTimeEventDuration.event
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__UNKNOWN = 0;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__ABSOLUTE_BOOT_TIME = 1;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__BOOTLOADER_FIRST_STAGE_EXEC = 2;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__BOOTLOADER_FIRST_STAGE_LOAD = 3;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__BOOTLOADER_KERNEL_LOAD = 4;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__BOOTLOADER_SECOND_STAGE_EXEC = 5;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__BOOTLOADER_SECOND_STAGE_LOAD = 6;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__BOOTLOADER_UI_WAIT = 7;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__BOOTLOADER_TOTAL = 8;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__SHUTDOWN_DURATION = 9;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__MOUNT_DEFAULT_DURATION = 10;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__MOUNT_EARLY_DURATION = 11;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__MOUNT_LATE_DURATION = 12;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__OTA_PACKAGE_MANAGER_INIT_TIME = 13;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__OTA_PACKAGE_MANAGER_DATA_APP_AVG_SCAN_TIME = 14;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__OTA_PACKAGE_MANAGER_SYSTEM_APP_AVG_SCAN_TIME = 15;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__COLDBOOT_WAIT = 16;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__SELINUX_INIT = 17;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__FACTORY_RESET_TIME_SINCE_RESET = 18;
    public static final int BOOT_TIME_EVENT_DURATION__EVENT__ANDROID_INIT_STAGE_1 = 19;

    // Values for BootTimeEventElapsedTime.event
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__UNKNOWN = 0;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__ANDROID_INIT_STAGE_1 = 1;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__BOOT_COMPLETE = 2;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__BOOT_COMPLETE_ENCRYPTION = 3;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__BOOT_COMPLETE_NO_ENCRYPTION = 4;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__BOOT_COMPLETE_POST_DECRYPT = 5;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__FACTORY_RESET_BOOT_COMPLETE = 6;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__FACTORY_RESET_BOOT_COMPLETE_NO_ENCRYPTION = 7;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__FACTORY_RESET_BOOT_COMPLETE_POST_DECRYPT = 8;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__OTA_BOOT_COMPLETE = 9;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__OTA_BOOT_COMPLETE_NO_ENCRYPTION = 10;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__OTA_BOOT_COMPLETE_POST_DECRYPT = 11;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__FRAMEWORK_LOCKED_BOOT_COMPLETED = 12;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__FRAMEWORK_BOOT_COMPLETED = 13;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__PACKAGE_MANAGER_INIT_START = 14;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__PACKAGE_MANAGER_INIT_READY = 15;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__POST_DECRYPT = 16;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__ZYGOTE_INIT_START = 17;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__SECONDARY_ZYGOTE_INIT_START = 18;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__SYSTEM_SERVER_INIT_START = 19;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__SYSTEM_SERVER_READY = 20;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__LAUNCHER_START = 21;
    public static final int BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__LAUNCHER_SHOWN = 22;

    // Values for BootTimeEventErrorCode.event
    public static final int BOOT_TIME_EVENT_ERROR_CODE__EVENT__UNKNOWN = 0;
    public static final int BOOT_TIME_EVENT_ERROR_CODE__EVENT__FACTORY_RESET_CURRENT_TIME_FAILURE = 1;
    public static final int BOOT_TIME_EVENT_ERROR_CODE__EVENT__SHUTDOWN_UMOUNT_STAT = 2;
    public static final int BOOT_TIME_EVENT_ERROR_CODE__EVENT__FS_MGR_FS_STAT_DATA_PARTITION = 3;

    // Values for UserspaceRebootReported.outcome
    public static final int USERSPACE_REBOOT_REPORTED__OUTCOME__OUTCOME_UNKNOWN = 0;
    public static final int USERSPACE_REBOOT_REPORTED__OUTCOME__SUCCESS = 1;
    public static final int USERSPACE_REBOOT_REPORTED__OUTCOME__FAILED_SHUTDOWN_SEQUENCE_ABORTED = 2;
    public static final int USERSPACE_REBOOT_REPORTED__OUTCOME__FAILED_USERDATA_REMOUNT = 3;
    public static final int USERSPACE_REBOOT_REPORTED__OUTCOME__FAILED_USERSPACE_REBOOT_WATCHDOG_TRIGGERED = 4;

    // Values for UserspaceRebootReported.user_encryption_state
    public static final int USERSPACE_REBOOT_REPORTED__USER_ENCRYPTION_STATE__USER_ENCRYPTION_STATE_UNKNOWN = 0;
    public static final int USERSPACE_REBOOT_REPORTED__USER_ENCRYPTION_STATE__UNLOCKED = 1;
    public static final int USERSPACE_REBOOT_REPORTED__USER_ENCRYPTION_STATE__LOCKED = 2;

    // Values for NotificationReported.importance
    public static final int NOTIFICATION_REPORTED__IMPORTANCE__IMPORTANCE_UNSPECIFIED = -1000;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE__IMPORTANCE_NONE = 0;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE__IMPORTANCE_MIN = 1;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE__IMPORTANCE_LOW = 2;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE__IMPORTANCE_DEFAULT = 3;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE__IMPORTANCE_HIGH = 4;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE__IMPORTANCE_IMPORTANT_CONVERSATION = 5;

    // Values for NotificationReported.importance_source
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_SOURCE__IMPORTANCE_EXPLANATION_UNKNOWN = 0;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_SOURCE__IMPORTANCE_EXPLANATION_APP = 1;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_SOURCE__IMPORTANCE_EXPLANATION_USER = 2;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_SOURCE__IMPORTANCE_EXPLANATION_ASST = 3;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_SOURCE__IMPORTANCE_EXPLANATION_SYSTEM = 4;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_SOURCE__IMPORTANCE_EXPLANATION_APP_PRE_CHANNELS = 5;

    // Values for NotificationReported.importance_initial
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL__IMPORTANCE_UNSPECIFIED = -1000;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL__IMPORTANCE_NONE = 0;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL__IMPORTANCE_MIN = 1;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL__IMPORTANCE_LOW = 2;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL__IMPORTANCE_DEFAULT = 3;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL__IMPORTANCE_HIGH = 4;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL__IMPORTANCE_IMPORTANT_CONVERSATION = 5;

    // Values for NotificationReported.importance_initial_source
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL_SOURCE__IMPORTANCE_EXPLANATION_UNKNOWN = 0;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL_SOURCE__IMPORTANCE_EXPLANATION_APP = 1;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL_SOURCE__IMPORTANCE_EXPLANATION_USER = 2;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL_SOURCE__IMPORTANCE_EXPLANATION_ASST = 3;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL_SOURCE__IMPORTANCE_EXPLANATION_SYSTEM = 4;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_INITIAL_SOURCE__IMPORTANCE_EXPLANATION_APP_PRE_CHANNELS = 5;

    // Values for NotificationReported.importance_asst
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_ASST__IMPORTANCE_UNSPECIFIED = -1000;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_ASST__IMPORTANCE_NONE = 0;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_ASST__IMPORTANCE_MIN = 1;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_ASST__IMPORTANCE_LOW = 2;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_ASST__IMPORTANCE_DEFAULT = 3;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_ASST__IMPORTANCE_HIGH = 4;
    public static final int NOTIFICATION_REPORTED__IMPORTANCE_ASST__IMPORTANCE_IMPORTANT_CONVERSATION = 5;

    // Values for NotificationChannelModified.old_importance
    public static final int NOTIFICATION_CHANNEL_MODIFIED__OLD_IMPORTANCE__IMPORTANCE_UNSPECIFIED = -1000;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__OLD_IMPORTANCE__IMPORTANCE_NONE = 0;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__OLD_IMPORTANCE__IMPORTANCE_MIN = 1;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__OLD_IMPORTANCE__IMPORTANCE_LOW = 2;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__OLD_IMPORTANCE__IMPORTANCE_DEFAULT = 3;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__OLD_IMPORTANCE__IMPORTANCE_HIGH = 4;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__OLD_IMPORTANCE__IMPORTANCE_IMPORTANT_CONVERSATION = 5;

    // Values for NotificationChannelModified.importance
    public static final int NOTIFICATION_CHANNEL_MODIFIED__IMPORTANCE__IMPORTANCE_UNSPECIFIED = -1000;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__IMPORTANCE__IMPORTANCE_NONE = 0;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__IMPORTANCE__IMPORTANCE_MIN = 1;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__IMPORTANCE__IMPORTANCE_LOW = 2;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__IMPORTANCE__IMPORTANCE_DEFAULT = 3;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__IMPORTANCE__IMPORTANCE_HIGH = 4;
    public static final int NOTIFICATION_CHANNEL_MODIFIED__IMPORTANCE__IMPORTANCE_IMPORTANT_CONVERSATION = 5;

    // Values for IntegrityCheckResultReported.response
    public static final int INTEGRITY_CHECK_RESULT_REPORTED__RESPONSE__UNKNOWN = 0;
    public static final int INTEGRITY_CHECK_RESULT_REPORTED__RESPONSE__ALLOWED = 1;
    public static final int INTEGRITY_CHECK_RESULT_REPORTED__RESPONSE__REJECTED = 2;
    public static final int INTEGRITY_CHECK_RESULT_REPORTED__RESPONSE__FORCE_ALLOWED = 3;

    // Values for AppFreezeChanged.action
    public static final int APP_FREEZE_CHANGED__ACTION__UNKNOWN = 0;
    public static final int APP_FREEZE_CHANGED__ACTION__FREEZE_APP = 1;
    public static final int APP_FREEZE_CHANGED__ACTION__UNFREEZE_APP = 2;

    // Values for ForegroundServiceAppOpSessionEnded.app_op_name
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_NONE = -1;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_COARSE_LOCATION = 0;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_FINE_LOCATION = 1;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_GPS = 2;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_VIBRATE = 3;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_CONTACTS = 4;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_CONTACTS = 5;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_CALL_LOG = 6;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_CALL_LOG = 7;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_CALENDAR = 8;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_CALENDAR = 9;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WIFI_SCAN = 10;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_POST_NOTIFICATION = 11;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_NEIGHBORING_CELLS = 12;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_CALL_PHONE = 13;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_SMS = 14;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_SMS = 15;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECEIVE_SMS = 16;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECEIVE_EMERGENCY_SMS = 17;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECEIVE_MMS = 18;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECEIVE_WAP_PUSH = 19;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_SEND_SMS = 20;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_ICC_SMS = 21;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_ICC_SMS = 22;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_SETTINGS = 23;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_SYSTEM_ALERT_WINDOW = 24;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACCESS_NOTIFICATIONS = 25;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_CAMERA = 26;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECORD_AUDIO = 27;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_PLAY_AUDIO = 28;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_CLIPBOARD = 29;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_CLIPBOARD = 30;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_TAKE_MEDIA_BUTTONS = 31;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_TAKE_AUDIO_FOCUS = 32;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_MASTER_VOLUME = 33;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_VOICE_VOLUME = 34;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_RING_VOLUME = 35;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_MEDIA_VOLUME = 36;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_ALARM_VOLUME = 37;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_NOTIFICATION_VOLUME = 38;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_BLUETOOTH_VOLUME = 39;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WAKE_LOCK = 40;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MONITOR_LOCATION = 41;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MONITOR_HIGH_POWER_LOCATION = 42;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_GET_USAGE_STATS = 43;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MUTE_MICROPHONE = 44;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_TOAST_WINDOW = 45;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_PROJECT_MEDIA = 46;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACTIVATE_VPN = 47;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_WALLPAPER = 48;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ASSIST_STRUCTURE = 49;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ASSIST_SCREENSHOT = 50;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_PHONE_STATE = 51;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ADD_VOICEMAIL = 52;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_USE_SIP = 53;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_PROCESS_OUTGOING_CALLS = 54;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_USE_FINGERPRINT = 55;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_BODY_SENSORS = 56;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_CELL_BROADCASTS = 57;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MOCK_LOCATION = 58;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_EXTERNAL_STORAGE = 59;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_EXTERNAL_STORAGE = 60;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_TURN_SCREEN_ON = 61;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_GET_ACCOUNTS = 62;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RUN_IN_BACKGROUND = 63;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUDIO_ACCESSIBILITY_VOLUME = 64;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_PHONE_NUMBERS = 65;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_REQUEST_INSTALL_PACKAGES = 66;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_PICTURE_IN_PICTURE = 67;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_INSTANT_APP_START_FOREGROUND = 68;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ANSWER_PHONE_CALLS = 69;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RUN_ANY_IN_BACKGROUND = 70;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_CHANGE_WIFI_STATE = 71;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_REQUEST_DELETE_PACKAGES = 72;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_BIND_ACCESSIBILITY_SERVICE = 73;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACCEPT_HANDOVER = 74;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MANAGE_IPSEC_TUNNELS = 75;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_START_FOREGROUND = 76;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_BLUETOOTH_SCAN = 77;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_USE_BIOMETRIC = 78;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACTIVITY_RECOGNITION = 79;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_SMS_FINANCIAL_TRANSACTIONS = 80;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_MEDIA_AUDIO = 81;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_MEDIA_AUDIO = 82;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_MEDIA_VIDEO = 83;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_MEDIA_VIDEO = 84;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_MEDIA_IMAGES = 85;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_WRITE_MEDIA_IMAGES = 86;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_LEGACY_STORAGE = 87;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACCESS_ACCESSIBILITY = 88;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_READ_DEVICE_IDENTIFIERS = 89;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACCESS_MEDIA_LOCATION = 90;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_QUERY_ALL_PACKAGES = 91;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MANAGE_EXTERNAL_STORAGE = 92;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_INTERACT_ACROSS_PROFILES = 93;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACTIVATE_PLATFORM_VPN = 94;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_LOADER_USAGE_STATS = 95;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_DEPRECATED_1 = 96;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED = 97;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_AUTO_REVOKE_MANAGED_BY_INSTALLER = 98;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_NO_ISOLATED_STORAGE = 99;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_PHONE_CALL_MICROPHONE = 100;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_PHONE_CALL_CAMERA = 101;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECORD_AUDIO_HOTWORD = 102;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MANAGE_ONGOING_CALLS = 103;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MANAGE_CREDENTIALS = 104;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER = 105;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECORD_AUDIO_OUTPUT = 106;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_SCHEDULE_EXACT_ALARM = 107;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_FINE_LOCATION_SOURCE = 108;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_COARSE_LOCATION_SOURCE = 109;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_MANAGE_MEDIA = 110;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_BLUETOOTH_CONNECT = 111;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_UWB_RANGING = 112;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_ACTIVITY_RECOGNITION_SOURCE = 113;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_BLUETOOTH_ADVERTISE = 114;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_NAME__APP_OP_RECORD_INCOMING_PHONE_AUDIO = 115;

    // Values for ForegroundServiceAppOpSessionEnded.app_op_mode
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_MODE__MODE_UNKNOWN = 0;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_MODE__MODE_ALLOWED = 1;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_MODE__MODE_IGNORED = 2;
    public static final int FOREGROUND_SERVICE_APP_OP_SESSION_ENDED__APP_OP_MODE__MODE_FOREGROUND = 3;

    // Values for AppStandbyBucketChanged.bucket
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_UNKNOWN = 0;
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_EXEMPTED = 5;
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_ACTIVE = 10;
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_WORKING_SET = 20;
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_FREQUENT = 30;
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_RARE = 40;
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_RESTRICTED = 45;
    public static final int APP_STANDBY_BUCKET_CHANGED__BUCKET__BUCKET_NEVER = 50;

    // Values for AppStandbyBucketChanged.main_reason
    public static final int APP_STANDBY_BUCKET_CHANGED__MAIN_REASON__MAIN_UNKNOWN = 0;
    public static final int APP_STANDBY_BUCKET_CHANGED__MAIN_REASON__MAIN_DEFAULT = 256;
    public static final int APP_STANDBY_BUCKET_CHANGED__MAIN_REASON__MAIN_TIMEOUT = 512;
    public static final int APP_STANDBY_BUCKET_CHANGED__MAIN_REASON__MAIN_USAGE = 768;
    public static final int APP_STANDBY_BUCKET_CHANGED__MAIN_REASON__MAIN_FORCED_BY_USER = 1024;
    public static final int APP_STANDBY_BUCKET_CHANGED__MAIN_REASON__MAIN_PREDICTED = 1280;
    public static final int APP_STANDBY_BUCKET_CHANGED__MAIN_REASON__MAIN_FORCED_BY_SYSTEM = 1536;

    // Values for SharesheetStarted.preview_type
    public static final int SHARESHEET_STARTED__PREVIEW_TYPE__CONTENT_PREVIEW_TYPE_UNKNOWN = 0;
    public static final int SHARESHEET_STARTED__PREVIEW_TYPE__CONTENT_PREVIEW_IMAGE = 1;
    public static final int SHARESHEET_STARTED__PREVIEW_TYPE__CONTENT_PREVIEW_FILE = 2;
    public static final int SHARESHEET_STARTED__PREVIEW_TYPE__CONTENT_PREVIEW_TEXT = 3;

    // Values for SharesheetStarted.intent_type
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_DEFAULT = 0;
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_ACTION_VIEW = 1;
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_ACTION_EDIT = 2;
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_ACTION_SEND = 3;
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_ACTION_SENDTO = 4;
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_ACTION_SEND_MULTIPLE = 5;
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_ACTION_IMAGE_CAPTURE = 6;
    public static final int SHARESHEET_STARTED__INTENT_TYPE__INTENT_ACTION_MAIN = 7;

    // Values for UserLifecycleJourneyReported.journey
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__JOURNEY__UNKNOWN = 0;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__JOURNEY__USER_SWITCH_UI = 1;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__JOURNEY__USER_SWITCH_FG = 2;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__JOURNEY__USER_START = 3;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__JOURNEY__USER_CREATE = 4;

    // Values for UserLifecycleJourneyReported.user_type
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__TYPE_UNKNOWN = 0;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__FULL_SYSTEM = 1;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__FULL_SECONDARY = 2;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__FULL_GUEST = 3;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__FULL_DEMO = 4;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__FULL_RESTRICTED = 5;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__PROFILE_MANAGED = 6;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__SYSTEM_HEADLESS = 7;
    public static final int USER_LIFECYCLE_JOURNEY_REPORTED__USER_TYPE__PROFILE_CLONE = 8;

    // Values for UserLifecycleEventOccurred.event
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__EVENT__UNKNOWN = 0;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__EVENT__SWITCH_USER = 1;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__EVENT__START_USER = 2;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__EVENT__CREATE_USER = 3;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__EVENT__USER_RUNNING_LOCKED = 4;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__EVENT__UNLOCKING_USER = 5;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__EVENT__UNLOCKED_USER = 6;

    // Values for UserLifecycleEventOccurred.state
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__STATE__NONE = 0;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__STATE__BEGIN = 1;
    public static final int USER_LIFECYCLE_EVENT_OCCURRED__STATE__FINISH = 2;

    // Values for AccessibilityShortcutReported.shortcut_type
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SHORTCUT_TYPE__UNKNOWN_TYPE = 0;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SHORTCUT_TYPE__A11Y_BUTTON = 1;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SHORTCUT_TYPE__VOLUME_KEY = 2;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SHORTCUT_TYPE__TRIPLE_TAP = 3;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SHORTCUT_TYPE__A11Y_BUTTON_LONG_PRESS = 4;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SHORTCUT_TYPE__A11Y_FLOATING_MENU = 5;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SHORTCUT_TYPE__A11Y_GESTURE = 6;

    // Values for AccessibilityShortcutReported.service_status
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SERVICE_STATUS__UNKNOWN = 0;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SERVICE_STATUS__ENABLED = 1;
    public static final int ACCESSIBILITY_SHORTCUT_REPORTED__SERVICE_STATUS__DISABLED = 2;

    // Values for AppUsageEventOccurred.event_type
    public static final int APP_USAGE_EVENT_OCCURRED__EVENT_TYPE__NONE = 0;
    public static final int APP_USAGE_EVENT_OCCURRED__EVENT_TYPE__MOVE_TO_FOREGROUND = 1;
    public static final int APP_USAGE_EVENT_OCCURRED__EVENT_TYPE__MOVE_TO_BACKGROUND = 2;

    // Values for TvTunerStateChanged.state
    public static final int TV_TUNER_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int TV_TUNER_STATE_CHANGED__STATE__TUNING = 1;
    public static final int TV_TUNER_STATE_CHANGED__STATE__LOCKED = 2;
    public static final int TV_TUNER_STATE_CHANGED__STATE__NOT_LOCKED = 3;
    public static final int TV_TUNER_STATE_CHANGED__STATE__SIGNAL_LOST = 4;
    public static final int TV_TUNER_STATE_CHANGED__STATE__SCANNING = 5;
    public static final int TV_TUNER_STATE_CHANGED__STATE__SCAN_STOPPED = 6;

    // Values for TvTunerDvrStatus.type
    public static final int TV_TUNER_DVR_STATUS__TYPE__UNKNOWN_TYPE = 0;
    public static final int TV_TUNER_DVR_STATUS__TYPE__PLAYBACK = 1;
    public static final int TV_TUNER_DVR_STATUS__TYPE__RECORD = 2;

    // Values for TvTunerDvrStatus.state
    public static final int TV_TUNER_DVR_STATUS__STATE__UNKNOWN_STATE = 0;
    public static final int TV_TUNER_DVR_STATUS__STATE__STARTED = 1;
    public static final int TV_TUNER_DVR_STATUS__STATE__STOPPED = 2;

    // Values for TvCasSessionOpenStatus.state
    public static final int TV_CAS_SESSION_OPEN_STATUS__STATE__UNKNOWN = 0;
    public static final int TV_CAS_SESSION_OPEN_STATUS__STATE__SUCCEEDED = 1;
    public static final int TV_CAS_SESSION_OPEN_STATUS__STATE__FAILED = 2;

    // Values for AssistantInvocationReported.device_state
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__UNKNOWN_DEVICE_STATE = 0;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__AOD1 = 1;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__AOD2 = 2;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__BOUNCER = 3;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__UNLOCKED_LOCKSCREEN = 4;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__LAUNCHER_HOME = 5;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__LAUNCHER_OVERVIEW = 6;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__LAUNCHER_ALL_APPS = 7;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__APP_DEFAULT = 8;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__APP_IMMERSIVE = 9;
    public static final int ASSISTANT_INVOCATION_REPORTED__DEVICE_STATE__APP_FULLSCREEN = 10;

    // Values for BlobCommitted.result
    public static final int BLOB_COMMITTED__RESULT__UNKNOWN = 0;
    public static final int BLOB_COMMITTED__RESULT__SUCCESS = 1;
    public static final int BLOB_COMMITTED__RESULT__ERROR_DURING_COMMIT = 2;
    public static final int BLOB_COMMITTED__RESULT__DIGEST_MISMATCH = 3;
    public static final int BLOB_COMMITTED__RESULT__COUNT_LIMIT_EXCEEDED = 4;

    // Values for BlobLeased.result
    public static final int BLOB_LEASED__RESULT__UNKNOWN = 0;
    public static final int BLOB_LEASED__RESULT__SUCCESS = 1;
    public static final int BLOB_LEASED__RESULT__BLOB_DNE = 2;
    public static final int BLOB_LEASED__RESULT__ACCESS_NOT_ALLOWED = 3;
    public static final int BLOB_LEASED__RESULT__LEASE_EXPIRY_INVALID = 4;
    public static final int BLOB_LEASED__RESULT__DATA_SIZE_LIMIT_EXCEEDED = 5;
    public static final int BLOB_LEASED__RESULT__COUNT_LIMIT_EXCEEDED = 6;

    // Values for BlobOpened.result
    public static final int BLOB_OPENED__RESULT__UNKNOWN = 0;
    public static final int BLOB_OPENED__RESULT__SUCCESS = 1;
    public static final int BLOB_OPENED__RESULT__BLOB_DNE = 2;
    public static final int BLOB_OPENED__RESULT__ACCESS_NOT_ALLOWED = 3;

    // Values for UIInteractionFrameInfoReported.interaction_type
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__UNKNOWN = 0;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__NOTIFICATION_SHADE_SWIPE = 1;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_EXPAND_COLLAPSE_LOCK = 2;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_SCROLL_FLING = 3;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_ROW_EXPAND = 4;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_ROW_SWIPE = 5;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_QS_EXPAND_COLLAPSE = 6;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_QS_SCROLL_SWIPE = 7;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_APP_LAUNCH_FROM_RECENTS = 8;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_APP_LAUNCH_FROM_ICON = 9;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_APP_CLOSE_TO_HOME = 10;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_APP_CLOSE_TO_PIP = 11;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_QUICK_SWITCH = 12;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_HEADS_UP_APPEAR = 13;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_HEADS_UP_DISAPPEAR = 14;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_NOTIFICATION_ADD = 15;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_NOTIFICATION_REMOVE = 16;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_APP_LAUNCH = 17;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_PASSWORD_APPEAR = 18;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_PATTERN_APPEAR = 19;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_PIN_APPEAR = 20;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_PASSWORD_DISAPPEAR = 21;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_PATTERN_DISAPPEAR = 22;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_PIN_DISAPPEAR = 23;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_TRANSITION_FROM_AOD = 24;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_TRANSITION_TO_AOD = 25;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_OPEN_ALL_APPS = 26;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_ALL_APPS_SCROLL = 27;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LAUNCHER_APP_LAUNCH_FROM_WIDGET = 28;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SETTINGS_PAGE_SCROLL = 29;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__LOCKSCREEN_UNLOCK_ANIMATION = 30;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_APP_LAUNCH_FROM_HISTORY_BUTTON = 31;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_APP_LAUNCH_FROM_MEDIA_PLAYER = 32;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_APP_LAUNCH_FROM_QS_TILE = 33;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SHADE_APP_LAUNCH_FROM_SETTINGS_BUTTON = 34;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__STATUS_BAR_APP_LAUNCH_FROM_CALL_CHIP = 35;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__PIP_TRANSITION = 36;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__WALLPAPER_TRANSITION = 37;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__USER_SWITCH = 38;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SPLASHSCREEN_AVD = 39;
    public static final int UIINTERACTION_FRAME_INFO_REPORTED__INTERACTION_TYPE__SPLASHSCREEN_EXIT_ANIM = 40;

    // Values for UIActionLatencyReported.action
    public static final int UIACTION_LATENCY_REPORTED__ACTION__UNKNOWN = 0;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_EXPAND_PANEL = 1;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_TOGGLE_RECENTS = 2;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_FINGERPRINT_WAKE_AND_UNLOCK = 3;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_CHECK_CREDENTIAL = 4;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_CHECK_CREDENTIAL_UNLOCKED = 5;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_TURN_ON_SCREEN = 6;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_ROTATE_SCREEN = 7;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_FACE_WAKE_AND_UNLOCK = 8;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_START_RECENTS_ANIMATION = 9;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_ROTATE_SCREEN_CAMERA_CHECK = 10;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_ROTATE_SCREEN_SENSOR = 11;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_LOCKSCREEN_UNLOCK = 12;
    public static final int UIACTION_LATENCY_REPORTED__ACTION__ACTION_USER_SWITCH = 13;

    // Values for HdmiCecActiveSourceChanged.active_source_logical_address
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__LOGICAL_ADDRESS_UNKNOWN = -1;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__TV = 0;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__RECORDING_DEVICE_1 = 1;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__RECORDING_DEVICE_2 = 2;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__TUNER_1 = 3;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__PLAYBACK_DEVICE_1 = 4;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__AUDIO_SYSTEM = 5;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__TUNER_2 = 6;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__TUNER_3 = 7;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__PLAYBACK_DEVICE_2 = 8;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__RECORDING_DEVICE_3 = 9;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__TUNER_4 = 10;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__PLAYBACK_DEVICE_3 = 11;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__RESERVED_1 = 12;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__RESERVED_2 = 13;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__SPECIFIC_USE = 14;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__ACTIVE_SOURCE_LOGICAL_ADDRESS__UNREGISTERED_OR_BROADCAST = 15;

    // Values for HdmiCecActiveSourceChanged.local_relationship
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__LOCAL_RELATIONSHIP__RELATIONSHIP_TO_ACTIVE_SOURCE_UNKNOWN = 0;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__LOCAL_RELATIONSHIP__DIFFERENT_BRANCH = 1;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__LOCAL_RELATIONSHIP__ANCESTOR = 2;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__LOCAL_RELATIONSHIP__DESCENDANT = 3;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__LOCAL_RELATIONSHIP__SIBLING = 4;
    public static final int HDMI_CEC_ACTIVE_SOURCE_CHANGED__LOCAL_RELATIONSHIP__SAME = 5;

    // Values for HdmiCecMessageReported.direction
    public static final int HDMI_CEC_MESSAGE_REPORTED__DIRECTION__MESSAGE_DIRECTION_UNKNOWN = 0;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DIRECTION__MESSAGE_DIRECTION_OTHER = 1;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DIRECTION__OUTGOING = 2;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DIRECTION__INCOMING = 3;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DIRECTION__TO_SELF = 4;

    // Values for HdmiCecMessageReported.initiator_logical_address
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__LOGICAL_ADDRESS_UNKNOWN = -1;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__TV = 0;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__RECORDING_DEVICE_1 = 1;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__RECORDING_DEVICE_2 = 2;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__TUNER_1 = 3;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__PLAYBACK_DEVICE_1 = 4;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__AUDIO_SYSTEM = 5;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__TUNER_2 = 6;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__TUNER_3 = 7;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__PLAYBACK_DEVICE_2 = 8;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__RECORDING_DEVICE_3 = 9;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__TUNER_4 = 10;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__PLAYBACK_DEVICE_3 = 11;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__RESERVED_1 = 12;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__RESERVED_2 = 13;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__SPECIFIC_USE = 14;
    public static final int HDMI_CEC_MESSAGE_REPORTED__INITIATOR_LOGICAL_ADDRESS__UNREGISTERED_OR_BROADCAST = 15;

    // Values for HdmiCecMessageReported.destination_logical_address
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__LOGICAL_ADDRESS_UNKNOWN = -1;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__TV = 0;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__RECORDING_DEVICE_1 = 1;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__RECORDING_DEVICE_2 = 2;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__TUNER_1 = 3;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__PLAYBACK_DEVICE_1 = 4;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__AUDIO_SYSTEM = 5;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__TUNER_2 = 6;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__TUNER_3 = 7;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__PLAYBACK_DEVICE_2 = 8;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__RECORDING_DEVICE_3 = 9;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__TUNER_4 = 10;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__PLAYBACK_DEVICE_3 = 11;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__RESERVED_1 = 12;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__RESERVED_2 = 13;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__SPECIFIC_USE = 14;
    public static final int HDMI_CEC_MESSAGE_REPORTED__DESTINATION_LOGICAL_ADDRESS__UNREGISTERED_OR_BROADCAST = 15;

    // Values for HdmiCecMessageReported.send_message_result
    public static final int HDMI_CEC_MESSAGE_REPORTED__SEND_MESSAGE_RESULT__SEND_MESSAGE_RESULT_UNKNOWN = 0;
    public static final int HDMI_CEC_MESSAGE_REPORTED__SEND_MESSAGE_RESULT__SUCCESS = 10;
    public static final int HDMI_CEC_MESSAGE_REPORTED__SEND_MESSAGE_RESULT__NACK = 11;
    public static final int HDMI_CEC_MESSAGE_REPORTED__SEND_MESSAGE_RESULT__BUSY = 12;
    public static final int HDMI_CEC_MESSAGE_REPORTED__SEND_MESSAGE_RESULT__FAIL = 13;

    // Values for HdmiCecMessageReported.user_control_pressed_command
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__USER_CONTROL_PRESSED_COMMAND_UNKNOWN = 0;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__USER_CONTROL_PRESSED_COMMAND_OTHER = 1;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__NUMBER = 2;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__SELECT = 256;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__UP = 257;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__DOWN = 258;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__LEFT = 259;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__RIGHT = 260;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__RIGHT_UP = 261;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__RIGHT_DOWN = 262;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__LEFT_UP = 263;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__LEFT_DOWN = 264;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__EXIT = 269;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__POWER = 320;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__VOLUME_UP = 321;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__VOLUME_DOWN = 322;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__VOLUME_MUTE = 323;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__POWER_TOGGLE = 363;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__POWER_OFF = 364;
    public static final int HDMI_CEC_MESSAGE_REPORTED__USER_CONTROL_PRESSED_COMMAND__POWER_ON = 365;

    // Values for HdmiCecMessageReported.feature_abort_reason
    public static final int HDMI_CEC_MESSAGE_REPORTED__FEATURE_ABORT_REASON__FEATURE_ABORT_REASON_UNKNOWN = 0;
    public static final int HDMI_CEC_MESSAGE_REPORTED__FEATURE_ABORT_REASON__UNRECOGNIZED_OPCODE = 10;
    public static final int HDMI_CEC_MESSAGE_REPORTED__FEATURE_ABORT_REASON__NOT_IN_CORRECT_MODE_TO_RESPOND = 11;
    public static final int HDMI_CEC_MESSAGE_REPORTED__FEATURE_ABORT_REASON__CANNOT_PROVIDE_SOURCE = 12;
    public static final int HDMI_CEC_MESSAGE_REPORTED__FEATURE_ABORT_REASON__INVALID_OPERAND = 13;
    public static final int HDMI_CEC_MESSAGE_REPORTED__FEATURE_ABORT_REASON__REFUSED = 14;
    public static final int HDMI_CEC_MESSAGE_REPORTED__FEATURE_ABORT_REASON__UNABLE_TO_DETERMINE = 15;

    // Values for TifTuneStateChanged.state
    public static final int TIF_TUNE_STATE_CHANGED__STATE__TIF_TUNE_STATE_UNKNOWN = 0;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__CREATED = 1;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__SURFACE_ATTACHED = 2;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__SURFACE_DETACHED = 3;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__RELEASED = 4;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__TUNE_STARTED = 5;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_AVAILABLE = 6;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_UNKNOWN = 100;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_TUNING = 101;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL = 102;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_BUFFERING = 103;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY = 104;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED = 105;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE = 106;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION = 107;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED = 108;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_NO_LICENSE = 109;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED = 110;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION = 111;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING = 112;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD = 113;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE = 114;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID = 115;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT = 116;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING = 117;
    public static final int TIF_TUNE_STATE_CHANGED__STATE__VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN = 118;

    // Values for TifTuneStateChanged.type
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__TIF_INPUT_TYPE_UNKNOWN = 0;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__TUNER = 1;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__OTHER = 1000;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__COMPOSITE = 1001;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__SVIDEO = 1002;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__SCART = 1003;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__COMPONENT = 1004;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__VGA = 1005;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__DVI = 1006;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__HDMI = 1007;
    public static final int TIF_TUNE_STATE_CHANGED__TYPE__DISPLAY_PORT = 1008;

    // Values for AutoRotateReported.current_orientation
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__UNKNOWN = 0;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__DEPRECATED = 1;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__ROTATION_0 = 2;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__ROTATION_90 = 3;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__ROTATION_180 = 4;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__ROTATION_270 = 5;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__DISABLED = 6;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__UNAVAILABLE = 7;
    public static final int AUTO_ROTATE_REPORTED__CURRENT_ORIENTATION__FAILURE = 8;

    // Values for AutoRotateReported.proposed_orientation
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__UNKNOWN = 0;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__DEPRECATED = 1;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__ROTATION_0 = 2;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__ROTATION_90 = 3;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__ROTATION_180 = 4;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__ROTATION_270 = 5;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__DISABLED = 6;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__UNAVAILABLE = 7;
    public static final int AUTO_ROTATE_REPORTED__PROPOSED_ORIENTATION__FAILURE = 8;

    // Values for AutoRotateReported.recommended_orientation
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__UNKNOWN = 0;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__DEPRECATED = 1;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__ROTATION_0 = 2;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__ROTATION_90 = 3;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__ROTATION_180 = 4;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__ROTATION_270 = 5;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__DISABLED = 6;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__UNAVAILABLE = 7;
    public static final int AUTO_ROTATE_REPORTED__RECOMMENDED_ORIENTATION__FAILURE = 8;

    // Values for DeviceRotated.proposed_orientation
    public static final int DEVICE_ROTATED__PROPOSED_ORIENTATION__UNKNOWN = 0;
    public static final int DEVICE_ROTATED__PROPOSED_ORIENTATION__ROTATION_0 = 1;
    public static final int DEVICE_ROTATED__PROPOSED_ORIENTATION__ROTATION_90 = 2;
    public static final int DEVICE_ROTATED__PROPOSED_ORIENTATION__ROTATION_180 = 3;
    public static final int DEVICE_ROTATED__PROPOSED_ORIENTATION__ROTATION_270 = 4;

    // Values for DeviceRotated.rotation_event_type
    public static final int DEVICE_ROTATED__ROTATION_EVENT_TYPE__UNKNOWN = 0;
    public static final int DEVICE_ROTATED__ROTATION_EVENT_TYPE__PREINDICATION = 1;
    public static final int DEVICE_ROTATED__ROTATION_EVENT_TYPE__ACTUAL_EVENT = 2;
    public static final int DEVICE_ROTATED__ROTATION_EVENT_TYPE__DATA_READY = 3;

    // Values for FaceDownReported.face_down_response
    public static final int FACE_DOWN_REPORTED__FACE_DOWN_RESPONSE__UNKNOWN = 1;
    public static final int FACE_DOWN_REPORTED__FACE_DOWN_RESPONSE__UNFLIP = 2;
    public static final int FACE_DOWN_REPORTED__FACE_DOWN_RESPONSE__USER_INTERACTION = 3;
    public static final int FACE_DOWN_REPORTED__FACE_DOWN_RESPONSE__SCREEN_OFF = 4;

    // Values for RebootEscrowPreparationReported.result
    public static final int REBOOT_ESCROW_PREPARATION_REPORTED__RESULT__ROR_NEED_PREPARATION = 0;
    public static final int REBOOT_ESCROW_PREPARATION_REPORTED__RESULT__ROR_SKIP_PREPARATION_AND_NOTIFY = 1;
    public static final int REBOOT_ESCROW_PREPARATION_REPORTED__RESULT__ROR_SKIP_PREPARATION_NOT_NOTIFY = 2;

    // Values for MagnificationUsageReported.activated_mode
    public static final int MAGNIFICATION_USAGE_REPORTED__ACTIVATED_MODE__MAGNIFICATION_UNKNOWN_MODE = 0;
    public static final int MAGNIFICATION_USAGE_REPORTED__ACTIVATED_MODE__MAGNIFICATION_FULL_SCREEN = 1;
    public static final int MAGNIFICATION_USAGE_REPORTED__ACTIVATED_MODE__MAGNIFICATION_WINDOW = 2;
    public static final int MAGNIFICATION_USAGE_REPORTED__ACTIVATED_MODE__MAGNIFICATION_ALL = 3;

    // Values for MagnificationModeWithImeOnReported.activated_mode
    public static final int MAGNIFICATION_MODE_WITH_IME_ON_REPORTED__ACTIVATED_MODE__MAGNIFICATION_UNKNOWN_MODE = 0;
    public static final int MAGNIFICATION_MODE_WITH_IME_ON_REPORTED__ACTIVATED_MODE__MAGNIFICATION_FULL_SCREEN = 1;
    public static final int MAGNIFICATION_MODE_WITH_IME_ON_REPORTED__ACTIVATED_MODE__MAGNIFICATION_WINDOW = 2;
    public static final int MAGNIFICATION_MODE_WITH_IME_ON_REPORTED__ACTIVATED_MODE__MAGNIFICATION_ALL = 3;

    // Values for AuthDeprecatedAPIUsed.deprecated_api
    public static final int AUTH_DEPRECATED_APIUSED__DEPRECATED_API__API_UNKNOWN = 0;
    public static final int AUTH_DEPRECATED_APIUSED__DEPRECATED_API__API_FINGERPRINT_MANAGER_AUTHENTICATE = 1;
    public static final int AUTH_DEPRECATED_APIUSED__DEPRECATED_API__API_FINGERPRINT_MANAGER_HAS_ENROLLED_FINGERPRINTS = 2;
    public static final int AUTH_DEPRECATED_APIUSED__DEPRECATED_API__API_FINGERPRINT_MANAGER_IS_HARDWARE_DETECTED = 3;
    public static final int AUTH_DEPRECATED_APIUSED__DEPRECATED_API__API_BIOMETRIC_MANAGER_CAN_AUTHENTICATE = 4;

    // Values for LocationTimeZoneProviderStateChanged.state
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED__STATE__INITIALIZING = 1;
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED__STATE__CERTAIN = 2;
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED__STATE__UNCERTAIN = 3;
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED__STATE__STOPPED = 4;
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED__STATE__PERM_FAILED = 5;
    public static final int LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED__STATE__DESTROYED = 6;

    // Values for FdtrackEventOccurred.event
    public static final int FDTRACK_EVENT_OCCURRED__EVENT__DISABLED = 1;
    public static final int FDTRACK_EVENT_OCCURRED__EVENT__ENABLED = 2;
    public static final int FDTRACK_EVENT_OCCURRED__EVENT__ABORTING = 3;

    // Values for TimeoutAutoExtendedReported.outcome
    public static final int TIMEOUT_AUTO_EXTENDED_REPORTED__OUTCOME__UNKNOWN = 0;
    public static final int TIMEOUT_AUTO_EXTENDED_REPORTED__OUTCOME__POWER_BUTTON = 1;
    public static final int TIMEOUT_AUTO_EXTENDED_REPORTED__OUTCOME__TIMEOUT = 2;

    // Values for AlarmScheduled.exact_alarm_allowed_reason
    public static final int ALARM_SCHEDULED__EXACT_ALARM_ALLOWED_REASON__NOT_APPLICABLE = 0;
    public static final int ALARM_SCHEDULED__EXACT_ALARM_ALLOWED_REASON__PERMISSION = 1;
    public static final int ALARM_SCHEDULED__EXACT_ALARM_ALLOWED_REASON__ALLOW_LIST = 2;
    public static final int ALARM_SCHEDULED__EXACT_ALARM_ALLOWED_REASON__CHANGE_DISABLED = 3;

    // Values for AlarmScheduled.calling_process_state
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_UNKNOWN_TO_PROTO = 998;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_UNKNOWN = 999;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_PERSISTENT = 1000;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_PERSISTENT_UI = 1001;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_TOP = 1002;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_FOREGROUND_SERVICE = 1003;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_BOUND_FOREGROUND_SERVICE = 1004;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_IMPORTANT_FOREGROUND = 1005;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_IMPORTANT_BACKGROUND = 1006;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_TRANSIENT_BACKGROUND = 1007;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_BACKUP = 1008;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_SERVICE = 1009;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_RECEIVER = 1010;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_TOP_SLEEPING = 1011;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_HEAVY_WEIGHT = 1012;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_HOME = 1013;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_LAST_ACTIVITY = 1014;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_CACHED_ACTIVITY = 1015;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_CACHED_ACTIVITY_CLIENT = 1016;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_CACHED_RECENT = 1017;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_CACHED_EMPTY = 1018;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_NONEXISTENT = 1019;
    public static final int ALARM_SCHEDULED__CALLING_PROCESS_STATE__PROCESS_STATE_BOUND_TOP = 1020;

    // Values for AppProcessDied.reason
    public static final int APP_PROCESS_DIED__REASON__REASON_UNKNOWN = 0;
    public static final int APP_PROCESS_DIED__REASON__REASON_EXIT_SELF = 1;
    public static final int APP_PROCESS_DIED__REASON__REASON_SIGNALED = 2;
    public static final int APP_PROCESS_DIED__REASON__REASON_LOW_MEMORY = 3;
    public static final int APP_PROCESS_DIED__REASON__REASON_CRASH = 4;
    public static final int APP_PROCESS_DIED__REASON__REASON_CRASH_NATIVE = 5;
    public static final int APP_PROCESS_DIED__REASON__REASON_ANR = 6;
    public static final int APP_PROCESS_DIED__REASON__REASON_INITIALIZATION_FAILURE = 7;
    public static final int APP_PROCESS_DIED__REASON__REASON_PERMISSION_CHANGE = 8;
    public static final int APP_PROCESS_DIED__REASON__REASON_EXCESSIVE_RESOURCE_USAGE = 9;
    public static final int APP_PROCESS_DIED__REASON__REASON_USER_REQUESTED = 10;
    public static final int APP_PROCESS_DIED__REASON__REASON_USER_STOPPED = 11;
    public static final int APP_PROCESS_DIED__REASON__REASON_DEPENDENCY_DIED = 12;
    public static final int APP_PROCESS_DIED__REASON__REASON_OTHER = 13;

    // Values for AppProcessDied.sub_reason
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_UNKNOWN = 0;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_WAIT_FOR_DEBUGGER = 1;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_TOO_MANY_CACHED = 2;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_TOO_MANY_EMPTY = 3;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_TRIM_EMPTY = 4;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_LARGE_CACHED = 5;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_MEMORY_PRESSURE = 6;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_EXCESSIVE_CPU = 7;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_SYSTEM_UPDATE_DONE = 8;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_KILL_ALL_FG = 9;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_KILL_ALL_BG_EXCEPT = 10;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_KILL_UID = 11;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_KILL_PID = 12;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_INVALID_START = 13;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_INVALID_STATE = 14;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_IMPERCEPTIBLE = 15;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_REMOVE_LRU = 16;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_ISOLATED_NOT_NEEDED = 17;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_CACHED_IDLE_FORCED_APP_STANDBY = 18;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_FREEZER_BINDER_IOCTL = 19;
    public static final int APP_PROCESS_DIED__SUB_REASON__SUBREASON_FREEZER_BINDER_TRANSACTION = 20;

    // Values for AppProcessDied.importance
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_FOREGROUND = 100;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_FOREGROUND_SERVICE = 125;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_PERCEPTIBLE_PRE_26 = 130;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_TOP_SLEEPING_PRE_28 = 150;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_CANT_SAVE_STATE_PRE_26 = 170;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_VISIBLE = 200;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_PERCEPTIBLE = 230;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_SERVICE = 300;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_TOP_SLEEPING = 325;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_CANT_SAVE_STATE = 350;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_BACKGROUND = 400;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_EMPTY = 500;
    public static final int APP_PROCESS_DIED__IMPORTANCE__IMPORTANCE_GONE = 1000;

    // Values for PrivacySensorToggleInteraction.sensor
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__SENSOR__SENSOR_UNKNOWN = 0;
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__SENSOR__MICROPHONE = 1;
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__SENSOR__CAMERA = 2;

    // Values for PrivacySensorToggleInteraction.action
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__ACTION__ACTION_UNKNOWN = 0;
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__ACTION__TOGGLE_ON = 1;
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__ACTION__TOGGLE_OFF = 2;

    // Values for PrivacySensorToggleInteraction.source
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__SOURCE__SOURCE_UNKNOWN = 0;
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__SOURCE__DIALOG = 1;
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__SOURCE__SETTINGS = 2;
    public static final int PRIVACY_SENSOR_TOGGLE_INTERACTION__SOURCE__QS_TILE = 3;

    // Values for PrivacyToggleDialogInteraction.action
    public static final int PRIVACY_TOGGLE_DIALOG_INTERACTION__ACTION__ACTION_UNKNOWN = 0;
    public static final int PRIVACY_TOGGLE_DIALOG_INTERACTION__ACTION__ENABLE = 1;
    public static final int PRIVACY_TOGGLE_DIALOG_INTERACTION__ACTION__CANCEL = 2;

    // Values for AppCompatStateChanged.state
    public static final int APP_COMPAT_STATE_CHANGED__STATE__UNKNOWN = 0;
    public static final int APP_COMPAT_STATE_CHANGED__STATE__NOT_VISIBLE = 1;
    public static final int APP_COMPAT_STATE_CHANGED__STATE__NOT_LETTERBOXED = 2;
    public static final int APP_COMPAT_STATE_CHANGED__STATE__LETTERBOXED_FOR_SIZE_COMPAT_MODE = 3;
    public static final int APP_COMPAT_STATE_CHANGED__STATE__LETTERBOXED_FOR_FIXED_ORIENTATION = 4;
    public static final int APP_COMPAT_STATE_CHANGED__STATE__LETTERBOXED_FOR_ASPECT_RATIO = 5;

    // Values for SizeCompatRestartButtonEventReported.event
    public static final int SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED__EVENT__UNKNOWN = 0;
    public static final int SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED__EVENT__APPEARED = 1;
    public static final int SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED__EVENT__CLICKED = 2;

    // Values for SplitscreenUIChanged.action
    public static final int SPLITSCREEN_UICHANGED__ACTION__UNKNOWN_ACTION = 0;
    public static final int SPLITSCREEN_UICHANGED__ACTION__ENTER = 1;
    public static final int SPLITSCREEN_UICHANGED__ACTION__EXIT = 2;
    public static final int SPLITSCREEN_UICHANGED__ACTION__APP_CHANGE = 3;
    public static final int SPLITSCREEN_UICHANGED__ACTION__RESIZE = 4;
    public static final int SPLITSCREEN_UICHANGED__ACTION__SWAP = 5;

    // Values for SplitscreenUIChanged.enter_reason
    public static final int SPLITSCREEN_UICHANGED__ENTER_REASON__UNKNOWN_ENTER = 0;
    public static final int SPLITSCREEN_UICHANGED__ENTER_REASON__OVERVIEW = 1;
    public static final int SPLITSCREEN_UICHANGED__ENTER_REASON__DRAG_LEFT = 2;
    public static final int SPLITSCREEN_UICHANGED__ENTER_REASON__DRAG_TOP = 3;
    public static final int SPLITSCREEN_UICHANGED__ENTER_REASON__DRAG_RIGHT = 4;
    public static final int SPLITSCREEN_UICHANGED__ENTER_REASON__DRAG_BOTTOM = 5;

    // Values for SplitscreenUIChanged.exit_reason
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__UNKNOWN_EXIT = 0;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__DRAG_DIVIDER = 1;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__RETURN_HOME = 2;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__SCREEN_LOCKED = 3;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__SCREEN_LOCKED_SHOW_ON_TOP = 4;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__DEVICE_FOLDED = 5;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__ROOT_TASK_VANISHED = 6;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__APP_FINISHED = 7;
    public static final int SPLITSCREEN_UICHANGED__EXIT_REASON__APP_DOES_NOT_SUPPORT_MULTIWINDOW = 8;

    // Values for SplitscreenUIChanged.main_stage_position
    public static final int SPLITSCREEN_UICHANGED__MAIN_STAGE_POSITION__UNKNOWN_POSITION = 0;
    public static final int SPLITSCREEN_UICHANGED__MAIN_STAGE_POSITION__LEFT = 1;
    public static final int SPLITSCREEN_UICHANGED__MAIN_STAGE_POSITION__RIGHT = 2;
    public static final int SPLITSCREEN_UICHANGED__MAIN_STAGE_POSITION__TOP = 3;
    public static final int SPLITSCREEN_UICHANGED__MAIN_STAGE_POSITION__BOTTOM = 4;

    // Values for SplitscreenUIChanged.side_stage_position
    public static final int SPLITSCREEN_UICHANGED__SIDE_STAGE_POSITION__UNKNOWN_POSITION = 0;
    public static final int SPLITSCREEN_UICHANGED__SIDE_STAGE_POSITION__LEFT = 1;
    public static final int SPLITSCREEN_UICHANGED__SIDE_STAGE_POSITION__RIGHT = 2;
    public static final int SPLITSCREEN_UICHANGED__SIDE_STAGE_POSITION__TOP = 3;
    public static final int SPLITSCREEN_UICHANGED__SIDE_STAGE_POSITION__BOTTOM = 4;

    // Values for CameraCompatControlEventReported.event
    public static final int CAMERA_COMPAT_CONTROL_EVENT_REPORTED__EVENT__UNKNOWN = 0;
    public static final int CAMERA_COMPAT_CONTROL_EVENT_REPORTED__EVENT__APPEARED_APPLY_TREATMENT = 1;
    public static final int CAMERA_COMPAT_CONTROL_EVENT_REPORTED__EVENT__APPEARED_REVERT_TREATMENT = 2;
    public static final int CAMERA_COMPAT_CONTROL_EVENT_REPORTED__EVENT__CLICKED_APPLY_TREATMENT = 3;
    public static final int CAMERA_COMPAT_CONTROL_EVENT_REPORTED__EVENT__CLICKED_REVERT_TREATMENT = 4;
    public static final int CAMERA_COMPAT_CONTROL_EVENT_REPORTED__EVENT__CLICKED_DISMISS = 5;

    // Values for HotwordDetectorCreateRequested.detector_type
    public static final int HOTWORD_DETECTOR_CREATE_REQUESTED__DETECTOR_TYPE__NORMAL_DETECTOR = 0;
    public static final int HOTWORD_DETECTOR_CREATE_REQUESTED__DETECTOR_TYPE__TRUSTED_DETECTOR_DSP = 1;
    public static final int HOTWORD_DETECTOR_CREATE_REQUESTED__DETECTOR_TYPE__TRUSTED_DETECTOR_SOFTWARE = 2;

    // Values for HotwordDetectionServiceInitResultReported.detector_type
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__DETECTOR_TYPE__NORMAL_DETECTOR = 0;
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__DETECTOR_TYPE__TRUSTED_DETECTOR_DSP = 1;
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__DETECTOR_TYPE__TRUSTED_DETECTOR_SOFTWARE = 2;

    // Values for HotwordDetectionServiceInitResultReported.result
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__RESULT__CALLBACK_INIT_STATE_SUCCESS = 0;
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__RESULT__CALLBACK_INIT_STATE_ERROR = 1;
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__RESULT__CALLBACK_INIT_STATE_UNKNOWN_NO_VALUE = 2;
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__RESULT__CALLBACK_INIT_STATE_UNKNOWN_OVER_MAX_CUSTOM_VALUE = 3;
    public static final int HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED__RESULT__CALLBACK_INIT_STATE_UNKNOWN_TIMEOUT = 4;

    // Values for HotwordDetectionServiceRestarted.detector_type
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED__DETECTOR_TYPE__NORMAL_DETECTOR = 0;
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED__DETECTOR_TYPE__TRUSTED_DETECTOR_DSP = 1;
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED__DETECTOR_TYPE__TRUSTED_DETECTOR_SOFTWARE = 2;

    // Values for HotwordDetectionServiceRestarted.reason
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED__REASON__UNKNOWN = 0;
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED__REASON__AUDIO_SERVICE_DIED = 1;
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED__REASON__SCHEDULE = 2;
    public static final int HOTWORD_DETECTION_SERVICE_RESTARTED__REASON__CRASH = 3;

    // Values for HotwordDetectorKeyphraseTriggered.detector_type
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__DETECTOR_TYPE__NORMAL_DETECTOR = 0;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__DETECTOR_TYPE__TRUSTED_DETECTOR_DSP = 1;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__DETECTOR_TYPE__TRUSTED_DETECTOR_SOFTWARE = 2;

    // Values for HotwordDetectorKeyphraseTriggered.result
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__RESULT__KEYPHRASE_TRIGGER = 0;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__RESULT__FAILED_TO_INFORM_SERVICE = 1;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__RESULT__DETECT_TIMEOUT = 2;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__RESULT__DETECT_EXCEPTION = 3;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__RESULT__SERVICE_CRASH = 4;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__RESULT__DETECTED = 5;
    public static final int HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED__RESULT__REJECTED = 6;

    // Values for HotwordDetectorEvents.detector_type
    public static final int HOTWORD_DETECTOR_EVENTS__DETECTOR_TYPE__NORMAL_DETECTOR = 0;
    public static final int HOTWORD_DETECTOR_EVENTS__DETECTOR_TYPE__TRUSTED_DETECTOR_DSP = 1;
    public static final int HOTWORD_DETECTOR_EVENTS__DETECTOR_TYPE__TRUSTED_DETECTOR_SOFTWARE = 2;

    // Values for HotwordDetectorEvents.event
    public static final int HOTWORD_DETECTOR_EVENTS__EVENT__UNKNOWN = 0;
    public static final int HOTWORD_DETECTOR_EVENTS__EVENT__REQUEST_BIND_SERVICE = 1;
    public static final int HOTWORD_DETECTOR_EVENTS__EVENT__ON_CONNECTED = 2;
    public static final int HOTWORD_DETECTOR_EVENTS__EVENT__REQUEST_BIND_SERVICE_FAIL = 3;
    public static final int HOTWORD_DETECTOR_EVENTS__EVENT__REQUEST_UPDATE_STATE = 4;
    public static final int HOTWORD_DETECTOR_EVENTS__EVENT__CALLBACK_UPDATE_STATE_AFTER_TIMEOUT = 5;
    public static final int HOTWORD_DETECTOR_EVENTS__EVENT__DID_NOT_CALL_START_RECOGNITION = 6;

    // Values for Temperature.sensor_location
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_UNKNOWN = -1;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_CPU = 0;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_GPU = 1;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_BATTERY = 2;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_SKIN = 3;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_USB_PORT = 4;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_POWER_AMPLIFIER = 5;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_BCL_VOLTAGE = 6;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_BCL_CURRENT = 7;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_BCL_PERCENTAGE = 8;
    public static final int TEMPERATURE__SENSOR_LOCATION__TEMPERATURE_TYPE_NPU = 9;

    // Values for Temperature.severity
    public static final int TEMPERATURE__SEVERITY__NONE = 0;
    public static final int TEMPERATURE__SEVERITY__LIGHT = 1;
    public static final int TEMPERATURE__SEVERITY__MODERATE = 2;
    public static final int TEMPERATURE__SEVERITY__SEVERE = 3;
    public static final int TEMPERATURE__SEVERITY__CRITICAL = 4;
    public static final int TEMPERATURE__SEVERITY__EMERGENCY = 5;
    public static final int TEMPERATURE__SEVERITY__SHUTDOWN = 6;

    // Values for DirectoryUsage.directory
    public static final int DIRECTORY_USAGE__DIRECTORY__UNKNOWN = 0;
    public static final int DIRECTORY_USAGE__DIRECTORY__DATA = 1;
    public static final int DIRECTORY_USAGE__DIRECTORY__CACHE = 2;
    public static final int DIRECTORY_USAGE__DIRECTORY__SYSTEM = 3;

    // Values for CategorySize.category
    public static final int CATEGORY_SIZE__CATEGORY__UNKNOWN = 0;
    public static final int CATEGORY_SIZE__CATEGORY__APP_SIZE = 1;
    public static final int CATEGORY_SIZE__CATEGORY__APP_DATA_SIZE = 2;
    public static final int CATEGORY_SIZE__CATEGORY__APP_CACHE_SIZE = 3;
    public static final int CATEGORY_SIZE__CATEGORY__PHOTOS = 4;
    public static final int CATEGORY_SIZE__CATEGORY__VIDEOS = 5;
    public static final int CATEGORY_SIZE__CATEGORY__AUDIO = 6;
    public static final int CATEGORY_SIZE__CATEGORY__DOWNLOADS = 7;
    public static final int CATEGORY_SIZE__CATEGORY__SYSTEM = 8;
    public static final int CATEGORY_SIZE__CATEGORY__OTHER = 9;

    // Values for DeviceCalculatedPowerBlameOther.drain_type
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__AMBIENT_DISPLAY = 0;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__BLUETOOTH = 2;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__CAMERA = 3;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__CELL = 4;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__FLASHLIGHT = 5;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__IDLE = 6;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__MEMORY = 7;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__OVERCOUNTED = 8;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__PHONE = 9;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__SCREEN = 10;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__UNACCOUNTED = 11;
    public static final int DEVICE_CALCULATED_POWER_BLAME_OTHER__DRAIN_TYPE__WIFI = 13;

    // Values for DebugElapsedClock.type
    public static final int DEBUG_ELAPSED_CLOCK__TYPE__TYPE_UNKNOWN = 0;
    public static final int DEBUG_ELAPSED_CLOCK__TYPE__ALWAYS_PRESENT = 1;
    public static final int DEBUG_ELAPSED_CLOCK__TYPE__PRESENT_ON_ODD_PULLS = 2;

    // Values for ExternalStorageInfo.storage_type
    public static final int EXTERNAL_STORAGE_INFO__STORAGE_TYPE__UNKNOWN = 0;
    public static final int EXTERNAL_STORAGE_INFO__STORAGE_TYPE__SD_CARD = 1;
    public static final int EXTERNAL_STORAGE_INFO__STORAGE_TYPE__USB = 2;
    public static final int EXTERNAL_STORAGE_INFO__STORAGE_TYPE__OTHER = 3;

    // Values for ExternalStorageInfo.volume_type
    public static final int EXTERNAL_STORAGE_INFO__VOLUME_TYPE__UNKNOWN = 0;
    public static final int EXTERNAL_STORAGE_INFO__VOLUME_TYPE__PUBLIC = 1;
    public static final int EXTERNAL_STORAGE_INFO__VOLUME_TYPE__PRIVATE = 2;
    public static final int EXTERNAL_STORAGE_INFO__VOLUME_TYPE__OTHER = 3;

    // Values for AppsOnExternalStorageInfo.external_storage_type
    public static final int APPS_ON_EXTERNAL_STORAGE_INFO__EXTERNAL_STORAGE_TYPE__UNKNOWN = 0;
    public static final int APPS_ON_EXTERNAL_STORAGE_INFO__EXTERNAL_STORAGE_TYPE__SD_CARD = 1;
    public static final int APPS_ON_EXTERNAL_STORAGE_INFO__EXTERNAL_STORAGE_TYPE__USB = 2;
    public static final int APPS_ON_EXTERNAL_STORAGE_INFO__EXTERNAL_STORAGE_TYPE__OTHER = 3;

    // Values for CoolingDevice.device_location
    public static final int COOLING_DEVICE__DEVICE_LOCATION__FAN = 0;
    public static final int COOLING_DEVICE__DEVICE_LOCATION__BATTERY = 1;
    public static final int COOLING_DEVICE__DEVICE_LOCATION__CPU = 2;
    public static final int COOLING_DEVICE__DEVICE_LOCATION__GPU = 3;
    public static final int COOLING_DEVICE__DEVICE_LOCATION__MODEM = 4;
    public static final int COOLING_DEVICE__DEVICE_LOCATION__NPU = 5;
    public static final int COOLING_DEVICE__DEVICE_LOCATION__COMPONENT = 6;

    // Values for AppOps.op_id
    public static final int APP_OPS__OP_ID__APP_OP_NONE = -1;
    public static final int APP_OPS__OP_ID__APP_OP_COARSE_LOCATION = 0;
    public static final int APP_OPS__OP_ID__APP_OP_FINE_LOCATION = 1;
    public static final int APP_OPS__OP_ID__APP_OP_GPS = 2;
    public static final int APP_OPS__OP_ID__APP_OP_VIBRATE = 3;
    public static final int APP_OPS__OP_ID__APP_OP_READ_CONTACTS = 4;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_CONTACTS = 5;
    public static final int APP_OPS__OP_ID__APP_OP_READ_CALL_LOG = 6;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_CALL_LOG = 7;
    public static final int APP_OPS__OP_ID__APP_OP_READ_CALENDAR = 8;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_CALENDAR = 9;
    public static final int APP_OPS__OP_ID__APP_OP_WIFI_SCAN = 10;
    public static final int APP_OPS__OP_ID__APP_OP_POST_NOTIFICATION = 11;
    public static final int APP_OPS__OP_ID__APP_OP_NEIGHBORING_CELLS = 12;
    public static final int APP_OPS__OP_ID__APP_OP_CALL_PHONE = 13;
    public static final int APP_OPS__OP_ID__APP_OP_READ_SMS = 14;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_SMS = 15;
    public static final int APP_OPS__OP_ID__APP_OP_RECEIVE_SMS = 16;
    public static final int APP_OPS__OP_ID__APP_OP_RECEIVE_EMERGENCY_SMS = 17;
    public static final int APP_OPS__OP_ID__APP_OP_RECEIVE_MMS = 18;
    public static final int APP_OPS__OP_ID__APP_OP_RECEIVE_WAP_PUSH = 19;
    public static final int APP_OPS__OP_ID__APP_OP_SEND_SMS = 20;
    public static final int APP_OPS__OP_ID__APP_OP_READ_ICC_SMS = 21;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_ICC_SMS = 22;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_SETTINGS = 23;
    public static final int APP_OPS__OP_ID__APP_OP_SYSTEM_ALERT_WINDOW = 24;
    public static final int APP_OPS__OP_ID__APP_OP_ACCESS_NOTIFICATIONS = 25;
    public static final int APP_OPS__OP_ID__APP_OP_CAMERA = 26;
    public static final int APP_OPS__OP_ID__APP_OP_RECORD_AUDIO = 27;
    public static final int APP_OPS__OP_ID__APP_OP_PLAY_AUDIO = 28;
    public static final int APP_OPS__OP_ID__APP_OP_READ_CLIPBOARD = 29;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_CLIPBOARD = 30;
    public static final int APP_OPS__OP_ID__APP_OP_TAKE_MEDIA_BUTTONS = 31;
    public static final int APP_OPS__OP_ID__APP_OP_TAKE_AUDIO_FOCUS = 32;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_MASTER_VOLUME = 33;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_VOICE_VOLUME = 34;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_RING_VOLUME = 35;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_MEDIA_VOLUME = 36;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_ALARM_VOLUME = 37;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_NOTIFICATION_VOLUME = 38;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_BLUETOOTH_VOLUME = 39;
    public static final int APP_OPS__OP_ID__APP_OP_WAKE_LOCK = 40;
    public static final int APP_OPS__OP_ID__APP_OP_MONITOR_LOCATION = 41;
    public static final int APP_OPS__OP_ID__APP_OP_MONITOR_HIGH_POWER_LOCATION = 42;
    public static final int APP_OPS__OP_ID__APP_OP_GET_USAGE_STATS = 43;
    public static final int APP_OPS__OP_ID__APP_OP_MUTE_MICROPHONE = 44;
    public static final int APP_OPS__OP_ID__APP_OP_TOAST_WINDOW = 45;
    public static final int APP_OPS__OP_ID__APP_OP_PROJECT_MEDIA = 46;
    public static final int APP_OPS__OP_ID__APP_OP_ACTIVATE_VPN = 47;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_WALLPAPER = 48;
    public static final int APP_OPS__OP_ID__APP_OP_ASSIST_STRUCTURE = 49;
    public static final int APP_OPS__OP_ID__APP_OP_ASSIST_SCREENSHOT = 50;
    public static final int APP_OPS__OP_ID__APP_OP_READ_PHONE_STATE = 51;
    public static final int APP_OPS__OP_ID__APP_OP_ADD_VOICEMAIL = 52;
    public static final int APP_OPS__OP_ID__APP_OP_USE_SIP = 53;
    public static final int APP_OPS__OP_ID__APP_OP_PROCESS_OUTGOING_CALLS = 54;
    public static final int APP_OPS__OP_ID__APP_OP_USE_FINGERPRINT = 55;
    public static final int APP_OPS__OP_ID__APP_OP_BODY_SENSORS = 56;
    public static final int APP_OPS__OP_ID__APP_OP_READ_CELL_BROADCASTS = 57;
    public static final int APP_OPS__OP_ID__APP_OP_MOCK_LOCATION = 58;
    public static final int APP_OPS__OP_ID__APP_OP_READ_EXTERNAL_STORAGE = 59;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_EXTERNAL_STORAGE = 60;
    public static final int APP_OPS__OP_ID__APP_OP_TURN_SCREEN_ON = 61;
    public static final int APP_OPS__OP_ID__APP_OP_GET_ACCOUNTS = 62;
    public static final int APP_OPS__OP_ID__APP_OP_RUN_IN_BACKGROUND = 63;
    public static final int APP_OPS__OP_ID__APP_OP_AUDIO_ACCESSIBILITY_VOLUME = 64;
    public static final int APP_OPS__OP_ID__APP_OP_READ_PHONE_NUMBERS = 65;
    public static final int APP_OPS__OP_ID__APP_OP_REQUEST_INSTALL_PACKAGES = 66;
    public static final int APP_OPS__OP_ID__APP_OP_PICTURE_IN_PICTURE = 67;
    public static final int APP_OPS__OP_ID__APP_OP_INSTANT_APP_START_FOREGROUND = 68;
    public static final int APP_OPS__OP_ID__APP_OP_ANSWER_PHONE_CALLS = 69;
    public static final int APP_OPS__OP_ID__APP_OP_RUN_ANY_IN_BACKGROUND = 70;
    public static final int APP_OPS__OP_ID__APP_OP_CHANGE_WIFI_STATE = 71;
    public static final int APP_OPS__OP_ID__APP_OP_REQUEST_DELETE_PACKAGES = 72;
    public static final int APP_OPS__OP_ID__APP_OP_BIND_ACCESSIBILITY_SERVICE = 73;
    public static final int APP_OPS__OP_ID__APP_OP_ACCEPT_HANDOVER = 74;
    public static final int APP_OPS__OP_ID__APP_OP_MANAGE_IPSEC_TUNNELS = 75;
    public static final int APP_OPS__OP_ID__APP_OP_START_FOREGROUND = 76;
    public static final int APP_OPS__OP_ID__APP_OP_BLUETOOTH_SCAN = 77;
    public static final int APP_OPS__OP_ID__APP_OP_USE_BIOMETRIC = 78;
    public static final int APP_OPS__OP_ID__APP_OP_ACTIVITY_RECOGNITION = 79;
    public static final int APP_OPS__OP_ID__APP_OP_SMS_FINANCIAL_TRANSACTIONS = 80;
    public static final int APP_OPS__OP_ID__APP_OP_READ_MEDIA_AUDIO = 81;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_MEDIA_AUDIO = 82;
    public static final int APP_OPS__OP_ID__APP_OP_READ_MEDIA_VIDEO = 83;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_MEDIA_VIDEO = 84;
    public static final int APP_OPS__OP_ID__APP_OP_READ_MEDIA_IMAGES = 85;
    public static final int APP_OPS__OP_ID__APP_OP_WRITE_MEDIA_IMAGES = 86;
    public static final int APP_OPS__OP_ID__APP_OP_LEGACY_STORAGE = 87;
    public static final int APP_OPS__OP_ID__APP_OP_ACCESS_ACCESSIBILITY = 88;
    public static final int APP_OPS__OP_ID__APP_OP_READ_DEVICE_IDENTIFIERS = 89;
    public static final int APP_OPS__OP_ID__APP_OP_ACCESS_MEDIA_LOCATION = 90;
    public static final int APP_OPS__OP_ID__APP_OP_QUERY_ALL_PACKAGES = 91;
    public static final int APP_OPS__OP_ID__APP_OP_MANAGE_EXTERNAL_STORAGE = 92;
    public static final int APP_OPS__OP_ID__APP_OP_INTERACT_ACROSS_PROFILES = 93;
    public static final int APP_OPS__OP_ID__APP_OP_ACTIVATE_PLATFORM_VPN = 94;
    public static final int APP_OPS__OP_ID__APP_OP_LOADER_USAGE_STATS = 95;
    public static final int APP_OPS__OP_ID__APP_OP_DEPRECATED_1 = 96;
    public static final int APP_OPS__OP_ID__APP_OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED = 97;
    public static final int APP_OPS__OP_ID__APP_OP_AUTO_REVOKE_MANAGED_BY_INSTALLER = 98;
    public static final int APP_OPS__OP_ID__APP_OP_NO_ISOLATED_STORAGE = 99;
    public static final int APP_OPS__OP_ID__APP_OP_PHONE_CALL_MICROPHONE = 100;
    public static final int APP_OPS__OP_ID__APP_OP_PHONE_CALL_CAMERA = 101;
    public static final int APP_OPS__OP_ID__APP_OP_RECORD_AUDIO_HOTWORD = 102;
    public static final int APP_OPS__OP_ID__APP_OP_MANAGE_ONGOING_CALLS = 103;
    public static final int APP_OPS__OP_ID__APP_OP_MANAGE_CREDENTIALS = 104;
    public static final int APP_OPS__OP_ID__APP_OP_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER = 105;
    public static final int APP_OPS__OP_ID__APP_OP_RECORD_AUDIO_OUTPUT = 106;
    public static final int APP_OPS__OP_ID__APP_OP_SCHEDULE_EXACT_ALARM = 107;
    public static final int APP_OPS__OP_ID__APP_OP_FINE_LOCATION_SOURCE = 108;
    public static final int APP_OPS__OP_ID__APP_OP_COARSE_LOCATION_SOURCE = 109;
    public static final int APP_OPS__OP_ID__APP_OP_MANAGE_MEDIA = 110;
    public static final int APP_OPS__OP_ID__APP_OP_BLUETOOTH_CONNECT = 111;
    public static final int APP_OPS__OP_ID__APP_OP_UWB_RANGING = 112;
    public static final int APP_OPS__OP_ID__APP_OP_ACTIVITY_RECOGNITION_SOURCE = 113;
    public static final int APP_OPS__OP_ID__APP_OP_BLUETOOTH_ADVERTISE = 114;
    public static final int APP_OPS__OP_ID__APP_OP_RECORD_INCOMING_PHONE_AUDIO = 115;

    // Values for RuntimeAppOpAccess.sampling_strategy
    public static final int RUNTIME_APP_OP_ACCESS__SAMPLING_STRATEGY__DEFAULT = 0;
    public static final int RUNTIME_APP_OP_ACCESS__SAMPLING_STRATEGY__UNIFORM = 1;
    public static final int RUNTIME_APP_OP_ACCESS__SAMPLING_STRATEGY__RARELY_USED = 2;
    public static final int RUNTIME_APP_OP_ACCESS__SAMPLING_STRATEGY__BOOT_TIME_SAMPLING = 3;
    public static final int RUNTIME_APP_OP_ACCESS__SAMPLING_STRATEGY__UNIFORM_OPS = 4;

    // Values for RuntimeAppOpAccess.op
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_NONE = -1;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_COARSE_LOCATION = 0;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_FINE_LOCATION = 1;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_GPS = 2;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_VIBRATE = 3;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_CONTACTS = 4;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_CONTACTS = 5;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_CALL_LOG = 6;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_CALL_LOG = 7;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_CALENDAR = 8;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_CALENDAR = 9;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WIFI_SCAN = 10;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_POST_NOTIFICATION = 11;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_NEIGHBORING_CELLS = 12;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_CALL_PHONE = 13;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_SMS = 14;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_SMS = 15;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECEIVE_SMS = 16;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECEIVE_EMERGENCY_SMS = 17;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECEIVE_MMS = 18;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECEIVE_WAP_PUSH = 19;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_SEND_SMS = 20;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_ICC_SMS = 21;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_ICC_SMS = 22;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_SETTINGS = 23;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_SYSTEM_ALERT_WINDOW = 24;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACCESS_NOTIFICATIONS = 25;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_CAMERA = 26;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECORD_AUDIO = 27;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_PLAY_AUDIO = 28;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_CLIPBOARD = 29;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_CLIPBOARD = 30;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_TAKE_MEDIA_BUTTONS = 31;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_TAKE_AUDIO_FOCUS = 32;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_MASTER_VOLUME = 33;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_VOICE_VOLUME = 34;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_RING_VOLUME = 35;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_MEDIA_VOLUME = 36;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_ALARM_VOLUME = 37;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_NOTIFICATION_VOLUME = 38;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_BLUETOOTH_VOLUME = 39;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WAKE_LOCK = 40;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MONITOR_LOCATION = 41;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MONITOR_HIGH_POWER_LOCATION = 42;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_GET_USAGE_STATS = 43;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MUTE_MICROPHONE = 44;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_TOAST_WINDOW = 45;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_PROJECT_MEDIA = 46;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACTIVATE_VPN = 47;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_WALLPAPER = 48;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ASSIST_STRUCTURE = 49;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ASSIST_SCREENSHOT = 50;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_PHONE_STATE = 51;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ADD_VOICEMAIL = 52;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_USE_SIP = 53;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_PROCESS_OUTGOING_CALLS = 54;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_USE_FINGERPRINT = 55;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_BODY_SENSORS = 56;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_CELL_BROADCASTS = 57;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MOCK_LOCATION = 58;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_EXTERNAL_STORAGE = 59;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_EXTERNAL_STORAGE = 60;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_TURN_SCREEN_ON = 61;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_GET_ACCOUNTS = 62;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RUN_IN_BACKGROUND = 63;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUDIO_ACCESSIBILITY_VOLUME = 64;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_PHONE_NUMBERS = 65;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_REQUEST_INSTALL_PACKAGES = 66;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_PICTURE_IN_PICTURE = 67;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_INSTANT_APP_START_FOREGROUND = 68;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ANSWER_PHONE_CALLS = 69;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RUN_ANY_IN_BACKGROUND = 70;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_CHANGE_WIFI_STATE = 71;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_REQUEST_DELETE_PACKAGES = 72;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_BIND_ACCESSIBILITY_SERVICE = 73;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACCEPT_HANDOVER = 74;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MANAGE_IPSEC_TUNNELS = 75;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_START_FOREGROUND = 76;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_BLUETOOTH_SCAN = 77;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_USE_BIOMETRIC = 78;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACTIVITY_RECOGNITION = 79;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_SMS_FINANCIAL_TRANSACTIONS = 80;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_MEDIA_AUDIO = 81;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_MEDIA_AUDIO = 82;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_MEDIA_VIDEO = 83;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_MEDIA_VIDEO = 84;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_MEDIA_IMAGES = 85;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_WRITE_MEDIA_IMAGES = 86;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_LEGACY_STORAGE = 87;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACCESS_ACCESSIBILITY = 88;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_READ_DEVICE_IDENTIFIERS = 89;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACCESS_MEDIA_LOCATION = 90;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_QUERY_ALL_PACKAGES = 91;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MANAGE_EXTERNAL_STORAGE = 92;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_INTERACT_ACROSS_PROFILES = 93;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACTIVATE_PLATFORM_VPN = 94;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_LOADER_USAGE_STATS = 95;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_DEPRECATED_1 = 96;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED = 97;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_AUTO_REVOKE_MANAGED_BY_INSTALLER = 98;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_NO_ISOLATED_STORAGE = 99;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_PHONE_CALL_MICROPHONE = 100;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_PHONE_CALL_CAMERA = 101;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECORD_AUDIO_HOTWORD = 102;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MANAGE_ONGOING_CALLS = 103;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MANAGE_CREDENTIALS = 104;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER = 105;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECORD_AUDIO_OUTPUT = 106;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_SCHEDULE_EXACT_ALARM = 107;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_FINE_LOCATION_SOURCE = 108;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_COARSE_LOCATION_SOURCE = 109;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_MANAGE_MEDIA = 110;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_BLUETOOTH_CONNECT = 111;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_UWB_RANGING = 112;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_ACTIVITY_RECOGNITION_SOURCE = 113;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_BLUETOOTH_ADVERTISE = 114;
    public static final int RUNTIME_APP_OP_ACCESS__OP__APP_OP_RECORD_INCOMING_PHONE_AUDIO = 115;

    // Values for AttributedAppOps.op
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_NONE = -1;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_COARSE_LOCATION = 0;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_FINE_LOCATION = 1;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_GPS = 2;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_VIBRATE = 3;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_CONTACTS = 4;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_CONTACTS = 5;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_CALL_LOG = 6;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_CALL_LOG = 7;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_CALENDAR = 8;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_CALENDAR = 9;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WIFI_SCAN = 10;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_POST_NOTIFICATION = 11;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_NEIGHBORING_CELLS = 12;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_CALL_PHONE = 13;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_SMS = 14;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_SMS = 15;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECEIVE_SMS = 16;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECEIVE_EMERGENCY_SMS = 17;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECEIVE_MMS = 18;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECEIVE_WAP_PUSH = 19;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_SEND_SMS = 20;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_ICC_SMS = 21;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_ICC_SMS = 22;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_SETTINGS = 23;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_SYSTEM_ALERT_WINDOW = 24;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACCESS_NOTIFICATIONS = 25;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_CAMERA = 26;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECORD_AUDIO = 27;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_PLAY_AUDIO = 28;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_CLIPBOARD = 29;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_CLIPBOARD = 30;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_TAKE_MEDIA_BUTTONS = 31;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_TAKE_AUDIO_FOCUS = 32;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_MASTER_VOLUME = 33;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_VOICE_VOLUME = 34;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_RING_VOLUME = 35;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_MEDIA_VOLUME = 36;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_ALARM_VOLUME = 37;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_NOTIFICATION_VOLUME = 38;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_BLUETOOTH_VOLUME = 39;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WAKE_LOCK = 40;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MONITOR_LOCATION = 41;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MONITOR_HIGH_POWER_LOCATION = 42;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_GET_USAGE_STATS = 43;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MUTE_MICROPHONE = 44;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_TOAST_WINDOW = 45;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_PROJECT_MEDIA = 46;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACTIVATE_VPN = 47;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_WALLPAPER = 48;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ASSIST_STRUCTURE = 49;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ASSIST_SCREENSHOT = 50;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_PHONE_STATE = 51;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ADD_VOICEMAIL = 52;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_USE_SIP = 53;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_PROCESS_OUTGOING_CALLS = 54;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_USE_FINGERPRINT = 55;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_BODY_SENSORS = 56;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_CELL_BROADCASTS = 57;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MOCK_LOCATION = 58;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_EXTERNAL_STORAGE = 59;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_EXTERNAL_STORAGE = 60;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_TURN_SCREEN_ON = 61;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_GET_ACCOUNTS = 62;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RUN_IN_BACKGROUND = 63;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUDIO_ACCESSIBILITY_VOLUME = 64;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_PHONE_NUMBERS = 65;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_REQUEST_INSTALL_PACKAGES = 66;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_PICTURE_IN_PICTURE = 67;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_INSTANT_APP_START_FOREGROUND = 68;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ANSWER_PHONE_CALLS = 69;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RUN_ANY_IN_BACKGROUND = 70;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_CHANGE_WIFI_STATE = 71;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_REQUEST_DELETE_PACKAGES = 72;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_BIND_ACCESSIBILITY_SERVICE = 73;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACCEPT_HANDOVER = 74;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MANAGE_IPSEC_TUNNELS = 75;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_START_FOREGROUND = 76;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_BLUETOOTH_SCAN = 77;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_USE_BIOMETRIC = 78;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACTIVITY_RECOGNITION = 79;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_SMS_FINANCIAL_TRANSACTIONS = 80;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_MEDIA_AUDIO = 81;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_MEDIA_AUDIO = 82;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_MEDIA_VIDEO = 83;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_MEDIA_VIDEO = 84;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_MEDIA_IMAGES = 85;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_WRITE_MEDIA_IMAGES = 86;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_LEGACY_STORAGE = 87;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACCESS_ACCESSIBILITY = 88;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_READ_DEVICE_IDENTIFIERS = 89;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACCESS_MEDIA_LOCATION = 90;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_QUERY_ALL_PACKAGES = 91;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MANAGE_EXTERNAL_STORAGE = 92;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_INTERACT_ACROSS_PROFILES = 93;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACTIVATE_PLATFORM_VPN = 94;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_LOADER_USAGE_STATS = 95;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_DEPRECATED_1 = 96;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED = 97;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_AUTO_REVOKE_MANAGED_BY_INSTALLER = 98;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_NO_ISOLATED_STORAGE = 99;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_PHONE_CALL_MICROPHONE = 100;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_PHONE_CALL_CAMERA = 101;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECORD_AUDIO_HOTWORD = 102;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MANAGE_ONGOING_CALLS = 103;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MANAGE_CREDENTIALS = 104;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER = 105;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECORD_AUDIO_OUTPUT = 106;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_SCHEDULE_EXACT_ALARM = 107;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_FINE_LOCATION_SOURCE = 108;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_COARSE_LOCATION_SOURCE = 109;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_MANAGE_MEDIA = 110;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_BLUETOOTH_CONNECT = 111;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_UWB_RANGING = 112;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_ACTIVITY_RECOGNITION_SOURCE = 113;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_BLUETOOTH_ADVERTISE = 114;
    public static final int ATTRIBUTED_APP_OPS__OP__APP_OP_RECORD_INCOMING_PHONE_AUDIO = 115;

    // Values for SettingSnapshot.type
    public static final int SETTING_SNAPSHOT__TYPE__NOTASSIGNED = 0;
    public static final int SETTING_SNAPSHOT__TYPE__ASSIGNED_BOOL_TYPE = 1;
    public static final int SETTING_SNAPSHOT__TYPE__ASSIGNED_INT_TYPE = 2;
    public static final int SETTING_SNAPSHOT__TYPE__ASSIGNED_FLOAT_TYPE = 3;
    public static final int SETTING_SNAPSHOT__TYPE__ASSIGNED_STRING_TYPE = 4;

    // Values for DataUsageBytesTransfer.opportunistic_data_sub
    public static final int DATA_USAGE_BYTES_TRANSFER__OPPORTUNISTIC_DATA_SUB__UNKNOWN = 0;
    public static final int DATA_USAGE_BYTES_TRANSFER__OPPORTUNISTIC_DATA_SUB__ALL = 1;
    public static final int DATA_USAGE_BYTES_TRANSFER__OPPORTUNISTIC_DATA_SUB__OPPORTUNISTIC = 2;
    public static final int DATA_USAGE_BYTES_TRANSFER__OPPORTUNISTIC_DATA_SUB__NOT_OPPORTUNISTIC = 3;

    // Values for DNDModeProto.zen_mode
    public static final int DNDMODE_PROTO__ZEN_MODE__ROOT_CONFIG = -1;
    public static final int DNDMODE_PROTO__ZEN_MODE__ZEN_MODE_OFF = 0;
    public static final int DNDMODE_PROTO__ZEN_MODE__ZEN_MODE_IMPORTANT_INTERRUPTIONS = 1;
    public static final int DNDMODE_PROTO__ZEN_MODE__ZEN_MODE_NO_INTERRUPTIONS = 2;
    public static final int DNDMODE_PROTO__ZEN_MODE__ZEN_MODE_ALARMS = 3;

    // Values for DeviceRotatedData.proposed_orientation
    public static final int DEVICE_ROTATED_DATA__PROPOSED_ORIENTATION__UNKNOWN = 0;
    public static final int DEVICE_ROTATED_DATA__PROPOSED_ORIENTATION__ROTATION_0 = 1;
    public static final int DEVICE_ROTATED_DATA__PROPOSED_ORIENTATION__ROTATION_90 = 2;
    public static final int DEVICE_ROTATED_DATA__PROPOSED_ORIENTATION__ROTATION_180 = 3;
    public static final int DEVICE_ROTATED_DATA__PROPOSED_ORIENTATION__ROTATION_270 = 4;

    // Values for CpuCyclesPerThreadGroupCluster.thread_group
    public static final int CPU_CYCLES_PER_THREAD_GROUP_CLUSTER__THREAD_GROUP__UNKNOWN_THREAD_GROUP = 0;
    public static final int CPU_CYCLES_PER_THREAD_GROUP_CLUSTER__THREAD_GROUP__SYSTEM_SERVER_BINDER = 1;
    public static final int CPU_CYCLES_PER_THREAD_GROUP_CLUSTER__THREAD_GROUP__SYSTEM_SERVER = 2;
    public static final int CPU_CYCLES_PER_THREAD_GROUP_CLUSTER__THREAD_GROUP__SURFACE_FLINGER = 3;

    // Values for TimeZoneDetectorState.detection_mode
    public static final int TIME_ZONE_DETECTOR_STATE__DETECTION_MODE__UNKNOWN = 0;
    public static final int TIME_ZONE_DETECTOR_STATE__DETECTION_MODE__MANUAL = 1;
    public static final int TIME_ZONE_DETECTOR_STATE__DETECTION_MODE__TELEPHONY = 2;
    public static final int TIME_ZONE_DETECTOR_STATE__DETECTION_MODE__GEO = 3;

    // Values for Keystore2StorageStats.storage_type
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__STORAGE_UNSPECIFIED = 0;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__KEY_ENTRY = 1;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__KEY_ENTRY_ID_INDEX = 2;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__KEY_ENTRY_DOMAIN_NAMESPACE_INDEX = 3;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__BLOB_ENTRY = 4;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__BLOB_ENTRY_KEY_ENTRY_ID_INDEX = 5;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__KEY_PARAMETER = 6;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__KEY_PARAMETER_KEY_ENTRY_ID_INDEX = 7;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__KEY_METADATA = 8;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__KEY_METADATA_KEY_ENTRY_ID_INDEX = 9;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__GRANT = 10;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__AUTH_TOKEN = 11;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__BLOB_METADATA = 12;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__BLOB_METADATA_BLOB_ENTRY_ID_INDEX = 13;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__METADATA = 14;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__DATABASE = 15;
    public static final int KEYSTORE2_STORAGE_STATS__STORAGE_TYPE__LEGACY_STORAGE = 16;

    // Values for RkpPoolStats.security_level
    public static final int RKP_POOL_STATS__SECURITY_LEVEL__SECURITY_LEVEL_UNSPECIFIED = 0;
    public static final int RKP_POOL_STATS__SECURITY_LEVEL__SECURITY_LEVEL_SOFTWARE = 1;
    public static final int RKP_POOL_STATS__SECURITY_LEVEL__SECURITY_LEVEL_TRUSTED_ENVIRONMENT = 2;
    public static final int RKP_POOL_STATS__SECURITY_LEVEL__SECURITY_LEVEL_STRONGBOX = 3;
    public static final int RKP_POOL_STATS__SECURITY_LEVEL__SECURITY_LEVEL_KEYSTORE = 4;

    // Values for Keystore2KeyCreationWithGeneralInfo.algorithm
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__ALGORITHM__ALGORITHM_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__ALGORITHM__RSA = 1;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__ALGORITHM__EC = 3;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__ALGORITHM__AES = 32;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__ALGORITHM__TRIPLE_DES = 33;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__ALGORITHM__HMAC = 128;

    // Values for Keystore2KeyCreationWithGeneralInfo.ec_curve
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__EC_CURVE__EC_CURVE_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__EC_CURVE__P_224 = 1;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__EC_CURVE__P_256 = 2;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__EC_CURVE__P_384 = 3;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__EC_CURVE__P_521 = 4;

    // Values for Keystore2KeyCreationWithGeneralInfo.key_origin
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__KEY_ORIGIN__ORIGIN_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__KEY_ORIGIN__GENERATED = 1;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__KEY_ORIGIN__DERIVED = 2;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__KEY_ORIGIN__IMPORTED = 3;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__KEY_ORIGIN__RESERVED = 4;
    public static final int KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO__KEY_ORIGIN__SECURELY_IMPORTED = 5;

    // Values for Keystore2KeyCreationWithAuthInfo.user_auth_type
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__USER_AUTH_TYPE__AUTH_TYPE_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__USER_AUTH_TYPE__NONE = 1;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__USER_AUTH_TYPE__PASSWORD = 2;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__USER_AUTH_TYPE__FINGERPRINT = 3;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__USER_AUTH_TYPE__ANY = 5;

    // Values for Keystore2KeyCreationWithAuthInfo.security_level
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__SECURITY_LEVEL__SECURITY_LEVEL_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__SECURITY_LEVEL__SECURITY_LEVEL_SOFTWARE = 1;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__SECURITY_LEVEL__SECURITY_LEVEL_TRUSTED_ENVIRONMENT = 2;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__SECURITY_LEVEL__SECURITY_LEVEL_STRONGBOX = 3;
    public static final int KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO__SECURITY_LEVEL__SECURITY_LEVEL_KEYSTORE = 4;

    // Values for Keystore2KeyCreationWithPurposeAndModesInfo.algorithm
    public static final int KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO__ALGORITHM__ALGORITHM_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO__ALGORITHM__RSA = 1;
    public static final int KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO__ALGORITHM__EC = 3;
    public static final int KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO__ALGORITHM__AES = 32;
    public static final int KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO__ALGORITHM__TRIPLE_DES = 33;
    public static final int KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO__ALGORITHM__HMAC = 128;

    // Values for Keystore2KeyOperationWithPurposeAndModesInfo.purpose
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__KEY_PURPOSE_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__ENCRYPT = 1;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__DECRYPT = 2;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__SIGN = 3;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__VERIFY = 4;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__WRAP_KEY = 6;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__AGREE_KEY = 7;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO__PURPOSE__ATTEST_KEY = 8;

    // Values for Keystore2KeyOperationWithGeneralInfo.outcome
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__OUTCOME__OUTCOME_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__OUTCOME__DROPPED = 1;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__OUTCOME__SUCCESS = 2;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__OUTCOME__ABORT = 3;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__OUTCOME__PRUNED = 4;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__OUTCOME__ERROR = 5;

    // Values for Keystore2KeyOperationWithGeneralInfo.security_level
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__SECURITY_LEVEL__SECURITY_LEVEL_UNSPECIFIED = 0;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__SECURITY_LEVEL__SECURITY_LEVEL_SOFTWARE = 1;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__SECURITY_LEVEL__SECURITY_LEVEL_TRUSTED_ENVIRONMENT = 2;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__SECURITY_LEVEL__SECURITY_LEVEL_STRONGBOX = 3;
    public static final int KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO__SECURITY_LEVEL__SECURITY_LEVEL_KEYSTORE = 4;

    // Values for RkpErrorStats.rkp_error
    public static final int RKP_ERROR_STATS__RKP_ERROR__RKP_ERROR_UNSPECIFIED = 0;
    public static final int RKP_ERROR_STATS__RKP_ERROR__OUT_OF_KEYS = 1;
    public static final int RKP_ERROR_STATS__RKP_ERROR__FALL_BACK_DURING_HYBRID = 2;

    // Values for AccessibilityShortcutStats.software_shortcut_type
    public static final int ACCESSIBILITY_SHORTCUT_STATS__SOFTWARE_SHORTCUT_TYPE__UNKNOWN_TYPE = 0;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__SOFTWARE_SHORTCUT_TYPE__A11Y_BUTTON = 1;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__SOFTWARE_SHORTCUT_TYPE__VOLUME_KEY = 2;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__SOFTWARE_SHORTCUT_TYPE__TRIPLE_TAP = 3;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__SOFTWARE_SHORTCUT_TYPE__A11Y_BUTTON_LONG_PRESS = 4;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__SOFTWARE_SHORTCUT_TYPE__A11Y_FLOATING_MENU = 5;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__SOFTWARE_SHORTCUT_TYPE__A11Y_GESTURE = 6;

    // Values for AccessibilityShortcutStats.hardware_shortcut_type
    public static final int ACCESSIBILITY_SHORTCUT_STATS__HARDWARE_SHORTCUT_TYPE__UNKNOWN_TYPE = 0;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__HARDWARE_SHORTCUT_TYPE__A11Y_BUTTON = 1;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__HARDWARE_SHORTCUT_TYPE__VOLUME_KEY = 2;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__HARDWARE_SHORTCUT_TYPE__TRIPLE_TAP = 3;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__HARDWARE_SHORTCUT_TYPE__A11Y_BUTTON_LONG_PRESS = 4;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__HARDWARE_SHORTCUT_TYPE__A11Y_FLOATING_MENU = 5;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__HARDWARE_SHORTCUT_TYPE__A11Y_GESTURE = 6;

    // Values for AccessibilityShortcutStats.gesture_shortcut_type
    public static final int ACCESSIBILITY_SHORTCUT_STATS__GESTURE_SHORTCUT_TYPE__UNKNOWN_TYPE = 0;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__GESTURE_SHORTCUT_TYPE__A11Y_BUTTON = 1;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__GESTURE_SHORTCUT_TYPE__VOLUME_KEY = 2;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__GESTURE_SHORTCUT_TYPE__TRIPLE_TAP = 3;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__GESTURE_SHORTCUT_TYPE__A11Y_BUTTON_LONG_PRESS = 4;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__GESTURE_SHORTCUT_TYPE__A11Y_FLOATING_MENU = 5;
    public static final int ACCESSIBILITY_SHORTCUT_STATS__GESTURE_SHORTCUT_TYPE__A11Y_GESTURE = 6;

    // Annotation constants.
    public static final byte ANNOTATION_ID_IS_UID = StatsLog.ANNOTATION_ID_IS_UID;
    public static final byte ANNOTATION_ID_TRUNCATE_TIMESTAMP = StatsLog.ANNOTATION_ID_TRUNCATE_TIMESTAMP;
    public static final byte ANNOTATION_ID_PRIMARY_FIELD = StatsLog.ANNOTATION_ID_PRIMARY_FIELD;
    public static final byte ANNOTATION_ID_EXCLUSIVE_STATE = StatsLog.ANNOTATION_ID_EXCLUSIVE_STATE;
    public static final byte ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID = StatsLog.ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID;
    public static final byte ANNOTATION_ID_TRIGGER_STATE_RESET = StatsLog.ANNOTATION_ID_TRIGGER_STATE_RESET;
    public static final byte ANNOTATION_ID_STATE_NESTED = StatsLog.ANNOTATION_ID_STATE_NESTED;

    // Write methods
    public static void write(int code) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, byte[] arg1, float arg2, int arg3, int arg4, int arg5, float arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeByteArray(null == arg1 ? new byte[0] : arg1);
        builder.writeFloat(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeFloat(arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, int arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        if (MOBILE_RADIO_POWER_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
        }
        if (AUDIO_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
        }
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeInt(arg2);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, int arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeInt(arg2);
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, int arg2, int arg3, java.lang.String arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, int arg2, long arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeInt(arg2);
        builder.writeLong(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, int arg2, java.lang.String arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        if (WAKELOCK_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID, true);
        }
        builder.writeInt(arg2);
        if (WAKELOCK_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        builder.writeString(arg3);
        if (WAKELOCK_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        builder.writeInt(arg4);
        if (WAKELOCK_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, true);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, int arg2, java.lang.String arg3, int arg4, int arg5, int arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        if (TIF_TUNE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID, true);
        }
        builder.writeInt(arg2);
        if (TIF_TUNE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        builder.writeString(arg3);
        if (TIF_TUNE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        if (TIF_TUNE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        builder.writeInt(arg6);
        if (TIF_TUNE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, java.lang.String arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeString(arg2);
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, java.lang.String arg2, int arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, java.lang.String arg2, int arg3, int arg4, int arg5, int arg6, boolean arg7, boolean arg8, boolean arg9, boolean arg10, boolean arg11, boolean arg12, boolean arg13, boolean arg14, boolean arg15, boolean arg16, int arg17) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeBoolean(arg7);
        builder.writeBoolean(arg8);
        builder.writeBoolean(arg9);
        builder.writeBoolean(arg10);
        builder.writeBoolean(arg11);
        builder.writeBoolean(arg12);
        builder.writeBoolean(arg13);
        builder.writeBoolean(arg14);
        builder.writeBoolean(arg15);
        builder.writeBoolean(arg16);
        builder.writeInt(arg17);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int[] uid, java.lang.String[] tag, java.lang.String arg2, java.lang.String arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeAttributionChain(
                null == uid ? new int[0] : uid,
                null == tag ? new String[0] : tag);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, boolean arg1, boolean arg2, boolean arg3, boolean arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeBoolean(arg2);
        builder.writeBoolean(arg3);
        builder.writeBoolean(arg4);
        builder.writeInt(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, boolean arg1, int arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, boolean arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, boolean arg1, java.lang.String arg2, long arg3, int arg4, long arg5, int arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeString(arg2);
        builder.writeLong(arg3);
        builder.writeInt(arg4);
        builder.writeLong(arg5);
        builder.writeInt(arg6);
        if (PACKAGE_INSTALLER_V2_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, boolean arg1, java.lang.String arg2, long arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeString(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, boolean arg1, java.lang.String arg2, java.lang.String arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        if (PHONE_SIGNAL_STRENGTH_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
        }
        builder.writeInt(arg1);
        if (ACTIVITY_MANAGER_SLEEP_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        if (MEMORY_FACTOR_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
        }
        if (BATTERY_SAVER_MODE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        if (DEVICE_IDLE_MODE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        if (DEVICE_IDLING_MODE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        if (SCREEN_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        if (CHARGING_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        if (PLUGGED_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, boolean arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (DEVICE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        builder.writeBoolean(arg2);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, boolean arg2, boolean arg3, boolean arg4, boolean arg5, boolean arg6, int arg7, boolean arg8, int arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (ALARM_SCHEDULED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeBoolean(arg2);
        builder.writeBoolean(arg3);
        builder.writeBoolean(arg4);
        builder.writeBoolean(arg5);
        builder.writeBoolean(arg6);
        builder.writeInt(arg7);
        builder.writeBoolean(arg8);
        builder.writeInt(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, boolean arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeBoolean(arg2);
        builder.writeInt(arg3);
        if (HOTWORD_DETECTOR_CREATE_REQUESTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (UID_PROCESS_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        if (TV_TUNER_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (APP_COMPAT_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (CAMERA_COMPAT_CONTROL_EVENT_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        if (UID_PROCESS_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        if (APP_COMPAT_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, boolean arg3, boolean arg4, boolean arg5, int arg6, long arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeBoolean(arg4);
        builder.writeBoolean(arg5);
        builder.writeInt(arg6);
        builder.writeLong(arg7);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, boolean arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, boolean arg3, int arg4, boolean arg5, int arg6, long arg7, boolean arg8, int arg9, float arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        builder.writeBoolean(arg5);
        builder.writeInt(arg6);
        builder.writeLong(arg7);
        builder.writeBoolean(arg8);
        builder.writeInt(arg9);
        builder.writeFloat(arg10);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, boolean arg3, int arg4, int arg5, int arg6, int arg7, boolean arg8, int arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeBoolean(arg8);
        builder.writeInt(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, boolean arg3, int arg4, int arg5, int arg6, int arg7, boolean arg8, long arg9, int arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeBoolean(arg8);
        builder.writeLong(arg9);
        builder.writeInt(arg10);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (TV_CAS_SESSION_OPEN_STATUS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (REBOOT_ESCROW_PREPARATION_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (REBOOT_ESCROW_LSKF_CAPTURE_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        if (HOTWORD_DETECTOR_EVENTS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, boolean arg4, boolean arg5, boolean arg6, int arg7, int arg8, java.lang.String arg9, java.lang.String arg10, int arg11, int arg12, boolean arg13, boolean arg14, int arg15) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeBoolean(arg4);
        builder.writeBoolean(arg5);
        builder.writeBoolean(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeString(arg9);
        builder.writeString(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeBoolean(arg13);
        builder.writeBoolean(arg14);
        builder.writeInt(arg15);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, boolean arg5, boolean arg6, int arg7, int arg8) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        if (REBOOT_ESCROW_REBOOT_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeBoolean(arg5);
        builder.writeBoolean(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (FOREGROUND_SERVICE_APP_OP_SESSION_ENDED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (TV_TUNER_DVR_STATUS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (HDMI_CEC_MESSAGE_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, float arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeFloat(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        if (SPLITSCREEN_UI_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        if (SPLITSCREEN_UI_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg9);
        builder.writeInt(arg10);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, java.lang.String arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);
        builder.writeInt(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, java.lang.String arg4, java.lang.String arg5, boolean arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);
        builder.writeString(arg5);
        builder.writeBoolean(arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, long arg3, boolean arg4, int arg5, float arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeLong(arg3);
        builder.writeBoolean(arg4);
        builder.writeInt(arg5);
        builder.writeFloat(arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, float arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16, int arg17) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeFloat(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeInt(arg17);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeString(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        if (UI_EVENT_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3, int arg4, int arg5, boolean arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        if (ASSISTANT_INVOCATION_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeBoolean(arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3, int arg4, int arg5, int arg6, boolean arg7, int arg8, boolean arg9, boolean arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        if (NOTIFICATION_CHANNEL_MODIFIED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeBoolean(arg7);
        builder.writeInt(arg8);
        builder.writeBoolean(arg9);
        builder.writeBoolean(arg10);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3, int arg4, int arg5, int arg6, int arg7, int arg8, boolean arg9, java.lang.String arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16, int arg17, int arg18, int arg19, int arg20, float arg21) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        if (NOTIFICATION_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeBoolean(arg9);
        builder.writeString(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeInt(arg17);
        builder.writeInt(arg18);
        builder.writeInt(arg19);
        builder.writeInt(arg20);
        builder.writeFloat(arg21);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3, int arg4, int arg5, int arg6, int arg7, long arg8, int arg9, int arg10, int arg11, int arg12, java.lang.String arg13) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeLong(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeString(arg13);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3, int arg4, long arg5, int arg6, int arg7, java.lang.String arg8, java.lang.String arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_START_TIME == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeLong(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeString(arg8);
        builder.writeString(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, java.lang.String arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeString(arg3);
        builder.writeLong(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeLong(arg2);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeLong(arg2);
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2, int arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_COMPATIBILITY_CHANGE_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeLong(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2, long arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2, long arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (BLOB_COMMITTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (BLOB_LEASED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (BLOB_OPENED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2, long arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2, long arg3, long arg4, long arg5, long arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, boolean arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (OVERLAY_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        builder.writeString(arg2);
        if (OVERLAY_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        if (OVERLAY_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_LIFE_CYCLE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (PICTURE_IN_PICTURE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, boolean arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (HIDDEN_API_USED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeBoolean(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, boolean arg4, int arg5, int arg6, int arg7, int arg8, int arg9, boolean arg10, boolean arg11, int arg12, int arg13, int arg14) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (FOREGROUND_SERVICE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeBoolean(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeBoolean(arg10);
        builder.writeBoolean(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, boolean arg4, long arg5, byte[] arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeBoolean(arg4);
        builder.writeLong(arg5);
        builder.writeByteArray(null == arg6 ? new byte[0] : arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, int arg4, int arg5, int arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_PROCESS_DIED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, int arg4, java.lang.String arg5, byte[] arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeString(arg5);
        builder.writeByteArray(null == arg6 ? new byte[0] : arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (LMK_KILL_OCCURRED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, int arg13, long arg14, int arg15, int arg16, long arg17, long arg18) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeLong(arg11);
        builder.writeLong(arg12);
        builder.writeInt(arg13);
        builder.writeLong(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeLong(arg17);
        builder.writeLong(arg18);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, java.lang.String arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_START_CANCELED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, java.lang.String arg4, boolean arg5, long arg6, int arg7, int arg8, int arg9, int arg10, boolean arg11, boolean arg12, int arg13) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_START_FULLY_DRAWN == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);
        builder.writeBoolean(arg5);
        builder.writeLong(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeBoolean(arg11);
        builder.writeBoolean(arg12);
        builder.writeInt(arg13);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, java.lang.String arg4, int arg5, int arg6, boolean arg7, int arg8, int arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeBoolean(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, java.lang.String arg4, java.lang.String arg5, boolean arg6, long arg7, int arg8, int arg9, int arg10, int arg11, int arg12, java.lang.String arg13, int arg14, int arg15, int arg16, int arg17, boolean arg18, boolean arg19, boolean arg20, int arg21, long arg22) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_START_OCCURRED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);
        builder.writeString(arg5);
        builder.writeBoolean(arg6);
        builder.writeLong(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeString(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeInt(arg17);
        builder.writeBoolean(arg18);
        builder.writeBoolean(arg19);
        builder.writeBoolean(arg20);
        builder.writeInt(arg21);
        builder.writeLong(arg22);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, int arg3, java.lang.String arg4, java.lang.String arg5, java.lang.String arg6, int arg7, int arg8, int arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PACKET_WAKEUP_OCCURRED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);
        builder.writeString(arg5);
        builder.writeString(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, long arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (USB_CONNECTOR_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
            builder.addBooleanAnnotation(ANNOTATION_ID_STATE_NESTED, false);
        }
        builder.writeString(arg2);
        if (USB_CONNECTOR_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_PRIMARY_FIELD, true);
        }
        builder.writeLong(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (SERVICE_LAUNCH_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (ACTIVITY_FOREGROUND_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (SERVICE_STATE_CHANGED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (APP_USAGE_EVENT_OCCURRED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (WTF_OCCURRED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4, long arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeLong(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4, java.lang.String arg5, int arg6, int arg7, int arg8, boolean arg9, float arg10, long arg11, int arg12, int arg13, boolean arg14, long arg15, long arg16, int arg17, int arg18, int arg19, long arg20, int arg21, long arg22) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_CRASH_OCCURRED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeString(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeBoolean(arg9);
        builder.writeFloat(arg10);
        builder.writeLong(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeBoolean(arg14);
        builder.writeLong(arg15);
        builder.writeLong(arg16);
        builder.writeInt(arg17);
        builder.writeInt(arg18);
        builder.writeInt(arg19);
        builder.writeLong(arg20);
        builder.writeInt(arg21);
        builder.writeLong(arg22);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeLong(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, long arg4, long arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, long arg4, long arg5, long arg6, int arg7, long arg8, long arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeInt(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, long arg4, long arg5, long arg6, long arg7, long arg8) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_START_MEMORY_STATE_CAPTURED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, int arg5, int arg6, int arg7, java.lang.String arg8, boolean arg9, float arg10, long arg11, int arg12, int arg13, boolean arg14, long arg15, long arg16, int arg17, int arg18, int arg19, long arg20, int arg21, long arg22) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (ANR_OCCURRED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeString(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeString(arg8);
        builder.writeBoolean(arg9);
        builder.writeFloat(arg10);
        builder.writeLong(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeBoolean(arg14);
        builder.writeLong(arg15);
        builder.writeLong(arg16);
        builder.writeInt(arg17);
        builder.writeInt(arg18);
        builder.writeInt(arg19);
        builder.writeLong(arg20);
        builder.writeInt(arg21);
        builder.writeLong(arg22);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, android.util.SparseArray<Object> valueMap) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);

        // Write KeyValuePairs.
        final int count = valueMap.size();
        android.util.SparseIntArray intMap = null;
        android.util.SparseLongArray longMap = null;
        android.util.SparseArray<String> stringMap = null;
        android.util.SparseArray<Float> floatMap = null;
        for (int i = 0; i < count; i++) {
            final int key = valueMap.keyAt(i);
            final Object value = valueMap.valueAt(i);
            if (value instanceof Integer) {
                if (null == intMap) {
                    intMap = new android.util.SparseIntArray();
                }
                intMap.put(key, (Integer) value);
            } else if (value instanceof Long) {
                if (null == longMap) {
                    longMap = new android.util.SparseLongArray();
                }
                longMap.put(key, (Long) value);
            } else if (value instanceof String) {
                if (null == stringMap) {
                    stringMap = new android.util.SparseArray<>();
                }
                stringMap.put(key, (String) value);
            } else if (value instanceof Float) {
                if (null == floatMap) {
                    floatMap = new android.util.SparseArray<>();
                }
                floatMap.put(key, (Float) value);
            }
        }
        builder.writeKeyValuePairs(intMap, longMap, stringMap, floatMap);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, long arg1) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        if (APP_DIED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_EXCLUSIVE_STATE, true);
        }

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, long arg1, int arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, long arg1, int arg2, int arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, long arg1, int arg2, int arg3, int arg4, int arg5, int arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, long arg1, int arg2, java.lang.String arg3, int arg4, java.lang.String arg5, int arg6, boolean arg7, int arg8, int arg9, int arg10, long arg11, long arg12, boolean arg13, int arg14, byte[] arg15, byte[] arg16, byte[] arg17, byte[] arg18, byte[] arg19) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeInt(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeString(arg5);
        builder.writeInt(arg6);
        builder.writeBoolean(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeLong(arg11);
        builder.writeLong(arg12);
        builder.writeBoolean(arg13);
        builder.writeInt(arg14);
        builder.writeByteArray(null == arg15 ? new byte[0] : arg15);
        builder.writeByteArray(null == arg16 ? new byte[0] : arg16);
        builder.writeByteArray(null == arg17 ? new byte[0] : arg17);
        builder.writeByteArray(null == arg18 ? new byte[0] : arg18);
        builder.writeByteArray(null == arg19 ? new byte[0] : arg19);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, long arg1, long arg2, int arg3, boolean arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeLong(arg2);
        builder.writeInt(arg3);
        builder.writeBoolean(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, long arg1, java.lang.String arg2, long arg3, long arg4, java.lang.String arg5, java.lang.String arg6, java.lang.String arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16, int arg17, int arg18, java.lang.String arg19, long arg20, long arg21, long arg22, long arg23, long arg24, int arg25, int arg26, java.lang.String arg27, int arg28, long arg29, long arg30, java.lang.String arg31, int arg32, int arg33, long arg34, long arg35, long arg36, long arg37, long arg38, int arg39, float arg40, float arg41, float arg42, int arg43, int arg44, int arg45, int arg46, int arg47, int arg48, int arg49, int arg50, int arg51, int arg52, int arg53, int arg54, int arg55, int arg56, int arg57) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeString(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeString(arg5);
        builder.writeString(arg6);
        builder.writeString(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeInt(arg17);
        builder.writeInt(arg18);
        builder.writeString(arg19);
        builder.writeLong(arg20);
        builder.writeLong(arg21);
        builder.writeLong(arg22);
        builder.writeLong(arg23);
        builder.writeLong(arg24);
        builder.writeInt(arg25);
        builder.writeInt(arg26);
        builder.writeString(arg27);
        builder.writeInt(arg28);
        builder.writeLong(arg29);
        builder.writeLong(arg30);
        builder.writeString(arg31);
        builder.writeInt(arg32);
        builder.writeInt(arg33);
        builder.writeLong(arg34);
        builder.writeLong(arg35);
        builder.writeLong(arg36);
        builder.writeLong(arg37);
        builder.writeLong(arg38);
        builder.writeInt(arg39);
        builder.writeFloat(arg40);
        builder.writeFloat(arg41);
        builder.writeFloat(arg42);
        builder.writeInt(arg43);
        builder.writeInt(arg44);
        builder.writeInt(arg45);
        builder.writeInt(arg46);
        builder.writeInt(arg47);
        builder.writeInt(arg48);
        builder.writeInt(arg49);
        builder.writeInt(arg50);
        builder.writeInt(arg51);
        builder.writeInt(arg52);
        builder.writeInt(arg53);
        builder.writeInt(arg54);
        builder.writeInt(arg55);
        builder.writeInt(arg56);
        builder.writeInt(arg57);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, boolean arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, int arg3, int arg4, boolean arg5, boolean arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeBoolean(arg5);
        builder.writeBoolean(arg6);
        builder.writeInt(arg7);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, int arg3, int arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, int arg3, int arg4, int arg5, java.lang.String arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeString(arg6);
        builder.writeInt(arg7);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, int arg3, float arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeFloat(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, java.lang.String arg3, int arg4, int arg5, int arg6, boolean arg7, int arg8, int arg9, boolean arg10, int arg11, int arg12, java.lang.String arg13) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeBoolean(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeBoolean(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeString(arg13);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, java.lang.String arg3, int arg4, java.lang.String arg5, int arg6, boolean arg7, boolean arg8, boolean arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeString(arg5);
        builder.writeInt(arg6);
        builder.writeBoolean(arg7);
        builder.writeBoolean(arg8);
        builder.writeBoolean(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, long arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeLong(arg2);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, long arg2, long arg3, boolean arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeBoolean(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, java.lang.String arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeString(arg2);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, java.lang.String arg2, int arg3, int arg4, int arg5, int arg6, float arg7, float arg8, boolean arg9, boolean arg10, boolean arg11) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeFloat(arg7);
        builder.writeFloat(arg8);
        builder.writeBoolean(arg9);
        builder.writeBoolean(arg10);
        builder.writeBoolean(arg11);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, java.lang.String arg2, long arg3, java.lang.String arg4, int arg5, boolean arg6, boolean arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeString(arg2);
        builder.writeLong(arg3);
        builder.writeString(arg4);
        builder.writeInt(arg5);
        builder.writeBoolean(arg6);
        builder.writeBoolean(arg7);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, java.lang.String arg5, boolean arg6, int arg7, int arg8) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeString(arg4);
        builder.writeString(arg5);
        builder.writeBoolean(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, int arg3) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, int arg3, int arg4) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, int arg3, int arg4, java.lang.String arg5) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4, arg5);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, int arg3, long arg4) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, int arg3, java.lang.String arg4, int arg5) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4, arg5);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, int arg3, java.lang.String arg4, int arg5, int arg6, int arg7) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4, arg5, arg6, arg7);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4, int arg5) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4, arg5);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4, int arg5, int arg6, int arg7, boolean arg8, boolean arg9, boolean arg10, boolean arg11, boolean arg12, boolean arg13, boolean arg14, boolean arg15, boolean arg16, boolean arg17, int arg18) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18);
    }

    public static void write_non_chained(int code, int arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, int arg5) {
        write(code, new int[] {arg1}, new java.lang.String[] {arg2}, arg3, arg4, arg5);
    }

    public static StatsEvent buildStatsEvent(int code, byte[] arg1) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeByteArray(null == arg1 ? new byte[0] : arg1);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, byte[] arg1, int arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeByteArray(null == arg1 ? new byte[0] : arg1);
        builder.writeInt(arg2);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, boolean arg1, boolean arg2, boolean arg3, boolean arg4, boolean arg5, boolean arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeBoolean(arg2);
        builder.writeBoolean(arg3);
        builder.writeBoolean(arg4);
        builder.writeBoolean(arg5);
        builder.writeBoolean(arg6);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, boolean arg1, boolean arg2, boolean arg3, boolean arg4, boolean arg5, int arg6, int arg7, byte[] arg8, byte[] arg9, byte[] arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeBoolean(arg1);
        builder.writeBoolean(arg2);
        builder.writeBoolean(arg3);
        builder.writeBoolean(arg4);
        builder.writeBoolean(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeByteArray(null == arg8 ? new byte[0] : arg8);
        builder.writeByteArray(null == arg9 ? new byte[0] : arg9);
        builder.writeByteArray(null == arg10 ? new byte[0] : arg10);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (INSTALLED_INCREMENTAL_PACKAGE == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, boolean arg2, boolean arg3, int arg4, java.lang.String arg5, int arg6, byte[] arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeBoolean(arg2);
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        builder.writeString(arg5);
        builder.writeInt(arg6);
        if (DND_MODE_RULE == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeByteArray(null == arg7 ? new byte[0] : arg7);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, boolean arg2, int arg3, int arg4, long arg5, long arg6, long arg7, long arg8) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (OEM_MANAGED_BYTES_TRANSFER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeBoolean(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, boolean arg2, int arg3, long arg4, long arg5, long arg6, long arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        if (BYTES_TRANSFER_BY_TAG_AND_METERED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
        }
        builder.writeInt(arg1);
        if (BYTES_TRANSFER_BY_TAG_AND_METERED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeBoolean(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, boolean arg2, long arg3, long arg4, long arg5, long arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        if (MOBILE_BYTES_TRANSFER_BY_FG_BG == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
        }
        builder.writeInt(arg1);
        if (WIFI_BYTES_TRANSFER_BY_FG_BG == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (MOBILE_BYTES_TRANSFER_BY_FG_BG == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeBoolean(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, boolean arg3, int arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, boolean arg3, float arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeFloat(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PACKAGE_NOTIFICATION_PREFERENCES == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, int arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, int arg4, int arg5, boolean arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeBoolean(arg6);
        builder.writeInt(arg7);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, java.lang.String arg4, java.lang.String arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16, int arg17, int arg18, int arg19, int arg20, int arg21) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (CPU_TIME_PER_THREAD_FREQ == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeString(arg4);
        builder.writeString(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeInt(arg17);
        builder.writeInt(arg18);
        builder.writeInt(arg19);
        builder.writeInt(arg20);
        builder.writeInt(arg21);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, long arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (CPU_TIME_PER_UID_FREQ == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (CPU_CLUSTER_TIME == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeLong(arg3);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, long arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, long arg3, long arg4, long arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (CPU_CYCLES_PER_UID_CLUSTER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, long arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (CPU_ACTIVE_TIME == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (DEVICE_CALCULATED_POWER_BLAME_UID == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeLong(arg2);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, long arg2, long arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (BLUETOOTH_BYTES_TRANSFER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (CPU_TIME_PER_UID == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeLong(arg2);
        builder.writeLong(arg3);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, long arg2, long arg3, long arg4, long arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        if (MOBILE_BYTES_TRANSFER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
        }
        builder.writeInt(arg1);
        if (WIFI_BYTES_TRANSFER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        if (MOBILE_BYTES_TRANSFER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, long arg2, long arg3, long arg4, long arg5, int arg6, java.lang.String arg7, java.lang.String arg8, int arg9, int arg10, boolean arg11) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        if (DATA_USAGE_BYTES_TRANSFER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
        }
        builder.writeInt(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeInt(arg6);
        builder.writeString(arg7);
        builder.writeString(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeBoolean(arg11);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (DISK_IO == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeLong(arg11);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, int arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, int arg3, int arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_SYSTEM_ION_HEAP_SIZE == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, int arg3, int arg4, int arg5, int arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_DMABUF_MEMORY == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_MEMORY_SNAPSHOT == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, int arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, boolean arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (APP_OPS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeBoolean(arg10);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, int arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, int arg11) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_MEMORY_STATE == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeInt(arg11);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, long arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_MEMORY_HIGH_WATER_MARK == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeLong(arg3);
        builder.writeInt(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, long arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PROCESS_CPU_TIME == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, java.lang.String arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (ROLE_HOLDER == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, java.lang.String arg3, int arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, boolean arg11, int arg12) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (ATTRIBUTED_APP_OPS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeInt(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeBoolean(arg11);
        builder.writeInt(arg12);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, java.lang.String arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, boolean arg13, int arg14) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (BINDER_CALLS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeLong(arg11);
        builder.writeLong(arg12);
        builder.writeBoolean(arg13);
        builder.writeInt(arg14);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, boolean arg5, int arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeString(arg4);
        builder.writeBoolean(arg5);
        builder.writeInt(arg6);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, int arg5, int arg6, boolean arg7, boolean arg8, boolean arg9, boolean arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeString(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeBoolean(arg7);
        builder.writeBoolean(arg8);
        builder.writeBoolean(arg9);
        builder.writeBoolean(arg10);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, long arg5, long arg6, long arg7, long arg8, long arg9, boolean arg10, long arg11, long arg12, long arg13, long arg14, long arg15) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (LOOPER_STATS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeString(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeBoolean(arg10);
        builder.writeLong(arg11);
        builder.writeLong(arg12);
        builder.writeLong(arg13);
        builder.writeLong(arg14);
        builder.writeLong(arg15);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, java.lang.String arg5, int arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (RUNTIME_APP_OP_ACCESS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeString(arg4);
        builder.writeString(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, boolean arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeBoolean(arg2);
        builder.writeInt(arg3);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, int arg2, long arg3, long arg4, long arg5, long arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeInt(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, long arg2, long arg3, byte[] arg4, byte[] arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeByteArray(null == arg4 ? new byte[0] : arg4);
        builder.writeByteArray(null == arg5 ? new byte[0] : arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, long arg2, long arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, long arg2, long arg3, long arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeInt(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeLong(arg11);
        builder.writeLong(arg12);
        builder.writeLong(arg13);
        builder.writeLong(arg14);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14, long arg15, long arg16) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeLong(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeLong(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeLong(arg11);
        builder.writeLong(arg12);
        builder.writeLong(arg13);
        builder.writeLong(arg14);
        builder.writeLong(arg15);
        builder.writeLong(arg16);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, int arg2, boolean arg3, int arg4, int arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        if (DANGEROUS_PERMISSION_STATE_SAMPLED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, int arg2, boolean arg3, int arg4, float arg5, java.lang.String arg6, int arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeBoolean(arg3);
        builder.writeInt(arg4);
        builder.writeFloat(arg5);
        builder.writeString(arg6);
        builder.writeInt(arg7);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, int arg2, int arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, int arg2, java.lang.String arg3, boolean arg4, int arg5, int arg6) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        if (DANGEROUS_PERMISSION_STATE == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeString(arg3);
        builder.writeBoolean(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, long arg2) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeLong(arg2);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, long arg2, long arg3, long arg4, long arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeLong(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);
        builder.writeLong(arg5);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, java.lang.String arg2, long arg3, long arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeString(arg2);
        builder.writeLong(arg3);
        builder.writeLong(arg4);

        return builder.build();
    }

    public static StatsEvent buildStatsEvent(int code, java.lang.String arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, java.lang.String arg5, java.lang.String arg6, java.lang.String arg7, java.lang.String arg8, java.lang.String arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeString(arg2);
        builder.writeString(arg3);
        builder.writeString(arg4);
        builder.writeString(arg5);
        builder.writeString(arg6);
        builder.writeString(arg7);
        builder.writeString(arg8);
        builder.writeString(arg9);

        return builder.build();
    }

    // WorkSource methods.

    public static void write(int code, android.os.WorkSource ws, int arg2) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, int arg2, int arg3) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, int arg2, int arg3, java.lang.String arg4) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3, arg4);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3, arg4);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, int arg2, long arg3) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, int arg2, java.lang.String arg3, int arg4) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3, arg4);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3, arg4);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, int arg2, java.lang.String arg3, int arg4, int arg5, int arg6) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3, arg4, arg5, arg6);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3, arg4, arg5, arg6);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, java.lang.String arg2, int arg3) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, java.lang.String arg2, int arg3, int arg4) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3, arg4);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3, arg4);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, java.lang.String arg2, int arg3, int arg4, int arg5, int arg6, boolean arg7, boolean arg8, boolean arg9, boolean arg10, boolean arg11, boolean arg12, boolean arg13, boolean arg14, boolean arg15, boolean arg16, int arg17) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17);
            }
        }
    }

    public static void write(int code, android.os.WorkSource ws, java.lang.String arg2, java.lang.String arg3, int arg4) {
        for (int i = 0; i < ws.size(); ++i) {
            write_non_chained(code, ws.getUid(i), ws.getPackageName(i), arg2, arg3, arg4);
        }
        java.util.List<android.os.WorkSource.WorkChain> workChains = ws.getWorkChains();
        if (workChains != null) {
            for (android.os.WorkSource.WorkChain wc : workChains) {
                write(code, wc.getUids(), wc.getTags(), arg2, arg3, arg4);
            }
        }
    }
}
